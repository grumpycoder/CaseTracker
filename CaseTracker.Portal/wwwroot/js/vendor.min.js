!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=oe.type(e);return"function"!==n&&!oe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t,n){if(oe.isFunction(t))return oe.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return oe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(ge.test(t))return oe.filter(t,e,n);t=oe.filter(t,e)}return oe.grep(e,function(e){return Z.call(t,e)>-1!==n})}function i(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return oe.each(e.match(we)||[],function(e,n){t[n]=!0}),t}function s(){G.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s),oe.ready()}function a(){this.expando=oe.expando+a.uid++}function u(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(De,"-$&").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:Se.test(n)?oe.parseJSON(n):n)}catch(i){}Ne.set(e,t,n)}else n=void 0;return n}function l(e,t,n,r){var i,o=1,s=20,a=r?function(){return r.cur()}:function(){return oe.css(e,t,"")},u=a(),l=n&&n[3]||(oe.cssNumber[t]?"":"px"),c=(oe.cssNumber[t]||"px"!==l&&+u)&&Ae.exec(oe.css(e,t));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+u||1;do o=o||".5",c/=o,oe.style(e,t,c+l);while(o!==(o=a()/u)&&1!==o&&--s)}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}function c(e,t){var n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&oe.nodeName(e,t)?oe.merge([e],n):n}function f(e,t){for(var n=0,r=e.length;n<r;n++)Ee.set(e[n],"globalEval",!t||Ee.get(t[n],"globalEval"))}function p(e,t,n,r,i){for(var o,s,a,u,l,p,d=t.createDocumentFragment(),h=[],g=0,m=e.length;g<m;g++)if(o=e[g],o||0===o)if("object"===oe.type(o))oe.merge(h,o.nodeType?[o]:o);else if(Re.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(Oe.exec(o)||["",""])[1].toLowerCase(),u=Pe[a]||Pe._default,s.innerHTML=u[1]+oe.htmlPrefilter(o)+u[2],p=u[0];p--;)s=s.lastChild;oe.merge(h,s.childNodes),s=d.firstChild,s.textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",g=0;o=h[g++];)if(r&&oe.inArray(o,r)>-1)i&&i.push(o);else if(l=oe.contains(o.ownerDocument,o),s=c(d.appendChild(o),"script"),l&&f(s),n)for(p=0;o=s[p++];)Fe.test(o.type||"")&&n.push(o);return d}function d(){return!0}function h(){return!1}function g(){try{return G.activeElement}catch(e){}}function m(e,t,n,r,i,o){var s,a;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(a in t)m(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=h;else if(!i)return this;return 1===o&&(s=i,i=function(e){return oe().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=oe.guid++)),e.each(function(){oe.event.add(this,t,i,r,n)})}function v(e,t){return oe.nodeName(e,"table")&&oe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e:e}function y(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function x(e){var t=Xe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function b(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(Ee.hasData(e)&&(o=Ee.access(e),s=Ee.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)oe.event.add(t,i,l[i][n])}Ne.hasData(e)&&(a=Ne.access(e),u=oe.extend({},a),Ne.set(t,u))}}function w(e,t){var n=t.nodeName.toLowerCase();"input"===n&&He.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function T(e,t,n,r){t=J.apply([],t);var i,o,s,a,u,l,f=0,d=e.length,h=d-1,g=t[0],m=oe.isFunction(g);if(m||d>1&&"string"==typeof g&&!re.checkClone&&_e.test(g))return e.each(function(i){var o=e.eq(i);m&&(t[0]=g.call(this,i,o.html())),T(o,t,n,r)});if(d&&(i=p(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=oe.map(c(i,"script"),y),a=s.length;f<d;f++)u=i,f!==h&&(u=oe.clone(u,!0,!0),a&&oe.merge(s,c(u,"script"))),n.call(e[f],u,f);if(a)for(l=s[s.length-1].ownerDocument,oe.map(s,x),f=0;f<a;f++)u=s[f],Fe.test(u.type||"")&&!Ee.access(u,"globalEval")&&oe.contains(l,u)&&(u.src?oe._evalUrl&&oe._evalUrl(u.src):oe.globalEval(u.textContent.replace(ze,"")))}return e}function C(e,t,n){for(var r,i=t?oe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||oe.cleanData(c(r)),r.parentNode&&(n&&oe.contains(r.ownerDocument,r)&&f(c(r,"script")),r.parentNode.removeChild(r));return e}function k(e,t){var n=oe(t.createElement(e)).appendTo(t.body),r=oe.css(n[0],"display");return n.detach(),r}function E(e){var t=G,n=Ve[e];return n||(n=k(e,t),"none"!==n&&n||(Ue=(Ue||oe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=Ue[0].contentDocument,t.write(),t.close(),n=k(e,t),Ue.detach()),Ve[e]=n),n}function N(e,t,n){var r,i,o,s,a=e.style;return n=n||Qe(e),n&&(s=n.getPropertyValue(t)||n[t],""!==s||oe.contains(e.ownerDocument,e)||(s=oe.style(e,t)),!re.pixelMarginRight()&&Ge.test(s)&&Ye.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function S(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function D(e){if(e in rt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=nt.length;n--;)if(e=nt[n]+t,e in rt)return e}function j(e,t,n){var r=Ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function A(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;o<4;o+=2)"margin"===n&&(s+=oe.css(e,n+Le[o],!0,i)),r?("content"===n&&(s-=oe.css(e,"padding"+Le[o],!0,i)),"margin"!==n&&(s-=oe.css(e,"border"+Le[o]+"Width",!0,i))):(s+=oe.css(e,"padding"+Le[o],!0,i),"padding"!==n&&(s+=oe.css(e,"border"+Le[o]+"Width",!0,i)));return s}function L(t,n,r){var i=!0,o="width"===n?t.offsetWidth:t.offsetHeight,s=Qe(t),a="border-box"===oe.css(t,"boxSizing",!1,s);if(G.msFullscreenElement&&e.top!==e&&t.getClientRects().length&&(o=Math.round(100*t.getBoundingClientRect()[n])),o<=0||null==o){if(o=N(t,n,s),(o<0||null==o)&&(o=t.style[n]),Ge.test(o))return o;i=a&&(re.boxSizingReliable()||o===t.style[n]),o=parseFloat(o)||0}return o+A(t,n,r||(a?"border":"content"),i,s)+"px"}function q(e,t){for(var n,r,i,o=[],s=0,a=e.length;s<a;s++)r=e[s],r.style&&(o[s]=Ee.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&qe(r)&&(o[s]=Ee.access(r,"olddisplay",E(r.nodeName)))):(i=qe(r),"none"===n&&i||Ee.set(r,"olddisplay",i?n:oe.css(r,"display"))));for(s=0;s<a;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function H(e,t,n,r,i){return new H.prototype.init(e,t,n,r,i)}function O(){return e.setTimeout(function(){it=void 0}),it=oe.now()}function F(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)n=Le[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function P(e,t,n){for(var r,i=(W.tweeners[t]||[]).concat(W.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function R(e,t,n){var r,i,o,s,a,u,l,c,f=this,p={},d=e.style,h=e.nodeType&&qe(e),g=Ee.get(e,"fxshow");n.queue||(a=oe._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,oe.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],l=oe.css(e,"display"),c="none"===l?Ee.get(e,"olddisplay")||E(e.nodeName):l,"inline"===c&&"none"===oe.css(e,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],st.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;h=!0}p[r]=g&&g[r]||oe.style(e,r)}else l=void 0;if(oe.isEmptyObject(p))"inline"===("none"===l?E(e.nodeName):l)&&(d.display=l);else{g?"hidden"in g&&(h=g.hidden):g=Ee.access(e,"fxshow",{}),o&&(g.hidden=!h),h?oe(e).show():f.done(function(){oe(e).hide()}),f.done(function(){var t;Ee.remove(e,"fxshow");for(t in p)oe.style(e,t,p[t])});for(r in p)s=P(h?g[r]:0,r,f),r in g||(g[r]=s.start,h&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function M(e,t){var n,r,i,o,s;for(n in e)if(r=oe.camelCase(n),i=t[r],o=e[n],oe.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=oe.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function W(e,t,n){var r,i,o=0,s=W.prefilters.length,a=oe.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=it||O(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;s<u;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),o<1&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:oe.extend({},t),opts:oe.extend(!0,{specialEasing:{},easing:oe.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||O(),duration:n.duration,tweens:[],createTween:function(t,n){var r=oe.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),c=l.props;for(M(c,l.opts.specialEasing);o<s;o++)if(r=W.prefilters[o].call(l,e,c,l.opts))return oe.isFunction(r.stop)&&(oe._queueHooks(l.elem,l.opts.queue).stop=oe.proxy(r.stop,r)),r;return oe.map(c,P,l),oe.isFunction(l.opts.start)&&l.opts.start.call(e,l),oe.fx.timer(oe.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function I(e){return e.getAttribute&&e.getAttribute("class")||""}function $(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(we)||[];if(oe.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function B(e,t,n,r){function i(a){var u;return o[a]=!0,oe.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},s=e===Et;return i(t.dataTypes[0])||!o["*"]&&i("*")}function _(e,t){var n,r,i=oe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&oe.extend(!0,e,r),e}function X(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}function z(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(i in l)if(a=i.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(f){return{state:"parsererror",error:s?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function U(e,t,n,r){var i;if(oe.isArray(t))oe.each(t,function(t,i){n||jt.test(e)?r(e,i):U(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==oe.type(t))r(e,t);else for(i in t)U(e+"["+i+"]",t[i],n,r)}function V(e){return oe.isWindow(e)?e:9===e.nodeType&&e.defaultView}var Y=[],G=e.document,Q=Y.slice,J=Y.concat,K=Y.push,Z=Y.indexOf,ee={},te=ee.toString,ne=ee.hasOwnProperty,re={},ie="2.2.0",oe=function(e,t){return new oe.fn.init(e,t)},se=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ae=/^-ms-/,ue=/-([\da-z])/gi,le=function(e,t){return t.toUpperCase()};oe.fn=oe.prototype={jquery:ie,constructor:oe,selector:"",length:0,toArray:function(){return Q.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:Q.call(this)},pushStack:function(e){var t=oe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return oe.each(this,e)},map:function(e){return this.pushStack(oe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(Q.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:K,sort:Y.sort,splice:Y.splice},oe.extend=oe.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||oe.isFunction(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(oe.isPlainObject(r)||(i=oe.isArray(r)))?(i?(i=!1,o=n&&oe.isArray(n)?n:[]):o=n&&oe.isPlainObject(n)?n:{},s[t]=oe.extend(l,o,r)):void 0!==r&&(s[t]=r));return s},oe.extend({expando:"jQuery"+(ie+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===oe.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!oe.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){return"object"===oe.type(e)&&!e.nodeType&&!oe.isWindow(e)&&!(e.constructor&&!ne.call(e.constructor.prototype,"isPrototypeOf"))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ee[te.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=oe.trim(e),e&&(1===e.indexOf("use strict")?(t=G.createElement("script"),t.text=e,G.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(ae,"ms-").replace(ue,le)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;i<r&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(se,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?oe.merge(r,"string"==typeof e?[e]:e):K.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:Z.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;o<s;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,r){var i,o,s=0,a=[];if(n(e))for(i=e.length;s<i;s++)o=t(e[s],s,r),null!=o&&a.push(o);else for(s in e)o=t(e[s],s,r),null!=o&&a.push(o);return J.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),oe.isFunction(e))return r=Q.call(arguments,2),i=function(){return e.apply(t||this,r.concat(Q.call(arguments)))},i.guid=e.guid=e.guid||oe.guid++,i},now:Date.now,support:re}),"function"==typeof Symbol&&(oe.fn[Symbol.iterator]=Y[Symbol.iterator]),oe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ee["[object "+t+"]"]=t.toLowerCase()});var ce=function(e){function t(e,t,n,r){var i,o,s,a,u,l,f,d,h=t&&t.ownerDocument,g=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==g&&9!==g&&11!==g)return n;if(!r&&((t?t.ownerDocument||t:I)!==q&&L(t),t=t||q,O)){if(11!==g&&(l=ve.exec(e)))if(i=l[1]){if(9===g){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(h&&(s=h.getElementById(i))&&M(t,s)&&s.id===i)return n.push(s),n}else{if(l[2])return K.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&w.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(i)),n}if(w.qsa&&!z[e+" "]&&(!F||!F.test(e))){if(1!==g)h=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(xe,"\\$&"):t.setAttribute("id",a=W),f=E(e),o=f.length,u=pe.test(a)?"#"+a:"[id='"+a+"']";o--;)f[o]=u+" "+p(f[o]);d=f.join(","),h=ye.test(e)&&c(t.parentNode)||t}if(d)try{return K.apply(n,h.querySelectorAll(d)),n}catch(m){}finally{a===W&&t.removeAttribute("id")}}}return S(e.replace(ae,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>T.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[W]=!0,e}function i(e){var t=q.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)T.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function p(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=B++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,u,l,c=[$,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(l=t[W]||(t[W]={}),u=l[t.uniqueID]||(l[t.uniqueID]={}),(a=u[r])&&a[0]===$&&a[1]===o)return c[2]=a[2];if(u[r]=c,c[2]=e(t,n,s))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,l=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),l&&t.push(a)));return s}function v(e,t,n,i,o,s){return i&&!i[W]&&(i=v(i)),o&&!o[W]&&(o=v(o,s)),r(function(r,s,a,u){var l,c,f,p=[],d=[],h=s.length,v=r||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:m(v,p,e,a,u),x=n?o||(r?e:h||i)?[]:s:y;if(n&&n(y,x,a,u),i)for(l=m(x,d),i(l,[],a,u),c=l.length;c--;)(f=l[c])&&(x[d[c]]=!(y[d[c]]=f));if(r){if(o||e){if(o){for(l=[],c=x.length;c--;)(f=x[c])&&l.push(y[c]=f);o(null,x=[],l,u)}for(c=x.length;c--;)(f=x[c])&&(l=o?ee(r,f):p[c])>-1&&(r[l]=!(s[l]=f))}}else x=m(x===s?x.splice(h,x.length):x),o?o(null,s,x,u):K.apply(s,x)})}function y(e){for(var t,n,r,i=e.length,o=T.relative[e[0].type],s=o||T.relative[" "],a=o?1:0,u=d(function(e){return e===t},s,!0),l=d(function(e){return ee(t,e)>-1},s,!0),c=[function(e,n,r){var i=!o&&(r||n!==D)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];a<i;a++)if(n=T.relative[e[a].type])c=[d(h(c),n)];else{if(n=T.filter[e[a].type].apply(null,e[a].matches),n[W]){for(r=++a;r<i&&!T.relative[e[r].type];r++);return v(a>1&&h(c),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),n,a<r&&y(e.slice(a,r)),r<i&&y(e=e.slice(r)),r<i&&p(e))}c.push(n)}return h(c)}function x(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,l){var c,f,p,d=0,h="0",g=r&&[],v=[],y=D,x=r||o&&T.find.TAG("*",l),b=$+=null==y?1:Math.random()||.1,w=x.length;for(l&&(D=s===q||s||l);h!==w&&null!=(c=x[h]);h++){if(o&&c){for(f=0,s||c.ownerDocument===q||(L(c),a=!O);p=e[f++];)if(p(c,s||q,a)){u.push(c);break}l&&($=b)}i&&((c=!p&&c)&&d--,r&&g.push(c))}if(d+=h,i&&h!==d){for(f=0;p=n[f++];)p(g,v,s,a);if(r){if(d>0)for(;h--;)g[h]||v[h]||(v[h]=Q.call(u));v=m(v)}K.apply(u,v),l&&!r&&v.length>0&&d+n.length>1&&t.uniqueSort(u)}return l&&($=b,D=y),g};return i?r(s):s}var b,w,T,C,k,E,N,S,D,j,A,L,q,H,O,F,P,R,M,W="sizzle"+1*new Date,I=e.document,$=0,B=0,_=n(),X=n(),z=n(),U=function(e,t){return e===t&&(A=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,J=G.push,K=G.push,Z=G.slice,ee=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ae=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),le=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ce=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),fe=new RegExp(oe),pe=new RegExp("^"+re+"$"),de={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,me=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,xe=/'|\\/g,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),we=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Te=function(){L()};try{K.apply(G=Z.call(I.childNodes),I.childNodes),G[I.childNodes.length].nodeType}catch(Ce){K={apply:G.length?function(e,t){J.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},L=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:I;return r!==q&&9===r.nodeType&&r.documentElement?(q=r,H=q.documentElement,O=!k(q),(n=q.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Te,!1):n.attachEvent&&n.attachEvent("onunload",Te)),w.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=i(function(e){return e.appendChild(q.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=me.test(q.getElementsByClassName),w.getById=i(function(e){return H.appendChild(e).id=W,!q.getElementsByName||!q.getElementsByName(W).length}),w.getById?(T.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&O){var n=t.getElementById(e);return n?[n]:[]}},T.filter.ID=function(e){var t=e.replace(be,we);return function(e){return e.getAttribute("id")===t}}):(delete T.find.ID,T.filter.ID=function(e){var t=e.replace(be,we);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),T.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},T.find.CLASS=w.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&O)return t.getElementsByClassName(e)},P=[],F=[],(w.qsa=me.test(q.querySelectorAll))&&(i(function(e){H.appendChild(e).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&F.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||F.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+W+"-]").length||F.push("~="),e.querySelectorAll(":checked").length||F.push(":checked"),e.querySelectorAll("a#"+W+"+*").length||F.push(".#.+[+~]")}),i(function(e){var t=q.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&F.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||F.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),F.push(",.*:")})),(w.matchesSelector=me.test(R=H.matches||H.webkitMatchesSelector||H.mozMatchesSelector||H.oMatchesSelector||H.msMatchesSelector))&&i(function(e){w.disconnectedMatch=R.call(e,"div"),R.call(e,"[s!='']:x"),P.push("!=",oe)}),F=F.length&&new RegExp(F.join("|")),P=P.length&&new RegExp(P.join("|")),t=me.test(H.compareDocumentPosition),M=t||me.test(H.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===q||e.ownerDocument===I&&M(I,e)?-1:t===q||t.ownerDocument===I&&M(I,t)?1:j?ee(j,e)-ee(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],u=[t];if(!i||!o)return e===q?-1:t===q?1:i?-1:o?1:j?ee(j,e)-ee(j,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;a[r]===u[r];)r++;return r?s(a[r],u[r]):a[r]===I?-1:u[r]===I?1:0},q):q},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==q&&L(e),n=n.replace(ce,"='$1']"),w.matchesSelector&&O&&!z[n+" "]&&(!P||!P.test(n))&&(!F||!F.test(n)))try{var r=R.call(e,n);if(r||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,q,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==q&&L(e),M(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==q&&L(e);var n=T.attrHandle[t.toLowerCase()],r=n&&Y.call(T.attrHandle,t.toLowerCase())?n(e,t,!O):void 0;return void 0!==r?r:w.attributes||!O?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(A=!w.detectDuplicates,j=!w.sortStable&&e.slice(0),e.sort(U),A){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},T=t.selectors={cacheLength:50,createPseudo:r,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,we),e[3]=(e[3]||e[4]||e[5]||"").replace(be,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&fe.test(n)&&(t=E(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&_(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(se," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!u&&!a,x=!1;if(m){if(o){for(;g;){for(p=t;p=p[g];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(p=m,f=p[W]||(p[W]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),l=c[e]||[],d=l[0]===$&&l[1],x=d&&l[2],p=d&&m.childNodes[d];p=++d&&p&&p[g]||(x=d=0)||h.pop();)if(1===p.nodeType&&++x&&p===t){c[e]=[$,d,x];break}}else if(y&&(p=t,f=p[W]||(p[W]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),l=c[e]||[],d=l[0]===$&&l[1],x=d),x===!1)for(;(p=++d&&p&&p[g]||(x=d=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++x||(y&&(f=p[W]||(p[W]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),c[e]=[$,x]),p!==t)););return x-=i,x===r||x%r===0&&x/r>=0}}},PSEUDO:function(e,n){var i,o=T.pseudos[e]||T.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[W]?o(n):o.length>1?(i=[e,e,"",n],T.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=ee(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=N(e.replace(ae,"$1"));return i[W]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(be,we),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,we).toLowerCase(),function(t){var n;do if(n=O?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===H},focus:function(e){return e===q.activeElement&&(!q.hasFocus||q.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!T.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){
for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},T.pseudos.nth=T.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})T.pseudos[b]=u(b);return f.prototype=T.filters=T.pseudos,T.setFilters=new f,E=t.tokenize=function(e,n){var r,i,o,s,a,u,l,c=X[e+" "];if(c)return n?0:c.slice(0);for(a=e,u=[],l=T.preFilter;a;){r&&!(i=ue.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=le.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ae," ")}),a=a.slice(r.length));for(s in T.filter)!(i=de[s].exec(a))||l[s]&&!(i=l[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):X(e,u).slice(0)},N=t.compile=function(e,t){var n,r=[],i=[],o=z[e+" "];if(!o){for(t||(t=E(e)),n=t.length;n--;)o=y(t[n]),o[W]?r.push(o):i.push(o);o=z(e,x(i,r)),o.selector=e}return o},S=t.select=function(e,t,n,r){var i,o,s,a,u,l="function"==typeof e&&e,f=!r&&E(e=l.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&w.getById&&9===t.nodeType&&O&&T.relative[o[1].type]){if(t=(T.find.ID(s.matches[0].replace(be,we),t)||[])[0],!t)return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=de.needsContext.test(e)?0:o.length;i--&&(s=o[i],!T.relative[a=s.type]);)if((u=T.find[a])&&(r=u(s.matches[0].replace(be,we),ye.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return K.apply(n,r),n;break}}return(l||N(e,f))(r,t,!O,n,!t||ye.test(e)&&c(t.parentNode)||t),n},w.sortStable=W.split("").sort(U).join("")===W,w.detectDuplicates=!!A,L(),w.sortDetached=i(function(e){return 1&e.compareDocumentPosition(q.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;if(!n)return e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);oe.find=ce,oe.expr=ce.selectors,oe.expr[":"]=oe.expr.pseudos,oe.uniqueSort=oe.unique=ce.uniqueSort,oe.text=ce.getText,oe.isXMLDoc=ce.isXML,oe.contains=ce.contains;var fe=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&oe(e).is(n))break;r.push(e)}return r},pe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},de=oe.expr.match.needsContext,he=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,ge=/^.[^:#\[\.,]*$/;oe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?oe.find.matchesSelector(r,e)?[r]:[]:oe.find.matches(e,oe.grep(t,function(e){return 1===e.nodeType}))},oe.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;if("string"!=typeof e)return this.pushStack(oe(e).filter(function(){for(t=0;t<n;t++)if(oe.contains(i[t],this))return!0}));for(t=0;t<n;t++)oe.find(e,i[t],r);return r=this.pushStack(n>1?oe.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&de.test(e)?oe(e):e||[],!1).length}});var me,ve=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ye=oe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||me,"string"==typeof e){if(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:ve.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof oe?t[0]:t,oe.merge(this,oe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:G,!0)),he.test(r[1])&&oe.isPlainObject(t))for(r in t)oe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=G.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=G,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):oe.isFunction(e)?void 0!==n.ready?n.ready(e):e(oe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),oe.makeArray(e,this))};ye.prototype=oe.fn,me=oe(G);var xe=/^(?:parents|prev(?:Until|All))/,be={children:!0,contents:!0,next:!0,prev:!0};oe.fn.extend({has:function(e){var t=oe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(oe.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=de.test(e)||"string"!=typeof e?oe(e,t||this.context):0;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&oe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?oe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?Z.call(oe(e),this[0]):Z.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(oe.uniqueSort(oe.merge(this.get(),oe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),oe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return fe(e,"parentNode")},parentsUntil:function(e,t,n){return fe(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return fe(e,"nextSibling")},prevAll:function(e){return fe(e,"previousSibling")},nextUntil:function(e,t,n){return fe(e,"nextSibling",n)},prevUntil:function(e,t,n){return fe(e,"previousSibling",n)},siblings:function(e){return pe((e.parentNode||{}).firstChild,e)},children:function(e){return pe(e.firstChild)},contents:function(e){return e.contentDocument||oe.merge([],e.childNodes)}},function(e,t){oe.fn[e]=function(n,r){var i=oe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=oe.filter(r,i)),this.length>1&&(be[e]||oe.uniqueSort(i),xe.test(e)&&i.reverse()),this.pushStack(i)}});var we=/\S+/g;oe.Callbacks=function(e){e="string"==typeof e?o(e):oe.extend({},e);var t,n,r,i,s=[],a=[],u=-1,l=function(){for(i=e.once,r=t=!0;a.length;u=-1)for(n=a.shift();++u<s.length;)s[u].apply(n[0],n[1])===!1&&e.stopOnFalse&&(u=s.length,n=!1);e.memory||(n=!1),t=!1,i&&(s=n?[]:"")},c={add:function(){return s&&(n&&!t&&(u=s.length-1,a.push(n)),function r(t){oe.each(t,function(t,n){oe.isFunction(n)?e.unique&&c.has(n)||s.push(n):n&&n.length&&"string"!==oe.type(n)&&r(n)})}(arguments),n&&!t&&l()),this},remove:function(){return oe.each(arguments,function(e,t){for(var n;(n=oe.inArray(t,s,n))>-1;)s.splice(n,1),n<=u&&u--}),this},has:function(e){return e?oe.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return i=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return i=a=[],n||(s=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},oe.extend({Deferred:function(e){var t=[["resolve","done",oe.Callbacks("once memory"),"resolved"],["reject","fail",oe.Callbacks("once memory"),"rejected"],["notify","progress",oe.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return oe.Deferred(function(n){oe.each(t,function(t,o){var s=oe.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&oe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?oe.extend(e,r):r}},i={};return r.pipe=r.then,oe.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=Q.call(arguments),s=o.length,a=1!==s||e&&oe.isFunction(e.promise)?s:0,u=1===a?e:oe.Deferred(),l=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?Q.call(arguments):i,r===t?u.notifyWith(n,r):--a||u.resolveWith(n,r)}};if(s>1)for(t=new Array(s),n=new Array(s),r=new Array(s);i<s;i++)o[i]&&oe.isFunction(o[i].promise)?o[i].promise().progress(l(i,n,t)).done(l(i,r,o)).fail(u.reject):--a;return a||u.resolveWith(r,o),u.promise()}});var Te;oe.fn.ready=function(e){return oe.ready.promise().done(e),this},oe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?oe.readyWait++:oe.ready(!0)},ready:function(e){(e===!0?--oe.readyWait:oe.isReady)||(oe.isReady=!0,e!==!0&&--oe.readyWait>0||(Te.resolveWith(G,[oe]),oe.fn.triggerHandler&&(oe(G).triggerHandler("ready"),oe(G).off("ready"))))}}),oe.ready.promise=function(t){return Te||(Te=oe.Deferred(),"complete"===G.readyState||"loading"!==G.readyState&&!G.documentElement.doScroll?e.setTimeout(oe.ready):(G.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s))),Te.promise(t)},oe.ready.promise();var Ce=function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===oe.type(n)){i=!0;for(a in n)Ce(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,oe.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(oe(e),n)})),t))for(;a<u;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},ke=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};a.uid=1,a.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!ke(e))return{};var t=e[this.expando];return t||(t={},ke(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[t]=n;else for(r in t)i[r]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,oe.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=e[this.expando];if(void 0!==o){if(void 0===t)this.register(e);else{oe.isArray(t)?r=t.concat(t.map(oe.camelCase)):(i=oe.camelCase(t),t in o?r=[t,i]:(r=i,r=r in o?[r]:r.match(we)||[])),n=r.length;for(;n--;)delete o[r[n]]}(void 0===t||oe.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!oe.isEmptyObject(t)}};var Ee=new a,Ne=new a,Se=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,De=/[A-Z]/g;oe.extend({hasData:function(e){return Ne.hasData(e)||Ee.hasData(e)},data:function(e,t,n){return Ne.access(e,t,n)},removeData:function(e,t){Ne.remove(e,t)},_data:function(e,t,n){return Ee.access(e,t,n)},_removeData:function(e,t){Ee.remove(e,t)}}),oe.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=Ne.get(o),1===o.nodeType&&!Ee.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=oe.camelCase(r.slice(5)),u(o,r,i[r])));Ee.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Ne.set(this,e)}):Ce(this,function(t){var n,r;if(o&&void 0===t){if(n=Ne.get(o,e)||Ne.get(o,e.replace(De,"-$&").toLowerCase()),void 0!==n)return n;if(r=oe.camelCase(e),n=Ne.get(o,r),void 0!==n)return n;if(n=u(o,r,void 0),void 0!==n)return n}else r=oe.camelCase(e),this.each(function(){var n=Ne.get(this,r);Ne.set(this,r,t),e.indexOf("-")>-1&&void 0!==n&&Ne.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ne.remove(this,e)})}}),oe.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Ee.get(e,t),n&&(!r||oe.isArray(n)?r=Ee.access(e,t,oe.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=oe.queue(e,t),r=n.length,i=n.shift(),o=oe._queueHooks(e,t),s=function(){oe.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ee.get(e,n)||Ee.access(e,n,{empty:oe.Callbacks("once memory").add(function(){Ee.remove(e,[t+"queue",n])})})}}),oe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?oe.queue(this[0],e):void 0===t?this:this.each(function(){var n=oe.queue(this,e,t);oe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&oe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){oe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=oe.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=Ee.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var je=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ae=new RegExp("^(?:([+-])=|)("+je+")([a-z%]*)$","i"),Le=["Top","Right","Bottom","Left"],qe=function(e,t){return e=t||e,"none"===oe.css(e,"display")||!oe.contains(e.ownerDocument,e)},He=/^(?:checkbox|radio)$/i,Oe=/<([\w:-]+)/,Fe=/^$|\/(?:java|ecma)script/i,Pe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Pe.optgroup=Pe.option,Pe.tbody=Pe.tfoot=Pe.colgroup=Pe.caption=Pe.thead,Pe.th=Pe.td;var Re=/<|&#?\w+;/;!function(){var e=G.createDocumentFragment(),t=e.appendChild(G.createElement("div")),n=G.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),re.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",re.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Me=/^key/,We=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ie=/^([^.]*)(?:\.(.+)|)/;oe.event={global:{},add:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,m=Ee.get(e);if(m)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=oe.guid++),(u=m.events)||(u=m.events={}),(s=m.handle)||(s=m.handle=function(t){return"undefined"!=typeof oe&&oe.event.triggered!==t.type?oe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(we)||[""],l=t.length;l--;)a=Ie.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d&&(f=oe.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=oe.event.special[d]||{},c=oe.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&oe.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||(p=u[d]=[],p.delegateCount=0,f.setup&&f.setup.call(e,r,h,s)!==!1||e.addEventListener&&e.addEventListener(d,s)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),oe.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,m=Ee.hasData(e)&&Ee.get(e);if(m&&(u=m.events)){for(t=(t||"").match(we)||[""],l=t.length;l--;)if(a=Ie.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d){for(f=oe.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,p=u[d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));s&&!p.length&&(f.teardown&&f.teardown.call(e,h,m.handle)!==!1||oe.removeEvent(e,d,m.handle),delete u[d])}else for(d in u)oe.event.remove(e,d+t[l],n,r,!0);oe.isEmptyObject(u)&&Ee.remove(e,"handle events")}},dispatch:function(e){e=oe.event.fix(e);var t,n,r,i,o,s=[],a=Q.call(arguments),u=(Ee.get(this,"events")||{})[e.type]||[],l=oe.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){for(s=oe.event.handlers.call(this,e,u),t=0;(i=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(o.namespace)||(e.handleObj=o,e.data=o.data,r=((oe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(r=[],n=0;n<a;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?oe(i,this).index(u)>-1:oe.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||G,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[oe.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=We.test(i)?this.mouseHooks:Me.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new oe.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=G),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==g()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===g()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&oe.nodeName(this,"input"))return this.click(),!1},_default:function(e){return oe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},oe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},oe.Event=function(e,t){return this instanceof oe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?d:h):this.type=e,t&&oe.extend(this,t),this.timeStamp=e&&e.timeStamp||oe.now(),void(this[oe.expando]=!0)):new oe.Event(e,t)},oe.Event.prototype={constructor:oe.Event,isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=d,e&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=d,e&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=d,e&&e.stopImmediatePropagation(),this.stopPropagation()}},oe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){oe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||oe.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),oe.fn.extend({on:function(e,t,n,r){return m(this,e,t,n,r)},one:function(e,t,n,r){return m(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,oe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=h),this.each(function(){oe.event.remove(this,e,n,t)})}});var $e=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Be=/<script|<style|<link/i,_e=/checked\s*(?:[^=]|=\s*.checked.)/i,Xe=/^true\/(.*)/,ze=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;oe.extend({htmlPrefilter:function(e){return e.replace($e,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=oe.contains(e.ownerDocument,e);if(!(re.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||oe.isXMLDoc(e)))for(s=c(a),o=c(e),r=0,i=o.length;r<i;r++)w(o[r],s[r]);if(t)if(n)for(o=o||c(e),s=s||c(a),r=0,i=o.length;r<i;r++)b(o[r],s[r]);else b(e,a);return s=c(a,"script"),s.length>0&&f(s,!u&&c(e,"script")),a},cleanData:function(e){for(var t,n,r,i=oe.event.special,o=0;void 0!==(n=e[o]);o++)if(ke(n)){if(t=n[Ee.expando]){if(t.events)for(r in t.events)i[r]?oe.event.remove(n,r):oe.removeEvent(n,r,t.handle);n[Ee.expando]=void 0}n[Ne.expando]&&(n[Ne.expando]=void 0)}}}),oe.fn.extend({domManip:T,detach:function(e){return C(this,e,!0)},remove:function(e){return C(this,e)},text:function(e){return Ce(this,function(e){return void 0===e?oe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.appendChild(e)}})},prepend:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(oe.cleanData(c(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return oe.clone(this,e,t)})},html:function(e){return Ce(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Be.test(e)&&!Pe[(Oe.exec(e)||["",""])[1].toLowerCase()]){e=oe.htmlPrefilter(e);try{for(;n<r;n++)t=this[n]||{},1===t.nodeType&&(oe.cleanData(c(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return T(this,arguments,function(t){var n=this.parentNode;oe.inArray(this,e)<0&&(oe.cleanData(c(this)),n&&n.replaceChild(t,this))},e)}}),oe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){oe.fn[e]=function(e){for(var n,r=[],i=oe(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),oe(i[s])[t](n),K.apply(r,n.get());return this.pushStack(r)}});var Ue,Ve={HTML:"block",BODY:"block"},Ye=/^margin/,Ge=new RegExp("^("+je+")(?!px)[a-z%]+$","i"),Qe=function(t){var n=t.ownerDocument.defaultView;return n.opener||(n=e),n.getComputedStyle(t)},Je=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i},Ke=G.documentElement;!function(){function t(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ke.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,a.style.marginRight="50%",i="4px"===t.marginRight,Ke.removeChild(s)}var n,r,i,o,s=G.createElement("div"),a=G.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",re.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),oe.extend(re,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},pixelMarginRight:function(){return null==r&&t(),i},reliableMarginLeft:function(){return null==r&&t(),o},reliableMarginRight:function(){var t,n=a.appendChild(G.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Ke.appendChild(s),t=!parseFloat(e.getComputedStyle(n).marginRight),Ke.removeChild(s),a.removeChild(n),t}}))}();var Ze=/^(none|table(?!-c[ea]).+)/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"},nt=["Webkit","O","Moz","ms"],rt=G.createElement("div").style;oe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=N(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=oe.camelCase(t),u=e.style;return t=oe.cssProps[a]||(oe.cssProps[a]=D(a)||a),s=oe.cssHooks[t]||oe.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t]:(o=typeof n,"string"===o&&(i=Ae.exec(n))&&i[1]&&(n=l(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(oe.cssNumber[a]?"":"px")),re.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(u[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,s,a=oe.camelCase(t);return t=oe.cssProps[a]||(oe.cssProps[a]=D(a)||a),s=oe.cssHooks[t]||oe.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=N(e,t,r)),"normal"===i&&t in tt&&(i=tt[t]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),oe.each(["height","width"],function(e,t){oe.cssHooks[t]={get:function(e,n,r){if(n)return Ze.test(oe.css(e,"display"))&&0===e.offsetWidth?Je(e,et,function(){return L(e,t,r)}):L(e,t,r)},set:function(e,n,r){var i,o=r&&Qe(e),s=r&&A(e,t,r,"border-box"===oe.css(e,"boxSizing",!1,o),o);return s&&(i=Ae.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=oe.css(e,t)),j(e,n,s)}}}),oe.cssHooks.marginLeft=S(re.reliableMarginLeft,function(e,t){if(t)return(parseFloat(N(e,"marginLeft"))||e.getBoundingClientRect().left-Je(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),oe.cssHooks.marginRight=S(re.reliableMarginRight,function(e,t){if(t)return Je(e,{display:"inline-block"},N,[e,"marginRight"])}),oe.each({margin:"",padding:"",border:"Width"},function(e,t){oe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Le[r]+t]=o[r]||o[r-2]||o[0];return i}},Ye.test(e)||(oe.cssHooks[e+t].set=j)}),oe.fn.extend({css:function(e,t){return Ce(this,function(e,t,n){var r,i,o={},s=0;if(oe.isArray(t)){for(r=Qe(e),i=t.length;s<i;s++)o[t[s]]=oe.css(e,t[s],!1,r);return o}return void 0!==n?oe.style(e,t,n):oe.css(e,t)},e,t,arguments.length>1)},show:function(){return q(this,!0)},hide:function(){return q(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){qe(this)?oe(this).show():oe(this).hide()})}}),oe.Tween=H,H.prototype={constructor:H,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||oe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(oe.cssNumber[n]?"":"px")},cur:function(){var e=H.propHooks[this.prop];return e&&e.get?e.get(this):H.propHooks._default.get(this)},run:function(e){var t,n=H.propHooks[this.prop];return this.options.duration?this.pos=t=oe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}},H.prototype.init.prototype=H.prototype,H.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=oe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){oe.fx.step[e.prop]?oe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[oe.cssProps[e.prop]]&&!oe.cssHooks[e.prop]?e.elem[e.prop]=e.now:oe.style(e.elem,e.prop,e.now+e.unit)}}},H.propHooks.scrollTop=H.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},oe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},oe.fx=H.prototype.init,oe.fx.step={};var it,ot,st=/^(?:toggle|show|hide)$/,at=/queueHooks$/;oe.Animation=oe.extend(W,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return l(n.elem,e,Ae.exec(t),n),n}]},tweener:function(e,t){oe.isFunction(e)?(t=e,e=["*"]):e=e.match(we);for(var n,r=0,i=e.length;r<i;r++)n=e[r],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(t)},prefilters:[R],prefilter:function(e,t){t?W.prefilters.unshift(e):W.prefilters.push(e)}}),oe.speed=function(e,t,n){var r=e&&"object"==typeof e?oe.extend({},e):{complete:n||!n&&t||oe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!oe.isFunction(t)&&t};return r.duration=oe.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in oe.fx.speeds?oe.fx.speeds[r.duration]:oe.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){oe.isFunction(r.old)&&r.old.call(this),r.queue&&oe.dequeue(this,r.queue)},r},oe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(qe).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=oe.isEmptyObject(e),o=oe.speed(t,n,r),s=function(){var t=W(this,oe.extend({},e),o);(i||Ee.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=oe.timers,s=Ee.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&at.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||oe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=Ee.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=oe.timers,s=r?r.length:0;for(n.finish=!0,oe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),oe.each(["toggle","show","hide"],function(e,t){var n=oe.fn[t];oe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(F(t,!0),e,r,i)}}),oe.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){oe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),oe.timers=[],oe.fx.tick=function(){var e,t=0,n=oe.timers;for(it=oe.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||oe.fx.stop(),it=void 0},oe.fx.timer=function(e){oe.timers.push(e),e()?oe.fx.start():oe.timers.pop()},oe.fx.interval=13,oe.fx.start=function(){ot||(ot=e.setInterval(oe.fx.tick,oe.fx.interval));
},oe.fx.stop=function(){e.clearInterval(ot),ot=null},oe.fx.speeds={slow:600,fast:200,_default:400},oe.fn.delay=function(t,n){return t=oe.fx?oe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=G.createElement("input"),t=G.createElement("select"),n=t.appendChild(G.createElement("option"));e.type="checkbox",re.checkOn=""!==e.value,re.optSelected=n.selected,t.disabled=!0,re.optDisabled=!n.disabled,e=G.createElement("input"),e.value="t",e.type="radio",re.radioValue="t"===e.value}();var ut,lt=oe.expr.attrHandle;oe.fn.extend({attr:function(e,t){return Ce(this,oe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){oe.removeAttr(this,e)})}}),oe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?oe.prop(e,t,n):(1===o&&oe.isXMLDoc(e)||(t=t.toLowerCase(),i=oe.attrHooks[t]||(oe.expr.match.bool.test(t)?ut:void 0)),void 0!==n?null===n?void oe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=oe.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!re.radioValue&&"radio"===t&&oe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(we);if(o&&1===e.nodeType)for(;n=o[i++];)r=oe.propFix[n]||n,oe.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)}}),ut={set:function(e,t,n){return t===!1?oe.removeAttr(e,n):e.setAttribute(n,n),n}},oe.each(oe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=lt[t]||oe.find.attr;lt[t]=function(e,t,r){var i,o;return r||(o=lt[t],lt[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,lt[t]=o),i}});var ct=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;oe.fn.extend({prop:function(e,t){return Ce(this,oe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[oe.propFix[e]||e]})}}),oe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&oe.isXMLDoc(e)||(t=oe.propFix[t]||t,i=oe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=oe.find.attr(e,"tabindex");return t?parseInt(t,10):ct.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),re.optSelected||(oe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),oe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){oe.propFix[this.toLowerCase()]=this});var pt=/[\t\r\n\f]/g;oe.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,u=0;if(oe.isFunction(e))return this.each(function(t){oe(this).addClass(e.call(this,t,I(this)))});if("string"==typeof e&&e)for(t=e.match(we)||[];n=this[u++];)if(i=I(n),r=1===n.nodeType&&(" "+i+" ").replace(pt," ")){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");a=oe.trim(r),i!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,u=0;if(oe.isFunction(e))return this.each(function(t){oe(this).removeClass(e.call(this,t,I(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(we)||[];n=this[u++];)if(i=I(n),r=1===n.nodeType&&(" "+i+" ").replace(pt," ")){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");a=oe.trim(r),i!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):oe.isFunction(e)?this.each(function(n){oe(this).toggleClass(e.call(this,n,I(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=oe(this),o=e.match(we)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=I(this),t&&Ee.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":Ee.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+I(n)+" ").replace(pt," ").indexOf(t)>-1)return!0;return!1}});var dt=/\r/g;oe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=oe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,oe(this).val()):e,null==i?i="":"number"==typeof i?i+="":oe.isArray(i)&&(i=oe.map(i,function(e){return null==e?"":e+""})),t=oe.valHooks[this.type]||oe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=oe.valHooks[i.type]||oe.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(dt,""):null==n?"":n)}}}),oe.extend({valHooks:{option:{get:function(e){return oe.trim(e.value)}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||i<0,s=o?null:[],a=o?i+1:r.length,u=i<0?a:o?i:0;u<a;u++)if(n=r[u],(n.selected||u===i)&&(re.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!oe.nodeName(n.parentNode,"optgroup"))){if(t=oe(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=oe.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=oe.inArray(oe.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),oe.each(["radio","checkbox"],function(){oe.valHooks[this]={set:function(e,t){if(oe.isArray(t))return e.checked=oe.inArray(oe(e).val(),t)>-1}},re.checkOn||(oe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var ht=/^(?:focusinfocus|focusoutblur)$/;oe.extend(oe.event,{trigger:function(t,n,r,i){var o,s,a,u,l,c,f,p=[r||G],d=ne.call(t,"type")?t.type:t,h=ne.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||G,3!==r.nodeType&&8!==r.nodeType&&!ht.test(d+oe.event.triggered)&&(d.indexOf(".")>-1&&(h=d.split("."),d=h.shift(),h.sort()),l=d.indexOf(":")<0&&"on"+d,t=t[oe.expando]?t:new oe.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:oe.makeArray(n,[t]),f=oe.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!oe.isWindow(r)){for(u=f.delegateType||d,ht.test(u+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(r.ownerDocument||G)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=p[o++])&&!t.isPropagationStopped();)t.type=o>1?u:f.bindType||d,c=(Ee.get(s,"events")||{})[t.type]&&Ee.get(s,"handle"),c&&c.apply(s,n),c=l&&s[l],c&&c.apply&&ke(s)&&(t.result=c.apply(s,n),t.result===!1&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!ke(r)||l&&oe.isFunction(r[d])&&!oe.isWindow(r)&&(a=r[l],a&&(r[l]=null),oe.event.triggered=d,r[d](),oe.event.triggered=void 0,a&&(r[l]=a)),t.result}},simulate:function(e,t,n){var r=oe.extend(new oe.Event,n,{type:e,isSimulated:!0});oe.event.trigger(r,null,t),r.isDefaultPrevented()&&n.preventDefault()}}),oe.fn.extend({trigger:function(e,t){return this.each(function(){oe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return oe.event.trigger(e,t,n,!0)}}),oe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){oe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),oe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),re.focusin="onfocusin"in e,re.focusin||oe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){oe.event.simulate(t,e.target,oe.event.fix(e))};oe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Ee.access(r,t);i||r.addEventListener(e,n,!0),Ee.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Ee.access(r,t)-1;i?Ee.access(r,t,i):(r.removeEventListener(e,n,!0),Ee.remove(r,t))}}});var gt=e.location,mt=oe.now(),vt=/\?/;oe.parseJSON=function(e){return JSON.parse(e+"")},oe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(r){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||oe.error("Invalid XML: "+t),n};var yt=/#.*$/,xt=/([?&])_=[^&]*/,bt=/^(.*?):[ \t]*([^\r\n]*)$/gm,wt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Tt=/^(?:GET|HEAD)$/,Ct=/^\/\//,kt={},Et={},Nt="*/".concat("*"),St=G.createElement("a");St.href=gt.href,oe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:gt.href,type:"GET",isLocal:wt.test(gt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Nt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":oe.parseJSON,"text xml":oe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?_(_(e,oe.ajaxSettings),t):_(oe.ajaxSettings,e)},ajaxPrefilter:$(kt),ajaxTransport:$(Et),ajax:function(t,n){function r(t,n,r,a){var l,f,y,x,w,C=n;2!==b&&(b=2,u&&e.clearTimeout(u),i=void 0,s=a||"",T.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(x=X(p,T,r)),x=z(p,x,T,l),l?(p.ifModified&&(w=T.getResponseHeader("Last-Modified"),w&&(oe.lastModified[o]=w),w=T.getResponseHeader("etag"),w&&(oe.etag[o]=w)),204===t||"HEAD"===p.type?C="nocontent":304===t?C="notmodified":(C=x.state,f=x.data,y=x.error,l=!y)):(y=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(n||C)+"",l?g.resolveWith(d,[f,C,T]):g.rejectWith(d,[T,C,y]),T.statusCode(v),v=void 0,c&&h.trigger(l?"ajaxSuccess":"ajaxError",[T,p,l?f:y]),m.fireWith(d,[T,C]),c&&(h.trigger("ajaxComplete",[T,p]),--oe.active||oe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,s,a,u,l,c,f,p=oe.ajaxSetup({},n),d=p.context||p,h=p.context&&(d.nodeType||d.jquery)?oe(d):oe.event,g=oe.Deferred(),m=oe.Callbacks("once memory"),v=p.statusCode||{},y={},x={},b=0,w="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!a)for(a={};t=bt.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=x[n]=x[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(b<2)for(t in e)v[t]=[v[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||w;return i&&i.abort(t),r(0,t),this}};if(g.promise(T).complete=m.add,T.success=T.done,T.error=T.fail,p.url=((t||p.url||gt.href)+"").replace(yt,"").replace(Ct,gt.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=oe.trim(p.dataType||"*").toLowerCase().match(we)||[""],null==p.crossDomain){l=G.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=St.protocol+"//"+St.host!=l.protocol+"//"+l.host}catch(C){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=oe.param(p.data,p.traditional)),B(kt,p,n,T),2===b)return T;c=oe.event&&p.global,c&&0===oe.active++&&oe.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Tt.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(vt.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=xt.test(o)?o.replace(xt,"$1_="+mt++):o+(vt.test(o)?"&":"?")+"_="+mt++)),p.ifModified&&(oe.lastModified[o]&&T.setRequestHeader("If-Modified-Since",oe.lastModified[o]),oe.etag[o]&&T.setRequestHeader("If-None-Match",oe.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Nt+"; q=0.01":""):p.accepts["*"]);for(f in p.headers)T.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(p.beforeSend.call(d,T,p)===!1||2===b))return T.abort();w="abort";for(f in{success:1,error:1,complete:1})T[f](p[f]);if(i=B(Et,p,n,T)){if(T.readyState=1,c&&h.trigger("ajaxSend",[T,p]),2===b)return T;p.async&&p.timeout>0&&(u=e.setTimeout(function(){T.abort("timeout")},p.timeout));try{b=1,i.send(y,r)}catch(C){if(!(b<2))throw C;r(-1,C)}}else r(-1,"No Transport");return T},getJSON:function(e,t,n){return oe.get(e,t,n,"json")},getScript:function(e,t){return oe.get(e,void 0,t,"script")}}),oe.each(["get","post"],function(e,t){oe[t]=function(e,n,r,i){return oe.isFunction(n)&&(i=i||r,r=n,n=void 0),oe.ajax(oe.extend({url:e,type:t,dataType:i,data:n,success:r},oe.isPlainObject(e)&&e))}}),oe._evalUrl=function(e){return oe.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},oe.fn.extend({wrapAll:function(e){var t;return oe.isFunction(e)?this.each(function(t){oe(this).wrapAll(e.call(this,t))}):(this[0]&&(t=oe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return oe.isFunction(e)?this.each(function(t){oe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=oe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=oe.isFunction(e);return this.each(function(n){oe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){oe.nodeName(this,"body")||oe(this).replaceWith(this.childNodes)}).end()}}),oe.expr.filters.hidden=function(e){return!oe.expr.filters.visible(e)},oe.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var Dt=/%20/g,jt=/\[\]$/,At=/\r?\n/g,Lt=/^(?:submit|button|image|reset|file)$/i,qt=/^(?:input|select|textarea|keygen)/i;oe.param=function(e,t){var n,r=[],i=function(e,t){t=oe.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=oe.ajaxSettings&&oe.ajaxSettings.traditional),oe.isArray(e)||e.jquery&&!oe.isPlainObject(e))oe.each(e,function(){i(this.name,this.value)});else for(n in e)U(n,e[n],t,i);return r.join("&").replace(Dt,"+")},oe.fn.extend({serialize:function(){return oe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=oe.prop(this,"elements");return e?oe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!oe(this).is(":disabled")&&qt.test(this.nodeName)&&!Lt.test(e)&&(this.checked||!He.test(e))}).map(function(e,t){var n=oe(this).val();return null==n?null:oe.isArray(n)?oe.map(n,function(e){return{name:t.name,value:e.replace(At,"\r\n")}}):{name:t.name,value:n.replace(At,"\r\n")}}).get()}}),oe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Ht={0:200,1223:204},Ot=oe.ajaxSettings.xhr();re.cors=!!Ot&&"withCredentials"in Ot,re.ajax=Ot=!!Ot,oe.ajaxTransport(function(t){var n,r;if(re.cors||Ot&&!t.crossDomain)return{send:function(i,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)a.setRequestHeader(s,i[s]);n=function(e){return function(){n&&(n=r=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ht[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),r=a.onerror=n("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(u){if(n)throw u}},abort:function(){n&&n()}}}),oe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return oe.globalEval(e),e}}}),oe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),oe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=oe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),G.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Ft=[],Pt=/(=)\?(?=&|$)|\?\?/;oe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ft.pop()||oe.expando+"_"+mt++;return this[e]=!0,e}}),oe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(Pt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Pt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=oe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Pt,"$1"+i):t.jsonp!==!1&&(t.url+=(vt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||oe.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){void 0===o?oe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Ft.push(i)),s&&oe.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),re.createHTMLDocument=function(){var e=G.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),oe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||(re.createHTMLDocument?G.implementation.createHTMLDocument(""):G);var r=he.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=p([e],t,i),i&&i.length&&oe(i).remove(),oe.merge([],r.childNodes))};var Rt=oe.fn.load;oe.fn.load=function(e,t,n){if("string"!=typeof e&&Rt)return Rt.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=oe.trim(e.slice(a)),e=e.slice(0,a)),oe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&oe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?oe("<div>").append(oe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(s,o||[e.responseText,t,e])})}),this},oe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){oe.fn[t]=function(e){return this.on(t,e)}}),oe.expr.filters.animated=function(e){return oe.grep(oe.timers,function(t){return e===t.elem}).length},oe.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=oe.css(e,"position"),f=oe(e),p={};"static"===c&&(e.style.position="relative"),a=f.offset(),o=oe.css(e,"top"),u=oe.css(e,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(r=f.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),oe.isFunction(t)&&(t=t.call(e,n,oe.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):f.css(p)}},oe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){oe.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return t=o.documentElement,oe.contains(t,r)?(i=r.getBoundingClientRect(),n=V(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===oe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),oe.nodeName(e[0],"html")||(r=e.offset()),r.top+=oe.css(e[0],"borderTopWidth",!0)-e.scrollTop(),r.left+=oe.css(e[0],"borderLeftWidth",!0)-e.scrollLeft()),{top:t.top-r.top-oe.css(n,"marginTop",!0),left:t.left-r.left-oe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===oe.css(e,"position");)e=e.offsetParent;return e||Ke})}}),oe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;oe.fn[e]=function(r){return Ce(this,function(e,r,i){var o=V(e);return void 0===i?o?o[t]:e[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i)},e,r,arguments.length)}}),oe.each(["top","left"],function(e,t){oe.cssHooks[t]=S(re.pixelPosition,function(e,n){if(n)return n=N(e,t),Ge.test(n)?oe(e).position()[t]+"px":n})}),oe.each({Height:"height",Width:"width"},function(e,t){oe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){oe.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return Ce(this,function(t,n,r){var i;return oe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?oe.css(t,n,s):oe.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),oe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),oe.fn.andSelf=oe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return oe});var Mt=e.jQuery,Wt=e.$;return oe.noConflict=function(t){return e.$===oe&&(e.$=Wt),t&&e.jQuery===oe&&(e.jQuery=Mt),oe},t||(e.jQuery=e.$=oe),oe});
!function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t(jQuery)}(function(t){t.extend(t.fn,{validate:function(e){if(!this.length)return void(e&&e.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."));var i=t.data(this[0],"validator");return i?i:(this.attr("novalidate","novalidate"),i=new t.validator(e,this[0]),t.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",function(e){i.settings.submitHandler&&(i.submitButton=e.target),t(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==t(this).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.on("submit.validate",function(e){function s(){var s,r;return!i.settings.submitHandler||(i.submitButton&&(s=t("<input type='hidden'/>").attr("name",i.submitButton.name).val(t(i.submitButton).val()).appendTo(i.currentForm)),r=i.settings.submitHandler.call(i,i.currentForm,e),i.submitButton&&s.remove(),void 0!==r&&r)}return i.settings.debug&&e.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,s()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):s():(i.focusInvalid(),!1)})),i)},valid:function(){var e,i,s;return t(this[0]).is("form")?e=this.validate().form():(s=[],e=!0,i=t(this[0].form).validate(),this.each(function(){e=i.element(this)&&e,s=s.concat(i.errorList)}),i.errorList=s),e},rules:function(e,i){var s,r,n,a,o,l,h=this[0];if(e)switch(s=t.data(h.form,"validator").settings,r=s.rules,n=t.validator.staticRules(h),e){case"add":t.extend(n,t.validator.normalizeRule(i)),delete n.messages,r[h.name]=n,i.messages&&(s.messages[h.name]=t.extend(s.messages[h.name],i.messages));break;case"remove":return i?(l={},t.each(i.split(/\s/),function(e,i){l[i]=n[i],delete n[i],"required"===i&&t(h).removeAttr("aria-required")}),l):(delete r[h.name],n)}return a=t.validator.normalizeRules(t.extend({},t.validator.classRules(h),t.validator.attributeRules(h),t.validator.dataRules(h),t.validator.staticRules(h)),h),a.required&&(o=a.required,delete a.required,a=t.extend({required:o},a),t(h).attr("aria-required","true")),a.remote&&(o=a.remote,delete a.remote,a=t.extend(a,{remote:o})),a}}),t.extend(t.expr[":"],{blank:function(e){return!t.trim(""+t(e).val())},filled:function(e){return!!t.trim(""+t(e).val())},unchecked:function(e){return!t(e).prop("checked")}}),t.validator=function(e,i){this.settings=t.extend(!0,{},t.validator.defaults,e),this.currentForm=i,this.init()},t.validator.format=function(e,i){return 1===arguments.length?function(){var i=t.makeArray(arguments);return i.unshift(e),t.validator.format.apply(this,i)}:(arguments.length>2&&i.constructor!==Array&&(i=t.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),t.each(i,function(t,i){e=e.replace(new RegExp("\\{"+t+"\\}","g"),function(){return i})}),e)},t.extend(t.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:t([]),errorLabelContainer:t([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(t){this.lastActive=t,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,t,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(t)))},onfocusout:function(t){this.checkable(t)||!(t.name in this.submitted)&&this.optional(t)||this.element(t)},onkeyup:function(e,i){var s=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===i.which&&""===this.elementValue(e)||t.inArray(i.keyCode,s)!==-1||(e.name in this.submitted||e===this.lastElement)&&this.element(e)},onclick:function(t){t.name in this.submitted?this.element(t):t.parentNode.name in this.submitted&&this.element(t.parentNode)},highlight:function(e,i,s){"radio"===e.type?this.findByName(e.name).addClass(i).removeClass(s):t(e).addClass(i).removeClass(s)},unhighlight:function(e,i,s){"radio"===e.type?this.findByName(e.name).removeClass(i).addClass(s):t(e).removeClass(i).addClass(s)}},setDefaults:function(e){t.extend(t.validator.defaults,e)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date ( ISO ).",number:"Please enter a valid number.",digits:"Please enter only digits.",creditcard:"Please enter a valid credit card number.",equalTo:"Please enter the same value again.",maxlength:t.validator.format("Please enter no more than {0} characters."),minlength:t.validator.format("Please enter at least {0} characters."),rangelength:t.validator.format("Please enter a value between {0} and {1} characters long."),range:t.validator.format("Please enter a value between {0} and {1}."),max:t.validator.format("Please enter a value less than or equal to {0}."),min:t.validator.format("Please enter a value greater than or equal to {0}.")},autoCreateRanges:!1,prototype:{init:function(){function e(e){var i=t.data(this.form,"validator"),s="on"+e.type.replace(/^validate/,""),r=i.settings;r[s]&&!t(this).is(r.ignore)&&r[s].call(i,this,e)}this.labelContainer=t(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||t(this.currentForm),this.containers=t(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var i,s=this.groups={};t.each(this.settings.groups,function(e,i){"string"==typeof i&&(i=i.split(/\s/)),t.each(i,function(t,i){s[i]=e})}),i=this.settings.rules,t.each(i,function(e,s){i[e]=t.validator.normalizeRule(s)}),t(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox']",e).on("click.validate","select, option, [type='radio'], [type='checkbox']",e),this.settings.invalidHandler&&t(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler),t(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),t.extend(this.submitted,this.errorMap),this.invalid=t.extend({},this.errorMap),this.valid()||t(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var t=0,e=this.currentElements=this.elements();e[t];t++)this.check(e[t]);return this.valid()},element:function(e){var i=this.clean(e),s=this.validationTargetFor(i),r=!0;return this.lastElement=s,void 0===s?delete this.invalid[i.name]:(this.prepareElement(s),this.currentElements=t(s),r=this.check(s)!==!1,r?delete this.invalid[s.name]:this.invalid[s.name]=!0),t(e).attr("aria-invalid",!r),this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),r},showErrors:function(e){if(e){t.extend(this.errorMap,e),this.errorList=[];for(var i in e)this.errorList.push({message:e[i],element:this.findByName(i)[0]});this.successList=t.grep(this.successList,function(t){return!(t.name in e)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){t.fn.resetForm&&t(this.currentForm).resetForm(),this.submitted={},this.lastElement=null,this.prepareForm(),this.hideErrors();var e,i=this.elements().removeData("previousValue").removeAttr("aria-invalid");if(this.settings.unhighlight)for(e=0;i[e];e++)this.settings.unhighlight.call(this,i[e],this.settings.errorClass,"");else i.removeClass(this.settings.errorClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(t){var e,i=0;for(e in t)i++;return i},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(t){t.not(this.containers).text(""),this.addWrapper(t).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{t(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(e){}},findLastActive:function(){var e=this.lastActive;return e&&1===t.grep(this.errorList,function(t){return t.element.name===e.name}).length&&e},elements:function(){var e=this,i={};return t(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){return!this.name&&e.settings.debug&&window.console&&console.error("%o has no name assigned",this),!(this.name in i||!e.objectLength(t(this).rules()))&&(i[this.name]=!0,!0)})},clean:function(e){return t(e)[0]},errors:function(){var e=this.settings.errorClass.split(" ").join(".");return t(this.settings.errorElement+"."+e,this.errorContext)},reset:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=t([]),this.toHide=t([]),this.currentElements=t([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(t){this.reset(),this.toHide=this.errorsFor(t)},elementValue:function(e){var i,s=t(e),r=e.type;return"radio"===r||"checkbox"===r?this.findByName(e.name).filter(":checked").val():"number"===r&&"undefined"!=typeof e.validity?!e.validity.badInput&&s.val():(i=s.val(),"string"==typeof i?i.replace(/\r/g,""):i)},check:function(e){e=this.validationTargetFor(this.clean(e));var i,s,r,n=t(e).rules(),a=t.map(n,function(t,e){return e}).length,o=!1,l=this.elementValue(e);for(s in n){r={method:s,parameters:n[s]};try{if(i=t.validator.methods[s].call(this,l,e,r.parameters),"dependency-mismatch"===i&&1===a){o=!0;continue}if(o=!1,"pending"===i)return void(this.toHide=this.toHide.not(this.errorsFor(e)));if(!i)return this.formatAndAdd(e,r),!1}catch(h){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+e.id+", check the '"+r.method+"' method.",h),h instanceof TypeError&&(h.message+=".  Exception occurred when checking element "+e.id+", check the '"+r.method+"' method."),h}}if(!o)return this.objectLength(n)&&this.successList.push(e),!0},customDataMessage:function(e,i){return t(e).data("msg"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase())||t(e).data("msg")},customMessage:function(t,e){var i=this.settings.messages[t];return i&&(i.constructor===String?i:i[e])},findDefined:function(){for(var t=0;t<arguments.length;t++)if(void 0!==arguments[t])return arguments[t]},defaultMessage:function(e,i){return this.findDefined(this.customMessage(e.name,i),this.customDataMessage(e,i),!this.settings.ignoreTitle&&e.title||void 0,t.validator.messages[i],"<strong>Warning: No message defined for "+e.name+"</strong>")},formatAndAdd:function(e,i){var s=this.defaultMessage(e,i.method),r=/\$?\{(\d+)\}/g;"function"==typeof s?s=s.call(this,i.parameters,e):r.test(s)&&(s=t.validator.format(s.replace(r,"{$1}"),i.parameters)),this.errorList.push({message:s,element:e,method:i.method}),this.errorMap[e.name]=s,this.submitted[e.name]=s},addWrapper:function(t){return this.settings.wrapper&&(t=t.add(t.parent(this.settings.wrapper))),t},defaultShowErrors:function(){var t,e,i;for(t=0;this.errorList[t];t++)i=this.errorList[t],this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(t=0;this.successList[t];t++)this.showLabel(this.successList[t]);if(this.settings.unhighlight)for(t=0,e=this.validElements();e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return t(this.errorList).map(function(){return this.element})},showLabel:function(e,i){var s,r,n,a=this.errorsFor(e),o=this.idOrName(e),l=t(e).attr("aria-describedby");a.length?(a.removeClass(this.settings.validClass).addClass(this.settings.errorClass),a.html(i)):(a=t("<"+this.settings.errorElement+">").attr("id",o+"-error").addClass(this.settings.errorClass).html(i||""),s=a,this.settings.wrapper&&(s=a.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(s):this.settings.errorPlacement?this.settings.errorPlacement(s,t(e)):s.insertAfter(e),a.is("label")?a.attr("for",o):0===a.parents("label[for='"+o+"']").length&&(n=a.attr("id").replace(/(:|\.|\[|\]|\$)/g,"\\$1"),l?l.match(new RegExp("\\b"+n+"\\b"))||(l+=" "+n):l=n,t(e).attr("aria-describedby",l),r=this.groups[e.name],r&&t.each(this.groups,function(e,i){i===r&&t("[name='"+e+"']",this.currentForm).attr("aria-describedby",a.attr("id"))}))),!i&&this.settings.success&&(a.text(""),"string"==typeof this.settings.success?a.addClass(this.settings.success):this.settings.success(a,e)),this.toShow=this.toShow.add(a)},errorsFor:function(e){var i=this.idOrName(e),s=t(e).attr("aria-describedby"),r="label[for='"+i+"'], label[for='"+i+"'] *";return s&&(r=r+", #"+s.replace(/\s+/g,", #")),this.errors().filter(r)},idOrName:function(t){return this.groups[t.name]||(this.checkable(t)?t.name:t.id||t.name)},validationTargetFor:function(e){return this.checkable(e)&&(e=this.findByName(e.name)),t(e).not(this.settings.ignore)[0]},checkable:function(t){return/radio|checkbox/i.test(t.type)},findByName:function(e){return t(this.currentForm).find("[name='"+e+"']")},getLength:function(e,i){switch(i.nodeName.toLowerCase()){case"select":return t("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return e.length},depend:function(t,e){return!this.dependTypes[typeof t]||this.dependTypes[typeof t](t,e)},dependTypes:{"boolean":function(t){return t},string:function(e,i){return!!t(e,i.form).length},"function":function(t,e){return t(e)}},optional:function(e){var i=this.elementValue(e);return!t.validator.methods.required.call(this,i,e)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,this.pending[t.name]=!0)},stopRequest:function(e,i){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[e.name],i&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(t(this.currentForm).submit(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(t(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(e){return t.data(e,"previousValue")||t.data(e,"previousValue",{old:null,valid:!0,message:this.defaultMessage(e,"remote")})},destroy:function(){this.resetForm(),t(this.currentForm).off(".validate").removeData("validator")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(e,i){e.constructor===String?this.classRuleSettings[e]=i:t.extend(this.classRuleSettings,e)},classRules:function(e){var i={},s=t(e).attr("class");return s&&t.each(s.split(" "),function(){this in t.validator.classRuleSettings&&t.extend(i,t.validator.classRuleSettings[this])}),i},normalizeAttributeRule:function(t,e,i,s){/min|max/.test(i)&&(null===e||/number|range|text/.test(e))&&(s=Number(s),isNaN(s)&&(s=void 0)),s||0===s?t[i]=s:e===i&&"range"!==e&&(t[i]=!0)},attributeRules:function(e){var i,s,r={},n=t(e),a=e.getAttribute("type");for(i in t.validator.methods)"required"===i?(s=e.getAttribute(i),""===s&&(s=!0),s=!!s):s=n.attr(i),this.normalizeAttributeRule(r,a,i,s);return r.maxlength&&/-1|2147483647|524288/.test(r.maxlength)&&delete r.maxlength,r},dataRules:function(e){var i,s,r={},n=t(e),a=e.getAttribute("type");for(i in t.validator.methods)s=n.data("rule"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase()),this.normalizeAttributeRule(r,a,i,s);return r},staticRules:function(e){var i={},s=t.data(e.form,"validator");return s.settings.rules&&(i=t.validator.normalizeRule(s.settings.rules[e.name])||{}),i},normalizeRules:function(e,i){return t.each(e,function(s,r){if(r===!1)return void delete e[s];if(r.param||r.depends){var n=!0;switch(typeof r.depends){case"string":n=!!t(r.depends,i.form).length;break;case"function":n=r.depends.call(i,i)}n?e[s]=void 0===r.param||r.param:delete e[s]}}),t.each(e,function(s,r){e[s]=t.isFunction(r)?r(i):r}),t.each(["minlength","maxlength"],function(){e[this]&&(e[this]=Number(e[this]))}),t.each(["rangelength","range"],function(){var i;e[this]&&(t.isArray(e[this])?e[this]=[Number(e[this][0]),Number(e[this][1])]:"string"==typeof e[this]&&(i=e[this].replace(/[\[\]]/g,"").split(/[\s,]+/),e[this]=[Number(i[0]),Number(i[1])]))}),t.validator.autoCreateRanges&&(null!=e.min&&null!=e.max&&(e.range=[e.min,e.max],delete e.min,delete e.max),null!=e.minlength&&null!=e.maxlength&&(e.rangelength=[e.minlength,e.maxlength],delete e.minlength,delete e.maxlength)),e},normalizeRule:function(e){if("string"==typeof e){var i={};t.each(e.split(/\s/),function(){i[this]=!0}),e=i}return e},addMethod:function(e,i,s){t.validator.methods[e]=i,t.validator.messages[e]=void 0!==s?s:t.validator.messages[e],i.length<3&&t.validator.addClassRules(e,t.validator.normalizeRule(e))},methods:{required:function(e,i,s){if(!this.depend(s,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){var r=t(i).val();return r&&r.length>0}return this.checkable(i)?this.getLength(e,i)>0:e.length>0},email:function(t,e){return this.optional(e)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(t)},url:function(t,e){return this.optional(e)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[\/?#]\S*)?$/i.test(t)},date:function(t,e){return this.optional(e)||!/Invalid|NaN/.test(new Date(t).toString())},dateISO:function(t,e){return this.optional(e)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(t)},number:function(t,e){return this.optional(e)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(t)},digits:function(t,e){return this.optional(e)||/^\d+$/.test(t)},creditcard:function(t,e){if(this.optional(e))return"dependency-mismatch";if(/[^0-9 \-]+/.test(t))return!1;var i,s,r=0,n=0,a=!1;if(t=t.replace(/\D/g,""),t.length<13||t.length>19)return!1;for(i=t.length-1;i>=0;i--)s=t.charAt(i),n=parseInt(s,10),a&&(n*=2)>9&&(n-=9),r+=n,a=!a;return r%10===0},minlength:function(e,i,s){var r=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||r>=s},maxlength:function(e,i,s){var r=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||r<=s},rangelength:function(e,i,s){var r=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||r>=s[0]&&r<=s[1]},min:function(t,e,i){return this.optional(e)||t>=i},max:function(t,e,i){return this.optional(e)||t<=i},range:function(t,e,i){return this.optional(e)||t>=i[0]&&t<=i[1]},equalTo:function(e,i,s){var r=t(s);return this.settings.onfocusout&&r.off(".validate-equalTo").on("blur.validate-equalTo",function(){t(i).valid()}),e===r.val()},remote:function(e,i,s){if(this.optional(i))return"dependency-mismatch";var r,n,a=this.previousValue(i);return this.settings.messages[i.name]||(this.settings.messages[i.name]={}),a.originalMessage=this.settings.messages[i.name].remote,this.settings.messages[i.name].remote=a.message,s="string"==typeof s&&{url:s}||s,a.old===e?a.valid:(a.old=e,r=this,this.startRequest(i),n={},n[i.name]=e,t.ajax(t.extend(!0,{mode:"abort",port:"validate"+i.name,dataType:"json",data:n,context:r.currentForm,success:function(s){var n,o,l,h=s===!0||"true"===s;r.settings.messages[i.name].remote=a.originalMessage,h?(l=r.formSubmitted,r.prepareElement(i),r.formSubmitted=l,r.successList.push(i),delete r.invalid[i.name],r.showErrors()):(n={},o=s||r.defaultMessage(i,"remote"),n[i.name]=a.message=t.isFunction(o)?o(e):o,r.invalid[i.name]=!0,r.showErrors(n)),a.valid=h,r.stopRequest(i,h)}},s)),"pending")}}});var e,i={};t.ajaxPrefilter?t.ajaxPrefilter(function(t,e,s){var r=t.port;"abort"===t.mode&&(i[r]&&i[r].abort(),i[r]=s)}):(e=t.ajax,t.ajax=function(s){var r=("mode"in s?s:t.ajaxSettings).mode,n=("port"in s?s:t.ajaxSettings).port;return"abort"===r?(i[n]&&i[n].abort(),i[n]=e.apply(this,arguments),i[n]):e.apply(this,arguments)})});
!function(a){function e(a,e,n){a.rules[e]=n,a.message&&(a.messages[e]=a.message)}function n(a){return a.replace(/^\s+|\s+$/g,"").split(/\s*,\s*/g)}function t(a){return a.replace(/([!"#$%&'()*+,.\/:;<=>?@\[\\\]^`{|}~])/g,"\\$1")}function r(a){return a.substr(0,a.lastIndexOf(".")+1)}function i(a,e){return 0===a.indexOf("*.")&&(a=a.replace("*.",e)),a}function o(e,n){var r=a(this).find("[data-valmsg-for='"+t(n[0].name)+"']"),i=r.attr("data-valmsg-replace"),o=i?a.parseJSON(i)!==!1:null;r.removeClass("field-validation-valid").addClass("field-validation-error"),e.data("unobtrusiveContainer",r),o?(r.empty(),e.removeClass("input-validation-error").appendTo(r)):e.hide()}function d(e,n){var t=a(this).find("[data-valmsg-summary=true]"),r=t.find("ul");r&&r.length&&n.errorList.length&&(r.empty(),t.addClass("validation-summary-errors").removeClass("validation-summary-valid"),a.each(n.errorList,function(){a("<li />").html(this.message).appendTo(r)}))}function s(e){var n=e.data("unobtrusiveContainer");if(n){var t=n.attr("data-valmsg-replace"),r=t?a.parseJSON(t):null;n.addClass("field-validation-valid").removeClass("field-validation-error"),e.removeData("unobtrusiveContainer"),r&&n.empty()}}function l(e){var n=a(this),t="__jquery_unobtrusive_validation_form_reset";if(!n.data(t)){n.data(t,!0);try{n.data("validator").resetForm()}finally{n.removeData(t)}n.find(".validation-summary-errors").addClass("validation-summary-valid").removeClass("validation-summary-errors"),n.find(".field-validation-error").addClass("field-validation-valid").removeClass("field-validation-error").removeData("unobtrusiveContainer").find(">*").removeData("unobtrusiveContainer")}}function m(e){var n=a(e),t=n.data(v),r=a.proxy(l,e),i=p.unobtrusive.options||{},m=function(n,t){var r=i[n];r&&a.isFunction(r)&&r.apply(e,t)};return t||(t={options:{errorClass:i.errorClass||"input-validation-error",errorElement:i.errorElement||"span",errorPlacement:function(){o.apply(e,arguments),m("errorPlacement",arguments)},invalidHandler:function(){d.apply(e,arguments),m("invalidHandler",arguments)},messages:{},rules:{},success:function(){s.apply(e,arguments),m("success",arguments)}},attachValidation:function(){n.off("reset."+v,r).on("reset."+v,r).validate(this.options)},validate:function(){return n.validate(),n.valid()}},n.data(v,t)),t}var u,p=a.validator,v="unobtrusiveValidation";p.unobtrusive={adapters:[],parseElement:function(e,n){var t,r,i,o=a(e),d=o.parents("form")[0];d&&(t=m(d),t.options.rules[e.name]=r={},t.options.messages[e.name]=i={},a.each(this.adapters,function(){var n="data-val-"+this.name,t=o.attr(n),s={};void 0!==t&&(n+="-",a.each(this.params,function(){s[this]=o.attr(n+this)}),this.adapt({element:e,form:d,message:t,params:s,rules:r,messages:i}))}),a.extend(r,{__dummy__:!0}),n||t.attachValidation())},parse:function(e){var n=a(e),t=n.parents().addBack().filter("form").add(n.find("form")).has("[data-val=true]");n.find("[data-val=true]").each(function(){p.unobtrusive.parseElement(this,!0)}),t.each(function(){var a=m(this);a&&a.attachValidation()})}},u=p.unobtrusive.adapters,u.add=function(a,e,n){return n||(n=e,e=[]),this.push({name:a,params:e,adapt:n}),this},u.addBool=function(a,n){return this.add(a,function(t){e(t,n||a,!0)})},u.addMinMax=function(a,n,t,r,i,o){return this.add(a,[i||"min",o||"max"],function(a){var i=a.params.min,o=a.params.max;i&&o?e(a,r,[i,o]):i?e(a,n,i):o&&e(a,t,o)})},u.addSingleVal=function(a,n,t){return this.add(a,[n||"val"],function(r){e(r,t||a,r.params[n])})},p.addMethod("__dummy__",function(a,e,n){return!0}),p.addMethod("regex",function(a,e,n){var t;return!!this.optional(e)||(t=new RegExp(n).exec(a),t&&0===t.index&&t[0].length===a.length)}),p.addMethod("nonalphamin",function(a,e,n){var t;return n&&(t=a.match(/\W/g),t=t&&t.length>=n),t}),p.methods.extension?(u.addSingleVal("accept","mimtype"),u.addSingleVal("extension","extension")):u.addSingleVal("extension","extension","accept"),u.addSingleVal("regex","pattern"),u.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url"),u.addMinMax("length","minlength","maxlength","rangelength").addMinMax("range","min","max","range"),u.addMinMax("minlength","minlength").addMinMax("maxlength","minlength","maxlength"),u.add("equalto",["other"],function(n){var o=r(n.element.name),d=n.params.other,s=i(d,o),l=a(n.form).find(":input").filter("[name='"+t(s)+"']")[0];e(n,"equalTo",l)}),u.add("required",function(a){"INPUT"===a.element.tagName.toUpperCase()&&"CHECKBOX"===a.element.type.toUpperCase()||e(a,"required",!0)}),u.add("remote",["url","type","additionalfields"],function(o){var d={url:o.params.url,type:o.params.type||"GET",data:{}},s=r(o.element.name);a.each(n(o.params.additionalfields||o.element.name),function(e,n){var r=i(n,s);d.data[r]=function(){var e=a(o.form).find(":input").filter("[name='"+t(r)+"']");return e.is(":checkbox")?e.filter(":checked").val()||e.filter(":hidden").val()||"":e.is(":radio")?e.filter(":checked").val()||"":e.val()}}),e(o,"remote",d)}),u.add("password",["min","nonalphamin","regex"],function(a){a.params.min&&e(a,"minlength",a.params.min),a.params.nonalphamin&&e(a,"nonalphamin",a.params.nonalphamin),a.params.regex&&e(a,"regex",a.params.regex)}),a(function(){p.unobtrusive.parse(document)})}(jQuery);
!function(t){"use strict";function e(t){return w(t)?void(b(t.objectMaxDepth)&&(Qr.objectMaxDepth=n(t.objectMaxDepth)?t.objectMaxDepth:NaN)):Qr}function n(t){return E(t)&&t>0}function r(t,e){return e=e||Error,function(){var n,r,i=arguments[0],o=arguments[1],a="["+(t?t+":":"")+i+"] ",s=G(arguments,2).map(function(t){return St(t,Qr.objectMaxDepth)});for(a+=o.replace(/\{\d+\}/g,function(t){var e=+t.slice(1,-1);return e<s.length?s[e]:t}),a+="\nhttp://errors.angularjs.org/1.6.6/"+(t?t+"/":"")+i,r=0,n="?";r<s.length;r++,n="&")a+=n+"p"+r+"="+encodeURIComponent(s[r]);return new e(a)}}function i(t){if(null==t||M(t))return!1;if(yi(t)||C(t)||si&&t instanceof si)return!0;var e="length"in Object(t)&&t.length;return E(e)&&(e>=0&&(e-1 in t||t instanceof Array)||"function"==typeof t.item)}function o(t,e,n){var r,a;if(t)if(A(t))for(r in t)"prototype"!==r&&"length"!==r&&"name"!==r&&t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else if(yi(t)||i(t)){var s="object"!=typeof t;for(r=0,a=t.length;r<a;r++)(s||r in t)&&e.call(n,t[r],r,t)}else if(t.forEach&&t.forEach!==o)t.forEach(e,n,t);else if(x(t))for(r in t)e.call(n,t[r],r,t);else if("function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else for(r in t)ei.call(t,r)&&e.call(n,t[r],r,t);return t}function a(t,e,n){for(var r=Object.keys(t).sort(),i=0;i<r.length;i++)e.call(n,t[r[i]],r[i]);return r}function s(t){return function(e,n){t(n,e)}}function u(){return++mi}function c(t,e){e?t.$$hashKey=e:delete t.$$hashKey}function l(t,e,n){for(var r=t.$$hashKey,i=0,o=e.length;i<o;++i){var a=e[i];if(w(a)||A(a))for(var s=Object.keys(a),u=0,f=s.length;u<f;u++){var h=s[u],p=a[h];n&&w(p)?S(p)?t[h]=new Date(p.valueOf()):O(p)?t[h]=new RegExp(p):p.nodeName?t[h]=p.cloneNode(!0):R(p)?t[h]=p.clone():(w(t[h])||(t[h]=yi(p)?[]:{}),l(t[h],[p],!0)):t[h]=p}}return c(t,r),t}function f(t){return l(t,li.call(arguments,1),!1)}function h(t){return l(t,li.call(arguments,1),!0)}function p(t){return parseInt(t,10)}function d(t,e){return f(Object.create(t),e)}function $(){}function v(t){return t}function m(t){return function(){return t}}function g(t){return A(t.toString)&&t.toString!==pi}function y(t){return"undefined"==typeof t}function b(t){return"undefined"!=typeof t}function w(t){return null!==t&&"object"==typeof t}function x(t){return null!==t&&"object"==typeof t&&!di(t)}function C(t){return"string"==typeof t}function E(t){return"number"==typeof t}function S(t){return"[object Date]"===pi.call(t)}function k(t){var e=pi.call(t);switch(e){case"[object Error]":return!0;case"[object Exception]":return!0;case"[object DOMException]":return!0;default:return t instanceof Error}}function A(t){return"function"==typeof t}function O(t){return"[object RegExp]"===pi.call(t)}function M(t){return t&&t.window===t}function V(t){return t&&t.$evalAsync&&t.$watch}function T(t){return"[object File]"===pi.call(t)}function N(t){return"[object FormData]"===pi.call(t)}function I(t){return"[object Blob]"===pi.call(t)}function j(t){return"boolean"==typeof t}function D(t){return t&&A(t.then)}function P(t){return t&&E(t.length)&&bi.test(pi.call(t))}function _(t){return"[object ArrayBuffer]"===pi.call(t)}function R(t){return!(!t||!(t.nodeName||t.prop&&t.attr&&t.find))}function U(t){var e,n={},r=t.split(",");for(e=0;e<r.length;e++)n[r[e]]=!0;return n}function L(t){return ni(t.nodeName||t[0]&&t[0].nodeName)}function q(t,e){return Array.prototype.indexOf.call(t,e)!==-1}function F(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),n}function B(t,e,r){function i(t,e,n){if(n--,n<0)return"...";var r,i=e.$$hashKey;if(yi(t))for(var o=0,s=t.length;o<s;o++)e.push(a(t[o],n));else if(x(t))for(r in t)e[r]=a(t[r],n);else if(t&&"function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&(e[r]=a(t[r],n));else for(r in t)ei.call(t,r)&&(e[r]=a(t[r],n));return c(e,i),e}function a(t,e){if(!w(t))return t;var n=u.indexOf(t);if(n!==-1)return l[n];if(M(t)||V(t))throw $i("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,o=s(t);return void 0===o&&(o=yi(t)?[]:Object.create(di(t)),r=!0),u.push(t),l.push(o),r?i(t,o,e):o}function s(t){switch(pi.call(t)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new t.constructor(a(t.buffer),t.byteOffset,t.length);case"[object ArrayBuffer]":if(!t.slice){var e=new ArrayBuffer(t.byteLength);return new Uint8Array(e).set(new Uint8Array(t)),e}return t.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new t.constructor(t.valueOf());case"[object RegExp]":var n=new RegExp(t.source,t.toString().match(/[^\/]*$/)[0]);return n.lastIndex=t.lastIndex,n;case"[object Blob]":return new t.constructor([t],{type:t.type})}if(A(t.cloneNode))return t.cloneNode(!0)}var u=[],l=[];if(r=n(r)?r:NaN,e){if(P(e)||_(e))throw $i("cpta","Can't copy! TypedArray destination cannot be mutated.");if(t===e)throw $i("cpi","Can't copy! Source and destination are identical.");return yi(e)?e.length=0:o(e,function(t,n){"$$hashKey"!==n&&delete e[n]}),u.push(t),l.push(e),i(t,e,r)}return a(t,r)}function H(t,e){return t===e||t!==t&&e!==e}function z(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!==t&&e!==e)return!0;var n,r,i,o=typeof t,a=typeof e;if(o===a&&"object"===o){if(!yi(t)){if(S(t))return!!S(e)&&H(t.getTime(),e.getTime());if(O(t))return!!O(e)&&t.toString()===e.toString();if(V(t)||V(e)||M(t)||M(e)||yi(e)||S(e)||O(e))return!1;i=bt();for(r in t)if("$"!==r.charAt(0)&&!A(t[r])){if(!z(t[r],e[r]))return!1;i[r]=!0}for(r in e)if(!(r in i)&&"$"!==r.charAt(0)&&b(e[r])&&!A(e[r]))return!1;return!0}if(!yi(e))return!1;if((n=t.length)===e.length){for(r=0;r<n;r++)if(!z(t[r],e[r]))return!1;return!0}}return!1}function W(t,e,n){return t.concat(li.call(e,n))}function G(t,e){return li.call(t,e||0)}function K(t,e){var n=arguments.length>2?G(arguments,2):[];return!A(e)||e instanceof RegExp?e:n.length?function(){return arguments.length?e.apply(t,W(n,arguments,0)):e.apply(t,n)}:function(){return arguments.length?e.apply(t,arguments):e.call(t)}}function J(e,n){var r=n;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?r=void 0:M(n)?r="$WINDOW":n&&t.document===n?r="$DOCUMENT":V(n)&&(r="$SCOPE"),r}function Z(t,e){if(!y(t))return E(e)||(e=e?2:null),JSON.stringify(t,J,e)}function Y(t){return C(t)?JSON.parse(t):t}function Q(t,e){t=t.replace(Si,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+t)/6e4;return gi(n)?e:n}function X(t,e){return t=new Date(t.getTime()),t.setMinutes(t.getMinutes()+e),t}function tt(t,e,n){n=n?-1:1;var r=t.getTimezoneOffset(),i=Q(e,r);return X(t,n*(i-r))}function et(t){t=si(t).clone().empty();var e=si("<div>").append(t).html();try{return t[0].nodeType===Ni?ni(e):e.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(t,e){return"<"+ni(e)})}catch(n){return ni(e)}}function nt(t){try{return decodeURIComponent(t)}catch(e){}}function rt(t){var e={};return o((t||"").split("&"),function(t){var n,r,i;t&&(r=t=t.replace(/\+/g,"%20"),n=t.indexOf("="),n!==-1&&(r=t.substring(0,n),i=t.substring(n+1)),r=nt(r),b(r)&&(i=!b(i)||nt(i),ei.call(e,r)?yi(e[r])?e[r].push(i):e[r]=[e[r],i]:e[r]=i))}),e}function it(t){var e=[];return o(t,function(t,n){yi(t)?o(t,function(t){e.push(at(n,!0)+(t===!0?"":"="+at(t,!0)))}):e.push(at(n,!0)+(t===!0?"":"="+at(t,!0)))}),e.length?e.join("&"):""}function ot(t){return at(t,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function at(t,e){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,e?"%20":"+")}function st(t,e){var n,r,i=ki.length;for(r=0;r<i;++r)if(n=ki[r]+e,C(n=t.getAttribute(n)))return n;return null}function ut(e){var n=e.currentScript;if(!n)return!0;if(!(n instanceof t.HTMLScriptElement||n instanceof t.SVGScriptElement))return!1;var r=n.attributes,i=[r.getNamedItem("src"),r.getNamedItem("href"),r.getNamedItem("xlink:href")];return i.every(function(t){if(!t)return!0;if(!t.value)return!1;var n=e.createElement("a");if(n.href=t.value,e.location.origin===n.origin)return!0;switch(n.protocol){case"http:":case"https:":case"ftp:":case"blob:":case"file:":case"data:":return!0;default:return!1}})}function ct(e,n){var r,i,a={};if(o(ki,function(t){var n=t+"app";!r&&e.hasAttribute&&e.hasAttribute(n)&&(r=e,i=e.getAttribute(n))}),o(ki,function(t){var n,o=t+"app";!r&&(n=e.querySelector("["+o.replace(":","\\:")+"]"))&&(r=n,i=n.getAttribute(o))}),r){if(!Ai)return void t.console.error("Angular: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match.");a.strictDi=null!==st(r,"strict-di"),n(r,i?[i]:[],a)}}function lt(e,n,r){w(r)||(r={});var i={strictDi:!1};r=f(i,r);var a=function(){if(e=si(e),e.injector()){var i=e[0]===t.document?"document":et(e);throw $i("btstrpd","App already bootstrapped with this element '{0}'",i.replace(/</,"&lt;").replace(/>/,"&gt;"))}n=n||[],n.unshift(["$provide",function(t){t.value("$rootElement",e)}]),r.debugInfoEnabled&&n.push(["$compileProvider",function(t){t.debugInfoEnabled(!0)}]),n.unshift("ng");var o=he(n,r.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(t,e,n,r){t.$apply(function(){e.data("$injector",r),n(e)(t)})}]),o},s=/^NG_ENABLE_DEBUG_INFO!/,u=/^NG_DEFER_BOOTSTRAP!/;return t&&s.test(t.name)&&(r.debugInfoEnabled=!0,t.name=t.name.replace(s,"")),t&&!u.test(t.name)?a():(t.name=t.name.replace(u,""),vi.resumeBootstrap=function(t){return o(t,function(t){n.push(t)}),a()},void(A(vi.resumeDeferredBootstrap)&&vi.resumeDeferredBootstrap()))}function ft(){t.name="NG_ENABLE_DEBUG_INFO!"+t.name,t.location.reload()}function ht(t){var e=vi.element(t).injector();if(!e)throw $i("test","no injector found for element argument to getTestability");return e.get("$$testability")}function pt(t,e){return e=e||"_",t.replace(Oi,function(t,n){return(n?e:"")+t.toLowerCase()})}function dt(){var e;if(!Mi){var n=Ei();ui=y(n)?t.jQuery:n?t[n]:void 0,ui&&ui.fn.on?(si=ui,f(ui.fn,{scope:Ji.scope,isolateScope:Ji.isolateScope,controller:Ji.controller,injector:Ji.injector,inheritedData:Ji.inheritedData}),e=ui.cleanData,ui.cleanData=function(t){for(var n,r,i=0;null!=(r=t[i]);i++)n=ui._data(r,"events"),n&&n.$destroy&&ui(r).triggerHandler("$destroy");e(t)}):si=_t,vi.element=si,Mi=!0}}function $t(t,e,n){if(!t)throw $i("areq","Argument '{0}' is {1}",e||"?",n||"required");return t}function vt(t,e,n){return n&&yi(t)&&(t=t[t.length-1]),$t(A(t),e,"not a function, got "+(t&&"object"==typeof t?t.constructor.name||"Object":typeof t)),t}function mt(t,e){if("hasOwnProperty"===t)throw $i("badname","hasOwnProperty is not a valid {0} name",e)}function gt(t,e,n){if(!e)return t;for(var r,i=e.split("."),o=t,a=i.length,s=0;s<a;s++)r=i[s],t&&(t=(o=t)[r]);return!n&&A(t)?K(o,t):t}function yt(t){for(var e,n=t[0],r=t[t.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(e||t[i]!==n)&&(e||(e=si(li.call(t,0,i))),e.push(n));return e||t}function bt(){return Object.create(null)}function wt(t){if(null==t)return"";switch(typeof t){case"string":break;case"number":t=""+t;break;default:t=!g(t)||yi(t)||S(t)?Z(t):t.toString()}return t}function xt(t){function e(t,e,n){return t[e]||(t[e]=n())}var n=r("$injector"),i=r("ng"),o=e(t,"angular",Object);return o.$$minErr=o.$$minErr||r,e(o,"module",function(){var t={};return function(r,o,a){var s={},u=function(t,e){if("hasOwnProperty"===t)throw i("badname","hasOwnProperty is not a valid {0} name",e)};return u(r,"module"),o&&t.hasOwnProperty(r)&&(t[r]=null),e(t,r,function(){function t(t,e,n,r){return r||(r=u),function(){return r[n||"push"]([t,e,arguments]),h}}function e(t,e,n){return n||(n=u),function(i,o){return o&&A(o)&&(o.$$moduleName=r),n.push([t,e,arguments]),h}}if(!o)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var u=[],c=[],l=[],f=t("$injector","invoke","push",c),h={_invokeQueue:u,_configBlocks:c,_runBlocks:l,info:function(t){if(b(t)){if(!w(t))throw i("aobj","Argument '{0}' must be an object","value");return s=t,this}return s},requires:o,name:r,provider:e("$provide","provider"),factory:e("$provide","factory"),service:e("$provide","service"),value:t("$provide","value"),constant:t("$provide","constant","unshift"),decorator:e("$provide","decorator",c),animation:e("$animateProvider","register"),filter:e("$filterProvider","register"),controller:e("$controllerProvider","register"),directive:e("$compileProvider","directive"),component:e("$compileProvider","component"),config:f,run:function(t){return l.push(t),this}};return a&&f(a),h})}})}function Ct(t,e){if(yi(t)){e=e||[];for(var n=0,r=t.length;n<r;n++)e[n]=t[n]}else if(w(t)){e=e||{};for(var i in t)"$"===i.charAt(0)&&"$"===i.charAt(1)||(e[i]=t[i])}return e||t}function Et(t,e){var r=[];return n(e)&&(t=vi.copy(t,null,e)),JSON.stringify(t,function(t,e){if(e=J(t,e),w(e)){if(r.indexOf(e)>=0)return"...";r.push(e)}return e})}function St(t,e){return"function"==typeof t?t.toString().replace(/ \{[\s\S]*$/,""):y(t)?"undefined":"string"!=typeof t?Et(t,e):t}function kt(n){f(n,{errorHandlingConfig:e,bootstrap:lt,copy:B,extend:f,merge:h,equals:z,element:si,forEach:o,injector:he,noop:$,bind:K,toJson:Z,fromJson:Y,identity:v,isUndefined:y,isDefined:b,isString:C,isFunction:A,isObject:w,isNumber:E,isElement:R,isArray:yi,version:Pi,isDate:S,lowercase:ni,uppercase:ri,callbacks:{$$counter:0},getTestability:ht,reloadWithDebugInfo:ft,$$minErr:r,$$csp:Ci,$$encodeUriSegment:ot,$$encodeUriQuery:at,$$stringify:wt}),ci=xt(t),ci("ng",["ngLocale"],["$provide",function(t){t.provider({$$sanitizeUri:Dn}),t.provider("$compile",Ce).directive({a:aa,input:ka,textarea:ka,form:ha,script:bs,select:Cs,option:Es,ngBind:Ma,ngBindHtml:Ta,ngBindTemplate:Va,ngClass:Ia,ngClassEven:Da,ngClassOdd:ja,ngCloak:Pa,ngController:_a,ngForm:pa,ngHide:ps,ngIf:La,ngInclude:qa,ngInit:Ba,ngNonBindable:is,ngPluralize:us,ngRepeat:cs,ngShow:hs,ngStyle:ds,ngSwitch:$s,ngSwitchWhen:vs,ngSwitchDefault:ms,ngOptions:ss,ngTransclude:ys,ngModel:es,ngList:Ha,ngChange:Na,pattern:ks,ngPattern:ks,required:Ss,ngRequired:Ss,minlength:Os,ngMinlength:Os,maxlength:As,ngMaxlength:As,ngValue:Oa,ngModelOptions:rs}).directive({ngInclude:Fa}).directive(sa).directive(Ra),t.provider({$anchorScroll:pe,$animate:po,$animateCss:mo,$$animateJs:fo,$$animateQueue:ho,$$AnimateRunner:vo,$$animateAsyncRun:$o,$browser:ye,$cacheFactory:be,$controller:Me,$document:Ve,$$isDocumentHidden:Te,$exceptionHandler:Ne,$filter:Zn,$$forceReflow:Eo,$interpolate:We,$interval:Ge,$http:Fe,$httpParamSerializer:je,$httpParamSerializerJQLike:De,$httpBackend:He,$xhrFactory:Be,$jsonpCallbacks:No,$location:cn,$log:ln,$parse:kn,$rootScope:jn,$q:An,$$q:On,$sce:Ln,$sceDelegate:Un,$sniffer:qn,$templateCache:we,$templateRequest:Fn,$$testability:Bn,$timeout:Hn,$window:Gn,$$rAF:In,$$jqLite:oe,$$Map:eo,$$cookieReader:Jn})}]).info({angularVersion:"1.6.6"})}function At(){return++Ri}function Ot(t){return Vt(t.replace(Li,"ms-"))}function Mt(t,e){return e.toUpperCase()}function Vt(t){return t.replace(Ui,Mt)}function Tt(t){return!Hi.test(t)}function Nt(t){var e=t.nodeType;return e===Vi||!e||e===ji}function It(t){for(var e in _i[t.ng339])return!0;return!1}function jt(t,e){var n,r,i,a,s=e.createDocumentFragment(),u=[];if(Tt(t))u.push(e.createTextNode(t));else{for(n=s.appendChild(e.createElement("div")),r=(zi.exec(t)||["",""])[1].toLowerCase(),i=Gi[r]||Gi._default,n.innerHTML=i[1]+t.replace(Wi,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;u=W(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",o(u,function(t){s.appendChild(t)}),s}function Dt(e,n){n=n||t.document;var r;return(r=Bi.exec(e))?[n.createElement(r[1])]:(r=jt(e,n))?r.childNodes:[]}function Pt(t,e){var n=t.parentNode;n&&n.replaceChild(e,t),e.appendChild(t)}function _t(t){if(t instanceof _t)return t;var e;if(C(t)&&(t=wi(t),e=!0),!(this instanceof _t)){if(e&&"<"!==t.charAt(0))throw Fi("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new _t(t)}e?Gt(this,Dt(t)):A(t)?Xt(t):Gt(this,t)}function Rt(t){return t.cloneNode(!0)}function Ut(t,e){!e&&Nt(t)&&si.cleanData([t]),t.querySelectorAll&&si.cleanData(t.querySelectorAll("*"))}function Lt(t,e,n,r){if(b(r))throw Fi("offargs","jqLite#off() does not support the `selector` argument");var i=Ft(t),a=i&&i.events,s=i&&i.handle;if(s)if(e){var u=function(e){var r=a[e];b(n)&&F(r||[],n),b(n)&&r&&r.length>0||(t.removeEventListener(e,s),delete a[e])};o(e.split(" "),function(t){u(t),qi[t]&&u(qi[t])})}else for(e in a)"$destroy"!==e&&t.removeEventListener(e,s),delete a[e]}function qt(t,e){var n=t.ng339,r=n&&_i[n];if(r){if(e)return void delete r.data[e];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),Lt(t)),delete _i[n],t.ng339=void 0}}function Ft(t,e){var n=t.ng339,r=n&&_i[n];return e&&!r&&(t.ng339=n=At(),r=_i[n]={events:{},data:{},handle:void 0}),r}function Bt(t,e,n){if(Nt(t)){var r,i=b(n),o=!i&&e&&!w(e),a=!e,s=Ft(t,!o),u=s&&s.data;if(i)u[Vt(e)]=n;else{if(a)return u;if(o)return u&&u[Vt(e)];for(r in e)u[Vt(r)]=e[r]}}}function Ht(t,e){return!!t.getAttribute&&(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+e+" ")>-1}function zt(t,e){e&&t.setAttribute&&o(e.split(" "),function(e){t.setAttribute("class",wi((" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+wi(e)+" "," ")))})}function Wt(t,e){if(e&&t.setAttribute){var n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(e.split(" "),function(t){t=wi(t),n.indexOf(" "+t+" ")===-1&&(n+=t+" ")}),t.setAttribute("class",wi(n))}}function Gt(t,e){if(e)if(e.nodeType)t[t.length++]=e;else{var n=e.length;if("number"==typeof n&&e.window!==e){if(n)for(var r=0;r<n;r++)t[t.length++]=e[r]}else t[t.length++]=e}}function Kt(t,e){return Jt(t,"$"+(e||"ngController")+"Controller")}function Jt(t,e,n){t.nodeType===ji&&(t=t.documentElement);for(var r=yi(e)?e:[e];t;){for(var i=0,o=r.length;i<o;i++)if(b(n=si.data(t,r[i])))return n;t=t.parentNode||t.nodeType===Di&&t.host}}function Zt(t){for(Ut(t,!0);t.firstChild;)t.removeChild(t.firstChild)}function Yt(t,e){e||Ut(t);var n=t.parentNode;n&&n.removeChild(t)}function Qt(e,n){n=n||t,"complete"===n.document.readyState?n.setTimeout(e):si(n).on("load",e)}function Xt(e){function n(){t.document.removeEventListener("DOMContentLoaded",n),t.removeEventListener("load",n),e()}"complete"===t.document.readyState?t.setTimeout(e):(t.document.addEventListener("DOMContentLoaded",n),t.addEventListener("load",n))}function te(t,e){var n=Zi[e.toLowerCase()];return n&&Yi[L(t)]&&n}function ee(t){return Qi[t]}function ne(t,e){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=e[r||n.type],o=i?i.length:0;if(o){if(y(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var s=i.specialHandlerWrapper||re;o>1&&(i=Ct(i));for(var u=0;u<o;u++)n.isImmediatePropagationStopped()||s(t,n,i[u])}};return n.elem=t,n}function re(t,e,n){n.call(t,e)}function ie(t,e,n){var r=e.relatedTarget;r&&(r===t||Ki.call(t,r))||n.call(t,e)}function oe(){this.$get=function(){return f(_t,{hasClass:function(t,e){return t.attr&&(t=t[0]),Ht(t,e)},addClass:function(t,e){return t.attr&&(t=t[0]),Wt(t,e)},removeClass:function(t,e){return t.attr&&(t=t[0]),zt(t,e)}})}}function ae(t,e){var n=t&&t.$$hashKey;if(n)return"function"==typeof n&&(n=t.$$hashKey()),n;var r=typeof t;return n="function"===r||"object"===r&&null!==t?t.$$hashKey=r+":"+(e||u)():r+":"+t}function se(){this._keys=[],this._values=[],this._lastKey=NaN,this._lastIndex=-1}function ue(t){return Function.prototype.toString.call(t)}function ce(t){var e=ue(t).replace(ao,""),n=e.match(no)||e.match(ro);return n}function le(t){var e=ce(t);return e?"function("+(e[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function fe(t,e,n){var r,i,a;if("function"==typeof t){if(!(r=t.$inject)){if(r=[],t.length){if(e)throw C(n)&&n||(n=t.name||le(t)),so("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=ce(t),o(i[1].split(io),function(t){t.replace(oo,function(t,e,n){r.push(n)})})}t.$inject=r}}else yi(t)?(a=t.length-1,vt(t[a],"fn"),r=t.slice(0,a)):vt(t,"fn",!0);return r}function he(t,e){function n(t){return function(e,n){return w(e)?void o(e,s(t)):t(e,n)}}function r(t,e){if(mt(t,"service"),(A(e)||yi(e))&&(e=x.instantiate(e)),!e.$get)throw so("pget","Provider '{0}' must define $get factory method.",t);return b[t+$]=e}function i(t,e){return function(){var n=k.invoke(e,this);if(y(n))throw so("undef","Provider '{0}' must return a value from $get factory method.",t);return n}}function a(t,e,n){return r(t,{$get:n!==!1?i(t,e):e})}function u(t,e){return a(t,["$injector",function(t){return t.instantiate(e)}])}function c(t,e){return a(t,m(e),!1)}function l(t,e){mt(t,"constant"),b[t]=e,E[t]=e}function f(t,e){var n=x.get(t+$),r=n.$get;n.$get=function(){var t=k.invoke(r,n);return k.invoke(e,null,{$delegate:t})}}function h(t){$t(y(t)||yi(t),"modulesToLoad","not an array");var e,n=[];return o(t,function(t){function r(t){var e,n;for(e=0,n=t.length;e<n;e++){var r=t[e],i=x.get(r[0]);i[r[1]].apply(i,r[2])}}if(!g.get(t)){g.set(t,!0);try{C(t)?(e=ci(t),k.modules[t]=e,n=n.concat(h(e.requires)).concat(e._runBlocks),r(e._invokeQueue),r(e._configBlocks)):A(t)?n.push(x.invoke(t)):yi(t)?n.push(x.invoke(t)):vt(t,"module")}catch(i){throw yi(t)&&(t=t[t.length-1]),i.message&&i.stack&&i.stack.indexOf(i.message)===-1&&(i=i.message+"\n"+i.stack),so("modulerr","Failed to instantiate module {0} due to:\n{1}",t,i.stack||i.message||i)}}}),n}function p(t,n){function r(e,r){if(t.hasOwnProperty(e)){if(t[e]===d)throw so("cdep","Circular dependency found: {0}",e+" <- "+v.join(" <- "));return t[e]}try{return v.unshift(e),t[e]=d,t[e]=n(e,r),t[e]}catch(i){throw t[e]===d&&delete t[e],i}finally{v.shift()}}function i(t,n,i){for(var o=[],a=he.$$annotate(t,e,i),s=0,u=a.length;s<u;s++){var c=a[s];if("string"!=typeof c)throw so("itkn","Incorrect injection token! Expected service name as string, got {0}",c);o.push(n&&n.hasOwnProperty(c)?n[c]:r(c,i))}return o}function o(t){if(ai||"function"!=typeof t)return!1;var e=t.$$ngIsClass;return j(e)||(e=t.$$ngIsClass=/^(?:class\b|constructor\()/.test(ue(t))),e}function a(t,e,n,r){"string"==typeof n&&(r=n,n=null);var a=i(t,n,r);return yi(t)&&(t=t[t.length-1]),o(t)?(a.unshift(null),new(Function.prototype.bind.apply(t,a))):t.apply(e,a)}function s(t,e,n){var r=yi(t)?t[t.length-1]:t,o=i(t,e,n);return o.unshift(null),new(Function.prototype.bind.apply(r,o))}return{invoke:a,instantiate:s,get:r,annotate:he.$$annotate,has:function(e){return b.hasOwnProperty(e+$)||t.hasOwnProperty(e)}}}e=e===!0;var d={},$="Provider",v=[],g=new to,b={$provide:{provider:n(r),factory:n(a),service:n(u),value:n(c),constant:n(l),decorator:f}},x=b.$injector=p(b,function(t,e){throw vi.isString(e)&&v.push(e),so("unpr","Unknown provider: {0}",v.join(" <- "))}),E={},S=p(E,function(t,e){var n=x.get(t+$,e);return k.invoke(n.$get,n,void 0,t)}),k=S;b["$injector"+$]={$get:m(S)},k.modules=x.modules=bt();var O=h(t);return k=S.get("$injector"),k.strictDi=e,o(O,function(t){t&&k.invoke(t)}),k}function pe(){var t=!0;this.disableAutoScrolling=function(){t=!1},this.$get=["$window","$location","$rootScope",function(e,n,r){function i(t){var e=null;return Array.prototype.some.call(t,function(t){if("a"===L(t))return e=t,!0}),e}function o(){var t=s.yOffset;if(A(t))t=t();else if(R(t)){var n=t[0],r=e.getComputedStyle(n);t="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else E(t)||(t=0);return t}function a(t){if(t){t.scrollIntoView();var n=o();if(n){var r=t.getBoundingClientRect().top;e.scrollBy(0,r-n)}}else e.scrollTo(0,0)}function s(t){t=C(t)?t:E(t)?t.toString():n.hash();var e;t?(e=u.getElementById(t))?a(e):(e=i(u.getElementsByName(t)))?a(e):"top"===t&&a(null):a(null)}var u=e.document;return t&&r.$watch(function(){return n.hash()},function(t,e){t===e&&""===t||Qt(function(){r.$evalAsync(s)})}),s}]}function de(t,e){return t||e?t?e?(yi(t)&&(t=t.join(" ")),yi(e)&&(e=e.join(" ")),t+" "+e):t:e:""}function $e(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.nodeType===co)return n}}function ve(t){C(t)&&(t=t.split(" "));var e=bt();return o(t,function(t){t.length&&(e[t]=!0)}),e}function me(t){return w(t)?t:{}}function ge(t,e,n,r){function i(t){try{t.apply(null,G(arguments,1))}finally{if(m--,0===m)for(;g.length;)try{g.pop()()}catch(e){n.error(e)}}}function a(t){var e=t.indexOf("#");return e===-1?"":t.substr(e)}function s(){E=null,c()}function u(){b=S(),b=y(b)?null:b,z(b,O)&&(b=O),O=b,w=b}function c(){var t=w;u(),x===l.url()&&t===b||(x=l.url(),w=b,o(k,function(t){t(l.url(),b)}))}var l=this,f=t.location,h=t.history,p=t.setTimeout,d=t.clearTimeout,v={};l.isMock=!1;var m=0,g=[];l.$$completeOutstandingRequest=i,l.$$incOutstandingRequestCount=function(){m++},l.notifyWhenNoOutstandingRequests=function(t){0===m?t():g.push(t)};var b,w,x=f.href,C=e.find("base"),E=null,S=r.history?function(){try{return h.state}catch(t){}}:$;u(),l.url=function(e,n,i){if(y(i)&&(i=null),f!==t.location&&(f=t.location),h!==t.history&&(h=t.history),e){var o=w===i;if(x===e&&(!r.history||o))return l;var s=x&&Xe(x)===Xe(e);return x=e,w=i,!r.history||s&&o?(s||(E=e),n?f.replace(e):s?f.hash=a(e):f.href=e,f.href!==e&&(E=e)):(h[n?"replaceState":"pushState"](i,"",e),u()),E&&(E=e),l}return E||f.href.replace(/%27/g,"'")},l.state=function(){return b};var k=[],A=!1,O=null;l.onUrlChange=function(e){return A||(r.history&&si(t).on("popstate",s),si(t).on("hashchange",s),A=!0),k.push(e),e},l.$$applicationDestroyed=function(){si(t).off("hashchange popstate",s)},l.$$checkUrlChange=c,l.baseHref=function(){var t=C.attr("href");return t?t.replace(/^(https?:)?\/\/[^\/]*/,""):""},l.defer=function(t,e){var n;return m++,n=p(function(){delete v[n],i(t)},e||0),v[n]=!0,n},l.defer.cancel=function(t){return!!v[t]&&(delete v[t],d(t),i($),!0)}}function ye(){this.$get=["$window","$log","$sniffer","$document",function(t,e,n,r){return new ge(t,r,e,n)}]}function be(){this.$get=function(){function t(t,n){function i(t){t!==h&&(p?p===t&&(p=t.n):p=t,o(t.n,t.p),o(t,h),h=t,h.n=null)}function o(t,e){t!==e&&(t&&(t.p=e),e&&(e.n=t))}if(t in e)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",t);var a=0,s=f({},n,{id:t}),u=bt(),c=n&&n.capacity||Number.MAX_VALUE,l=bt(),h=null,p=null;return e[t]={put:function(t,e){if(!y(e)){if(c<Number.MAX_VALUE){var n=l[t]||(l[t]={key:t});i(n)}return t in u||a++,u[t]=e,a>c&&this.remove(p.key),e}},get:function(t){if(c<Number.MAX_VALUE){var e=l[t];if(!e)return;i(e)}return u[t]},remove:function(t){if(c<Number.MAX_VALUE){var e=l[t];if(!e)return;e===h&&(h=e.p),e===p&&(p=e.n),o(e.n,e.p),delete l[t]}t in u&&(delete u[t],a--)},removeAll:function(){u=bt(),a=0,l=bt(),h=p=null},destroy:function(){u=null,s=null,l=null,delete e[t]},info:function(){return f({},s,{size:a})}}}var e={};return t.info=function(){var t={};return o(e,function(e,n){t[n]=e.info()}),t},t.get=function(t){return e[t]},t}}function we(){this.$get=["$cacheFactory",function(t){return t("templates")}]}function xe(){}function Ce(e,n){function r(t,e,n){var r=/^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/,i=bt();return o(t,function(t,o){if(t in O)return void(i[o]=O[t]);var a=t.match(r);if(!a)throw go("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",e,o,t,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o},a[4]&&(O[t]=i[o])}),i}function i(t,e){var n={isolateScope:null,bindToController:null};if(w(t.scope)&&(t.bindToController===!0?(n.bindToController=r(t.scope,e,!0),n.isolateScope={}):n.isolateScope=r(t.scope,e,!1)),w(t.bindToController)&&(n.bindToController=r(t.bindToController,e,!0)),n.bindToController&&!t.controller)throw go("noctrl","Cannot bind to controller without directive '{0}'s controller.",e);return n}function a(t){var e=t.charAt(0);if(!e||e!==ni(e))throw go("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",t);if(t!==t.trim())throw go("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",t)}function u(t){var e=t.require||t.controller&&t.name;return!yi(e)&&w(e)&&o(e,function(t,n){var r=t.match(E),i=t.substring(r[0].length);i||(e[n]=r[0]+n)}),e}function c(t,e){if(t&&(!C(t)||!/[EACM]/.test(t)))throw go("badrestrict","Restrict property '{0}' of directive '{1}' is invalid",t,e);return t||"EA"}var l={},h="Directive",p=/^\s*directive:\s*([\w-]+)\s+(.*)$/,g=/(([\w-]+)(?::([^;]+))?;?)/,x=U("ngSrc,ngSrcset,src,srcset"),E=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,S=/^(on[a-z]+|formaction)$/,O=bt();this.directive=function _(t,n){return $t(t,"name"),mt(t,"directive"),C(t)?(a(t),$t(n,"directiveFactory"),l.hasOwnProperty(t)||(l[t]=[],e.factory(t+h,["$injector","$exceptionHandler",function(e,n){var r=[];return o(l[t],function(i,o){try{var a=e.invoke(i);A(a)?a={compile:m(a)}:!a.compile&&a.link&&(a.compile=m(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||t,a.require=u(a),a.restrict=c(a.restrict,t),a.$$moduleName=i.$$moduleName,r.push(a)}catch(s){n(s)}}),r}])),l[t].push(n)):o(t,s(_)),this},this.component=function R(t,e){function n(t){function n(e){return A(e)||yi(e)?function(n,r){return t.invoke(e,this,{$element:n,$attrs:r})}:e}var i=e.template||e.templateUrl?e.template:"",a={controller:r,controllerAs:Oe(e.controller)||e.controllerAs||"$ctrl",template:n(i),templateUrl:n(e.templateUrl),transclude:e.transclude,scope:{},bindToController:e.bindings||{},restrict:"E",require:e.require};return o(e,function(t,e){"$"===e.charAt(0)&&(a[e]=t)}),a}if(!C(t))return o(t,s(K(this,R))),this;var r=e.controller||function(){};return o(e,function(t,e){"$"===e.charAt(0)&&(n[e]=t,A(r)&&(r[e]=t))}),n.$inject=["$injector"],this.directive(t,n)},this.aHrefSanitizationWhitelist=function(t){return b(t)?(n.aHrefSanitizationWhitelist(t),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(t){return b(t)?(n.imgSrcSanitizationWhitelist(t),this):n.imgSrcSanitizationWhitelist()};var M=!0;this.debugInfoEnabled=function(t){return b(t)?(M=t,this):M};var T=!1;this.preAssignBindingsEnabled=function(t){return b(t)?(T=t,this):T};var N=!1;this.strictComponentBindingsEnabled=function(t){return b(t)?(N=t,this):N};var I=10;this.onChangesTtl=function(t){return arguments.length?(I=t,this):I};var D=!0;this.commentDirectivesEnabled=function(t){return arguments.length?(D=t,this):D};var P=!0;this.cssClassDirectivesEnabled=function(t){return arguments.length?(P=t,this):P},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(e,n,r,a,s,u,c,m,O,_){function R(){try{if(!--It)throw At=void 0,go("infchng","{0} $onChanges() iterations reached. Aborting!\n",I);c.$apply(function(){for(var t=[],e=0,n=At.length;e<n;++e)try{At[e]()}catch(r){t.push(r)}if(At=void 0,t.length)throw t})}finally{It++}}function U(t,e){if(e){var n,r,i,o=Object.keys(e);for(n=0,r=o.length;n<r;n++)i=o[n],this[i]=e[i]}else this.$attr={};this.$$element=t}function q(t,e,n){Mt.innerHTML="<span "+e+">";var r=Mt.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,t.attributes.setNamedItem(i)}function B(t,e){try{t.addClass(e)}catch(n){}}function W(t,e,n,r,i){t instanceof si||(t=si(t));var o=Z(t,e,t,n,r,i);W.$$addScopeClass(t);var a=null;return function(e,n,r){if(!t)throw go("multilink","This element has already been linked.");$t(e,"scope"),i&&i.needsNewScope&&(e=e.$parent.$new()),r=r||{};var s=r.parentBoundTranscludeFn,u=r.transcludeControllers,c=r.futureParentElement;s&&s.$$boundTransclude&&(s=s.$$boundTransclude),
a||(a=J(c));var l;if(l="html"!==a?si(gt(a,si("<div>").append(t).html())):n?Ji.clone.call(t):t,u)for(var f in u)l.data("$"+f+"Controller",u[f].instance);return W.$$addScopeInfo(l,e),n&&n(l,e),o&&o(e,l,l,s),n||(t=o=null),l}}function J(t){var e=t&&t[0];return e&&"foreignobject"!==L(e)&&pi.call(e).match(/SVG/)?"svg":"html"}function Z(t,e,n,r,i,o){function a(t,n,r,i){var o,a,s,u,c,l,f,h,$;if(p){var v=n.length;for($=new Array(v),c=0;c<d.length;c+=3)f=d[c],$[f]=n[f]}else $=n;for(c=0,l=d.length;c<l;)s=$[d[c++]],o=d[c++],a=d[c++],o?(o.scope?(u=t.$new(),W.$$addScopeInfo(si(s),u)):u=t,h=o.transcludeOnThisElement?Q(t,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&e?Q(t,e):null,o(a,u,s,r,h)):a&&a(t,s.childNodes,void 0,i)}for(var s,u,c,l,f,h,p,d=[],$=yi(t)||t instanceof si,v=0;v<t.length;v++)s=new U,11===ai&&Y(t,v,$),u=X(t[v],[],s,0===v?r:void 0,i),c=u.length?ot(u,t[v],s,e,n,null,[],[],o):null,c&&c.scope&&W.$$addScopeClass(s.$$element),f=c&&c.terminal||!(l=t[v].childNodes)||!l.length?null:Z(l,c?(c.transcludeOnThisElement||!c.templateOnThisElement)&&c.transclude:e),(c||f)&&(d.push(v,c,f),h=!0,p=p||c),o=null;return h?a:null}function Y(t,e,n){var r,i=t[e],o=i.parentNode;if(i.nodeType===Ni)for(;;){if(r=o?i.nextSibling:t[e+1],!r||r.nodeType!==Ni)break;i.nodeValue=i.nodeValue+r.nodeValue,r.parentNode&&r.parentNode.removeChild(r),n&&r===t[e+1]&&t.splice(e+1,1)}}function Q(t,e,n){function r(r,i,o,a,s){return r||(r=t.$new(!1,s),r.$$transcluded=!0),e(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i=r.$$slots=bt();for(var o in e.$$slots)e.$$slots[o]?i[o]=Q(t,e.$$slots[o],n):i[o]=null;return r}function X(t,e,n,r,i){var o,a,s,u=t.nodeType,c=n.$attr;switch(u){case Vi:a=L(t),ct(e,Se(a),"E",r,i);for(var l,f,h,p,d,$,v=t.attributes,m=0,y=v&&v.length;m<y;m++){var b=!1,x=!1;l=v[m],f=l.name,d=l.value,p=Se(f),$=_t.test(p),$&&(f=f.replace(bo,"").substr(8).replace(/_(.)/g,function(t,e){return e.toUpperCase()}));var E=p.match(Ut);E&&lt(E[1])&&(b=f,x=f.substr(0,f.length-5)+"end",f=f.substr(0,f.length-6)),h=Se(f.toLowerCase()),c[h]=f,!$&&n.hasOwnProperty(h)||(n[h]=d,te(t,h)&&(n[h]=!0)),wt(t,e,d,h,$),ct(e,h,"A",r,i,b,x)}if("input"===a&&"hidden"===t.getAttribute("type")&&t.setAttribute("autocomplete","off"),!Nt)break;if(s=t.className,w(s)&&(s=s.animVal),C(s)&&""!==s)for(;o=g.exec(s);)h=Se(o[2]),ct(e,h,"C",r,i)&&(n[h]=wi(o[3])),s=s.substr(o.index+o[0].length);break;case Ni:mt(e,t.nodeValue);break;case Ii:if(!Vt)break;tt(t,e,n,r,i)}return e.sort(dt),e}function tt(t,e,n,r,i){try{var o=p.exec(t.nodeValue);if(o){var a=Se(o[1]);ct(e,a,"M",r,i)&&(n[a]=wi(o[2]))}}catch(s){}}function nt(t,e,n){var r=[],i=0;if(e&&t.hasAttribute&&t.hasAttribute(e)){do{if(!t)throw go("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",e,n);t.nodeType===Vi&&(t.hasAttribute(e)&&i++,t.hasAttribute(n)&&i--),r.push(t),t=t.nextSibling}while(i>0)}else r.push(t);return si(r)}function rt(t,e,n){return function(r,i,o,a,s){return i=nt(i[0],e,n),t(r,i,o,a,s)}}function it(t,e,n,r,i,o){var a;return t?W(e,n,r,i,o):function(){return a||(a=W(e,n,r,i,o),e=n=o=null),a.apply(this,arguments)}}function ot(t,e,n,i,a,s,u,c,l){function h(t,e,n,r){t&&(n&&(t=rt(t,n,r)),t.require=d.require,t.directiveName=$,(E===d||d.$$isolateScope)&&(t=Ct(t,{isolateScope:!0})),u.push(t)),e&&(n&&(e=rt(e,n,r)),e.require=d.require,e.directiveName=$,(E===d||d.$$isolateScope)&&(e=Ct(e,{isolateScope:!0})),c.push(e))}function p(t,i,a,s,l){function h(t,e,n,r){var i;if(V(t)||(r=n,n=e,e=t,t=void 0),N&&(i=g),n||(n=N?k.parent():k),!r)return l(t,e,i,n,R);var o=l.$$slots[r];if(o)return o(t,e,i,n,R);if(y(o))throw go("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,et(k))}var p,d,$,v,m,g,b,k,O,M;e===a?(O=n,k=n.$$element):(k=si(a),O=new U(k,n)),m=i,E?v=i.$new(!0):x&&(m=i.$parent),l&&(b=h,b.$$boundTransclude=l,b.isSlotFilled=function(t){return!!l.$$slots[t]}),C&&(g=st(k,O,b,C,v,i,E)),E&&(W.$$addScopeInfo(k,v,!0,!(S&&(S===E||S===E.$$originalDirective))),W.$$addScopeClass(k,!0),v.$$isolateBindings=E.$$isolateBindings,M=kt(i,O,v,v.$$isolateBindings,E),M.removeWatches&&v.$on("$destroy",M.removeWatches));for(var I in g){var j=C[I],D=g[I],P=j.$$bindings.bindToController;if(T){P?D.bindingInfo=kt(m,O,D.instance,P,j):D.bindingInfo={};var _=D();_!==D.instance&&(D.instance=_,k.data("$"+j.name+"Controller",_),D.bindingInfo.removeWatches&&D.bindingInfo.removeWatches(),D.bindingInfo=kt(m,O,D.instance,P,j))}else D.instance=D(),k.data("$"+j.name+"Controller",D.instance),D.bindingInfo=kt(m,O,D.instance,P,j)}for(o(C,function(t,e){var n=t.require;t.bindToController&&!yi(n)&&w(n)&&f(g[e].instance,at(e,n,k,g))}),o(g,function(t){var e=t.instance;if(A(e.$onChanges))try{e.$onChanges(t.bindingInfo.initialChanges)}catch(n){r(n)}if(A(e.$onInit))try{e.$onInit()}catch(n){r(n)}A(e.$doCheck)&&(m.$watch(function(){e.$doCheck()}),e.$doCheck()),A(e.$onDestroy)&&m.$on("$destroy",function(){e.$onDestroy()})}),p=0,d=u.length;p<d;p++)$=u[p],Et($,$.isolateScope?v:i,k,O,$.require&&at($.directiveName,$.require,k,g),b);var R=i;for(E&&(E.template||null===E.templateUrl)&&(R=v),t&&t(R,a.childNodes,void 0,l),p=c.length-1;p>=0;p--)$=c[p],Et($,$.isolateScope?v:i,k,O,$.require&&at($.directiveName,$.require,k,g),b);o(g,function(t){var e=t.instance;A(e.$postLink)&&e.$postLink()})}l=l||{};for(var d,$,v,m,g,b=-Number.MAX_VALUE,x=l.newScopeDirective,C=l.controllerDirectives,E=l.newIsolateScopeDirective,S=l.templateDirective,k=l.nonTlbTranscludeDirective,O=!1,M=!1,N=l.hasElementTranscludeDirective,I=n.$$element=si(e),j=s,D=i,P=!1,_=!1,R=0,q=t.length;R<q;R++){d=t[R];var F=d.$$start,B=d.$$end;if(F&&(I=nt(e,F,B)),v=void 0,b>d.priority)break;if(g=d.scope,g&&(d.templateUrl||(w(g)?(vt("new/isolated scope",E||x,d,I),E=d):vt("new/isolated scope",E,d,I)),x=x||d),$=d.name,!P&&(d.replace&&(d.templateUrl||d.template)||d.transclude&&!d.$$tlb)){for(var H,z=R+1;H=t[z++];)if(H.transclude&&!H.$$tlb||H.replace&&(H.templateUrl||H.template)){_=!0;break}P=!0}if(!d.templateUrl&&d.controller&&(C=C||bt(),vt("'"+$+"' controller",C[$],d,I),C[$]=d),g=d.transclude)if(O=!0,d.$$tlb||(vt("transclusion",k,d,I),k=d),"element"===g)N=!0,b=d.priority,v=I,I=n.$$element=si(W.$$createComment($,n[$])),e=I[0],xt(a,G(v),e),v[0].$$parentNode=v[0].parentNode,D=it(_,v,i,b,j&&j.name,{nonTlbTranscludeDirective:k});else{var J=bt();if(w(g)){v=[];var Z=bt(),Y=bt();o(g,function(t,e){var n="?"===t.charAt(0);t=n?t.substring(1):t,Z[t]=e,J[e]=null,Y[e]=n}),o(I.contents(),function(t){var e=Z[Se(L(t))];e?(Y[e]=!0,J[e]=J[e]||[],J[e].push(t)):v.push(t)}),o(Y,function(t,e){if(!t)throw go("reqslot","Required transclusion slot `{0}` was not filled.",e)});for(var Q in J)J[Q]&&(J[Q]=it(_,J[Q],i))}else v=si(Rt(e)).contents();I.empty(),D=it(_,v,i,void 0,void 0,{needsNewScope:d.$$isolateScope||d.$$newScope}),D.$$slots=J}if(d.template)if(M=!0,vt("template",S,d,I),S=d,g=A(d.template)?d.template(I,n):d.template,g=Pt(g),d.replace){if(j=d,v=Tt(g)?[]:Ae(gt(d.templateNamespace,wi(g))),e=v[0],1!==v.length||e.nodeType!==Vi)throw go("tplrt","Template for directive '{0}' must have exactly one root element. {1}",$,"");xt(a,I,e);var tt={$attr:{}},ot=X(e,[],tt),ct=t.splice(R+1,t.length-(R+1));(E||x)&&ut(ot,E,x),t=t.concat(ot).concat(ct),ft(n,tt),q=t.length}else I.html(g);if(d.templateUrl)M=!0,vt("template",S,d,I),S=d,d.replace&&(j=d),p=ht(t.splice(R,t.length-R),I,n,a,O&&D,u,c,{controllerDirectives:C,newScopeDirective:x!==d&&x,newIsolateScopeDirective:E,templateDirective:S,nonTlbTranscludeDirective:k}),q=t.length;else if(d.compile)try{m=d.compile(I,n,D);var lt=d.$$originalDirective||d;A(m)?h(null,K(lt,m),F,B):m&&h(K(lt,m.pre),K(lt,m.post),F,B)}catch(pt){r(pt,et(I))}d.terminal&&(p.terminal=!0,b=Math.max(b,d.priority))}return p.scope=x&&x.scope===!0,p.transcludeOnThisElement=O,p.templateOnThisElement=M,p.transclude=D,l.hasElementTranscludeDirective=N,p}function at(t,e,n,r){var i;if(C(e)){var a=e.match(E),s=e.substring(a[0].length),u=a[1]||a[3],c="?"===a[2];if("^^"===u?n=n.parent():(i=r&&r[s],i=i&&i.instance),!i){var l="$"+s+"Controller";i=u?n.inheritedData(l):n.data(l)}if(!i&&!c)throw go("ctreq","Controller '{0}', required by directive '{1}', can't be found!",s,t)}else if(yi(e)){i=[];for(var f=0,h=e.length;f<h;f++)i[f]=at(t,e[f],n,r)}else w(e)&&(i={},o(e,function(e,o){i[o]=at(t,e,n,r)}));return i||null}function st(t,e,n,r,i,o,a){var s=bt();for(var c in r){var l=r[c],f={$scope:l===a||l.$$isolateScope?i:o,$element:t,$attrs:e,$transclude:n},h=l.controller;"@"===h&&(h=e[l.name]);var p=u(h,f,!0,l.controllerAs);s[l.name]=p,t.data("$"+l.name+"Controller",p.instance)}return s}function ut(t,e,n){for(var r=0,i=t.length;r<i;r++)t[r]=d(t[r],{$$isolateScope:e,$$newScope:n})}function ct(t,n,r,o,a,s,u){if(n===a)return null;var c=null;if(l.hasOwnProperty(n))for(var f,p=e.get(n+h),$=0,v=p.length;$<v;$++)if(f=p[$],(y(o)||o>f.priority)&&f.restrict.indexOf(r)!==-1){if(s&&(f=d(f,{$$start:s,$$end:u})),!f.$$bindings){var m=f.$$bindings=i(f,f.name);w(m.isolateScope)&&(f.$$isolateBindings=m.isolateScope)}t.push(f),c=f}return c}function lt(t){if(l.hasOwnProperty(t))for(var n,r=e.get(t+h),i=0,o=r.length;i<o;i++)if(n=r[i],n.multiElement)return!0;return!1}function ft(t,e){var n=e.$attr,r=t.$attr;o(t,function(r,i){"$"!==i.charAt(0)&&(e[i]&&e[i]!==r&&(r.length?r+=("style"===i?";":" ")+e[i]:r=e[i]),t.$set(i,r,!0,n[i]))}),o(e,function(e,i){t.hasOwnProperty(i)||"$"===i.charAt(0)||(t[i]=e,"class"!==i&&"style"!==i&&(r[i]=n[i]))})}function ht(t,e,n,i,s,u,c,l){var f,h,p=[],$=e[0],v=t.shift(),m=d(v,{templateUrl:null,transclude:null,replace:null,$$originalDirective:v}),g=A(v.templateUrl)?v.templateUrl(e,n):v.templateUrl,y=v.templateNamespace;return e.empty(),a(g).then(function(r){var a,d,b,x;if(r=Pt(r),v.replace){if(b=Tt(r)?[]:Ae(gt(y,wi(r))),a=b[0],1!==b.length||a.nodeType!==Vi)throw go("tplrt","Template for directive '{0}' must have exactly one root element. {1}",v.name,g);d={$attr:{}},xt(i,e,a);var C=X(a,[],d);w(v.scope)&&ut(C,!0),t=C.concat(t),ft(n,d)}else a=$,e.html(r);for(t.unshift(m),f=ot(t,a,n,s,e,v,u,c,l),o(i,function(t,n){t===a&&(i[n]=e[0])}),h=Z(e[0].childNodes,s);p.length;){var E=p.shift(),S=p.shift(),k=p.shift(),A=p.shift(),O=e[0];if(!E.$$destroyed){if(S!==$){var M=S.className;l.hasElementTranscludeDirective&&v.replace||(O=Rt(a)),xt(k,si(S),O),B(si(O),M)}x=f.transcludeOnThisElement?Q(E,f.transclude,A):A,f(h,E,O,i,x)}}p=null})["catch"](function(t){k(t)&&r(t)}),function(t,e,n,r,i){var o=i;e.$$destroyed||(p?p.push(e,n,r,o):(f.transcludeOnThisElement&&(o=Q(e,f.transclude,i)),f(h,e,n,r,o)))}}function dt(t,e){var n=e.priority-t.priority;return 0!==n?n:t.name!==e.name?t.name<e.name?-1:1:t.index-e.index}function vt(t,e,n,r){function i(t){return t?" (module: "+t+")":""}if(e)throw go("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",e.name,i(e.$$moduleName),n.name,i(n.$$moduleName),t,et(r))}function mt(t,e){var r=n(e,!0);r&&t.push({priority:0,compile:function(t){var e=t.parent(),n=!!e.length;return n&&W.$$addBindingClass(e),function(t,e){var i=e.parent();n||W.$$addBindingClass(i),W.$$addBindingInfo(i,r.expressions),t.$watch(r,function(t){e[0].nodeValue=t})}}})}function gt(e,n){switch(e=ni(e||"html")){case"svg":case"math":var r=t.document.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function yt(t,e){if("srcdoc"===e)return m.HTML;var n=L(t);if("src"===e||"ngSrc"===e){if(["img","video","audio","source","track"].indexOf(n)===-1)return m.RESOURCE_URL}else if("xlinkHref"===e||"form"===n&&"action"===e||"link"===n&&"href"===e)return m.RESOURCE_URL}function wt(t,e,r,i,o){var a=yt(t,i),s=!o,u=x[i]||o,c=n(r,s,a,u);if(c){if("multiple"===i&&"select"===L(t))throw go("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",et(t));if(S.test(i))throw go("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");e.push({priority:100,compile:function(){return{pre:function(t,e,o){var s=o.$$observers||(o.$$observers=bt()),l=o[i];l!==r&&(c=l&&n(l,!0,a,u),r=l),c&&(o[i]=c(t),(s[i]||(s[i]=[])).$$inter=!0,(o.$$observers&&o.$$observers[i].$$scope||t).$watch(c,function(t,e){"class"===i&&t!==e?o.$updateClass(t,e):o.$set(i,t)}))}}}})}}function xt(e,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(e)for(i=0,o=e.length;i<o;i++)if(e[i]===a){e[i++]=r;for(var c=i,l=c+s-1,f=e.length;c<f;c++,l++)l<f?e[c]=e[l]:delete e[c];e.length-=s-1,e.context===a&&(e.context=r);break}u&&u.replaceChild(r,a);var h=t.document.createDocumentFragment();for(i=0;i<s;i++)h.appendChild(n[i]);for(si.hasData(a)&&(si.data(r,si.data(a)),si(a).off("$destroy")),si.cleanData(h.querySelectorAll("*")),i=1;i<s;i++)delete n[i];n[0]=r,n.length=1}function Ct(t,e){return f(function(){return t.apply(null,arguments)},t,e)}function Et(t,e,n,i,o,a){try{t(e,n,i,o,a)}catch(s){r(s,et(n))}}function St(t,e){if(N)throw go("missingattr","Attribute '{0}' of '{1}' is non-optional and must be set!",t,e)}function kt(t,e,r,i,a){function u(e,n,i){A(r.$onChanges)&&!H(n,i)&&(At||(t.$$postDigest(R),At=[]),l||(l={},At.push(c)),l[e]&&(i=l[e].previousValue),l[e]=new Ee(i,n))}function c(){r.$onChanges(l),l=void 0}var l,f=[],h={};return o(i,function(i,o){var c,l,p,d,v,m=i.attrName,g=i.optional,y=i.mode;switch(y){case"@":g||ei.call(e,m)||(St(m,a.name),r[o]=e[m]=void 0),v=e.$observe(m,function(t){if(C(t)||j(t)){var e=r[o];u(o,t,e),r[o]=t}}),e.$$observers[m].$$scope=t,c=e[m],C(c)?r[o]=n(c)(t):j(c)&&(r[o]=c),h[o]=new Ee(yo,r[o]),f.push(v);break;case"=":if(!ei.call(e,m)){if(g)break;St(m,a.name),e[m]=void 0}if(g&&!e[m])break;l=s(e[m]),d=l.literal?z:H,p=l.assign||function(){throw c=r[o]=l(t),go("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",e[m],m,a.name)},c=r[o]=l(t);var b=function(e){return d(e,r[o])||(d(e,c)?p(t,e=r[o]):r[o]=e),c=e};b.$stateful=!0,v=i.collection?t.$watchCollection(e[m],b):t.$watch(s(e[m],b),null,l.literal),f.push(v);break;case"<":if(!ei.call(e,m)){if(g)break;St(m,a.name),e[m]=void 0}if(g&&!e[m])break;l=s(e[m]);var w=l.literal,x=r[o]=l(t);h[o]=new Ee(yo,r[o]),v=t.$watch(l,function(t,e){if(e===t){if(e===x||w&&z(e,x))return;e=x}u(o,t,e),r[o]=t},w),f.push(v);break;case"&":if(g||ei.call(e,m)||St(m,a.name),l=e.hasOwnProperty(m)?s(e[m]):$,l===$&&g)break;r[o]=function(e){return l(t,e)}}}),{initialChanges:h,removeWatches:f.length&&function(){for(var t=0,e=f.length;t<e;++t)f[t]()}}}var At,Ot=/^\w/,Mt=t.document.createElement("div"),Vt=D,Nt=P,It=I;U.prototype={$normalize:Se,$addClass:function(t){t&&t.length>0&&O.addClass(this.$$element,t)},$removeClass:function(t){t&&t.length>0&&O.removeClass(this.$$element,t)},$updateClass:function(t,e){var n=ke(t,e);n&&n.length&&O.addClass(this.$$element,n);var r=ke(e,t);r&&r.length&&O.removeClass(this.$$element,r)},$set:function(t,e,n,i){var a,s=this.$$element[0],u=te(s,t),c=ee(t),l=t;if(u?(this.$$element.prop(t,e),i=u):c&&(this[c]=e,l=c),this[t]=e,i?this.$attr[t]=i:(i=this.$attr[t],i||(this.$attr[t]=i=pt(t,"-"))),a=L(this.$$element),"a"===a&&("href"===t||"xlinkHref"===t)||"img"===a&&"src"===t)this[t]=e=_(e,"src"===t);else if("img"===a&&"srcset"===t&&b(e)){for(var f="",h=wi(e),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,d=/\s/.test(h)?p:/(,)/,$=h.split(d),v=Math.floor($.length/2),m=0;m<v;m++){var g=2*m;f+=_(wi($[g]),!0),f+=" "+wi($[g+1])}var w=wi($[2*m]).split(/\s/);f+=_(wi(w[0]),!0),2===w.length&&(f+=" "+wi(w[1])),this[t]=e=f}n!==!1&&(null===e||y(e)?this.$$element.removeAttr(i):Ot.test(i)?this.$$element.attr(i,e):q(this.$$element[0],i,e));var x=this.$$observers;x&&o(x[l],function(t){try{t(e)}catch(n){r(n)}})},$observe:function(t,e){var n=this,r=n.$$observers||(n.$$observers=bt()),i=r[t]||(r[t]=[]);return i.push(e),c.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(t)||y(n[t])||e(n[t])}),function(){F(i,e)}}};var jt=n.startSymbol(),Dt=n.endSymbol(),Pt="{{"===jt&&"}}"===Dt?v:function(t){return t.replace(/\{\{/g,jt).replace(/}}/g,Dt)},_t=/^ngAttr[A-Z]/,Ut=/^(.+)Start$/;return W.$$addBindingInfo=M?function(t,e){var n=t.data("$binding")||[];yi(e)?n=n.concat(e):n.push(e),t.data("$binding",n)}:$,W.$$addBindingClass=M?function(t){B(t,"ng-binding")}:$,W.$$addScopeInfo=M?function(t,e,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";t.data(i,e)}:$,W.$$addScopeClass=M?function(t,e){B(t,e?"ng-isolate-scope":"ng-scope")}:$,W.$$createComment=function(e,n){var r="";return M&&(r=" "+(e||"")+": ",n&&(r+=n+" ")),t.document.createComment(r)},W}]}function Ee(t,e){this.previousValue=t,this.currentValue=e}function Se(t){return t.replace(bo,"").replace(wo,Mt)}function ke(t,e){var n="",r=t.split(/\s+/),i=e.split(/\s+/);t:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a===i[s])continue t;n+=(n.length>0?" ":"")+a}return n}function Ae(t){t=si(t);var e=t.length;if(e<=1)return t;for(;e--;){var n=t[e];(n.nodeType===Ii||n.nodeType===Ni&&""===n.nodeValue.trim())&&fi.call(t,e,1)}return t}function Oe(t,e){if(e&&C(e))return e;if(C(t)){var n=Co.exec(t);if(n)return n[3]}}function Me(){var t={},e=!1;this.has=function(e){return t.hasOwnProperty(e)},this.register=function(e,n){mt(e,"controller"),w(e)?f(t,e):t[e]=n},this.allowGlobals=function(){e=!0},this.$get=["$injector","$window",function(n,i){function o(t,e,n,i){if(!t||!w(t.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,e);t.$scope[e]=n}return function(r,a,s,u){var c,l,h,p;if(s=s===!0,u&&C(u)&&(p=u),C(r)){if(l=r.match(Co),!l)throw xo("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);if(h=l[1],p=p||l[3],r=t.hasOwnProperty(h)?t[h]:gt(a.$scope,h,!0)||(e?gt(i,h,!0):void 0),!r)throw xo("ctrlreg","The controller with the name '{0}' is not registered.",h);vt(r,h,!0)}if(s){var d=(yi(r)?r[r.length-1]:r).prototype;return c=Object.create(d||null),p&&o(a,p,c,h||r.name),f(function(){var t=n.invoke(r,c,a,h);return t!==c&&(w(t)||A(t))&&(c=t,p&&o(a,p,c,h||r.name)),c},{instance:c,identifier:p})}return c=n.instantiate(r,a,h),p&&o(a,p,c,h||r.name),c}}]}function Ve(){this.$get=["$window",function(t){return si(t.document)}]}function Te(){this.$get=["$document","$rootScope",function(t,e){function n(){i=r.hidden}var r=t[0],i=r&&r.hidden;return t.on("visibilitychange",n),e.$on("$destroy",function(){t.off("visibilitychange",n)}),function(){return i}}]}function Ne(){this.$get=["$log",function(t){return function(e,n){t.error.apply(t,arguments)}}]}function Ie(t){return w(t)?S(t)?t.toISOString():Z(t):t}function je(){this.$get=function(){return function(t){if(!t)return"";var e=[];return a(t,function(t,n){null===t||y(t)||A(t)||(yi(t)?o(t,function(t){e.push(at(n)+"="+at(Ie(t)))}):e.push(at(n)+"="+at(Ie(t))))}),e.join("&")}}}function De(){this.$get=function(){return function(t){function e(t,r,i){null===t||y(t)||(yi(t)?o(t,function(t,n){e(t,r+"["+(w(t)?n:"")+"]")}):w(t)&&!S(t)?a(t,function(t,n){e(t,r+(i?"":"[")+n+(i?"":"]"))}):n.push(at(r)+"="+at(Ie(t))))}if(!t)return"";var n=[];return e(t,"",!0),n.join("&")}}}function Pe(t,e){if(C(t)){var n=t.replace(Mo,"").trim();if(n){var r=e("Content-Type"),i=r&&0===r.indexOf(So);if(i||_e(n))try{t=Y(n)}catch(o){if(!i)return t;throw Vo("baddata",'Data must be a valid JSON object. Received: "{0}". Parse error: "{1}"',t,o)}}}return t}function _e(t){var e=t.match(Ao);return e&&Oo[e[0]].test(t)}function Re(t){function e(t,e){t&&(r[t]=r[t]?r[t]+", "+e:e)}var n,r=bt();return C(t)?o(t.split("\n"),function(t){n=t.indexOf(":"),e(ni(wi(t.substr(0,n))),wi(t.substr(n+1)))}):w(t)&&o(t,function(t,n){e(ni(n),wi(t))}),r}function Ue(t){var e;return function(n){if(e||(e=Re(t)),n){var r=e[ni(n)];return void 0===r&&(r=null),r}return e}}function Le(t,e,n,r){return A(r)?r(t,e,n):(o(r,function(r){t=r(t,e,n)}),t)}function qe(t){return 200<=t&&t<300}function Fe(){var t=this.defaults={transformResponse:[Pe],transformRequest:[function(t){return!w(t)||T(t)||I(t)||N(t)?t:Z(t)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:Ct(ko),put:Ct(ko),patch:Ct(ko)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer",jsonpCallbackParam:"callback"},e=!1;this.useApplyAsync=function(t){return b(t)?(e=!!t,this):e};var n=this.interceptors=[];this.$get=["$browser","$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector","$sce",function(i,a,s,u,c,l,h,p){function d(e){function n(t,e){for(var n=0,r=e.length;n<r;){var i=e[n++],o=e[n++];t=t.then(i,o)}return e.length=0,t}function a(){i.$$completeOutstandingRequest($)}function s(t,e){var n,r={};return o(t,function(t,i){A(t)?(n=t(e),null!=n&&(r[i]=n)):r[i]=t}),r}function u(e){var n,r,i,o=t.headers,a=f({},e.headers);o=f({},o.common,o[ni(e.method)]);t:for(n in o){r=ni(n);for(i in a)if(ni(i)===r)continue t;a[n]=o[n]}return s(a,Ct(e))}function c(e){var n=e.headers,r=Le(e.data,Ue(n),void 0,e.transformRequest);return y(r)&&o(n,function(t,e){"content-type"===ni(e)&&delete n[e]}),y(e.withCredentials)&&!y(t.withCredentials)&&(e.withCredentials=t.withCredentials),g(e,r).then(d,d)}function d(t){var e=f({},t);return e.data=Le(t.data,t.headers,t.status,v.transformResponse),qe(t.status)?e:l.reject(e)}if(!w(e))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",e);if(!C(p.valueOf(e.url)))throw r("$http")("badreq","Http request configuration url must be a string or a $sce trusted object.  Received: {0}",e.url);var v=f({method:"get",transformRequest:t.transformRequest,transformResponse:t.transformResponse,paramSerializer:t.paramSerializer,jsonpCallbackParam:t.jsonpCallbackParam},e);v.headers=u(e),v.method=ri(v.method),v.paramSerializer=C(v.paramSerializer)?h.get(v.paramSerializer):v.paramSerializer,i.$$incOutstandingRequestCount();var m=[],b=[],x=l.resolve(v);return o(k,function(t){(t.request||t.requestError)&&m.unshift(t.request,t.requestError),(t.response||t.responseError)&&b.push(t.response,t.responseError)}),x=n(x,m),x=x.then(c),x=n(x,b),x=x["finally"](a)}function v(t){o(arguments,function(t){d[t]=function(e,n){return d(f({},n||{},{method:t,url:e}))}})}function m(t){o(arguments,function(t){d[t]=function(e,n,r){return d(f({},r||{},{method:t,url:e,data:n}))}})}function g(n,r){function i(t){if(t){var n={};return o(t,function(t,r){n[r]=function(n){function r(){t(n)}e?c.$applyAsync(r):c.$$phase?r():c.$apply(r)}}),n}}function u(t,n,r,i,o){function a(){f(n,t,r,i,o)}v&&(qe(t)?v.put(M,[t,n,Re(r),i,o]):v.remove(M)),e?c.$applyAsync(a):(a(),c.$$phase||c.$apply())}function f(t,e,r,i,o){e=e>=-1?e:0,(qe(e)?g.resolve:g.reject)({data:t,status:e,headers:Ue(r),config:n,statusText:i,xhrStatus:o})}function h(t){f(t.data,t.status,Ct(t.headers()),t.statusText,t.xhrStatus)}function $(){var t=d.pendingRequests.indexOf(n);t!==-1&&d.pendingRequests.splice(t,1)}var v,m,g=l.defer(),k=g.promise,A=n.headers,O="jsonp"===ni(n.method),M=n.url;if(O?M=p.getTrustedResourceUrl(M):C(M)||(M=p.valueOf(M)),M=x(M,n.paramSerializer(n.params)),O&&(M=E(M,n.jsonpCallbackParam)),d.pendingRequests.push(n),k.then($,$),!n.cache&&!t.cache||n.cache===!1||"GET"!==n.method&&"JSONP"!==n.method||(v=w(n.cache)?n.cache:w(t.cache)?t.cache:S),v&&(m=v.get(M),b(m)?D(m)?m.then(h,h):yi(m)?f(m[1],m[0],Ct(m[2]),m[3],m[4]):f(m,200,{},"OK","complete"):v.put(M,k)),y(m)){var V=Wn(n.url)?s()[n.xsrfCookieName||t.xsrfCookieName]:void 0;V&&(A[n.xsrfHeaderName||t.xsrfHeaderName]=V),a(n.method,M,r,u,A,n.timeout,n.withCredentials,n.responseType,i(n.eventHandlers),i(n.uploadEventHandlers))}return k}function x(t,e){return e.length>0&&(t+=(t.indexOf("?")===-1?"?":"&")+e),t}function E(t,e){if(/[&?][^=]+=JSON_CALLBACK/.test(t))throw Vo("badjsonp",'Illegal use of JSON_CALLBACK in url, "{0}"',t);var n=new RegExp("[&?]"+e+"=");if(n.test(t))throw Vo("badjsonp",'Illegal use of callback param, "{0}", in url, "{1}"',e,t);return t+=(t.indexOf("?")===-1?"?":"&")+e+"=JSON_CALLBACK"}var S=u("$http");t.paramSerializer=C(t.paramSerializer)?h.get(t.paramSerializer):t.paramSerializer;var k=[];return o(n,function(t){k.unshift(C(t)?h.get(t):h.invoke(t))}),d.pendingRequests=[],v("get","delete","head","jsonp"),m("post","put","patch"),d.defaults=t,d}]}function Be(){this.$get=function(){return function(){return new t.XMLHttpRequest}}}function He(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(t,e,n,r){return ze(t,r,t.defer,e,n[0])}]}function ze(t,e,n,r,i){function a(t,e,n){t=t.replace("JSON_CALLBACK",e);var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=t,o.async=!0,a=function(t){o.removeEventListener("load",a),o.removeEventListener("error",a),i.body.removeChild(o),o=null;var s=-1,u="unknown";t&&("load"!==t.type||r.wasCalled(e)||(t={type:"error"}),u=t.type,s="error"===t.type?404:200),n&&n(s,u)},o.addEventListener("load",a),o.addEventListener("error",a),i.body.appendChild(o),a}return function(i,s,u,c,l,f,h,p,d,$){function v(){w&&w(),x&&x.abort()}function m(t,e,r,i,o,a){b(A)&&n.cancel(A),w=x=null,t(e,r,i,o,a)}if(s=s||t.url(),"jsonp"===ni(i))var g=r.createCallback(s),w=a(s,g,function(t,e){var n=200===t&&r.getResponse(g);m(c,t,n,"",e,"complete"),r.removeCallback(g)});else{var x=e(i,s);x.open(i,s,!0),o(l,function(t,e){b(t)&&x.setRequestHeader(e,t)}),x.onload=function(){var t=x.statusText||"",e="response"in x?x.response:x.responseText,n=1223===x.status?204:x.status;0===n&&(n=e?200:"file"===zn(s).protocol?404:0),m(c,n,e,x.getAllResponseHeaders(),t,"complete")};var C=function(){m(c,-1,null,null,"","error")},E=function(){m(c,-1,null,null,"","abort")},S=function(){m(c,-1,null,null,"","timeout")};if(x.onerror=C,x.onabort=E,x.ontimeout=S,o(d,function(t,e){x.addEventListener(e,t)}),o($,function(t,e){x.upload.addEventListener(e,t)}),h&&(x.withCredentials=!0),p)try{x.responseType=p}catch(k){if("json"!==p)throw k}x.send(y(u)?null:u)}if(f>0)var A=n(v,f);else D(f)&&f.then(v)}}function We(){var t="{{",e="}}";this.startSymbol=function(e){return e?(t=e,this):t},this.endSymbol=function(t){return t?(e=t,this):e},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(t){return"\\\\\\"+t}function a(n){return n.replace(h,t).replace(p,e)}function s(t,e,n,r){var i=t.$watch(function(t){return i(),r(t)},e,n);return i}function u(o,u,h,p){function d(t){try{return t=T(t),p&&!b(t)?t:wt(t)}catch(e){r(To.interr(o,e))}}if(!o.length||o.indexOf(t)===-1){var $;if(!u){var v=a(o);$=m(v),$.exp=o,$.expressions=[],$.$$watchDelegate=s}return $}p=!!p;for(var g,w,x,C=0,E=[],S=[],k=o.length,O=[],M=[];C<k;){if((g=o.indexOf(t,C))===-1||(w=o.indexOf(e,g+c))===-1){C!==k&&O.push(a(o.substring(C)));break}C!==g&&O.push(a(o.substring(C,g))),x=o.substring(g+c,w),E.push(x),S.push(n(x,d)),C=w+l,M.push(O.length),O.push("")}if(h&&O.length>1&&To.throwNoconcat(o),!u||E.length){var V=function(t){for(var e=0,n=E.length;e<n;e++){if(p&&y(t[e]))return;O[M[e]]=t[e]}return O.join("")},T=function(t){return h?i.getTrusted(h,t):i.valueOf(t)};return f(function(t){var e=0,n=E.length,i=new Array(n);try{for(;e<n;e++)i[e]=S[e](t);return V(i)}catch(a){r(To.interr(o,a))}},{exp:o,expressions:E,$$watchDelegate:function(t,e){var n;return t.$watchGroup(S,function(r,i){var o=V(r);A(e)&&e.call(this,o,r!==i?n:o,t),n=o})}})}}var c=t.length,l=e.length,h=new RegExp(t.replace(/./g,o),"g"),p=new RegExp(e.replace(/./g,o),"g");return u.startSymbol=function(){return t},u.endSymbol=function(){return e},u}]}function Ge(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(t,e,n,r,i){function o(o,s,u,c){function l(){f?o.apply(null,h):o($)}var f=arguments.length>4,h=f?G(arguments,4):[],p=e.setInterval,d=e.clearInterval,$=0,v=b(c)&&!c,m=(v?r:n).defer(),g=m.promise;return u=b(u)?u:0,g.$$intervalId=p(function(){v?i.defer(l):t.$evalAsync(l),m.notify($++),u>0&&$>=u&&(m.resolve($),d(g.$$intervalId),delete a[g.$$intervalId]),v||t.$apply()},s),a[g.$$intervalId]=m,g}var a={};return o.cancel=function(t){return!!(t&&t.$$intervalId in a)&&(Nn(a[t.$$intervalId].promise),a[t.$$intervalId].reject("canceled"),e.clearInterval(t.$$intervalId),delete a[t.$$intervalId],!0)},o}]}function Ke(t){for(var e=t.split("/"),n=e.length;n--;)e[n]=ot(e[n]);return e.join("/")}function Je(t,e){var n=zn(t);e.$$protocol=n.protocol,e.$$host=n.hostname,e.$$port=p(n.port)||jo[n.protocol]||null}function Ze(t,e){if(Po.test(t))throw Do("badpath",'Invalid url "{0}".',t);var n="/"!==t.charAt(0);n&&(t="/"+t);var r=zn(t);e.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),e.$$search=rt(r.search),e.$$hash=decodeURIComponent(r.hash),e.$$path&&"/"!==e.$$path.charAt(0)&&(e.$$path="/"+e.$$path)}function Ye(t,e){return t.slice(0,e.length)===e}function Qe(t,e){if(Ye(e,t))return e.substr(t.length)}function Xe(t){var e=t.indexOf("#");return e===-1?t:t.substr(0,e)}function tn(t){return t.replace(/(#.+)|#$/,"$1")}function en(t){return t.substr(0,Xe(t).lastIndexOf("/")+1)}function nn(t){return t.substring(0,t.indexOf("/",t.indexOf("//")+2))}function rn(t,e,n){this.$$html5=!0,n=n||"",Je(t,this),this.$$parse=function(t){var n=Qe(e,t);if(!C(n))throw Do("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',t,e);Ze(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var t=it(this.$$search),n=this.$$hash?"#"+ot(this.$$hash):"";this.$$url=Ke(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+this.$$url.substr(1),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return b(o=Qe(t,r))?(a=o,s=n&&b(o=Qe(n,o))?e+(Qe("/",o)||o):t+a):b(o=Qe(e,r))?s=e+o:e===r+"/"&&(s=e),s&&this.$$parse(s),!!s}}function on(t,e,n){Je(t,this),this.$$parse=function(r){function i(t,e,n){var r,i=/^\/[A-Z]:(\/.*)/;return Ye(e,n)&&(e=e.replace(n,"")),i.exec(e)?t:(r=i.exec(t),r?r[1]:t)}var o,a=Qe(t,r)||Qe(e,r);y(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",y(a)&&(t=r,this.replace())):(o=Qe(n,a),y(o)&&(o=a)),Ze(o,this),this.$$path=i(this.$$path,o,t),this.$$compose()},this.$$compose=function(){var e=it(this.$$search),r=this.$$hash?"#"+ot(this.$$hash):"";this.$$url=Ke(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+(this.$$url?n+this.$$url:""),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(e,n){return Xe(t)===Xe(e)&&(this.$$parse(e),!0)}}function an(t,e,n){this.$$html5=!0,on.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return t===Xe(r)?o=r:(a=Qe(e,r))?o=t+n+a:e===r+"/"&&(o=e),o&&this.$$parse(o),!!o},this.$$compose=function(){var e=it(this.$$search),r=this.$$hash?"#"+ot(this.$$hash):"";this.$$url=Ke(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+n+this.$$url,this.$$urlUpdatedByLocation=!0}}function sn(t){return function(){return this[t]}}function un(t,e){return function(n){return y(n)?this[t]:(this[t]=e(n),this.$$compose(),this)}}function cn(){var t="!",e={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(e){return b(e)?(t=e,this):t},this.html5Mode=function(t){return j(t)?(e.enabled=t,this):w(t)?(j(t.enabled)&&(e.enabled=t.enabled),j(t.requireBase)&&(e.requireBase=t.requireBase),(j(t.rewriteLinks)||C(t.rewriteLinks))&&(e.rewriteLinks=t.rewriteLinks),this):e},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(t,e,n){var i=c.url(),o=c.$$state;try{r.url(t,e,n),c.$$state=r.state()}catch(a){throw c.url(i),c.$$state=o,a}}function u(t,e){n.$broadcast("$locationChangeSuccess",c.absUrl(),t,c.$$state,e)}var c,l,f,h=r.baseHref(),p=r.url();if(e.enabled){if(!h&&e.requireBase)throw Do("nobase","$location in HTML5 mode requires a <base> tag to be present!");f=nn(p)+(h||"/"),l=i.history?rn:an}else f=Xe(p),l=on;var d=en(f);c=new l(f,d,"#"+t),c.$$parseLinkUrl(p,p),c.$$state=r.state();var $=/^\s*(javascript|mailto):/i;o.on("click",function(t){var i=e.rewriteLinks;if(i&&!t.ctrlKey&&!t.metaKey&&!t.shiftKey&&2!==t.which&&2!==t.button){for(var s=si(t.target);"a"!==L(s[0]);)if(s[0]===o[0]||!(s=s.parent())[0])return;if(!C(i)||!y(s.attr(i))){var u=s.prop("href"),l=s.attr("href")||s.attr("xlink:href");w(u)&&"[object SVGAnimatedString]"===u.toString()&&(u=zn(u.animVal).href),
$.test(u)||!u||s.attr("target")||t.isDefaultPrevented()||c.$$parseLinkUrl(u,l)&&(t.preventDefault(),c.absUrl()!==r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}}),tn(c.absUrl())!==tn(p)&&r.url(c.absUrl(),!0);var v=!0;return r.onUrlChange(function(t,e){return Ye(t,d)?(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;t=tn(t),c.$$parse(t),c.$$state=e,r=n.$broadcast("$locationChangeStart",t,i,e,o).defaultPrevented,c.absUrl()===t&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):(v=!1,u(i,o)))}),void(n.$$phase||n.$digest())):void(a.location.href=t)}),n.$watch(function(){if(v||c.$$urlUpdatedByLocation){c.$$urlUpdatedByLocation=!1;var t=tn(r.url()),e=tn(c.absUrl()),o=r.state(),a=c.$$replace,l=t!==e||c.$$html5&&i.history&&o!==c.$$state;(v||l)&&(v=!1,n.$evalAsync(function(){var e=c.absUrl(),r=n.$broadcast("$locationChangeStart",e,t,c.$$state,o).defaultPrevented;c.absUrl()===e&&(r?(c.$$parse(t),c.$$state=o):(l&&s(e,a,o===c.$$state?null:c.$$state),u(t,o)))}))}c.$$replace=!1}),c}]}function ln(){var t=!0,e=this;this.debugEnabled=function(e){return b(e)?(t=e,this):t},this.$get=["$window",function(n){function r(t){return k(t)&&(t.stack&&a?t=t.message&&t.stack.indexOf(t.message)===-1?"Error: "+t.message+"\n"+t.stack:t.stack:t.sourceURL&&(t=t.message+"\n"+t.sourceURL+":"+t.line)),t}function i(t){var e=n.console||{},i=e[t]||e.log||$;return function(){var t=[];return o(arguments,function(e){t.push(r(e))}),Function.prototype.apply.call(i,e,t)}}var a=ai||/\bEdge\//.test(n.navigator&&n.navigator.userAgent);return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){t&&n.apply(e,arguments)}}()}}]}function fn(t){return t+""}function hn(t,e){return"undefined"!=typeof t?t:e}function pn(t,e){return"undefined"==typeof t?e:"undefined"==typeof e?t:t+e}function dn(t,e){var n=t(e);return!n.$stateful}function $n(t,e){switch(t.type){case Bo.MemberExpression:if(t.computed)return!1;break;case Bo.UnaryExpression:return Ho;case Bo.BinaryExpression:return"+"!==t.operator&&Ho;case Bo.CallExpression:return!1}return void 0===e?zo:e}function vn(t,e,n){var r,i,a,s=t.isPure=$n(t,n);switch(t.type){case Bo.Program:r=!0,o(t.body,function(t){vn(t.expression,e,s),r=r&&t.expression.constant}),t.constant=r;break;case Bo.Literal:t.constant=!0,t.toWatch=[];break;case Bo.UnaryExpression:vn(t.argument,e,s),t.constant=t.argument.constant,t.toWatch=t.argument.toWatch;break;case Bo.BinaryExpression:vn(t.left,e,s),vn(t.right,e,s),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.left.toWatch.concat(t.right.toWatch);break;case Bo.LogicalExpression:vn(t.left,e,s),vn(t.right,e,s),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.constant?[]:[t];break;case Bo.ConditionalExpression:vn(t.test,e,s),vn(t.alternate,e,s),vn(t.consequent,e,s),t.constant=t.test.constant&&t.alternate.constant&&t.consequent.constant,t.toWatch=t.constant?[]:[t];break;case Bo.Identifier:t.constant=!1,t.toWatch=[t];break;case Bo.MemberExpression:vn(t.object,e,s),t.computed&&vn(t.property,e,s),t.constant=t.object.constant&&(!t.computed||t.property.constant),t.toWatch=t.constant?[]:[t];break;case Bo.CallExpression:a=!!t.filter&&dn(e,t.callee.name),r=a,i=[],o(t.arguments,function(t){vn(t,e,s),r=r&&t.constant,i.push.apply(i,t.toWatch)}),t.constant=r,t.toWatch=a?i:[t];break;case Bo.AssignmentExpression:vn(t.left,e,s),vn(t.right,e,s),t.constant=t.left.constant&&t.right.constant,t.toWatch=[t];break;case Bo.ArrayExpression:r=!0,i=[],o(t.elements,function(t){vn(t,e,s),r=r&&t.constant,i.push.apply(i,t.toWatch)}),t.constant=r,t.toWatch=i;break;case Bo.ObjectExpression:r=!0,i=[],o(t.properties,function(t){vn(t.value,e,s),r=r&&t.value.constant,i.push.apply(i,t.value.toWatch),t.computed&&(vn(t.key,e,!1),r=r&&t.key.constant,i.push.apply(i,t.key.toWatch))}),t.constant=r,t.toWatch=i;break;case Bo.ThisExpression:t.constant=!1,t.toWatch=[];break;case Bo.LocalsExpression:t.constant=!1,t.toWatch=[]}}function mn(t){if(1===t.length){var e=t[0].expression,n=e.toWatch;return 1!==n.length?n:n[0]!==e?n:void 0}}function gn(t){return t.type===Bo.Identifier||t.type===Bo.MemberExpression}function yn(t){if(1===t.body.length&&gn(t.body[0].expression))return{type:Bo.AssignmentExpression,left:t.body[0].expression,right:{type:Bo.NGValueParameter},operator:"="}}function bn(t){return 0===t.body.length||1===t.body.length&&(t.body[0].expression.type===Bo.Literal||t.body[0].expression.type===Bo.ArrayExpression||t.body[0].expression.type===Bo.ObjectExpression)}function wn(t){return t.constant}function xn(t){this.$filter=t}function Cn(t){this.$filter=t}function En(t,e,n){this.ast=new Bo(t,n),this.astCompiler=n.csp?new Cn(e):new xn(e)}function Sn(t){return A(t.valueOf)?t.valueOf():Uo.call(t)}function kn(){var t,e,n=bt(),r={"true":!0,"false":!1,"null":null,undefined:void 0};this.addLiteral=function(t,e){r[t]=e},this.setIdentifierFns=function(n,r){return t=n,e=r,this},this.$get=["$filter",function(i){function a(t,e){var r,o,a;switch(typeof t){case"string":if(t=t.trim(),a=t,r=n[a],!r){":"===t.charAt(0)&&":"===t.charAt(1)&&(o=!0,t=t.substring(2));var s=new Fo(d),p=new En(s,i,d);r=p.parse(t),r.constant?r.$$watchDelegate=f:o?r.$$watchDelegate=r.literal?l:c:r.inputs&&(r.$$watchDelegate=u),n[a]=r}return h(r,e);case"function":return h(t,e);default:return h($,e)}}function s(t,e,n){return null==t||null==e?t===e:!("object"==typeof t&&(t=Sn(t),"object"==typeof t&&!n))&&(t===e||t!==t&&e!==e)}function u(t,e,n,r,i){var o,a=r.inputs;if(1===a.length){var u=s;return a=a[0],t.$watch(function(t){var e=a(t);return s(e,u,a.isPure)||(o=r(t,void 0,void 0,[e]),u=e&&Sn(e)),o},e,n,i)}for(var c=[],l=[],f=0,h=a.length;f<h;f++)c[f]=s,l[f]=null;return t.$watch(function(t){for(var e=!1,n=0,i=a.length;n<i;n++){var u=a[n](t);(e||(e=!s(u,c[n],a[n].isPure)))&&(l[n]=u,c[n]=u&&Sn(u))}return e&&(o=r(t,void 0,void 0,l)),o},e,n,i)}function c(t,e,n,r,i){function o(t){return r(t)}function a(t,n,r){c=t,A(e)&&e(t,n,r),b(t)&&r.$$postDigest(function(){b(c)&&s()})}var s,c;return s=r.inputs?u(t,a,n,r,i):t.$watch(o,a,n)}function l(t,e,n,r){function i(t){var e=!0;return o(t,function(t){b(t)||(e=!1)}),e}var a,s;return a=t.$watch(function(t){return r(t)},function(t,n,r){s=t,A(e)&&e(t,n,r),i(t)&&r.$$postDigest(function(){i(s)&&a()})},n)}function f(t,e,n,r){var i=t.$watch(function(t){return i(),r(t)},e,n);return i}function h(t,e){if(!e)return t;var n=t.$$watchDelegate,r=!1,i=n!==l&&n!==c,o=i?function(n,i,o,a){var s=r&&a?a[0]:t(n,i,o,a);return e(s,n,i)}:function(n,r,i,o){var a=t(n,r,i,o),s=e(a,n,r);return b(a)?s:a};return r=!t.inputs,n&&n!==u?(o.$$watchDelegate=n,o.inputs=t.inputs):e.$stateful||(o.$$watchDelegate=u,o.inputs=t.inputs?t.inputs:[t]),o.inputs&&(o.inputs=o.inputs.map(function(t){return t.isPure===zo?function(e){return t(e)}:t})),o}var p=Ci().noUnsafeEval,d={csp:p,literals:B(r),isIdentifierStart:A(t)&&t,isIdentifierContinue:A(e)&&e};return a}]}function An(){var t=!0;this.$get=["$rootScope","$exceptionHandler",function(e,n){return Mn(function(t){e.$evalAsync(t)},n,t)}],this.errorOnUnhandledRejections=function(e){return b(e)?(t=e,this):t}}function On(){var t=!0;this.$get=["$browser","$exceptionHandler",function(e,n){return Mn(function(t){e.defer(t)},n,t)}],this.errorOnUnhandledRejections=function(e){return b(e)?(t=e,this):t}}function Mn(t,e,n){function i(){return new a}function a(){var t=this.promise=new s;this.resolve=function(e){h(t,e)},this.reject=function(e){d(t,e)},this.notify=function(e){v(t,e)}}function s(){this.$$state={status:0}}function u(e){var r,i,o;o=e.pending,e.processScheduled=!1,e.pending=void 0;try{for(var a=0,s=o.length;a<s;++a){Tn(e),i=o[a][0],r=o[a][e.status];try{A(r)?h(i,r(e.value)):1===e.status?h(i,e.value):d(i,e.value)}catch(u){d(i,u)}}}finally{--O,n&&0===O&&t(c)}}function c(){for(;!O&&M.length;){var t=M.shift();if(!Vn(t)){Tn(t);var n="Possibly unhandled rejection: "+St(t.value);k(t.value)?e(t.value,n):e(n)}}}function l(e){!n||e.pending||2!==e.status||Vn(e)||(0===O&&0===M.length&&t(c),M.push(e)),!e.processScheduled&&e.pending&&(e.processScheduled=!0,++O,t(function(){u(e)}))}function h(t,e){t.$$state.status||(e===t?$(t,S("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):p(t,e))}function p(t,e){function n(e){a||(a=!0,p(t,e))}function r(e){a||(a=!0,$(t,e))}function i(e){v(t,e)}var o,a=!1;try{(w(e)||A(e))&&(o=e.then),A(o)?(t.$$state.status=-1,o.call(e,n,r,i)):(t.$$state.value=e,t.$$state.status=1,l(t.$$state))}catch(s){r(s)}}function d(t,e){t.$$state.status||$(t,e)}function $(t,e){t.$$state.value=e,t.$$state.status=2,l(t.$$state)}function v(n,r){var i=n.$$state.pending;n.$$state.status<=0&&i&&i.length&&t(function(){for(var t,n,o=0,a=i.length;o<a;o++){n=i[o][0],t=i[o][3];try{v(n,A(t)?t(r):r)}catch(s){e(s)}}})}function m(t){var e=new s;return d(e,t),e}function g(t,e,n){var r=null;try{A(n)&&(r=n())}catch(i){return m(i)}return D(r)?r.then(function(){return e(t)},m):e(t)}function b(t,e,n,r){var i=new s;return h(i,t),i.then(e,n,r)}function x(t){var e=new s,n=0,r=yi(t)?[]:{};return o(t,function(t,i){n++,b(t).then(function(t){r[i]=t,--n||h(e,r)},function(t){d(e,t)})}),0===n&&h(e,r),e}function C(t){var e=i();return o(t,function(t){b(t).then(e.resolve,e.reject)}),e.promise}function E(t){function e(t){h(r,t)}function n(t){d(r,t)}if(!A(t))throw S("norslvr","Expected resolverFn, got '{0}'",t);var r=new s;return t(e,n),r}var S=r("$q",TypeError),O=0,M=[];f(s.prototype,{then:function(t,e,n){if(y(t)&&y(e)&&y(n))return this;var r=new s;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,t,e,n]),this.$$state.status>0&&l(this.$$state),r},"catch":function(t){return this.then(null,t)},"finally":function(t,e){return this.then(function(e){return g(e,V,t)},function(e){return g(e,m,t)},e)}});var V=b;return E.prototype=s.prototype,E.defer=i,E.reject=m,E.when=b,E.resolve=V,E.all=x,E.race=C,E}function Vn(t){return!!t.pur}function Tn(t){t.pur=!0}function Nn(t){Tn(t.$$state)}function In(){this.$get=["$window","$timeout",function(t,e){var n=t.requestAnimationFrame||t.webkitRequestAnimationFrame,r=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(t){var e=n(t);return function(){r(e)}}:function(t){var n=e(t,16.66,!1);return function(){e.cancel(n)}};return o.supported=i,o}]}function jn(){function t(t){function e(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=u(),this.$$ChildScope=null}return e.prototype=t,e}var e=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(t){return arguments.length&&(e=t),e},this.$get=["$exceptionHandler","$parse","$browser",function(r,c,l){function f(t){t.currentScope.$$destroyed=!0}function h(t){9===ai&&(t.$$childHead&&h(t.$$childHead),t.$$nextSibling&&h(t.$$nextSibling)),t.$parent=t.$$nextSibling=t.$$prevSibling=t.$$childHead=t.$$childTail=t.$root=t.$$watchers=null}function p(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function d(t){if(E.$$phase)throw n("inprog","{0} already in progress",E.$$phase);E.$$phase=t}function v(){E.$$phase=null}function m(t,e){do t.$$watchersCount+=e;while(t=t.$parent)}function g(t,e,n){do t.$$listenerCount[n]-=e,0===t.$$listenerCount[n]&&delete t.$$listenerCount[n];while(t=t.$parent)}function b(){}function x(){for(;O.length;)try{O.shift()()}catch(t){r(t)}s=null}function C(){null===s&&(s=l.defer(function(){E.$apply(x)}))}p.prototype={constructor:p,$new:function(e,n){var r;return n=n||this,e?(r=new p,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=t(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(e||n!==this)&&r.$on("$destroy",f),r},$watch:function(t,e,n,r){var i=c(t);if(i.$$watchDelegate)return i.$$watchDelegate(this,e,n,i,t);var o=this,s=o.$$watchers,u={fn:e,last:b,get:i,exp:r||t,eq:!!n};return a=null,A(e)||(u.fn=$),s||(s=o.$$watchers=[],s.$$digestWatchIndex=-1),s.unshift(u),s.$$digestWatchIndex++,m(this,1),function(){var t=F(s,u);t>=0&&(m(o,-1),t<s.$$digestWatchIndex&&s.$$digestWatchIndex--),a=null}},$watchGroup:function(t,e){function n(){u=!1,c?(c=!1,e(i,i,s)):e(i,r,s)}var r=new Array(t.length),i=new Array(t.length),a=[],s=this,u=!1,c=!0;if(!t.length){var l=!0;return s.$evalAsync(function(){l&&e(i,i,s)}),function(){l=!1}}return 1===t.length?this.$watch(t[0],function(t,n,o){i[0]=t,r[0]=n,e(i,t===n?i:r,o)}):(o(t,function(t,e){var o=s.$watch(t,function(t,o){i[e]=t,r[e]=o,u||(u=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(t,e){function n(t){o=t;var e,n,r,s,u;if(!y(o)){if(w(o))if(i(o)){a!==p&&(a=p,v=a.length=0,f++),e=o.length,v!==e&&(f++,a.length=v=e);for(var c=0;c<e;c++)u=a[c],s=o[c],r=u!==u&&s!==s,r||u===s||(f++,a[c]=s)}else{a!==d&&(a=d={},v=0,f++),e=0;for(n in o)ei.call(o,n)&&(e++,s=o[n],u=a[n],n in a?(r=u!==u&&s!==s,r||u===s||(f++,a[n]=s)):(v++,a[n]=s,f++));if(v>e){f++;for(n in a)ei.call(o,n)||(v--,delete a[n])}}else a!==o&&(a=o,f++);return f}}function r(){if($?($=!1,e(o,o,u)):e(o,s,u),l)if(w(o))if(i(o)){s=new Array(o.length);for(var t=0;t<o.length;t++)s[t]=o[t]}else{s={};for(var n in o)ei.call(o,n)&&(s[n]=o[n])}else s=o}n.$stateful=!0;var o,a,s,u=this,l=e.length>1,f=0,h=c(t,n),p=[],d={},$=!0,v=0;return this.$watch(h,r)},$digest:function(){var t,i,o,u,c,f,h,p,$,m,g,y=e,w=this,C=[];d("$digest"),l.$$checkUrlChange(),this===E&&null!==s&&(l.defer.cancel(s),x()),a=null;do{h=!1,$=w;for(var O=0;O<S.length;O++){try{g=S[O],u=g.fn,u(g.scope,g.locals)}catch(V){r(V)}a=null}S.length=0;t:do{if(f=$.$$watchers)for(f.$$digestWatchIndex=f.length;f.$$digestWatchIndex--;)try{if(t=f[f.$$digestWatchIndex])if(c=t.get,(i=c($))===(o=t.last)||(t.eq?z(i,o):gi(i)&&gi(o))){if(t===a){h=!1;break t}}else h=!0,a=t,t.last=t.eq?B(i,null):i,u=t.fn,u(i,o===b?i:o,$),y<5&&(m=4-y,C[m]||(C[m]=[]),C[m].push({msg:A(t.exp)?"fn: "+(t.exp.name||t.exp.toString()):t.exp,newVal:i,oldVal:o}))}catch(V){r(V)}if(!(p=$.$$watchersCount&&$.$$childHead||$!==w&&$.$$nextSibling))for(;$!==w&&!(p=$.$$nextSibling);)$=$.$parent}while($=p);if((h||S.length)&&!y--)throw v(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",e,C)}while(h||S.length);for(v();M<k.length;)try{k[M++]()}catch(V){r(V)}k.length=M=0,l.$$checkUrlChange()},$destroy:function(){if(!this.$$destroyed){var t=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===E&&l.$$applicationDestroyed(),m(this,-this.$$watchersCount);for(var e in this.$$listenerCount)g(this,this.$$listenerCount[e],e);t&&t.$$childHead===this&&(t.$$childHead=this.$$nextSibling),t&&t.$$childTail===this&&(t.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=$,this.$on=this.$watch=this.$watchGroup=function(){return $},this.$$listeners={},this.$$nextSibling=null,h(this)}},$eval:function(t,e){return c(t)(this,e)},$evalAsync:function(t,e){E.$$phase||S.length||l.defer(function(){S.length&&E.$digest()}),S.push({scope:this,fn:c(t),locals:e})},$$postDigest:function(t){k.push(t)},$apply:function(t){try{d("$apply");try{return this.$eval(t)}finally{v()}}catch(e){r(e)}finally{try{E.$digest()}catch(e){throw r(e),e}}},$applyAsync:function(t){function e(){n.$eval(t)}var n=this;t&&O.push(e),t=c(t),C()},$on:function(t,e){var n=this.$$listeners[t];n||(this.$$listeners[t]=n=[]),n.push(e);var r=this;do r.$$listenerCount[t]||(r.$$listenerCount[t]=0),r.$$listenerCount[t]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(e);r!==-1&&(n[r]=null,g(i,1,t))}},$emit:function(t,e){var n,i,o,a=[],s=this,u=!1,c={name:t,targetScope:s,stopPropagation:function(){u=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},l=W([c],arguments,1);do{for(n=s.$$listeners[t]||a,c.currentScope=s,i=0,o=n.length;i<o;i++)if(n[i])try{n[i].apply(null,l)}catch(f){r(f)}else n.splice(i,1),i--,o--;if(u)return c.currentScope=null,c;s=s.$parent}while(s);return c.currentScope=null,c},$broadcast:function(t,e){var n=this,i=n,o=n,a={name:t,targetScope:n,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[t])return a;for(var s,u,c,l=W([a],arguments,1);i=o;){for(a.currentScope=i,s=i.$$listeners[t]||[],u=0,c=s.length;u<c;u++)if(s[u])try{s[u].apply(null,l)}catch(f){r(f)}else s.splice(u,1),u--,c--;if(!(o=i.$$listenerCount[t]&&i.$$childHead||i!==n&&i.$$nextSibling))for(;i!==n&&!(o=i.$$nextSibling);)i=i.$parent}return a.currentScope=null,a}};var E=new p,S=E.$$asyncQueue=[],k=E.$$postDigestQueue=[],O=E.$$applyAsyncQueue=[],M=0;return E}]}function Dn(){var t=/^\s*(https?|ftp|mailto|tel|file):/,e=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(e){return b(e)?(t=e,this):t},this.imgSrcSanitizationWhitelist=function(t){return b(t)?(e=t,this):e},this.$get=function(){return function(n,r){var i,o=r?e:t;return i=zn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Pn(t){return t.replace(Ko,Mt)}function _n(t){if("self"===t)return t;if(C(t)){if(t.indexOf("***")>-1)throw Wo("iwcard","Illegal sequence *** in string matcher.  String: {0}",t);return t=xi(t).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*"),new RegExp("^"+t+"$")}if(O(t))return new RegExp("^"+t.source+"$");throw Wo("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function Rn(t){var e=[];return b(t)&&o(t,function(t){e.push(_n(t))}),e}function Un(){this.SCE_CONTEXTS=Go;var t=["self"],e=[];this.resourceUrlWhitelist=function(e){return arguments.length&&(t=Rn(e)),t},this.resourceUrlBlacklist=function(t){return arguments.length&&(e=Rn(t)),e},this.$get=["$injector",function(n){function r(t,e){return"self"===t?Wn(e):!!t.exec(e.href)}function i(n){var i,o,a=zn(n.toString()),s=!1;for(i=0,o=t.length;i<o;i++)if(r(t[i],a)){s=!0;break}if(s)for(i=0,o=e.length;i<o;i++)if(r(e[i],a)){s=!1;break}return s}function o(t){var e=function(t){this.$$unwrapTrustedValue=function(){return t}};return t&&(e.prototype=new t),e.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},e.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},e}function a(t,e){var n=f.hasOwnProperty(t)?f[t]:null;if(!n)throw Wo("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",t,e);if(null===e||y(e)||""===e)return e;if("string"!=typeof e)throw Wo("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",t);return new n(e)}function s(t){return t instanceof l?t.$$unwrapTrustedValue():t}function u(t,e){if(null===e||y(e)||""===e)return e;var n=f.hasOwnProperty(t)?f[t]:null;if(n&&e instanceof n)return e.$$unwrapTrustedValue();if(t===Go.RESOURCE_URL){if(i(e))return e;throw Wo("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",e.toString())}if(t===Go.HTML)return c(e);throw Wo("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(t){throw Wo("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(c=n.get("$sanitize"));var l=o(),f={};return f[Go.HTML]=o(l),f[Go.CSS]=o(l),f[Go.URL]=o(l),f[Go.JS]=o(l),f[Go.RESOURCE_URL]=o(f[Go.URL]),{trustAs:a,getTrusted:u,valueOf:s}}]}function Ln(){var t=!0;this.enabled=function(e){return arguments.length&&(t=!!e),t},this.$get=["$parse","$sceDelegate",function(e,n){if(t&&ai<8)throw Wo("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=Ct(Go);r.isEnabled=function(){return t},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,t||(r.trustAs=r.getTrusted=function(t,e){return e},r.valueOf=v),r.parseAs=function(t,n){var i=e(n);return i.literal&&i.constant?i:e(n,function(e){return r.getTrusted(t,e)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(Go,function(t,e){var n=ni(e);r[Pn("parse_as_"+n)]=function(e){return i(t,e)},r[Pn("get_trusted_"+n)]=function(e){return a(t,e)},r[Pn("trust_as_"+n)]=function(e){return s(t,e)}}),r}]}function qn(){this.$get=["$window","$document",function(t,e){var n={},r=t.nw&&t.nw.process,i=!r&&t.chrome&&(t.chrome.app&&t.chrome.app.runtime||!t.chrome.app&&t.chrome.runtime&&t.chrome.runtime.id),o=!i&&t.history&&t.history.pushState,a=p((/android (\d+)/.exec(ni((t.navigator||{}).userAgent))||[])[1]),s=/Boxee/i.test((t.navigator||{}).userAgent),u=e[0]||{},c=u.body&&u.body.style,l=!1,f=!1;return c&&(l=!!("transition"in c||"webkitTransition"in c),f=!!("animation"in c||"webkitAnimation"in c)),{history:!(!o||a<4||s),hasEvent:function(t){if("input"===t&&ai)return!1;if(y(n[t])){var e=u.createElement("div");n[t]="on"+t in e}return n[t]},csp:Ci(),transitions:l,animations:f,android:a}}]}function Fn(){var t;this.httpOptions=function(e){return e?(t=e,this):t},this.$get=["$exceptionHandler","$templateCache","$http","$q","$sce",function(e,n,r,i,o){function a(s,u){function c(t){return u||(t=Jo("tpload","Failed to load template: {0} (HTTP status: {1} {2})",s,t.status,t.statusText),e(t)),i.reject(t)}a.totalPendingRequests++,C(s)&&!y(n.get(s))||(s=o.getTrustedResourceUrl(s));var l=r.defaults&&r.defaults.transformResponse;return yi(l)?l=l.filter(function(t){return t!==Pe}):l===Pe&&(l=null),r.get(s,f({cache:n,transformResponse:l},t))["finally"](function(){a.totalPendingRequests--}).then(function(t){return n.put(s,t.data),t.data},c)}return a.totalPendingRequests=0,a}]}function Bn(){this.$get=["$rootScope","$browser","$location",function(t,e,n){var r={};return r.findBindings=function(t,e,n){var r=t.getElementsByClassName("ng-binding"),i=[];return o(r,function(t){var r=vi.element(t).data("$binding");r&&o(r,function(r){if(n){var o=new RegExp("(^|\\s)"+xi(e)+"(\\s|\\||$)");o.test(r)&&i.push(t)}else r.indexOf(e)!==-1&&i.push(t)})}),i},r.findModels=function(t,e,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+e+'"]',s=t.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(e){e!==n.url()&&(n.url(e),t.$digest())},r.whenStable=function(t){e.notifyWhenNoOutstandingRequests(t)},r}]}function Hn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(t,e,n,r,i){function o(o,s,u){A(o)||(u=s,s=o,o=$);var c,l=G(arguments,3),f=b(u)&&!u,h=(f?r:n).defer(),p=h.promise;return c=e.defer(function(){try{h.resolve(o.apply(null,l))}catch(e){h.reject(e),i(e)}finally{delete a[p.$$timeoutId]}f||t.$apply()},s),p.$$timeoutId=c,a[c]=h,p}var a={};return o.cancel=function(t){return!!(t&&t.$$timeoutId in a)&&(Nn(a[t.$$timeoutId].promise),a[t.$$timeoutId].reject("canceled"),delete a[t.$$timeoutId],e.defer.cancel(t.$$timeoutId))},o}]}function zn(t){var e=t;return ai&&(Zo.setAttribute("href",e),e=Zo.href),Zo.setAttribute("href",e),{href:Zo.href,protocol:Zo.protocol?Zo.protocol.replace(/:$/,""):"",host:Zo.host,search:Zo.search?Zo.search.replace(/^\?/,""):"",hash:Zo.hash?Zo.hash.replace(/^#/,""):"",hostname:Zo.hostname,port:Zo.port,pathname:"/"===Zo.pathname.charAt(0)?Zo.pathname:"/"+Zo.pathname}}function Wn(t){var e=C(t)?zn(t):t;return e.protocol===Yo.protocol&&e.host===Yo.host}function Gn(){this.$get=m(t)}function Kn(t){function e(t){try{return t.cookie||""}catch(e){return""}}function n(t){try{return decodeURIComponent(t)}catch(e){return t}}var r=t[0]||{},i={},o="";return function(){var t,a,s,u,c,l=e(r);if(l!==o)for(o=l,t=o.split("; "),i={},s=0;s<t.length;s++)a=t[s],u=a.indexOf("="),u>0&&(c=n(a.substring(0,u)),y(i[c])&&(i[c]=n(a.substring(u+1))));return i}}function Jn(){this.$get=Kn}function Zn(t){function e(r,i){if(w(r)){var a={};return o(r,function(t,n){a[n]=e(n,t)}),a}return t.factory(r+n,i)}var n="Filter";this.register=e,this.$get=["$injector",function(t){return function(e){return t.get(e+n)}}],e("currency",er),e("date",vr),e("filter",Yn),e("json",mr),e("limitTo",gr),e("lowercase",ia),e("number",nr),e("orderBy",br),e("uppercase",oa)}function Yn(){return function(t,e,n,o){if(!i(t)){if(null==t)return t;throw r("filter")("notarray","Expected array but received: {0}",t)}o=o||"$";var a,s,u=tr(e);switch(u){case"function":a=e;break;case"boolean":case"null":case"number":case"string":s=!0;case"object":a=Qn(e,n,o,s);break;default:return t}return Array.prototype.filter.call(t,a)}}function Qn(t,e,n,r){var i,o=w(t)&&n in t;return e===!0?e=z:A(e)||(e=function(t,e){return!y(t)&&(null===t||null===e?t===e:!(w(e)||w(t)&&!g(t))&&(t=ni(""+t),e=ni(""+e),t.indexOf(e)!==-1))}),i=function(i){return o&&!w(i)?Xn(i,t[n],e,n,!1):Xn(i,t,e,n,r)}}function Xn(t,e,n,r,i,o){var a=tr(t),s=tr(e);if("string"===s&&"!"===e.charAt(0))return!Xn(t,e.substring(1),n,r,i);if(yi(t))return t.some(function(t){return Xn(t,e,n,r,i)});switch(a){case"object":var u;if(i){for(u in t)if(u.charAt&&"$"!==u.charAt(0)&&Xn(t[u],e,n,r,!0))return!0;return!o&&Xn(t,e,n,r,!1)}if("object"===s){for(u in e){var c=e[u];if(!A(c)&&!y(c)){var l=u===r,f=l?t:t[u];if(!Xn(f,c,n,r,l,l))return!1}}return!0}return n(t,e);case"function":return!1;default:return n(t,e)}}function tr(t){return null===t?"null":typeof t}function er(t){var e=t.NUMBER_FORMATS;return function(t,n,r){return y(n)&&(n=e.CURRENCY_SYM),y(r)&&(r=e.PATTERNS[1].maxFrac),null==t?t:or(t,e.PATTERNS[1],e.GROUP_SEP,e.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function nr(t){var e=t.NUMBER_FORMATS;return function(t,n){return null==t?t:or(t,e.PATTERNS[0],e.GROUP_SEP,e.DECIMAL_SEP,n)}}function rr(t){var e,n,r,i,o,a=0;for((n=t.indexOf(Xo))>-1&&(t=t.replace(Xo,"")),(r=t.search(/e/i))>0?(n<0&&(n=r),n+=+t.slice(r+1),t=t.substring(0,r)):n<0&&(n=t.length),r=0;t.charAt(r)===ta;r++);if(r===(o=t.length))e=[0],n=1;else{for(o--;t.charAt(o)===ta;)o--;for(n-=r,e=[],i=0;r<=o;r++,i++)e[i]=+t.charAt(r)}return n>Qo&&(e=e.splice(0,Qo-1),a=n-1,n=1),{d:e,e:a,i:n}}function ir(t,e,n,r){var i=t.d,o=i.length-t.i;e=y(e)?Math.min(Math.max(n,o),r):+e;var a=e+t.i,s=i[a];if(a>0){i.splice(Math.max(t.i,a));for(var u=a;u<i.length;u++)i[u]=0}else{o=Math.max(0,o),t.i=1,i.length=Math.max(1,a=e+1),i[0]=0;for(var c=1;c<a;c++)i[c]=0}if(s>=5)if(a-1<0){for(var l=0;l>a;l--)i.unshift(0),t.i++;i.unshift(1),t.i++}else i[a-1]++;for(;o<Math.max(0,e);o++)i.push(0);var f=i.reduceRight(function(t,e,n,r){return e+=t,r[n]=e%10,Math.floor(e/10)},0);f&&(i.unshift(f),t.i++)}function or(t,e,n,r,i){if(!C(t)&&!E(t)||isNaN(t))return"";var o,a=!isFinite(t),s=!1,u=Math.abs(t)+"",c="";if(a)c="∞";else{o=rr(u),ir(o,i,e.minFrac,e.maxFrac);var l=o.d,f=o.i,h=o.e,p=[];for(s=l.reduce(function(t,e){return t&&!e},!0);f<0;)l.unshift(0),f++;f>0?p=l.splice(f,l.length):(p=l,l=[0]);var d=[];for(l.length>=e.lgSize&&d.unshift(l.splice(-e.lgSize,l.length).join(""));l.length>e.gSize;)d.unshift(l.splice(-e.gSize,l.length).join(""));l.length&&d.unshift(l.join("")),c=d.join(n),p.length&&(c+=r+p.join("")),h&&(c+="e+"+h)}return t<0&&!s?e.negPre+c+e.negSuf:e.posPre+c+e.posSuf}function ar(t,e,n,r){var i="";for((t<0||r&&t<=0)&&(r?t=-t+1:(t=-t,i="-")),t=""+t;t.length<e;)t=ta+t;return n&&(t=t.substr(t.length-e)),i+t}function sr(t,e,n,r,i){return n=n||0,function(o){var a=o["get"+t]();return(n>0||a>-n)&&(a+=n),0===a&&n===-12&&(a=12),ar(a,e,r,i)}}function ur(t,e,n){return function(r,i){var o=r["get"+t](),a=(n?"STANDALONE":"")+(e?"SHORT":""),s=ri(a+t);return i[s][o]}}function cr(t,e,n){var r=-1*n,i=r>=0?"+":"";return i+=ar(Math[r>0?"floor":"ceil"](r/60),2)+ar(Math.abs(r%60),2)}function lr(t){var e=new Date(t,0,1).getDay();return new Date(t,0,(e<=4?5:12)-e)}function fr(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))}function hr(t){return function(e){var n=lr(e.getFullYear()),r=fr(e),i=+r-+n,o=1+Math.round(i/6048e5);return ar(o,t)}}function pr(t,e){return t.getHours()<12?e.AMPMS[0]:e.AMPMS[1]}function dr(t,e){return t.getFullYear()<=0?e.ERAS[0]:e.ERAS[1]}function $r(t,e){return t.getFullYear()<=0?e.ERANAMES[0]:e.ERANAMES[1]}function vr(t){function e(t){var e;if(e=t.match(n)){var r=new Date(0),i=0,o=0,a=e[8]?r.setUTCFullYear:r.setFullYear,s=e[8]?r.setUTCHours:r.setHours;e[9]&&(i=p(e[9]+e[10]),o=p(e[9]+e[11])),a.call(r,p(e[1]),p(e[2])-1,p(e[3]));var u=p(e[4]||0)-i,c=p(e[5]||0)-o,l=p(e[6]||0),f=Math.round(1e3*parseFloat("0."+(e[7]||0)));return s.call(r,u,c,l,f),r}return t}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,u="",c=[];if(r=r||"mediumDate",r=t.DATETIME_FORMATS[r]||r,C(n)&&(n=ra.test(n)?p(n):e(n)),E(n)&&(n=new Date(n)),!S(n)||!isFinite(n.getTime()))return n;for(;r;)s=na.exec(r),s?(c=W(c,s,1),r=c.pop()):(c.push(r),r=null);var l=n.getTimezoneOffset();return i&&(l=Q(i,l),n=tt(n,i,!0)),o(c,function(e){a=ea[e],u+=a?a(n,t.DATETIME_FORMATS,l):"''"===e?"'":e.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function mr(){return function(t,e){return y(e)&&(e=2),Z(t,e)}}function gr(){return function(t,e,n){return e=Math.abs(Number(e))===1/0?Number(e):p(e),gi(e)?t:(E(t)&&(t=t.toString()),i(t)?(n=!n||isNaN(n)?0:p(n),n=n<0?Math.max(0,t.length+n):n,e>=0?yr(t,n,n+e):0===n?yr(t,e,t.length):yr(t,Math.max(0,n+e),n)):t)}}function yr(t,e,n){return C(t)?t.slice(e,n):li.call(t,e,n)}function br(t){function e(e){return e.map(function(e){var n=1,r=v;if(A(e))r=e;else if(C(e)&&("+"!==e.charAt(0)&&"-"!==e.charAt(0)||(n="-"===e.charAt(0)?-1:1,e=e.substring(1)),""!==e&&(r=t(e),r.constant))){var i=r();r=function(t){return t[i]}}return{get:r,descending:n}})}function n(t){switch(typeof t){case"number":case"boolean":case"string":return!0;default:return!1}}function o(t){return A(t.valueOf)&&(t=t.valueOf(),n(t))?t:g(t)&&(t=t.toString(),n(t))?t:t}function a(t,e){var n=typeof t;return null===t?(n="string",t="null"):"object"===n&&(t=o(t)),{value:t,type:n,index:e}}function s(t,e){var n=0,r=t.type,i=e.type;if(r===i){var o=t.value,a=e.value;"string"===r?(o=o.toLowerCase(),a=a.toLowerCase()):"object"===r&&(w(o)&&(o=t.index),w(a)&&(a=e.index)),o!==a&&(n=o<a?-1:1)}else n=r<i?-1:1;return n}return function(t,n,o,u){function c(t,e){return{value:t,tieBreaker:{value:e,type:"number",index:e},predicateValues:f.map(function(n){return a(n.get(t),e)})}}function l(t,e){for(var n=0,r=f.length;n<r;n++){var i=p(t.predicateValues[n],e.predicateValues[n]);if(i)return i*f[n].descending*h}return(p(t.tieBreaker,e.tieBreaker)||s(t.tieBreaker,e.tieBreaker))*h}if(null==t)return t;if(!i(t))throw r("orderBy")("notarray","Expected array but received: {0}",t);yi(n)||(n=[n]),0===n.length&&(n=["+"]);var f=e(n),h=o?-1:1,p=A(u)?u:s,d=Array.prototype.map.call(t,c);return d.sort(l),t=d.map(function(t){return t.value})}}function wr(t){return A(t)&&(t={link:t}),t.restrict=t.restrict||"AC",m(t)}function xr(t,e){t.$name=e}function Cr(t,e,n,r,i){this.$$controls=[],this.$error={},this.$$success={},this.$pending=void 0,this.$name=i(e.name||e.ngForm||"")(n),this.$dirty=!1,this.$pristine=!0,this.$valid=!0,this.$invalid=!1,this.$submitted=!1,this.$$parentForm=ua,this.$$element=t,this.$$animate=r,Er(this)}function Er(t){t.$$classCache={},t.$$classCache[Wa]=!(t.$$classCache[za]=t.$$element.hasClass(za))}function Sr(t){function e(t,e,n,r){t[e]||(t[e]={}),a(t[e],n,r)}function n(t,e,n,r){t[e]&&s(t[e],n,r),kr(t[e])&&(t[e]=void 0)}function r(t,e,n){n&&!t.$$classCache[e]?(t.$$animate.addClass(t.$$element,e),t.$$classCache[e]=!0):!n&&t.$$classCache[e]&&(t.$$animate.removeClass(t.$$element,e),t.$$classCache[e]=!1)}function i(t,e,n){e=e?"-"+pt(e,"-"):"",r(t,za+e,n===!0),r(t,Wa+e,n===!1)}var o=t.clazz,a=t.set,s=t.unset;o.prototype.$setValidity=function(t,o,u){y(o)?e(this,"$pending",t,u):n(this,"$pending",t,u),j(o)?o?(s(this.$error,t,u),a(this.$$success,t,u)):(a(this.$error,t,u),
s(this.$$success,t,u)):(s(this.$error,t,u),s(this.$$success,t,u)),this.$pending?(r(this,ca,!0),this.$valid=this.$invalid=void 0,i(this,"",null)):(r(this,ca,!1),this.$valid=kr(this.$error),this.$invalid=!this.$valid,i(this,"",this.$valid));var c;c=this.$pending&&this.$pending[t]?void 0:!this.$error[t]&&(!!this.$$success[t]||null),i(this,t,c),this.$$parentForm.$setValidity(t,c,this)}}function kr(t){if(t)for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function Ar(t){t.$formatters.push(function(e){return t.$isEmpty(e)?e:e.toString()})}function Or(t,e,n,r,i,o){Mr(t,e,n,r,i,o),Ar(r)}function Mr(t,e,n,r,i,o){var a=ni(e[0].type);if(!i.android){var s=!1;e.on("compositionstart",function(){s=!0}),e.on("compositionend",function(){s=!1,c()})}var u,c=function(t){if(u&&(o.defer.cancel(u),u=null),!s){var i=e.val(),c=t&&t.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=wi(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,c)}};if(i.hasEvent("input"))e.on("input",c);else{var l=function(t,e,n){u||(u=o.defer(function(){u=null,e&&e.value===n||c(t)}))};e.on("keydown",function(t){var e=t.keyCode;91===e||15<e&&e<19||37<=e&&e<=40||l(t,this,this.value)}),i.hasEvent("paste")&&e.on("paste cut",l)}e.on("change",c),Ea[a]&&r.$$hasNativeValidators&&a===n.type&&e.on(Ca,function(t){if(!u){var e=this[ti],n=e.badInput,r=e.typeMismatch;u=o.defer(function(){u=null,e.badInput===n&&e.typeMismatch===r||c(t)})}}),r.$render=function(){var t=r.$isEmpty(r.$viewValue)?"":r.$viewValue;e.val()!==t&&e.val(t)}}function Vr(t,e){if(S(t))return t;if(C(t)){ba.lastIndex=0;var n=ba.exec(t);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,c=lr(r),l=7*(i-1);return e&&(o=e.getHours(),a=e.getMinutes(),s=e.getSeconds(),u=e.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,s,u)}}return NaN}function Tr(t,e){return function(n,r){var i,a;if(S(n))return n;if(C(n)){if('"'===n.charAt(0)&&'"'===n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),da.test(n))return new Date(n);if(t.lastIndex=0,i=t.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(t,n){n<e.length&&(a[e[n]]=+t)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function Nr(t,e,n,r){return function(i,o,a,s,u,c,l){function f(t){return t&&!(t.getTime&&t.getTime()!==t.getTime())}function h(t){return b(t)&&!S(t)?n(t)||void 0:t}Ir(i,o,a,s),Mr(i,o,a,s,u,c);var p,d=s&&s.$options.getOption("timezone");if(s.$$parserName=t,s.$parsers.push(function(t){if(s.$isEmpty(t))return null;if(e.test(t)){var r=n(t,p);return d&&(r=tt(r,d)),r}}),s.$formatters.push(function(t){if(t&&!S(t))throw Xa("datefmt","Expected `{0}` to be a date",t);return f(t)?(p=t,p&&d&&(p=tt(p,d,!0)),l("date")(t,r,d)):(p=null,"")}),b(a.min)||a.ngMin){var $;s.$validators.min=function(t){return!f(t)||y($)||n(t)>=$},a.$observe("min",function(t){$=h(t),s.$validate()})}if(b(a.max)||a.ngMax){var v;s.$validators.max=function(t){return!f(t)||y(v)||n(t)<=v},a.$observe("max",function(t){v=h(t),s.$validate()})}}}function Ir(t,e,n,r){var i=e[0],o=r.$$hasNativeValidators=w(i.validity);o&&r.$parsers.push(function(t){var n=e.prop(ti)||{};return n.badInput||n.typeMismatch?void 0:t})}function jr(t){t.$$parserName="number",t.$parsers.push(function(e){return t.$isEmpty(e)?null:ma.test(e)?parseFloat(e):void 0}),t.$formatters.push(function(e){if(!t.$isEmpty(e)){if(!E(e))throw Xa("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e})}function Dr(t){return b(t)&&!E(t)&&(t=parseFloat(t)),gi(t)?void 0:t}function Pr(t){return(0|t)===t}function _r(t){var e=t.toString(),n=e.indexOf(".");if(n===-1){if(-1<t&&t<1){var r=/e-(\d+)$/.exec(e);if(r)return Number(r[1])}return 0}return e.length-n-1}function Rr(t,e,n){var r=Number(t),i=!Pr(r),o=!Pr(e),a=!Pr(n);if(i||o||a){var s=i?_r(r):0,u=o?_r(e):0,c=a?_r(n):0,l=Math.max(s,u,c),f=Math.pow(10,l);r*=f,e*=f,n*=f,i&&(r=Math.round(r)),o&&(e=Math.round(e)),a&&(n=Math.round(n))}return(r-e)%n===0}function Ur(t,e,n,r,i,o){Ir(t,e,n,r),jr(r),Mr(t,e,n,r,i,o);var a,s;if((b(n.min)||n.ngMin)&&(r.$validators.min=function(t){return r.$isEmpty(t)||y(a)||t>=a},n.$observe("min",function(t){a=Dr(t),r.$validate()})),(b(n.max)||n.ngMax)&&(r.$validators.max=function(t){return r.$isEmpty(t)||y(s)||t<=s},n.$observe("max",function(t){s=Dr(t),r.$validate()})),b(n.step)||n.ngStep){var u;r.$validators.step=function(t,e){return r.$isEmpty(e)||y(u)||Rr(e,a||0,u)},n.$observe("step",function(t){u=Dr(t),r.$validate()})}}function Lr(t,e,n,r,i,o){function a(t,r){e.attr(t,n[t]),n.$observe(t,r)}function s(t){if(f=Dr(t),!gi(r.$modelValue))if(l){var n=e.val();f>n&&(n=f,e.val(n)),r.$setViewValue(n)}else r.$validate()}function u(t){if(h=Dr(t),!gi(r.$modelValue))if(l){var n=e.val();h<n&&(e.val(h),n=h<f?f:h),r.$setViewValue(n)}else r.$validate()}function c(t){p=Dr(t),gi(r.$modelValue)||(l&&r.$viewValue!==e.val()?r.$setViewValue(e.val()):r.$validate())}Ir(t,e,n,r),jr(r),Mr(t,e,n,r,i,o);var l=r.$$hasNativeValidators&&"range"===e[0].type,f=l?0:void 0,h=l?100:void 0,p=l?1:void 0,d=e[0].validity,$=b(n.min),v=b(n.max),m=b(n.step),g=r.$render;r.$render=l&&b(d.rangeUnderflow)&&b(d.rangeOverflow)?function(){g(),r.$setViewValue(e.val())}:g,$&&(r.$validators.min=l?function(){return!0}:function(t,e){return r.$isEmpty(e)||y(f)||e>=f},a("min",s)),v&&(r.$validators.max=l?function(){return!0}:function(t,e){return r.$isEmpty(e)||y(h)||e<=h},a("max",u)),m&&(r.$validators.step=l?function(){return!d.stepMismatch}:function(t,e){return r.$isEmpty(e)||y(p)||Rr(e,f||0,p)},a("step",c))}function qr(t,e,n,r,i,o){Mr(t,e,n,r,i,o),Ar(r),r.$$parserName="url",r.$validators.url=function(t,e){var n=t||e;return r.$isEmpty(n)||$a.test(n)}}function Fr(t,e,n,r,i,o){Mr(t,e,n,r,i,o),Ar(r),r.$$parserName="email",r.$validators.email=function(t,e){var n=t||e;return r.$isEmpty(n)||va.test(n)}}function Br(t,e,n,r){var i=!n.ngTrim||"false"!==wi(n.ngTrim);y(n.name)&&e.attr("name",u());var o=function(t){var o;e[0].checked&&(o=n.value,i&&(o=wi(o)),r.$setViewValue(o,t&&t.type))};e.on("click",o),r.$render=function(){var t=n.value;i&&(t=wi(t)),e[0].checked=t===r.$viewValue},n.$observe("value",r.$render)}function Hr(t,e,n,r,i){var o;if(b(r)){if(o=t(r),!o.constant)throw Xa("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(e)}return i}function zr(t,e,n,r,i,o,a,s){var u=Hr(s,t,"ngTrueValue",n.ngTrueValue,!0),c=Hr(s,t,"ngFalseValue",n.ngFalseValue,!1),l=function(t){r.$setViewValue(e[0].checked,t&&t.type)};e.on("click",l),r.$render=function(){e[0].checked=r.$viewValue},r.$isEmpty=function(t){return t===!1},r.$formatters.push(function(t){return z(t,u)}),r.$parsers.push(function(t){return t?u:c})}function Wr(t,e){function n(t,e){if(!t||!t.length)return[];if(!e||!e.length)return t;var n=[];t:for(var r=0;r<t.length;r++){for(var i=t[r],o=0;o<e.length;o++)if(i===e[o])continue t;n.push(i)}return n}function r(t){return t&&t.split(" ")}function i(t){var e=t;return yi(t)?e=t.map(i).join(" "):w(t)&&(e=Object.keys(t).filter(function(e){return t[e]}).join(" ")),e}function a(t){var e=t;if(yi(t))e=t.map(a);else if(w(t)){var n=!1;e=Object.keys(t).filter(function(e){var r=t[e];return!n&&y(r)&&(n=!0),r}),n&&e.push(void 0)}return e}t="ngClass"+t;var s;return["$parse",function(u){return{restrict:"AC",link:function(c,l,f){function h(t){t=$(r(t),1),f.$addClass(t)}function p(t){t=$(r(t),-1),f.$removeClass(t)}function d(t,e){var i=r(t),o=r(e),a=n(i,o),s=n(o,i),u=$(a,-1),c=$(s,1);f.$addClass(c),f.$removeClass(u)}function $(t,e){var n=[];return o(t,function(t){(e>0||S[t])&&(S[t]=(S[t]||0)+e,S[t]===+(e>0)&&n.push(t))}),n.join(" ")}function v(t){t===e?h(y):p(y),k=t}function m(t){var e=i(t);e!==y&&g(e)}function g(t){k===e&&d(y,t),y=t}var y,b=f[t].trim(),w=":"===b.charAt(0)&&":"===b.charAt(1),x=w?a:i,C=u(b,x),E=w?m:g,S=l.data("$classCounts"),k=!0;S||(S=bt(),l.data("$classCounts",S)),"ngClass"!==t&&(s||(s=u("$index",function(t){return 1&t})),c.$watch(s,v)),c.$watch(C,E,w)}}}]}function Gr(t,e,n,r,i,o,a,s,u){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=u(n.name||"",!1)(t),this.$$parentForm=ua,this.$options=ts,this.$$parsedNgModel=i(n.ngModel),this.$$parsedNgModelAssign=this.$$parsedNgModel.assign,this.$$ngModelGet=this.$$parsedNgModel,this.$$ngModelSet=this.$$parsedNgModelAssign,this.$$pendingDebounce=null,this.$$parserValid=void 0,this.$$currentValidationRunId=0,Object.defineProperty(this,"$$scope",{value:t}),this.$$attr=n,this.$$element=r,this.$$animate=o,this.$$timeout=a,this.$$parse=i,this.$$q=s,this.$$exceptionHandler=e,Er(this),Kr(this)}function Kr(t){t.$$scope.$watch(function(e){var n=t.$$ngModelGet(e);if(n!==t.$modelValue&&(t.$modelValue===t.$modelValue||n===n)){t.$modelValue=t.$$rawModelValue=n,t.$$parserValid=void 0;for(var r=t.$formatters,i=r.length,o=n;i--;)o=r[i](o);t.$viewValue!==o&&(t.$$updateEmptyClasses(o),t.$viewValue=t.$$lastCommittedViewValue=o,t.$render(),t.$$runValidators(t.$modelValue,t.$viewValue,$))}return n})}function Jr(t){this.$$options=t}function Zr(t,e){o(e,function(e,n){b(t[n])||(t[n]=e)})}function Yr(t,e){t.prop("selected",e),t.attr("selected",e)}var Qr={objectMaxDepth:5},Xr=/^\/(.+)\/([a-z]*)$/,ti="validity",ei=Object.prototype.hasOwnProperty,ni=function(t){return C(t)?t.toLowerCase():t},ri=function(t){return C(t)?t.toUpperCase():t},ii=function(t){return C(t)?t.replace(/[A-Z]/g,function(t){return String.fromCharCode(32|t.charCodeAt(0))}):t},oi=function(t){return C(t)?t.replace(/[a-z]/g,function(t){return String.fromCharCode(t.charCodeAt(0)&-33)}):t};"i"!=="I".toLowerCase()&&(ni=ii,ri=oi);var ai,si,ui,ci,li=[].slice,fi=[].splice,hi=[].push,pi=Object.prototype.toString,di=Object.getPrototypeOf,$i=r("ng"),vi=t.angular||(t.angular={}),mi=0;ai=t.document.documentMode;var gi=Number.isNaN||function(t){return t!==t};$.$inject=[],v.$inject=[];var yi=Array.isArray,bi=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/,wi=function(t){return C(t)?t.trim():t},xi=function(t){return t.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Ci=function(){function e(){try{return new Function(""),!1}catch(t){return!0}}if(!b(Ci.rules)){var n=t.document.querySelector("[ng-csp]")||t.document.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");Ci.rules={noUnsafeEval:!r||r.indexOf("no-unsafe-eval")!==-1,noInlineStyle:!r||r.indexOf("no-inline-style")!==-1}}else Ci.rules={noUnsafeEval:e(),noInlineStyle:!1}}return Ci.rules},Ei=function(){if(b(Ei.name_))return Ei.name_;var e,n,r,i,o=ki.length;for(n=0;n<o;++n)if(r=ki[n],e=t.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=e.getAttribute(r+"jq");break}return Ei.name_=i},Si=/:/g,ki=["ng-","data-ng-","ng:","x-ng-"],Ai=ut(t.document),Oi=/[A-Z]/g,Mi=!1,Vi=1,Ti=2,Ni=3,Ii=8,ji=9,Di=11,Pi={full:"1.6.6",major:1,minor:6,dot:6,codeName:"interdimensional-cable"};_t.expando="ng339";var _i=_t.cache={},Ri=1;_t._data=function(t){return this.cache[t[this.expando]]||{}};var Ui=/-([a-z])/g,Li=/^-ms-/,qi={mouseleave:"mouseout",mouseenter:"mouseover"},Fi=r("jqLite"),Bi=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Hi=/<|&#?\w+;/,zi=/<([\w:-]+)/,Wi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Gi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Gi.optgroup=Gi.option,Gi.tbody=Gi.tfoot=Gi.colgroup=Gi.caption=Gi.thead,Gi.th=Gi.td;var Ki=t.Node.prototype.contains||function(t){return!!(16&this.compareDocumentPosition(t))},Ji=_t.prototype={ready:Xt,toString:function(){var t=[];return o(this,function(e){t.push(""+e)}),"["+t.join(", ")+"]"},eq:function(t){return si(t>=0?this[t]:this[this.length+t])},length:0,push:hi,sort:[].sort,splice:[].splice},Zi={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(t){Zi[ni(t)]=t});var Yi={};o("input,select,option,textarea,button,form,details".split(","),function(t){Yi[t]=!0});var Qi={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern",ngStep:"step"};o({data:Bt,removeData:qt,hasData:It,cleanData:function(t){for(var e=0,n=t.length;e<n;e++)qt(t[e])}},function(t,e){_t[e]=t}),o({data:Bt,inheritedData:Jt,scope:function(t){return si.data(t,"$scope")||Jt(t.parentNode||t,["$isolateScope","$scope"])},isolateScope:function(t){return si.data(t,"$isolateScope")||si.data(t,"$isolateScopeNoTemplate")},controller:Kt,injector:function(t){return Jt(t,"$injector")},removeAttr:function(t,e){t.removeAttribute(e)},hasClass:Ht,css:function(t,e,n){return e=Ot(e),b(n)?void(t.style[e]=n):t.style[e]},attr:function(t,e,n){var r,i=t.nodeType;if(i!==Ni&&i!==Ti&&i!==Ii&&t.getAttribute){var o=ni(e),a=Zi[o];return b(n)?void(null===n||n===!1&&a?t.removeAttribute(e):t.setAttribute(e,a?o:n)):(r=t.getAttribute(e),a&&null!==r&&(r=o),null===r?void 0:r)}},prop:function(t,e,n){return b(n)?void(t[e]=n):t[e]},text:function(){function t(t,e){if(y(e)){var n=t.nodeType;return n===Vi||n===Ni?t.textContent:""}t.textContent=e}return t.$dv="",t}(),val:function(t,e){if(y(e)){if(t.multiple&&"select"===L(t)){var n=[];return o(t.options,function(t){t.selected&&n.push(t.value||t.text)}),n}return t.value}t.value=e},html:function(t,e){return y(e)?t.innerHTML:(Ut(t,!0),void(t.innerHTML=e))},empty:Zt},function(t,e){_t.prototype[e]=function(e,n){var r,i,o=this.length;if(t!==Zt&&y(2===t.length&&t!==Ht&&t!==Kt?e:n)){if(w(e)){for(r=0;r<o;r++)if(t===Bt)t(this[r],e);else for(i in e)t(this[r],i,e[i]);return this}for(var a=t.$dv,s=y(a)?Math.min(o,1):o,u=0;u<s;u++){var c=t(this[u],e,n);a=a?a+c:c}return a}for(r=0;r<o;r++)t(this[r],e,n);return this}}),o({removeData:qt,on:function(t,e,n,r){if(b(r))throw Fi("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Nt(t)){var i=Ft(t,!0),o=i.events,a=i.handle;a||(a=i.handle=ne(t,o));for(var s=e.indexOf(" ")>=0?e.split(" "):[e],u=s.length,c=function(e,r,i){var s=o[e];s||(s=o[e]=[],s.specialHandlerWrapper=r,"$destroy"===e||i||t.addEventListener(e,a)),s.push(n)};u--;)e=s[u],qi[e]?(c(qi[e],ie),c(e,void 0,!0)):c(e)}},off:Lt,one:function(t,e,n){t=si(t),t.on(e,function r(){t.off(e,n),t.off(e,r)}),t.on(e,n)},replaceWith:function(t,e){var n,r=t.parentNode;Ut(t),o(new _t(e),function(e){n?r.insertBefore(e,n.nextSibling):r.replaceChild(e,t),n=e})},children:function(t){var e=[];return o(t.childNodes,function(t){t.nodeType===Vi&&e.push(t)}),e},contents:function(t){return t.contentDocument||t.childNodes||[]},append:function(t,e){var n=t.nodeType;if(n===Vi||n===Di){e=new _t(e);for(var r=0,i=e.length;r<i;r++){var o=e[r];t.appendChild(o)}}},prepend:function(t,e){if(t.nodeType===Vi){var n=t.firstChild;o(new _t(e),function(e){t.insertBefore(e,n)})}},wrap:function(t,e){Pt(t,si(e).eq(0).clone()[0])},remove:Yt,detach:function(t){Yt(t,!0)},after:function(t,e){var n=t,r=t.parentNode;if(r){e=new _t(e);for(var i=0,o=e.length;i<o;i++){var a=e[i];r.insertBefore(a,n.nextSibling),n=a}}},addClass:Wt,removeClass:zt,toggleClass:function(t,e,n){e&&o(e.split(" "),function(e){var r=n;y(r)&&(r=!Ht(t,e)),(r?Wt:zt)(t,e)})},parent:function(t){var e=t.parentNode;return e&&e.nodeType!==Di?e:null},next:function(t){return t.nextElementSibling},find:function(t,e){return t.getElementsByTagName?t.getElementsByTagName(e):[]},clone:Rt,triggerHandler:function(t,e,n){var r,i,a,s=e.type||e,u=Ft(t),c=u&&u.events,l=c&&c[s];l&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:$,type:s,target:t},e.type&&(r=f(r,e)),i=Ct(l),a=n?[r].concat(n):[r],o(i,function(e){r.isImmediatePropagationStopped()||e.apply(t,a)}))}},function(t,e){_t.prototype[e]=function(e,n,r){for(var i,o=0,a=this.length;o<a;o++)y(i)?(i=t(this[o],e,n,r),b(i)&&(i=si(i))):Gt(i,t(this[o],e,n,r));return b(i)?i:this}}),_t.prototype.bind=_t.prototype.on,_t.prototype.unbind=_t.prototype.off;var Xi=Object.create(null);se.prototype={_idx:function(t){return t===this._lastKey?this._lastIndex:(this._lastKey=t,this._lastIndex=this._keys.indexOf(t),this._lastIndex)},_transformKey:function(t){return gi(t)?Xi:t},get:function(t){t=this._transformKey(t);var e=this._idx(t);if(e!==-1)return this._values[e]},set:function(t,e){t=this._transformKey(t);var n=this._idx(t);n===-1&&(n=this._lastIndex=this._keys.length),this._keys[n]=t,this._values[n]=e},"delete":function(t){t=this._transformKey(t);var e=this._idx(t);return e!==-1&&(this._keys.splice(e,1),this._values.splice(e,1),this._lastKey=NaN,this._lastIndex=-1,!0)}};var to=se,eo=[function(){this.$get=[function(){return to}]}],no=/^([^(]+?)=>/,ro=/^[^(]*\(\s*([^)]*)\)/m,io=/,/,oo=/^\s*(_?)(\S+?)\1\s*$/,ao=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,so=r("$injector");he.$$annotate=fe;var uo=r("$animate"),co=1,lo="ng-animate",fo=function(){this.$get=$},ho=function(){var t=new to,e=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(t,e,n){var r=!1;return e&&(e=C(e)?e.split(" "):yi(e)?e:[],o(e,function(e){e&&(r=!0,t[e]=n)})),r}function a(){o(e,function(e){var n=t.get(e);if(n){var r=ve(e.attr("class")),i="",a="";o(n,function(t,e){var n=!!r[e];t!==n&&(t?i+=(i.length?" ":"")+e:a+=(a.length?" ":"")+e)}),o(e,function(t){i&&Wt(t,i),a&&zt(t,a)}),t["delete"](e)}}),e.length=0}function s(n,o,s){var u=t.get(n)||{},c=i(u,o,!0),l=i(u,s,!1);(c||l)&&(t.set(n,u),e.push(n),1===e.length&&r.$$postDigest(a))}return{enabled:$,on:$,off:$,pin:$,push:function(t,e,r,i){i&&i(),r=r||{},r.from&&t.css(r.from),r.to&&t.css(r.to),(r.addClass||r.removeClass)&&s(t,r.addClass,r.removeClass);var o=new n;return o.complete(),o}}}]},po=["$provide",function(t){var e=this,n=null,r=null;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw uo("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";e.$$registeredAnimations[n.substr(1)]=i,t.factory(i,r)},this.customFilter=function(t){return 1===arguments.length&&(r=A(t)?t:null),r},this.classNameFilter=function(t){if(1===arguments.length&&(n=t instanceof RegExp?t:null)){var e=new RegExp("[(\\s|\\/)]"+lo+"[(\\s|\\/)]");if(e.test(n.toString()))throw n=null,uo("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',lo)}return n},this.$get=["$$animateQueue",function(t){function e(t,e,n){if(n){var r=$e(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(t):e.prepend(t)}return{on:t.on,off:t.off,pin:t.pin,enabled:t.enabled,cancel:function(t){t.end&&t.end()},enter:function(n,r,i,o){return r=r&&si(r),i=i&&si(i),r=r||i.parent(),e(n,r,i),t.push(n,"enter",me(o))},move:function(n,r,i,o){return r=r&&si(r),i=i&&si(i),r=r||i.parent(),e(n,r,i),t.push(n,"move",me(o))},leave:function(e,n){return t.push(e,"leave",me(n),function(){e.remove()})},addClass:function(e,n,r){return r=me(r),r.addClass=de(r.addclass,n),t.push(e,"addClass",r)},removeClass:function(e,n,r){return r=me(r),r.removeClass=de(r.removeClass,n),t.push(e,"removeClass",r)},setClass:function(e,n,r,i){return i=me(i),i.addClass=de(i.addClass,n),i.removeClass=de(i.removeClass,r),t.push(e,"setClass",i)},animate:function(e,n,r,i,o){return o=me(o),o.from=o.from?f(o.from,n):n,o.to=o.to?f(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=de(o.tempClasses,i),t.push(e,"animate",o)}}}]}],$o=function(){this.$get=["$$rAF",function(t){function e(e){n.push(e),n.length>1||t(function(){for(var t=0;t<n.length;t++)n[t]();n=[]})}var n=[];return function(){var t=!1;return e(function(){t=!0}),function(n){t?n():e(n)}}}]},vo=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$$isDocumentHidden","$timeout",function(t,e,n,r,i){function a(t){this.setHost(t);var e=n(),o=function(t){i(t,0,!1)};this._doneCallbacks=[],this._tick=function(t){r()?o(t):e(t)},this._state=0}var s=0,u=1,c=2;return a.chain=function(t,e){function n(){return r===t.length?void e(!0):void t[r](function(t){return t===!1?void e(!1):(r++,void n())})}var r=0;n()},a.all=function(t,e){function n(n){i=i&&n,++r===t.length&&e(i)}var r=0,i=!0;o(t,function(t){t.done(n)})},a.prototype={setHost:function(t){this.host=t||{}},done:function(t){this._state===c?t():this._doneCallbacks.push(t)},progress:$,getPromise:function(){if(!this.promise){var e=this;this.promise=t(function(t,n){e.done(function(e){e===!1?n():t()})})}return this.promise},then:function(t,e){return this.getPromise().then(t,e)},"catch":function(t){return this.getPromise()["catch"](t)},"finally":function(t){return this.getPromise()["finally"](t)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(t){var e=this;e._state===s&&(e._state=u,e._tick(function(){e._resolve(t)}))},_resolve:function(t){this._state!==c&&(o(this._doneCallbacks,function(e){e(t)}),this._doneCallbacks.length=0,this._state=c)}},a}]},mo=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(t,e,n){return function(e,r){function i(){return t(function(){o(),s||u.complete(),s=!0}),u}function o(){a.addClass&&(e.addClass(a.addClass),a.addClass=null),a.removeClass&&(e.removeClass(a.removeClass),a.removeClass=null),a.to&&(e.css(a.to),a.to=null)}var a=r||{};a.$$prepared||(a=B(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(e.css(a.from),a.from=null);var s,u=new n;return{start:i,end:i}}}]},go=r("$compile"),yo=new xe;Ce.$inject=["$provide","$$sanitizeUriProvider"],Ee.prototype.isFirstChange=function(){return this.previousValue===yo};var bo=/^((?:x|data)[:\-_])/i,wo=/[:\-_]+(.)/g,xo=r("$controller"),Co=/^(\S+)(\s+as\s+([\w$]+))?$/,Eo=function(){this.$get=["$document",function(t){return function(e){return e?!e.nodeType&&e instanceof si&&(e=e[0]):e=t[0].body,e.offsetWidth+1}}]},So="application/json",ko={"Content-Type":So+";charset=utf-8"},Ao=/^\[|^\{(?!\{)/,Oo={"[":/]$/,"{":/}$/},Mo=/^\)]\}',?\n/,Vo=r("$http"),To=vi.$interpolateMinErr=r("$interpolate");To.throwNoconcat=function(t){throw To("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",t)},To.interr=function(t,e){return To("interr","Can't interpolate: {0}\n{1}",t,e.toString())};var No=function(){this.$get=function(){function t(t){var e=function(t){e.data=t,e.called=!0};return e.id=t,e}var e=vi.callbacks,n={};return{createCallback:function(r){var i="_"+(e.$$counter++).toString(36),o="angular.callbacks."+i,a=t(i);return n[o]=e[i]=a,o},wasCalled:function(t){return n[t].called},getResponse:function(t){return n[t].data},removeCallback:function(t){var r=n[t];delete e[r.id],delete n[t]}}}},Io=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,jo={http:80,https:443,ftp:21},Do=r("$location"),Po=/^\s*[\\/]{2,}/,_o={$$absUrl:"",$$html5:!1,$$replace:!1,absUrl:sn("$$absUrl"),url:function(t){if(y(t))return this.$$url;var e=Io.exec(t);return(e[1]||""===t)&&this.path(decodeURIComponent(e[1])),(e[2]||e[1]||""===t)&&this.search(e[3]||""),this.hash(e[5]||""),this},protocol:sn("$$protocol"),host:sn("$$host"),port:sn("$$port"),path:un("$$path",function(t){return t=null!==t?t.toString():"","/"===t.charAt(0)?t:"/"+t}),search:function(t,e){switch(arguments.length){case 0:return this.$$search;case 1:if(C(t)||E(t))t=t.toString(),this.$$search=rt(t);else{if(!w(t))throw Do("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");t=B(t,{}),o(t,function(e,n){null==e&&delete t[n]}),this.$$search=t}break;default:y(e)||null===e?delete this.$$search[t]:this.$$search[t]=e}return this.$$compose(),this},hash:un("$$hash",function(t){return null!==t?t.toString():""}),replace:function(){return this.$$replace=!0,this}};o([an,on,rn],function(t){t.prototype=Object.create(_o),t.prototype.state=function(e){if(!arguments.length)return this.$$state;if(t!==rn||!this.$$html5)throw Do("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=y(e)?null:e,this.$$urlUpdatedByLocation=!0,this}});var Ro=r("$parse"),Uo={}.constructor.prototype.valueOf,Lo=bt();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(t){Lo[t]=!0});var qo={n:"\n",f:"\f",r:"\r",t:"\t",v:"\x0B","'":"'",'"':'"'},Fo=function(t){this.options=t};Fo.prototype={constructor:Fo,lex:function(t){for(this.text=t,this.index=0,this.tokens=[];this.index<this.text.length;){var e=this.text.charAt(this.index);if('"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var n=e+this.peek(),r=n+this.peek(2),i=Lo[e],o=Lo[n],a=Lo[r];if(i||o||a){var s=a?r:o?n:e;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(t,e){return e.indexOf(t)!==-1},peek:function(t){var e=t||1;return this.index+e<this.text.length&&this.text.charAt(this.index+e)},isNumber:function(t){return"0"<=t&&t<="9"&&"string"==typeof t},isWhitespace:function(t){return" "===t||"\r"===t||"\t"===t||"\n"===t||"\x0B"===t||" "===t},isIdentifierStart:function(t){return this.options.isIdentifierStart?this.options.isIdentifierStart(t,this.codePointAt(t)):this.isValidIdentifierStart(t)},isValidIdentifierStart:function(t){return"a"<=t&&t<="z"||"A"<=t&&t<="Z"||"_"===t||"$"===t},isIdentifierContinue:function(t){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(t,this.codePointAt(t)):this.isValidIdentifierContinue(t)},isValidIdentifierContinue:function(t,e){return this.isValidIdentifierStart(t,e)||this.isNumber(t)},codePointAt:function(t){return 1===t.length?t.charCodeAt(0):(t.charCodeAt(0)<<10)+t.charCodeAt(1)-56613888},peekMultichar:function(){var t=this.text.charAt(this.index),e=this.peek();if(!e)return t;var n=t.charCodeAt(0),r=e.charCodeAt(0);return n>=55296&&n<=56319&&r>=56320&&r<=57343?t+e:t},isExpOperator:function(t){return"-"===t||"+"===t||this.isNumber(t)},throwError:function(t,e,n){n=n||this.index;var r=b(e)?"s "+e+"-"+this.index+" ["+this.text.substring(e,n)+"]":" "+n;throw Ro("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",t,r,this.text)},readNumber:function(){for(var t="",e=this.index;this.index<this.text.length;){var n=ni(this.text.charAt(this.index));if("."===n||this.isNumber(n))t+=n;else{var r=this.peek();if("e"===n&&this.isExpOperator(r))t+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"===t.charAt(t.length-1))t+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!==t.charAt(t.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:e,text:t,constant:!0,value:Number(t)})},readIdent:function(){var t=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var e=this.peekMultichar();if(!this.isIdentifierContinue(e))break;this.index+=e.length}this.tokens.push({index:t,text:this.text.slice(t,this.index),identifier:!0})},readString:function(t){var e=this.index;this.index++;for(var n="",r=t,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=qo[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===t)return this.index++,void this.tokens.push({index:e,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",e)}};var Bo=function(t,e){this.lexer=t,this.options=e};Bo.Program="Program",Bo.ExpressionStatement="ExpressionStatement",Bo.AssignmentExpression="AssignmentExpression",Bo.ConditionalExpression="ConditionalExpression",Bo.LogicalExpression="LogicalExpression",Bo.BinaryExpression="BinaryExpression",Bo.UnaryExpression="UnaryExpression",Bo.CallExpression="CallExpression",Bo.MemberExpression="MemberExpression",Bo.Identifier="Identifier",Bo.Literal="Literal",Bo.ArrayExpression="ArrayExpression",Bo.Property="Property",Bo.ObjectExpression="ObjectExpression",Bo.ThisExpression="ThisExpression",Bo.LocalsExpression="LocalsExpression",Bo.NGValueParameter="NGValueParameter",Bo.prototype={ast:function(t){this.text=t,this.tokens=this.lexer.lex(t);var e=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var t=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&t.push(this.expressionStatement()),!this.expect(";"))return{type:Bo.Program,body:t}},expressionStatement:function(){return{type:Bo.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var t=this.expression();this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var t=this.ternary();if(this.expect("=")){if(!gn(t))throw Ro("lval","Trying to assign a value to a non l-value");t={type:Bo.AssignmentExpression,left:t,right:this.assignment(),operator:"="}}return t},ternary:function(){var t,e,n=this.logicalOR();return this.expect("?")&&(t=this.expression(),this.consume(":"))?(e=this.expression(),{type:Bo.ConditionalExpression,test:n,alternate:t,consequent:e}):n},logicalOR:function(){for(var t=this.logicalAND();this.expect("||");)t={type:Bo.LogicalExpression,operator:"||",left:t,right:this.logicalAND()};return t},logicalAND:function(){for(var t=this.equality();this.expect("&&");)t={type:Bo.LogicalExpression,operator:"&&",left:t,right:this.equality()};return t},equality:function(){for(var t,e=this.relational();t=this.expect("==","!=","===","!==");)e={type:Bo.BinaryExpression,operator:t.text,left:e,right:this.relational()};return e},relational:function(){for(var t,e=this.additive();t=this.expect("<",">","<=",">=");)e={type:Bo.BinaryExpression,operator:t.text,left:e,right:this.additive()};return e},additive:function(){for(var t,e=this.multiplicative();t=this.expect("+","-");)e={type:Bo.BinaryExpression,operator:t.text,left:e,right:this.multiplicative()};return e},multiplicative:function(){for(var t,e=this.unary();t=this.expect("*","/","%");)e={type:Bo.BinaryExpression,operator:t.text,left:e,right:this.unary()};return e},unary:function(){var t;return(t=this.expect("+","-","!"))?{type:Bo.UnaryExpression,operator:t.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var t;this.expect("(")?(t=this.filterChain(),this.consume(")")):this.expect("[")?t=this.arrayDeclaration():this.expect("{")?t=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?t=B(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?t={type:Bo.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?t=this.identifier():this.peek().constant?t=this.constant():this.throwError("not a primary expression",this.peek());for(var e;e=this.expect("(","[",".");)"("===e.text?(t={type:Bo.CallExpression,callee:t,arguments:this.parseArguments()},this.consume(")")):"["===e.text?(t={type:Bo.MemberExpression,object:t,property:this.expression(),computed:!0},this.consume("]")):"."===e.text?t={
type:Bo.MemberExpression,object:t,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return t},filter:function(t){for(var e=[t],n={type:Bo.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return n},parseArguments:function(){var t=[];if(")"!==this.peekToken().text)do t.push(this.filterChain());while(this.expect(","));return t},identifier:function(){var t=this.consume();return t.identifier||this.throwError("is not a valid identifier",t),{type:Bo.Identifier,name:t.text}},constant:function(){return{type:Bo.Literal,value:this.consume().value}},arrayDeclaration:function(){var t=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;t.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:Bo.ArrayExpression,elements:t}},object:function(){var t,e=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;t={type:Bo.Property,kind:"init"},this.peek().constant?(t.key=this.constant(),t.computed=!1,this.consume(":"),t.value=this.expression()):this.peek().identifier?(t.key=this.identifier(),t.computed=!1,this.peek(":")?(this.consume(":"),t.value=this.expression()):t.value=t.key):this.peek("[")?(this.consume("["),t.key=this.expression(),this.consume("]"),t.computed=!0,this.consume(":"),t.value=this.expression()):this.throwError("invalid key",this.peek()),e.push(t)}while(this.expect(","));return this.consume("}"),{type:Bo.ObjectExpression,properties:e}},throwError:function(t,e){throw Ro("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",e.text,t,e.index+1,this.text,this.text.substring(e.index))},consume:function(t){if(0===this.tokens.length)throw Ro("ueoe","Unexpected end of expression: {0}",this.text);var e=this.expect(t);return e||this.throwError("is unexpected, expecting ["+t+"]",this.peek()),e},peekToken:function(){if(0===this.tokens.length)throw Ro("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(t,e,n,r){return this.peekAhead(0,t,e,n,r)},peekAhead:function(t,e,n,r,i){if(this.tokens.length>t){var o=this.tokens[t],a=o.text;if(a===e||a===n||a===r||a===i||!e&&!n&&!r&&!i)return o}return!1},expect:function(t,e,n,r){var i=this.peek(t,e,n,r);return!!i&&(this.tokens.shift(),i)},selfReferential:{"this":{type:Bo.ThisExpression},$locals:{type:Bo.LocalsExpression}}};var Ho=1,zo=2;xn.prototype={compile:function(t){var e=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},vn(t,e.$filter);var n,r="";if(this.stage="assign",n=yn(t)){this.state.computing="assign";var i=this.nextId();this.recurse(n,i),this.return_(i),r="fn.assign="+this.generateFunction("assign","s,v,l")}var a=mn(t.body);e.stage="inputs",o(a,function(t,n){var r="fn"+n;e.state[r]={vars:[],body:[],own:{}},e.state.computing=r;var i=e.nextId();e.recurse(t,i),e.return_(i),e.state.inputs.push({name:r,isPure:t.isPure}),t.watchId=n}),this.state.computing="fn",this.stage="main",this.recurse(t);var s='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+r+this.watchFns()+"return fn;",u=new Function("$filter","getStringValue","ifDefined","plus",s)(this.$filter,fn,hn,pn);return this.state=this.stage=void 0,u},USE:"use",STRICT:"strict",watchFns:function(){var t=[],e=this.state.inputs,n=this;return o(e,function(e){t.push("var "+e.name+"="+n.generateFunction(e.name,"s")),e.isPure&&t.push(e.name,".isPure="+JSON.stringify(e.isPure)+";")}),e.length&&t.push("fn.inputs=["+e.map(function(t){return t.name}).join(",")+"];"),t.join("")},generateFunction:function(t,e){return"function("+e+"){"+this.varsPrefix(t)+this.body(t)+"};"},filterPrefix:function(){var t=[],e=this;return o(this.state.filters,function(n,r){t.push(n+"=$filter("+e.escape(r)+")")}),t.length?"var "+t.join(",")+";":""},varsPrefix:function(t){return this.state[t].vars.length?"var "+this.state[t].vars.join(",")+";":""},body:function(t){return this.state[t].body.join("")},recurse:function(t,e,n,r,i,a){var s,u,c,l,f,h=this;if(r=r||$,!a&&b(t.watchId))return e=e||this.nextId(),void this.if_("i",this.lazyAssign(e,this.computedMember("i",t.watchId)),this.lazyRecurse(t,e,n,r,i,!0));switch(t.type){case Bo.Program:o(t.body,function(e,n){h.recurse(e.expression,void 0,void 0,function(t){u=t}),n!==t.body.length-1?h.current().body.push(u,";"):h.return_(u)});break;case Bo.Literal:l=this.escape(t.value),this.assign(e,l),r(e||l);break;case Bo.UnaryExpression:this.recurse(t.argument,void 0,void 0,function(t){u=t}),l=t.operator+"("+this.ifDefined(u,0)+")",this.assign(e,l),r(l);break;case Bo.BinaryExpression:this.recurse(t.left,void 0,void 0,function(t){s=t}),this.recurse(t.right,void 0,void 0,function(t){u=t}),l="+"===t.operator?this.plus(s,u):"-"===t.operator?this.ifDefined(s,0)+t.operator+this.ifDefined(u,0):"("+s+")"+t.operator+"("+u+")",this.assign(e,l),r(l);break;case Bo.LogicalExpression:e=e||this.nextId(),h.recurse(t.left,e),h.if_("&&"===t.operator?e:h.not(e),h.lazyRecurse(t.right,e)),r(e);break;case Bo.ConditionalExpression:e=e||this.nextId(),h.recurse(t.test,e),h.if_(e,h.lazyRecurse(t.alternate,e),h.lazyRecurse(t.consequent,e)),r(e);break;case Bo.Identifier:e=e||this.nextId(),n&&(n.context="inputs"===h.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",t.name)+"?l:s"),n.computed=!1,n.name=t.name),h.if_("inputs"===h.stage||h.not(h.getHasOwnProperty("l",t.name)),function(){h.if_("inputs"===h.stage||"s",function(){i&&1!==i&&h.if_(h.isNull(h.nonComputedMember("s",t.name)),h.lazyAssign(h.nonComputedMember("s",t.name),"{}")),h.assign(e,h.nonComputedMember("s",t.name))})},e&&h.lazyAssign(e,h.nonComputedMember("l",t.name))),r(e);break;case Bo.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),e=e||this.nextId(),h.recurse(t.object,s,void 0,function(){h.if_(h.notNull(s),function(){t.computed?(u=h.nextId(),h.recurse(t.property,u),h.getStringValue(u),i&&1!==i&&h.if_(h.not(h.computedMember(s,u)),h.lazyAssign(h.computedMember(s,u),"{}")),l=h.computedMember(s,u),h.assign(e,l),n&&(n.computed=!0,n.name=u)):(i&&1!==i&&h.if_(h.isNull(h.nonComputedMember(s,t.property.name)),h.lazyAssign(h.nonComputedMember(s,t.property.name),"{}")),l=h.nonComputedMember(s,t.property.name),h.assign(e,l),n&&(n.computed=!1,n.name=t.property.name))},function(){h.assign(e,"undefined")}),r(e)},!!i);break;case Bo.CallExpression:e=e||this.nextId(),t.filter?(u=h.filter(t.callee.name),c=[],o(t.arguments,function(t){var e=h.nextId();h.recurse(t,e),c.push(e)}),l=u+"("+c.join(",")+")",h.assign(e,l),r(e)):(u=h.nextId(),s={},c=[],h.recurse(t.callee,u,s,function(){h.if_(h.notNull(u),function(){o(t.arguments,function(e){h.recurse(e,t.constant?void 0:h.nextId(),void 0,function(t){c.push(t)})}),l=s.name?h.member(s.context,s.name,s.computed)+"("+c.join(",")+")":u+"("+c.join(",")+")",h.assign(e,l)},function(){h.assign(e,"undefined")}),r(e)}));break;case Bo.AssignmentExpression:u=this.nextId(),s={},this.recurse(t.left,void 0,s,function(){h.if_(h.notNull(s.context),function(){h.recurse(t.right,u),l=h.member(s.context,s.name,s.computed)+t.operator+u,h.assign(e,l),r(e||l)})},1);break;case Bo.ArrayExpression:c=[],o(t.elements,function(e){h.recurse(e,t.constant?void 0:h.nextId(),void 0,function(t){c.push(t)})}),l="["+c.join(",")+"]",this.assign(e,l),r(e||l);break;case Bo.ObjectExpression:c=[],f=!1,o(t.properties,function(t){t.computed&&(f=!0)}),f?(e=e||this.nextId(),this.assign(e,"{}"),o(t.properties,function(t){t.computed?(s=h.nextId(),h.recurse(t.key,s)):s=t.key.type===Bo.Identifier?t.key.name:""+t.key.value,u=h.nextId(),h.recurse(t.value,u),h.assign(h.member(e,s,t.computed),u)})):(o(t.properties,function(e){h.recurse(e.value,t.constant?void 0:h.nextId(),void 0,function(t){c.push(h.escape(e.key.type===Bo.Identifier?e.key.name:""+e.key.value)+":"+t)})}),l="{"+c.join(",")+"}",this.assign(e,l)),r(e||l);break;case Bo.ThisExpression:this.assign(e,"s"),r(e||"s");break;case Bo.LocalsExpression:this.assign(e,"l"),r(e||"l");break;case Bo.NGValueParameter:this.assign(e,"v"),r(e||"v")}},getHasOwnProperty:function(t,e){var n=t+"."+e,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,t+"&&("+this.escape(e)+" in "+t+")")),r[n]},assign:function(t,e){if(t)return this.current().body.push(t,"=",e,";"),t},filter:function(t){return this.state.filters.hasOwnProperty(t)||(this.state.filters[t]=this.nextId(!0)),this.state.filters[t]},ifDefined:function(t,e){return"ifDefined("+t+","+this.escape(e)+")"},plus:function(t,e){return"plus("+t+","+e+")"},return_:function(t){this.current().body.push("return ",t,";")},if_:function(t,e,n){if(t===!0)e();else{var r=this.current().body;r.push("if(",t,"){"),e(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(t){return"!("+t+")"},isNull:function(t){return t+"==null"},notNull:function(t){return t+"!=null"},nonComputedMember:function(t,e){var n=/^[$_a-zA-Z][$_a-zA-Z0-9]*$/,r=/[^$_a-zA-Z0-9]/g;return n.test(e)?t+"."+e:t+'["'+e.replace(r,this.stringEscapeFn)+'"]'},computedMember:function(t,e){return t+"["+e+"]"},member:function(t,e,n){return n?this.computedMember(t,e):this.nonComputedMember(t,e)},getStringValue:function(t){this.assign(t,"getStringValue("+t+")")},lazyRecurse:function(t,e,n,r,i,o){var a=this;return function(){a.recurse(t,e,n,r,i,o)}},lazyAssign:function(t,e){var n=this;return function(){n.assign(t,e)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)},escape:function(t){if(C(t))return"'"+t.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(E(t))return t.toString();if(t===!0)return"true";if(t===!1)return"false";if(null===t)return"null";if("undefined"==typeof t)return"undefined";throw Ro("esc","IMPOSSIBLE")},nextId:function(t,e){var n="v"+this.state.nextId++;return t||this.current().vars.push(n+(e?"="+e:"")),n},current:function(){return this.state[this.state.computing]}},Cn.prototype={compile:function(t){var e=this;vn(t,e.$filter);var n,r;(n=yn(t))&&(r=this.recurse(n));var i,a=mn(t.body);a&&(i=[],o(a,function(t,n){var r=e.recurse(t);r.isPure=t.isPure,t.input=r,i.push(r),t.watchId=n}));var s=[];o(t.body,function(t){s.push(e.recurse(t.expression))});var u=0===t.body.length?$:1===t.body.length?s[0]:function(t,e){var n;return o(s,function(r){n=r(t,e)}),n};return r&&(u.assign=function(t,e,n){return r(t,n,e)}),i&&(u.inputs=i),u},recurse:function(t,e,n){var r,i,a,s=this;if(t.input)return this.inputs(t.input,t.watchId);switch(t.type){case Bo.Literal:return this.value(t.value,e);case Bo.UnaryExpression:return i=this.recurse(t.argument),this["unary"+t.operator](i,e);case Bo.BinaryExpression:return r=this.recurse(t.left),i=this.recurse(t.right),this["binary"+t.operator](r,i,e);case Bo.LogicalExpression:return r=this.recurse(t.left),i=this.recurse(t.right),this["binary"+t.operator](r,i,e);case Bo.ConditionalExpression:return this["ternary?:"](this.recurse(t.test),this.recurse(t.alternate),this.recurse(t.consequent),e);case Bo.Identifier:return s.identifier(t.name,e,n);case Bo.MemberExpression:return r=this.recurse(t.object,!1,!!n),t.computed||(i=t.property.name),t.computed&&(i=this.recurse(t.property)),t.computed?this.computedMember(r,i,e,n):this.nonComputedMember(r,i,e,n);case Bo.CallExpression:return a=[],o(t.arguments,function(t){a.push(s.recurse(t))}),t.filter&&(i=this.$filter(t.callee.name)),t.filter||(i=this.recurse(t.callee,!0)),t.filter?function(t,n,r,o){for(var s=[],u=0;u<a.length;++u)s.push(a[u](t,n,r,o));var c=i.apply(void 0,s,o);return e?{context:void 0,name:void 0,value:c}:c}:function(t,n,r,o){var s,u=i(t,n,r,o);if(null!=u.value){for(var c=[],l=0;l<a.length;++l)c.push(a[l](t,n,r,o));s=u.value.apply(u.context,c)}return e?{value:s}:s};case Bo.AssignmentExpression:return r=this.recurse(t.left,!0,1),i=this.recurse(t.right),function(t,n,o,a){var s=r(t,n,o,a),u=i(t,n,o,a);return s.context[s.name]=u,e?{value:u}:u};case Bo.ArrayExpression:return a=[],o(t.elements,function(t){a.push(s.recurse(t))}),function(t,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](t,n,r,i));return e?{value:o}:o};case Bo.ObjectExpression:return a=[],o(t.properties,function(t){t.computed?a.push({key:s.recurse(t.key),computed:!0,value:s.recurse(t.value)}):a.push({key:t.key.type===Bo.Identifier?t.key.name:""+t.key.value,computed:!1,value:s.recurse(t.value)})}),function(t,n,r,i){for(var o={},s=0;s<a.length;++s)a[s].computed?o[a[s].key(t,n,r,i)]=a[s].value(t,n,r,i):o[a[s].key]=a[s].value(t,n,r,i);return e?{value:o}:o};case Bo.ThisExpression:return function(t){return e?{value:t}:t};case Bo.LocalsExpression:return function(t,n){return e?{value:n}:n};case Bo.NGValueParameter:return function(t,n,r){return e?{value:r}:r}}},"unary+":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=b(a)?+a:0,e?{value:a}:a}},"unary-":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=b(a)?-a:-0,e?{value:a}:a}},"unary!":function(t,e){return function(n,r,i,o){var a=!t(n,r,i,o);return e?{value:a}:a}},"binary+":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=pn(s,u);return n?{value:c}:c}},"binary-":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=(b(s)?s:0)-(b(u)?u:0);return n?{value:c}:c}},"binary*":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)*e(r,i,o,a);return n?{value:s}:s}},"binary/":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)/e(r,i,o,a);return n?{value:s}:s}},"binary%":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)%e(r,i,o,a);return n?{value:s}:s}},"binary===":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)===e(r,i,o,a);return n?{value:s}:s}},"binary!==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!==e(r,i,o,a);return n?{value:s}:s}},"binary==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)==e(r,i,o,a);return n?{value:s}:s}},"binary!=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!=e(r,i,o,a);return n?{value:s}:s}},"binary<":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<e(r,i,o,a);return n?{value:s}:s}},"binary>":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>e(r,i,o,a);return n?{value:s}:s}},"binary<=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<=e(r,i,o,a);return n?{value:s}:s}},"binary>=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>=e(r,i,o,a);return n?{value:s}:s}},"binary&&":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)&&e(r,i,o,a);return n?{value:s}:s}},"binary||":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)||e(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(t,e,n,r){return function(i,o,a,s){var u=t(i,o,a,s)?e(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(t,e){return function(){return e?{context:void 0,name:void 0,value:t}:t}},identifier:function(t,e,n){return function(r,i,o,a){var s=i&&t in i?i:r;n&&1!==n&&s&&null==s[t]&&(s[t]={});var u=s?s[t]:void 0;return e?{context:s,name:t,value:u}:u}},computedMember:function(t,e,n,r){return function(i,o,a,s){var u,c,l=t(i,o,a,s);return null!=l&&(u=e(i,o,a,s),u=fn(u),r&&1!==r&&l&&!l[u]&&(l[u]={}),c=l[u]),n?{context:l,name:u,value:c}:c}},nonComputedMember:function(t,e,n,r){return function(i,o,a,s){var u=t(i,o,a,s);r&&1!==r&&u&&null==u[e]&&(u[e]={});var c=null!=u?u[e]:void 0;return n?{context:u,name:e,value:c}:c}},inputs:function(t,e){return function(n,r,i,o){return o?o[e]:t(n,r,i)}}},En.prototype={constructor:En,parse:function(t){var e=this.ast.ast(t),n=this.astCompiler.compile(e);return n.literal=bn(e),n.constant=wn(e),n}};var Wo=r("$sce"),Go={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Ko=/_([a-z])/g,Jo=r("$compile"),Zo=t.document.createElement("a"),Yo=zn(t.location.href);Kn.$inject=["$document"],Zn.$inject=["$provide"];var Qo=22,Xo=".",ta="0";er.$inject=["$locale"],nr.$inject=["$locale"];var ea={yyyy:sr("FullYear",4,0,!1,!0),yy:sr("FullYear",2,0,!0,!0),y:sr("FullYear",1,0,!1,!0),MMMM:ur("Month"),MMM:ur("Month",!0),MM:sr("Month",2,1),M:sr("Month",1,1),LLLL:ur("Month",!1,!0),dd:sr("Date",2),d:sr("Date",1),HH:sr("Hours",2),H:sr("Hours",1),hh:sr("Hours",2,-12),h:sr("Hours",1,-12),mm:sr("Minutes",2),m:sr("Minutes",1),ss:sr("Seconds",2),s:sr("Seconds",1),sss:sr("Milliseconds",3),EEEE:ur("Day"),EEE:ur("Day",!0),a:pr,Z:cr,ww:hr(2),w:hr(1),G:dr,GG:dr,GGG:dr,GGGG:$r},na=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,ra=/^-?\d+$/;vr.$inject=["$locale"];var ia=m(ni),oa=m(ri);br.$inject=["$parse"];var aa=m({restrict:"E",compile:function(t,e){if(!e.href&&!e.xlinkHref)return function(t,e){if("a"===e[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===pi.call(e.prop("href"))?"xlink:href":"href";e.on("click",function(t){e.attr(n)||t.preventDefault()})}}}}),sa={};o(Zi,function(t,e){function n(t,n,i){t.$watch(i[r],function(t){i.$set(e,!!t)})}if("multiple"!==t){var r=Se("ng-"+e),i=n;"checked"===t&&(i=function(t,e,i){i.ngModel!==i[r]&&n(t,e,i)}),sa[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(Qi,function(t,e){sa[e]=function(){return{priority:100,link:function(t,n,r){if("ngPattern"===e&&"/"===r.ngPattern.charAt(0)){var i=r.ngPattern.match(Xr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}t.$watch(r[e],function(t){r.$set(e,t)})}}}}),o(["src","srcset","href"],function(t){var e=Se("ng-"+t);sa[e]=function(){return{priority:99,link:function(n,r,i){var o=t,a=t;"href"===t&&"[object SVGAnimatedString]"===pi.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(e,function(e){return e?(i.$set(a,e),void(ai&&o&&r.prop(o,i[a]))):void("href"===t&&i.$set(a,null))})}}}});var ua={$addControl:$,$$renameControl:xr,$removeControl:$,$setValidity:$,$setDirty:$,$setPristine:$,$setSubmitted:$},ca="ng-pending",la="ng-submitted";Cr.$inject=["$element","$attrs","$scope","$animate","$interpolate"],Cr.prototype={$rollbackViewValue:function(){o(this.$$controls,function(t){t.$rollbackViewValue()})},$commitViewValue:function(){o(this.$$controls,function(t){t.$commitViewValue()})},$addControl:function(t){mt(t.$name,"input"),this.$$controls.push(t),t.$name&&(this[t.$name]=t),t.$$parentForm=this},$$renameControl:function(t,e){var n=t.$name;this[n]===t&&delete this[n],this[e]=t,t.$name=e},$removeControl:function(t){t.$name&&this[t.$name]===t&&delete this[t.$name],o(this.$pending,function(e,n){this.$setValidity(n,null,t)},this),o(this.$error,function(e,n){this.$setValidity(n,null,t)},this),o(this.$$success,function(e,n){this.$setValidity(n,null,t)},this),F(this.$$controls,t),t.$$parentForm=ua},$setDirty:function(){this.$$animate.removeClass(this.$$element,Ga),this.$$animate.addClass(this.$$element,Ka),this.$dirty=!0,this.$pristine=!1,this.$$parentForm.$setDirty()},$setPristine:function(){this.$$animate.setClass(this.$$element,Ga,Ka+" "+la),this.$dirty=!1,this.$pristine=!0,this.$submitted=!1,o(this.$$controls,function(t){t.$setPristine()})},$setUntouched:function(){o(this.$$controls,function(t){t.$setUntouched()})},$setSubmitted:function(){this.$$animate.addClass(this.$$element,la),this.$submitted=!0,this.$$parentForm.$setSubmitted()}},Sr({clazz:Cr,set:function(t,e,n){var r=t[e];if(r){var i=r.indexOf(n);i===-1&&r.push(n)}else t[e]=[n]},unset:function(t,e,n){var r=t[e];r&&(F(r,n),0===r.length&&delete t[e])}});var fa=function(t){return["$timeout","$parse",function(e,n){function r(t){return""===t?n('this[""]').assign:n(t).assign||$}var i={name:"form",restrict:t?"EAC":"E",require:["form","^^?form"],controller:Cr,compile:function(n,i){n.addClass(Ga).addClass(za);var o=i.name?"name":!(!t||!i.ngForm)&&"ngForm";return{pre:function(t,n,i,a){var s=a[0];if(!("action"in i)){var u=function(e){t.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),e.preventDefault()};n[0].addEventListener("submit",u),n.on("$destroy",function(){e(function(){n[0].removeEventListener("submit",u)},0,!1)})}var c=a[1]||s.$$parentForm;c.$addControl(s);var l=o?r(s.$name):$;o&&(l(t,s),i.$observe(o,function(e){s.$name!==e&&(l(t,void 0),s.$$parentForm.$$renameControl(s,e),(l=r(s.$name))(t,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),l(t,void 0),f(s,ua)})}}}};return i}]},ha=fa(),pa=fa(!0),da=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,$a=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,va=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,ma=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,ga=/^(\d{4,})-(\d{2})-(\d{2})$/,ya=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,ba=/^(\d{4,})-W(\d\d)$/,wa=/^(\d{4,})-(\d\d)$/,xa=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Ca="keydown wheel mousedown",Ea=bt();o("date,datetime-local,month,time,week".split(","),function(t){Ea[t]=!0});var Sa={text:Or,date:Nr("date",ga,Tr(ga,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":Nr("datetimelocal",ya,Tr(ya,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:Nr("time",xa,Tr(xa,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:Nr("week",ba,Vr,"yyyy-Www"),month:Nr("month",wa,Tr(wa,["yyyy","MM"]),"yyyy-MM"),number:Ur,url:qr,email:Fr,radio:Br,range:Lr,checkbox:zr,hidden:$,button:$,submit:$,reset:$,file:$},ka=["$browser","$sniffer","$filter","$parse",function(t,e,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Sa[ni(a.type)]||Sa.text)(i,o,a,s[0],e,t,n,r)}}}}],Aa=/^(true|false|\d+)$/,Oa=function(){function t(t,e,n){var r=b(n)?n:9===ai?"":null;t.prop("value",r),e.$set("value",n)}return{restrict:"A",priority:100,compile:function(e,n){return Aa.test(n.ngValue)?function(e,n,r){var i=e.$eval(r.ngValue);t(n,r,i)}:function(e,n,r){e.$watch(r.ngValue,function(e){t(n,r,e)})}}}},Ma=["$compile",function(t){return{restrict:"AC",compile:function(e){return t.$$addBindingClass(e),function(e,n,r){t.$$addBindingInfo(n,r.ngBind),n=n[0],e.$watch(r.ngBind,function(t){n.textContent=wt(t)})}}}}],Va=["$interpolate","$compile",function(t,e){return{compile:function(n){return e.$$addBindingClass(n),function(n,r,i){var o=t(r.attr(i.$attr.ngBindTemplate));e.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(t){r.textContent=y(t)?"":t})}}}}],Ta=["$sce","$parse","$compile",function(t,e,n){return{restrict:"A",compile:function(r,i){var o=e(i.ngBindHtml),a=e(i.ngBindHtml,function(e){return t.valueOf(e)});return n.$$addBindingClass(r),function(e,r,i){n.$$addBindingInfo(r,i.ngBindHtml),e.$watch(a,function(){var n=o(e);r.html(t.getTrustedHtml(n)||"")})}}}}],Na=m({restrict:"A",require:"ngModel",link:function(t,e,n,r){r.$viewChangeListeners.push(function(){t.$eval(n.ngChange)})}}),Ia=Wr("",!0),ja=Wr("Odd",0),Da=Wr("Even",1),Pa=wr({compile:function(t,e){e.$set("ngCloak",void 0),t.removeClass("ng-cloak")}}),_a=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Ra={},Ua={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(t){var e=Se("ng-"+t);Ra[e]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[e]);return function(e,n){n.on(t,function(n){var i=function(){a(e,{$event:n})};Ua[t]&&r.$$phase?e.$evalAsync(i):e.$apply(i)})}}}}]});var La=["$animate","$compile",function(t,e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=e.$$createComment("end ngIf",i.ngIf),s={clone:n},t.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=yt(s.clone),t.leave(c).done(function(t){t!==!1&&(c=null)}),s=null))})}}}],qa=["$templateRequest","$anchorScroll","$animate",function(t,e,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:vi.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,h,p,d=0,$=function(){h&&(h.remove(),h=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).done(function(t){t!==!1&&(h=null)}),h=p,p=null)};r.$watch(o,function(o){var u=function(t){t===!1||!b(s)||s&&!r.$eval(s)||e()},h=++d;o?(t(o,!0).then(function(t){if(!r.$$destroyed&&h===d){var e=r.$new();c.template=t;var s=l(e,function(t){$(),n.enter(t,null,i).done(u)});f=e,p=s,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||h===d&&($(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):($(),c.template=null)})}}}}],Fa=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return pi.call(r[0]).match(/SVG/)?(r.empty(),void e(jt(o.template,t.document).childNodes)(n,function(t){r.append(t)},{futureParentElement:r})):(r.html(o.template),void e(r.contents())(n))}}}],Ba=wr({priority:450,compile:function(){return{pre:function(t,e,n){t.$eval(n.ngInit)}}}}),Ha=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(t,e,n,r){var i=n.ngList||", ",a="false"!==n.ngTrim,s=a?wi(i):i,u=function(t){if(!y(t)){var e=[];return t&&o(t.split(s),function(t){t&&e.push(a?wi(t):t)}),e}};r.$parsers.push(u),r.$formatters.push(function(t){if(yi(t))return t.join(i)}),r.$isEmpty=function(t){return!t||!t.length}}}},za="ng-valid",Wa="ng-invalid",Ga="ng-pristine",Ka="ng-dirty",Ja="ng-untouched",Za="ng-touched",Ya="ng-empty",Qa="ng-not-empty",Xa=r("ngModel");Gr.$inject=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$q","$interpolate"],Gr.prototype={$$initGetterSetters:function(){if(this.$options.getOption("getterSetter")){var t=this.$$parse(this.$$attr.ngModel+"()"),e=this.$$parse(this.$$attr.ngModel+"($$$p)");this.$$ngModelGet=function(e){var n=this.$$parsedNgModel(e);return A(n)&&(n=t(e)),n},this.$$ngModelSet=function(t,n){A(this.$$parsedNgModel(t))?e(t,{$$$p:n}):this.$$parsedNgModelAssign(t,n)}}else if(!this.$$parsedNgModel.assign)throw Xa("nonassign","Expression '{0}' is non-assignable. Element: {1}",this.$$attr.ngModel,et(this.$$element))},$render:$,$isEmpty:function(t){return y(t)||""===t||null===t||t!==t},$$updateEmptyClasses:function(t){this.$isEmpty(t)?(this.$$animate.removeClass(this.$$element,Qa),this.$$animate.addClass(this.$$element,Ya)):(this.$$animate.removeClass(this.$$element,Ya),this.$$animate.addClass(this.$$element,Qa))},$setPristine:function(){this.$dirty=!1,this.$pristine=!0,this.$$animate.removeClass(this.$$element,Ka),this.$$animate.addClass(this.$$element,Ga)},$setDirty:function(){this.$dirty=!0,this.$pristine=!1,this.$$animate.removeClass(this.$$element,Ga),this.$$animate.addClass(this.$$element,Ka),this.$$parentForm.$setDirty()},$setUntouched:function(){this.$touched=!1,this.$untouched=!0,this.$$animate.setClass(this.$$element,Ja,Za)},$setTouched:function(){this.$touched=!0,this.$untouched=!1,this.$$animate.setClass(this.$$element,Za,Ja)},$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce),this.$viewValue=this.$$lastCommittedViewValue,this.$render()},$validate:function(){if(!gi(this.$modelValue)){var t=this.$$lastCommittedViewValue,e=this.$$rawModelValue,n=this.$valid,r=this.$modelValue,i=this.$options.getOption("allowInvalid"),o=this;this.$$runValidators(e,t,function(t){i||n===t||(o.$modelValue=t?e:void 0,o.$modelValue!==r&&o.$$writeModelToScope())})}},$$runValidators:function(t,e,n){function r(){var t=l.$$parserName||"parse";return y(l.$$parserValid)?(s(t,null),!0):(l.$$parserValid||(o(l.$validators,function(t,e){s(e,null)}),o(l.$asyncValidators,function(t,e){s(e,null)})),s(t,l.$$parserValid),l.$$parserValid)}function i(){var n=!0;return o(l.$validators,function(r,i){var o=Boolean(r(t,e));n=n&&o,s(i,o)}),!!n||(o(l.$asyncValidators,function(t,e){s(e,null)}),!1)}function a(){var n=[],r=!0;o(l.$asyncValidators,function(i,o){var a=i(t,e);if(!D(a))throw Xa("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",a);s(o,void 0),n.push(a.then(function(){s(o,!0)},function(){r=!1,s(o,!1)}))}),n.length?l.$$q.all(n).then(function(){u(r)},$):u(!0)}function s(t,e){c===l.$$currentValidationRunId&&l.$setValidity(t,e)}function u(t){c===l.$$currentValidationRunId&&n(t)}this.$$currentValidationRunId++;var c=this.$$currentValidationRunId,l=this;return r()&&i()?void a():void u(!1)},$commitViewValue:function(){var t=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce),(this.$$lastCommittedViewValue!==t||""===t&&this.$$hasNativeValidators)&&(this.$$updateEmptyClasses(t),this.$$lastCommittedViewValue=t,this.$pristine&&this.$setDirty(),this.$$parseAndValidate())},$$parseAndValidate:function(){function t(){r.$modelValue!==o&&r.$$writeModelToScope()}var e=this.$$lastCommittedViewValue,n=e,r=this;if(this.$$parserValid=!y(n)||void 0,this.$$parserValid)for(var i=0;i<this.$parsers.length;i++)if(n=this.$parsers[i](n),y(n)){this.$$parserValid=!1;break}gi(this.$modelValue)&&(this.$modelValue=this.$$ngModelGet(this.$$scope));var o=this.$modelValue,a=this.$options.getOption("allowInvalid");this.$$rawModelValue=n,a&&(this.$modelValue=n,t()),this.$$runValidators(n,this.$$lastCommittedViewValue,function(e){a||(r.$modelValue=e?n:void 0,t())})},$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue),o(this.$viewChangeListeners,function(t){try{t()}catch(e){this.$$exceptionHandler(e)}},this)},$setViewValue:function(t,e){this.$viewValue=t,this.$options.getOption("updateOnDefault")&&this.$$debounceViewValueCommit(e)},$$debounceViewValueCommit:function(t){var e=this.$options.getOption("debounce");E(e[t])?e=e[t]:E(e["default"])&&(e=e["default"]),this.$$timeout.cancel(this.$$pendingDebounce);var n=this;e>0?this.$$pendingDebounce=this.$$timeout(function(){n.$commitViewValue()},e):this.$$scope.$root.$$phase?this.$commitViewValue():this.$$scope.$apply(function(){n.$commitViewValue()})},$overrideModelOptions:function(t){this.$options=this.$options.createChild(t)}},Sr({clazz:Gr,set:function(t,e){t[e]=!0},unset:function(t,e){delete t[e]}});var ts,es=["$rootScope",function(t){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Gr,priority:1,compile:function(e){return e.addClass(Ga).addClass(Ja).addClass(za),{pre:function(t,e,n,r){var i=r[0],o=r[1]||i.$$parentForm,a=r[2];a&&(i.$options=a.$options),i.$$initGetterSetters(),o.$addControl(i),n.$observe("name",function(t){i.$name!==t&&i.$$parentForm.$$renameControl(i,t)}),t.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(e,n,r,i){function o(){a.$setTouched()}var a=i[0];a.$options.getOption("updateOn")&&n.on(a.$options.getOption("updateOn"),function(t){a.$$debounceViewValueCommit(t&&t.type)}),n.on("blur",function(){a.$touched||(t.$$phase?e.$evalAsync(o):e.$apply(o))})}}}}}],ns=/(\s+|^)default(\s+|$)/;Jr.prototype={getOption:function(t){return this.$$options[t]},createChild:function(t){var e=!1;return t=f({},t),o(t,function(n,r){"$inherit"===n?"*"===r?e=!0:(t[r]=this.$$options[r],"updateOn"===r&&(t.updateOnDefault=this.$$options.updateOnDefault)):"updateOn"===r&&(t.updateOnDefault=!1,t[r]=wi(n.replace(ns,function(){return t.updateOnDefault=!0," "})))},this),e&&(delete t["*"],Zr(t,this.$$options)),Zr(t,ts.$$options),new Jr(t)}},ts=new Jr({updateOn:"",updateOnDefault:!0,debounce:0,getterSetter:!1,allowInvalid:!1,timezone:null});var rs=function(){function t(t,e){this.$$attrs=t,this.$$scope=e}return t.$inject=["$attrs","$scope"],t.prototype={$onInit:function(){var t=this.parentCtrl?this.parentCtrl.$options:ts,e=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=t.createChild(e)}},{restrict:"A",priority:10,require:{parentCtrl:"?^^ngModelOptions"},bindToController:!0,controller:t}},is=wr({terminal:!0,priority:1e3}),os=r("ngOptions"),as=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,ss=["$compile","$document","$parse",function(e,n,r){
function a(t,e,n){function o(t,e,n,r,i){this.selectValue=t,this.viewValue=e,this.label=n,this.group=r,this.disabled=i}function a(t){var e;if(!c&&i(t))e=t;else{e=[];for(var n in t)t.hasOwnProperty(n)&&"$"!==n.charAt(0)&&e.push(n)}return e}var s=t.match(as);if(!s)throw os("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",t,et(e));var u=s[5]||s[7],c=s[6],l=/ as /.test(s[0])&&s[1],f=s[9],h=r(s[2]?s[1]:u),p=l&&r(l),d=p||h,$=f&&r(f),v=f?function(t,e){return $(n,e)}:function(t){return ae(t)},m=function(t,e){return v(t,C(t,e))},g=r(s[2]||s[1]),y=r(s[3]||""),b=r(s[4]||""),w=r(s[8]),x={},C=c?function(t,e){return x[c]=e,x[u]=t,x}:function(t){return x[u]=t,x};return{trackBy:f,getTrackByValue:m,getWatchables:r(w,function(t){var e=[];t=t||[];for(var r=a(t),i=r.length,o=0;o<i;o++){var u=t===r?o:r[o],c=t[u],l=C(c,u),f=v(c,l);if(e.push(f),s[2]||s[1]){var h=g(n,l);e.push(h)}if(s[4]){var p=b(n,l);e.push(p)}}return e}),getOptions:function(){for(var t=[],e={},r=w(n)||[],i=a(r),s=i.length,u=0;u<s;u++){var c=r===i?u:i[u],l=r[c],h=C(l,c),p=d(n,h),$=v(p,h),x=g(n,h),E=y(n,h),S=b(n,h),k=new o($,p,x,E,S);t.push(k),e[$]=k}return{items:t,selectValueMap:e,getOptionFromViewValue:function(t){return e[m(t)]},getViewValueFromOption:function(t){return f?B(t.viewValue):t.viewValue}}}}}function s(t,r,i,s){function l(t,e){var n=u.cloneNode(!1);e.appendChild(n),h(t,n)}function f(t){var e=C.getOptionFromViewValue(t),n=e&&e.element;return n&&!n.selected&&(n.selected=!0),e}function h(t,e){t.element=e,e.disabled=t.disabled,t.label!==e.label&&(e.label=t.label,e.textContent=t.label),e.value=t.selectValue}function p(){var t=C&&d.readValue();if(C)for(var e=C.items.length-1;e>=0;e--){var n=C.items[e];Yt(b(n.group)?n.element.parentNode:n.element)}C=E.getOptions();var i={};if(C.items.forEach(function(t){var e;b(t.group)?(e=i[t.group],e||(e=c.cloneNode(!1),S.appendChild(e),e.label=null===t.group?"null":t.group,i[t.group]=e),l(t,e)):l(t,S)}),r[0].appendChild(S),$.$render(),!$.$isEmpty(t)){var o=d.readValue(),a=E.trackBy||v;(a?z(t,o):t===o)||($.$setViewValue(o),$.$render())}}for(var d=s[0],$=s[1],v=i.multiple,m=0,g=r.children(),y=g.length;m<y;m++)if(""===g[m].value){d.hasEmptyOption=!0,d.emptyOption=g.eq(m);break}r.empty();var w=!!d.emptyOption,x=si(u.cloneNode(!1));x.val("?");var C,E=a(i.ngOptions,r,t),S=n[0].createDocumentFragment();d.generateUnknownOptionValue=function(t){return"?"},v?(d.writeValue=function(t){if(C){var e=t&&t.map(f)||[];C.items.forEach(function(t){t.element.selected&&!q(e,t)&&(t.element.selected=!1)})}},d.readValue=function(){var t=r.val()||[],e=[];return o(t,function(t){var n=C.selectValueMap[t];n&&!n.disabled&&e.push(C.getViewValueFromOption(n))}),e},E.trackBy&&t.$watchCollection(function(){if(yi($.$viewValue))return $.$viewValue.map(function(t){return E.getTrackByValue(t)})},function(){$.$render()})):(d.writeValue=function(t){if(C){var e=r[0].options[r[0].selectedIndex],n=C.getOptionFromViewValue(t);e&&e.removeAttribute("selected"),n?(r[0].value!==n.selectValue&&(d.removeUnknownOption(),r[0].value=n.selectValue,n.element.selected=!0),n.element.setAttribute("selected","selected")):d.selectUnknownOrEmptyOption(t)}},d.readValue=function(){var t=C.selectValueMap[r.val()];return t&&!t.disabled?(d.unselectEmptyOption(),d.removeUnknownOption(),C.getViewValueFromOption(t)):null},E.trackBy&&t.$watch(function(){return E.getTrackByValue($.$viewValue)},function(){$.$render()})),w&&(e(d.emptyOption)(t),r.prepend(d.emptyOption),d.emptyOption[0].nodeType===Ii?(d.hasEmptyOption=!1,d.registerOption=function(t,e){""===e.val()&&(d.hasEmptyOption=!0,d.emptyOption=e,d.emptyOption.removeClass("ng-scope"),$.$render(),e.on("$destroy",function(){var t=d.$isEmptyOptionSelected();d.hasEmptyOption=!1,d.emptyOption=void 0,t&&$.$render()}))}):d.emptyOption.removeClass("ng-scope")),t.$watchCollection(E.getWatchables,p)}var u=t.document.createElement("option"),c=t.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(t,e,n,r){r[0].registerOption=$},post:s}}}],us=["$locale","$interpolate","$log",function(t,e,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(t){s.text(t||"")}var l,f=u.count,h=u.$attr.when&&s.attr(u.$attr.when),p=u.offset||0,d=a.$eval(h)||{},v={},m=e.startSymbol(),g=e.endSymbol(),b=m+f+"-"+p+g,w=vi.noop;o(u,function(t,e){var n=i.exec(e);if(n){var r=(n[1]?"-":"")+ni(n[2]);d[r]=s.attr(u.$attr[e])}}),o(d,function(t,n){v[n]=e(t.replace(r,b))}),a.$watch(f,function(e){var r=parseFloat(e),i=gi(r);if(i||r in d||(r=t.pluralCat(r-p)),!(r===l||i&&gi(l))){w();var o=v[r];y(o)?(null!=e&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+h),w=$,c()):w=a.$watch(o,c),l=r}})}}}],cs=["$parse","$animate","$compile",function(t,e,n){var a="$$NG_REMOVED",s=r("ngRepeat"),u=function(t,e,n,r,i,o,a){t[n]=r,i&&(t[i]=o),t.$index=e,t.$first=0===e,t.$last=e===a-1,t.$middle=!(t.$first||t.$last),t.$odd=!(t.$even=0===(1&e))},c=function(t){return t.clone[0]},l=function(t){return t.clone[t.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,f){var h=f.ngRepeat,p=n.$$createComment("end ngRepeat",h),d=h.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!d)throw s("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",h);var $=d[1],v=d[2],m=d[3],g=d[4];if(d=$.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/),!d)throw s("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",$);var y=d[3]||d[1],b=d[2];if(m&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(m)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(m)))throw s("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",m);var w,x,C,E,S={$id:ae};return g?w=t(g):(C=function(t,e){return ae(e)},E=function(t){return t}),function(t,n,r,f,d){w&&(x=function(e,n,r){return b&&(S[b]=e),S[y]=n,S.$index=r,w(t,S)});var $=bt();t.$watchCollection(v,function(r){var f,v,g,w,S,k,A,O,M,V,T,N,I=n[0],j=bt();if(m&&(t[m]=r),i(r))M=r,O=x||C;else{O=x||E,M=[];for(var D in r)ei.call(r,D)&&"$"!==D.charAt(0)&&M.push(D)}for(w=M.length,T=new Array(w),f=0;f<w;f++)if(S=r===M?f:M[f],k=r[S],A=O(S,k,f),$[A])V=$[A],delete $[A],j[A]=V,T[f]=V;else{if(j[A])throw o(T,function(t){t&&t.scope&&($[t.id]=t)}),s("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",h,A,k);T[f]={id:A,scope:void 0,clone:void 0},j[A]=!0}for(var P in $){if(V=$[P],N=yt(V.clone),e.leave(N),N[0].parentNode)for(f=0,v=N.length;f<v;f++)N[f][a]=!0;V.scope.$destroy()}for(f=0;f<w;f++)if(S=r===M?f:M[f],k=r[S],V=T[f],V.scope){g=I;do g=g.nextSibling;while(g&&g[a]);c(V)!==g&&e.move(yt(V.clone),null,I),I=l(V),u(V.scope,f,y,k,b,S,w)}else d(function(t,n){V.scope=n;var r=p.cloneNode(!1);t[t.length++]=r,e.enter(t,null,I),I=r,V.clone=t,j[V.id]=V,u(V.scope,f,y,k,b,S,w)});$=j})}}}}],ls="ng-hide",fs="ng-hide-animate",hs=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngShow,function(e){t[e?"removeClass":"addClass"](n,ls,{tempClasses:fs})})}}}],ps=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngHide,function(e){t[e?"addClass":"removeClass"](n,ls,{tempClasses:fs})})}}}],ds=wr(function(t,e,n){t.$watch(n.ngStyle,function(t,n){n&&t!==n&&o(n,function(t,n){e.css(n,"")}),t&&e.css(t)},!0)}),$s=["$animate","$compile",function(t,e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=i.ngSwitch||i.on,u=[],c=[],l=[],f=[],h=function(t,e){return function(n){n!==!1&&t.splice(e,1)}};n.$watch(s,function(n){for(var r,i;l.length;)t.cancel(l.pop());for(r=0,i=f.length;r<i;++r){var s=yt(c[r].clone);f[r].$destroy();var p=l[r]=t.leave(s);p.done(h(l,r))}c.length=0,f.length=0,(u=a.cases["!"+n]||a.cases["?"])&&o(u,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=e.$$createComment("end ngSwitchWhen");var a={clone:r};c.push(a),t.enter(r,o.parent(),o)})})})}}}],vs=wr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){var a=n.ngSwitchWhen.split(n.ngSwitchWhenSeparator).sort().filter(function(t,e,n){return n[e-1]!==t});o(a,function(t){r.cases["!"+t]=r.cases["!"+t]||[],r.cases["!"+t].push({transclude:i,element:e})})}}),ms=wr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:e})}}),gs=r("ngTransclude"),ys=["$compile",function(t){return{restrict:"EAC",terminal:!0,compile:function(e){var n=t(e.contents());return e.empty(),function(t,e,r,i,o){function a(t,n){t.length&&u(t)?e.append(t):(s(),n.$destroy())}function s(){n(t,function(t){e.append(t)})}function u(t){for(var e=0,n=t.length;e<n;e++){var r=t[e];if(r.nodeType!==Ni||r.nodeValue.trim())return!0}}if(!o)throw gs("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",et(e));r.ngTransclude===r.$attr.ngTransclude&&(r.ngTransclude="");var c=r.ngTransclude||r.ngTranscludeSlot;o(a,null,c),c&&!o.isSlotFilled(c)&&s()}}}}],bs=["$templateCache",function(t){return{restrict:"E",terminal:!0,compile:function(e,n){if("text/ng-template"===n.type){var r=n.id,i=e[0].text;t.put(r,i)}}}}],ws={$setViewValue:$,$render:$},xs=["$element","$scope",function(e,n){function r(){s||(s=!0,n.$$postDigest(function(){s=!1,o.ngModelCtrl.$render()}))}function i(t){u||(u=!0,n.$$postDigest(function(){n.$$destroyed||(u=!1,o.ngModelCtrl.$setViewValue(o.readValue()),t&&o.ngModelCtrl.$render())}))}var o=this,a=new to;o.selectValueMap={},o.ngModelCtrl=ws,o.multiple=!1,o.unknownOption=si(t.document.createElement("option")),o.hasEmptyOption=!1,o.emptyOption=void 0,o.renderUnknownOption=function(t){var n=o.generateUnknownOptionValue(t);o.unknownOption.val(n),e.prepend(o.unknownOption),Yr(o.unknownOption,!0),e.val(n)},o.updateUnknownOption=function(t){var n=o.generateUnknownOptionValue(t);o.unknownOption.val(n),Yr(o.unknownOption,!0),e.val(n)},o.generateUnknownOptionValue=function(t){return"? "+ae(t)+" ?"},o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.selectEmptyOption=function(){o.emptyOption&&(e.val(""),Yr(o.emptyOption,!0))},o.unselectEmptyOption=function(){o.hasEmptyOption&&Yr(o.emptyOption,!1)},n.$on("$destroy",function(){o.renderUnknownOption=$}),o.readValue=function(){var t=e.val(),n=t in o.selectValueMap?o.selectValueMap[t]:t;return o.hasOption(n)?n:null},o.writeValue=function(t){var n=e[0].options[e[0].selectedIndex];if(n&&Yr(si(n),!1),o.hasOption(t)){o.removeUnknownOption();var r=ae(t);e.val(r in o.selectValueMap?r:t);var i=e[0].options[e[0].selectedIndex];Yr(si(i),!0)}else o.selectUnknownOrEmptyOption(t)},o.addOption=function(t,e){if(e[0].nodeType!==Ii){mt(t,'"option value"'),""===t&&(o.hasEmptyOption=!0,o.emptyOption=e);var n=a.get(t)||0;a.set(t,n+1),r()}},o.removeOption=function(t){var e=a.get(t);e&&(1===e?(a["delete"](t),""===t&&(o.hasEmptyOption=!1,o.emptyOption=void 0)):a.set(t,e-1))},o.hasOption=function(t){return!!a.get(t)},o.$hasEmptyOption=function(){return o.hasEmptyOption},o.$isUnknownOptionSelected=function(){return e[0].options[0]===o.unknownOption[0]},o.$isEmptyOptionSelected=function(){return o.hasEmptyOption&&e[0].options[e[0].selectedIndex]===o.emptyOption[0]},o.selectUnknownOrEmptyOption=function(t){null==t&&o.emptyOption?(o.removeUnknownOption(),o.selectEmptyOption()):o.unknownOption.parent().length?o.updateUnknownOption(t):o.renderUnknownOption(t)};var s=!1,u=!1;o.registerOption=function(t,e,n,a,s){if(n.$attr.ngValue){var u,c=NaN;n.$observe("value",function(t){var n,r=e.prop("selected");b(c)&&(o.removeOption(u),delete o.selectValueMap[c],n=!0),c=ae(t),u=t,o.selectValueMap[c]=t,o.addOption(t,e),e.attr("value",c),n&&r&&i()})}else a?n.$observe("value",function(t){o.readValue();var n,r=e.prop("selected");b(u)&&(o.removeOption(u),n=!0),u=t,o.addOption(t,e),n&&r&&i()}):s?t.$watch(s,function(t,r){n.$set("value",t);var a=e.prop("selected");r!==t&&o.removeOption(r),o.addOption(t,e),r&&a&&i()}):o.addOption(n.value,e);n.$observe("disabled",function(t){("true"===t||t&&e.prop("selected"))&&(o.multiple?i(!0):(o.ngModelCtrl.$setViewValue(null),o.ngModelCtrl.$render()))}),e.on("$destroy",function(){var t=o.readValue(),e=n.value;o.removeOption(e),r(),(o.multiple&&t&&t.indexOf(e)!==-1||t===e)&&i(!0)})}}],Cs=function(){function t(t,e,n,r){var i=r[0],a=r[1];if(!a)return void(i.registerOption=$);if(i.ngModelCtrl=a,e.on("change",function(){i.removeUnknownOption(),t.$apply(function(){a.$setViewValue(i.readValue())})}),n.multiple){i.multiple=!0,i.readValue=function(){var t=[];return o(e.find("option"),function(e){if(e.selected&&!e.disabled){var n=e.value;t.push(n in i.selectValueMap?i.selectValueMap[n]:n)}}),t},i.writeValue=function(t){o(e.find("option"),function(e){var n=!!t&&(q(t,e.value)||q(t,i.selectValueMap[e.value])),r=e.selected;n!==r&&Yr(si(e),n)})};var s,u=NaN;t.$watch(function(){u!==a.$viewValue||z(s,a.$viewValue)||(s=Ct(a.$viewValue),a.$render()),u=a.$viewValue}),a.$isEmpty=function(t){return!t||0===t.length}}}function e(t,e,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:xs,priority:1,link:{pre:t,post:e}}},Es=["$interpolate",function(t){return{restrict:"E",priority:100,compile:function(e,n){var r,i;return b(n.ngValue)||(b(n.value)?r=t(n.value,!0):(i=t(e.text(),!0),i||n.$set("value",e.text()))),function(t,e,n){var o="$selectController",a=e.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(t,e,n,r,i)}}}}],Ss=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){r&&(n.required=!0,r.$validators.required=function(t,e){return!n.required||!r.$isEmpty(e)},n.$observe("required",function(){r.$validate()}))}}},ks=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,i){if(i){var o,a=n.ngPattern||n.pattern;n.$observe("pattern",function(t){if(C(t)&&t.length>0&&(t=new RegExp("^"+t+"$")),t&&!t.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,t,et(e));o=t||void 0,i.$validate()}),i.$validators.pattern=function(t,e){return i.$isEmpty(e)||y(o)||o.test(e)}}}}},As=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=-1;n.$observe("maxlength",function(t){var e=p(t);i=gi(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(t,e){return i<0||r.$isEmpty(e)||e.length<=i}}}}},Os=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=0;n.$observe("minlength",function(t){i=p(t)||0,r.$validate()}),r.$validators.minlength=function(t,e){return r.$isEmpty(e)||e.length>=i}}}}};return t.angular.bootstrap?void(t.console&&console.log("WARNING: Tried to load angular more than once.")):(dt(),kt(vi),vi.module("ngLocale",[],["$provide",function(t){function e(t){t+="";var e=t.indexOf(".");return e==-1?0:t.length-e-1}function n(t,n){var r=n;void 0===r&&(r=Math.min(e(t),3));var i=Math.pow(10,r),o=(t*i|0)%i;return{v:r,f:o}}var r={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};t.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(t,e){var i=0|t,o=n(t,e);return 1==i&&0==o.v?r.ONE:r.OTHER}})}]),void si(function(){ct(t.document,lt)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>2)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3")}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}t.fn.emulateTransitionEnd=function(e){var i=!1,o=this;t(this).one("bsTransitionEnd",function(){i=!0});var n=function(){i||t(o).trigger(t.support.transition.end)};return setTimeout(n,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),n=i.data("bs.alert");n||i.data("bs.alert",n=new o(this)),"string"==typeof e&&n[e].call(i)})}var i='[data-dismiss="alert"]',o=function(e){t(e).on("click",i,this.close)};o.VERSION="3.3.6",o.TRANSITION_DURATION=150,o.prototype.close=function(e){function i(){a.detach().trigger("closed.bs.alert").remove()}var n=t(this),s=n.attr("data-target");s||(s=n.attr("href"),s=s&&s.replace(/.*(?=#[^\s]*$)/,""));var a=t(s);e&&e.preventDefault(),a.length||(a=n.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(o.TRANSITION_DURATION):i())};var n=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=o,t.fn.alert.noConflict=function(){return t.fn.alert=n,this},t(document).on("click.bs.alert.data-api",i,o.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.button"),s="object"==typeof e&&e;n||o.data("bs.button",n=new i(this,s)),"toggle"==e?n.toggle():e&&n.setState(e)})}var i=function(e,o){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,o),this.isLoading=!1};i.VERSION="3.3.6",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(e){var i="disabled",o=this.$element,n=o.is("input")?"val":"html",s=o.data();e+="Text",null==s.resetText&&o.data("resetText",o[n]()),setTimeout(t.proxy(function(){o[n](null==s[e]?this.options[e]:s[e]),"loadingText"==e?(this.isLoading=!0,o.addClass(i).attr(i,i)):this.isLoading&&(this.isLoading=!1,o.removeClass(i).removeAttr(i))},this),0)},i.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var o=t.fn.button;t.fn.button=e,t.fn.button.Constructor=i,t.fn.button.noConflict=function(){return t.fn.button=o,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(i){var o=t(i.target);o.hasClass("btn")||(o=o.closest(".btn")),e.call(o,"toggle"),t(i.target).is('input[type="radio"]')||t(i.target).is('input[type="checkbox"]')||i.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.carousel"),s=t.extend({},i.DEFAULTS,o.data(),"object"==typeof e&&e),a="string"==typeof e?e:s.slide;n||o.data("bs.carousel",n=new i(this,s)),"number"==typeof e?n.to(e):a?n[a]():s.interval&&n.pause().cycle()})}var i=function(e,i){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};i.VERSION="3.3.6",i.TRANSITION_DURATION=600,i.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},i.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},i.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},i.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},i.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e),o="prev"==t&&0===i||"next"==t&&i==this.$items.length-1;if(o&&!this.options.wrap)return e;var n="prev"==t?-1:1,s=(i+n)%this.$items.length;return this.$items.eq(s)},i.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",this.$items.eq(t))},i.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},i.prototype.next=function(){if(!this.sliding)return this.slide("next")},i.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},i.prototype.slide=function(e,o){var n=this.$element.find(".item.active"),s=o||this.getItemForDirection(e,n),a=this.interval,r="next"==e?"left":"right",l=this;if(s.hasClass("active"))return this.sliding=!1;var h=s[0],d=t.Event("slide.bs.carousel",{relatedTarget:h,direction:r});if(this.$element.trigger(d),!d.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var p=t(this.$indicators.children()[this.getItemIndex(s)]);p&&p.addClass("active")}var c=t.Event("slid.bs.carousel",{relatedTarget:h,direction:r});return t.support.transition&&this.$element.hasClass("slide")?(s.addClass(e),s[0].offsetWidth,n.addClass(r),s.addClass(r),n.one("bsTransitionEnd",function(){s.removeClass([e,r].join(" ")).addClass("active"),n.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(c)},0)}).emulateTransitionEnd(i.TRANSITION_DURATION)):(n.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(c)),a&&this.cycle(),this}};var o=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=i,t.fn.carousel.noConflict=function(){return t.fn.carousel=o,this};var n=function(i){var o,n=t(this),s=t(n.attr("data-target")||(o=n.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var a=t.extend({},s.data(),n.data()),r=n.attr("data-slide-to");r&&(a.interval=!1),e.call(s,a),r&&s.data("bs.carousel").to(r),i.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",n).on("click.bs.carousel.data-api","[data-slide-to]",n),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var i=t(this);e.call(i,i.data())})})}(jQuery),+function(t){"use strict";function e(e){var i,o=e.attr("data-target")||(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return t(o)}function i(e){return this.each(function(){var i=t(this),n=i.data("bs.collapse"),s=t.extend({},o.DEFAULTS,i.data(),"object"==typeof e&&e);!n&&s.toggle&&/show|hide/.test(e)&&(s.toggle=!1),n||i.data("bs.collapse",n=new o(this,s)),"string"==typeof e&&n[e]()})}var o=function(e,i){this.$element=t(e),this.options=t.extend({},o.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.6",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,n=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(n&&n.length&&(e=n.data("bs.collapse"),e&&e.transitioning))){var s=t.Event("show.bs.collapse");if(this.$element.trigger(s),!s.isDefaultPrevented()){n&&n.length&&(i.call(n,"hide"),e||n.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return r.call(this);var l=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[a](this.$element[0][l])}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[i](0).one("bsTransitionEnd",t.proxy(n,this)).emulateTransitionEnd(o.TRANSITION_DURATION):n.call(this)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(i,o){var n=t(o);this.addAriaAndCollapsedClass(e(n),n)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var n=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=o,t.fn.collapse.noConflict=function(){return t.fn.collapse=n,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(o){var n=t(this);n.attr("data-target")||o.preventDefault();var s=e(n),a=s.data("bs.collapse"),r=a?"toggle":n.data();i.call(s,r)})}(jQuery),+function(t){"use strict";function e(e){var i=e.attr("data-target");i||(i=e.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var o=i&&t(i);return o&&o.length?o:e.parent()}function i(i){i&&3===i.which||(t(n).remove(),t(s).each(function(){var o=t(this),n=e(o),s={relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target)||(n.trigger(i=t.Event("hide.bs.dropdown",s)),i.isDefaultPrevented()||(o.attr("aria-expanded","false"),n.removeClass("open").trigger(t.Event("hidden.bs.dropdown",s)))))}))}function o(e){return this.each(function(){var i=t(this),o=i.data("bs.dropdown");o||i.data("bs.dropdown",o=new a(this)),"string"==typeof e&&o[e].call(i)})}var n=".dropdown-backdrop",s='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.6",a.prototype.toggle=function(o){var n=t(this);if(!n.is(".disabled, :disabled")){var s=e(n),a=s.hasClass("open");if(i(),!a){"ontouchstart"in document.documentElement&&!s.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",i);var r={relatedTarget:this};if(s.trigger(o=t.Event("show.bs.dropdown",r)),o.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),s.toggleClass("open").trigger(t.Event("shown.bs.dropdown",r))}return!1}},a.prototype.keydown=function(i){if(/(38|40|27|32)/.test(i.which)&&!/input|textarea/i.test(i.target.tagName)){var o=t(this);if(i.preventDefault(),i.stopPropagation(),!o.is(".disabled, :disabled")){var n=e(o),a=n.hasClass("open");if(!a&&27!=i.which||a&&27==i.which)return 27==i.which&&n.find(s).trigger("focus"),o.trigger("click");var r=" li:not(.disabled):visible a",l=n.find(".dropdown-menu"+r);if(l.length){var h=l.index(i.target);38==i.which&&h>0&&h--,40==i.which&&h<l.length-1&&h++,~h||(h=0),l.eq(h).trigger("focus")}}}};var r=t.fn.dropdown;t.fn.dropdown=o,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=r,this},t(document).on("click.bs.dropdown.data-api",i).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",s,a.prototype.toggle).on("keydown.bs.dropdown.data-api",s,a.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",a.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,o){return this.each(function(){var n=t(this),s=n.data("bs.modal"),a=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);s||n.data("bs.modal",s=new i(this,a)),"string"==typeof e?s[e](o):a.show&&s.show(o)})}var i=function(e,i){this.options=i,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};i.VERSION="3.3.6",i.TRANSITION_DURATION=300,i.BACKDROP_TRANSITION_DURATION=150,i.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},i.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},i.prototype.show=function(e){var o=this,n=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(n),this.isShown||n.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var n=t.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),n&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var s=t.Event("shown.bs.modal",{relatedTarget:e});n?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(s)}).emulateTransitionEnd(i.TRANSITION_DURATION):o.$element.trigger("focus").trigger(s)}))},i.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(i.TRANSITION_DURATION):this.hideModal())},i.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},i.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},i.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},i.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},i.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},i.prototype.backdrop=function(e){var o=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var s=t.support.transition&&n;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),s&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;s?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){o.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},i.prototype.handleUpdate=function(){this.adjustDialog()},i.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},i.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},i.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},i.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},i.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},i.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var o=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=i,t.fn.modal.noConflict=function(){return t.fn.modal=o,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(i){var o=t(this),n=o.attr("href"),s=t(o.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),a=s.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(n)&&n},s.data(),o.data());o.is("a")&&i.preventDefault(),s.one("show.bs.modal",function(t){t.isDefaultPrevented()||s.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),e.call(s,a,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tooltip"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.tooltip",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};i.VERSION="3.3.6",i.TRANSITION_DURATION=150,i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(e,i,o){if(this.enabled=!0,this.type=e,this.$element=t(i),this.options=this.getOptions(o),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var n=this.options.trigger.split(" "),s=n.length;s--;){var a=n[s];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var r="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(r+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},i.prototype.getDelegateOptions=function(){var e={},i=this.getDefaults();return this._options&&t.each(this._options,function(t,o){i[t]!=o&&(e[t]=o)}),e},i.prototype.enter=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusin"==e.type?"focus":"hover"]=!0),i.tip().hasClass("in")||"in"==i.hoverState?void(i.hoverState="in"):(clearTimeout(i.timeout),i.hoverState="in",i.options.delay&&i.options.delay.show?void(i.timeout=setTimeout(function(){"in"==i.hoverState&&i.show()},i.options.delay.show)):i.show())},i.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},i.prototype.leave=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusout"==e.type?"focus":"hover"]=!1),!i.isInStateTrue())return clearTimeout(i.timeout),i.hoverState="out",i.options.delay&&i.options.delay.hide?void(i.timeout=setTimeout(function(){"out"==i.hoverState&&i.hide()},i.options.delay.hide)):i.hide()},i.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var o=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!o)return;var n=this,s=this.tip(),a=this.getUID(this.type);this.setContent(),s.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&s.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,h=l.test(r);h&&(r=r.replace(l,"")||"top"),s.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?s.appendTo(this.options.container):s.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var d=this.getPosition(),p=s[0].offsetWidth,c=s[0].offsetHeight;if(h){var f=r,u=this.getPosition(this.$viewport);r="bottom"==r&&d.bottom+c>u.bottom?"top":"top"==r&&d.top-c<u.top?"bottom":"right"==r&&d.right+p>u.width?"left":"left"==r&&d.left-p<u.left?"right":r,s.removeClass(f).addClass(r)}var g=this.getCalculatedOffset(r,d,p,c);this.applyPlacement(g,r);var m=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};t.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",m).emulateTransitionEnd(i.TRANSITION_DURATION):m()}},i.prototype.applyPlacement=function(e,i){var o=this.tip(),n=o[0].offsetWidth,s=o[0].offsetHeight,a=parseInt(o.css("margin-top"),10),r=parseInt(o.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(r)&&(r=0),e.top+=a,e.left+=r,t.offset.setOffset(o[0],t.extend({using:function(t){o.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),o.addClass("in");var l=o[0].offsetWidth,h=o[0].offsetHeight;"top"==i&&h!=s&&(e.top=e.top+s-h);var d=this.getViewportAdjustedDelta(i,e,l,h);d.left?e.left+=d.left:e.top+=d.top;var p=/top|bottom/.test(i),c=p?2*d.left-n+l:2*d.top-s+h,f=p?"offsetWidth":"offsetHeight";o.offset(e),this.replaceArrow(c,o[0][f],p)},i.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},i.prototype.hide=function(e){function o(){"in"!=n.hoverState&&s.detach(),n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}var n=this,s=t(this.$tip),a=t.Event("hide.bs."+this.type);if(this.$element.trigger(a),!a.isDefaultPrevented())return s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",o).emulateTransitionEnd(i.TRANSITION_DURATION):o(),this.hoverState=null,this},i.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(e){e=e||this.$element;var i=e[0],o="BODY"==i.tagName,n=i.getBoundingClientRect();null==n.width&&(n=t.extend({},n,{width:n.right-n.left,height:n.bottom-n.top}));var s=o?{top:0,left:0}:e.offset(),a={scroll:o?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},r=o?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},n,a,r,s)},i.prototype.getCalculatedOffset=function(t,e,i,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-i}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},i.prototype.getViewportAdjustedDelta=function(t,e,i,o){var n={top:0,left:0};if(!this.$viewport)return n;var s=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var r=e.top-s-a.scroll,l=e.top+s-a.scroll+o;r<a.top?n.top=a.top-r:l>a.top+a.height&&(n.top=a.top+a.height-l)}else{var h=e.left-s,d=e.left+s+i;h<a.left?n.left=a.left-h:d>a.right&&(n.left=a.left+a.width-d)}return n},i.prototype.getTitle=function(){var t,e=this.$element,i=this.options;return t=e.attr("data-original-title")||("function"==typeof i.title?i.title.call(e[0]):i.title)},i.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},i.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(e){var i=this;e&&(i=t(e.currentTarget).data("bs."+this.type),i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i))),e?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)},i.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null})};var o=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=i,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=o,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.popover"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.popover",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");i.VERSION="3.3.6",i.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),i.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),i.prototype.constructor=i,i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof i?"html":"append":"text"](i),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},i.prototype.hasContent=function(){return this.getTitle()||this.getContent()},i.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var o=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=i,t.fn.popover.noConflict=function(){return t.fn.popover=o,this}}(jQuery),+function(t){"use strict";function e(i,o){this.$body=t(document.body),this.$scrollElement=t(t(i).is(document.body)?window:i),this.options=t.extend({},e.DEFAULTS,o),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each(function(){var o=t(this),n=o.data("bs.scrollspy"),s="object"==typeof i&&i;n||o.data("bs.scrollspy",n=new e(this,s)),"string"==typeof i&&n[i]()})}e.VERSION="3.3.6",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,i="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(i="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),n=e.data("target")||e.attr("href"),s=/^#./.test(n)&&t(n);return s&&s.length&&s.is(":visible")&&[[s[i]().top+o,n]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),o=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,s=this.targets,a=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),e>=o)return a!=(t=s[s.length-1])&&this.activate(t);if(a&&e<n[0])return this.activeTarget=null,this.clear();for(t=n.length;t--;)a!=s[t]&&e>=n[t]&&(void 0===n[t+1]||e<n[t+1])&&this.activate(s[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var i=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',o=t(i).parents("li").addClass("active");o.parent(".dropdown-menu").length&&(o=o.closest("li.dropdown").addClass("active")),
o.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var o=t.fn.scrollspy;t.fn.scrollspy=i,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=o,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);i.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tab");n||o.data("bs.tab",n=new i(this)),"string"==typeof e&&n[e]()})}var i=function(e){this.element=t(e)};i.VERSION="3.3.6",i.TRANSITION_DURATION=150,i.prototype.show=function(){var e=this.element,i=e.closest("ul:not(.dropdown-menu)"),o=e.data("target");if(o||(o=e.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var n=i.find(".active:last a"),s=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:n[0]});if(n.trigger(s),e.trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){var r=t(o);this.activate(e.closest("li"),i),this.activate(r,r.parent(),function(){n.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:n[0]})})}}},i.prototype.activate=function(e,o,n){function s(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),r?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}var a=o.find("> .active"),r=n&&t.support.transition&&(a.length&&a.hasClass("fade")||!!o.find("> .fade").length);a.length&&r?a.one("bsTransitionEnd",s).emulateTransitionEnd(i.TRANSITION_DURATION):s(),a.removeClass("in")};var o=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=i,t.fn.tab.noConflict=function(){return t.fn.tab=o,this};var n=function(i){i.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.affix"),s="object"==typeof e&&e;n||o.data("bs.affix",n=new i(this,s)),"string"==typeof e&&n[e]()})}var i=function(e,o){this.options=t.extend({},i.DEFAULTS,o),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};i.VERSION="3.3.6",i.RESET="affix affix-top affix-bottom",i.DEFAULTS={offset:0,target:window},i.prototype.getState=function(t,e,i,o){var n=this.$target.scrollTop(),s=this.$element.offset(),a=this.$target.height();if(null!=i&&"top"==this.affixed)return n<i&&"top";if("bottom"==this.affixed)return null!=i?!(n+this.unpin<=s.top)&&"bottom":!(n+a<=t-o)&&"bottom";var r=null==this.affixed,l=r?n:s.top,h=r?a:e;return null!=i&&n<=i?"top":null!=o&&l+h>=t-o&&"bottom"},i.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(i.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},i.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},i.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),o=this.options.offset,n=o.top,s=o.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof o&&(s=n=o),"function"==typeof n&&(n=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var r=this.getState(a,e,n,s);if(this.affixed!=r){null!=this.unpin&&this.$element.css("top","");var l="affix"+(r?"-"+r:""),h=t.Event(l+".bs.affix");if(this.$element.trigger(h),h.isDefaultPrevented())return;this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(i.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==r&&this.$element.offset({top:a-e-s})}};var o=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=i,t.fn.affix.noConflict=function(){return t.fn.affix=o,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var i=t(this),o=i.data();o.offset=o.offset||{},null!=o.offsetBottom&&(o.offset.bottom=o.offsetBottom),null!=o.offsetTop&&(o.offset.top=o.offsetTop),e.call(i,o)})})}(jQuery);
angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.tabindex","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("uibCollapse",["$animate","$q","$parse","$injector",function(e,t,n,a){var i=a.has("$animateCss")?a.get("$animateCss"):null;return{link:function(a,o,r){function l(){b=!!("horizontal"in r),b?(v={width:""},$={width:"0"}):(v={height:""},$={height:"0"}),a.$eval(r.uibCollapse)||o.addClass("in").addClass("collapse").attr("aria-expanded",!0).attr("aria-hidden",!1).css(v)}function s(e){return b?{width:e.scrollWidth+"px"}:{height:e.scrollHeight+"px"}}function u(){o.hasClass("collapse")&&o.hasClass("in")||t.resolve(m(a)).then(function(){o.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),i?i(o,{addClass:"in",easing:"ease",css:{overflow:"hidden"},to:s(o[0])}).start()["finally"](p):e.addClass(o,"in",{css:{overflow:"hidden"},to:s(o[0])}).then(p)})}function p(){o.removeClass("collapsing").addClass("collapse").css(v),f(a)}function c(){return o.hasClass("collapse")||o.hasClass("in")?void t.resolve(h(a)).then(function(){o.css(s(o[0])).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),i?i(o,{removeClass:"in",to:$}).start()["finally"](d):e.removeClass(o,"in",{to:$}).then(d)}):d()}function d(){o.css($),o.removeClass("collapsing").addClass("collapse"),g(a)}var m=n(r.expanding),f=n(r.expanded),h=n(r.collapsing),g=n(r.collapsed),b=!1,v={},$={};l(),a.$watch(r.uibCollapse,function(e){e?c():u()})}}}]),angular.module("ui.bootstrap.tabindex",[]).directive("uibTabindexToggle",function(){return{restrict:"A",link:function(e,t,n){n.$observe("disabled",function(e){n.$set("tabindex",e?-1:null)})}}}),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse","ui.bootstrap.tabindex"]).constant("uibAccordionConfig",{closeOthers:!0}).controller("UibAccordionController",["$scope","$attrs","uibAccordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(a){var i=angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers;i&&angular.forEach(this.groups,function(e){e!==a&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(n){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);t!==-1&&this.groups.splice(t,1)}}]).directive("uibAccordion",function(){return{controller:"UibAccordionController",controllerAs:"accordion",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion.html"}}}).directive("uibAccordionGroup",function(){return{require:"^uibAccordion",transclude:!0,restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion-group.html"},scope:{heading:"@",panelClass:"@?",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,a){t.addClass("panel"),a.addGroup(e),e.openClass=n.openClass||"panel-open",e.panelClass=n.panelClass||"panel-default",e.$watch("isOpen",function(n){t.toggleClass(e.openClass,!!n),n&&a.closeOthers(e)}),e.toggleOpen=function(t){e.isDisabled||t&&32!==t.which||(e.isOpen=!e.isOpen)};var i="accordiongroup-"+e.$id+"-"+Math.floor(1e4*Math.random());e.headingId=i+"-tab",e.panelId=i+"-panel"}}}).directive("uibAccordionHeading",function(){return{transclude:!0,template:"",replace:!0,require:"^uibAccordionGroup",link:function(e,t,n,a,i){a.setHeading(i(e,angular.noop))}}}).directive("uibAccordionTransclude",function(){function e(){return"uib-accordion-header,data-uib-accordion-header,x-uib-accordion-header,uib\\:accordion-header,[uib-accordion-header],[data-uib-accordion-header],[x-uib-accordion-header]"}return{require:"^uibAccordionGroup",link:function(t,n,a,i){t.$watch(function(){return i[a.uibAccordionTransclude]},function(t){if(t){var a=angular.element(n[0].querySelector(e()));a.html(""),a.append(t)}})}}}),angular.module("ui.bootstrap.alert",[]).controller("UibAlertController",["$scope","$element","$attrs","$interpolate","$timeout",function(e,t,n,a,i){e.closeable=!!n.close,t.addClass("alert"),n.$set("role","alert"),e.closeable&&t.addClass("alert-dismissible");var o=angular.isDefined(n.dismissOnTimeout)?a(n.dismissOnTimeout)(e.$parent):null;o&&i(function(){e.close()},parseInt(o,10))}]).directive("uibAlert",function(){return{controller:"UibAlertController",controllerAs:"alert",restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/alert/alert.html"},transclude:!0,scope:{close:"&"}}}),angular.module("ui.bootstrap.buttons",[]).constant("uibButtonConfig",{activeClass:"active",toggleEvent:"click"}).controller("UibButtonsController",["uibButtonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("uibBtnRadio",["$parse",function(e){return{require:["uibBtnRadio","ngModel"],controller:"UibButtonsController",controllerAs:"buttons",link:function(t,n,a,i){var o=i[0],r=i[1],l=e(a.uibUncheckable);n.find("input").css({display:"none"}),r.$render=function(){n.toggleClass(o.activeClass,angular.equals(r.$modelValue,t.$eval(a.uibBtnRadio)))},n.on(o.toggleEvent,function(){if(!a.disabled){var e=n.hasClass(o.activeClass);e&&!angular.isDefined(a.uncheckable)||t.$apply(function(){r.$setViewValue(e?null:t.$eval(a.uibBtnRadio)),r.$render()})}}),a.uibUncheckable&&t.$watch(l,function(e){a.$set("uncheckable",e?"":void 0)})}}}]).directive("uibBtnCheckbox",function(){return{require:["uibBtnCheckbox","ngModel"],controller:"UibButtonsController",controllerAs:"button",link:function(e,t,n,a){function i(){return r(n.btnCheckboxTrue,!0)}function o(){return r(n.btnCheckboxFalse,!1)}function r(t,n){return angular.isDefined(t)?e.$eval(t):n}var l=a[0],s=a[1];t.find("input").css({display:"none"}),s.$render=function(){t.toggleClass(l.activeClass,angular.equals(s.$modelValue,i()))},t.on(l.toggleEvent,function(){n.disabled||e.$apply(function(){s.$setViewValue(t.hasClass(l.activeClass)?o():i()),s.$render()})})}}}),angular.module("ui.bootstrap.carousel",[]).controller("UibCarouselController",["$scope","$element","$interval","$timeout","$animate",function(e,t,n,a,i){function o(){for(;$.length;)$.shift()}function r(e){for(var t=0;t<g.length;t++)g[t].slide.active=t===e}function l(n,a,s){if(!y){if(angular.extend(n,{direction:s}),angular.extend(g[v].slide||{},{direction:s}),i.enabled(t)&&!e.$currentTransition&&g[a].element&&h.slides.length>1){g[a].element.data(b,n.direction);var u=h.getCurrentIndex();angular.isNumber(u)&&g[u].element&&g[u].element.data(b,n.direction),e.$currentTransition=!0,i.on("addClass",g[a].element,function(t,n){if("close"===n&&(e.$currentTransition=null,i.off("addClass",t),$.length)){var a=$.pop().slide,r=a.index,s=r>h.getCurrentIndex()?"next":"prev";o(),l(a,r,s)}})}e.active=n.index,v=n.index,r(a),c()}}function s(e){for(var t=0;t<g.length;t++)if(g[t].slide===e)return t}function u(){m&&(n.cancel(m),m=null)}function p(t){t.length||(e.$currentTransition=null,o())}function c(){u();var t=+e.interval;!isNaN(t)&&t>0&&(m=n(d,t))}function d(){var t=+e.interval;f&&!isNaN(t)&&t>0&&g.length?e.next():e.pause()}var m,f,h=this,g=h.slides=e.slides=[],b="uib-slideDirection",v=e.active,$=[],y=!1;t.addClass("carousel"),h.addSlide=function(t,n){g.push({slide:t,element:n}),g.sort(function(e,t){return+e.slide.index-+t.slide.index}),(t.index===e.active||1===g.length&&!angular.isNumber(e.active))&&(e.$currentTransition&&(e.$currentTransition=null),v=t.index,e.active=t.index,r(v),h.select(g[s(t)]),1===g.length&&e.play())},h.getCurrentIndex=function(){for(var e=0;e<g.length;e++)if(g[e].slide.index===v)return e},h.next=e.next=function(){var t=(h.getCurrentIndex()+1)%g.length;return 0===t&&e.noWrap()?void e.pause():h.select(g[t],"next")},h.prev=e.prev=function(){var t=h.getCurrentIndex()-1<0?g.length-1:h.getCurrentIndex()-1;return e.noWrap()&&t===g.length-1?void e.pause():h.select(g[t],"prev")},h.removeSlide=function(t){var n=s(t),a=$.indexOf(g[n]);a!==-1&&$.splice(a,1),g.splice(n,1),g.length>0&&v===n?n>=g.length?(v=g.length-1,e.active=v,r(v),h.select(g[g.length-1])):(v=n,e.active=v,r(v),h.select(g[n])):v>n&&(v--,e.active=v),0===g.length&&(v=null,e.active=null,o())},h.select=e.select=function(t,n){var a=s(t.slide);void 0===n&&(n=a>h.getCurrentIndex()?"next":"prev"),t.slide.index===v||e.$currentTransition?t&&t.slide.index!==v&&e.$currentTransition&&$.push(g[a]):l(t.slide,a,n)},e.indexOfSlide=function(e){return+e.slide.index},e.isActive=function(t){return e.active===t.slide.index},e.isPrevDisabled=function(){return 0===e.active&&e.noWrap()},e.isNextDisabled=function(){return e.active===g.length-1&&e.noWrap()},e.pause=function(){e.noPause||(f=!1,u())},e.play=function(){f||(f=!0,c())},t.on("mouseenter",e.pause),t.on("mouseleave",e.play),e.$on("$destroy",function(){y=!0,u()}),e.$watch("noTransition",function(e){i.enabled(t,!e)}),e.$watch("interval",c),e.$watchCollection("slides",p),e.$watch("active",function(e){if(angular.isNumber(e)&&v!==e){for(var t=0;t<g.length;t++)if(g[t].slide.index===e){e=t;break}var n=g[e];n&&(r(e),h.select(g[e]),v=e)}})}]).directive("uibCarousel",function(){return{transclude:!0,controller:"UibCarouselController",controllerAs:"carousel",restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/carousel.html"},scope:{active:"=",interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}).directive("uibSlide",["$animate",function(e){return{require:"^uibCarousel",restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/slide.html"},scope:{actual:"=?",index:"=?"},link:function(t,n,a,i){n.addClass("item"),i.addSlide(t,n),t.$on("$destroy",function(){i.removeSlide(t)}),t.$watch("active",function(t){e[t?"addClass":"removeClass"](n,"active")})}}}]).animation(".item",["$animateCss",function(e){function t(e,t,n){e.removeClass(t),n&&n()}var n="uib-slideDirection";return{beforeAddClass:function(a,i,o){if("active"===i){var r=!1,l=a.data(n),s="next"===l?"left":"right",u=t.bind(this,a,s+" "+l,o);return a.addClass(l),e(a,{addClass:s}).start().done(u),function(){r=!0}}o()},beforeRemoveClass:function(a,i,o){if("active"===i){var r=!1,l=a.data(n),s="next"===l?"left":"right",u=t.bind(this,a,s,o);return e(a,{addClass:s}).start().done(u),function(){r=!0}}o()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("uibDateParser",["$log","$locale","dateFilter","orderByFilter",function(e,t,n,a){function i(e){var t=[],n=e.split(""),i=e.indexOf("'");if(i>-1){var o=!1;e=e.split("");for(var r=i;r<e.length;r++)o?("'"===e[r]&&(r+1<e.length&&"'"===e[r+1]?(e[r+1]="$",n[r+1]=""):(n[r]="",o=!1)),e[r]="$"):"'"===e[r]&&(e[r]="$",n[r]="",o=!0);e=e.join("")}return angular.forEach(g,function(a){var i=e.indexOf(a.key);if(i>-1){e=e.split(""),n[i]="("+a.regex+")",e[i]="$";for(var o=i+1,r=i+a.key.length;o<r;o++)n[o]="",e[o]="$";e=e.join(""),t.push({index:i,key:a.key,apply:a.apply,matcher:a.regex})}}),{regex:new RegExp("^"+n.join("")+"$"),map:a(t,"index")}}function o(e){for(var t,n,a=[],i=0;i<e.length;)if(angular.isNumber(n)){if("'"===e.charAt(i))(i+1>=e.length||"'"!==e.charAt(i+1))&&(a.push(r(e,n,i)),n=null);else if(i===e.length)for(;n<e.length;)t=l(e,n),a.push(t),n=t.endIdx;i++}else"'"!==e.charAt(i)?(t=l(e,i),a.push(t.parser),i=t.endIdx):(n=i,i++);return a}function r(e,t,n){return function(){return e.substr(t+1,n-t-1)}}function l(e,t){for(var n=e.substr(t),a=0;a<g.length;a++)if(new RegExp("^"+g[a].key).test(n)){var i=g[a];return{endIdx:t+i.key.length,parser:i.formatter}}return{endIdx:t+1,parser:function(){return n.charAt(0)}}}function s(e,t,n){return!(n<1)&&(1===t&&n>28?29===n&&(e%4===0&&e%100!==0||e%400===0):3!==t&&5!==t&&8!==t&&10!==t||n<31)}function u(e){return parseInt(e,10)}function p(e,t){return e&&t?f(e,t):e}function c(e,t){return e&&t?f(e,t,!0):e}function d(e,t){e=e.replace(/:/g,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function m(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function f(e,t,n){n=n?-1:1;var a=e.getTimezoneOffset(),i=d(t,a);return m(e,n*(i-a))}var h,g,b=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.init=function(){h=t.id,this.parsers={},this.formatters={},g=[{key:"yyyy",regex:"\\d{4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yyyy")}},{key:"yy",regex:"\\d{2}",apply:function(e){e=+e,this.year=e<69?e+2e3:e+1900},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yy")}},{key:"y",regex:"\\d{1,4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"y")}},{key:"M!",regex:"0?[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){var t=e.getMonth();return/^[0-9]$/.test(t)?n(e,"MM"):n(e,"M")}},{key:"MMMM",regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)},formatter:function(e){return n(e,"MMMM")}},{key:"MMM",regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)},formatter:function(e){return n(e,"MMM")}},{key:"MM",regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"MM")}},{key:"M",regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"M")}},{key:"d!",regex:"[0-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){var t=e.getDate();return/^[1-9]$/.test(t)?n(e,"dd"):n(e,"d")}},{key:"dd",regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"dd")}},{key:"d",regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"d")}},{key:"EEEE",regex:t.DATETIME_FORMATS.DAY.join("|"),formatter:function(e){return n(e,"EEEE")}},{key:"EEE",regex:t.DATETIME_FORMATS.SHORTDAY.join("|"),formatter:function(e){return n(e,"EEE")}},{key:"HH",regex:"(?:0|1)[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"HH")}},{key:"hh",regex:"0[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"hh")}},{key:"H",regex:"1?[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"H")}},{key:"h",regex:"[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"h")}},{key:"mm",regex:"[0-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"mm")}},{key:"m",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"m")}},{key:"sss",regex:"[0-9][0-9][0-9]",apply:function(e){this.milliseconds=+e},formatter:function(e){return n(e,"sss")}},{key:"ss",regex:"[0-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"ss")}},{key:"s",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"s")}},{key:"a",regex:t.DATETIME_FORMATS.AMPMS.join("|"),apply:function(e){12===this.hours&&(this.hours=0),"PM"===e&&(this.hours+=12)},formatter:function(e){return n(e,"a")}},{key:"Z",regex:"[+-]\\d{4}",apply:function(e){var t=e.match(/([+-])(\d{2})(\d{2})/),n=t[1],a=t[2],i=t[3];this.hours+=u(n+a),this.minutes+=u(n+i)},formatter:function(e){return n(e,"Z")}},{key:"ww",regex:"[0-4][0-9]|5[0-3]",formatter:function(e){return n(e,"ww")}},{key:"w",regex:"[0-9]|[1-4][0-9]|5[0-3]",formatter:function(e){return n(e,"w")}},{key:"GGGG",regex:t.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g,"\\s"),formatter:function(e){return n(e,"GGGG")}},{key:"GGG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GGG")}},{key:"GG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GG")}},{key:"G",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"G")}}]},this.init(),this.filter=function(e,n){if(!angular.isDate(e)||isNaN(e)||!n)return"";n=t.DATETIME_FORMATS[n]||n,t.id!==h&&this.init(),this.formatters[n]||(this.formatters[n]=o(n));var a=this.formatters[n];return a.reduce(function(t,n){return t+n(e)},"")},this.parse=function(n,a,o){if(!angular.isString(n)||!a)return n;a=t.DATETIME_FORMATS[a]||a,a=a.replace(b,"\\$&"),t.id!==h&&this.init(),this.parsers[a]||(this.parsers[a]=i(a,"apply"));var r=this.parsers[a],l=r.regex,u=r.map,p=n.match(l),c=!1;if(p&&p.length){var d,m;angular.isDate(o)&&!isNaN(o.getTime())?d={year:o.getFullYear(),month:o.getMonth(),date:o.getDate(),hours:o.getHours(),minutes:o.getMinutes(),seconds:o.getSeconds(),milliseconds:o.getMilliseconds()}:(o&&e.warn("dateparser:","baseDate is not a valid date"),d={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var f=1,g=p.length;f<g;f++){var v=u[f-1];"Z"===v.matcher&&(c=!0),v.apply&&v.apply.call(d,p[f])}var $=c?Date.prototype.setUTCFullYear:Date.prototype.setFullYear,y=c?Date.prototype.setUTCHours:Date.prototype.setHours;return s(d.year,d.month,d.date)&&(!angular.isDate(o)||isNaN(o.getTime())||c?(m=new Date(0),$.call(m,d.year,d.month,d.date),y.call(m,d.hours||0,d.minutes||0,d.seconds||0,d.milliseconds||0)):(m=new Date(o),$.call(m,d.year,d.month,d.date),y.call(m,d.hours,d.minutes,d.seconds,d.milliseconds))),m}},this.toTimezone=p,this.fromTimezone=c,this.timezoneToOffset=d,this.addDateMinutes=m,this.convertTimezoneToLocal=f}]),angular.module("ui.bootstrap.isClass",[]).directive("uibIsClass",["$animate",function(e){var t=/^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/,n=/^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;return{restrict:"A",compile:function(a,i){function o(e,t,n){s.push(e),u.push({scope:e,element:t}),f.forEach(function(t,n){r(t,e)}),e.$on("$destroy",l)}function r(t,a){var i=t.match(n),o=a.$eval(i[1]),r=i[2],l=p[t];if(!l){var s=function(t){var n=null;u.some(function(e){var a=e.scope.$eval(d);if(a===t)return n=e,!0}),l.lastActivated!==n&&(l.lastActivated&&e.removeClass(l.lastActivated.element,o),n&&e.addClass(n.element,o),l.lastActivated=n)};p[t]=l={lastActivated:null,scope:a,watchFn:s,compareWithExp:r,watcher:a.$watch(r,s)}}l.watchFn(a.$eval(r))}function l(e){var t=e.targetScope,n=s.indexOf(t);if(s.splice(n,1),u.splice(n,1),s.length){var a=s[0];angular.forEach(p,function(e){e.scope===t&&(e.watcher=a.$watch(e.compareWithExp,e.watchFn),e.scope=a)})}else p={}}var s=[],u=[],p={},c=i.uibIsClass.match(t),d=c[2],m=c[1],f=m.split(",");return o}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.isClass"]).value("$datepickerSuppressError",!1).value("$datepickerLiteralWarning",!0).constant("uibDatepickerConfig",{datepickerMode:"day",formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",maxDate:null,maxMode:"year",minDate:null,minMode:"day",monthColumns:3,ngModelOptions:{},shortcutPropagation:!1,showWeeks:!0,yearColumns:5,yearRows:4}).controller("UibDatepickerController",["$scope","$element","$attrs","$parse","$interpolate","$locale","$log","dateFilter","uibDatepickerConfig","$datepickerLiteralWarning","$datepickerSuppressError","uibDateParser",function(e,t,n,a,i,o,r,l,s,u,p,c){function d(t){e.datepickerMode=t,e.datepickerOptions.datepickerMode=t}var m=this,f={$setViewValue:angular.noop},h={},g=[];t.addClass("uib-datepicker"),n.$set("role","application"),e.datepickerOptions||(e.datepickerOptions={}),this.modes=["day","month","year"],["customClass","dateDisabled","datepickerMode","formatDay","formatDayHeader","formatDayTitle","formatMonth","formatMonthTitle","formatYear","maxDate","maxMode","minDate","minMode","monthColumns","showWeeks","shortcutPropagation","startingDay","yearColumns","yearRows"].forEach(function(t){switch(t){case"customClass":case"dateDisabled":e[t]=e.datepickerOptions[t]||angular.noop;break;case"datepickerMode":e.datepickerMode=angular.isDefined(e.datepickerOptions.datepickerMode)?e.datepickerOptions.datepickerMode:s.datepickerMode;break;case"formatDay":case"formatDayHeader":case"formatDayTitle":case"formatMonth":case"formatMonthTitle":case"formatYear":m[t]=angular.isDefined(e.datepickerOptions[t])?i(e.datepickerOptions[t])(e.$parent):s[t];break;case"monthColumns":case"showWeeks":case"shortcutPropagation":case"yearColumns":case"yearRows":m[t]=angular.isDefined(e.datepickerOptions[t])?e.datepickerOptions[t]:s[t];break;case"startingDay":angular.isDefined(e.datepickerOptions.startingDay)?m.startingDay=e.datepickerOptions.startingDay:angular.isNumber(s.startingDay)?m.startingDay=s.startingDay:m.startingDay=(o.DATETIME_FORMATS.FIRSTDAYOFWEEK+8)%7;break;case"maxDate":case"minDate":e.$watch("datepickerOptions."+t,function(e){e?angular.isDate(e)?m[t]=c.fromTimezone(new Date(e),h.timezone):(u&&r.warn("Literal date support has been deprecated, please switch to date object usage"),m[t]=new Date(l(e,"medium"))):m[t]=s[t]?c.fromTimezone(new Date(s[t]),h.timezone):null,m.refreshView()});break;case"maxMode":case"minMode":e.datepickerOptions[t]?e.$watch(function(){return e.datepickerOptions[t]},function(n){m[t]=e[t]=angular.isDefined(n)?n:e.datepickerOptions[t],("minMode"===t&&m.modes.indexOf(e.datepickerOptions.datepickerMode)<m.modes.indexOf(m[t])||"maxMode"===t&&m.modes.indexOf(e.datepickerOptions.datepickerMode)>m.modes.indexOf(m[t]))&&(e.datepickerMode=m[t],e.datepickerOptions.datepickerMode=m[t])}):m[t]=e[t]=s[t]||null}}),e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),e.disabled=angular.isDefined(n.disabled)||!1,angular.isDefined(n.ngDisabled)&&g.push(e.$parent.$watch(n.ngDisabled,function(t){e.disabled=t,m.refreshView()})),e.isActive=function(t){return 0===m.compare(t.date,m.activeDate)&&(e.activeDateId=t.uid,!0)},this.init=function(t){f=t,h=t.$options||e.datepickerOptions.ngModelOptions||s.ngModelOptions,e.datepickerOptions.initDate?(m.activeDate=c.fromTimezone(e.datepickerOptions.initDate,h.timezone)||new Date,e.$watch("datepickerOptions.initDate",function(e){e&&(f.$isEmpty(f.$modelValue)||f.$invalid)&&(m.activeDate=c.fromTimezone(e,h.timezone),m.refreshView())})):m.activeDate=new Date;var n=f.$modelValue?new Date(f.$modelValue):new Date;this.activeDate=isNaN(n)?c.fromTimezone(new Date,h.timezone):c.fromTimezone(n,h.timezone),f.$render=function(){m.render()}},this.render=function(){if(f.$viewValue){var e=new Date(f.$viewValue),t=!isNaN(e);t?this.activeDate=c.fromTimezone(e,h.timezone):p||r.error('Datepicker directive: "ng-model" value must be a Date object')}this.refreshView()},this.refreshView=function(){if(this.element){e.selectedDt=null,this._refreshView(),e.activeDt&&(e.activeDateId=e.activeDt.uid);var t=f.$viewValue?new Date(f.$viewValue):null;t=c.fromTimezone(t,h.timezone),f.$setValidity("dateDisabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,n){var a=f.$viewValue?new Date(f.$viewValue):null;a=c.fromTimezone(a,h.timezone);var i=new Date;i=c.fromTimezone(i,h.timezone);var o=this.compare(t,i),r={date:t,label:c.filter(t,n),selected:a&&0===this.compare(t,a),disabled:this.isDisabled(t),past:o<0,current:0===o,future:o>0,customClass:this.customClass(t)||null};return a&&0===this.compare(t,a)&&(e.selectedDt=r),m.activeDate&&0===this.compare(r.date,m.activeDate)&&(e.activeDt=r),r},this.isDisabled=function(t){return e.disabled||this.minDate&&this.compare(t,this.minDate)<0||this.maxDate&&this.compare(t,this.maxDate)>0||e.dateDisabled&&e.dateDisabled({date:t,mode:e.datepickerMode})},this.customClass=function(t){return e.customClass({date:t,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},e.select=function(t){if(e.datepickerMode===m.minMode){var n=f.$viewValue?c.fromTimezone(new Date(f.$viewValue),h.timezone):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n=c.toTimezone(n,h.timezone),f.$setViewValue(n),f.$render()}else m.activeDate=t,d(m.modes[m.modes.indexOf(e.datepickerMode)-1]),e.$emit("uib:datepicker.mode");e.$broadcast("uib:datepicker.focus")},e.move=function(e){var t=m.activeDate.getFullYear()+e*(m.step.years||0),n=m.activeDate.getMonth()+e*(m.step.months||0);m.activeDate.setFullYear(t,n,1),m.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===m.maxMode&&1===t||e.datepickerMode===m.minMode&&t===-1||(d(m.modes[m.modes.indexOf(e.datepickerMode)+t]),e.$emit("uib:datepicker.mode"))},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var b=function(){m.element[0].focus()};e.$on("uib:datepicker.focus",b),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey&&!e.disabled)if(t.preventDefault(),m.shortcutPropagation||t.stopPropagation(),"enter"===n||"space"===n){if(m.isDisabled(m.activeDate))return;e.select(m.activeDate)}else!t.ctrlKey||"up"!==n&&"down"!==n?(m.handleKeyDown(n,t),m.refreshView()):e.toggleMode("up"===n?1:-1)},t.on("keydown",function(t){e.$apply(function(){e.keydown(t)})}),e.$on("$destroy",function(){for(;g.length;)g.shift()()})}]).controller("UibDaypickerController",["$scope","$element","dateFilter",function(e,t,n){function a(e,t){return 1!==t||e%4!==0||e%100===0&&e%400!==0?o[t]:29}function i(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}var o=[31,28,31,30,31,30,31,31,30,31,30,31];this.step={months:1},this.element=t,this.init=function(t){angular.extend(t,this),e.showWeeks=t.showWeeks,t.refreshView()},this.getDates=function(e,t){for(var n,a=new Array(t),i=new Date(e),o=0;o<t;)n=new Date(i),a[o++]=n,i.setDate(i.getDate()+1);return a},this._refreshView=function(){var t=this.activeDate.getFullYear(),a=this.activeDate.getMonth(),o=new Date(this.activeDate);o.setFullYear(t,a,1);var r=this.startingDay-o.getDay(),l=r>0?7-r:-r,s=new Date(o);l>0&&s.setDate(-l+1);for(var u=this.getDates(s,42),p=0;p<42;p++)u[p]=angular.extend(this.createDateObject(u[p],this.formatDay),{secondary:u[p].getMonth()!==a,uid:e.uniqueId+"-"+p});e.labels=new Array(7);for(var c=0;c<7;c++)e.labels[c]={abbr:n(u[c].date,this.formatDayHeader),full:n(u[c].date,"EEEE")};if(e.title=n(this.activeDate,this.formatDayTitle),e.rows=this.split(u,7),e.showWeeks){e.weekNumbers=[];for(var d=(11-this.startingDay)%7,m=e.rows.length,f=0;f<m;f++)e.weekNumbers.push(i(e.rows[f][d].date))}},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth(),e.getDate()),a=new Date(t.getFullYear(),t.getMonth(),t.getDate());return n.setFullYear(e.getFullYear()),a.setFullYear(t.getFullYear()),n-a},this.handleKeyDown=function(e,t){var n=this.activeDate.getDate();if("left"===e)n-=1;else if("up"===e)n-=7;else if("right"===e)n+=1;else if("down"===e)n+=7;else if("pageup"===e||"pagedown"===e){var i=this.activeDate.getMonth()+("pageup"===e?-1:1);this.activeDate.setMonth(i,1),n=Math.min(a(this.activeDate.getFullYear(),this.activeDate.getMonth()),n)}else"home"===e?n=1:"end"===e&&(n=a(this.activeDate.getFullYear(),this.activeDate.getMonth()));this.activeDate.setDate(n)}}]).controller("UibMonthpickerController",["$scope","$element","dateFilter",function(e,t,n){this.step={years:1},this.element=t,this.init=function(e){angular.extend(e,this),e.refreshView()},this._refreshView=function(){for(var t,a=new Array(12),i=this.activeDate.getFullYear(),o=0;o<12;o++)t=new Date(this.activeDate),t.setFullYear(i,o,1),a[o]=angular.extend(this.createDateObject(t,this.formatMonth),{uid:e.uniqueId+"-"+o});e.title=n(this.activeDate,this.formatMonthTitle),e.rows=this.split(a,this.monthColumns),e.yearHeaderColspan=this.monthColumns>3?this.monthColumns-2:1},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth()),a=new Date(t.getFullYear(),t.getMonth());return n.setFullYear(e.getFullYear()),a.setFullYear(t.getFullYear()),n-a},this.handleKeyDown=function(e,t){var n=this.activeDate.getMonth();if("left"===e)n-=1;else if("up"===e)n-=this.monthColumns;else if("right"===e)n+=1;else if("down"===e)n+=this.monthColumns;else if("pageup"===e||"pagedown"===e){var a=this.activeDate.getFullYear()+("pageup"===e?-1:1);this.activeDate.setFullYear(a)}else"home"===e?n=0:"end"===e&&(n=11);this.activeDate.setMonth(n)}}]).controller("UibYearpickerController",["$scope","$element","dateFilter",function(e,t,n){function a(e){return parseInt((e-1)/o,10)*o+1}var i,o;this.element=t,this.yearpickerInit=function(){i=this.yearColumns,o=this.yearRows*i,this.step={years:o}},this._refreshView=function(){for(var t,n=new Array(o),r=0,l=a(this.activeDate.getFullYear());r<o;r++)t=new Date(this.activeDate),t.setFullYear(l+r,0,1),n[r]=angular.extend(this.createDateObject(t,this.formatYear),{uid:e.uniqueId+"-"+r});e.title=[n[0].label,n[o-1].label].join(" - "),e.rows=this.split(n,i),e.columns=i},this.compare=function(e,t){return e.getFullYear()-t.getFullYear()},this.handleKeyDown=function(e,t){var n=this.activeDate.getFullYear();"left"===e?n-=1:"up"===e?n-=i:"right"===e?n+=1:"down"===e?n+=i:"pageup"===e||"pagedown"===e?n+=("pageup"===e?-1:1)*o:"home"===e?n=a(this.activeDate.getFullYear()):"end"===e&&(n=a(this.activeDate.getFullYear())+o-1),this.activeDate.setFullYear(n)}}]).directive("uibDatepicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/datepicker.html"},scope:{datepickerOptions:"=?"},require:["uibDatepicker","^ngModel"],restrict:"A",controller:"UibDatepickerController",controllerAs:"datepicker",link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}).directive("uibDaypicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/day.html"},require:["^uibDatepicker","uibDaypicker"],restrict:"A",controller:"UibDaypickerController",link:function(e,t,n,a){var i=a[0],o=a[1];o.init(i)}}}).directive("uibMonthpicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/month.html"},require:["^uibDatepicker","uibMonthpicker"],restrict:"A",controller:"UibMonthpickerController",link:function(e,t,n,a){var i=a[0],o=a[1];o.init(i)}}}).directive("uibYearpicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/year.html"},require:["^uibDatepicker","uibYearpicker"],restrict:"A",controller:"UibYearpickerController",link:function(e,t,n,a){var i=a[0];angular.extend(i,a[1]),i.yearpickerInit(),i.refreshView()}}}),angular.module("ui.bootstrap.position",[]).factory("$uibPosition",["$document","$window",function(e,t){var n,a,i={normal:/(auto|scroll)/,
hidden:/(auto|scroll|hidden)/},o={auto:/\s?auto?\s?/i,primary:/^(top|bottom|left|right)$/,secondary:/^(top|bottom|left|right|center)$/,vertical:/^(top|bottom)$/},r=/(HTML|BODY)/;return{getRawNode:function(e){return e.nodeName?e:e[0]||e},parseStyle:function(e){return e=parseFloat(e),isFinite(e)?e:0},offsetParent:function(n){function a(e){return"static"===(t.getComputedStyle(e).position||"static")}n=this.getRawNode(n);for(var i=n.offsetParent||e[0].documentElement;i&&i!==e[0].documentElement&&a(i);)i=i.offsetParent;return i||e[0].documentElement},scrollbarWidth:function(i){if(i){if(angular.isUndefined(a)){var o=e.find("body");o.addClass("uib-position-body-scrollbar-measure"),a=t.innerWidth-o[0].clientWidth,a=isFinite(a)?a:0,o.removeClass("uib-position-body-scrollbar-measure")}return a}if(angular.isUndefined(n)){var r=angular.element('<div class="uib-position-scrollbar-measure"></div>');e.find("body").append(r),n=r[0].offsetWidth-r[0].clientWidth,n=isFinite(n)?n:0,r.remove()}return n},scrollbarPadding:function(e){e=this.getRawNode(e);var n=t.getComputedStyle(e),a=this.parseStyle(n.paddingRight),i=this.parseStyle(n.paddingBottom),o=this.scrollParent(e,!1,!0),l=this.scrollbarWidth(r.test(o.tagName));return{scrollbarWidth:l,widthOverflow:o.scrollWidth>o.clientWidth,right:a+l,originalRight:a,heightOverflow:o.scrollHeight>o.clientHeight,bottom:i+l,originalBottom:i}},isScrollable:function(e,n){e=this.getRawNode(e);var a=n?i.hidden:i.normal,o=t.getComputedStyle(e);return a.test(o.overflow+o.overflowY+o.overflowX)},scrollParent:function(n,a,o){n=this.getRawNode(n);var r=a?i.hidden:i.normal,l=e[0].documentElement,s=t.getComputedStyle(n);if(o&&r.test(s.overflow+s.overflowY+s.overflowX))return n;var u="absolute"===s.position,p=n.parentElement||l;if(p===l||"fixed"===s.position)return l;for(;p.parentElement&&p!==l;){var c=t.getComputedStyle(p);if(u&&"static"!==c.position&&(u=!1),!u&&r.test(c.overflow+c.overflowY+c.overflowX))break;p=p.parentElement}return p},position:function(n,a){n=this.getRawNode(n);var i=this.offset(n);if(a){var o=t.getComputedStyle(n);i.top-=this.parseStyle(o.marginTop),i.left-=this.parseStyle(o.marginLeft)}var r=this.offsetParent(n),l={top:0,left:0};return r!==e[0].documentElement&&(l=this.offset(r),l.top+=r.clientTop-r.scrollTop,l.left+=r.clientLeft-r.scrollLeft),{width:Math.round(angular.isNumber(i.width)?i.width:n.offsetWidth),height:Math.round(angular.isNumber(i.height)?i.height:n.offsetHeight),top:Math.round(i.top-l.top),left:Math.round(i.left-l.left)}},offset:function(n){n=this.getRawNode(n);var a=n.getBoundingClientRect();return{width:Math.round(angular.isNumber(a.width)?a.width:n.offsetWidth),height:Math.round(angular.isNumber(a.height)?a.height:n.offsetHeight),top:Math.round(a.top+(t.pageYOffset||e[0].documentElement.scrollTop)),left:Math.round(a.left+(t.pageXOffset||e[0].documentElement.scrollLeft))}},viewportOffset:function(n,a,i){n=this.getRawNode(n),i=i!==!1;var o=n.getBoundingClientRect(),r={top:0,left:0,bottom:0,right:0},l=a?e[0].documentElement:this.scrollParent(n),s=l.getBoundingClientRect();if(r.top=s.top+l.clientTop,r.left=s.left+l.clientLeft,l===e[0].documentElement&&(r.top+=t.pageYOffset,r.left+=t.pageXOffset),r.bottom=r.top+l.clientHeight,r.right=r.left+l.clientWidth,i){var u=t.getComputedStyle(l);r.top+=this.parseStyle(u.paddingTop),r.bottom-=this.parseStyle(u.paddingBottom),r.left+=this.parseStyle(u.paddingLeft),r.right-=this.parseStyle(u.paddingRight)}return{top:Math.round(o.top-r.top),bottom:Math.round(r.bottom-o.bottom),left:Math.round(o.left-r.left),right:Math.round(r.right-o.right)}},parsePlacement:function(e){var t=o.auto.test(e);return t&&(e=e.replace(o.auto,"")),e=e.split("-"),e[0]=e[0]||"top",o.primary.test(e[0])||(e[0]="top"),e[1]=e[1]||"center",o.secondary.test(e[1])||(e[1]="center"),t?e[2]=!0:e[2]=!1,e},positionElements:function(e,n,a,i){e=this.getRawNode(e),n=this.getRawNode(n);var r=angular.isDefined(n.offsetWidth)?n.offsetWidth:n.prop("offsetWidth"),l=angular.isDefined(n.offsetHeight)?n.offsetHeight:n.prop("offsetHeight");a=this.parsePlacement(a);var s=i?this.offset(e):this.position(e),u={top:0,left:0,placement:""};if(a[2]){var p=this.viewportOffset(e,i),c=t.getComputedStyle(n),d={width:r+Math.round(Math.abs(this.parseStyle(c.marginLeft)+this.parseStyle(c.marginRight))),height:l+Math.round(Math.abs(this.parseStyle(c.marginTop)+this.parseStyle(c.marginBottom)))};if(a[0]="top"===a[0]&&d.height>p.top&&d.height<=p.bottom?"bottom":"bottom"===a[0]&&d.height>p.bottom&&d.height<=p.top?"top":"left"===a[0]&&d.width>p.left&&d.width<=p.right?"right":"right"===a[0]&&d.width>p.right&&d.width<=p.left?"left":a[0],a[1]="top"===a[1]&&d.height-s.height>p.bottom&&d.height-s.height<=p.top?"bottom":"bottom"===a[1]&&d.height-s.height>p.top&&d.height-s.height<=p.bottom?"top":"left"===a[1]&&d.width-s.width>p.right&&d.width-s.width<=p.left?"right":"right"===a[1]&&d.width-s.width>p.left&&d.width-s.width<=p.right?"left":a[1],"center"===a[1])if(o.vertical.test(a[0])){var m=s.width/2-r/2;p.left+m<0&&d.width-s.width<=p.right?a[1]="left":p.right+m<0&&d.width-s.width<=p.left&&(a[1]="right")}else{var f=s.height/2-d.height/2;p.top+f<0&&d.height-s.height<=p.bottom?a[1]="top":p.bottom+f<0&&d.height-s.height<=p.top&&(a[1]="bottom")}}switch(a[0]){case"top":u.top=s.top-l;break;case"bottom":u.top=s.top+s.height;break;case"left":u.left=s.left-r;break;case"right":u.left=s.left+s.width}switch(a[1]){case"top":u.top=s.top;break;case"bottom":u.top=s.top+s.height-l;break;case"left":u.left=s.left;break;case"right":u.left=s.left+s.width-r;break;case"center":o.vertical.test(a[0])?u.left=s.left+s.width/2-r/2:u.top=s.top+s.height/2-l/2}return u.top=Math.round(u.top),u.left=Math.round(u.left),u.placement="center"===a[1]?a[0]:a[0]+"-"+a[1],u},adjustTop:function(e,t,n,a){if(e.indexOf("top")!==-1&&n!==a)return{top:t.top-a+"px"}},positionArrow:function(e,n){e=this.getRawNode(e);var a=e.querySelector(".tooltip-inner, .popover-inner");if(a){var i=angular.element(a).hasClass("tooltip-inner"),r=i?e.querySelector(".tooltip-arrow"):e.querySelector(".arrow");if(r){var l={top:"",bottom:"",left:"",right:""};if(n=this.parsePlacement(n),"center"===n[1])return void angular.element(r).css(l);var s="border-"+n[0]+"-width",u=t.getComputedStyle(r)[s],p="border-";p+=o.vertical.test(n[0])?n[0]+"-"+n[1]:n[1]+"-"+n[0],p+="-radius";var c=t.getComputedStyle(i?a:e)[p];switch(n[0]){case"top":l.bottom=i?"0":"-"+u;break;case"bottom":l.top=i?"0":"-"+u;break;case"left":l.right=i?"0":"-"+u;break;case"right":l.left=i?"0":"-"+u}l[n[1]]=c,angular.element(r).css(l)}}}}}]),angular.module("ui.bootstrap.datepickerPopup",["ui.bootstrap.datepicker","ui.bootstrap.position"]).value("$datepickerPopupLiteralWarning",!0).constant("uibDatepickerPopupConfig",{altInputFormats:[],appendToBody:!1,clearText:"Clear",closeOnDateSelection:!0,closeText:"Done",currentText:"Today",datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"uib/template/datepickerPopup/popup.html",datepickerTemplateUrl:"uib/template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},onOpenFocus:!0,showButtonBar:!0,placement:"auto bottom-left"}).controller("UibDatepickerPopupController",["$scope","$element","$attrs","$compile","$log","$parse","$window","$document","$rootScope","$uibPosition","dateFilter","uibDateParser","uibDatepickerPopupConfig","$timeout","uibDatepickerConfig","$datepickerPopupLiteralWarning",function(e,t,n,a,i,o,r,l,s,u,p,c,d,m,f,h){function g(t){var n=c.parse(t,k,e.date);if(isNaN(n))for(var a=0;a<U.length;a++)if(n=c.parse(t,U[a],e.date),!isNaN(n))return n;return n}function b(e){if(angular.isNumber(e)&&(e=new Date(e)),!e)return null;if(angular.isDate(e)&&!isNaN(e))return e;if(angular.isString(e)){var t=g(e);if(!isNaN(t))return c.fromTimezone(t,A.timezone)}return E.$options&&E.$options.allowInvalid?e:void 0}function v(e,t){var a=e||t;return!n.ngRequired&&!a||(angular.isNumber(a)&&(a=new Date(a)),!a||(!(!angular.isDate(a)||isNaN(a))||!!angular.isString(a)&&!isNaN(g(a))))}function $(n){if(e.isOpen||!e.disabled){var a=I[0],i=t[0].contains(n.target),o=void 0!==a.contains&&a.contains(n.target);!e.isOpen||i||o||e.$apply(function(){e.isOpen=!1})}}function y(n){27===n.which&&e.isOpen?(n.preventDefault(),n.stopPropagation(),e.$apply(function(){e.isOpen=!1}),t[0].focus()):40!==n.which||e.isOpen||(n.preventDefault(),n.stopPropagation(),e.$apply(function(){e.isOpen=!0}))}function w(){if(e.isOpen){var a=angular.element(I[0].querySelector(".uib-datepicker-popup")),i=n.popupPlacement?n.popupPlacement:d.placement,o=u.positionElements(t,a,i,x);a.css({top:o.top+"px",left:o.left+"px"}),a.hasClass("uib-position-measure")&&a.removeClass("uib-position-measure")}}var k,D,x,C,M,T,O,P,S,E,A,I,U,N=!1,F=[];this.init=function(i){if(E=i,A=angular.isObject(i.$options)?i.$options:{timezone:null},D=angular.isDefined(n.closeOnDateSelection)?e.$parent.$eval(n.closeOnDateSelection):d.closeOnDateSelection,x=angular.isDefined(n.datepickerAppendToBody)?e.$parent.$eval(n.datepickerAppendToBody):d.appendToBody,C=angular.isDefined(n.onOpenFocus)?e.$parent.$eval(n.onOpenFocus):d.onOpenFocus,M=angular.isDefined(n.datepickerPopupTemplateUrl)?n.datepickerPopupTemplateUrl:d.datepickerPopupTemplateUrl,T=angular.isDefined(n.datepickerTemplateUrl)?n.datepickerTemplateUrl:d.datepickerTemplateUrl,U=angular.isDefined(n.altInputFormats)?e.$parent.$eval(n.altInputFormats):d.altInputFormats,e.showButtonBar=angular.isDefined(n.showButtonBar)?e.$parent.$eval(n.showButtonBar):d.showButtonBar,d.html5Types[n.type]?(k=d.html5Types[n.type],N=!0):(k=n.uibDatepickerPopup||d.datepickerPopup,n.$observe("uibDatepickerPopup",function(e,t){var n=e||d.datepickerPopup;if(n!==k&&(k=n,E.$modelValue=null,!k))throw new Error("uibDatepickerPopup must have a date format specified.")})),!k)throw new Error("uibDatepickerPopup must have a date format specified.");if(N&&n.uibDatepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");O=angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>"),O.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":M}),P=angular.element(O.children()[0]),P.attr("template-url",T),e.datepickerOptions||(e.datepickerOptions={}),N&&"month"===n.type&&(e.datepickerOptions.datepickerMode="month",e.datepickerOptions.minMode="month"),P.attr("datepicker-options","datepickerOptions"),N?E.$formatters.push(function(t){return e.date=c.fromTimezone(t,A.timezone),t}):(E.$$parserName="date",E.$validators.date=v,E.$parsers.unshift(b),E.$formatters.push(function(t){return E.$isEmpty(t)?(e.date=t,t):(angular.isNumber(t)&&(t=new Date(t)),e.date=c.fromTimezone(t,A.timezone),c.filter(e.date,k))})),E.$viewChangeListeners.push(function(){e.date=g(E.$viewValue)}),t.on("keydown",y),I=a(O)(e),O.remove(),x?l.find("body").append(I):t.after(I),e.$on("$destroy",function(){for(e.isOpen===!0&&(s.$$phase||e.$apply(function(){e.isOpen=!1})),I.remove(),t.off("keydown",y),l.off("click",$),S&&S.off("scroll",w),angular.element(r).off("resize",w);F.length;)F.shift()()})},e.getText=function(t){return e[t+"Text"]||d[t+"Text"]},e.isDisabled=function(t){"today"===t&&(t=c.fromTimezone(new Date,A.timezone));var n={};return angular.forEach(["minDate","maxDate"],function(t){e.datepickerOptions[t]?angular.isDate(e.datepickerOptions[t])?n[t]=new Date(e.datepickerOptions[t]):(h&&i.warn("Literal date support has been deprecated, please switch to date object usage"),n[t]=new Date(p(e.datepickerOptions[t],"medium"))):n[t]=null}),e.datepickerOptions&&n.minDate&&e.compare(t,n.minDate)<0||n.maxDate&&e.compare(t,n.maxDate)>0},e.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},e.dateSelection=function(n){e.date=n;var a=e.date?c.filter(e.date,k):null;t.val(a),E.$setViewValue(a),D&&(e.isOpen=!1,t[0].focus())},e.keydown=function(n){27===n.which&&(n.stopPropagation(),e.isOpen=!1,t[0].focus())},e.select=function(t,n){if(n.stopPropagation(),"today"===t){var a=new Date;angular.isDate(e.date)?(t=new Date(e.date),t.setFullYear(a.getFullYear(),a.getMonth(),a.getDate())):(t=c.fromTimezone(a,A.timezone),t.setHours(0,0,0,0))}e.dateSelection(t)},e.close=function(n){n.stopPropagation(),e.isOpen=!1,t[0].focus()},e.disabled=angular.isDefined(n.disabled)||!1,n.ngDisabled&&F.push(e.$parent.$watch(o(n.ngDisabled),function(t){e.disabled=t})),e.$watch("isOpen",function(a){a?e.disabled?e.isOpen=!1:m(function(){w(),C&&e.$broadcast("uib:datepicker.focus"),l.on("click",$);var a=n.popupPlacement?n.popupPlacement:d.placement;x||u.parsePlacement(a)[2]?(S=S||angular.element(u.scrollParent(t)),S&&S.on("scroll",w)):S=null,angular.element(r).on("resize",w)},0,!1):(l.off("click",$),S&&S.off("scroll",w),angular.element(r).off("resize",w))}),e.$on("uib:datepicker.mode",function(){m(w,0,!1)})}]).directive("uibDatepickerPopup",function(){return{require:["ngModel","uibDatepickerPopup"],controller:"UibDatepickerPopupController",scope:{datepickerOptions:"=?",isOpen:"=?",currentText:"@",clearText:"@",closeText:"@"},link:function(e,t,n,a){var i=a[0],o=a[1];o.init(i)}}}).directive("uibDatepickerPopupWrap",function(){return{restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepickerPopup/popup.html"}}}),angular.module("ui.bootstrap.debounce",[]).factory("$$debounce",["$timeout",function(e){return function(t,n){var a;return function(){var i=this,o=Array.prototype.slice.call(arguments);a&&e.cancel(a),a=e(function(){t.apply(i,o)},n)}}}]),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("uibDropdownConfig",{appendToOpenClass:"uib-dropdown-open",openClass:"open"}).service("uibDropdownService",["$document","$rootScope",function(e,t){var n=null;this.open=function(t,i){n||e.on("click",a),n&&n!==t&&(n.isOpen=!1),n=t},this.close=function(t,i){n===t&&(e.off("click",a),e.off("keydown",this.keybindFilter),n=null)};var a=function(e){if(n&&!(e&&"disabled"===n.getAutoClose()||e&&3===e.which)){var a=n.getToggleElement();if(!(e&&a&&a[0].contains(e.target))){var i=n.getDropdownElement();e&&"outsideClick"===n.getAutoClose()&&i&&i[0].contains(e.target)||(n.focusToggleElement(),n.isOpen=!1,t.$$phase||n.$apply())}}};this.keybindFilter=function(e){if(n){var t=n.getDropdownElement(),i=n.getToggleElement(),o=t&&t[0].contains(e.target),r=i&&i[0].contains(e.target);27===e.which?(e.stopPropagation(),n.focusToggleElement(),a()):n.isKeynavEnabled()&&[38,40].indexOf(e.which)!==-1&&n.isOpen&&(o||r)&&(e.preventDefault(),e.stopPropagation(),n.focusDropdownEntry(e.which))}}}]).controller("UibDropdownController",["$scope","$element","$attrs","$parse","uibDropdownConfig","uibDropdownService","$animate","$uibPosition","$document","$compile","$templateRequest",function(e,t,n,a,i,o,r,l,s,u,p){var c,d,m=this,f=e.$new(),h=i.appendToOpenClass,g=i.openClass,b=angular.noop,v=n.onToggle?a(n.onToggle):angular.noop,$=!1,y=null,w=!1,k=s.find("body");t.addClass("dropdown"),this.init=function(){if(n.isOpen&&(d=a(n.isOpen),b=d.assign,e.$watch(d,function(e){f.isOpen=!!e})),angular.isDefined(n.dropdownAppendTo)){var i=a(n.dropdownAppendTo)(f);i&&(y=angular.element(i))}$=angular.isDefined(n.dropdownAppendToBody),w=angular.isDefined(n.keyboardNav),$&&!y&&(y=k),y&&m.dropdownMenu&&(y.append(m.dropdownMenu),t.on("$destroy",function(){m.dropdownMenu.remove()}))},this.toggle=function(e){return f.isOpen=arguments.length?!!e:!f.isOpen,angular.isFunction(b)&&b(f,f.isOpen),f.isOpen},this.isOpen=function(){return f.isOpen},f.getToggleElement=function(){return m.toggleElement},f.getAutoClose=function(){return n.autoClose||"always"},f.getElement=function(){return t},f.isKeynavEnabled=function(){return w},f.focusDropdownEntry=function(e){var n=m.dropdownMenu?angular.element(m.dropdownMenu).find("a"):t.find("ul").eq(0).find("a");switch(e){case 40:angular.isNumber(m.selectedOption)?m.selectedOption=m.selectedOption===n.length-1?m.selectedOption:m.selectedOption+1:m.selectedOption=0;break;case 38:angular.isNumber(m.selectedOption)?m.selectedOption=0===m.selectedOption?0:m.selectedOption-1:m.selectedOption=n.length-1}n[m.selectedOption].focus()},f.getDropdownElement=function(){return m.dropdownMenu},f.focusToggleElement=function(){m.toggleElement&&m.toggleElement[0].focus()},f.$watch("isOpen",function(n,a){if(y&&m.dropdownMenu){var i,d,w,k=l.positionElements(t,m.dropdownMenu,"bottom-left",!0),D=0;if(i={top:k.top+"px",display:n?"block":"none"},d=m.dropdownMenu.hasClass("dropdown-menu-right"),d?(i.left="auto",w=l.scrollbarPadding(y),w.heightOverflow&&w.scrollbarWidth&&(D=w.scrollbarWidth),i.right=window.innerWidth-D-(k.left+t.prop("offsetWidth"))+"px"):(i.left=k.left+"px",i.right="auto"),!$){var x=l.offset(y);i.top=k.top-x.top+"px",d?i.right=window.innerWidth-(k.left-x.left+t.prop("offsetWidth"))+"px":i.left=k.left-x.left+"px"}m.dropdownMenu.css(i)}var C=y?y:t,M=C.hasClass(y?h:g);if(M===!n&&r[n?"addClass":"removeClass"](C,y?h:g).then(function(){angular.isDefined(n)&&n!==a&&v(e,{open:!!n})}),n)m.dropdownMenuTemplateUrl?p(m.dropdownMenuTemplateUrl).then(function(e){c=f.$new(),u(e.trim())(c,function(e){var t=e;m.dropdownMenu.replaceWith(t),m.dropdownMenu=t,s.on("keydown",o.keybindFilter)})}):s.on("keydown",o.keybindFilter),f.focusToggleElement(),o.open(f,t);else{if(o.close(f,t),m.dropdownMenuTemplateUrl){c&&c.$destroy();var T=angular.element('<ul class="dropdown-menu"></ul>');m.dropdownMenu.replaceWith(T),m.dropdownMenu=T}m.selectedOption=null}angular.isFunction(b)&&b(e,n)})}]).directive("uibDropdown",function(){return{controller:"UibDropdownController",link:function(e,t,n,a){a.init()}}}).directive("uibDropdownMenu",function(){return{restrict:"A",require:"?^uibDropdown",link:function(e,t,n,a){if(a&&!angular.isDefined(n.dropdownNested)){t.addClass("dropdown-menu");var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=t)}}}}).directive("uibDropdownToggle",function(){return{require:"?^uibDropdown",link:function(e,t,n,a){if(a){t.addClass("dropdown-toggle"),a.toggleElement=t;var i=function(i){i.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply(function(){a.toggle()})};t.bind("click",i),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(a.isOpen,function(e){t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.unbind("click",i)})}}}}),angular.module("ui.bootstrap.stackedMap",[]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t===e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,a=0;a<e.length;a++)if(t===e[a].key){n=a;break}return e.splice(n,1)[0]},removeTop:function(){return e.pop()},length:function(){return e.length}}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.stackedMap","ui.bootstrap.position"]).factory("$$multiMap",function(){return{createNew:function(){var e={};return{entries:function(){return Object.keys(e).map(function(t){return{key:t,value:e[t]}})},get:function(t){return e[t]},hasKey:function(t){return!!e[t]},keys:function(){return Object.keys(e)},put:function(t,n){e[t]||(e[t]=[]),e[t].push(n)},remove:function(t,n){var a=e[t];if(a){var i=a.indexOf(n);i!==-1&&a.splice(i,1),a.length||delete e[t]}}}}}}).provider("$uibResolve",function(){var e=this;this.resolver=null,this.setResolver=function(e){this.resolver=e},this.$get=["$injector","$q",function(t,n){var a=e.resolver?t.get(e.resolver):null;return{resolve:function(e,i,o,r){if(a)return a.resolve(e,i,o,r);var l=[];return angular.forEach(e,function(e){angular.isFunction(e)||angular.isArray(e)?l.push(n.resolve(t.invoke(e))):angular.isString(e)?l.push(n.resolve(t.get(e))):l.push(n.resolve(e))}),n.all(l).then(function(t){var n={},a=0;return angular.forEach(e,function(e,i){n[i]=t[a++]}),n})}}}]}).directive("uibModalBackdrop",["$animate","$injector","$uibModalStack",function(e,t,n){function a(t,a,i){i.modalInClass&&(e.addClass(a,i.modalInClass),t.$on(n.NOW_CLOSING_EVENT,function(n,o){var r=o();t.modalOptions.animation?e.removeClass(a,i.modalInClass).then(r):r()}))}return{restrict:"A",compile:function(e,t){return e.addClass(t.backdropClass),a}}}]).directive("uibModalWindow",["$uibModalStack","$q","$animateCss","$document",function(e,t,n,a){return{scope:{index:"@"},restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/modal/window.html"},link:function(i,o,r){o.addClass(r.windowTopClass||""),i.size=r.size,i.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!==n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))},o.on("click",i.close),i.$isRendered=!0;var l=t.defer();i.$$postDigest(function(){l.resolve()}),l.promise.then(function(){var l=null;r.modalInClass&&(l=n(o,{addClass:r.modalInClass}).start(),i.$on(e.NOW_CLOSING_EVENT,function(e,t){var a=t();n(o,{removeClass:r.modalInClass}).start().then(a)})),t.when(l).then(function(){var t=e.getTop();if(t&&e.modalRendered(t.key),!a[0].activeElement||!o[0].contains(a[0].activeElement)){var n=o[0].querySelector("[autofocus]");n?n.focus():o[0].focus()}})})}}}]).directive("uibModalAnimationClass",function(){return{compile:function(e,t){t.modalAnimation&&e.addClass(t.uibModalAnimationClass)}}}).directive("uibModalTransclude",["$animate",function(e){return{link:function(t,n,a,i,o){o(t.$parent,function(t){n.empty(),e.enter(t,n)})}}}]).factory("$uibModalStack",["$animate","$animateCss","$document","$compile","$rootScope","$q","$$multiMap","$$stackedMap","$uibPosition",function(e,t,n,a,i,o,r,l,s){function u(e){var t="-";return e.replace(S,function(e,n){return(n?t:"")+e.toLowerCase()})}function p(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}function c(){for(var e=-1,t=D.keys(),n=0;n<t.length;n++)D.get(t[n]).value.backdrop&&(e=n);return e>-1&&e<M&&(e=M),e}function d(e,t){var n=D.get(e).value,a=n.appendTo;D.remove(e),T=D.top(),T&&(M=parseInt(T.value.modalDomEl.attr("index"),10)),h(n.modalDomEl,n.modalScope,function(){var t=n.openedClass||k;x.remove(t,e);var i=x.hasKey(t);a.toggleClass(t,i),!i&&w&&w.heightOverflow&&w.scrollbarWidth&&(w.originalRight?a.css({paddingRight:w.originalRight+"px"}):a.css({paddingRight:""}),w=null),m(!0)},n.closedDeferred),f(),t&&t.focus?t.focus():a.focus&&a.focus()}function m(e){var t;D.length()>0&&(t=D.top().value,t.modalDomEl.toggleClass(t.windowTopClass||"",e))}function f(){if($&&c()===-1){var e=y;h($,y,function(){e=null}),$=void 0,y=void 0}}function h(t,n,a,i){function r(){r.done||(r.done=!0,e.leave(t).then(function(){a&&a(),t.remove(),i&&i.resolve()}),n.$destroy())}var l,s=null,u=function(){return l||(l=o.defer(),s=l.promise),function(){l.resolve()}};return n.$broadcast(C.NOW_CLOSING_EVENT,u),o.when(s).then(r)}function g(e){if(e.isDefaultPrevented())return e;var t=D.top();if(t)switch(e.which){case 27:t.value.keyboard&&(e.preventDefault(),i.$apply(function(){C.dismiss(t.key,"escape key press")}));break;case 9:var n=C.loadFocusElementList(t),a=!1;e.shiftKey?(C.isFocusInFirstItem(e,n)||C.isModalFocused(e,t))&&(a=C.focusLastFocusableElement(n)):C.isFocusInLastItem(e,n)&&(a=C.focusFirstFocusableElement(n)),a&&(e.preventDefault(),e.stopPropagation())}}function b(e,t,n){return!e.value.modalScope.$broadcast("modal.closing",t,n).defaultPrevented}function v(){Array.prototype.forEach.call(document.querySelectorAll("["+O+"]"),function(e){var t=parseInt(e.getAttribute(O),10),n=t-1;e.setAttribute(O,n),n||(e.removeAttribute(O),e.removeAttribute("aria-hidden"))})}var $,y,w,k="modal-open",D=l.createNew(),x=r.createNew(),C={NOW_CLOSING_EVENT:"modal.stack.now-closing"},M=0,T=null,O="data-bootstrap-modal-aria-hidden-count",P="a[href], area[href], input:not([disabled]):not([tabindex='-1']), button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']), textarea:not([disabled]):not([tabindex='-1']), iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]",S=/[A-Z]/g;return i.$watch(c,function(e){y&&(y.index=e)}),n.on("keydown",g),i.$on("$destroy",function(){n.off("keydown",g)}),C.open=function(t,o){function r(e){function t(e){var t=e.parent()?e.parent().children():[];return Array.prototype.filter.call(t,function(t){return t!==e[0]})}if(e&&"BODY"!==e[0].tagName)return t(e).forEach(function(e){var t="true"===e.getAttribute("aria-hidden"),n=parseInt(e.getAttribute(O),10);n||(n=t?1:0),e.setAttribute(O,n+1),e.setAttribute("aria-hidden","true")}),r(e.parent())}var l=n[0].activeElement,p=o.openedClass||k;m(!1),T=D.top(),D.add(t,{deferred:o.deferred,renderDeferred:o.renderDeferred,closedDeferred:o.closedDeferred,modalScope:o.scope,backdrop:o.backdrop,keyboard:o.keyboard,openedClass:o.openedClass,windowTopClass:o.windowTopClass,animation:o.animation,appendTo:o.appendTo}),x.put(p,t);var d=o.appendTo,f=c();if(!d.length)throw new Error("appendTo element not found. Make sure that the element passed is in DOM.");f>=0&&!$&&(y=i.$new(!0),y.modalOptions=o,y.index=f,$=angular.element('<div uib-modal-backdrop="modal-backdrop"></div>'),$.attr({"class":"modal-backdrop","ng-style":"{'z-index': 1040 + (index && 1 || 0) + index*10}","uib-modal-animation-class":"fade","modal-in-class":"in"}),o.backdropClass&&$.addClass(o.backdropClass),o.animation&&$.attr("modal-animation","true"),a($)(y),e.enter($,d),s.isScrollable(d)&&(w=s.scrollbarPadding(d),w.heightOverflow&&w.scrollbarWidth&&d.css({paddingRight:w.right+"px"})));var h;o.component?(h=document.createElement(u(o.component.name)),h=angular.element(h),h.attr({resolve:"$resolve","modal-instance":"$uibModalInstance",close:"$close($value)",dismiss:"$dismiss($value)"})):h=o.content,M=T?parseInt(T.value.modalDomEl.attr("index"),10)+1:0;var g=angular.element('<div uib-modal-window="modal-window"></div>');g.attr({"class":"modal","template-url":o.windowTemplateUrl,"window-top-class":o.windowTopClass,role:"dialog","aria-labelledby":o.ariaLabelledBy,"aria-describedby":o.ariaDescribedBy,size:o.size,index:M,animate:"animate","ng-style":"{'z-index': 1050 + $$topModalIndex*10, display: 'block'}",tabindex:-1,"uib-modal-animation-class":"fade","modal-in-class":"in"}).append(h),o.windowClass&&g.addClass(o.windowClass),o.animation&&g.attr("modal-animation","true"),d.addClass(p),o.scope&&(o.scope.$$topModalIndex=M),e.enter(a(g)(o.scope),d),D.top().value.modalDomEl=g,D.top().value.modalOpener=l,r(g)},C.close=function(e,t){var n=D.get(e);return v(),n&&b(n,t,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(t),d(e,n.value.modalOpener),!0):!n},C.dismiss=function(e,t){var n=D.get(e);return v(),n&&b(n,t,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(t),d(e,n.value.modalOpener),!0):!n},C.dismissAll=function(e){for(var t=this.getTop();t&&this.dismiss(t.key,e);)t=this.getTop()},C.getTop=function(){return D.top()},C.modalRendered=function(e){var t=D.get(e);C.focusFirstFocusableElement(C.loadFocusElementList(t)),t&&t.value.renderDeferred.resolve()},C.focusFirstFocusableElement=function(e){return e.length>0&&(e[0].focus(),!0)},C.focusLastFocusableElement=function(e){return e.length>0&&(e[e.length-1].focus(),!0)},C.isModalFocused=function(e,t){if(e&&t){var n=t.value.modalDomEl;if(n&&n.length)return(e.target||e.srcElement)===n[0]}return!1},C.isFocusInFirstItem=function(e,t){return t.length>0&&(e.target||e.srcElement)===t[0]},C.isFocusInLastItem=function(e,t){return t.length>0&&(e.target||e.srcElement)===t[t.length-1]},C.loadFocusElementList=function(e){if(e){var t=e.value.modalDomEl;if(t&&t.length){var n=t[0].querySelectorAll(P);return n?Array.prototype.filter.call(n,function(e){return p(e)}):n}}},C}]).provider("$uibModal",function(){var e={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$rootScope","$q","$document","$templateRequest","$controller","$uibResolve","$uibModalStack",function(t,n,a,i,o,r,l){function s(e){return e.template?n.when(e.template):i(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl)}var u={},p=null;return u.getPromiseChain=function(){return p},u.open=function(i){function u(){return g}var c=n.defer(),d=n.defer(),m=n.defer(),f=n.defer(),h={result:c.promise,opened:d.promise,closed:m.promise,rendered:f.promise,close:function(e){return l.close(h,e)},dismiss:function(e){return l.dismiss(h,e)}};if(i=angular.extend({},e.options,i),i.resolve=i.resolve||{},i.appendTo=i.appendTo||a.find("body").eq(0),!i.component&&!i.template&&!i.templateUrl)throw new Error("One of component or template or templateUrl options is required.");var g;g=i.component?n.when(r.resolve(i.resolve,{},null,null)):n.all([s(i),r.resolve(i.resolve,{},null,null)]);var b;return b=p=n.all([p]).then(u,u).then(function(e){function n(t,n,a,i){t.$scope=r,t.$scope.$resolve={},a?t.$scope.$uibModalInstance=h:t.$uibModalInstance=h;var o=n?e[1]:e;angular.forEach(o,function(e,n){i&&(t[n]=e),t.$scope.$resolve[n]=e})}var a=i.scope||t,r=a.$new();r.$close=h.close,r.$dismiss=h.dismiss,r.$on("$destroy",function(){r.$$uibDestructionScheduled||r.$dismiss("$uibUnscheduledDestruction")});var s,u,p={scope:r,deferred:c,renderDeferred:f,closedDeferred:m,animation:i.animation,backdrop:i.backdrop,keyboard:i.keyboard,backdropClass:i.backdropClass,windowTopClass:i.windowTopClass,windowClass:i.windowClass,windowTemplateUrl:i.windowTemplateUrl,ariaLabelledBy:i.ariaLabelledBy,ariaDescribedBy:i.ariaDescribedBy,size:i.size,openedClass:i.openedClass,appendTo:i.appendTo},g={},b={};i.component?(n(g,!1,!0,!1),g.name=i.component,p.component=g):i.controller&&(n(b,!0,!1,!0),u=o(i.controller,b,!0,i.controllerAs),i.controllerAs&&i.bindToController&&(s=u.instance,s.$close=r.$close,s.$dismiss=r.$dismiss,angular.extend(s,{$resolve:b.$scope.$resolve},a)),s=u(),angular.isFunction(s.$onInit)&&s.$onInit()),i.component||(p.content=e[0]),l.open(h,p),d.resolve(!0)},function(e){d.reject(e),c.reject(e)})["finally"](function(){p===b&&(p=null)}),h},u}]};return e}),angular.module("ui.bootstrap.paging",[]).factory("uibPaging",["$parse",function(e){return{create:function(t,n,a){t.setNumPages=a.numPages?e(a.numPages).assign:angular.noop,t.ngModelCtrl={$setViewValue:angular.noop},t._watchers=[],t.init=function(e,i){t.ngModelCtrl=e,t.config=i,e.$render=function(){t.render()},a.itemsPerPage?t._watchers.push(n.$parent.$watch(a.itemsPerPage,function(e){t.itemsPerPage=parseInt(e,10),n.totalPages=t.calculateTotalPages(),t.updatePage()})):t.itemsPerPage=i.itemsPerPage,n.$watch("totalItems",function(e,a){(angular.isDefined(e)||e!==a)&&(n.totalPages=t.calculateTotalPages(),t.updatePage())})},t.calculateTotalPages=function(){var e=t.itemsPerPage<1?1:Math.ceil(n.totalItems/t.itemsPerPage);return Math.max(e||0,1)},t.render=function(){n.page=parseInt(t.ngModelCtrl.$viewValue,10)||1},n.selectPage=function(e,a){a&&a.preventDefault();var i=!n.ngDisabled||!a;i&&n.page!==e&&e>0&&e<=n.totalPages&&(a&&a.target&&a.target.blur(),t.ngModelCtrl.$setViewValue(e),t.ngModelCtrl.$render())},n.getText=function(e){return n[e+"Text"]||t.config[e+"Text"]},n.noPrevious=function(){return 1===n.page},n.noNext=function(){return n.page===n.totalPages},t.updatePage=function(){t.setNumPages(n.$parent,n.totalPages),n.page>n.totalPages?n.selectPage(n.totalPages):t.ngModelCtrl.$render()},n.$on("$destroy",function(){for(;t._watchers.length;)t._watchers.shift()()})}}}]),angular.module("ui.bootstrap.pager",["ui.bootstrap.paging","ui.bootstrap.tabindex"]).controller("UibPagerController",["$scope","$attrs","uibPaging","uibPagerConfig",function(e,t,n,a){e.align=angular.isDefined(t.align)?e.$parent.$eval(t.align):a.align,n.create(this,e,t)}]).constant("uibPagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("uibPager",["uibPagerConfig",function(e){return{scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["uibPager","?ngModel"],restrict:"A",controller:"UibPagerController",controllerAs:"pager",templateUrl:function(e,t){return t.templateUrl||"uib/template/pager/pager.html";
},link:function(t,n,a,i){n.addClass("pager");var o=i[0],r=i[1];r&&o.init(r,e)}}}]),angular.module("ui.bootstrap.pagination",["ui.bootstrap.paging","ui.bootstrap.tabindex"]).controller("UibPaginationController",["$scope","$attrs","$parse","uibPaging","uibPaginationConfig",function(e,t,n,a,i){function o(e,t,n){return{number:e,text:t,active:n}}function r(e,t){var n=[],a=1,i=t,r=angular.isDefined(s)&&s<t;r&&(u?(a=Math.max(e-Math.floor(s/2),1),i=a+s-1,i>t&&(i=t,a=i-s+1)):(a=(Math.ceil(e/s)-1)*s+1,i=Math.min(a+s-1,t)));for(var l=a;l<=i;l++){var m=o(l,d(l),l===e);n.push(m)}if(r&&s>0&&(!u||p||c)){if(a>1){if(!c||a>3){var f=o(a-1,"...",!1);n.unshift(f)}if(c){if(3===a){var h=o(2,"2",!1);n.unshift(h)}var g=o(1,"1",!1);n.unshift(g)}}if(i<t){if(!c||i<t-2){var b=o(i+1,"...",!1);n.push(b)}if(c){if(i===t-2){var v=o(t-1,t-1,!1);n.push(v)}var $=o(t,t,!1);n.push($)}}}return n}var l=this,s=angular.isDefined(t.maxSize)?e.$parent.$eval(t.maxSize):i.maxSize,u=angular.isDefined(t.rotate)?e.$parent.$eval(t.rotate):i.rotate,p=angular.isDefined(t.forceEllipses)?e.$parent.$eval(t.forceEllipses):i.forceEllipses,c=angular.isDefined(t.boundaryLinkNumbers)?e.$parent.$eval(t.boundaryLinkNumbers):i.boundaryLinkNumbers,d=angular.isDefined(t.pageLabel)?function(n){return e.$parent.$eval(t.pageLabel,{$page:n})}:angular.identity;e.boundaryLinks=angular.isDefined(t.boundaryLinks)?e.$parent.$eval(t.boundaryLinks):i.boundaryLinks,e.directionLinks=angular.isDefined(t.directionLinks)?e.$parent.$eval(t.directionLinks):i.directionLinks,a.create(this,e,t),t.maxSize&&l._watchers.push(e.$parent.$watch(n(t.maxSize),function(e){s=parseInt(e,10),l.render()}));var m=this.render;this.render=function(){m(),e.page>0&&e.page<=e.totalPages&&(e.pages=r(e.page,e.totalPages))}}]).constant("uibPaginationConfig",{itemsPerPage:10,boundaryLinks:!1,boundaryLinkNumbers:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0,forceEllipses:!1}).directive("uibPagination",["$parse","uibPaginationConfig",function(e,t){return{scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["uibPagination","?ngModel"],restrict:"A",controller:"UibPaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"uib/template/pagination/pagination.html"},link:function(e,n,a,i){n.addClass("pagination");var o=i[0],r=i[1];r&&o.init(r,t)}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.stackedMap"]).provider("$uibTooltip",function(){function e(e){var t=/[A-Z]/g,n="-";return e.replace(t,function(e,t){return(t?n:"")+e.toLowerCase()})}var t={placement:"top",placementClassPrefix:"",animation:!0,popupDelay:0,popupCloseDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",outsideClick:"outsideClick",focus:"blur",none:""},a={};this.options=function(e){angular.extend(a,e)},this.setTriggers=function(e){angular.extend(n,e)},this.$get=["$window","$compile","$timeout","$document","$uibPosition","$interpolate","$rootScope","$parse","$$stackedMap",function(i,o,r,l,s,u,p,c,d){function m(e){if(27===e.which){var t=f.top();t&&(t.value.close(),t=null)}}var f=d.createNew();return l.on("keyup",m),p.$on("$destroy",function(){l.off("keyup",m)}),function(i,p,d,m){function h(e){var t=(e||m.trigger||d).split(" "),a=t.map(function(e){return n[e]||e});return{show:t,hide:a}}m=angular.extend({},t,a,m);var g=e(i),b=u.startSymbol(),v=u.endSymbol(),$="<div "+g+'-popup uib-title="'+b+"title"+v+'" '+(m.useContentExp?'content-exp="contentExp()" ':'content="'+b+"content"+v+'" ')+'origin-scope="origScope" class="uib-position-measure '+p+'" tooltip-animation-class="fade"uib-tooltip-classes ng-class="{ in: isOpen }" ></div>';return{compile:function(e,t){var n=o($);return function(e,t,a,o){function u(){q.isOpen?g():d()}function d(){R&&!e.$eval(a[p+"Enable"])||(y(),D(),q.popupDelay?A||(A=r(b,q.popupDelay,!1)):b())}function g(){v(),q.popupCloseDelay?I||(I=r($,q.popupCloseDelay,!1)):$()}function b(){return v(),y(),q.content?(w(),void q.$evalAsync(function(){q.isOpen=!0,x(!0),W()})):angular.noop}function v(){A&&(r.cancel(A),A=null),U&&(r.cancel(U),U=null)}function $(){q&&q.$evalAsync(function(){q&&(q.isOpen=!1,x(!1),q.animation?E||(E=r(k,150,!1)):k())})}function y(){I&&(r.cancel(I),I=null),E&&(r.cancel(E),E=null)}function w(){P||(S=q.$new(),P=n(S,function(e){H?l.find("body").append(e):t.after(e)}),f.add(q,{close:$}),C())}function k(){v(),y(),M(),P&&(P.remove(),P=null,N&&r.cancel(N)),f.remove(q),S&&(S.$destroy(),S=null)}function D(){q.title=a[p+"Title"],z?q.content=z(e):q.content=a[i],q.popupClass=a[p+"Class"],q.placement=angular.isDefined(a[p+"Placement"])?a[p+"Placement"]:m.placement;var t=s.parsePlacement(q.placement);F=t[1]?t[0]+"-"+t[1]:t[0];var n=parseInt(a[p+"PopupDelay"],10),o=parseInt(a[p+"PopupCloseDelay"],10);q.popupDelay=isNaN(n)?m.popupDelay:n,q.popupCloseDelay=isNaN(o)?m.popupCloseDelay:o}function x(t){Y&&angular.isFunction(Y.assign)&&Y.assign(e,t)}function C(){B.length=0,z?(B.push(e.$watch(z,function(e){q.content=e,!e&&q.isOpen&&$()})),B.push(S.$watch(function(){L||(L=!0,S.$$postDigest(function(){L=!1,q&&q.isOpen&&W()}))}))):B.push(a.$observe(i,function(e){q.content=e,!e&&q.isOpen?$():W()})),B.push(a.$observe(p+"Title",function(e){q.title=e,q.isOpen&&W()})),B.push(a.$observe(p+"Placement",function(e){q.placement=e?e:m.placement,q.isOpen&&W()}))}function M(){B.length&&(angular.forEach(B,function(e){e()}),B.length=0)}function T(e){q&&q.isOpen&&P&&(t[0].contains(e.target)||P[0].contains(e.target)||g())}function O(){var n=[],i=[],o=e.$eval(a[p+"Trigger"]);j(),angular.isObject(o)?(Object.keys(o).forEach(function(e){n.push(e),i.push(o[e])}),V={show:n,hide:i}):V=h(o),"none"!==V.show&&V.show.forEach(function(e,n){"outsideClick"===e?(t.on("click",u),l.on("click",T)):e===V.hide[n]?t.on(e,u):e&&(t.on(e,d),t.on(V.hide[n],g)),t.on("keypress",function(e){27===e.which&&g()})})}var P,S,E,A,I,U,N,F,H=!!angular.isDefined(m.appendToBody)&&m.appendToBody,V=h(void 0),R=angular.isDefined(a[p+"Enable"]),q=e.$new(!0),L=!1,Y=!!angular.isDefined(a[p+"IsOpen"])&&c(a[p+"IsOpen"]),z=!!m.useContentExp&&c(a[i]),B=[],W=function(){P&&P.html()&&(U||(U=r(function(){var e=s.positionElements(t,P,q.placement,H),n=angular.isDefined(P.offsetHeight)?P.offsetHeight:P.prop("offsetHeight"),a=H?s.offset(t):s.position(t);P.css({top:e.top+"px",left:e.left+"px"});var i=e.placement.split("-");P.hasClass(i[0])||(P.removeClass(F.split("-")[0]),P.addClass(i[0])),P.hasClass(m.placementClassPrefix+e.placement)||(P.removeClass(m.placementClassPrefix+F),P.addClass(m.placementClassPrefix+e.placement)),N=r(function(){var e=angular.isDefined(P.offsetHeight)?P.offsetHeight:P.prop("offsetHeight"),t=s.adjustTop(i,a,n,e);t&&P.css(t),N=null},0,!1),P.hasClass("uib-position-measure")?(s.positionArrow(P,e.placement),P.removeClass("uib-position-measure")):F!==e.placement&&s.positionArrow(P,e.placement),F=e.placement,U=null},0,!1)))};q.origScope=e,q.isOpen=!1,q.contentExp=function(){return q.content},a.$observe("disabled",function(e){e&&v(),e&&q.isOpen&&$()}),Y&&e.$watch(Y,function(e){q&&!e===q.isOpen&&u()});var j=function(){V.show.forEach(function(e){"outsideClick"===e?t.off("click",u):(t.off(e,d),t.off(e,u))}),V.hide.forEach(function(e){"outsideClick"===e?l.off("click",T):t.off(e,g)})};O();var _=e.$eval(a[p+"Animation"]);q.animation=angular.isDefined(_)?!!_:m.animation;var G,K=p+"AppendToBody";G=K in a&&void 0===a[K]||e.$eval(a[K]),H=angular.isDefined(G)?G:H,e.$on("$destroy",function(){j(),k(),q=null})}}}}}]}).directive("uibTooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(e,t,n,a){return{link:function(i,o,r){var l,s,u,p=i.$eval(r.tooltipTemplateTranscludeScope),c=0,d=function(){s&&(s.remove(),s=null),l&&(l.$destroy(),l=null),u&&(e.leave(u).then(function(){s=null}),s=u,u=null)};i.$watch(t.parseAsResourceUrl(r.uibTooltipTemplateTransclude),function(t){var r=++c;t?(a(t,!0).then(function(a){if(r===c){var i=p.$new(),s=a,m=n(s)(i,function(t){d(),e.enter(t,o)});l=i,u=m,l.$emit("$includeContentLoaded",t)}},function(){r===c&&(d(),i.$emit("$includeContentError",t))}),i.$emit("$includeContentRequested",t)):d()}),i.$on("$destroy",d)}}}]).directive("uibTooltipClasses",["$uibPosition",function(e){return{restrict:"A",link:function(t,n,a){if(t.placement){var i=e.parsePlacement(t.placement);n.addClass(i[0])}t.popupClass&&n.addClass(t.popupClass),t.animation&&n.addClass(a.tooltipAnimationClass)}}}]).directive("uibTooltipPopup",function(){return{restrict:"A",scope:{content:"@"},templateUrl:"uib/template/tooltip/tooltip-popup.html"}}).directive("uibTooltip",["$uibTooltip",function(e){return e("uibTooltip","tooltip","mouseenter")}]).directive("uibTooltipTemplatePopup",function(){return{restrict:"A",scope:{contentExp:"&",originScope:"&"},templateUrl:"uib/template/tooltip/tooltip-template-popup.html"}}).directive("uibTooltipTemplate",["$uibTooltip",function(e){return e("uibTooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("uibTooltipHtmlPopup",function(){return{restrict:"A",scope:{contentExp:"&"},templateUrl:"uib/template/tooltip/tooltip-html-popup.html"}}).directive("uibTooltipHtml",["$uibTooltip",function(e){return e("uibTooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("uibPopoverTemplatePopup",function(){return{restrict:"A",scope:{uibTitle:"@",contentExp:"&",originScope:"&"},templateUrl:"uib/template/popover/popover-template.html"}}).directive("uibPopoverTemplate",["$uibTooltip",function(e){return e("uibPopoverTemplate","popover","click",{useContentExp:!0})}]).directive("uibPopoverHtmlPopup",function(){return{restrict:"A",scope:{contentExp:"&",uibTitle:"@"},templateUrl:"uib/template/popover/popover-html.html"}}).directive("uibPopoverHtml",["$uibTooltip",function(e){return e("uibPopoverHtml","popover","click",{useContentExp:!0})}]).directive("uibPopoverPopup",function(){return{restrict:"A",scope:{uibTitle:"@",content:"@"},templateUrl:"uib/template/popover/popover.html"}}).directive("uibPopover",["$uibTooltip",function(e){return e("uibPopover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("uibProgressConfig",{animate:!0,max:100}).controller("UibProgressController",["$scope","$attrs","uibProgressConfig",function(e,t,n){function a(){return angular.isDefined(e.maxParam)?e.maxParam:n.max}var i=this,o=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;this.bars=[],e.max=a(),this.addBar=function(e,t,n){o||t.css({transition:"none"}),this.bars.push(e),e.max=a(),e.title=n&&angular.isDefined(n.title)?n.title:"progressbar",e.$watch("value",function(t){e.recalculatePercentage()}),e.recalculatePercentage=function(){var t=i.bars.reduce(function(e,t){return t.percent=+(100*t.value/t.max).toFixed(2),e+t.percent},0);t>100&&(e.percent-=t-100)},e.$on("$destroy",function(){t=null,i.removeBar(e)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1),this.bars.forEach(function(e){e.recalculatePercentage()})},e.$watch("maxParam",function(e){i.bars.forEach(function(e){e.max=a(),e.recalculatePercentage()})})}]).directive("uibProgress",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",require:"uibProgress",scope:{maxParam:"=?max"},templateUrl:"uib/template/progressbar/progress.html"}}).directive("uibBar",function(){return{replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"uib/template/progressbar/bar.html",link:function(e,t,n,a){a.addBar(e,t,n)}}}).directive("uibProgressbar",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",scope:{value:"=",maxParam:"=?max",type:"@"},templateUrl:"uib/template/progressbar/progressbar.html",link:function(e,t,n,a){a.addBar(e,angular.element(t.children()[0]),{title:n.title})}}}),angular.module("ui.bootstrap.rating",[]).constant("uibRatingConfig",{max:5,stateOn:null,stateOff:null,enableReset:!0,titles:["one","two","three","four","five"]}).controller("UibRatingController",["$scope","$attrs","uibRatingConfig",function(e,t,n){var a={$setViewValue:angular.noop},i=this;this.init=function(i){a=i,a.$render=this.render,a.$formatters.push(function(e){return angular.isNumber(e)&&e<<0!==e&&(e=Math.round(e)),e}),this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff,this.enableReset=angular.isDefined(t.enableReset)?e.$parent.$eval(t.enableReset):n.enableReset;var o=angular.isDefined(t.titles)?e.$parent.$eval(t.titles):n.titles;this.titles=angular.isArray(o)&&o.length>0?o:n.titles;var r=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(r)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;t<n;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(t)},e[t]);return e},this.getTitle=function(e){return e>=this.titles.length?e+1:this.titles[e]},e.rate=function(t){if(!e.readonly&&t>=0&&t<=e.range.length){var n=i.enableReset&&a.$viewValue===t?0:t;a.$setViewValue(n),a.$render()}},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=a.$viewValue,e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=a.$viewValue,e.title=i.getTitle(e.value-1)}}]).directive("uibRating",function(){return{require:["uibRating","ngModel"],restrict:"A",scope:{readonly:"=?readOnly",onHover:"&",onLeave:"&"},controller:"UibRatingController",templateUrl:"uib/template/rating/rating.html",link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("UibTabsetController",["$scope",function(e){function t(e){for(var t=0;t<a.tabs.length;t++)if(a.tabs[t].index===e)return t}var n,a=this;a.tabs=[],a.select=function(e,o){if(!i){var r=t(n),l=a.tabs[r];if(l){if(l.tab.onDeselect({$event:o,$selectedIndex:e}),o&&o.isDefaultPrevented())return;l.tab.active=!1}var s=a.tabs[e];s?(s.tab.onSelect({$event:o}),s.tab.active=!0,a.active=s.index,n=s.index):!s&&angular.isDefined(n)&&(a.active=null,n=null)}},a.addTab=function(e){if(a.tabs.push({tab:e,index:e.index}),a.tabs.sort(function(e,t){return e.index>t.index?1:e.index<t.index?-1:0}),e.index===a.active||!angular.isDefined(a.active)&&1===a.tabs.length){var n=t(e.index);a.select(n)}},a.removeTab=function(e){for(var t,n=0;n<a.tabs.length;n++)if(a.tabs[n].tab===e){t=n;break}if(a.tabs[t].index===a.active){var i=t===a.tabs.length-1?t-1:t+1%a.tabs.length;a.select(i)}a.tabs.splice(t,1)},e.$watch("tabset.active",function(e){angular.isDefined(e)&&e!==n&&a.select(t(e))});var i;e.$on("$destroy",function(){i=!0})}]).directive("uibTabset",function(){return{transclude:!0,replace:!0,scope:{},bindToController:{active:"=?",type:"@"},controller:"UibTabsetController",controllerAs:"tabset",templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tabset.html"},link:function(e,t,n){e.vertical=!!angular.isDefined(n.vertical)&&e.$parent.$eval(n.vertical),e.justified=!!angular.isDefined(n.justified)&&e.$parent.$eval(n.justified)}}}).directive("uibTab",["$parse",function(e){return{require:"^uibTabset",replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tab.html"},transclude:!0,scope:{heading:"@",index:"=?",classes:"@?",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},controllerAs:"tab",link:function(t,n,a,i,o){t.disabled=!1,a.disable&&t.$parent.$watch(e(a.disable),function(e){t.disabled=!!e}),angular.isUndefined(a.index)&&(i.tabs&&i.tabs.length?t.index=Math.max.apply(null,i.tabs.map(function(e){return e.index}))+1:t.index=0),angular.isUndefined(a.classes)&&(t.classes=""),t.select=function(e){if(!t.disabled){for(var n,a=0;a<i.tabs.length;a++)if(i.tabs[a].tab===t){n=a;break}i.select(n,e)}},i.addTab(t),t.$on("$destroy",function(){i.removeTab(t)}),t.$transcludeFn=o}}}]).directive("uibTabHeadingTransclude",function(){return{restrict:"A",require:"^uibTab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}).directive("uibTabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("uib-tab-heading")||e.hasAttribute("data-uib-tab-heading")||e.hasAttribute("x-uib-tab-heading")||"uib-tab-heading"===e.tagName.toLowerCase()||"data-uib-tab-heading"===e.tagName.toLowerCase()||"x-uib-tab-heading"===e.tagName.toLowerCase()||"uib:tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^uibTabset",link:function(t,n,a){var i=t.$eval(a.uibTabContentTransclude).tab;i.$transcludeFn(i.$parent,function(t){angular.forEach(t,function(t){e(t)?i.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("uibTimepickerConfig",{hourStep:1,minuteStep:1,secondStep:1,showMeridian:!0,showSeconds:!1,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0,templateUrl:"uib/template/timepicker/timepicker.html"}).controller("UibTimepickerController",["$scope","$element","$attrs","$parse","$log","$locale","uibTimepickerConfig",function(e,t,n,a,i,o,r){function l(){var t=+e.hours,n=e.showMeridian?t>0&&t<13:t>=0&&t<24;if(n&&""!==e.hours)return e.showMeridian&&(12===t&&(t=0),e.meridian===x[1]&&(t+=12)),t}function s(){var t=+e.minutes,n=t>=0&&t<60;if(n&&""!==e.minutes)return t}function u(){var t=+e.seconds;return t>=0&&t<60?t:void 0}function p(e,t){return null===e?"":angular.isDefined(e)&&e.toString().length<2&&!t?"0"+e:e.toString()}function c(e){d(),D.$setViewValue(new Date(w)),m(e)}function d(){v&&v.$setValidity("hours",!0),$&&$.$setValidity("minutes",!0),y&&y.$setValidity("seconds",!0),D.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1,e.invalidSeconds=!1}function m(t){if(D.$modelValue){var n=w.getHours(),a=w.getMinutes(),i=w.getSeconds();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:p(n,!C),"m"!==t&&(e.minutes=p(a)),e.meridian=w.getHours()<12?x[0]:x[1],"s"!==t&&(e.seconds=p(i)),e.meridian=w.getHours()<12?x[0]:x[1]}else e.hours=null,e.minutes=null,e.seconds=null,e.meridian=x[0]}function f(e){w=g(w,e),c()}function h(e,t){return g(e,60*t)}function g(e,t){var n=new Date(e.getTime()+1e3*t),a=new Date(e);return a.setHours(n.getHours(),n.getMinutes(),n.getSeconds()),a}function b(){return(null===e.hours||""===e.hours)&&(null===e.minutes||""===e.minutes)&&(!e.showSeconds||e.showSeconds&&(null===e.seconds||""===e.seconds))}var v,$,y,w=new Date,k=[],D={$setViewValue:angular.noop},x=angular.isDefined(n.meridians)?e.$parent.$eval(n.meridians):r.meridians||o.DATETIME_FORMATS.AMPMS,C=!angular.isDefined(n.padHours)||e.$parent.$eval(n.padHours);e.tabindex=angular.isDefined(n.tabindex)?n.tabindex:0,t.removeAttr("tabindex"),this.init=function(t,a){D=t,D.$render=this.render,D.$formatters.unshift(function(e){return e?new Date(e):null});var i=a.eq(0),o=a.eq(1),l=a.eq(2);v=i.controller("ngModel"),$=o.controller("ngModel"),y=l.controller("ngModel");var s=angular.isDefined(n.mousewheel)?e.$parent.$eval(n.mousewheel):r.mousewheel;s&&this.setupMousewheelEvents(i,o,l);var u=angular.isDefined(n.arrowkeys)?e.$parent.$eval(n.arrowkeys):r.arrowkeys;u&&this.setupArrowkeyEvents(i,o,l),e.readonlyInput=angular.isDefined(n.readonlyInput)?e.$parent.$eval(n.readonlyInput):r.readonlyInput,this.setupInputEvents(i,o,l)};var M=r.hourStep;n.hourStep&&k.push(e.$parent.$watch(a(n.hourStep),function(e){M=+e}));var T=r.minuteStep;n.minuteStep&&k.push(e.$parent.$watch(a(n.minuteStep),function(e){T=+e}));var O;k.push(e.$parent.$watch(a(n.min),function(e){var t=new Date(e);O=isNaN(t)?void 0:t}));var P;k.push(e.$parent.$watch(a(n.max),function(e){var t=new Date(e);P=isNaN(t)?void 0:t}));var S=!1;n.ngDisabled&&k.push(e.$parent.$watch(a(n.ngDisabled),function(e){S=e})),e.noIncrementHours=function(){var e=h(w,60*M);return S||e>P||e<w&&e<O},e.noDecrementHours=function(){var e=h(w,60*-M);return S||e<O||e>w&&e>P},e.noIncrementMinutes=function(){var e=h(w,T);return S||e>P||e<w&&e<O},e.noDecrementMinutes=function(){var e=h(w,-T);return S||e<O||e>w&&e>P},e.noIncrementSeconds=function(){var e=g(w,E);return S||e>P||e<w&&e<O},e.noDecrementSeconds=function(){var e=g(w,-E);return S||e<O||e>w&&e>P},e.noToggleMeridian=function(){return w.getHours()<12?S||h(w,720)>P:S||h(w,-720)<O};var E=r.secondStep;n.secondStep&&k.push(e.$parent.$watch(a(n.secondStep),function(e){E=+e})),e.showSeconds=r.showSeconds,n.showSeconds&&k.push(e.$parent.$watch(a(n.showSeconds),function(t){e.showSeconds=!!t})),e.showMeridian=r.showMeridian,n.showMeridian&&k.push(e.$parent.$watch(a(n.showMeridian),function(t){if(e.showMeridian=!!t,D.$error.time){var n=l(),a=s();angular.isDefined(n)&&angular.isDefined(a)&&(w.setHours(n),c())}else m()})),this.setupMousewheelEvents=function(t,n,a){var i=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.bind("mousewheel wheel",function(t){S||e.$apply(i(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),n.bind("mousewheel wheel",function(t){S||e.$apply(i(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()}),a.bind("mousewheel wheel",function(t){S||e.$apply(i(t)?e.incrementSeconds():e.decrementSeconds()),t.preventDefault()})},this.setupArrowkeyEvents=function(t,n,a){t.bind("keydown",function(t){S||(38===t.which?(t.preventDefault(),e.incrementHours(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementHours(),e.$apply()))}),n.bind("keydown",function(t){S||(38===t.which?(t.preventDefault(),e.incrementMinutes(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementMinutes(),e.$apply()))}),a.bind("keydown",function(t){S||(38===t.which?(t.preventDefault(),e.incrementSeconds(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementSeconds(),e.$apply()))})},this.setupInputEvents=function(t,n,a){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void(e.updateSeconds=angular.noop);var i=function(t,n,a){D.$setViewValue(null),D.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t,v&&v.$setValidity("hours",!1)),angular.isDefined(n)&&(e.invalidMinutes=n,$&&$.$setValidity("minutes",!1)),angular.isDefined(a)&&(e.invalidSeconds=a,y&&y.$setValidity("seconds",!1))};e.updateHours=function(){var e=l(),t=s();D.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(w.setHours(e),w.setMinutes(t),w<O||w>P?i(!0):c("h")):i(!0)},t.bind("blur",function(t){D.$setTouched(),b()?d():null===e.hours||""===e.hours?i(!0):!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=p(e.hours,!C)})}),e.updateMinutes=function(){var e=s(),t=l();D.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(w.setHours(t),w.setMinutes(e),w<O||w>P?i(void 0,!0):c("m")):i(void 0,!0)},n.bind("blur",function(t){D.$setTouched(),b()?d():null===e.minutes?i(void 0,!0):!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=p(e.minutes)})}),e.updateSeconds=function(){var e=u();D.$setDirty(),angular.isDefined(e)?(w.setSeconds(e),c("s")):i(void 0,void 0,!0)},a.bind("blur",function(t){b()?d():!e.invalidSeconds&&e.seconds<10&&e.$apply(function(){e.seconds=p(e.seconds)})})},this.render=function(){var t=D.$viewValue;isNaN(t)?(D.$setValidity("time",!1),i.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(w=t),w<O||w>P?(D.$setValidity("time",!1),e.invalidHours=!0,e.invalidMinutes=!0):d(),m())},e.showSpinners=angular.isDefined(n.showSpinners)?e.$parent.$eval(n.showSpinners):r.showSpinners,e.incrementHours=function(){e.noIncrementHours()||f(60*M*60)},e.decrementHours=function(){e.noDecrementHours()||f(60*-M*60)},e.incrementMinutes=function(){e.noIncrementMinutes()||f(60*T)},e.decrementMinutes=function(){e.noDecrementMinutes()||f(60*-T)},e.incrementSeconds=function(){e.noIncrementSeconds()||f(E)},e.decrementSeconds=function(){e.noDecrementSeconds()||f(-E)},e.toggleMeridian=function(){var t=s(),n=l();e.noToggleMeridian()||(angular.isDefined(t)&&angular.isDefined(n)?f(720*(w.getHours()<12?60:-60)):e.meridian=e.meridian===x[0]?x[1]:x[0])},e.blur=function(){D.$setTouched()},e.$on("$destroy",function(){for(;k.length;)k.shift()()})}]).directive("uibTimepicker",["uibTimepickerConfig",function(e){return{require:["uibTimepicker","?^ngModel"],restrict:"A",controller:"UibTimepickerController",controllerAs:"timepicker",scope:{},templateUrl:function(t,n){return n.templateUrl||e.templateUrl},link:function(e,t,n,a){var i=a[0],o=a[1];o&&i.init(o,t.find("input"))}}}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.debounce","ui.bootstrap.position"]).factory("uibTypeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(t);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:e(a[4]),viewMapper:e(a[2]||a[1]),modelMapper:e(a[1])}}}}]).controller("UibTypeaheadController",["$scope","$element","$attrs","$compile","$parse","$q","$timeout","$document","$window","$rootScope","$$debounce","$uibPosition","uibTypeaheadParser",function(e,t,n,a,i,o,r,l,s,u,p,c,d){function m(){q.moveInProgress||(q.moveInProgress=!0,q.$digest()),Z()}function f(){q.position=S?c.offset(t):c.position(t),q.position.top+=t.prop("offsetHeight")}var h,g,b=[9,13,27,38,40],v=200,$=e.$eval(n.typeaheadMinLength);$||0===$||($=1),e.$watch(n.typeaheadMinLength,function(e){$=e||0===e?e:1});var y=e.$eval(n.typeaheadWaitMs)||0,w=e.$eval(n.typeaheadEditable)!==!1;e.$watch(n.typeaheadEditable,function(e){w=e!==!1});var k,D,x=i(n.typeaheadLoading).assign||angular.noop,C=n.typeaheadShouldSelect?i(n.typeaheadShouldSelect):function(e,t){var n=t.$event;return 13===n.which||9===n.which},M=i(n.typeaheadOnSelect),T=!!angular.isDefined(n.typeaheadSelectOnBlur)&&e.$eval(n.typeaheadSelectOnBlur),O=i(n.typeaheadNoResults).assign||angular.noop,P=n.typeaheadInputFormatter?i(n.typeaheadInputFormatter):void 0,S=!!n.typeaheadAppendToBody&&e.$eval(n.typeaheadAppendToBody),E=n.typeaheadAppendTo?e.$eval(n.typeaheadAppendTo):null,A=e.$eval(n.typeaheadFocusFirst)!==!1,I=!!n.typeaheadSelectOnExact&&e.$eval(n.typeaheadSelectOnExact),U=i(n.typeaheadIsOpen).assign||angular.noop,N=e.$eval(n.typeaheadShowHint)||!1,F=i(n.ngModel),H=i(n.ngModel+"($$$p)"),V=function(t,n){return angular.isFunction(F(e))&&g&&g.$options&&g.$options.getterSetter?H(t,{$$$p:n}):F.assign(t,n)},R=d.parse(n.uibTypeahead),q=e.$new(),L=e.$on("$destroy",function(){q.$destroy()});q.$on("$destroy",L);var Y="typeahead-"+q.$id+"-"+Math.floor(1e4*Math.random());t.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":Y});var z,B;N&&(z=angular.element("<div></div>"),z.css("position","relative"),t.after(z),B=t.clone(),B.attr("placeholder",""),B.attr("tabindex","-1"),B.val(""),B.css({position:"absolute",top:"0px",left:"0px","border-color":"transparent","box-shadow":"none",opacity:1,background:"none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)",color:"#999"}),t.css({position:"relative","vertical-align":"top","background-color":"transparent"}),B.attr("id")&&B.removeAttr("id"),z.append(B),B.after(t));var W=angular.element("<div uib-typeahead-popup></div>");W.attr({id:Y,matches:"matches",active:"activeIdx",select:"select(activeIdx, evt)","move-in-progress":"moveInProgress",query:"query",position:"position","assign-is-open":"assignIsOpen(isOpen)",debounce:"debounceUpdate"}),angular.isDefined(n.typeaheadTemplateUrl)&&W.attr("template-url",n.typeaheadTemplateUrl),angular.isDefined(n.typeaheadPopupTemplateUrl)&&W.attr("popup-template-url",n.typeaheadPopupTemplateUrl);var j=function(){N&&B.val("")},_=function(){q.matches=[],q.activeIdx=-1,t.attr("aria-expanded",!1),j()},G=function(e){return Y+"-option-"+e};q.$watch("activeIdx",function(e){e<0?t.removeAttr("aria-activedescendant"):t.attr("aria-activedescendant",G(e))});var K=function(e,t){return!!(q.matches.length>t&&e)&&e.toUpperCase()===q.matches[t].label.toUpperCase()},X=function(n,a){var i={$viewValue:n};x(e,!0),O(e,!1),o.when(R.source(e,i)).then(function(o){var r=n===h.$viewValue;if(r&&k)if(o&&o.length>0){q.activeIdx=A?0:-1,O(e,!1),q.matches.length=0;for(var l=0;l<o.length;l++)i[R.itemName]=o[l],q.matches.push({id:G(l),label:R.viewMapper(q,i),model:o[l]});if(q.query=n,f(),t.attr("aria-expanded",!0),I&&1===q.matches.length&&K(n,0)&&(angular.isNumber(q.debounceUpdate)||angular.isObject(q.debounceUpdate)?p(function(){q.select(0,a)},angular.isNumber(q.debounceUpdate)?q.debounceUpdate:q.debounceUpdate["default"]):q.select(0,a)),N){var s=q.matches[0].label;angular.isString(n)&&n.length>0&&s.slice(0,n.length).toUpperCase()===n.toUpperCase()?B.val(n+s.slice(n.length)):B.val("")}}else _(),O(e,!0);r&&x(e,!1)},function(){_(),x(e,!1),O(e,!0)})};S&&(angular.element(s).on("resize",m),l.find("body").on("scroll",m));var Z=p(function(){q.matches.length&&f(),q.moveInProgress=!1},v);q.moveInProgress=!1,q.query=void 0;var J,Q=function(e){J=r(function(){X(e)},y)},ee=function(){J&&r.cancel(J)};_(),q.assignIsOpen=function(t){U(e,t)},q.select=function(a,i){var o,l,s={};D=!0,s[R.itemName]=l=q.matches[a].model,o=R.modelMapper(e,s),V(e,o),h.$setValidity("editable",!0),h.$setValidity("parse",!0),M(e,{$item:l,$model:o,$label:R.viewMapper(e,s),$event:i}),_(),q.$eval(n.typeaheadFocusOnSelect)!==!1&&r(function(){t[0].focus()},0,!1)},t.on("keydown",function(t){if(0!==q.matches.length&&b.indexOf(t.which)!==-1){var n=C(e,{$event:t});if(q.activeIdx===-1&&n||9===t.which&&t.shiftKey)return _(),void q.$digest();t.preventDefault();var a;switch(t.which){case 27:t.stopPropagation(),_(),e.$digest();break;case 38:q.activeIdx=(q.activeIdx>0?q.activeIdx:q.matches.length)-1,q.$digest(),a=W[0].querySelectorAll(".uib-typeahead-match")[q.activeIdx],a.parentNode.scrollTop=a.offsetTop;break;case 40:q.activeIdx=(q.activeIdx+1)%q.matches.length,q.$digest(),a=W[0].querySelectorAll(".uib-typeahead-match")[q.activeIdx],a.parentNode.scrollTop=a.offsetTop;break;default:n&&q.$apply(function(){angular.isNumber(q.debounceUpdate)||angular.isObject(q.debounceUpdate)?p(function(){q.select(q.activeIdx,t)},angular.isNumber(q.debounceUpdate)?q.debounceUpdate:q.debounceUpdate["default"]):q.select(q.activeIdx,t)})}}}),t.bind("focus",function(e){k=!0,0!==$||h.$viewValue||r(function(){X(h.$viewValue,e)},0)}),t.bind("blur",function(e){T&&q.matches.length&&q.activeIdx!==-1&&!D&&(D=!0,q.$apply(function(){angular.isObject(q.debounceUpdate)&&angular.isNumber(q.debounceUpdate.blur)?p(function(){q.select(q.activeIdx,e)},q.debounceUpdate.blur):q.select(q.activeIdx,e)})),!w&&h.$error.editable&&(h.$setViewValue(),q.$apply(function(){h.$setValidity("editable",!0),h.$setValidity("parse",!0)}),t.val("")),k=!1,D=!1});var te=function(n){t[0]!==n.target&&3!==n.which&&0!==q.matches.length&&(_(),u.$$phase||e.$digest())};l.on("click",te),e.$on("$destroy",function(){l.off("click",te),(S||E)&&ne.remove(),S&&(angular.element(s).off("resize",m),l.find("body").off("scroll",m)),W.remove(),N&&z.remove()});var ne=a(W)(q);S?l.find("body").append(ne):E?angular.element(E).eq(0).append(ne):t.after(ne),this.init=function(t,n){h=t,g=n,q.debounceUpdate=h.$options&&i(h.$options.debounce)(e),h.$parsers.unshift(function(t){return k=!0,0===$||t&&t.length>=$?y>0?(ee(),Q(t)):X(t):(x(e,!1),ee(),_()),w?t:t?void h.$setValidity("editable",!1):(h.$setValidity("editable",!0),null)}),h.$formatters.push(function(t){var n,a,i={};return w||h.$setValidity("editable",!0),P?(i.$model=t,P(e,i)):(i[R.itemName]=t,n=R.viewMapper(e,i),i[R.itemName]=void 0,a=R.viewMapper(e,i),n!==a?n:t)})}}]).directive("uibTypeahead",function(){return{controller:"UibTypeaheadController",require:["ngModel","^?ngModelOptions","uibTypeahead"],link:function(e,t,n,a){
a[2].init(a[0],a[1])}}}).directive("uibTypeaheadPopup",["$$debounce",function(e){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&",assignIsOpen:"&",debounce:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"uib/template/typeahead/typeahead-popup.html"},link:function(t,n,a){t.templateUrl=a.templateUrl,t.isOpen=function(){var e=t.matches.length>0;return t.assignIsOpen({isOpen:e}),e},t.isActive=function(e){return t.active===e},t.selectActive=function(e){t.active=e},t.selectMatch=function(n,a){var i=t.debounce();angular.isNumber(i)||angular.isObject(i)?e(function(){t.select({activeIdx:n,evt:a})},angular.isNumber(i)?i:i["default"]):t.select({activeIdx:n,evt:a})}}}}]).directive("uibTypeaheadMatch",["$templateRequest","$compile","$parse",function(e,t,n){return{scope:{index:"=",match:"=",query:"="},link:function(a,i,o){var r=n(o.templateUrl)(a.$parent)||"uib/template/typeahead/typeahead-match.html";e(r).then(function(e){var n=angular.element(e.trim());i.replaceWith(n),t(n)(a)})}}}]).filter("uibTypeaheadHighlight",["$sce","$injector","$log",function(e,t,n){function a(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function i(e){return/<.*>/g.test(e)}var o;return o=t.has("$sanitize"),function(t,r){return!o&&i(t)&&n.warn("Unsafe use of typeahead please use ngSanitize"),t=r?(""+t).replace(new RegExp(a(r),"gi"),"<strong>$&</strong>"):t,o||(t=e.trustAsHtml(t)),t}}]),angular.module("uib/template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion-group.html",'<div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="panel-heading" ng-keypress="toggleOpen($event)">\n  <h4 class="panel-title">\n    <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::panelId}}" tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading" ng-disabled="isDisabled" uib-tabindex-toggle><span uib-accordion-header ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n  </h4>\n</div>\n<div id="{{::panelId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabpanel" class="panel-collapse collapse" uib-collapse="!isOpen">\n  <div class="panel-body" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion.html",'<div role="tablist" class="panel-group" ng-transclude></div>')}]),angular.module("uib/template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("uib/template/alert/alert.html",'<button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n  <span aria-hidden="true">&times;</span>\n  <span class="sr-only">Close</span>\n</button>\n<div ng-transclude></div>\n')}]),angular.module("uib/template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/carousel.html",'<div class="carousel-inner" ng-transclude></div>\n<a role="button" href class="left carousel-control" ng-click="prev()" ng-class="{ disabled: isPrevDisabled() }" ng-show="slides.length > 1">\n  <span aria-hidden="true" class="glyphicon glyphicon-chevron-left"></span>\n  <span class="sr-only">previous</span>\n</a>\n<a role="button" href class="right carousel-control" ng-click="next()" ng-class="{ disabled: isNextDisabled() }" ng-show="slides.length > 1">\n  <span aria-hidden="true" class="glyphicon glyphicon-chevron-right"></span>\n  <span class="sr-only">next</span>\n</a>\n<ol class="carousel-indicators" ng-show="slides.length > 1">\n  <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n    <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n  </li>\n</ol>\n')}]),angular.module("uib/template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/slide.html",'<div class="text-center" ng-transclude></div>\n')}]),angular.module("uib/template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/datepicker.html",'<div ng-switch="datepickerMode">\n  <div uib-daypicker ng-switch-when="day" tabindex="0" class="uib-daypicker"></div>\n  <div uib-monthpicker ng-switch-when="month" tabindex="0" class="uib-monthpicker"></div>\n  <div uib-yearpicker ng-switch-when="year" tabindex="0" class="uib-yearpicker"></div>\n</div>\n')}]),angular.module("uib/template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-weeks" ng-repeat="row in rows track by $index" role="row">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default btn-sm"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::yearHeaderColspan}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-months" ng-repeat="row in rows track by $index" role="row">\n      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-years" ng-repeat="row in rows track by $index" role="row">\n      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepickerPopup/popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepickerPopup/popup.html",'<ul role="presentation" class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n  <li ng-transclude></li>\n  <li ng-if="showButtonBar" class="uib-button-bar">\n    <span class="btn-group pull-left">\n      <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n      <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n    </span>\n    <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n  </li>\n</ul>\n')}]),angular.module("uib/template/modal/window.html",[]).run(["$templateCache",function(e){e.put("uib/template/modal/window.html","<div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n")}]),angular.module("uib/template/pager/pager.html",[]).run(["$templateCache",function(e){e.put("uib/template/pager/pager.html",'<li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n<li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n')}]),angular.module("uib/template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("uib/template/pagination/pagination.html",'<li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'first\')}}</a></li>\n<li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n<li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)" ng-disabled="ngDisabled&&!page.active" uib-tabindex-toggle>{{page.text}}</a></li>\n<li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n<li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'last\')}}</a></li>\n')}]),angular.module("uib/template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-html-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n')}]),angular.module("uib/template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner" ng-bind="content"></div>\n')}]),angular.module("uib/template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-template-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner"\n  uib-tooltip-template-transclude="contentExp()"\n  tooltip-template-transclude-scope="originScope()"></div>\n')}]),angular.module("uib/template/popover/popover-html.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-html.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover-template.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-template.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content"\n      uib-tooltip-template-transclude="contentExp()"\n      tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content" ng-bind="content"></div>\n</div>\n')}]),angular.module("uib/template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n')}]),angular.module("uib/template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progress.html",'<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>')}]),angular.module("uib/template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("uib/template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}" aria-valuetext="{{title}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}"></i>\n</span>\n')}]),angular.module("uib/template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tab.html",'<li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item">\n  <a href ng-click="select($event)" class="nav-link" uib-tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("uib/template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{tabset.type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane"\n         ng-repeat="tab in tabset.tabs"\n         ng-class="{active: tabset.active === tab.index}"\n         uib-tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("uib/template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/timepicker/timepicker.html",'<table class="uib-timepicker">\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-increment hours"><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-increment minutes"><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-increment seconds"><a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n        <input type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n      </td>\n      <td class="uib-separator">:</td>\n      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n        <input type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n      </td>\n      <td ng-show="showSeconds" class="uib-separator">:</td>\n      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n        <input type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n      </td>\n      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-decrement hours"><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-decrement minutes"><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-decrement seconds"><a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-match.html",'<a href\n   tabindex="-1"\n   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n   ng-attr-title="{{match.label}}"></a>\n')}]),angular.module("uib/template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li class="uib-typeahead-match" ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),angular.module("ui.bootstrap.carousel").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibCarouselCss&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),angular.$$uibCarouselCss=!0}),angular.module("ui.bootstrap.datepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'),angular.$$uibDatepickerCss=!0}),angular.module("ui.bootstrap.position").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibPositionCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'),angular.$$uibPositionCss=!0}),angular.module("ui.bootstrap.datepickerPopup").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerpopupCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'),angular.$$uibDatepickerpopupCss=!0}),angular.module("ui.bootstrap.tooltip").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTooltipCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'),angular.$$uibTooltipCss=!0}),angular.module("ui.bootstrap.timepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTimepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>'),angular.$$uibTimepickerCss=!0}),angular.module("ui.bootstrap.typeahead").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTypeaheadCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'),angular.$$uibTypeaheadCss=!0});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsImpxdWVyeS52YWxpZGF0ZS5qcyIsImpxdWVyeS52YWxpZGF0ZS51bm9idHJ1c2l2ZS5qcyIsImFuZ3VsYXIuanMiLCJib290c3RyYXAuanMiLCJ1aS1ib290c3RyYXAtdHBscy5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50IiwidyIsIkVycm9yIiwid2luZG93IiwidGhpcyIsIm5vR2xvYmFsIiwiaXNBcnJheUxpa2UiLCJvYmoiLCJsZW5ndGgiLCJ0eXBlIiwialF1ZXJ5IiwiaXNXaW5kb3ciLCJ3aW5ub3ciLCJlbGVtZW50cyIsInF1YWxpZmllciIsIm5vdCIsImlzRnVuY3Rpb24iLCJncmVwIiwiZWxlbSIsImkiLCJjYWxsIiwibm9kZVR5cGUiLCJyaXNTaW1wbGUiLCJ0ZXN0IiwiZmlsdGVyIiwiaW5kZXhPZiIsInNpYmxpbmciLCJjdXIiLCJkaXIiLCJjcmVhdGVPcHRpb25zIiwib3B0aW9ucyIsIm9iamVjdCIsImVhY2giLCJtYXRjaCIsInJub3R3aGl0ZSIsIl8iLCJmbGFnIiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5IiwiRGF0YSIsImV4cGFuZG8iLCJ1aWQiLCJkYXRhQXR0ciIsImtleSIsImRhdGEiLCJuYW1lIiwidW5kZWZpbmVkIiwicmVwbGFjZSIsInJtdWx0aURhc2giLCJ0b0xvd2VyQ2FzZSIsImdldEF0dHJpYnV0ZSIsInJicmFjZSIsInBhcnNlSlNPTiIsImUiLCJkYXRhVXNlciIsInNldCIsImFkanVzdENTUyIsInByb3AiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImNzcyIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsInJjc3NOdW0iLCJleGVjIiwic3R5bGUiLCJzdGFydCIsImVuZCIsImdldEFsbCIsImNvbnRleHQiLCJ0YWciLCJyZXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJub2RlTmFtZSIsIm1lcmdlIiwic2V0R2xvYmFsRXZhbCIsImVsZW1zIiwicmVmRWxlbWVudHMiLCJsIiwiZGF0YVByaXYiLCJnZXQiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ0bXAiLCJ3cmFwIiwiY29udGFpbnMiLCJqIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJyaHRtbCIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsInJ0YWdOYW1lIiwid3JhcE1hcCIsIl9kZWZhdWx0IiwiaW5uZXJIVE1MIiwiaHRtbFByZWZpbHRlciIsImxhc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmaXJzdENoaWxkIiwidGV4dENvbnRlbnQiLCJwdXNoIiwiY3JlYXRlVGV4dE5vZGUiLCJpbkFycmF5Iiwib3duZXJEb2N1bWVudCIsInJzY3JpcHRUeXBlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiZXJyIiwib24iLCJ0eXBlcyIsInNlbGVjdG9yIiwiZm4iLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImFwcGx5IiwiYXJndW1lbnRzIiwiZ3VpZCIsImFkZCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsInJzY3JpcHRUeXBlTWFza2VkIiwicmVtb3ZlQXR0cmlidXRlIiwiY2xvbmVDb3B5RXZlbnQiLCJzcmMiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJldmVudHMiLCJoYXNEYXRhIiwiYWNjZXNzIiwiaGFuZGxlIiwiZXh0ZW5kIiwiZml4SW5wdXQiLCJyY2hlY2thYmxlVHlwZSIsImNoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJhcmdzIiwiY2FsbGJhY2siLCJjb25jYXQiLCJmaXJzdCIsImhhc1NjcmlwdHMiLCJub2RlIiwiZG9jIiwiaU5vQ2xvbmUiLCJ2YWx1ZSIsInN1cHBvcnQiLCJjaGVja0Nsb25lIiwicmNoZWNrZWQiLCJpbmRleCIsInNlbGYiLCJlcSIsImh0bWwiLCJtYXAiLCJjbG9uZSIsIl9ldmFsVXJsIiwiZ2xvYmFsRXZhbCIsInJjbGVhblNjcmlwdCIsInJlbW92ZSIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiYWN0dWFsRGlzcGxheSIsImFwcGVuZFRvIiwiYm9keSIsImRpc3BsYXkiLCJkZXRhY2giLCJkZWZhdWx0RGlzcGxheSIsImVsZW1kaXNwbGF5IiwiaWZyYW1lIiwiZG9jdW1lbnRFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwid3JpdGUiLCJjbG9zZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0U3R5bGVzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJybnVtbm9ucHgiLCJybWFyZ2luIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJ2ZW5kb3JQcm9wTmFtZSIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwidG9VcHBlckNhc2UiLCJzbGljZSIsImNzc1ByZWZpeGVzIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1hdGNoZXMiLCJNYXRoIiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwidmFsIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIm1zRnVsbHNjcmVlbkVsZW1lbnQiLCJ0b3AiLCJnZXRDbGllbnRSZWN0cyIsInJvdW5kIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm94U2l6aW5nUmVsaWFibGUiLCJwYXJzZUZsb2F0Iiwic2hvd0hpZGUiLCJzaG93IiwiaGlkZGVuIiwidmFsdWVzIiwiaXNIaWRkZW4iLCJUd2VlbiIsImVhc2luZyIsInByb3RvdHlwZSIsImluaXQiLCJjcmVhdGVGeE5vdyIsInNldFRpbWVvdXQiLCJmeE5vdyIsIm5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsImhlaWdodCIsIm9wYWNpdHkiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsInByb3BzIiwib3B0cyIsInRvZ2dsZSIsImhvb2tzIiwib2xkZmlyZSIsImNoZWNrRGlzcGxheSIsImFuaW0iLCJvcmlnIiwiZGF0YVNob3ciLCJxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJhbHdheXMiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInJmeHR5cGVzIiwiaXNFbXB0eU9iamVjdCIsImRvbmUiLCJoaWRlIiwicHJvcEZpbHRlciIsInNwZWNpYWxFYXNpbmciLCJjYW1lbENhc2UiLCJpc0FycmF5IiwiY3NzSG9va3MiLCJleHBhbmQiLCJwcm9wZXJ0aWVzIiwicmVzdWx0Iiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJkZWZlcnJlZCIsIkRlZmVycmVkIiwidGljayIsImN1cnJlbnRUaW1lIiwicmVtYWluaW5nIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJ0ZW1wIiwicGVyY2VudCIsInR3ZWVucyIsInJ1biIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb21pc2UiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJzdG9wIiwiZ290b0VuZCIsInJlamVjdFdpdGgiLCJwcm94eSIsImZ4IiwidGltZXIiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwiZmFpbCIsImdldENsYXNzIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZnVuYyIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwidW5zaGlmdCIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0Iiwic2VsZWN0ZWQiLCJpbnNwZWN0ZWQiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0Iiwic2Vla2luZ1RyYW5zcG9ydCIsInRyYW5zcG9ydHMiLCJhamF4RXh0ZW5kIiwidGFyZ2V0IiwiZGVlcCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiY29udGVudHMiLCJzaGlmdCIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJjb252ZXJ0ZXJzIiwiYWpheENvbnZlcnQiLCJyZXNwb25zZSIsImlzU3VjY2VzcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJwcmV2IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwic3BsaXQiLCJzdGF0ZSIsImVycm9yIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsInYiLCJyYnJhY2tldCIsImdldFdpbmRvdyIsImRlZmF1bHRWaWV3IiwiYXJyIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJ2ZXJzaW9uIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJsYXN0IiwibGVuIiwic29ydCIsInNwbGljZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImlzUGxhaW5PYmplY3QiLCJyYW5kb20iLCJpc1JlYWR5IiwibXNnIiwibm9vcCIsIkFycmF5IiwiaXNOdW1lcmljIiwicmVhbFN0cmluZ09iaiIsImNvZGUiLCJzY3JpcHQiLCJpbmRpcmVjdCIsImV2YWwiLCJ0cmltIiwidGV4dCIsImhlYWQiLCJzdHJpbmciLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiT2JqZWN0Iiwic2Vjb25kIiwiaW52ZXJ0IiwiY2FsbGJhY2tJbnZlcnNlIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJEYXRlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJTaXp6bGUiLCJzZWVkIiwibSIsIm5pZCIsIm5pZHNlbGVjdCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJycXVpY2tFeHByIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJjb21waWxlckNhY2hlIiwicmJ1Z2d5UVNBIiwicmVzY2FwZSIsInNldEF0dHJpYnV0ZSIsInRva2VuaXplIiwicmlkZW50aWZpZXIiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInJzaWJsaW5nIiwidGVzdENvbnRleHQiLCJxc2FFcnJvciIsInNlbGVjdCIsImNyZWF0ZUNhY2hlIiwiY2FjaGUiLCJrZXlzIiwiRXhwciIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZGl2IiwiYWRkSGFuZGxlIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJhIiwiYiIsImRpZmYiLCJzb3VyY2VJbmRleCIsIk1BWF9ORUdBVElWRSIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJzZXRGaWx0ZXJzIiwidG9rZW5zIiwiYWRkQ29tYmluYXRvciIsIm1hdGNoZXIiLCJjb21iaW5hdG9yIiwiYmFzZSIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsInhtbCIsIm9sZENhY2hlIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibmV3Q2FjaGUiLCJkaXJydW5zIiwidW5pcXVlSUQiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwibXVsdGlwbGVDb250ZXh0cyIsImNvbnRleHRzIiwiY29uZGVuc2UiLCJ1bm1hdGNoZWQiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicHJlRmlsdGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJyZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJvdXRlcm1vc3RDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZmluZCIsImRpcnJ1bnNVbmlxdWUiLCJwb3AiLCJ1bmlxdWVTb3J0IiwiZ2V0VGV4dCIsImlzWE1MIiwiY29tcGlsZSIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsImRvY0VsZW0iLCJyYnVnZ3lNYXRjaGVzIiwiY2xhc3NDYWNoZSIsInRva2VuQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidW5sb2FkSGFuZGxlciIsImVscyIsImhhc0NvbXBhcmUiLCJwYXJlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiYXR0ciIsInNwZWNpZmllZCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIj4iLCIgIiwiKyIsIn4iLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJwc2V1ZG8iLCJpZHgiLCJtYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiZGlzYWJsZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGl2MSIsInVuaXF1ZSIsImlzWE1MRG9jIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwibmV4dCIsInRhcmdldHMiLCJjbG9zZXN0IiwicG9zIiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsInJldmVyc2UiLCJDYWxsYmFja3MiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsImZpcmluZ0luZGV4Iiwib25jZSIsInN0b3BPbkZhbHNlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsInR1cGxlcyIsInRoZW4iLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJub3RpZnkiLCJyZXNvbHZlIiwicmVqZWN0IiwicGlwZSIsInN0YXRlU3RyaW5nIiwid2hlbiIsInN1Ym9yZGluYXRlIiwicHJvZ3Jlc3NWYWx1ZXMiLCJwcm9ncmVzc0NvbnRleHRzIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInVwZGF0ZUZ1bmMiLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJob2xkUmVhZHkiLCJob2xkIiwid2FpdCIsInRyaWdnZXJIYW5kbGVyIiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwicmVnaXN0ZXIiLCJkZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic3RvcmVkIiwiY2FtZWwiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImNhbWVsS2V5IiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwiZWwiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJ0IiwiaGFuZGxlT2JqIiwic3BlY2lhbCIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwiZml4IiwiaGFuZGxlclF1ZXVlIiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwic2VsIiwiaXNOYU4iLCJmaXhIb29rcyIsImtleUhvb2tzIiwib3JpZ2luYWwiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJtb3VzZUhvb2tzIiwiZXZlbnREb2MiLCJwYWdlWCIsImNsaWVudFgiLCJzY3JvbGxMZWZ0IiwiY2xpZW50TGVmdCIsInBhZ2VZIiwiY2xpZW50WSIsInNjcm9sbFRvcCIsImNsaWVudFRvcCIsIm9yaWdpbmFsRXZlbnQiLCJmaXhIb29rIiwiRXZlbnQiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidGltZVN0YW1wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJpbnNlcnQiLCJIVE1MIiwiQk9EWSIsInZpZXciLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwic3dhcCIsIm9sZCIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImNvbnRhaW5lciIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsIm1hcmdpbkxlZnQiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsIm1hcmdpblJpZ2h0IiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInJlbGlhYmxlTWFyZ2luUmlnaHQiLCJtYXJnaW5EaXYiLCJyZGlzcGxheXN3YXAiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImNzc1Byb3BzIiwiZmxvYXQiLCJvcmlnTmFtZSIsImlzRmluaXRlIiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwiZWFzZWQiLCJzdGVwIiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJ0aW1lcklkIiwicnJ1biIsIioiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwicHJvcE5hbWUiLCJhdHRyTmFtZXMiLCJwcm9wRml4IiwiZ2V0dGVyIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwidGFiaW5kZXgiLCJwYXJzZUludCIsImZvciIsImNsYXNzIiwicmNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsImlzU2ltdWxhdGVkIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwiSlNPTiIsInBhcnNlIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyaGFzaCIsInJ0cyIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4Iiwic3RhdHVzIiwibmF0aXZlU3RhdHVzVGV4dCIsImhlYWRlcnMiLCJzdWNjZXNzIiwibW9kaWZpZWQiLCJzdGF0dXNUZXh0IiwidGltZW91dFRpbWVyIiwidHJhbnNwb3J0IiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwiaWZNb2RpZmllZCIsImNhY2hlVVJMIiwiY2FsbGJhY2tDb250ZXh0Iiwic3RhdHVzQ29kZSIsImZpcmVHbG9iYWxzIiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInJlc3BvbnNlSGVhZGVycyIsInVybEFuY2hvciIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsImxuYW1lIiwib3ZlcnJpZGVNaW1lVHlwZSIsImFib3J0IiwiZmluYWxUZXh0IiwibWV0aG9kIiwiY3Jvc3NEb21haW4iLCJob3N0IiwicGFyYW0iLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsInIyMCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJfbG9hZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsInVzaW5nIiwid2luIiwiYm94IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJzaXplIiwiYW5kU2VsZiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwidmFsaWRhdGUiLCJkZWJ1ZyIsImNvbnNvbGUiLCJ3YXJuIiwidmFsaWRhdG9yIiwib25zdWJtaXQiLCJzdWJtaXRIYW5kbGVyIiwic3VibWl0QnV0dG9uIiwiY2FuY2VsU3VibWl0IiwiY3VycmVudEZvcm0iLCJmb3JtIiwicGVuZGluZ1JlcXVlc3QiLCJmb3JtU3VibWl0dGVkIiwiZm9jdXNJbnZhbGlkIiwidmFsaWQiLCJlcnJvckxpc3QiLCJlbGVtZW50IiwicnVsZXMiLCJjb21tYW5kIiwic3RhdGljUnVsZXMiLCJleGlzdGluZ1J1bGVzIiwiZmlsdGVyZWQiLCJub3JtYWxpemVSdWxlIiwibWVzc2FnZXMiLCJub3JtYWxpemVSdWxlcyIsImNsYXNzUnVsZXMiLCJhdHRyaWJ1dGVSdWxlcyIsImRhdGFSdWxlcyIsInJlcXVpcmVkIiwicmVtb3RlIiwiYmxhbmsiLCJmaWxsZWQiLCJ1bmNoZWNrZWQiLCJkZWZhdWx0cyIsImZvcm1hdCIsImVycm9yQ2xhc3MiLCJ2YWxpZENsYXNzIiwiZXJyb3JFbGVtZW50IiwiZm9jdXNDbGVhbnVwIiwiZXJyb3JDb250YWluZXIiLCJlcnJvckxhYmVsQ29udGFpbmVyIiwiaWdub3JlIiwiaWdub3JlVGl0bGUiLCJvbmZvY3VzaW4iLCJsYXN0QWN0aXZlIiwidW5oaWdobGlnaHQiLCJoaWRlVGhlc2UiLCJlcnJvcnNGb3IiLCJvbmZvY3Vzb3V0IiwiY2hlY2thYmxlIiwic3VibWl0dGVkIiwib3B0aW9uYWwiLCJvbmtleXVwIiwiZXhjbHVkZWRLZXlzIiwiZWxlbWVudFZhbHVlIiwibGFzdEVsZW1lbnQiLCJvbmNsaWNrIiwiaGlnaGxpZ2h0IiwiZmluZEJ5TmFtZSIsInNldERlZmF1bHRzIiwiZW1haWwiLCJkYXRlIiwiZGF0ZUlTTyIsIm51bWJlciIsImRpZ2l0cyIsImNyZWRpdGNhcmQiLCJlcXVhbFRvIiwibWF4bGVuZ3RoIiwibWlubGVuZ3RoIiwicmFuZ2VsZW5ndGgiLCJyYW5nZSIsIm1pbiIsImF1dG9DcmVhdGVSYW5nZXMiLCJldmVudFR5cGUiLCJsYWJlbENvbnRhaW5lciIsImVycm9yQ29udGV4dCIsImNvbnRhaW5lcnMiLCJ2YWx1ZUNhY2hlIiwicGVuZGluZyIsImludmFsaWQiLCJpbnZhbGlkSGFuZGxlciIsImNoZWNrRm9ybSIsImVycm9yTWFwIiwic2hvd0Vycm9ycyIsInByZXBhcmVGb3JtIiwiY3VycmVudEVsZW1lbnRzIiwiY2xlYW5FbGVtZW50IiwiY2xlYW4iLCJjaGVja0VsZW1lbnQiLCJ2YWxpZGF0aW9uVGFyZ2V0Rm9yIiwicHJlcGFyZUVsZW1lbnQiLCJudW1iZXJPZkludmFsaWRzIiwidG9IaWRlIiwiZXJyb3JzIiwibWVzc2FnZSIsInN1Y2Nlc3NMaXN0IiwiZGVmYXVsdFNob3dFcnJvcnMiLCJyZXNldEZvcm0iLCJoaWRlRXJyb3JzIiwib2JqZWN0TGVuZ3RoIiwiYWRkV3JhcHBlciIsImZpbmRMYXN0QWN0aXZlIiwicnVsZXNDYWNoZSIsInRvU2hvdyIsIiRlbGVtZW50IiwidmFsaWRpdHkiLCJiYWRJbnB1dCIsInJ1bGUiLCJydWxlc0NvdW50IiwiZGVwZW5kZW5jeU1pc21hdGNoIiwicGFyYW1ldGVycyIsIm1ldGhvZHMiLCJmb3JtYXRBbmRBZGQiLCJsb2ciLCJUeXBlRXJyb3IiLCJjdXN0b21EYXRhTWVzc2FnZSIsImNoYXJBdCIsInN1YnN0cmluZyIsImN1c3RvbU1lc3NhZ2UiLCJmaW5kRGVmaW5lZCIsImRlZmF1bHRNZXNzYWdlIiwidGl0bGUiLCJ0aGVyZWdleCIsInRvVG9nZ2xlIiwid3JhcHBlciIsInNob3dMYWJlbCIsInZhbGlkRWxlbWVudHMiLCJpbnZhbGlkRWxlbWVudHMiLCJwbGFjZSIsImdyb3VwIiwiZXJyb3JJRCIsImVsZW1lbnRJRCIsImlkT3JOYW1lIiwiZGVzY3JpYmVkQnkiLCJlcnJvclBsYWNlbWVudCIsInRlc3Rncm91cCIsImRlc2NyaWJlciIsImdldExlbmd0aCIsImRlcGVuZCIsImRlcGVuZFR5cGVzIiwiYm9vbGVhbiIsImZ1bmN0aW9uIiwic3RhcnRSZXF1ZXN0Iiwic3RvcFJlcXVlc3QiLCJwcmV2aW91c1ZhbHVlIiwiZGVzdHJveSIsImNsYXNzUnVsZVNldHRpbmdzIiwiYWRkQ2xhc3NSdWxlcyIsIm5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGUiLCJOdW1iZXIiLCJkZXBlbmRzIiwia2VlcFJ1bGUiLCJwYXJhbWV0ZXIiLCJ0cmFuc2Zvcm1lZCIsImFkZE1ldGhvZCIsImNEaWdpdCIsIm5DaGVjayIsIm5EaWdpdCIsImJFdmVuIiwicHJldmlvdXMiLCJvcmlnaW5hbE1lc3NhZ2UiLCJtb2RlIiwicG9ydCIsInBlbmRpbmdSZXF1ZXN0cyIsInNldFZhbGlkYXRpb25WYWx1ZXMiLCJydWxlTmFtZSIsInNwbGl0QW5kVHJpbSIsImVzY2FwZUF0dHJpYnV0ZVZhbHVlIiwiZ2V0TW9kZWxQcmVmaXgiLCJmaWVsZE5hbWUiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsImFwcGVuZE1vZGVsUHJlZml4Iiwib25FcnJvciIsImlucHV0RWxlbWVudCIsInJlcGxhY2VBdHRyVmFsdWUiLCJvbkVycm9ycyIsIm9uU3VjY2VzcyIsIm9uUmVzZXQiLCIkZm9ybSIsInZhbGlkYXRpb25JbmZvIiwiZGF0YV92YWxpZGF0aW9uIiwib25SZXNldFByb3h5IiwiZGVmYXVsdE9wdGlvbnMiLCIkalF2YWwiLCJ1bm9idHJ1c2l2ZSIsImV4ZWNJbkNvbnRleHQiLCJhdHRhY2hWYWxpZGF0aW9uIiwiYWRhcHRlcnMiLCJwYXJzZUVsZW1lbnQiLCJza2lwQXR0YWNoIiwidmFsSW5mbyIsInBhcmFtVmFsdWVzIiwiYWRhcHQiLCJfX2R1bW15X18iLCIkc2VsZWN0b3IiLCIkZm9ybXMiLCJpbmZvIiwiYWRhcHRlck5hbWUiLCJhZGRCb29sIiwiYWRkTWluTWF4IiwibWluUnVsZU5hbWUiLCJtYXhSdWxlTmFtZSIsIm1pbk1heFJ1bGVOYW1lIiwibWluQXR0cmlidXRlIiwibWF4QXR0cmlidXRlIiwiYWRkU2luZ2xlVmFsIiwiYXR0cmlidXRlIiwibm9uYWxwaGFtaW4iLCJleHRlbnNpb24iLCJvdGhlciIsImZ1bGxPdGhlck5hbWUiLCJ0YWdOYW1lIiwiYWRkaXRpb25hbGZpZWxkcyIsInBhcmFtTmFtZSIsImZpZWxkIiwicmVnZXgiLCJlcnJvckhhbmRsaW5nQ29uZmlnIiwiY29uZmlnIiwiaXNPYmplY3QiLCJpc0RlZmluZWQiLCJvYmplY3RNYXhEZXB0aCIsIm1pbkVyckNvbmZpZyIsImlzVmFsaWRPYmplY3RNYXhEZXB0aCIsIk5hTiIsIm1heERlcHRoIiwiaXNOdW1iZXIiLCJtaW5FcnIiLCJFcnJvckNvbnN0cnVjdG9yIiwicGFyYW1QcmVmaXgiLCJ0ZW1wbGF0ZSIsInRlbXBsYXRlQXJncyIsInNsaWNlQXJncyIsInRvRGVidWdTdHJpbmciLCJpc1N0cmluZyIsImpxTGl0ZSIsIml0ZW0iLCJmb3JFYWNoIiwiaXNQcmltaXRpdmUiLCJpc0JsYW5rT2JqZWN0IiwiZm9yRWFjaFNvcnRlZCIsInJldmVyc2VQYXJhbXMiLCJpdGVyYXRvckZuIiwibmV4dFVpZCIsInNldEhhc2hLZXkiLCJoIiwiJCRoYXNoS2V5IiwiYmFzZUV4dGVuZCIsImRzdCIsIm9ianMiLCJpaSIsImpqIiwiaXNEYXRlIiwidmFsdWVPZiIsImlzUmVnRXhwIiwiaXNFbGVtZW50IiwidG9JbnQiLCJzdHIiLCJpbmhlcml0IiwiY3JlYXRlIiwiaWRlbnRpdHkiLCJ2YWx1ZUZuIiwiaGFzQ3VzdG9tVG9TdHJpbmciLCJpc1VuZGVmaW5lZCIsImdldFByb3RvdHlwZU9mIiwiaXNFcnJvciIsImlzU2NvcGUiLCIkZXZhbEFzeW5jIiwiJHdhdGNoIiwiaXNGaWxlIiwiaXNGb3JtRGF0YSIsImlzQmxvYiIsImlzQm9vbGVhbiIsImlzUHJvbWlzZUxpa2UiLCJpc1R5cGVkQXJyYXkiLCJUWVBFRF9BUlJBWV9SRUdFWFAiLCJpc0FycmF5QnVmZmVyIiwibWFrZU1hcCIsIml0ZW1zIiwibm9kZU5hbWVfIiwibG93ZXJjYXNlIiwiaW5jbHVkZXMiLCJhcnJheSIsImFycmF5UmVtb3ZlIiwiZGVzdGluYXRpb24iLCJjb3B5UmVjdXJzZSIsImNvcHlFbGVtZW50Iiwic3RhY2tTb3VyY2UiLCJzdGFja0Rlc3QiLCJuZ01pbkVyciIsIm5lZWRzUmVjdXJzZSIsImNvcHlUeXBlIiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImNvcGllZCIsIkFycmF5QnVmZmVyIiwiYnl0ZUxlbmd0aCIsIlVpbnQ4QXJyYXkiLCJyZSIsImxhc3RJbmRleCIsInNpbXBsZUNvbXBhcmUiLCJlcXVhbHMiLCJvMSIsIm8yIiwia2V5U2V0IiwidDEiLCJ0MiIsImdldFRpbWUiLCJjcmVhdGVNYXAiLCJhcnJheTEiLCJhcnJheTIiLCJzdGFydEluZGV4IiwiY3VycnlBcmdzIiwidG9Kc29uUmVwbGFjZXIiLCJ0b0pzb24iLCJwcmV0dHkiLCJzdHJpbmdpZnkiLCJmcm9tSnNvbiIsInRpbWV6b25lVG9PZmZzZXQiLCJ0aW1lem9uZSIsImZhbGxiYWNrIiwiQUxMX0NPTE9OUyIsInJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0IiwiaXNOdW1iZXJOYU4iLCJhZGREYXRlTWludXRlcyIsIm1pbnV0ZXMiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsImNvbnZlcnRUaW1lem9uZVRvTG9jYWwiLCJkYXRlVGltZXpvbmVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsInRpbWV6b25lT2Zmc2V0Iiwic3RhcnRpbmdUYWciLCJlbGVtSHRtbCIsIk5PREVfVFlQRV9URVhUIiwidHJ5RGVjb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VLZXlWYWx1ZSIsImtleVZhbHVlIiwic3BsaXRQb2ludCIsInRvS2V5VmFsdWUiLCJhcnJheVZhbHVlIiwiZW5jb2RlVXJpUXVlcnkiLCJlbmNvZGVVcmlTZWdtZW50IiwicGN0RW5jb2RlU3BhY2VzIiwiZ2V0TmdBdHRyaWJ1dGUiLCJuZ0F0dHIiLCJuZ0F0dHJQcmVmaXhlcyIsImFsbG93QXV0b0Jvb3RzdHJhcCIsImN1cnJlbnRTY3JpcHQiLCJIVE1MU2NyaXB0RWxlbWVudCIsIlNWR1NjcmlwdEVsZW1lbnQiLCJzcmNzIiwiZ2V0TmFtZWRJdGVtIiwiZXZlcnkiLCJsaW5rIiwib3JpZ2luIiwiYW5ndWxhckluaXQiLCJib290c3RyYXAiLCJhcHBFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwiY2FuZGlkYXRlIiwicXVlcnlTZWxlY3RvciIsImlzQXV0b0Jvb3RzdHJhcEFsbG93ZWQiLCJzdHJpY3REaSIsIm1vZHVsZXMiLCJkZWZhdWx0Q29uZmlnIiwiZG9Cb290c3RyYXAiLCJpbmplY3RvciIsIiRwcm92aWRlIiwiZGVidWdJbmZvRW5hYmxlZCIsIiRjb21waWxlUHJvdmlkZXIiLCJjcmVhdGVJbmplY3RvciIsImludm9rZSIsInNjb3BlIiwiJGFwcGx5IiwiTkdfRU5BQkxFX0RFQlVHX0lORk8iLCJOR19ERUZFUl9CT09UU1RSQVAiLCJhbmd1bGFyIiwicmVzdW1lQm9vdHN0cmFwIiwiZXh0cmFNb2R1bGVzIiwicmVzdW1lRGVmZXJyZWRCb290c3RyYXAiLCJyZWxvYWRXaXRoRGVidWdJbmZvIiwicmVsb2FkIiwiZ2V0VGVzdGFiaWxpdHkiLCJyb290RWxlbWVudCIsInNuYWtlX2Nhc2UiLCJzZXBhcmF0b3IiLCJTTkFLRV9DQVNFX1JFR0VYUCIsImJpbmRKUXVlcnkiLCJvcmlnaW5hbENsZWFuRGF0YSIsImJpbmRKUXVlcnlGaXJlZCIsImpxTmFtZSIsImpxIiwiSlFMaXRlUHJvdG90eXBlIiwiaXNvbGF0ZVNjb3BlIiwiY29udHJvbGxlciIsImluaGVyaXRlZERhdGEiLCIkZGVzdHJveSIsIkpRTGl0ZSIsImFzc2VydEFyZyIsInJlYXNvbiIsImFzc2VydEFyZ0ZuIiwiYWNjZXB0QXJyYXlBbm5vdGF0aW9uIiwiYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkiLCJwYXRoIiwiYmluZEZuVG9TY29wZSIsImxhc3RJbnN0YW5jZSIsImdldEJsb2NrTm9kZXMiLCJibG9ja05vZGVzIiwiZW5kTm9kZSIsInNldHVwTW9kdWxlTG9hZGVyIiwiZW5zdXJlIiwiJGluamVjdG9yTWluRXJyIiwiJCRtaW5FcnIiLCJyZXF1aXJlcyIsImNvbmZpZ0ZuIiwiaW52b2tlTGF0ZXIiLCJwcm92aWRlciIsImluc2VydE1ldGhvZCIsImludm9rZVF1ZXVlIiwibW9kdWxlSW5zdGFuY2UiLCJpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUiLCJyZWNpcGVOYW1lIiwiZmFjdG9yeUZ1bmN0aW9uIiwiJCRtb2R1bGVOYW1lIiwiY29uZmlnQmxvY2tzIiwicnVuQmxvY2tzIiwiX2ludm9rZVF1ZXVlIiwiX2NvbmZpZ0Jsb2NrcyIsIl9ydW5CbG9ja3MiLCJzZXJ2aWNlIiwiY29uc3RhbnQiLCJkZWNvcmF0b3IiLCJkaXJlY3RpdmUiLCJjb21wb25lbnQiLCJibG9jayIsInNoYWxsb3dDb3B5Iiwic2VyaWFsaXplT2JqZWN0Iiwic2VlbiIsInB1Ymxpc2hFeHRlcm5hbEFQSSIsInVwcGVyY2FzZSIsImNhbGxiYWNrcyIsIiQkY291bnRlciIsIiQkY3NwIiwiY3NwIiwiJCRlbmNvZGVVcmlTZWdtZW50IiwiJCRlbmNvZGVVcmlRdWVyeSIsIiQkc3RyaW5naWZ5IiwiYW5ndWxhck1vZHVsZSIsIiQkc2FuaXRpemVVcmkiLCIkJFNhbml0aXplVXJpUHJvdmlkZXIiLCIkQ29tcGlsZVByb3ZpZGVyIiwiaHRtbEFuY2hvckRpcmVjdGl2ZSIsImlucHV0RGlyZWN0aXZlIiwidGV4dGFyZWEiLCJmb3JtRGlyZWN0aXZlIiwic2NyaXB0RGlyZWN0aXZlIiwic2VsZWN0RGlyZWN0aXZlIiwib3B0aW9uRGlyZWN0aXZlIiwibmdCaW5kIiwibmdCaW5kRGlyZWN0aXZlIiwibmdCaW5kSHRtbCIsIm5nQmluZEh0bWxEaXJlY3RpdmUiLCJuZ0JpbmRUZW1wbGF0ZSIsIm5nQmluZFRlbXBsYXRlRGlyZWN0aXZlIiwibmdDbGFzcyIsIm5nQ2xhc3NEaXJlY3RpdmUiLCJuZ0NsYXNzRXZlbiIsIm5nQ2xhc3NFdmVuRGlyZWN0aXZlIiwibmdDbGFzc09kZCIsIm5nQ2xhc3NPZGREaXJlY3RpdmUiLCJuZ0Nsb2FrIiwibmdDbG9ha0RpcmVjdGl2ZSIsIm5nQ29udHJvbGxlciIsIm5nQ29udHJvbGxlckRpcmVjdGl2ZSIsIm5nRm9ybSIsIm5nRm9ybURpcmVjdGl2ZSIsIm5nSGlkZSIsIm5nSGlkZURpcmVjdGl2ZSIsIm5nSWYiLCJuZ0lmRGlyZWN0aXZlIiwibmdJbmNsdWRlIiwibmdJbmNsdWRlRGlyZWN0aXZlIiwibmdJbml0IiwibmdJbml0RGlyZWN0aXZlIiwibmdOb25CaW5kYWJsZSIsIm5nTm9uQmluZGFibGVEaXJlY3RpdmUiLCJuZ1BsdXJhbGl6ZSIsIm5nUGx1cmFsaXplRGlyZWN0aXZlIiwibmdSZXBlYXQiLCJuZ1JlcGVhdERpcmVjdGl2ZSIsIm5nU2hvdyIsIm5nU2hvd0RpcmVjdGl2ZSIsIm5nU3R5bGUiLCJuZ1N0eWxlRGlyZWN0aXZlIiwibmdTd2l0Y2giLCJuZ1N3aXRjaERpcmVjdGl2ZSIsIm5nU3dpdGNoV2hlbiIsIm5nU3dpdGNoV2hlbkRpcmVjdGl2ZSIsIm5nU3dpdGNoRGVmYXVsdCIsIm5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSIsIm5nT3B0aW9ucyIsIm5nT3B0aW9uc0RpcmVjdGl2ZSIsIm5nVHJhbnNjbHVkZSIsIm5nVHJhbnNjbHVkZURpcmVjdGl2ZSIsIm5nTW9kZWwiLCJuZ01vZGVsRGlyZWN0aXZlIiwibmdMaXN0IiwibmdMaXN0RGlyZWN0aXZlIiwibmdDaGFuZ2UiLCJuZ0NoYW5nZURpcmVjdGl2ZSIsInBhdHRlcm5EaXJlY3RpdmUiLCJuZ1BhdHRlcm4iLCJyZXF1aXJlZERpcmVjdGl2ZSIsIm5nUmVxdWlyZWQiLCJtaW5sZW5ndGhEaXJlY3RpdmUiLCJuZ01pbmxlbmd0aCIsIm1heGxlbmd0aERpcmVjdGl2ZSIsIm5nTWF4bGVuZ3RoIiwibmdWYWx1ZSIsIm5nVmFsdWVEaXJlY3RpdmUiLCJuZ01vZGVsT3B0aW9ucyIsIm5nTW9kZWxPcHRpb25zRGlyZWN0aXZlIiwibmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUiLCJuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyIsIm5nRXZlbnREaXJlY3RpdmVzIiwiJGFuY2hvclNjcm9sbCIsIiRBbmNob3JTY3JvbGxQcm92aWRlciIsIiRhbmltYXRlIiwiJEFuaW1hdGVQcm92aWRlciIsIiRhbmltYXRlQ3NzIiwiJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIiLCIkJGFuaW1hdGVKcyIsIiQkQ29yZUFuaW1hdGVKc1Byb3ZpZGVyIiwiJCRhbmltYXRlUXVldWUiLCIkJENvcmVBbmltYXRlUXVldWVQcm92aWRlciIsIiQkQW5pbWF0ZVJ1bm5lciIsIiQkQW5pbWF0ZVJ1bm5lckZhY3RvcnlQcm92aWRlciIsIiQkYW5pbWF0ZUFzeW5jUnVuIiwiJCRBbmltYXRlQXN5bmNSdW5GYWN0b3J5UHJvdmlkZXIiLCIkYnJvd3NlciIsIiRCcm93c2VyUHJvdmlkZXIiLCIkY2FjaGVGYWN0b3J5IiwiJENhY2hlRmFjdG9yeVByb3ZpZGVyIiwiJGNvbnRyb2xsZXIiLCIkQ29udHJvbGxlclByb3ZpZGVyIiwiJGRvY3VtZW50IiwiJERvY3VtZW50UHJvdmlkZXIiLCIkJGlzRG9jdW1lbnRIaWRkZW4iLCIkJElzRG9jdW1lbnRIaWRkZW5Qcm92aWRlciIsIiRleGNlcHRpb25IYW5kbGVyIiwiJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlciIsIiRmaWx0ZXIiLCIkRmlsdGVyUHJvdmlkZXIiLCIkJGZvcmNlUmVmbG93IiwiJCRGb3JjZVJlZmxvd1Byb3ZpZGVyIiwiJGludGVycG9sYXRlIiwiJEludGVycG9sYXRlUHJvdmlkZXIiLCIkaW50ZXJ2YWwiLCIkSW50ZXJ2YWxQcm92aWRlciIsIiRodHRwIiwiJEh0dHBQcm92aWRlciIsIiRodHRwUGFyYW1TZXJpYWxpemVyIiwiJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlciIsIiRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlIiwiJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlciIsIiRodHRwQmFja2VuZCIsIiRIdHRwQmFja2VuZFByb3ZpZGVyIiwiJHhockZhY3RvcnkiLCIkeGhyRmFjdG9yeVByb3ZpZGVyIiwiJGpzb25wQ2FsbGJhY2tzIiwiJGpzb25wQ2FsbGJhY2tzUHJvdmlkZXIiLCIkbG9jYXRpb24iLCIkTG9jYXRpb25Qcm92aWRlciIsIiRsb2ciLCIkTG9nUHJvdmlkZXIiLCIkcGFyc2UiLCIkUGFyc2VQcm92aWRlciIsIiRyb290U2NvcGUiLCIkUm9vdFNjb3BlUHJvdmlkZXIiLCIkcSIsIiRRUHJvdmlkZXIiLCIkJHEiLCIkJFFQcm92aWRlciIsIiRzY2UiLCIkU2NlUHJvdmlkZXIiLCIkc2NlRGVsZWdhdGUiLCIkU2NlRGVsZWdhdGVQcm92aWRlciIsIiRzbmlmZmVyIiwiJFNuaWZmZXJQcm92aWRlciIsIiR0ZW1wbGF0ZUNhY2hlIiwiJFRlbXBsYXRlQ2FjaGVQcm92aWRlciIsIiR0ZW1wbGF0ZVJlcXVlc3QiLCIkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIiLCIkJHRlc3RhYmlsaXR5IiwiJCRUZXN0YWJpbGl0eVByb3ZpZGVyIiwiJHRpbWVvdXQiLCIkVGltZW91dFByb3ZpZGVyIiwiJHdpbmRvdyIsIiRXaW5kb3dQcm92aWRlciIsIiQkckFGIiwiJCRSQUZQcm92aWRlciIsIiQkanFMaXRlIiwiJCRqcUxpdGVQcm92aWRlciIsIiQkTWFwIiwiJCRNYXBQcm92aWRlciIsIiQkY29va2llUmVhZGVyIiwiJCRDb29raWVSZWFkZXJQcm92aWRlciIsImFuZ3VsYXJWZXJzaW9uIiwianFOZXh0SWQiLCJqcUlkIiwiY3NzS2ViYWJUb0NhbWVsIiwia2ViYWJUb0NhbWVsIiwiTVNfSEFDS19SRUdFWFAiLCJmbkNhbWVsQ2FzZVJlcGxhY2UiLCJEQVNIX0xPV0VSQ0FTRV9SRUdFWFAiLCJqcUxpdGVJc1RleHROb2RlIiwiSFRNTF9SRUdFWFAiLCJqcUxpdGVBY2NlcHRzRGF0YSIsIk5PREVfVFlQRV9FTEVNRU5UIiwiTk9ERV9UWVBFX0RPQ1VNRU5UIiwianFMaXRlSGFzRGF0YSIsImpxQ2FjaGUiLCJuZzMzOSIsImpxTGl0ZUJ1aWxkRnJhZ21lbnQiLCJUQUdfTkFNRV9SRUdFWFAiLCJYSFRNTF9UQUdfUkVHRVhQIiwianFMaXRlUGFyc2VIVE1MIiwiU0lOR0xFX1RBR19SRUdFWFAiLCJqcUxpdGVXcmFwTm9kZSIsImFyZ0lzU3RyaW5nIiwianFMaXRlTWluRXJyIiwianFMaXRlQWRkTm9kZXMiLCJqcUxpdGVSZWFkeSIsImpxTGl0ZUNsb25lIiwianFMaXRlRGVhbG9jIiwib25seURlc2NlbmRhbnRzIiwianFMaXRlT2ZmIiwidW5zdXBwb3J0ZWQiLCJleHBhbmRvU3RvcmUiLCJqcUxpdGVFeHBhbmRvU3RvcmUiLCJyZW1vdmVIYW5kbGVyIiwibGlzdGVuZXJGbnMiLCJNT1VTRV9FVkVOVF9NQVAiLCJqcUxpdGVSZW1vdmVEYXRhIiwiZXhwYW5kb0lkIiwiY3JlYXRlSWZOZWNlc3NhcnkiLCJqcUxpdGVEYXRhIiwiaXNTaW1wbGVTZXR0ZXIiLCJpc1NpbXBsZUdldHRlciIsIm1hc3NHZXR0ZXIiLCJqcUxpdGVIYXNDbGFzcyIsImpxTGl0ZVJlbW92ZUNsYXNzIiwiY3NzQ2xhc3NlcyIsImNzc0NsYXNzIiwianFMaXRlQWRkQ2xhc3MiLCJleGlzdGluZ0NsYXNzZXMiLCJqcUxpdGVDb250cm9sbGVyIiwianFMaXRlSW5oZXJpdGVkRGF0YSIsIm5hbWVzIiwiTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UIiwianFMaXRlRW1wdHkiLCJqcUxpdGVSZW1vdmUiLCJqcUxpdGVEb2N1bWVudExvYWRlZCIsImFjdGlvbiIsImdldEJvb2xlYW5BdHRyTmFtZSIsImJvb2xlYW5BdHRyIiwiQk9PTEVBTl9BVFRSIiwiQk9PTEVBTl9FTEVNRU5UUyIsImdldEFsaWFzZWRBdHRyTmFtZSIsIkFMSUFTRURfQVRUUiIsImNyZWF0ZUV2ZW50SGFuZGxlciIsImV2ZW50SGFuZGxlciIsImV2ZW50Rm5zIiwiZXZlbnRGbnNMZW5ndGgiLCJpbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImhhbmRsZXJXcmFwcGVyIiwic3BlY2lhbEhhbmRsZXJXcmFwcGVyIiwiZGVmYXVsdEhhbmRsZXJXcmFwcGVyIiwic3BlY2lhbE1vdXNlSGFuZGxlcldyYXBwZXIiLCJqcUxpdGVDb250YWlucyIsIiRnZXQiLCJoYXNoS2V5IiwibmV4dFVpZEZuIiwib2JqVHlwZSIsIk5nTWFwU2hpbSIsIl9rZXlzIiwiX3ZhbHVlcyIsIl9sYXN0S2V5IiwiX2xhc3RJbmRleCIsInN0cmluZ2lmeUZuIiwiRnVuY3Rpb24iLCJleHRyYWN0QXJncyIsImZuVGV4dCIsIlNUUklQX0NPTU1FTlRTIiwiQVJST1dfQVJHIiwiRk5fQVJHUyIsImFub25GbiIsImFubm90YXRlIiwiJGluamVjdCIsImFyZ0RlY2wiLCJGTl9BUkdfU1BMSVQiLCJGTl9BUkciLCJ1bmRlcnNjb3JlIiwibW9kdWxlc1RvTG9hZCIsInN1cHBvcnRPYmplY3QiLCJwcm92aWRlcl8iLCJwcm92aWRlckluamVjdG9yIiwiaW5zdGFudGlhdGUiLCJwcm92aWRlckNhY2hlIiwicHJvdmlkZXJTdWZmaXgiLCJlbmZvcmNlUmV0dXJuVmFsdWUiLCJpbnN0YW5jZUluamVjdG9yIiwiZmFjdG9yeUZuIiwiZW5mb3JjZSIsIiRpbmplY3RvciIsImluc3RhbmNlQ2FjaGUiLCJzZXJ2aWNlTmFtZSIsImRlY29yRm4iLCJvcmlnUHJvdmlkZXIiLCJvcmlnJGdldCIsIm9yaWdJbnN0YW5jZSIsIiRkZWxlZ2F0ZSIsImxvYWRNb2R1bGVzIiwibW9kdWxlRm4iLCJydW5JbnZva2VRdWV1ZSIsImludm9rZUFyZ3MiLCJsb2FkZWRNb2R1bGVzIiwic3RhY2siLCJjcmVhdGVJbnRlcm5hbEluamVjdG9yIiwiZ2V0U2VydmljZSIsImNhbGxlciIsIklOU1RBTlRJQVRJTkciLCJpbmplY3Rpb25BcmdzIiwibG9jYWxzIiwiJCRhbm5vdGF0ZSIsImlzQ2xhc3MiLCJtc2llIiwiJCRuZ0lzQ2xhc3MiLCJUeXBlIiwiY3RvciIsIk5nTWFwIiwicHJvdG9JbnN0YW5jZUluamVjdG9yIiwiYXV0b1Njcm9sbGluZ0VuYWJsZWQiLCJkaXNhYmxlQXV0b1Njcm9sbGluZyIsImdldEZpcnN0QW5jaG9yIiwic29tZSIsImdldFlPZmZzZXQiLCJzY3JvbGwiLCJ5T2Zmc2V0IiwiYm90dG9tIiwic2Nyb2xsSW50b1ZpZXciLCJlbGVtVG9wIiwic2Nyb2xsQnkiLCJlbG0iLCJuZXdWYWwiLCJvbGRWYWwiLCJtZXJnZUNsYXNzZXMiLCJleHRyYWN0RWxlbWVudE5vZGUiLCJFTEVNRU5UX05PREUiLCJzcGxpdENsYXNzZXMiLCJrbGFzcyIsInByZXBhcmVBbmltYXRlT3B0aW9ucyIsIkJyb3dzZXIiLCJjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCIsIm91dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwib3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzIiwiZ2V0SGFzaCIsImNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlIiwicGVuZGluZ0xvY2F0aW9uIiwiZmlyZVN0YXRlT3JVcmxDaGFuZ2UiLCJjYWNoZVN0YXRlIiwiY2FjaGVkU3RhdGUiLCJnZXRDdXJyZW50U3RhdGUiLCJsYXN0Q2FjaGVkU3RhdGUiLCJsYXN0SGlzdG9yeVN0YXRlIiwicHJldkxhc3RIaXN0b3J5U3RhdGUiLCJsYXN0QnJvd3NlclVybCIsInVybENoYW5nZUxpc3RlbmVycyIsImxpc3RlbmVyIiwiaGlzdG9yeSIsInBlbmRpbmdEZWZlcklkcyIsImlzTW9jayIsIiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QiLCIkJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwibm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyIsImJhc2VFbGVtZW50Iiwic2FtZVN0YXRlIiwic2FtZUJhc2UiLCJzdHJpcEhhc2giLCJ1cmxDaGFuZ2VJbml0Iiwib25VcmxDaGFuZ2UiLCIkJGFwcGxpY2F0aW9uRGVzdHJveWVkIiwiJCRjaGVja1VybENoYW5nZSIsImJhc2VIcmVmIiwidGltZW91dElkIiwiY2FuY2VsIiwiZGVmZXJJZCIsImNhY2hlRmFjdG9yeSIsImNhY2hlSWQiLCJyZWZyZXNoIiwiZW50cnkiLCJmcmVzaEVuZCIsInN0YWxlRW5kIiwibmV4dEVudHJ5IiwicHJldkVudHJ5IiwiY2FjaGVzIiwic3RhdHMiLCJjYXBhY2l0eSIsIk1BWF9WQUxVRSIsImxydUhhc2giLCJwdXQiLCJscnVFbnRyeSIsInJlbW92ZUFsbCIsIlVOSU5JVElBTElaRURfVkFMVUUiLCIkJHNhbml0aXplVXJpUHJvdmlkZXIiLCJwYXJzZUlzb2xhdGVCaW5kaW5ncyIsImRpcmVjdGl2ZU5hbWUiLCJpc0NvbnRyb2xsZXIiLCJMT0NBTF9SRUdFWFAiLCJiaW5kaW5ncyIsImRlZmluaXRpb24iLCJzY29wZU5hbWUiLCJiaW5kaW5nQ2FjaGUiLCIkY29tcGlsZU1pbkVyciIsImF0dHJOYW1lIiwicGFyc2VEaXJlY3RpdmVCaW5kaW5ncyIsImJpbmRUb0NvbnRyb2xsZXIiLCJhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUiLCJnZXREaXJlY3RpdmVSZXF1aXJlIiwicmVxdWlyZSIsIlJFUVVJUkVfUFJFRklYX1JFR0VYUCIsImdldERpcmVjdGl2ZVJlc3RyaWN0IiwicmVzdHJpY3QiLCJoYXNEaXJlY3RpdmVzIiwiU3VmZml4IiwiQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQIiwiQ0xBU1NfRElSRUNUSVZFX1JFR0VYUCIsIkFMTF9PUl9OT1RISU5HX0FUVFJTIiwiRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUCIsInJlZ2lzdGVyRGlyZWN0aXZlIiwiZGlyZWN0aXZlRmFjdG9yeSIsImRpcmVjdGl2ZXMiLCJwcmlvcml0eSIsInJlZ2lzdGVyQ29tcG9uZW50IiwibWFrZUluamVjdGFibGUiLCJ0RWxlbWVudCIsInRBdHRycyIsIiRhdHRycyIsInRlbXBsYXRlVXJsIiwiZGRvIiwiY29udHJvbGxlckFzIiwiaWRlbnRpZmllckZvckNvbnRyb2xsZXIiLCJ0cmFuc2NsdWRlIiwiYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QiLCJyZWdleHAiLCJpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QiLCJwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQiLCJzdHJpY3RDb21wb25lbnRCaW5kaW5nc0VuYWJsZWQiLCJUVEwiLCJvbkNoYW5nZXNUdGwiLCJjb21tZW50RGlyZWN0aXZlc0VuYWJsZWRDb25maWciLCJjb21tZW50RGlyZWN0aXZlc0VuYWJsZWQiLCJjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkQ29uZmlnIiwiY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZCIsImZsdXNoT25DaGFuZ2VzUXVldWUiLCJvbkNoYW5nZXNRdWV1ZSIsIkF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzVG9Db3B5IiwiJGF0dHIiLCIkJGVsZW1lbnQiLCJzZXRTcGVjaWFsQXR0ciIsInNwZWNpYWxBdHRySG9sZGVyIiwicmVtb3ZlTmFtZWRJdGVtIiwic2V0TmFtZWRJdGVtIiwic2FmZUFkZENsYXNzIiwiJGNvbXBpbGVOb2RlcyIsInRyYW5zY2x1ZGVGbiIsIm1heFByaW9yaXR5IiwiaWdub3JlRGlyZWN0aXZlIiwicHJldmlvdXNDb21waWxlQ29udGV4dCIsImNvbXBvc2l0ZUxpbmtGbiIsImNvbXBpbGVOb2RlcyIsIiQkYWRkU2NvcGVDbGFzcyIsImNsb25lQ29ubmVjdEZuIiwibmVlZHNOZXdTY29wZSIsIiRwYXJlbnQiLCIkbmV3IiwicGFyZW50Qm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlQ29udHJvbGxlcnMiLCJmdXR1cmVQYXJlbnRFbGVtZW50IiwiJCRib3VuZFRyYW5zY2x1ZGUiLCJkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzIiwiJGxpbmtOb2RlIiwid3JhcFRlbXBsYXRlIiwiY29udHJvbGxlck5hbWUiLCJpbnN0YW5jZSIsIiQkYWRkU2NvcGVJbmZvIiwicGFyZW50RWxlbWVudCIsIm5vZGVMaXN0IiwiJHJvb3RFbGVtZW50Iiwibm9kZUxpbmtGbiIsImNoaWxkTGlua0ZuIiwiY2hpbGRTY29wZSIsImNoaWxkQm91bmRUcmFuc2NsdWRlRm4iLCJzdGFibGVOb2RlTGlzdCIsIm5vZGVMaW5rRm5Gb3VuZCIsIm5vZGVMaXN0TGVuZ3RoIiwibGlua0ZucyIsInRyYW5zY2x1ZGVPblRoaXNFbGVtZW50IiwiY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4iLCJ0ZW1wbGF0ZU9uVGhpc0VsZW1lbnQiLCJsaW5rRm5Gb3VuZCIsIm5vdExpdmVMaXN0IiwibWVyZ2VDb25zZWN1dGl2ZVRleHROb2RlcyIsImNvbGxlY3REaXJlY3RpdmVzIiwiYXBwbHlEaXJlY3RpdmVzVG9Ob2RlIiwidGVybWluYWwiLCJwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuIiwiYm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlZFNjb3BlIiwiY2xvbmVGbiIsImNvbnRyb2xsZXJzIiwiY29udGFpbmluZ1Njb3BlIiwiJCR0cmFuc2NsdWRlZCIsImJvdW5kU2xvdHMiLCIkJHNsb3RzIiwic2xvdE5hbWUiLCJhdHRyc01hcCIsImFkZERpcmVjdGl2ZSIsImRpcmVjdGl2ZU5vcm1hbGl6ZSIsIm5OYW1lIiwibmdBdHRyTmFtZSIsImlzTmdBdHRyIiwibkF0dHJzIiwiYXR0clN0YXJ0TmFtZSIsImF0dHJFbmROYW1lIiwiTkdfQVRUUl9CSU5ESU5HIiwiUFJFRklYX1JFR0VYUCIsIm11bHRpRWxlbWVudE1hdGNoIiwiTVVMVElfRUxFTUVOVF9ESVJfUkUiLCJkaXJlY3RpdmVJc011bHRpRWxlbWVudCIsImFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZSIsImFuaW1WYWwiLCJhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUiLCJOT0RFX1RZUEVfQ09NTUVOVCIsImNvbGxlY3RDb21tZW50RGlyZWN0aXZlcyIsImJ5UHJpb3JpdHkiLCJncm91cFNjYW4iLCJhdHRyU3RhcnQiLCJhdHRyRW5kIiwiZGVwdGgiLCJncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlciIsImxpbmtGbiIsImNvbXBpbGF0aW9uR2VuZXJhdG9yIiwiZWFnZXIiLCJjb21waWxlTm9kZSIsInRlbXBsYXRlQXR0cnMiLCJqcUNvbGxlY3Rpb24iLCJvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUiLCJwcmVMaW5rRm5zIiwicG9zdExpbmtGbnMiLCJhZGRMaW5rRm5zIiwicHJlIiwicG9zdCIsIm5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSIsIiQkaXNvbGF0ZVNjb3BlIiwiY2xvbmVBbmRBbm5vdGF0ZUZuIiwibGlua05vZGUiLCJjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZSIsImNsb25lQXR0YWNoRm4iLCJoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSIsImVsZW1lbnRDb250cm9sbGVycyIsInNjb3BlVG9DaGlsZCIsInNsb3RUcmFuc2NsdWRlRm4iLCJjb250cm9sbGVyU2NvcGUiLCJzY29wZUJpbmRpbmdJbmZvIiwibmV3U2NvcGVEaXJlY3RpdmUiLCJpc1Nsb3RGaWxsZWQiLCJjb250cm9sbGVyRGlyZWN0aXZlcyIsInNldHVwQ29udHJvbGxlcnMiLCJ0ZW1wbGF0ZURpcmVjdGl2ZSIsIiQkb3JpZ2luYWxEaXJlY3RpdmUiLCIkJGlzb2xhdGVCaW5kaW5ncyIsImluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyIsInJlbW92ZVdhdGNoZXMiLCIkb24iLCJjb250cm9sbGVyRGlyZWN0aXZlIiwiJCRiaW5kaW5ncyIsImJpbmRpbmdJbmZvIiwiY29udHJvbGxlclJlc3VsdCIsImdldENvbnRyb2xsZXJzIiwiY29udHJvbGxlckluc3RhbmNlIiwiJG9uQ2hhbmdlcyIsImluaXRpYWxDaGFuZ2VzIiwiJG9uSW5pdCIsIiRkb0NoZWNrIiwiJG9uRGVzdHJveSIsImludm9rZUxpbmtGbiIsIiRwb3N0TGluayIsIiR0ZW1wbGF0ZSIsImRpcmVjdGl2ZVZhbHVlIiwidGVybWluYWxQcmlvcml0eSIsIm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUiLCJoYXNUcmFuc2NsdWRlRGlyZWN0aXZlIiwiaGFzVGVtcGxhdGUiLCIkY29tcGlsZU5vZGUiLCJyZXBsYWNlRGlyZWN0aXZlIiwiY2hpbGRUcmFuc2NsdWRlRm4iLCJkaWRTY2FuRm9yTXVsdGlwbGVUcmFuc2NsdXNpb24iLCJtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yIiwiJCRzdGFydCIsIiQkZW5kIiwiYXNzZXJ0Tm9EdXBsaWNhdGUiLCIkJHRsYiIsImNhbmRpZGF0ZURpcmVjdGl2ZSIsInNjYW5uaW5nSW5kZXgiLCIkJGNyZWF0ZUNvbW1lbnQiLCIkJHBhcmVudE5vZGUiLCJzbG90cyIsInNsb3RNYXAiLCJmaWxsZWRTbG90cyIsImVsZW1lbnRTZWxlY3RvciIsIiQkbmV3U2NvcGUiLCJkZW5vcm1hbGl6ZVRlbXBsYXRlIiwicmVtb3ZlQ29tbWVudHMiLCJ0ZW1wbGF0ZU5hbWVzcGFjZSIsIm5ld1RlbXBsYXRlQXR0cnMiLCJ0ZW1wbGF0ZURpcmVjdGl2ZXMiLCJ1bnByb2Nlc3NlZERpcmVjdGl2ZXMiLCJtYXJrRGlyZWN0aXZlU2NvcGUiLCJtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyIsImNvbXBpbGVUZW1wbGF0ZVVybCIsImluaGVyaXRUeXBlIiwiZGF0YU5hbWUiLCJwcm9wZXJ0eSIsImNvbnRyb2xsZXJLZXkiLCIkc2NvcGUiLCIkdHJhbnNjbHVkZSIsIm5ld1Njb3BlIiwidERpcmVjdGl2ZXMiLCJzdGFydEF0dHJOYW1lIiwiZW5kQXR0ck5hbWUiLCJtdWx0aUVsZW1lbnQiLCJzcmNBdHRyIiwiZHN0QXR0ciIsIiRzZXQiLCJhZnRlclRlbXBsYXRlTm9kZUxpbmtGbiIsImFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiIsImxpbmtRdWV1ZSIsImJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUiLCJvcmlnQXN5bmNEaXJlY3RpdmUiLCJkZXJpdmVkU3luY0RpcmVjdGl2ZSIsInRlbXBUZW1wbGF0ZUF0dHJzIiwiYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSIsImxpbmtSb290RWxlbWVudCIsIiQkZGVzdHJveWVkIiwib2xkQ2xhc3NlcyIsImlnbm9yZUNoaWxkTGlua0ZuIiwicHJldmlvdXNEaXJlY3RpdmUiLCJ3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZCIsIm1vZHVsZU5hbWUiLCJpbnRlcnBvbGF0ZUZuIiwidGVtcGxhdGVOb2RlIiwidGVtcGxhdGVOb2RlUGFyZW50IiwiaGFzQ29tcGlsZVBhcmVudCIsIiQkYWRkQmluZGluZ0NsYXNzIiwiJCRhZGRCaW5kaW5nSW5mbyIsImV4cHJlc3Npb25zIiwiZ2V0VHJ1c3RlZENvbnRleHQiLCJhdHRyTm9ybWFsaXplZE5hbWUiLCJSRVNPVVJDRV9VUkwiLCJ0cnVzdGVkQ29udGV4dCIsIm11c3RIYXZlRXhwcmVzc2lvbiIsImFsbE9yTm90aGluZyIsIiQkb2JzZXJ2ZXJzIiwibmV3VmFsdWUiLCIkJGludGVyIiwiJCRzY29wZSIsIm9sZFZhbHVlIiwiJHVwZGF0ZUNsYXNzIiwiZWxlbWVudHNUb1JlbW92ZSIsIm5ld05vZGUiLCJmaXJzdEVsZW1lbnRUb1JlbW92ZSIsInJlbW92ZUNvdW50IiwiajIiLCJhbm5vdGF0aW9uIiwic3RyaWN0QmluZGluZ3NDaGVjayIsInJlY29yZENoYW5nZXMiLCIkJHBvc3REaWdlc3QiLCJjaGFuZ2VzIiwidHJpZ2dlck9uQ2hhbmdlc0hvb2siLCJTaW1wbGVDaGFuZ2UiLCJyZW1vdmVXYXRjaENvbGxlY3Rpb24iLCJsYXN0VmFsdWUiLCJwYXJlbnRHZXQiLCJwYXJlbnRTZXQiLCJyZW1vdmVXYXRjaCIsIiRvYnNlcnZlIiwiX1VOSU5JVElBTElaRURfVkFMVUUiLCJsaXRlcmFsIiwiYXNzaWduIiwicGFyZW50VmFsdWVXYXRjaCIsInBhcmVudFZhbHVlIiwiJHN0YXRlZnVsIiwiJHdhdGNoQ29sbGVjdGlvbiIsImRlZXBXYXRjaCIsImluaXRpYWxWYWx1ZSIsIlNJTVBMRV9BVFRSX05BTUUiLCIkbm9ybWFsaXplIiwiJGFkZENsYXNzIiwiY2xhc3NWYWwiLCIkcmVtb3ZlQ2xhc3MiLCJuZXdDbGFzc2VzIiwidG9BZGQiLCJ0b2tlbkRpZmZlcmVuY2UiLCJ0b1JlbW92ZSIsIndyaXRlQXR0ciIsImJvb2xlYW5LZXkiLCJhbGlhc2VkS2V5Iiwib2JzZXJ2ZXIiLCJ0cmltbWVkU3Jjc2V0Iiwic3JjUGF0dGVybiIsInJhd1VyaXMiLCJuYnJVcmlzV2l0aDJwYXJ0cyIsImZsb29yIiwiaW5uZXJJZHgiLCJsYXN0VHVwbGUiLCJsaXN0ZW5lcnMiLCJzdGFydFN5bWJvbCIsImVuZFN5bWJvbCIsImJpbmRpbmciLCJpc29sYXRlZCIsIm5vVGVtcGxhdGUiLCJjb21tZW50IiwiU1BFQ0lBTF9DSEFSU19SRUdFWFAiLCJzdHIxIiwic3RyMiIsInRva2VuczEiLCJ0b2tlbnMyIiwib3V0ZXIiLCJqcU5vZGVzIiwiaWRlbnQiLCJDTlRSTF9SRUciLCJnbG9iYWxzIiwiYWxsb3dHbG9iYWxzIiwiYWRkSWRlbnRpZmllciIsImV4cHJlc3Npb24iLCJsYXRlciIsIiRjb250cm9sbGVyTWluRXJyIiwiY29udHJvbGxlclByb3RvdHlwZSIsImNoYW5nZUxpc3RlbmVyIiwiZXhjZXB0aW9uIiwiY2F1c2UiLCJzZXJpYWxpemVWYWx1ZSIsInRvSVNPU3RyaW5nIiwidG9TZXJpYWxpemUiLCJ0b3BMZXZlbCIsImRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0iLCJ0ZW1wRGF0YSIsIkpTT05fUFJPVEVDVElPTl9QUkVGSVgiLCJoYXNKc29uQ29udGVudFR5cGUiLCJBUFBMSUNBVElPTl9KU09OIiwiaXNKc29uTGlrZSIsIiRodHRwTWluRXJyIiwianNvblN0YXJ0IiwiSlNPTl9TVEFSVCIsIkpTT05fRU5EUyIsInBhcnNlSGVhZGVycyIsImZpbGxJblBhcnNlZCIsImxpbmUiLCJoZWFkZXJWYWwiLCJoZWFkZXJLZXkiLCJoZWFkZXJzR2V0dGVyIiwiaGVhZGVyc09iaiIsInRyYW5zZm9ybURhdGEiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInRyYW5zZm9ybVJlcXVlc3QiLCJkIiwiY29tbW9uIiwiQWNjZXB0IiwiQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04iLCJwYXRjaCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJwYXJhbVNlcmlhbGl6ZXIiLCJqc29ucENhbGxiYWNrUGFyYW0iLCJ1c2VBcHBseUFzeW5jIiwiaW50ZXJjZXB0b3JGYWN0b3JpZXMiLCJpbnRlcmNlcHRvcnMiLCJyZXF1ZXN0Q29uZmlnIiwiY2hhaW5JbnRlcmNlcHRvcnMiLCJ0aGVuRm4iLCJyZWplY3RGbiIsImV4ZWN1dGVIZWFkZXJGbnMiLCJoZWFkZXJDb250ZW50IiwicHJvY2Vzc2VkSGVhZGVycyIsImhlYWRlckZuIiwibWVyZ2VIZWFkZXJzIiwiZGVmSGVhZGVyTmFtZSIsImxvd2VyY2FzZURlZkhlYWRlck5hbWUiLCJyZXFIZWFkZXJOYW1lIiwiZGVmSGVhZGVycyIsInJlcUhlYWRlcnMiLCJkZWZhdWx0SGVhZGVyc0l0ZXJhdGlvbiIsInNlcnZlclJlcXVlc3QiLCJyZXFEYXRhIiwid2l0aENyZWRlbnRpYWxzIiwic2VuZFJlcSIsInJlc3AiLCJyZXF1ZXN0SW50ZXJjZXB0b3JzIiwicmVzcG9uc2VJbnRlcmNlcHRvcnMiLCJyZXZlcnNlZEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicmVxdWVzdCIsInJlcXVlc3RFcnJvciIsInJlc3BvbnNlRXJyb3IiLCJjcmVhdGVTaG9ydE1ldGhvZHMiLCJjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YSIsImNyZWF0ZUFwcGx5SGFuZGxlcnMiLCJldmVudEhhbmRsZXJzIiwiYXBwbHlIYW5kbGVycyIsImNhbGxFdmVudEhhbmRsZXIiLCIkYXBwbHlBc3luYyIsIiQkcGhhc2UiLCJoZWFkZXJzU3RyaW5nIiwieGhyU3RhdHVzIiwicmVzb2x2ZUh0dHBQcm9taXNlIiwicmVzb2x2ZVByb21pc2UiLCJyZXNvbHZlUHJvbWlzZVdpdGhSZXN1bHQiLCJyZW1vdmVQZW5kaW5nUmVxIiwiY2FjaGVkUmVzcCIsImlzSnNvbnAiLCJnZXRUcnVzdGVkUmVzb3VyY2VVcmwiLCJidWlsZFVybCIsInNhbml0aXplSnNvbnBDYWxsYmFja1BhcmFtIiwiZGVmYXVsdENhY2hlIiwieHNyZlZhbHVlIiwidXJsSXNTYW1lT3JpZ2luIiwidXBsb2FkRXZlbnRIYW5kbGVycyIsInNlcmlhbGl6ZWRQYXJhbXMiLCJjYWxsYmFja1BhcmFtUmVnZXgiLCJpbnRlcmNlcHRvckZhY3RvcnkiLCJjcmVhdGVIdHRwQmFja2VuZCIsImNyZWF0ZVhociIsIiRicm93c2VyRGVmZXIiLCJyYXdEb2N1bWVudCIsImpzb25wUmVxIiwiY2FsbGJhY2tQYXRoIiwid2FzQ2FsbGVkIiwidGltZW91dFJlcXVlc3QiLCJqc29ucERvbmUiLCJjb21wbGV0ZVJlcXVlc3QiLCJjcmVhdGVDYWxsYmFjayIsImdldFJlc3BvbnNlIiwicmVtb3ZlQ2FsbGJhY2siLCJ1cmxSZXNvbHZlIiwicmVxdWVzdEFib3J0ZWQiLCJyZXF1ZXN0VGltZW91dCIsIm9udGltZW91dCIsInVwbG9hZCIsImVzY2FwZSIsImNoIiwidW5lc2NhcGVUZXh0IiwiZXNjYXBlZFN0YXJ0UmVnZXhwIiwiZXNjYXBlZEVuZFJlZ2V4cCIsImNvbnN0YW50V2F0Y2hEZWxlZ2F0ZSIsIm9iamVjdEVxdWFsaXR5IiwiY29uc3RhbnRJbnRlcnAiLCJ1bndhdGNoIiwicGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvciIsImdldFZhbHVlIiwiJGludGVycG9sYXRlTWluRXJyIiwiaW50ZXJyIiwidW5lc2NhcGVkVGV4dCIsImV4cCIsIiQkd2F0Y2hEZWxlZ2F0ZSIsImVuZEluZGV4IiwicGFyc2VGbnMiLCJ0ZXh0TGVuZ3RoIiwiZXhwcmVzc2lvblBvc2l0aW9ucyIsInN0YXJ0U3ltYm9sTGVuZ3RoIiwiZW5kU3ltYm9sTGVuZ3RoIiwidGhyb3dOb2NvbmNhdCIsImNvbXB1dGUiLCJnZXRUcnVzdGVkIiwiJHdhdGNoR3JvdXAiLCJvbGRWYWx1ZXMiLCJjdXJyVmFsdWUiLCJpbnZva2VBcHBseSIsImhhc1BhcmFtcyIsIml0ZXJhdGlvbiIsInNraXBBcHBseSIsIiQkaW50ZXJ2YWxJZCIsImludGVydmFscyIsIm1hcmtRRXhjZXB0aW9uSGFuZGxlZCIsImVuY29kZVBhdGgiLCJzZWdtZW50cyIsInBhcnNlQWJzb2x1dGVVcmwiLCJhYnNvbHV0ZVVybCIsImxvY2F0aW9uT2JqIiwicGFyc2VkVXJsIiwiJCRwcm90b2NvbCIsIiQkaG9zdCIsImhvc3RuYW1lIiwiJCRwb3J0IiwiREVGQVVMVF9QT1JUUyIsInBhcnNlQXBwVXJsIiwiRE9VQkxFX1NMQVNIX1JFR0VYIiwiJGxvY2F0aW9uTWluRXJyIiwicHJlZml4ZWQiLCIkJHBhdGgiLCJwYXRobmFtZSIsIiQkc2VhcmNoIiwic2VhcmNoIiwiJCRoYXNoIiwic3RhcnRzV2l0aCIsInN0cmlwQmFzZVVybCIsInRyaW1FbXB0eUhhc2giLCJzdHJpcEZpbGUiLCJzZXJ2ZXJCYXNlIiwiTG9jYXRpb25IdG1sNVVybCIsImFwcEJhc2UiLCJhcHBCYXNlTm9GaWxlIiwiYmFzZVByZWZpeCIsIiQkaHRtbDUiLCIkJHBhcnNlIiwicGF0aFVybCIsIiQkY29tcG9zZSIsIiQkdXJsIiwiJCRhYnNVcmwiLCIkJHVybFVwZGF0ZWRCeUxvY2F0aW9uIiwiJCRwYXJzZUxpbmtVcmwiLCJyZWxIcmVmIiwiYXBwVXJsIiwicHJldkFwcFVybCIsInJld3JpdHRlblVybCIsIkxvY2F0aW9uSGFzaGJhbmdVcmwiLCJoYXNoUHJlZml4IiwicmVtb3ZlV2luZG93c0RyaXZlTmFtZSIsImZpcnN0UGF0aFNlZ21lbnRNYXRjaCIsIndpbmRvd3NGaWxlUGF0aEV4cCIsIndpdGhvdXRIYXNoVXJsIiwid2l0aG91dEJhc2VVcmwiLCJMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCIsImxvY2F0aW9uR2V0dGVyIiwibG9jYXRpb25HZXR0ZXJTZXR0ZXIiLCJwcmVwcm9jZXNzIiwiaHRtbDVNb2RlIiwicmVxdWlyZUJhc2UiLCJyZXdyaXRlTGlua3MiLCJzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrIiwib2xkVXJsIiwib2xkU3RhdGUiLCIkJHN0YXRlIiwiYWZ0ZXJMb2NhdGlvbkNoYW5nZSIsIiRicm9hZGNhc3QiLCJhYnNVcmwiLCJMb2NhdGlvbk1vZGUiLCJpbml0aWFsVXJsIiwiSUdOT1JFX1VSSV9SRUdFWFAiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5IiwiYWJzSHJlZiIsImluaXRpYWxpemluZyIsIm5ld1VybCIsIm5ld1N0YXRlIiwiJGRpZ2VzdCIsImN1cnJlbnRSZXBsYWNlIiwiJCRyZXBsYWNlIiwidXJsT3JTdGF0ZUNoYW5nZWQiLCJkZWJ1Z0VuYWJsZWQiLCJmb3JtYXRFcnJvciIsImZvcm1hdFN0YWNrVHJhY2UiLCJzb3VyY2VVUkwiLCJjb25zb2xlTG9nIiwibG9nRm4iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJnZXRTdHJpbmdWYWx1ZSIsImlmRGVmaW5lZCIsInBsdXNGbiIsInIiLCJpc1N0YXRlbGVzcyIsImZpbHRlck5hbWUiLCJpc1B1cmUiLCJwYXJlbnRJc1B1cmUiLCJBU1QiLCJNZW1iZXJFeHByZXNzaW9uIiwiVW5hcnlFeHByZXNzaW9uIiwiUFVSSVRZX0FCU09MVVRFIiwiQmluYXJ5RXhwcmVzc2lvbiIsIkNhbGxFeHByZXNzaW9uIiwiUFVSSVRZX1JFTEFUSVZFIiwiZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyIsImFzdCIsImFsbENvbnN0YW50cyIsImFyZ3NUb1dhdGNoIiwiaXNTdGF0ZWxlc3NGaWx0ZXIiLCJhc3RJc1B1cmUiLCJQcm9ncmFtIiwiTGl0ZXJhbCIsInRvV2F0Y2giLCJyaWdodCIsIkxvZ2ljYWxFeHByZXNzaW9uIiwiQ29uZGl0aW9uYWxFeHByZXNzaW9uIiwiYWx0ZXJuYXRlIiwiY29uc2VxdWVudCIsIklkZW50aWZpZXIiLCJjYWxsZWUiLCJBc3NpZ25tZW50RXhwcmVzc2lvbiIsIkFycmF5RXhwcmVzc2lvbiIsIk9iamVjdEV4cHJlc3Npb24iLCJUaGlzRXhwcmVzc2lvbiIsIkxvY2Fsc0V4cHJlc3Npb24iLCJnZXRJbnB1dHMiLCJsYXN0RXhwcmVzc2lvbiIsImlzQXNzaWduYWJsZSIsImFzc2lnbmFibGVBU1QiLCJOR1ZhbHVlUGFyYW1ldGVyIiwiaXNMaXRlcmFsIiwiaXNDb25zdGFudCIsIkFTVENvbXBpbGVyIiwiQVNUSW50ZXJwcmV0ZXIiLCJQYXJzZXIiLCJsZXhlciIsImFzdENvbXBpbGVyIiwiZ2V0VmFsdWVPZiIsIm9iamVjdFZhbHVlT2YiLCJpZGVudFN0YXJ0IiwiaWRlbnRDb250aW51ZSIsImxpdGVyYWxzIiwidHJ1ZSIsImZhbHNlIiwibnVsbCIsImFkZExpdGVyYWwiLCJsaXRlcmFsTmFtZSIsImxpdGVyYWxWYWx1ZSIsInNldElkZW50aWZpZXJGbnMiLCJpZGVudGlmaWVyU3RhcnQiLCJpZGVudGlmaWVyQ29udGludWUiLCJpbnRlcmNlcHRvckZuIiwicGFyc2VkRXhwcmVzc2lvbiIsIm9uZVRpbWUiLCJjYWNoZUtleSIsIkxleGVyIiwiJHBhcnNlT3B0aW9ucyIsInBhcnNlciIsIm9uZVRpbWVMaXRlcmFsV2F0Y2hEZWxlZ2F0ZSIsIm9uZVRpbWVXYXRjaERlbGVnYXRlIiwiaW5wdXRzIiwiaW5wdXRzV2F0Y2hEZWxlZ2F0ZSIsImFkZEludGVyY2VwdG9yIiwiZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayIsIm9sZFZhbHVlT2ZWYWx1ZSIsImNvbXBhcmVPYmplY3RJZGVudGl0eSIsInByZXR0eVByaW50RXhwcmVzc2lvbiIsImxhc3RSZXN1bHQiLCJpbnB1dEV4cHJlc3Npb25zIiwib2xkSW5wdXRWYWx1ZU9mIiwibmV3SW5wdXRWYWx1ZSIsIm9sZElucHV0VmFsdWVPZlZhbHVlcyIsIm9sZElucHV0VmFsdWVzIiwiY2hhbmdlZCIsIm9uZVRpbWVXYXRjaCIsIm9uZVRpbWVMaXN0ZW5lciIsImlzQWxsRGVmaW5lZCIsImFsbERlZmluZWQiLCJ3YXRjaERlbGVnYXRlIiwidXNlSW5wdXRzIiwicmVndWxhcldhdGNoIiwibm9VbnNhZmVFdmFsIiwiaXNJZGVudGlmaWVyU3RhcnQiLCJpc0lkZW50aWZpZXJDb250aW51ZSIsImVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zIiwicUZhY3RvcnkiLCJuZXh0VGljayIsImV4Y2VwdGlvbkhhbmRsZXIiLCJQcm9taXNlIiwicmVqZWN0UHJvbWlzZSIsIm5vdGlmeVByb21pc2UiLCJwcm9jZXNzUXVldWUiLCJwcm9jZXNzU2NoZWR1bGVkIiwibWFya1FTdGF0ZUV4Y2VwdGlvbkhhbmRsZWQiLCJxdWV1ZVNpemUiLCJwcm9jZXNzQ2hlY2tzIiwiY2hlY2tRdWV1ZSIsInRvQ2hlY2siLCJpc1N0YXRlRXhjZXB0aW9uSGFuZGxlZCIsImVycm9yTWVzc2FnZSIsInNjaGVkdWxlUHJvY2Vzc1F1ZXVlIiwiJCRyZWplY3QiLCIkcU1pbkVyciIsIiQkcmVzb2x2ZSIsImRvUmVzb2x2ZSIsImRvUmVqZWN0IiwiZG9Ob3RpZnkiLCJoYW5kbGVDYWxsYmFjayIsInJlc29sdmVyIiwiY2FsbGJhY2tPdXRwdXQiLCJlcnJiYWNrIiwicHJvZ3Jlc3NCYWNrIiwicHJvbWlzZXMiLCJjb3VudGVyIiwicmFjZSIsIiRRIiwicmVzb2x2ZUZuIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2F0Y2giLCJmaW5hbGx5IiwicHVyIiwicSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwid2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyYWZTdXBwb3J0ZWQiLCJyYWYiLCJzdXBwb3J0ZWQiLCJjcmVhdGVDaGlsZFNjb3BlQ2xhc3MiLCJDaGlsZFNjb3BlIiwiJCR3YXRjaGVycyIsIiQkbmV4dFNpYmxpbmciLCIkJGNoaWxkSGVhZCIsIiQkY2hpbGRUYWlsIiwiJCRsaXN0ZW5lcnMiLCIkJGxpc3RlbmVyQ291bnQiLCIkJHdhdGNoZXJzQ291bnQiLCIkaWQiLCIkJENoaWxkU2NvcGUiLCIkcm9vdFNjb3BlTWluRXJyIiwibGFzdERpcnR5V2F0Y2giLCJhcHBseUFzeW5jSWQiLCJkaWdlc3RUdGwiLCJkZXN0cm95Q2hpbGRTY29wZSIsIiRldmVudCIsImN1cnJlbnRTY29wZSIsImNsZWFuVXBTY29wZSIsIiQkcHJldlNpYmxpbmciLCIkcm9vdCIsIlNjb3BlIiwiYmVnaW5QaGFzZSIsInBoYXNlIiwiY2xlYXJQaGFzZSIsImluY3JlbWVudFdhdGNoZXJzQ291bnQiLCJkZWNyZW1lbnRMaXN0ZW5lckNvdW50IiwiaW5pdFdhdGNoVmFsIiwiZmx1c2hBcHBseUFzeW5jIiwiYXBwbHlBc3luY1F1ZXVlIiwic2NoZWR1bGVBcHBseUFzeW5jIiwiaXNvbGF0ZSIsImNoaWxkIiwid2F0Y2hFeHAiLCJ3YXRjaGVyIiwiJCRkaWdlc3RXYXRjaEluZGV4Iiwid2F0Y2hFeHByZXNzaW9ucyIsIndhdGNoR3JvdXBBY3Rpb24iLCJjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCIsImZpcnN0UnVuIiwibmV3VmFsdWVzIiwiZGVyZWdpc3RlckZucyIsInNob3VsZENhbGwiLCJ1bndhdGNoRm4iLCIkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IiLCJfdmFsdWUiLCJuZXdMZW5ndGgiLCJib3RoTmFOIiwibmV3SXRlbSIsIm9sZEl0ZW0iLCJpbnRlcm5hbEFycmF5Iiwib2xkTGVuZ3RoIiwiY2hhbmdlRGV0ZWN0ZWQiLCJpbnRlcm5hbE9iamVjdCIsIiR3YXRjaENvbGxlY3Rpb25BY3Rpb24iLCJpbml0UnVuIiwidmVyeU9sZFZhbHVlIiwidHJhY2tWZXJ5T2xkVmFsdWUiLCJjaGFuZ2VEZXRlY3RvciIsIndhdGNoIiwid2F0Y2hlcnMiLCJkaXJ0eSIsImxvZ0lkeCIsImFzeW5jVGFzayIsInR0bCIsIndhdGNoTG9nIiwiYXN5bmNRdWV1ZVBvc2l0aW9uIiwiYXN5bmNRdWV1ZSIsInRyYXZlcnNlU2NvcGVzTG9vcCIsInBvc3REaWdlc3RRdWV1ZVBvc2l0aW9uIiwicG9zdERpZ2VzdFF1ZXVlIiwiZXZlbnROYW1lIiwiJGV2YWwiLCIkYXBwbHlBc3luY0V4cHJlc3Npb24iLCJuYW1lZExpc3RlbmVycyIsImluZGV4T2ZMaXN0ZW5lciIsIiRlbWl0IiwidGFyZ2V0U2NvcGUiLCJsaXN0ZW5lckFyZ3MiLCIkJGFzeW5jUXVldWUiLCIkJHBvc3REaWdlc3RRdWV1ZSIsIiQkYXBwbHlBc3luY1F1ZXVlIiwidXJpIiwiaXNJbWFnZSIsIm5vcm1hbGl6ZWRWYWwiLCJzbmFrZVRvQ2FtZWwiLCJVTkRFUlNDT1JFX0xPV0VSQ0FTRV9SRUdFWFAiLCJhZGp1c3RNYXRjaGVyIiwiJHNjZU1pbkVyciIsImVzY2FwZUZvclJlZ2V4cCIsImFkanVzdE1hdGNoZXJzIiwiYWRqdXN0ZWRNYXRjaGVycyIsIlNDRV9DT05URVhUUyIsInJlc291cmNlVXJsV2hpdGVsaXN0IiwicmVzb3VyY2VVcmxCbGFja2xpc3QiLCJtYXRjaFVybCIsImlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kiLCJhbGxvd2VkIiwiZ2VuZXJhdGVIb2xkZXJUeXBlIiwiQmFzZSIsImhvbGRlclR5cGUiLCJ0cnVzdGVkVmFsdWUiLCIkJHVud3JhcFRydXN0ZWRWYWx1ZSIsInRydXN0QXMiLCJDb25zdHJ1Y3RvciIsImJ5VHlwZSIsIm1heWJlVHJ1c3RlZCIsInRydXN0ZWRWYWx1ZUhvbGRlckJhc2UiLCJodG1sU2FuaXRpemVyIiwiQ1NTIiwiVVJMIiwiSlMiLCJzY2UiLCJpc0VuYWJsZWQiLCJwYXJzZUFzIiwiZW51bVZhbHVlIiwibE5hbWUiLCJldmVudFN1cHBvcnQiLCJpc053IiwibnciLCJwcm9jZXNzIiwiaXNDaHJvbWVQYWNrYWdlZEFwcCIsImNocm9tZSIsImFwcCIsInJ1bnRpbWUiLCJoYXNIaXN0b3J5UHVzaFN0YXRlIiwicHVzaFN0YXRlIiwiYW5kcm9pZCIsImJveGVlIiwiYm9keVN0eWxlIiwidHJhbnNpdGlvbnMiLCJhbmltYXRpb25zIiwiaGFzRXZlbnQiLCJkaXZFbG0iLCJodHRwT3B0aW9ucyIsImhhbmRsZVJlcXVlc3RGbiIsInRwbCIsImlnbm9yZVJlcXVlc3RFcnJvciIsImhhbmRsZUVycm9yIiwiJHRlbXBsYXRlUmVxdWVzdE1pbkVyciIsInRvdGFsUGVuZGluZ1JlcXVlc3RzIiwidHJhbnNmb3JtZXIiLCJ0ZXN0YWJpbGl0eSIsImZpbmRCaW5kaW5ncyIsIm9wdF9leGFjdE1hdGNoIiwiZGF0YUJpbmRpbmciLCJiaW5kaW5nTmFtZSIsImZpbmRNb2RlbHMiLCJwcmVmaXhlcyIsImF0dHJpYnV0ZUVxdWFscyIsImdldExvY2F0aW9uIiwic2V0TG9jYXRpb24iLCJ3aGVuU3RhYmxlIiwiZGVmZXJyZWRzIiwiJCR0aW1lb3V0SWQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlcXVlc3RVcmwiLCJvcmlnaW5VcmwiLCIkJENvb2tpZVJlYWRlciIsInNhZmVHZXRDb29raWUiLCJjb29raWUiLCJzYWZlRGVjb2RlVVJJQ29tcG9uZW50IiwibGFzdENvb2tpZXMiLCJsYXN0Q29va2llU3RyaW5nIiwiY29va2llQXJyYXkiLCJjdXJyZW50Q29va2llU3RyaW5nIiwiY3VycmVuY3lGaWx0ZXIiLCJkYXRlRmlsdGVyIiwiZmlsdGVyRmlsdGVyIiwianNvbkZpbHRlciIsImxpbWl0VG9GaWx0ZXIiLCJsb3dlcmNhc2VGaWx0ZXIiLCJudW1iZXJGaWx0ZXIiLCJvcmRlckJ5RmlsdGVyIiwidXBwZXJjYXNlRmlsdGVyIiwiY29tcGFyYXRvciIsImFueVByb3BlcnR5S2V5IiwicHJlZGljYXRlRm4iLCJtYXRjaEFnYWluc3RBbnlQcm9wIiwiZXhwcmVzc2lvblR5cGUiLCJnZXRUeXBlRm9yRmlsdGVyIiwiY3JlYXRlUHJlZGljYXRlRm4iLCJzaG91bGRNYXRjaFByaW1pdGl2ZXMiLCJhY3R1YWwiLCJleHBlY3RlZCIsImRlZXBDb21wYXJlIiwiZG9udE1hdGNoV2hvbGVPYmplY3QiLCJhY3R1YWxUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiZXhwZWN0ZWRWYWwiLCJtYXRjaEFueVByb3BlcnR5IiwiYWN0dWFsVmFsIiwiJGxvY2FsZSIsImZvcm1hdHMiLCJOVU1CRVJfRk9STUFUUyIsImFtb3VudCIsImN1cnJlbmN5U3ltYm9sIiwiZnJhY3Rpb25TaXplIiwiQ1VSUkVOQ1lfU1lNIiwiUEFUVEVSTlMiLCJtYXhGcmFjIiwiZm9ybWF0TnVtYmVyIiwiR1JPVVBfU0VQIiwiREVDSU1BTF9TRVAiLCJudW1TdHIiLCJudW1iZXJPZkludGVnZXJEaWdpdHMiLCJ6ZXJvcyIsImV4cG9uZW50IiwiWkVST19DSEFSIiwiTUFYX0RJR0lUUyIsInJvdW5kTnVtYmVyIiwicGFyc2VkTnVtYmVyIiwibWluRnJhYyIsImZyYWN0aW9uTGVuIiwicm91bmRBdCIsImRpZ2l0IiwiayIsImNhcnJ5IiwicmVkdWNlUmlnaHQiLCJncm91cFNlcCIsImRlY2ltYWxTZXAiLCJpc0luZmluaXR5IiwiaXNaZXJvIiwiYWJzIiwiZm9ybWF0dGVkVGV4dCIsImludGVnZXJMZW4iLCJkZWNpbWFscyIsInJlZHVjZSIsImxnU2l6ZSIsImdTaXplIiwibmVnUHJlIiwibmVnU3VmIiwicG9zUHJlIiwicG9zU3VmIiwicGFkTnVtYmVyIiwibmVnV3JhcCIsIm5lZyIsImRhdGVHZXR0ZXIiLCJkYXRlU3RyR2V0dGVyIiwic2hvcnRGb3JtIiwic3RhbmRBbG9uZSIsInByb3BQcmVmaXgiLCJ0aW1lWm9uZUdldHRlciIsInpvbmUiLCJwYWRkZWRab25lIiwiZ2V0Rmlyc3RUaHVyc2RheU9mWWVhciIsInllYXIiLCJkYXlPZldlZWtPbkZpcnN0IiwiZ2V0RGF5IiwiZ2V0VGh1cnNkYXlUaGlzV2VlayIsImRhdGV0aW1lIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJ3ZWVrR2V0dGVyIiwiZmlyc3RUaHVycyIsInRoaXNUaHVycyIsImFtcG1HZXR0ZXIiLCJnZXRIb3VycyIsIkFNUE1TIiwiZXJhR2V0dGVyIiwiRVJBUyIsImxvbmdFcmFHZXR0ZXIiLCJFUkFOQU1FUyIsImpzb25TdHJpbmdUb0RhdGUiLCJSX0lTTzg2MDFfU1RSIiwidHpIb3VyIiwidHpNaW4iLCJkYXRlU2V0dGVyIiwic2V0VVRDRnVsbFllYXIiLCJzZXRGdWxsWWVhciIsInRpbWVTZXR0ZXIiLCJzZXRVVENIb3VycyIsInNldEhvdXJzIiwibXMiLCJEQVRFVElNRV9GT1JNQVRTIiwiTlVNQkVSX1NUUklORyIsIkRBVEVfRk9STUFUU19TUExJVCIsIkRBVEVfRk9STUFUUyIsInNwYWNpbmciLCJsaW1pdCIsImJlZ2luIiwiSW5maW5pdHkiLCJzbGljZUZuIiwicHJvY2Vzc1ByZWRpY2F0ZXMiLCJzb3J0UHJlZGljYXRlcyIsInByZWRpY2F0ZSIsImRlc2NlbmRpbmciLCJvYmplY3RWYWx1ZSIsImdldFByZWRpY2F0ZVZhbHVlIiwiZGVmYXVsdENvbXBhcmUiLCJ2MSIsInYyIiwidHlwZTEiLCJ0eXBlMiIsInZhbHVlMSIsInZhbHVlMiIsInNvcnRQcmVkaWNhdGUiLCJyZXZlcnNlT3JkZXIiLCJjb21wYXJlRm4iLCJnZXRDb21wYXJpc29uT2JqZWN0IiwidGllQnJlYWtlciIsInByZWRpY2F0ZVZhbHVlcyIsInByZWRpY2F0ZXMiLCJkb0NvbXBhcmlzb24iLCJjb21wYXJlVmFsdWVzIiwibmdEaXJlY3RpdmUiLCJudWxsRm9ybVJlbmFtZUNvbnRyb2wiLCJjb250cm9sIiwiJG5hbWUiLCJGb3JtQ29udHJvbGxlciIsIiQkY29udHJvbHMiLCIkZXJyb3IiLCIkJHN1Y2Nlc3MiLCIkcGVuZGluZyIsIiRkaXJ0eSIsIiRwcmlzdGluZSIsIiR2YWxpZCIsIiRpbnZhbGlkIiwiJHN1Ym1pdHRlZCIsIiQkcGFyZW50Rm9ybSIsIm51bGxGb3JtQ3RybCIsIiQkYW5pbWF0ZSIsInNldHVwVmFsaWRpdHkiLCIkJGNsYXNzQ2FjaGUiLCJJTlZBTElEX0NMQVNTIiwiVkFMSURfQ0xBU1MiLCJhZGRTZXRWYWxpZGl0eU1ldGhvZCIsImNyZWF0ZUFuZFNldCIsImN0cmwiLCJ1bnNldEFuZENsZWFudXAiLCJ1bnNldCIsImlzT2JqZWN0RW1wdHkiLCJjYWNoZWRUb2dnbGVDbGFzcyIsInN3aXRjaFZhbHVlIiwidG9nZ2xlVmFsaWRhdGlvbkNzcyIsInZhbGlkYXRpb25FcnJvcktleSIsImlzVmFsaWQiLCIkc2V0VmFsaWRpdHkiLCJQRU5ESU5HX0NMQVNTIiwiY29tYmluZWRTdGF0ZSIsInN0cmluZ0Jhc2VkSW5wdXRUeXBlIiwiJGZvcm1hdHRlcnMiLCIkaXNFbXB0eSIsInRleHRJbnB1dFR5cGUiLCJiYXNlSW5wdXRUeXBlIiwiY29tcG9zaW5nIiwiZXYiLCJuZ1RyaW0iLCIkdmlld1ZhbHVlIiwiJCRoYXNOYXRpdmVWYWxpZGF0b3JzIiwiJHNldFZpZXdWYWx1ZSIsImRlZmVyTGlzdGVuZXIiLCJvcmlnVmFsdWUiLCJQQVJUSUFMX1ZBTElEQVRJT05fVFlQRVMiLCJQQVJUSUFMX1ZBTElEQVRJT05fRVZFTlRTIiwiVkFMSURJVFlfU1RBVEVfUFJPUEVSVFkiLCJvcmlnQmFkSW5wdXQiLCJvcmlnVHlwZU1pc21hdGNoIiwidHlwZU1pc21hdGNoIiwiJHJlbmRlciIsIndlZWtQYXJzZXIiLCJpc29XZWVrIiwiZXhpc3RpbmdEYXRlIiwiV0VFS19SRUdFWFAiLCJ3ZWVrIiwiaG91cnMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiYWRkRGF5cyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJjcmVhdGVEYXRlUGFyc2VyIiwibWFwcGluZyIsImlzbyIsIklTT19EQVRFX1JFR0VYUCIsInl5eXkiLCJNTSIsImRkIiwiSEgiLCJtbSIsInNzIiwic3NzIiwicGFydCIsImNyZWF0ZURhdGVJbnB1dFR5cGUiLCJwYXJzZURhdGUiLCJpc1ZhbGlkRGF0ZSIsInBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUiLCJiYWRJbnB1dENoZWNrZXIiLCJwcmV2aW91c0RhdGUiLCIkb3B0aW9ucyIsImdldE9wdGlvbiIsIiQkcGFyc2VyTmFtZSIsIiRwYXJzZXJzIiwicGFyc2VkRGF0ZSIsIm5nTW9kZWxNaW5FcnIiLCJuZ01pbiIsIm1pblZhbCIsIiR2YWxpZGF0b3JzIiwiJHZhbGlkYXRlIiwibmdNYXgiLCJtYXhWYWwiLCJuYXRpdmVWYWxpZGF0aW9uIiwibnVtYmVyRm9ybWF0dGVyUGFyc2VyIiwiTlVNQkVSX1JFR0VYUCIsInBhcnNlTnVtYmVyQXR0clZhbCIsImlzTnVtYmVySW50ZWdlciIsImNvdW50RGVjaW1hbHMiLCJudW1TdHJpbmciLCJkZWNpbWFsU3ltYm9sSW5kZXgiLCJpc1ZhbGlkRm9yU3RlcCIsInZpZXdWYWx1ZSIsInN0ZXBCYXNlIiwiaXNOb25JbnRlZ2VyVmFsdWUiLCJpc05vbkludGVnZXJTdGVwQmFzZSIsImlzTm9uSW50ZWdlclN0ZXAiLCJ2YWx1ZURlY2ltYWxzIiwic3RlcEJhc2VEZWNpbWFscyIsInN0ZXBEZWNpbWFscyIsImRlY2ltYWxDb3VudCIsIm11bHRpcGxpZXIiLCJwb3ciLCJudW1iZXJJbnB1dFR5cGUiLCJuZ1N0ZXAiLCJzdGVwVmFsIiwibW9kZWxWYWx1ZSIsInJhbmdlSW5wdXRUeXBlIiwic2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIiLCJodG1sQXR0ck5hbWUiLCJjaGFuZ2VGbiIsIm1pbkNoYW5nZSIsIiRtb2RlbFZhbHVlIiwic3VwcG9ydHNSYW5nZSIsImVsVmFsIiwibWF4Q2hhbmdlIiwic3RlcENoYW5nZSIsImhhc01pbkF0dHIiLCJoYXNNYXhBdHRyIiwiaGFzU3RlcEF0dHIiLCJvcmlnaW5hbFJlbmRlciIsInJhbmdlVW5kZXJmbG93IiwicmFuZ2VPdmVyZmxvdyIsInN0ZXBNaXNtYXRjaCIsInVybElucHV0VHlwZSIsIlVSTF9SRUdFWFAiLCJlbWFpbElucHV0VHlwZSIsIkVNQUlMX1JFR0VYUCIsInJhZGlvSW5wdXRUeXBlIiwiZG9UcmltIiwicGFyc2VDb25zdGFudEV4cHIiLCJwYXJzZUZuIiwiY2hlY2tib3hJbnB1dFR5cGUiLCJ0cnVlVmFsdWUiLCJuZ1RydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJuZ0ZhbHNlVmFsdWUiLCJjbGFzc0RpcmVjdGl2ZSIsImFycmF5RGlmZmVyZW5jZSIsImNsYXNzU3RyaW5nIiwidG9DbGFzc1N0cmluZyIsImNsYXNzVmFsdWUiLCJ0b0ZsYXRWYWx1ZSIsImZsYXRWYWx1ZSIsImhhc1VuZGVmaW5lZCIsImluZGV4V2F0Y2hFeHByZXNzaW9uIiwiYWRkQ2xhc3NlcyIsImRpZ2VzdENsYXNzQ291bnRzIiwicmVtb3ZlQ2xhc3NlcyIsInVwZGF0ZUNsYXNzZXMiLCJvbGRDbGFzc1N0cmluZyIsIm5ld0NsYXNzU3RyaW5nIiwib2xkQ2xhc3NBcnJheSIsIm5ld0NsYXNzQXJyYXkiLCJ0b1JlbW92ZUFycmF5IiwidG9BZGRBcnJheSIsInRvUmVtb3ZlU3RyaW5nIiwidG9BZGRTdHJpbmciLCJjbGFzc0FycmF5IiwiY2xhc3Nlc1RvVXBkYXRlIiwiY2xhc3NDb3VudHMiLCJuZ0NsYXNzSW5kZXhXYXRjaEFjdGlvbiIsIm5ld01vZHVsbyIsIm9sZE1vZHVsbyIsIm5nQ2xhc3NPbmVUaW1lV2F0Y2hBY3Rpb24iLCJuZXdDbGFzc1ZhbHVlIiwibmdDbGFzc1dhdGNoQWN0aW9uIiwiaXNPbmVUaW1lIiwid2F0Y2hJbnRlcmNlcHRvciIsIndhdGNoRXhwcmVzc2lvbiIsIndhdGNoQWN0aW9uIiwiJGluZGV4IiwiTmdNb2RlbENvbnRyb2xsZXIiLCIkJHJhd01vZGVsVmFsdWUiLCIkYXN5bmNWYWxpZGF0b3JzIiwiJHZpZXdDaGFuZ2VMaXN0ZW5lcnMiLCIkdW50b3VjaGVkIiwiJHRvdWNoZWQiLCJkZWZhdWx0TW9kZWxPcHRpb25zIiwiJCRwYXJzZWROZ01vZGVsIiwiJCRwYXJzZWROZ01vZGVsQXNzaWduIiwiJCRuZ01vZGVsR2V0IiwiJCRuZ01vZGVsU2V0IiwiJCRwZW5kaW5nRGVib3VuY2UiLCIkJHBhcnNlclZhbGlkIiwiJCRjdXJyZW50VmFsaWRhdGlvblJ1bklkIiwiJCRhdHRyIiwiJCR0aW1lb3V0IiwiJCRleGNlcHRpb25IYW5kbGVyIiwic2V0dXBNb2RlbFdhdGNoZXIiLCJmb3JtYXR0ZXJzIiwiJCR1cGRhdGVFbXB0eUNsYXNzZXMiLCIkJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUiLCIkJHJ1blZhbGlkYXRvcnMiLCJNb2RlbE9wdGlvbnMiLCIkJG9wdGlvbnMiLCJzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyIsIm9wdGlvbkVsIiwiUkVHRVhfU1RSSU5HX1JFR0VYUCIsIm1hbnVhbExvd2VyY2FzZSIsImNoYXJDb2RlQXQiLCJtYW51YWxVcHBlcmNhc2UiLCJkb2N1bWVudE1vZGUiLCJuZ0NzcEVsZW1lbnQiLCJuZ0NzcEF0dHJpYnV0ZSIsIm5vSW5saW5lU3R5bGUiLCJuYW1lXyIsIk5PREVfVFlQRV9BVFRSSUJVVEUiLCJmdWxsIiwibWFqb3IiLCJtaW5vciIsImRvdCIsImNvZGVOYW1lIiwiTm9kZSIsImxvd2VyY2FzZWROYW1lIiwiaXNCb29sZWFuQXR0ciIsIiRkdiIsIm11bHRpcGxlIiwiYXJnMSIsImFyZzIiLCJub2RlQ291bnQiLCJhZGRIYW5kbGVyIiwibm9FdmVudExpc3RlbmVyIiwib25GbiIsInJlcGxhY2VOb2RlIiwid3JhcE5vZGUiLCJuZXdFbGVtZW50IiwiY29uZGl0aW9uIiwiY2xhc3NDb25kaXRpb24iLCJuZXh0RWxlbWVudFNpYmxpbmciLCJleHRyYVBhcmFtZXRlcnMiLCJkdW1teUV2ZW50IiwiZXZlbnRGbnNDb3B5IiwiaGFuZGxlckFyZ3MiLCJhcmczIiwibmFuS2V5IiwiX2lkeCIsIl90cmFuc2Zvcm1LZXkiLCJkZWxldGUiLCIkYW5pbWF0ZU1pbkVyciIsIk5HX0FOSU1BVEVfQ0xBU1NOQU1FIiwicG9zdERpZ2VzdEVsZW1lbnRzIiwidXBkYXRlRGF0YSIsImhhbmRsZUNTU0NsYXNzQ2hhbmdlcyIsImV4aXN0aW5nIiwiYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QiLCJjbGFzc2VzQWRkZWQiLCJjbGFzc2VzUmVtb3ZlZCIsInBpbiIsImRvbU9wZXJhdGlvbiIsImZyb20iLCJydW5uZXIiLCJjbGFzc05hbWVGaWx0ZXIiLCJjdXN0b21GaWx0ZXIiLCIkJHJlZ2lzdGVyZWRBbmltYXRpb25zIiwiZmlsdGVyRm4iLCJyZXNlcnZlZFJlZ2V4IiwiZG9tSW5zZXJ0IiwiYWZ0ZXJFbGVtZW50IiwiYWZ0ZXJOb2RlIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImVudGVyIiwibW92ZSIsImxlYXZlIiwiYWRkY2xhc3MiLCJzZXRDbGFzcyIsInRlbXBDbGFzc2VzIiwid2FpdEZvclRpY2siLCJ3YWl0UXVldWUiLCJwYXNzZWQiLCJBbmltYXRlUnVubmVyIiwic2V0SG9zdCIsInJhZlRpY2siLCJ0aW1lb3V0VGljayIsIl9kb25lQ2FsbGJhY2tzIiwiX3RpY2siLCJfc3RhdGUiLCJJTklUSUFMX1NUQVRFIiwiRE9ORV9QRU5ESU5HX1NUQVRFIiwiRE9ORV9DT01QTEVURV9TVEFURSIsImNoYWluIiwicnVubmVycyIsIm9uUHJvZ3Jlc3MiLCJnZXRQcm9taXNlIiwicmVzb2x2ZUhhbmRsZXIiLCJyZWplY3RIYW5kbGVyIiwicGF1c2UiLCJyZXN1bWUiLCJfcmVzb2x2ZSIsImluaXRpYWxPcHRpb25zIiwiYXBwbHlBbmltYXRpb25Db250ZW50cyIsImNsb3NlZCIsIiQkcHJlcGFyZWQiLCJjbGVhbnVwU3R5bGVzIiwiaXNGaXJzdENoYW5nZSIsImRvbU5vZGUiLCJDb250ZW50LVR5cGUiLCJbIiwieyIsImNhbGxiYWNrSWQiLCJjYWxsZWQiLCJjYWxsYmFja01hcCIsIlBBVEhfTUFUQ0giLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJsb2NhdGlvblByb3RvdHlwZSIsInBhcmFtVmFsdWUiLCJMb2NhdGlvbiIsIiRwYXJzZU1pbkVyciIsIk9QRVJBVE9SUyIsIkVTQ0FQRSIsImYiLCInIiwiXCIiLCJsZXgiLCJyZWFkU3RyaW5nIiwicGVlayIsInJlYWROdW1iZXIiLCJwZWVrTXVsdGljaGFyIiwicmVhZElkZW50IiwiaXNXaGl0ZXNwYWNlIiwiY2gyIiwiY2gzIiwib3AxIiwib3AyIiwib3AzIiwidGhyb3dFcnJvciIsImNoYXJzIiwiY29kZVBvaW50QXQiLCJpc1ZhbGlkSWRlbnRpZmllclN0YXJ0IiwiaXNWYWxpZElkZW50aWZpZXJDb250aW51ZSIsImNwIiwiY3AxIiwiY3AyIiwiaXNFeHBPcGVyYXRvciIsImNvbFN0ciIsInBlZWtDaCIsInF1b3RlIiwicmF3U3RyaW5nIiwiaGV4IiwicmVwIiwiRXhwcmVzc2lvblN0YXRlbWVudCIsIlByb3BlcnR5IiwicHJvZ3JhbSIsImV4cHJlc3Npb25TdGF0ZW1lbnQiLCJleHBlY3QiLCJmaWx0ZXJDaGFpbiIsImFzc2lnbm1lbnQiLCJ0ZXJuYXJ5IiwibG9naWNhbE9SIiwiY29uc3VtZSIsImxvZ2ljYWxBTkQiLCJlcXVhbGl0eSIsInJlbGF0aW9uYWwiLCJhZGRpdGl2ZSIsIm11bHRpcGxpY2F0aXZlIiwidW5hcnkiLCJwcmltYXJ5IiwiYXJyYXlEZWNsYXJhdGlvbiIsInNlbGZSZWZlcmVudGlhbCIsInBhcnNlQXJndW1lbnRzIiwiYmFzZUV4cHJlc3Npb24iLCJwZWVrVG9rZW4iLCJraW5kIiwiZTEiLCJlMiIsImUzIiwiZTQiLCJwZWVrQWhlYWQiLCIkbG9jYWxzIiwibmV4dElkIiwidmFycyIsIm93biIsImFzc2lnbmFibGUiLCJzdGFnZSIsImNvbXB1dGluZyIsInJlY3Vyc2UiLCJyZXR1cm5fIiwiZ2VuZXJhdGVGdW5jdGlvbiIsImZuS2V5IiwiaW50b0lkIiwid2F0Y2hJZCIsImZuU3RyaW5nIiwiVVNFIiwiU1RSSUNUIiwiZmlsdGVyUHJlZml4Iiwid2F0Y2hGbnMiLCJ2YXJzUHJlZml4Iiwic2VjdGlvbiIsIm5hbWVJZCIsInJlY3Vyc2lvbkZuIiwic2tpcFdhdGNoSWRDaGVjayIsImlmXyIsImxhenlBc3NpZ24iLCJjb21wdXRlZE1lbWJlciIsImxhenlSZWN1cnNlIiwicGx1cyIsImdldEhhc093blByb3BlcnR5IiwiaXNOdWxsIiwibm9uQ29tcHV0ZWRNZW1iZXIiLCJub3ROdWxsIiwibWVtYmVyIiwiU0FGRV9JREVOVElGSUVSIiwiVU5TQUZFX0NIQVJBQ1RFUlMiLCJzdHJpbmdFc2NhcGVGbiIsInN0cmluZ0VzY2FwZVJlZ2V4IiwiYyIsInNraXAiLCJyaHMiLCJsaHMiLCJ1bmFyeSsiLCJ1bmFyeS0iLCJ1bmFyeSEiLCJiaW5hcnkrIiwiYmluYXJ5LSIsImJpbmFyeSoiLCJiaW5hcnkvIiwiYmluYXJ5JSIsImJpbmFyeT09PSIsImJpbmFyeSE9PSIsImJpbmFyeT09IiwiYmluYXJ5IT0iLCJiaW5hcnk8IiwiYmluYXJ5PiIsImJpbmFyeTw9IiwiYmluYXJ5Pj0iLCJiaW5hcnkmJiIsImJpbmFyeXx8IiwidGVybmFyeT86IiwieXkiLCJ5IiwiTU1NTSIsIk1NTSIsIk0iLCJMTExMIiwiSCIsImhoIiwiRUVFRSIsIkVFRSIsIloiLCJ3dyIsIkciLCJHRyIsIkdHRyIsIkdHR0ciLCJ4bGlua0hyZWYiLCJkZWZhdWx0TGlua0ZuIiwibm9ybWFsaXplZCIsImh0bWxBdHRyIiwiJGFkZENvbnRyb2wiLCIkJHJlbmFtZUNvbnRyb2wiLCIkcmVtb3ZlQ29udHJvbCIsIiRzZXREaXJ0eSIsIiRzZXRQcmlzdGluZSIsIiRzZXRTdWJtaXR0ZWQiLCJTVUJNSVRURURfQ0xBU1MiLCIkcm9sbGJhY2tWaWV3VmFsdWUiLCIkY29tbWl0Vmlld1ZhbHVlIiwibmV3TmFtZSIsIm9sZE5hbWUiLCJQUklTVElORV9DTEFTUyIsIkRJUlRZX0NMQVNTIiwiJHNldFVudG91Y2hlZCIsImZvcm1EaXJlY3RpdmVGYWN0b3J5IiwiaXNOZ0Zvcm0iLCJnZXRTZXR0ZXIiLCJmb3JtRWxlbWVudCIsIm5hbWVBdHRyIiwiY3RybHMiLCJoYW5kbGVGb3JtU3VibWlzc2lvbiIsInBhcmVudEZvcm1DdHJsIiwiREFURV9SRUdFWFAiLCJEQVRFVElNRUxPQ0FMX1JFR0VYUCIsIk1PTlRIX1JFR0VYUCIsIlRJTUVfUkVHRVhQIiwiaW5wdXRUeXBlIiwiZGF0ZXRpbWUtbG9jYWwiLCJtb250aCIsIkNPTlNUQU5UX1ZBTFVFX1JFR0VYUCIsInVwZGF0ZUVsZW1lbnRWYWx1ZSIsInByb3BWYWx1ZSIsInRwbEF0dHIiLCIkY29tcGlsZSIsInRlbXBsYXRlRWxlbWVudCIsIm5nQmluZEh0bWxHZXR0ZXIiLCJuZ0JpbmRIdG1sV2F0Y2giLCJnZXRUcnVzdGVkSHRtbCIsImZvcmNlQXN5bmNFdmVudHMiLCJwcmV2aW91c0VsZW1lbnRzIiwic3JjRXhwIiwib25sb2FkRXhwIiwiYXV0b1Njcm9sbEV4cCIsImF1dG9zY3JvbGwiLCJwcmV2aW91c0VsZW1lbnQiLCJjdXJyZW50RWxlbWVudCIsImNoYW5nZUNvdW50ZXIiLCJjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50IiwiYWZ0ZXJBbmltYXRpb24iLCJ0aGlzQ2hhbmdlSWQiLCJ0cmltVmFsdWVzIiwiVU5UT1VDSEVEX0NMQVNTIiwiVE9VQ0hFRF9DTEFTUyIsIkVNUFRZX0NMQVNTIiwiTk9UX0VNUFRZX0NMQVNTIiwiJCRpbml0R2V0dGVyU2V0dGVycyIsImludm9rZU1vZGVsR2V0dGVyIiwiaW52b2tlTW9kZWxTZXR0ZXIiLCIkJCRwIiwiJHNldFRvdWNoZWQiLCJwcmV2VmFsaWQiLCJwcmV2TW9kZWxWYWx1ZSIsImFsbG93SW52YWxpZCIsInRoYXQiLCJhbGxWYWxpZCIsIiQkd3JpdGVNb2RlbFRvU2NvcGUiLCJkb25lQ2FsbGJhY2siLCJwcm9jZXNzUGFyc2VFcnJvcnMiLCJlcnJvcktleSIsInNldFZhbGlkaXR5IiwicHJvY2Vzc1N5bmNWYWxpZGF0b3JzIiwic3luY1ZhbGlkYXRvcnNWYWxpZCIsIkJvb2xlYW4iLCJwcm9jZXNzQXN5bmNWYWxpZGF0b3JzIiwidmFsaWRhdG9yUHJvbWlzZXMiLCJ2YWxpZGF0aW9uRG9uZSIsImxvY2FsVmFsaWRhdGlvblJ1bklkIiwiJCRwYXJzZUFuZFZhbGlkYXRlIiwid3JpdGVUb01vZGVsSWZOZWVkZWQiLCIkJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0IiwiZGVib3VuY2VEZWxheSIsIiRvdmVycmlkZU1vZGVsT3B0aW9ucyIsImNyZWF0ZUNoaWxkIiwibW9kZWxDdHJsIiwiZm9ybUN0cmwiLCJvcHRpb25zQ3RybCIsInNldFRvdWNoZWQiLCJERUZBVUxUX1JFR0VYUCIsImluaGVyaXRBbGwiLCJ1cGRhdGVPbkRlZmF1bHQiLCJ1cGRhdGVPbiIsImRlYm91bmNlIiwiZ2V0dGVyU2V0dGVyIiwiTmdNb2RlbE9wdGlvbnNDb250cm9sbGVyIiwiJCRhdHRycyIsInBhcmVudE9wdGlvbnMiLCJwYXJlbnRDdHJsIiwibW9kZWxPcHRpb25zRGVmaW5pdGlvbiIsIm5nT3B0aW9uc01pbkVyciIsIk5HX09QVElPTlNfUkVHRVhQIiwicGFyc2VPcHRpb25zRXhwcmVzc2lvbiIsIm9wdGlvbnNFeHAiLCJzZWxlY3RFbGVtZW50IiwiT3B0aW9uIiwic2VsZWN0VmFsdWUiLCJsYWJlbCIsImdldE9wdGlvblZhbHVlc0tleXMiLCJvcHRpb25WYWx1ZXMiLCJvcHRpb25WYWx1ZXNLZXlzIiwia2V5TmFtZSIsIml0ZW1LZXkiLCJ2YWx1ZU5hbWUiLCJzZWxlY3RBcyIsInRyYWNrQnkiLCJzZWxlY3RBc0ZuIiwidmlld1ZhbHVlRm4iLCJ0cmFja0J5Rm4iLCJnZXRUcmFja0J5VmFsdWVGbiIsImdldFRyYWNrQnlWYWx1ZSIsImdldExvY2FscyIsImRpc3BsYXlGbiIsImdyb3VwQnlGbiIsImRpc2FibGVXaGVuRm4iLCJ2YWx1ZXNGbiIsImdldFdhdGNoYWJsZXMiLCJ3YXRjaGVkQXJyYXkiLCJvcHRpb25WYWx1ZXNMZW5ndGgiLCJkaXNhYmxlV2hlbiIsImdldE9wdGlvbnMiLCJvcHRpb25JdGVtcyIsInNlbGVjdFZhbHVlTWFwIiwib3B0aW9uSXRlbSIsImdldE9wdGlvbkZyb21WaWV3VmFsdWUiLCJnZXRWaWV3VmFsdWVGcm9tT3B0aW9uIiwibmdPcHRpb25zUG9zdExpbmsiLCJhZGRPcHRpb25FbGVtZW50Iiwib3B0aW9uRWxlbWVudCIsIm9wdGlvblRlbXBsYXRlIiwidXBkYXRlT3B0aW9uRWxlbWVudCIsImdldEFuZFVwZGF0ZVNlbGVjdGVkT3B0aW9uIiwidXBkYXRlT3B0aW9ucyIsInNlbGVjdEN0cmwiLCJyZWFkVmFsdWUiLCJncm91cEVsZW1lbnRNYXAiLCJncm91cEVsZW1lbnQiLCJvcHRHcm91cFRlbXBsYXRlIiwibGlzdEZyYWdtZW50IiwibmdNb2RlbEN0cmwiLCJuZXh0VmFsdWUiLCJpc05vdFByaW1pdGl2ZSIsImhhc0VtcHR5T3B0aW9uIiwiZW1wdHlPcHRpb24iLCJwcm92aWRlZEVtcHR5T3B0aW9uIiwidW5rbm93bk9wdGlvbiIsImdlbmVyYXRlVW5rbm93bk9wdGlvblZhbHVlIiwid3JpdGVWYWx1ZSIsInNlbGVjdGVkT3B0aW9ucyIsInNlbGVjdGVkVmFsdWVzIiwic2VsZWN0aW9ucyIsInNlbGVjdGVkT3B0aW9uIiwicmVtb3ZlVW5rbm93bk9wdGlvbiIsInNlbGVjdFVua25vd25PckVtcHR5T3B0aW9uIiwidW5zZWxlY3RFbXB0eU9wdGlvbiIsInJlZ2lzdGVyT3B0aW9uIiwib3B0aW9uU2NvcGUiLCJuZWVkc1JlcmVuZGVyIiwiJGlzRW1wdHlPcHRpb25TZWxlY3RlZCIsIkJSQUNFIiwiSVNfV0hFTiIsInVwZGF0ZUVsZW1lbnRUZXh0IiwibmV3VGV4dCIsImxhc3RDb3VudCIsIm51bWJlckV4cCIsIndoZW5FeHAiLCJ3aGVucyIsIndoZW5zRXhwRm5zIiwiYnJhY2VSZXBsYWNlbWVudCIsIndhdGNoUmVtb3ZlciIsImF0dHJpYnV0ZU5hbWUiLCJ0bXBNYXRjaCIsIndoZW5LZXkiLCJjb3VudElzTmFOIiwicGx1cmFsQ2F0Iiwid2hlbkV4cEZuIiwiTkdfUkVNT1ZFRCIsIm5nUmVwZWF0TWluRXJyIiwidXBkYXRlU2NvcGUiLCJ2YWx1ZUlkZW50aWZpZXIiLCJrZXlJZGVudGlmaWVyIiwiYXJyYXlMZW5ndGgiLCIkZmlyc3QiLCIkbGFzdCIsIiRtaWRkbGUiLCIkb2RkIiwiJGV2ZW4iLCJnZXRCbG9ja1N0YXJ0IiwiZ2V0QmxvY2tFbmQiLCJuZ1JlcGVhdEVuZENvbW1lbnQiLCJhbGlhc0FzIiwidHJhY2tCeUV4cCIsInRyYWNrQnlFeHBHZXR0ZXIiLCJ0cmFja0J5SWRFeHBGbiIsInRyYWNrQnlJZEFycmF5Rm4iLCJ0cmFja0J5SWRPYmpGbiIsImhhc2hGbkxvY2FscyIsImxhc3RCbG9ja01hcCIsIm5leHROb2RlIiwiY29sbGVjdGlvbkxlbmd0aCIsInRyYWNrQnlJZCIsInRyYWNrQnlJZEZuIiwiY29sbGVjdGlvbktleXMiLCJuZXh0QmxvY2tPcmRlciIsInByZXZpb3VzTm9kZSIsIm5leHRCbG9ja01hcCIsImJsb2NrS2V5IiwiTkdfSElERV9DTEFTUyIsIk5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1MiLCJuZXdTdHlsZXMiLCJvbGRTdHlsZXMiLCJjYXNlcyIsIm5nU3dpdGNoQ29udHJvbGxlciIsIndhdGNoRXhwciIsInNlbGVjdGVkVHJhbnNjbHVkZXMiLCJzZWxlY3RlZEVsZW1lbnRzIiwicHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMiLCJzZWxlY3RlZFNjb3BlcyIsInNwbGljZUZhY3RvcnkiLCJzZWxlY3RlZFRyYW5zY2x1ZGUiLCJjYXNlRWxlbWVudCIsInNlbGVjdGVkU2NvcGUiLCJhbmNob3IiLCJuZ1N3aXRjaFdoZW5TZXBhcmF0b3IiLCJ3aGVuQ2FzZSIsIm5nVHJhbnNjbHVkZU1pbkVyciIsImZhbGxiYWNrTGlua0ZuIiwibmdUcmFuc2NsdWRlQ2xvbmVBdHRhY2hGbiIsIm5vdFdoaXRlc3BhY2UiLCJ1c2VGYWxsYmFja0NvbnRlbnQiLCJuZ1RyYW5zY2x1ZGVTbG90Iiwibm9vcE5nTW9kZWxDb250cm9sbGVyIiwiU2VsZWN0Q29udHJvbGxlciIsInNjaGVkdWxlUmVuZGVyIiwicmVuZGVyU2NoZWR1bGVkIiwic2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUiLCJyZW5kZXJBZnRlciIsInVwZGF0ZVNjaGVkdWxlZCIsIm9wdGlvbnNNYXAiLCJyZW5kZXJVbmtub3duT3B0aW9uIiwidW5rbm93blZhbCIsInVwZGF0ZVVua25vd25PcHRpb24iLCJzZWxlY3RFbXB0eU9wdGlvbiIsInJlYWxWYWwiLCJoYXNPcHRpb24iLCJjdXJyZW50bHlTZWxlY3RlZE9wdGlvbiIsImhhc2hlZFZhbCIsImFkZE9wdGlvbiIsInJlbW92ZU9wdGlvbiIsIiRoYXNFbXB0eU9wdGlvbiIsIiRpc1Vua25vd25PcHRpb25TZWxlY3RlZCIsIm9wdGlvbkF0dHJzIiwiaW50ZXJwb2xhdGVWYWx1ZUZuIiwiaW50ZXJwb2xhdGVUZXh0Rm4iLCJyZW1vdmFsIiwicHJldmlvdXNseVNlbGVjdGVkIiwicmVtb3ZlVmFsdWUiLCJzZWxlY3RQcmVMaW5rIiwic2hvdWxkQmVTZWxlY3RlZCIsImN1cnJlbnRseVNlbGVjdGVkIiwibGFzdFZpZXciLCJsYXN0Vmlld1JlZiIsInNlbGVjdFBvc3RMaW5rIiwic2VsZWN0Q3RybE5hbWUiLCJwYXR0ZXJuRXhwIiwiaW50VmFsIiwiZ2V0RGVjaW1hbHMiLCJnZXRWRiIsIm9wdF9wcmVjaXNpb24iLCJQTFVSQUxfQ0FURUdPUlkiLCJaRVJPIiwiT05FIiwiVFdPIiwiRkVXIiwiTUFOWSIsIk9USEVSIiwiREFZIiwiRklSU1REQVlPRldFRUsiLCJNT05USCIsIlNIT1JUREFZIiwiU0hPUlRNT05USCIsIlNUQU5EQUxPTkVNT05USCIsIldFRUtFTkRSQU5HRSIsImZ1bGxEYXRlIiwibG9uZ0RhdGUiLCJtZWRpdW0iLCJtZWRpdW1EYXRlIiwibWVkaXVtVGltZSIsInNob3J0Iiwic2hvcnREYXRlIiwic2hvcnRUaW1lIiwibWluSW50IiwibG9jYWxlSUQiLCJ2ZiIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc0VuZEV2ZW50TmFtZXMiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiJGVsIiwiYnNUcmFuc2l0aW9uRW5kIiwiUGx1Z2luIiwiJHRoaXMiLCJBbGVydCIsImRpc21pc3MiLCJWRVJTSU9OIiwiVFJBTlNJVElPTl9EVVJBVElPTiIsInJlbW92ZUVsZW1lbnQiLCJhbGVydCIsIkJ1dHRvbiIsInNldFN0YXRlIiwiREVGQVVMVFMiLCJpc0xvYWRpbmciLCJsb2FkaW5nVGV4dCIsInJlc2V0VGV4dCIsIiRpbnB1dCIsIiRidG4iLCJDYXJvdXNlbCIsInNsaWRlIiwiY3ljbGUiLCIkaW5kaWNhdG9ycyIsInBhdXNlZCIsInNsaWRpbmciLCIkYWN0aXZlIiwiJGl0ZW1zIiwia2V5Ym9hcmQiLCJrZXlkb3duIiwiZ2V0SXRlbUluZGV4IiwiZ2V0SXRlbUZvckRpcmVjdGlvbiIsImRpcmVjdGlvbiIsImFjdGl2ZUluZGV4Iiwid2lsbFdyYXAiLCJkZWx0YSIsIml0ZW1JbmRleCIsIiRuZXh0IiwiaXNDeWNsaW5nIiwic2xpZGVFdmVudCIsIiRuZXh0SW5kaWNhdG9yIiwic2xpZEV2ZW50IiwiY2Fyb3VzZWwiLCJjbGlja0hhbmRsZXIiLCIkdGFyZ2V0Iiwic2xpZGVJbmRleCIsIiRjYXJvdXNlbCIsImdldFRhcmdldEZyb21UcmlnZ2VyIiwiJHRyaWdnZXIiLCJDb2xsYXBzZSIsInRyYW5zaXRpb25pbmciLCJnZXRQYXJlbnQiLCJhZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJkaW1lbnNpb24iLCJoYXNXaWR0aCIsImFjdGl2ZXNEYXRhIiwiYWN0aXZlcyIsInN0YXJ0RXZlbnQiLCJzY3JvbGxTaXplIiwiaXNPcGVuIiwiY29sbGFwc2UiLCJjbGVhck1lbnVzIiwiYmFja2Ryb3AiLCJEcm9wZG93biIsImlzQWN0aXZlIiwiZGVzYyIsImRyb3Bkb3duIiwiX3JlbGF0ZWRUYXJnZXQiLCJNb2RhbCIsIiRib2R5IiwiJGRpYWxvZyIsIiRiYWNrZHJvcCIsImlzU2hvd24iLCJvcmlnaW5hbEJvZHlQYWQiLCJzY3JvbGxiYXJXaWR0aCIsImlnbm9yZUJhY2tkcm9wQ2xpY2siLCJCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OIiwiY2hlY2tTY3JvbGxiYXIiLCJzZXRTY3JvbGxiYXIiLCJyZXNpemUiLCJhZGp1c3REaWFsb2ciLCJlbmZvcmNlRm9jdXMiLCJoaWRlTW9kYWwiLCJoYW5kbGVVcGRhdGUiLCJyZXNldEFkanVzdG1lbnRzIiwicmVzZXRTY3JvbGxiYXIiLCJyZW1vdmVCYWNrZHJvcCIsImRvQW5pbWF0ZSIsImNhbGxiYWNrUmVtb3ZlIiwibW9kYWxJc092ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJib2R5SXNPdmVyZmxvd2luZyIsInBhZGRpbmdSaWdodCIsImZ1bGxXaW5kb3dXaWR0aCIsImlubmVyV2lkdGgiLCJkb2N1bWVudEVsZW1lbnRSZWN0IiwiY2xpZW50V2lkdGgiLCJtZWFzdXJlU2Nyb2xsYmFyIiwiYm9keVBhZCIsInNjcm9sbERpdiIsIm1vZGFsIiwic2hvd0V2ZW50IiwiVG9vbHRpcCIsImhvdmVyU3RhdGUiLCJpblN0YXRlIiwicGxhY2VtZW50Iiwidmlld3BvcnQiLCIkdmlld3BvcnQiLCJ0cmlnZ2VycyIsImV2ZW50SW4iLCJldmVudE91dCIsIl9vcHRpb25zIiwiZml4VGl0bGUiLCJnZXREZWZhdWx0cyIsImdldERlbGVnYXRlT3B0aW9ucyIsInRpcCIsImlzSW5TdGF0ZVRydWUiLCJpbkRvbSIsIiR0aXAiLCJ0aXBJZCIsImdldFVJRCIsInNldENvbnRlbnQiLCJhdXRvVG9rZW4iLCJhdXRvUGxhY2UiLCJnZXRQb3NpdGlvbiIsImFjdHVhbFdpZHRoIiwiYWN0dWFsSGVpZ2h0Iiwib3JnUGxhY2VtZW50Iiwidmlld3BvcnREaW0iLCJjYWxjdWxhdGVkT2Zmc2V0IiwiZ2V0Q2FsY3VsYXRlZE9mZnNldCIsImFwcGx5UGxhY2VtZW50IiwicHJldkhvdmVyU3RhdGUiLCJtYXJnaW5Ub3AiLCJnZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEiLCJpc1ZlcnRpY2FsIiwiYXJyb3dEZWx0YSIsImFycm93T2Zmc2V0UG9zaXRpb24iLCJyZXBsYWNlQXJyb3ciLCJhcnJvdyIsImdldFRpdGxlIiwiJGUiLCJpc0JvZHkiLCJlbFJlY3QiLCJlbE9mZnNldCIsIm91dGVyRGltcyIsInZpZXdwb3J0UGFkZGluZyIsInZpZXdwb3J0RGltZW5zaW9ucyIsInRvcEVkZ2VPZmZzZXQiLCJib3R0b21FZGdlT2Zmc2V0IiwibGVmdEVkZ2VPZmZzZXQiLCJyaWdodEVkZ2VPZmZzZXQiLCJvIiwiJGFycm93IiwiZW5hYmxlIiwidG9nZ2xlRW5hYmxlZCIsInRvb2x0aXAiLCJQb3BvdmVyIiwiZ2V0Q29udGVudCIsInBvcG92ZXIiLCJTY3JvbGxTcHkiLCIkc2Nyb2xsRWxlbWVudCIsIm9mZnNldHMiLCJhY3RpdmVUYXJnZXQiLCJnZXRTY3JvbGxIZWlnaHQiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiJGhyZWYiLCJtYXhTY3JvbGwiLCJhY3RpdmF0ZSIsImNsZWFyIiwic2Nyb2xsc3B5IiwiJHNweSIsIlRhYiIsIiR1bCIsIiRwcmV2aW91cyIsImhpZGVFdmVudCIsInRhYiIsIkFmZml4IiwiY2hlY2tQb3NpdGlvbiIsImNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wIiwiYWZmaXhlZCIsInVucGluIiwicGlubmVkT2Zmc2V0IiwiUkVTRVQiLCJnZXRTdGF0ZSIsIm9mZnNldFRvcCIsIm9mZnNldEJvdHRvbSIsInRhcmdldEhlaWdodCIsImNvbGxpZGVyVG9wIiwiY29sbGlkZXJIZWlnaHQiLCJnZXRQaW5uZWRPZmZzZXQiLCJhZmZpeCIsImFmZml4VHlwZSIsImhvcml6b250YWwiLCJjc3NUbyIsInVpYkNvbGxhcHNlIiwiZ2V0U2Nyb2xsRnJvbUVsZW1lbnQiLCJzY3JvbGxXaWR0aCIsImV4cGFuZGluZ0V4cHIiLCJleHBhbmREb25lIiwiZXhwYW5kZWRFeHByIiwiY29sbGFwc2luZ0V4cHIiLCJjb2xsYXBzZURvbmUiLCJjb2xsYXBzZWRFeHByIiwiZXhwYW5kaW5nIiwiY29sbGFwc2luZyIsImNvbGxhcHNlZCIsInNob3VsZENvbGxhcHNlIiwiY2xvc2VPdGhlcnMiLCJhY2NvcmRpb25Db25maWciLCJvcGVuR3JvdXAiLCJhZGRHcm91cCIsImdyb3VwU2NvcGUiLCJyZW1vdmVHcm91cCIsImhlYWRpbmciLCJwYW5lbENsYXNzIiwiaXNEaXNhYmxlZCIsInNldEhlYWRpbmciLCJhY2NvcmRpb25DdHJsIiwib3BlbkNsYXNzIiwidG9nZ2xlT3BlbiIsImhlYWRpbmdJZCIsInBhbmVsSWQiLCJhY2NvcmRpb25Hcm91cEN0cmwiLCJnZXRIZWFkZXJTZWxlY3RvcnMiLCJ1aWJBY2NvcmRpb25UcmFuc2NsdWRlIiwiY2xvc2VhYmxlIiwiZGlzbWlzc09uVGltZW91dCIsImFjdGl2ZUNsYXNzIiwidG9nZ2xlRXZlbnQiLCJidXR0b25Db25maWciLCJidXR0b25zQ3RybCIsInVuY2hlY2thYmxlRXhwciIsInVpYlVuY2hlY2thYmxlIiwidWliQnRuUmFkaW8iLCJ1bmNoZWNrYWJsZSIsImdldFRydWVWYWx1ZSIsImdldENoZWNrYm94VmFsdWUiLCJidG5DaGVja2JveFRydWUiLCJnZXRGYWxzZVZhbHVlIiwiYnRuQ2hlY2tib3hGYWxzZSIsImNsZWFyQnVmZmVyZWRUcmFuc2l0aW9ucyIsImJ1ZmZlcmVkVHJhbnNpdGlvbnMiLCJzZXRBY3RpdmUiLCJzbGlkZXMiLCJnb05leHQiLCJkZXN0cm95ZWQiLCJjdXJyZW50SW5kZXgiLCIkY3VycmVudFRyYW5zaXRpb24iLCJTTElERV9ESVJFQ1RJT04iLCJjdXJyZW50SWR4IiwiZ2V0Q3VycmVudEluZGV4IiwibmV4dFNsaWRlIiwibmV4dEluZGV4IiwibmV4dERpcmVjdGlvbiIsInJlc3RhcnRUaW1lciIsImZpbmRTbGlkZUluZGV4IiwicmVzZXRUaW1lciIsImN1cnJlbnRJbnRlcnZhbCIsInJlc2V0VHJhbnNpdGlvbiIsInRpbWVyRm4iLCJpc1BsYXlpbmciLCJhZGRTbGlkZSIsInBsYXkiLCJuZXdJbmRleCIsIm5vV3JhcCIsInJlbW92ZVNsaWRlIiwiYnVmZmVyZWRJbmRleCIsImluZGV4T2ZTbGlkZSIsImlzUHJldkRpc2FibGVkIiwiaXNOZXh0RGlzYWJsZWQiLCJub1BhdXNlIiwibm9UcmFuc2l0aW9uIiwiY2Fyb3VzZWxDdHJsIiwiYmVmb3JlQWRkQ2xhc3MiLCJkaXJlY3Rpb25DbGFzcyIsInJlbW92ZUNsYXNzRm4iLCJiZWZvcmVSZW1vdmVDbGFzcyIsImNyZWF0ZVBhcnNlciIsInF1b3RlSW5kZXgiLCJpbkxpdGVyYWwiLCJmb3JtYXRDb2RlVG9SZWdleCIsImNyZWF0ZUZvcm1hdHRlciIsImZvcm1hdHRlciIsImxpdGVyYWxJZHgiLCJjb25zdHJ1Y3RMaXRlcmFsRm9ybWF0dGVyIiwiY29uc3RydWN0Rm9ybWF0dGVyRnJvbUlkeCIsImVuZElkeCIsImN1cnJlbnRQb3NTdHIiLCJ0b1RpbWV6b25lIiwiZnJvbVRpbWV6b25lIiwibG9jYWxlSWQiLCJTUEVDSUFMX0NIQVJBQ1RFUlNfUkVHRVhQIiwicGFyc2VycyIsIl9kYXRlIiwic2lnbiIsImJhc2VEYXRlIiwidHpPZmZzZXQiLCJmaWVsZHMiLCJkdCIsIm1hcHBlciIsImRhdGVzZXR0ZXIiLCJ0aW1lc2V0dGVyIiwiT05fUkVHRVhQIiwiSVNfUkVHRVhQIiwibGlua2VkU2NvcGVzIiwiaW5zdGFuY2VzIiwiZXhwcyIsImFkZEZvckV4cCIsInJlbW92ZVNjb3BlIiwiY29tcGFyZVdpdGhFeHAiLCJleHBUb0RhdGEiLCJ3YXRjaEZuIiwiY29tcGFyZVdpdGhWYWwiLCJuZXdBY3RpdmF0ZWQiLCJ0aGlzVmFsIiwib25FeHAiLCJsYXN0QWN0aXZhdGVkIiwicmVtb3ZlZFNjb3BlIiwibmV3V2F0Y2hTY29wZSIsIm9uRXhwTWF0Y2hlcyIsInVpYklzQ2xhc3MiLCJleHBzU3RyIiwiZGF0ZXBpY2tlck1vZGUiLCJmb3JtYXREYXkiLCJmb3JtYXRNb250aCIsImZvcm1hdFllYXIiLCJmb3JtYXREYXlIZWFkZXIiLCJmb3JtYXREYXlUaXRsZSIsImZvcm1hdE1vbnRoVGl0bGUiLCJtYXhEYXRlIiwibWF4TW9kZSIsIm1pbkRhdGUiLCJtaW5Nb2RlIiwibW9udGhDb2x1bW5zIiwic2hvcnRjdXRQcm9wYWdhdGlvbiIsInNob3dXZWVrcyIsInllYXJDb2x1bW5zIiwieWVhclJvd3MiLCJkYXRlcGlja2VyQ29uZmlnIiwiJGRhdGVwaWNrZXJMaXRlcmFsV2FybmluZyIsIiRkYXRlcGlja2VyU3VwcHJlc3NFcnJvciIsImRhdGVQYXJzZXIiLCJzZXRNb2RlIiwiZGF0ZXBpY2tlck9wdGlvbnMiLCJ3YXRjaExpc3RlbmVycyIsIm1vZGVzIiwic3RhcnRpbmdEYXkiLCJyZWZyZXNoVmlldyIsInVuaXF1ZUlkIiwibmdEaXNhYmxlZCIsImRhdGVPYmplY3QiLCJhY3RpdmVEYXRlIiwiYWN0aXZlRGF0ZUlkIiwibmdNb2RlbEN0cmxfIiwiaW5pdERhdGUiLCJyZW5kZXIiLCJzZWxlY3RlZER0IiwiX3JlZnJlc2hWaWV3IiwiYWN0aXZlRHQiLCJjcmVhdGVEYXRlT2JqZWN0IiwibW9kZWwiLCJ0b2RheSIsInBhc3QiLCJmdXR1cmUiLCJjdXN0b21DbGFzcyIsImRhdGVEaXNhYmxlZCIsImFycmF5cyIsInllYXJzIiwibW9udGhzIiwidG9nZ2xlTW9kZSIsIjEzIiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiZm9jdXNFbGVtZW50IiwiYWx0S2V5IiwiaGFuZGxlS2V5RG93biIsImdldERheXNJbk1vbnRoIiwiREFZU19JTl9NT05USCIsImdldElTTzg2MDFXZWVrTnVtYmVyIiwiY2hlY2tEYXRlIiwic2V0RGF0ZSIsInNldE1vbnRoIiwiZ2V0RGF0ZXMiLCJzdGFydERhdGUiLCJkYXRlcyIsImZpcnN0RGF5T2ZNb250aCIsImRpZmZlcmVuY2UiLCJudW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCIsImZpcnN0RGF0ZSIsImRheXMiLCJzZWNvbmRhcnkiLCJsYWJlbHMiLCJhYmJyIiwicm93cyIsIndlZWtOdW1iZXJzIiwidGh1cnNkYXlJbmRleCIsIm51bVdlZWtzIiwiY3VyV2VlayIsImRhdGUxIiwiZGF0ZTIiLCJfZGF0ZTEiLCJfZGF0ZTIiLCJ5ZWFySGVhZGVyQ29sc3BhbiIsImdldFN0YXJ0aW5nWWVhciIsImNvbHVtbnMiLCJ5ZWFycGlja2VySW5pdCIsImRhdGVwaWNrZXJDdHJsIiwiZGF5cGlja2VyQ3RybCIsIm1vbnRocGlja2VyQ3RybCIsIlNDUk9MTEJBUl9XSURUSCIsIkJPRFlfU0NST0xMQkFSX1dJRFRIIiwiT1ZFUkZMT1dfUkVHRVgiLCJub3JtYWwiLCJQTEFDRU1FTlRfUkVHRVgiLCJhdXRvIiwidmVydGljYWwiLCJCT0RZX1JFR0VYIiwiZ2V0UmF3Tm9kZSIsInBhcnNlU3R5bGUiLCJpc1N0YXRpY1Bvc2l0aW9uZWQiLCJib2R5RWxlbSIsInNjcm9sbEVsZW0iLCJzY3JvbGxiYXJQYWRkaW5nIiwiZWxlbVN0eWxlIiwicGFkZGluZ0JvdHRvbSIsInNjcm9sbFBhcmVudCIsIndpZHRoT3ZlcmZsb3ciLCJvcmlnaW5hbFJpZ2h0IiwiaGVpZ2h0T3ZlcmZsb3ciLCJvcmlnaW5hbEJvdHRvbSIsImlzU2Nyb2xsYWJsZSIsImluY2x1ZGVIaWRkZW4iLCJvdmVyZmxvd1JlZ2V4IiwiaW5jbHVkZVNlbGYiLCJkb2N1bWVudEVsIiwiZXhjbHVkZVN0YXRpYyIsInNwU3R5bGUiLCJpbmNsdWRlTWFnaW5zIiwiZWxlbU9mZnNldCIsImVsZW1CQ1IiLCJ2aWV3cG9ydE9mZnNldCIsInVzZURvY3VtZW50IiwiaW5jbHVkZVBhZGRpbmciLCJvZmZzZXRCQ1IiLCJvZmZzZXRQYXJlbnRCQ1IiLCJvZmZzZXRQYXJlbnRTdHlsZSIsInBhZGRpbmdUb3AiLCJwYXJzZVBsYWNlbWVudCIsInBvc2l0aW9uRWxlbWVudHMiLCJob3N0RWxlbSIsInRhcmdldEVsZW0iLCJhcHBlbmRUb0JvZHkiLCJ0YXJnZXRXaWR0aCIsImhvc3RFbGVtUG9zIiwidGFyZ2V0RWxlbVBvcyIsInRhcmdldEVsZW1TdHlsZSIsImFkanVzdGVkU2l6ZSIsIm1hcmdpbkJvdHRvbSIsInhPdmVyZmxvdyIsInlPdmVyZmxvdyIsImFkanVzdFRvcCIsInBsYWNlbWVudENsYXNzZXMiLCJjb250YWluZXJQb3NpdGlvbiIsImluaXRpYWxIZWlnaHQiLCJjdXJyZW50SGVpZ2h0IiwicG9zaXRpb25BcnJvdyIsImlubmVyRWxlbSIsImlzVG9vbHRpcCIsImFycm93RWxlbSIsImFycm93Q3NzIiwiYm9yZGVyUHJvcCIsImJvcmRlcldpZHRoIiwiYm9yZGVyUmFkaXVzUHJvcCIsImJvcmRlclJhZGl1cyIsImFsdElucHV0Rm9ybWF0cyIsImNsZWFyVGV4dCIsImNsb3NlT25EYXRlU2VsZWN0aW9uIiwiY2xvc2VUZXh0IiwiY3VycmVudFRleHQiLCJkYXRlcGlja2VyUG9wdXAiLCJkYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCIsImRhdGVwaWNrZXJUZW1wbGF0ZVVybCIsImh0bWw1VHlwZXMiLCJvbk9wZW5Gb2N1cyIsInNob3dCdXR0b25CYXIiLCIkcG9zaXRpb24iLCJkYXRlcGlja2VyUG9wdXBDb25maWciLCIkZGF0ZXBpY2tlclBvcHVwTGl0ZXJhbFdhcm5pbmciLCJwYXJzZURhdGVTdHJpbmciLCJkYXRlRm9ybWF0IiwiZG9jdW1lbnRDbGlja0JpbmQiLCJwb3B1cCIsIiRwb3B1cCIsImRwQ29udGFpbnNUYXJnZXQiLCJwb3B1cENvbnRhaW5zVGFyZ2V0IiwiaW5wdXRLZXlkb3duQmluZCIsInBvc2l0aW9uUG9wdXAiLCJkcEVsZW1lbnQiLCJwb3B1cFBsYWNlbWVudCIsInBvcHVwRWwiLCJkYXRlcGlja2VyRWwiLCJzY3JvbGxQYXJlbnRFbCIsImlzSHRtbDVEYXRlSW5wdXQiLCJfbmdNb2RlbF8iLCJkYXRlcGlja2VyQXBwZW5kVG9Cb2R5IiwidWliRGF0ZXBpY2tlclBvcHVwIiwibmV3RGF0ZUZvcm1hdCIsIm5nLW1vZGVsIiwibmctY2hhbmdlIiwidGVtcGxhdGUtdXJsIiwiZGF0ZVNlbGVjdGlvbiIsImRlYm91bmNlVGltZSIsInRpbWVvdXRQcm9taXNlIiwiYXBwZW5kVG9PcGVuQ2xhc3MiLCJvcGVuU2NvcGUiLCJkcm9wZG93blNjb3BlIiwiY2xvc2VEcm9wZG93biIsImtleWJpbmRGaWx0ZXIiLCJnZXRBdXRvQ2xvc2UiLCJ0b2dnbGVFbGVtZW50IiwiZ2V0VG9nZ2xlRWxlbWVudCIsImRyb3Bkb3duRWxlbWVudCIsImdldERyb3Bkb3duRWxlbWVudCIsImZvY3VzVG9nZ2xlRWxlbWVudCIsImRyb3Bkb3duRWxlbWVudFRhcmdldGVkIiwidG9nZ2xlRWxlbWVudFRhcmdldGVkIiwiaXNLZXluYXZFbmFibGVkIiwiZm9jdXNEcm9wZG93bkVudHJ5IiwiZHJvcGRvd25Db25maWciLCJ1aWJEcm9wZG93blNlcnZpY2UiLCJ0ZW1wbGF0ZVNjb3BlIiwiZ2V0SXNPcGVuIiwic2V0SXNPcGVuIiwidG9nZ2xlSW52b2tlciIsIm9uVG9nZ2xlIiwia2V5bmF2RW5hYmxlZCIsImRyb3Bkb3duQXBwZW5kVG8iLCJhcHBlbmRUb0VsIiwiZHJvcGRvd25BcHBlbmRUb0JvZHkiLCJrZXlib2FyZE5hdiIsImRyb3Bkb3duTWVudSIsImF1dG9DbG9zZSIsImdldEVsZW1lbnQiLCJ3YXNPcGVuIiwicmlnaHRhbGlnbiIsImFwcGVuZE9mZnNldCIsIm9wZW5Db250YWluZXIiLCJoYXNPcGVuQ2xhc3MiLCJkcm9wZG93bk1lbnVUZW1wbGF0ZVVybCIsInRwbENvbnRlbnQiLCJuZXdFbCIsImRyb3Bkb3duQ3RybCIsImRyb3Bkb3duTmVzdGVkIiwidHBsVXJsIiwidG9nZ2xlRHJvcGRvd24iLCJhcmlhLWhhc3BvcHVwIiwiYXJpYS1leHBhbmRlZCIsImNyZWF0ZU5ldyIsInJlbW92ZVRvcCIsImVudHJpZXMiLCJoYXNLZXkiLCJzZXRSZXNvbHZlciIsImludm9jYWJsZXMiLCJyZXNvbHZlcyIsInJlc29sdmVPYmoiLCJyZXNvbHZlSXRlciIsIiRtb2RhbFN0YWNrIiwibW9kYWxJbkNsYXNzIiwiTk9XX0NMT1NJTkdfRVZFTlQiLCJzZXRJc0FzeW5jIiwibW9kYWxPcHRpb25zIiwiYmFja2Ryb3BDbGFzcyIsIndpbmRvd1RvcENsYXNzIiwiZ2V0VG9wIiwiJGlzUmVuZGVyZWQiLCJtb2RhbFJlbmRlckRlZmVyT2JqIiwiYW5pbWF0aW9uUHJvbWlzZSIsIm1vZGFsUmVuZGVyZWQiLCJpbnB1dFdpdGhBdXRvZm9jdXMiLCJtb2RhbEFuaW1hdGlvbiIsInVpYk1vZGFsQW5pbWF0aW9uQ2xhc3MiLCIkJG11bHRpTWFwIiwiJCRzdGFja2VkTWFwIiwiJHVpYlBvc2l0aW9uIiwiaXNWaXNpYmxlIiwiYmFja2Ryb3BJbmRleCIsInRvcEJhY2tkcm9wSW5kZXgiLCJvcGVuZWQiLCJvcGVuZWRXaW5kb3dzIiwidG9wTW9kYWxJbmRleCIsInJlbW92ZU1vZGFsV2luZG93IiwibW9kYWxJbnN0YW5jZSIsImVsZW1lbnRUb1JlY2VpdmVGb2N1cyIsIm1vZGFsV2luZG93IiwiYXBwZW5kVG9FbGVtZW50IiwicHJldmlvdXNUb3BPcGVuZWRNb2RhbCIsIm1vZGFsRG9tRWwiLCJyZW1vdmVBZnRlckFuaW1hdGUiLCJtb2RhbFNjb3BlIiwibW9kYWxCb2R5Q2xhc3MiLCJvcGVuZWRDbGFzcyIsIk9QRU5FRF9NT0RBTF9DTEFTUyIsIm9wZW5lZENsYXNzZXMiLCJhcmVBbnlPcGVuIiwidG9nZ2xlVG9wV2luZG93Q2xhc3MiLCJjbG9zZWREZWZlcnJlZCIsImNoZWNrUmVtb3ZlQmFja2Ryb3AiLCJ0b2dnbGVTd2l0Y2giLCJiYWNrZHJvcERvbUVsIiwiYmFja2Ryb3BTY29wZVJlZiIsImJhY2tkcm9wU2NvcGUiLCJkb21FbCIsImFmdGVyQW5pbWF0aW5nIiwiYXN5bmNEZWZlcnJlZCIsImFzeW5jUHJvbWlzZSIsImtleWRvd25MaXN0ZW5lciIsImxvYWRGb2N1c0VsZW1lbnRMaXN0IiwiZm9jdXNDaGFuZ2VkIiwiaXNGb2N1c0luRmlyc3RJdGVtIiwiaXNNb2RhbEZvY3VzZWQiLCJmb2N1c0xhc3RGb2N1c2FibGVFbGVtZW50IiwiaXNGb2N1c0luTGFzdEl0ZW0iLCJmb2N1c0ZpcnN0Rm9jdXNhYmxlRWxlbWVudCIsImJyb2FkY2FzdENsb3NpbmciLCJyZXN1bHRPclJlYXNvbiIsImNsb3NpbmciLCJ1bmhpZGVCYWNrZ3JvdW5kRWxlbWVudHMiLCJBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSIsImhpZGRlbkVsIiwiYXJpYUhpZGRlbkNvdW50IiwibmV3SGlkZGVuQ291bnQiLCJ0YWJiYWJsZVNlbGVjdG9yIiwibmV3QmFja2Ryb3BJbmRleCIsImFwcGx5QXJpYUhpZGRlbiIsImdldFNpYmxpbmdzIiwiZWxlbUlzQWxyZWFkeUhpZGRlbiIsIm1vZGFsT3BlbmVyIiwicmVuZGVyRGVmZXJyZWQiLCJjdXJyQmFja2Ryb3BJbmRleCIsIm5nLXN0eWxlIiwidWliLW1vZGFsLWFuaW1hdGlvbi1jbGFzcyIsIm1vZGFsLWluLWNsYXNzIiwibW9kYWwtaW5zdGFuY2UiLCJhbmd1bGFyRG9tRWwiLCJ3aW5kb3dUZW1wbGF0ZVVybCIsIndpbmRvdy10b3AtY2xhc3MiLCJyb2xlIiwiYXJpYS1sYWJlbGxlZGJ5IiwiYXJpYUxhYmVsbGVkQnkiLCJhcmlhLWRlc2NyaWJlZGJ5IiwiYXJpYURlc2NyaWJlZEJ5Iiwid2luZG93Q2xhc3MiLCIkJHRvcE1vZGFsSW5kZXgiLCIkJHVpYkRlc3RydWN0aW9uU2NoZWR1bGVkIiwiZGlzbWlzc0FsbCIsInRvcE1vZGFsIiwic3JjRWxlbWVudCIsIm1vZGFsRG9tRTEiLCIkbW9kYWxQcm92aWRlciIsIiR1aWJSZXNvbHZlIiwiZ2V0VGVtcGxhdGVQcm9taXNlIiwiJG1vZGFsIiwicHJvbWlzZUNoYWluIiwiZ2V0UHJvbWlzZUNoYWluIiwicmVzb2x2ZVdpdGhUZW1wbGF0ZSIsInRlbXBsYXRlQW5kUmVzb2x2ZVByb21pc2UiLCJtb2RhbFJlc3VsdERlZmVycmVkIiwibW9kYWxPcGVuZWREZWZlcnJlZCIsIm1vZGFsQ2xvc2VkRGVmZXJyZWQiLCJtb2RhbFJlbmRlckRlZmVycmVkIiwicmVuZGVyZWQiLCJzYW1lUHJvbWlzZSIsInRwbEFuZFZhcnMiLCJjb25zdHJ1Y3RMb2NhbHMiLCJpbnN0YW5jZU9uU2NvcGUiLCJpbmplY3RhYmxlIiwiJHJlc29sdmUiLCIkdWliTW9kYWxJbnN0YW5jZSIsInByb3ZpZGVkU2NvcGUiLCIkY2xvc2UiLCIkZGlzbWlzcyIsImN0cmxJbnN0YW5jZSIsImN0cmxJbnN0YW50aWF0ZSIsImN0cmxMb2NhbHMiLCJzZXROdW1QYWdlcyIsIm51bVBhZ2VzIiwiX3dhdGNoZXJzIiwiaXRlbXNQZXJQYWdlIiwidG90YWxQYWdlcyIsImNhbGN1bGF0ZVRvdGFsUGFnZXMiLCJ1cGRhdGVQYWdlIiwibmV3VG90YWwiLCJvbGRUb3RhbCIsImNlaWwiLCJ0b3RhbEl0ZW1zIiwicGFnZSIsInNlbGVjdFBhZ2UiLCJjbGlja0FsbG93ZWQiLCJub1ByZXZpb3VzIiwibm9OZXh0IiwidWliUGFnaW5nIiwidWliUGFnZXJDb25maWciLCJhbGlnbiIsInByZXZpb3VzVGV4dCIsIm5leHRUZXh0IiwicGFnaW5hdGlvbkN0cmwiLCJ1aWJQYWdpbmF0aW9uQ29uZmlnIiwibWFrZVBhZ2UiLCJnZXRQYWdlcyIsImN1cnJlbnRQYWdlIiwicGFnZXMiLCJzdGFydFBhZ2UiLCJlbmRQYWdlIiwiaXNNYXhTaXplZCIsIm1heFNpemUiLCJyb3RhdGUiLCJwYWdlTGFiZWwiLCJmb3JjZUVsbGlwc2VzIiwiYm91bmRhcnlMaW5rTnVtYmVycyIsInByZXZpb3VzUGFnZVNldCIsInNlY29uZFBhZ2VMaW5rIiwiZmlyc3RQYWdlTGluayIsIm5leHRQYWdlU2V0Iiwic2Vjb25kVG9MYXN0UGFnZUxpbmsiLCJsYXN0UGFnZUxpbmsiLCIkcGFnZSIsImJvdW5kYXJ5TGlua3MiLCJkaXJlY3Rpb25MaW5rcyIsImZpcnN0VGV4dCIsImxhc3RUZXh0IiwicGxhY2VtZW50Q2xhc3NQcmVmaXgiLCJwb3B1cERlbGF5IiwicG9wdXBDbG9zZURlbGF5IiwidXNlQ29udGVudEV4cCIsInRyaWdnZXJNYXAiLCJvdXRzaWRlQ2xpY2siLCJub25lIiwiZ2xvYmFsT3B0aW9ucyIsInNldFRyaWdnZXJzIiwia2V5cHJlc3NMaXN0ZW5lciIsIm9wZW5lZFRvb2x0aXBzIiwidHRUeXBlIiwiZGVmYXVsdFRyaWdnZXJTaG93IiwiZ2V0VHJpZ2dlcnMiLCJzdGFydFN5bSIsImVuZFN5bSIsInRFbGVtIiwidG9vbHRpcExpbmtlciIsInRvb2x0aXBDdHJsIiwidG9nZ2xlVG9vbHRpcEJpbmQiLCJ0dFNjb3BlIiwiaGlkZVRvb2x0aXBCaW5kIiwic2hvd1Rvb2x0aXBCaW5kIiwiaGFzRW5hYmxlRXhwIiwiY2FuY2VsSGlkZSIsInByZXBhcmVUb29sdGlwIiwic2hvd1RpbWVvdXQiLCJjYW5jZWxTaG93IiwiaGlkZVRpbWVvdXQiLCJjcmVhdGVUb29sdGlwIiwiYXNzaWduSXNPcGVuIiwicG9zaXRpb25Ub29sdGlwIiwicG9zaXRpb25UaW1lb3V0IiwidHJhbnNpdGlvblRpbWVvdXQiLCJyZW1vdmVUb29sdGlwIiwidG9vbHRpcExpbmtlZFNjb3BlIiwicHJlcE9ic2VydmVycyIsInVucmVnaXN0ZXJPYnNlcnZlcnMiLCJhZGp1c3RtZW50VGltZW91dCIsImNvbnRlbnRQYXJzZSIsInBvcHVwQ2xhc3MiLCJsYXN0UGxhY2VtZW50IiwiY2xvc2VEZWxheSIsImlzT3BlblBhcnNlIiwib2JzZXJ2ZXJzIiwicmVwb3NpdGlvblNjaGVkdWxlZCIsImJvZHlIaWRlVG9vbHRpcEJpbmQiLCJwcmVwVHJpZ2dlcnMiLCJzaG93VHJpZ2dlcnMiLCJoaWRlVHJpZ2dlcnMiLCJ1bnJlZ2lzdGVyVHJpZ2dlcnMiLCJ0dFBvc2l0aW9uIiwiZWxlbWVudFBvcyIsImFkanVzdG1lbnQiLCJvcmlnU2NvcGUiLCJjb250ZW50RXhwIiwiYXBwZW5kVG9Cb2R5VmFsIiwiYXBwZW5kS2V5IiwidG9vbHRpcFRlbXBsYXRlVHJhbnNjbHVkZVNjb3BlIiwicGFyc2VBc1Jlc291cmNlVXJsIiwidWliVG9vbHRpcFRlbXBsYXRlVHJhbnNjbHVkZSIsInRvb2x0aXBBbmltYXRpb25DbGFzcyIsIiR1aWJUb29sdGlwIiwib3JpZ2luU2NvcGUiLCJ1aWJUaXRsZSIsInByb2dyZXNzQ29uZmlnIiwiZ2V0TWF4T3JEZWZhdWx0IiwibWF4UGFyYW0iLCJiYXJzIiwiYWRkQmFyIiwiYmFyIiwicmVjYWxjdWxhdGVQZXJjZW50YWdlIiwidG90YWxQZXJjZW50YWdlIiwidG90YWwiLCJ0b0ZpeGVkIiwicmVtb3ZlQmFyIiwicHJvZ3Jlc3NDdHJsIiwic3RhdGVPbiIsInN0YXRlT2ZmIiwiZW5hYmxlUmVzZXQiLCJ0aXRsZXMiLCJyYXRpbmdDb25maWciLCJ0bXBUaXRsZXMiLCJyYXRpbmdTdGF0ZXMiLCJidWlsZFRlbXBsYXRlT2JqZWN0cyIsInN0YXRlcyIsInJhdGUiLCJyZWFkb25seSIsIm5ld1ZpZXdWYWx1ZSIsIm9uSG92ZXIiLCJvbkxlYXZlIiwib25LZXlkb3duIiwicmF0aW5nQ3RybCIsImZpbmRUYWJJbmRleCIsInRhYnMiLCJvbGRJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1NlbGVjdGVkIiwib25EZXNlbGVjdCIsIiRzZWxlY3RlZEluZGV4Iiwib25TZWxlY3QiLCJhZGRUYWIiLCJuZXdBY3RpdmVJbmRleCIsInJlbW92ZVRhYiIsIm5ld0FjdGl2ZVRhYkluZGV4IiwianVzdGlmaWVkIiwidGFic2V0Q3RybCIsIiR0cmFuc2NsdWRlRm4iLCJpc1RhYkhlYWRpbmciLCJ1aWJUYWJDb250ZW50VHJhbnNjbHVkZSIsImhlYWRpbmdFbGVtZW50IiwiaG91clN0ZXAiLCJtaW51dGVTdGVwIiwic2Vjb25kU3RlcCIsInNob3dNZXJpZGlhbiIsInNob3dTZWNvbmRzIiwibWVyaWRpYW5zIiwicmVhZG9ubHlJbnB1dCIsIm1vdXNld2hlZWwiLCJhcnJvd2tleXMiLCJzaG93U3Bpbm5lcnMiLCJ0aW1lcGlja2VyQ29uZmlnIiwiZ2V0SG91cnNGcm9tVGVtcGxhdGUiLCJtZXJpZGlhbiIsImdldE1pbnV0ZXNGcm9tVGVtcGxhdGUiLCJnZXRTZWNvbmRzRnJvbVRlbXBsYXRlIiwicGFkIiwibm9QYWQiLCJrZXlib2FyZENoYW5nZSIsIm1ha2VWYWxpZCIsInVwZGF0ZVRlbXBsYXRlIiwiaG91cnNNb2RlbEN0cmwiLCJtaW51dGVzTW9kZWxDdHJsIiwic2Vjb25kc01vZGVsQ3RybCIsImludmFsaWRIb3VycyIsImludmFsaWRNaW51dGVzIiwiaW52YWxpZFNlY29uZHMiLCJwYWRIb3VycyIsImFkZFNlY29uZHNUb1NlbGVjdGVkIiwiYWRkU2Vjb25kcyIsImFkZE1pbnV0ZXMiLCJuZXdEYXRlIiwibW9kZWxJc0VtcHR5IiwiaG91cnNJbnB1dEVsIiwibWludXRlc0lucHV0RWwiLCJzZWNvbmRzSW5wdXRFbCIsInNldHVwTW91c2V3aGVlbEV2ZW50cyIsInNldHVwQXJyb3drZXlFdmVudHMiLCJzZXR1cElucHV0RXZlbnRzIiwibm9JbmNyZW1lbnRIb3VycyIsImluY3JlbWVudGVkU2VsZWN0ZWQiLCJub0RlY3JlbWVudEhvdXJzIiwiZGVjcmVtZW50ZWRTZWxlY3RlZCIsIm5vSW5jcmVtZW50TWludXRlcyIsIm5vRGVjcmVtZW50TWludXRlcyIsIm5vSW5jcmVtZW50U2Vjb25kcyIsIm5vRGVjcmVtZW50U2Vjb25kcyIsIm5vVG9nZ2xlTWVyaWRpYW4iLCJpc1Njcm9sbGluZ1VwIiwid2hlZWxEZWx0YSIsImRlbHRhWSIsImRldGFpbCIsImluY3JlbWVudEhvdXJzIiwiZGVjcmVtZW50SG91cnMiLCJpbmNyZW1lbnRNaW51dGVzIiwiZGVjcmVtZW50TWludXRlcyIsImluY3JlbWVudFNlY29uZHMiLCJkZWNyZW1lbnRTZWNvbmRzIiwidXBkYXRlSG91cnMiLCJ1cGRhdGVNaW51dGVzIiwidXBkYXRlU2Vjb25kcyIsImludmFsaWRhdGUiLCJzZXRTZWNvbmRzIiwidG9nZ2xlTWVyaWRpYW4iLCJ1aWJUaW1lcGlja2VyQ29uZmlnIiwidGltZXBpY2tlckN0cmwiLCJUWVBFQUhFQURfUkVHRVhQIiwiaXRlbU5hbWUiLCJ2aWV3TWFwcGVyIiwibW9kZWxNYXBwZXIiLCJvcmlnaW5hbFNjb3BlIiwiJCRkZWJvdW5jZSIsInR5cGVhaGVhZFBhcnNlciIsImZpcmVSZWNhbGN1bGF0aW5nIiwibW92ZUluUHJvZ3Jlc3MiLCJkZWJvdW5jZWRSZWNhbGN1bGF0ZSIsInJlY2FsY3VsYXRlUG9zaXRpb24iLCJIT1RfS0VZUyIsImV2ZW50RGVib3VuY2VUaW1lIiwibWluTGVuZ3RoIiwidHlwZWFoZWFkTWluTGVuZ3RoIiwid2FpdFRpbWUiLCJ0eXBlYWhlYWRXYWl0TXMiLCJpc0VkaXRhYmxlIiwidHlwZWFoZWFkRWRpdGFibGUiLCJpc0xvYWRpbmdTZXR0ZXIiLCJ0eXBlYWhlYWRMb2FkaW5nIiwiaXNTZWxlY3RFdmVudCIsInR5cGVhaGVhZFNob3VsZFNlbGVjdCIsInZhbHMiLCJvblNlbGVjdENhbGxiYWNrIiwidHlwZWFoZWFkT25TZWxlY3QiLCJpc1NlbGVjdE9uQmx1ciIsInR5cGVhaGVhZFNlbGVjdE9uQmx1ciIsImlzTm9SZXN1bHRzU2V0dGVyIiwidHlwZWFoZWFkTm9SZXN1bHRzIiwiaW5wdXRGb3JtYXR0ZXIiLCJ0eXBlYWhlYWRJbnB1dEZvcm1hdHRlciIsInR5cGVhaGVhZEFwcGVuZFRvQm9keSIsInR5cGVhaGVhZEFwcGVuZFRvIiwiZm9jdXNGaXJzdCIsInR5cGVhaGVhZEZvY3VzRmlyc3QiLCJzZWxlY3RPbkV4YWN0IiwidHlwZWFoZWFkU2VsZWN0T25FeGFjdCIsImlzT3BlblNldHRlciIsInR5cGVhaGVhZElzT3BlbiIsInNob3dIaW50IiwidHlwZWFoZWFkU2hvd0hpbnQiLCJwYXJzZWRNb2RlbCIsIiRzZXRNb2RlbFZhbHVlIiwicGFyc2VyUmVzdWx0IiwidWliVHlwZWFoZWFkIiwib2ZmRGVzdHJveSIsInBvcHVwSWQiLCJhcmlhLWF1dG9jb21wbGV0ZSIsImFyaWEtb3ducyIsImlucHV0c0NvbnRhaW5lciIsImhpbnRJbnB1dEVsZW0iLCJib3JkZXItY29sb3IiLCJib3gtc2hhZG93IiwiYmFja2dyb3VuZCIsImNvbG9yIiwidmVydGljYWwtYWxpZ24iLCJiYWNrZ3JvdW5kLWNvbG9yIiwicG9wVXBFbCIsIm1vdmUtaW4tcHJvZ3Jlc3MiLCJxdWVyeSIsImFzc2lnbi1pcy1vcGVuIiwidHlwZWFoZWFkVGVtcGxhdGVVcmwiLCJ0eXBlYWhlYWRQb3B1cFRlbXBsYXRlVXJsIiwicmVzZXRIaW50IiwicmVzZXRNYXRjaGVzIiwiYWN0aXZlSWR4IiwiZ2V0TWF0Y2hJZCIsImlucHV0SXNFeGFjdE1hdGNoIiwiaW5wdXRWYWx1ZSIsImdldE1hdGNoZXNBc3luYyIsIm9uQ3VycmVudFJlcXVlc3QiLCJkZWJvdW5jZVVwZGF0ZSIsImZpcnN0TGFiZWwiLCJzY2hlZHVsZVNlYXJjaFdpdGhUaW1lb3V0IiwiY2FuY2VsUHJldmlvdXNUaW1lb3V0IiwiJGl0ZW0iLCIkbW9kZWwiLCIkbGFiZWwiLCJ0eXBlYWhlYWRGb2N1c09uU2VsZWN0Iiwic2hvdWxkU2VsZWN0IiwiZWRpdGFibGUiLCJkaXNtaXNzQ2xpY2tIYW5kbGVyIiwiX21vZGVsQ3RybCIsIl9uZ01vZGVsT3B0aW9ucyIsImNhbmRpZGF0ZVZpZXdWYWx1ZSIsImVtcHR5Vmlld1ZhbHVlIiwicG9wdXBUZW1wbGF0ZVVybCIsImlzRHJvcGRvd25PcGVuIiwibWF0Y2hJZHgiLCJzZWxlY3RBY3RpdmUiLCJzZWxlY3RNYXRjaCIsInRwbEVsIiwiZXNjYXBlUmVnZXhwIiwicXVlcnlUb0VzY2FwZSIsImNvbnRhaW5zSHRtbCIsIm1hdGNoSXRlbSIsImlzU2FuaXRpemVQcmVzZW50IiwidHJ1c3RBc0h0bWwiLCIkJHVpYkNhcm91c2VsQ3NzIiwiJCR1aWJEYXRlcGlja2VyQ3NzIiwiJCR1aWJQb3NpdGlvbkNzcyIsIiQkdWliRGF0ZXBpY2tlcnBvcHVwQ3NzIiwiJCR1aWJUb29sdGlwQ3NzIiwiJCR1aWJUaW1lcGlja2VyQ3NzIiwiJCR1aWJUeXBlYWhlYWRDc3MiXSwibWFwcGluZ3MiOiJDQWNDLFNBQVVBLEVBQVFDLEdBRUssZ0JBQVhDLFNBQWlELGdCQUFuQkEsUUFB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QWtCLElBQ2xqRzFxRyxRQUFRci9DLE9BQU8sMkJBQTJCaVQsSUFBSSxZQUFhb3NDLFFBQVFrRSxRQUFRb2tELGdCQUFrQnRvRCxRQUFRMnFHLG9CQUFzQjNxRyxRQUFRMVcsUUFBUXpvQyxVQUFVMmdCLEtBQUssUUFBUTRULFFBQVEsK0RBQWdFNHFCLFFBQVEycUcsb0JBQXFCLElBQ3ZRM3FHLFFBQVFyL0MsT0FBTywwQkFBMEJpVCxJQUFJLFlBQWFvc0MsUUFBUWtFLFFBQVFva0QsZ0JBQWtCdG9ELFFBQVE0cUcsbUJBQXFCNXFHLFFBQVExVyxRQUFRem9DLFVBQVUyZ0IsS0FBSyxRQUFRNFQsUUFBUSxzRkFBdUY0cUIsUUFBUTRxRyxtQkFBb0IiLCJmaWxlIjoidmVuZG9yLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2Mi4yLjBcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wMS0wOFQyMDowMlpcbiAqL1xuXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDE4K1xuLy8gQ2FuJ3QgYmUgaW4gc3RyaWN0IG1vZGUsIHNldmVyYWwgbGlicyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXG4vL1widXNlIHN0cmljdFwiO1xudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjIuMi4wXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxuXHRzZWxlY3RvcjogXCJcIixcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cblxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxuXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcblx0XHR2YXIgcmVhbFN0cmluZ09iaiA9IG9iaiAmJiBvYmoudG9TdHJpbmcoKTtcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAoIHJlYWxTdHJpbmdPYmogLSBwYXJzZUZsb2F0KCByZWFsU3RyaW5nT2JqICkgKyAxICkgPj0gMDtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gTm90IHBsYWluIG9iamVjdHM6XG5cdFx0Ly8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxuXHRcdC8vIC0gRE9NIG5vZGVzXG5cdFx0Ly8gLSB3aW5kb3dcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlIGZ1bmN0aW9uIGhhc24ndCByZXR1cm5lZCBhbHJlYWR5LCB3ZSdyZSBjb25maWRlbnQgdGhhdFxuXHRcdC8vIHxvYmp8IGlzIGEgcGxhaW4gb2JqZWN0LCBjcmVhdGVkIGJ5IHt9IG9yIGNvbnN0cnVjdGVkIHdpdGggbmV3IE9iamVjdFxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wLCBpT1M8NiAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHR2YXIgc2NyaXB0LFxuXHRcdFx0aW5kaXJlY3QgPSBldmFsO1xuXG5cdFx0Y29kZSA9IGpRdWVyeS50cmltKCBjb2RlICk7XG5cblx0XHRpZiAoIGNvZGUgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBjb2RlIGluY2x1ZGVzIGEgdmFsaWQsIHByb2xvZ3VlIHBvc2l0aW9uXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxuXHRcdFx0Ly8gc2NyaXB0IHRhZyBpbnRvIHRoZSBkb2N1bWVudC5cblx0XHRcdGlmICggY29kZS5pbmRleE9mKCBcInVzZSBzdHJpY3RcIiApID09PSAxICkge1xuXHRcdFx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cdFx0XHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgYXZvaWQgdGhlIERPTSBub2RlIGNyZWF0aW9uLCBpbnNlcnRpb25cblx0XHRcdFx0Ly8gYW5kIHJlbW92YWwgYnkgdXNpbmcgYW4gaW5kaXJlY3QgZ2xvYmFsIGV2YWxcblxuXHRcdFx0XHRpbmRpcmVjdCggY29kZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuLy8gSlNIaW50IHdvdWxkIGVycm9yIG9uIHRoaXMgY29kZSBkdWUgdG8gdGhlIFN5bWJvbCBub3QgYmVpbmcgZGVmaW5lZCBpbiBFUzUuXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuanNoaW50cmMgd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBqdXN0IGRpc2FibGUgSlNIaW50IGZvciB0aGVzZVxuLy8gdGhyZWUgbGluZXMuXG4vKiBqc2hpbnQgaWdub3JlOiBzdGFydCAqL1xuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuLyoganNoaW50IGlnbm9yZTogZW5kICovXG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjIuMVxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNS0xMC0xN1xuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG5pZHNlbGVjdCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJlc2NhcGUsIFwiXFxcXCQmXCIgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0bmlkc2VsZWN0ID0gcmlkZW50aWZpZXIudGVzdCggbmlkICkgPyBcIiNcIiArIG5pZCA6IFwiW2lkPSdcIiArIG5pZCArIFwiJ11cIjtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZHNlbGVjdCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZGl2ICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcblx0XHRcdGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRkaXYgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXG5cdFx0XHQoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApO1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBwYXJlbnQsXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIChwYXJlbnQgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgcGFyZW50LnRvcCAhPT0gcGFyZW50ICkge1xuXHRcdC8vIFN1cHBvcnQ6IElFIDExXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBtID8gWyBtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZGl2LCBcImRpdlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsgZGlyIF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRzdXBwb3J0LmdldEJ5SWQgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW1xcdy1dKylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8gKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cblx0fVxuXG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHR9ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRyZXR1cm4gZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXSA6XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHRcdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQgKTtcblx0XHRyZXQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3RvciArIFwiIFwiICsgc2VsZWN0b3IgOiBzZWxlY3Rvcjtcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0qKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBCbGFja2JlcnJ5IDQuNlxuXHRcdFx0XHRcdC8vIGdFQklEIHJldHVybnMgbm9kZXMgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoIzY5NjMpXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gdGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSBzZWxlY3Rvci5jb250ZXh0O1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHBvcyA/XG5cdFx0XHRcdFx0cG9zLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdHdoaXRlID0gKCAvXFxTKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgbGlzdGVuZXIgbGlzdCwgZmluYWwgc3RhdGVcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIFwicmVqZWN0ZWRcIiBdLFxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZFsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdIGZvciBmb3J3YXJkaW5nIGFjdGlvbnMgdG8gbmV3RGVmZXJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdHByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cblx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcblx0XHRcdFx0fSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHByb21pc2UgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzdWJvcmRpbmF0ZSAvKiAsIC4uLiwgc3Vib3JkaW5hdGVOICovICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGxlbmd0aCA9IHJlc29sdmVWYWx1ZXMubGVuZ3RoLFxuXG5cdFx0XHQvLyB0aGUgY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBsZW5ndGggIT09IDEgfHxcblx0XHRcdFx0KCBzdWJvcmRpbmF0ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggc3Vib3JkaW5hdGUucHJvbWlzZSApICkgPyBsZW5ndGggOiAwLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkLlxuXHRcdFx0Ly8gSWYgcmVzb2x2ZVZhbHVlcyBjb25zaXN0IG9mIG9ubHkgYSBzaW5nbGUgRGVmZXJyZWQsIGp1c3QgdXNlIHRoYXQuXG5cdFx0XHRkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIFVwZGF0ZSBmdW5jdGlvbiBmb3IgYm90aCByZXNvbHZlIGFuZCBwcm9ncmVzcyB2YWx1ZXNcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRjb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoIHZhbHVlcyA9PT0gcHJvZ3Jlc3NWYWx1ZXMgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMsIHByb2dyZXNzQ29udGV4dHMsIHJlc29sdmVDb250ZXh0cztcblxuXHRcdC8vIEFkZCBsaXN0ZW5lcnMgdG8gRGVmZXJyZWQgc3Vib3JkaW5hdGVzOyB0cmVhdCBvdGhlcnMgYXMgcmVzb2x2ZWRcblx0XHRpZiAoIGxlbmd0aCA+IDEgKSB7XG5cdFx0XHRwcm9ncmVzc1ZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRwcm9ncmVzc0NvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0LnByb2dyZXNzKCB1cGRhdGVGdW5jKCBpLCBwcm9ncmVzc0NvbnRleHRzLCBwcm9ncmVzc1ZhbHVlcyApIClcblx0XHRcdFx0XHRcdC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0ICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0LS1yZW1haW5pbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBJZiB3ZSdyZSBub3Qgd2FpdGluZyBvbiBhbnl0aGluZywgcmVzb2x2ZSB0aGUgbWFzdGVyXG5cdFx0aWYgKCAhcmVtYWluaW5nICkge1xuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3Q7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHQvLyBBZGQgdGhlIGNhbGxiYWNrXG5cdGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcblx0XHRpZiAoIGhvbGQgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cblx0XHQvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHNcblx0XHRpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHtcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VySGFuZGxlciggXCJyZWFkeVwiICk7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkub2ZmKCBcInJlYWR5XCIgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuLyoqXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuICovXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcblx0aWYgKCAhcmVhZHlMaXN0ICkge1xuXG5cdFx0cmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuXHRcdC8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuXHRcdC8vIFN1cHBvcnQ6IElFOS0xMCBvbmx5XG5cdFx0Ly8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0XHRcdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHRcdFx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XG59O1xuXG4vLyBLaWNrIG9mZiB0aGUgRE9NIHJlYWR5IGNoZWNrIGV2ZW4gaWYgdGhlIHVzZXIgZG9lcyBub3RcbmpRdWVyeS5yZWFkeS5wcm9taXNlKCk7XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGFpbmFibGUgP1xuXHRcdGVsZW1zIDpcblxuXHRcdC8vIEdldHNcblx0XHRidWxrID9cblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxuXHRcdFx0bGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdC8qIGpzaGludCAtVzAxOCAqL1xuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0cmVnaXN0ZXI6IGZ1bmN0aW9uKCBvd25lciwgaW5pdGlhbCApIHtcblx0XHR2YXIgdmFsdWUgPSBpbml0aWFsIHx8IHt9O1xuXG5cdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUgcHJvcGVydHlcblx0XHQvLyBjb25maWd1cmFiaWxpdHkgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdC8vIGRlbGV0ZWQgd2l0aCB0aGUgZGVsZXRlIG9wZXJhdG9yXG5cdFx0fSBlbHNlIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0cmV0dXJuIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0fSxcblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIHByb3AgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGtleSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgc3RvcmVkO1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRzdG9yZWQgPSB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXG5cdFx0XHRyZXR1cm4gc3RvcmVkICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRzdG9yZWQgOiB0aGlzLmdldCggb3duZXIsIGpRdWVyeS5jYW1lbENhc2UoIGtleSApICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLCBuYW1lLCBjYW1lbCxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnJlZ2lzdGVyKCBvd25lciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIFwibmFtZVwiIGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2hlbiBkYXRhIGlzIGluaXRpYWxseSBjcmVhdGVkLCB2aWEgKFwia2V5XCIsIFwidmFsXCIpIHNpZ25hdHVyZSxcblx0XHRcdFx0Ly8ga2V5cyB3aWxsIGJlIGNvbnZlcnRlZCB0byBjYW1lbENhc2UuXG5cdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIF9ob3dfIGEga2V5IHdhcyBhZGRlZCwgcmVtb3ZlXG5cdFx0XHRcdC8vIGJvdGggcGxhaW4ga2V5IGFuZCBjYW1lbENhc2Uga2V5LiAjMTI3ODZcblx0XHRcdFx0Ly8gVGhpcyB3aWxsIG9ubHkgcGVuYWxpemUgdGhlIGFycmF5IGFyZ3VtZW50IHBhdGguXG5cdFx0XHRcdG5hbWUgPSBrZXkuY29uY2F0KCBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhbWVsID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gVHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cblx0XHRcdFx0aWYgKCBrZXkgaW4gY2FjaGUgKSB7XG5cdFx0XHRcdFx0bmFtZSA9IFsga2V5LCBjYW1lbCBdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0bmFtZSA9IGNhbWVsO1xuXHRcdFx0XHRcdG5hbWUgPSBuYW1lIGluIGNhY2hlID9cblx0XHRcdFx0XHRcdFsgbmFtZSBdIDogKCBuYW1lLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsgbmFtZVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9IDM1LTQ1K1xuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDdcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhID09PSBcInRydWVcIiA/IHRydWUgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcIm51bGxcIiA/IG51bGwgOlxuXG5cdFx0XHRcdFx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0XHRcdFx0XHQrZGF0YSArIFwiXCIgPT09IGRhdGEgPyArZGF0YSA6XG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XG5cdFx0XHRcdFx0ZGF0YTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGEsIGNhbWVsS2V5O1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgYXMtaXNcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICkgfHxcblxuXHRcdFx0XHRcdC8vIFRyeSB0byBmaW5kIGRhc2hlZCBrZXkgaWYgaXQgZXhpc3RzIChnaC0yNzc5KVxuXHRcdFx0XHRcdC8vIFRoaXMgaXMgZm9yIDIuMi54IG9ubHlcblx0XHRcdFx0XHRkYXRhVXNlci5nZXQoIGVsZW0sIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKSApO1xuXG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FtZWxLZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBjYW1lbGl6ZWRcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwgY2FtZWxLZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwgY2FtZWxLZXksIHVuZGVmaW5lZCApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEZpcnN0LCBhdHRlbXB0IHRvIHN0b3JlIGEgY29weSBvciByZWZlcmVuY2Ugb2YgYW55XG5cdFx0XHRcdC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cblx0XHRcdFx0dmFyIGRhdGEgPSBkYXRhVXNlci5nZXQoIHRoaXMsIGNhbWVsS2V5ICk7XG5cblx0XHRcdFx0Ly8gRm9yIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUgaW50ZXJvcCwgd2UgaGF2ZSB0b1xuXHRcdFx0XHQvLyBzdG9yZSBwcm9wZXJ0eSBuYW1lcyB3aXRoIGRhc2hlcyBpbiBhIGNhbWVsQ2FzZSBmb3JtLlxuXHRcdFx0XHQvLyBUaGlzIG1pZ2h0IG5vdCBhcHBseSB0byBhbGwgcHJvcGVydGllcy4uLipcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBjYW1lbEtleSwgdmFsdWUgKTtcblxuXHRcdFx0XHQvLyAqLi4uIEluIHRoZSBjYXNlIG9mIHByb3BlcnRpZXMgdGhhdCBtaWdodCBfYWN0dWFsbHlfXG5cdFx0XHRcdC8vIGhhdmUgZGFzaGVzLCB3ZSBuZWVkIHRvIGFsc28gc3RvcmUgYSBjb3B5IG9mIHRoYXRcblx0XHRcdFx0Ly8gdW5jaGFuZ2VkIHByb3BlcnR5LlxuXHRcdFx0XHRpZiAoIGtleS5pbmRleE9mKCBcIi1cIiApID4gLTEgJiYgZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW4gbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCIgfHxcblx0XHRcdCFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0d2Vlbi5jdXIoKTsgfSA6XG5cdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTsgfSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHR9IHdoaWxlIChcblx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXG5cdFx0KTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW1xcdzotXSspLyApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRTlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0ID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgP1xuXHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0dHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiA/XG5cdFx0XHRcdGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0W107XG5cblx0cmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cblx0XHRqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKSA6XG5cdFx0cmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wLTQuMywgU2FmYXJpPD01LjFcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xLCBBbmRyb2lkPDQuMlxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBtYXRjaGVzLCBzZWwsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBTdXBwb3J0IChhdCBsZWFzdCk6IENocm9tZSwgSUU5XG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApXG5cdFx0Ly9cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PD00Mitcblx0XHQvLyBBdm9pZCBub24tbGVmdC1jbGljayBpbiBGRiBidXQgZG9uJ3QgYmxvY2sgSUUgcmFkaW8gZXZlbnRzICgjMzg2MSwgZ2gtMjM0Mylcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmXG5cdFx0XHQoIGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiB8fCBpc05hTiggZXZlbnQuYnV0dG9uICkgfHwgZXZlbnQuYnV0dG9uIDwgMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICggY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiApICkge1xuXHRcdFx0XHRcdG1hdGNoZXMgPSBbXTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50XG5cdHByb3BzOiAoIFwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZGV0YWlsIGV2ZW50UGhhc2UgXCIgK1xuXHRcdFwibWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiICkuc3BsaXQoIFwiIFwiICksXG5cblx0Zml4SG9va3M6IHt9LFxuXG5cdGtleUhvb2tzOiB7XG5cdFx0cHJvcHM6IFwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KCBcIiBcIiApLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRtb3VzZUhvb2tzOiB7XG5cdFx0cHJvcHM6ICggXCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIFwiICtcblx0XHRcdFwic2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiICkuc3BsaXQoIFwiIFwiICksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXHRcdFx0dmFyIGV2ZW50RG9jLCBkb2MsIGJvZHksXG5cdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbjtcblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxuXHRcdFx0aWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcblx0XHRcdFx0ZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0XHRib2R5ID0gZXZlbnREb2MuYm9keTtcblxuXHRcdFx0XHRldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggK1xuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCApO1xuXHRcdFx0XHRldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgK1xuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLmNsaWVudFRvcCAgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCAgfHwgMCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCAhZml4SG9vayApIHtcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XG5cdFx0XHRcdHt9O1xuXHRcdH1cblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xuXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cblx0XHRpID0gY29weS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBDb3Jkb3ZhIDIuNSAoV2ViS2l0KSAoIzEzMjU1KVxuXHRcdC8vIEFsbCBldmVudHMgc2hvdWxkIGhhdmUgYSB0YXJnZXQ7IENvcmRvdmEgZGV2aWNlcmVhZHkgZG9lc24ndFxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGRvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjArLCBDaHJvbWU8Mjhcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpeEhvb2suZmlsdGVyID8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzotXSspW14+XSopXFwvPi9naSxcblxuXHQvLyBTdXBwb3J0OiBJRSAxMC0xMSwgRWRnZSAxMDI0MCtcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0gMzUtNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBLZWVwIGRvbU1hbmlwIGV4cG9zZWQgdW50aWwgMy4wIChnaC0yMjI1KVxuXHRkb21NYW5pcDogZG9tTWFuaXAsXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Ncblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xuXG5cbnZhciBpZnJhbWUsXG5cdGVsZW1kaXNwbGF5ID0ge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveFxuXHRcdC8vIFdlIGhhdmUgdG8gcHJlLWRlZmluZSB0aGVzZSB2YWx1ZXMgZm9yIEZGICgjMTAyMjcpXG5cdFx0SFRNTDogXCJibG9ja1wiLFxuXHRcdEJPRFk6IFwiYmxvY2tcIlxuXHR9O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZG9jIERvY3VtZW50IG9iamVjdFxuICovXG5cbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XG5cdHZhciBlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXG5cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xuXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxuXHRlbGVtLmRldGFjaCgpO1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG4vKipcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xuXHR2YXIgZG9jID0gZG9jdW1lbnQsXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xuXG5cdGlmICggIWRpc3BsYXkgKSB7XG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxuXHRcdFx0aWZyYW1lID0gKCBpZnJhbWUgfHwgalF1ZXJ5KCBcIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz5cIiApIClcblx0XHRcdFx0LmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XG5cblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxuXHRcdFx0ZG9jID0gaWZyYW1lWyAwIF0uY29udGVudERvY3VtZW50O1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0ZG9jLndyaXRlKCk7XG5cdFx0XHRkb2MuY2xvc2UoKTtcblxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblx0XHRcdGlmcmFtZS5kZXRhY2goKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXlcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cdH1cblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw9MTErLCBGaXJlZm94PD0zMCsgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXG5cdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdH1cblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFRoaXMgdGVzdCBpcyBleGVjdXRlZCBvbmx5IG9uY2UgYnV0IHdlIHN0aWxsIGRvIG1lbW9pemluZ1xuXHRcdFx0Ly8gc2luY2Ugd2UgY2FuIHVzZSB0aGUgYm94U2l6aW5nUmVsaWFibGUgcHJlLWNvbXB1dGluZy5cblx0XHRcdC8vIE5vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHRlc3Qgd2FzIGFscmVhZHkgcGVyZm9ybWVkLCB0aG91Z2guXG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAtNC4zXG5cdFx0XHQvLyBXZSdyZSBjaGVja2luZyBmb3IgYm94U2l6aW5nUmVsaWFibGVWYWwgaGVyZSBpbnN0ZWFkIG9mIHBpeGVsTWFyZ2luUmlnaHRWYWxcblx0XHRcdC8vIHNpbmNlIHRoYXQgY29tcHJlc3NlcyBiZXR0ZXIgYW5kIHRoZXkncmUgY29tcHV0ZWQgdG9nZXRoZXIgYW55d2F5LlxuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggb25seSwgQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSAzN1xuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0Ly8gQ2hlY2sgaWYgZGl2IHdpdGggZXhwbGljaXQgd2lkdGggYW5kIG5vIG1hcmdpbi1yaWdodCBpbmNvcnJlY3RseVxuXHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXG5cdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcblx0XHRcdC8vIFRoaXMgc3VwcG9ydCBmdW5jdGlvbiBpcyBvbmx5IGV4ZWN1dGVkIG9uY2Ugc28gbm8gbWVtb2l6aW5nIGlzIG5lZWRlZC5cblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdG1hcmdpbkRpdiA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcblx0XHRcdG1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcblx0XHRcdFx0XCJkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xuXHRcdFx0bWFyZ2luRGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gbWFyZ2luRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XG5cdFx0XHRkaXYuc3R5bGUud2lkdGggPSBcIjFweFwiO1xuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdFx0cmV0ID0gIXBhcnNlRmxvYXQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBtYXJnaW5EaXYgKS5tYXJnaW5SaWdodCApO1xuXG5cdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBtYXJnaW5EaXYgKTtcblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpICgjMTI1MzcpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk9cIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApID9cblxuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRcdDQgOlxuXG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXG5cdFx0dmFsID0gMDtcblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogSUUxMSBvbmx5XG5cdC8vIEluIElFIDExIGZ1bGxzY3JlZW4gZWxlbWVudHMgaW5zaWRlIG9mIGFuIGlmcmFtZSBoYXZlXG5cdC8vIDEwMHggdG9vIHNtYWxsIGRpbWVuc2lvbnMgKGdoLTE3NjQpLlxuXHRpZiAoIGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQgJiYgd2luZG93LnRvcCAhPT0gd2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUxMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRpZiAoIGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHR2YWwgPSBNYXRoLnJvdW5kKCBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpWyBuYW1lIF0gKiAxMDAgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApO1xuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzXG5cdFx0XHQvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcblx0XHRcdC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5hY2Nlc3MoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcIm9sZGRpc3BsYXlcIixcblx0XHRcdFx0XHRkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XG5cblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgfHwgIWhpZGRlbiApIHtcblx0XHRcdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XCJvbGRkaXNwbGF5XCIsXG5cdFx0XHRcdFx0aGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcFxuXHQvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgXCJcIiA6IFwibm9uZVwiO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cdFx0XHRcdFx0ZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuIHN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW4oIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCB0aW1lcklkLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHQvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsIGRpc3BsYXksIGNoZWNrRGlzcGxheSxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW4oIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIEhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3Ncblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUU5LTEwIGRvIG5vdFxuXHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxuXHRcdC8vIGFuaW1hdGlvbnMgb24gaW5saW5lIGVsZW1lbnRzIHRoYXQgYXJlIGhhdmluZyB3aWR0aC9oZWlnaHQgYW5pbWF0ZWRcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblxuXHRcdC8vIFRlc3QgZGVmYXVsdCBkaXNwbGF5IGlmIGRpc3BsYXkgaXMgY3VycmVudGx5IFwibm9uZVwiXG5cdFx0Y2hlY2tEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgP1xuXHRcdFx0ZGF0YVByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xuXG5cdFx0aWYgKCBjaGVja0Rpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBzaG93L2hpZGUgcGFzc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGRhdGFTaG93IGxlZnQgb3ZlciBmcm9tIGEgc3RvcHBlZCBoaWRlIG9yIHNob3dcblx0XHRcdFx0Ly8gYW5kIHdlIGFyZSBnb2luZyB0byBwcm9jZWVkIHdpdGggc2hvdywgd2Ugc2hvdWxkIHByZXRlbmQgdG8gYmUgaGlkZGVuXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXG5cdFx0Ly8gQW55IG5vbi1meCB2YWx1ZSBzdG9wcyB1cyBmcm9tIHJlc3RvcmluZyB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwge30gKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSBzdGF0ZSBpZiBpdHMgdG9nZ2xlIC0gZW5hYmxlcyAuc3RvcCgpLnRvZ2dsZSgpIHRvIFwicmV2ZXJzZVwiXG5cdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdH1cblx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdGpRdWVyeSggZWxlbSApLnNob3coKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuaGlkZSgpO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHByb3A7XG5cblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXG5cdFx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0XHR0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0Ly8gSWYgdGhpcyBpcyBhIG5vb3AgbGlrZSAuaGlkZSgpLmhpZGUoKSwgcmVzdG9yZSBhbiBvdmVyd3JpdHRlbiBkaXNwbGF5IHZhbHVlXG5cdH0gZWxzZSBpZiAoICggZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSApID09PSBcImlubGluZVwiICkge1xuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90d2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSBcIm51bWJlclwiID9cblx0XHRvcHQuZHVyYXRpb24gOiBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/XG5cdFx0XHRqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW4gKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCAhdGltZXJJZCApIHtcblx0XHR0aW1lcklkID0gd2luZG93LnNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdHdpbmRvdy5jbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cblx0dGltZXJJZCA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cDovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IGlPUzw9NS4xLCBBbmRyb2lkPD00LjIrXG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw9Mi4zXG5cdC8vIE9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlIGluY29ycmVjdGx5IG1hcmtlZCBhcyBkaXNhYmxlZFxuXHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xuXHRzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSwgcHJvcE5hbWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2Vcblx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZTtcblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdHJldHVybiB0YWJpbmRleCA/XG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRhYmluZGV4LCAxMCApIDpcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5ocmVmID9cblx0XHRcdFx0XHRcdFx0MCA6XG5cdFx0XHRcdFx0XHRcdC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxudmFyIHJjbGFzcyA9IC9bXFx0XFxyXFxuXFxmXS9nO1xuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCBcIiBcIiArIGN1clZhbHVlICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIFwiIFwiICsgY3VyVmFsdWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgZ2V0Q2xhc3MoIGVsZW0gKSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTFcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICkgOlxuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTwxMVxuXHRcdFx0XHQvLyBvcHRpb24udmFsdWUgbm90IHRyaW1tZWQgKCMxNDg1OClcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS50cmltKCBlbGVtLnZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xuXHRcdFx0XHRcdFx0bWF4IDpcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0KCBzdXBwb3J0Lm9wdERpc2FibGVkID9cblx0XHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT09IG51bGwgKSAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblxuXHRcdFx0XHQvLyBQcmV2aW91c2x5LCBgb3JpZ2luYWxFdmVudDoge31gIHdhcyBzZXQgaGVyZSwgc28gc3RvcFByb3BhZ2F0aW9uIGNhbGxcblx0XHRcdFx0Ly8gd291bGQgbm90IGJlIHRyaWdnZXJlZCBvbiBkb25vciBldmVudCwgc2luY2UgaW4gb3VyIG93blxuXHRcdFx0XHQvLyBqUXVlcnkuZXZlbnQuc3RvcFByb3BhZ2F0aW9uIGZ1bmN0aW9uIHdlIGhhZCBhIGNoZWNrIGZvciBleGlzdGVuY2Ugb2Zcblx0XHRcdFx0Ly8gb3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24gbWV0aG9kLCBzbywgY29uc2VxdWVudGx5IGl0IHdvdWxkIGJlIGEgbm9vcC5cblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gQnV0IG5vdywgdGhpcyBcInNpbXVsYXRlXCIgZnVuY3Rpb24gaXMgdXNlZCBvbmx5IGZvciBldmVudHNcblx0XHRcdFx0Ly8gZm9yIHdoaWNoIHN0b3BQcm9wYWdhdGlvbigpIGlzIG5vb3AsIHNvIHRoZXJlIGlzIG5vIG5lZWQgZm9yIHRoYXQgYW55bW9yZS5cblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gRm9yIHRoZSBjb21wYXQgYnJhbmNoIHRob3VnaCwgZ3VhcmQgZm9yIFwiY2xpY2tcIiBhbmQgXCJzdWJtaXRcIlxuXHRcdFx0XHQvLyBldmVudHMgaXMgc3RpbGwgdXNlZCwgYnV0IHdhcyBtb3ZlZCB0byBqUXVlcnkuZXZlbnQuc3RvcFByb3BhZ2F0aW9uIGZ1bmN0aW9uXG5cdFx0XHRcdC8vIGJlY2F1c2UgYG9yaWdpbmFsRXZlbnRgIHNob3VsZCBwb2ludCB0byB0aGUgb3JpZ2luYWwgZXZlbnQgZm9yIHRoZSBjb25zdGFuY3lcblx0XHRcdFx0Ly8gd2l0aCBvdGhlciBldmVudHMgYW5kIGZvciBtb3JlIGZvY3VzZWQgbG9naWNcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblxuXHRcdGlmICggZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSwgU2FmYXJpXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG4vLyBXb3JrYXJvdW5kIGZhaWx1cmUgdG8gc3RyaW5nLWNhc3QgbnVsbCBpbnB1dFxualF1ZXJ5LnBhcnNlSlNPTiA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSArIFwiXCIgKTtcbn07XG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIFRoZSBqcVhIUiBzdGF0ZVxuXHRcdFx0c3RhdGUgPSAwLFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xuXHRcdGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xuXHRcdGpxWEhSLmVycm9yID0ganFYSFIuZmFpbDtcblxuXHRcdC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKS5yZXBsYWNlKCByaGFzaCwgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOC0xMStcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gaWYgdXJsIGlzIG1hbGZvcm1lZCwgZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTgtMTErXG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybDtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSAoIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGEgKTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcblx0XHRcdFx0XHRjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgbm9uY2UrKyApIDpcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcblx0XHRcdFx0XHRjYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyBub25jZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBzdGF0ZSA9PT0gMiApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Zm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHN0YXRlID0gMTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lXG5cdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cblx0XHRcdFx0Ly8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIENhbGxlZCBvbmNlXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXRlIGlzIFwiZG9uZVwiIG5vd1xuXHRcdFx0c3RhdGUgPSAyO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0XHR9XG5cdFx0fSApLmVuZCgpO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHQvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMlxuXHQvLyBPcGVyYSByZXBvcnRzIG9mZnNldFdpZHRocyBhbmQgb2Zmc2V0SGVpZ2h0cyBsZXNzIHRoYW4gemVybyBvbiBzb21lIGVsZW1lbnRzXG5cdC8vIFVzZSBPUiBpbnN0ZWFkIG9mIEFORCBhcyB0aGUgZWxlbWVudCBpcyBub3QgdmlzaWJsZSBpZiBlaXRoZXIgaXMgdHJ1ZVxuXHQvLyBTZWUgdGlja2V0cyAjMTA0MDYgYW5kICMxMzEzMlxuXHRyZXR1cm4gZWxlbS5vZmZzZXRXaWR0aCA+IDAgfHwgZWxlbS5vZmZzZXRIZWlnaHQgPiAwIHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggPiAwO1xufTtcblxuXG5cblxudmFyIHIyMCA9IC8lMjAvZyxcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZVxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLlxuXHRpZiAoIHRyYWRpdGlvbmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdHJldHVybiB2YWwgPT0gbnVsbCA/XG5cdFx0XHRcdG51bGwgOlxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8ICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgP1xuXHRcdGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApIDpcblx0XHRkb2N1bWVudCApO1xuXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXG52YXIgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZDtcblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0aWYgKCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiICYmIF9sb2FkICkge1xuXHRcdHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH1cblxuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggc2VsZiwgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbi8qKlxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcblxuXHRcdGlmICggIWRvYyApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xuXHRcdFx0cmV0dXJuIGJveDtcblx0XHR9XG5cblx0XHRib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogYm94LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0Ly8gU3VidHJhY3Qgb2Zmc2V0UGFyZW50IHNjcm9sbCBwb3NpdGlvbnNcblx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApIC1cblx0XHRcdFx0b2Zmc2V0UGFyZW50LnNjcm9sbFRvcCgpO1xuXHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKSAtXG5cdFx0XHRcdG9mZnNldFBhcmVudC5zY3JvbGxMZWZ0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaTw3LTgrLCBDaHJvbWU8MzctNDQrXG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yMjkyODBcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQXMgb2YgNS84LzIwMTIgdGhpcyB3aWxsIHlpZWxkIGluY29ycmVjdCByZXN1bHRzIGZvciBNb2JpbGUgU2FmYXJpLCBidXQgdGhlcmVcblx0XHRcdFx0XHQvLyBpc24ndCBhIHdob2xlIGxvdCB3ZSBjYW4gZG8uIFNlZSBwdWxsIHJlcXVlc3QgYXQgdGhpcyBVUkwgZm9yIGRpc2N1c3Npb246XG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC83NjRcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUsIG51bGwgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblx0c2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubGVuZ3RoO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5hbmRTZWxmID0galF1ZXJ5LmZuLmFkZEJhY2s7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxucmV0dXJuIGpRdWVyeTtcbn0pKTtcbiIsIi8qIVxuICogalF1ZXJ5IFZhbGlkYXRpb24gUGx1Z2luIHYxLjE0LjBcbiAqXG4gKiBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1IErDtnJuIFphZWZmZXJlclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKi9cbihmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0XHRkZWZpbmUoIFtcImpxdWVyeVwiXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGpRdWVyeSApO1xuXHR9XG59KGZ1bmN0aW9uKCAkICkge1xuXG4kLmV4dGVuZCgkLmZuLCB7XG5cdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy92YWxpZGF0ZS9cblx0dmFsaWRhdGU6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gaWYgbm90aGluZyBpcyBzZWxlY3RlZCwgcmV0dXJuIG5vdGhpbmc7IGNhbid0IGNoYWluIGFueXdheVxuXHRcdGlmICggIXRoaXMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBvcHRpb25zICYmIG9wdGlvbnMuZGVidWcgJiYgd2luZG93LmNvbnNvbGUgKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybiggXCJOb3RoaW5nIHNlbGVjdGVkLCBjYW4ndCB2YWxpZGF0ZSwgcmV0dXJuaW5nIG5vdGhpbmcuXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBjaGVjayBpZiBhIHZhbGlkYXRvciBmb3IgdGhpcyBmb3JtIHdhcyBhbHJlYWR5IGNyZWF0ZWRcblx0XHR2YXIgdmFsaWRhdG9yID0gJC5kYXRhKCB0aGlzWyAwIF0sIFwidmFsaWRhdG9yXCIgKTtcblx0XHRpZiAoIHZhbGlkYXRvciApIHtcblx0XHRcdHJldHVybiB2YWxpZGF0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIG5vdmFsaWRhdGUgdGFnIGlmIEhUTUw1LlxuXHRcdHRoaXMuYXR0ciggXCJub3ZhbGlkYXRlXCIsIFwibm92YWxpZGF0ZVwiICk7XG5cblx0XHR2YWxpZGF0b3IgPSBuZXcgJC52YWxpZGF0b3IoIG9wdGlvbnMsIHRoaXNbIDAgXSApO1xuXHRcdCQuZGF0YSggdGhpc1sgMCBdLCBcInZhbGlkYXRvclwiLCB2YWxpZGF0b3IgKTtcblxuXHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLm9uc3VibWl0ICkge1xuXG5cdFx0XHR0aGlzLm9uKCBcImNsaWNrLnZhbGlkYXRlXCIsIFwiOnN1Ym1pdFwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLnN1Ym1pdEhhbmRsZXIgKSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGFsbG93IHN1cHByZXNzaW5nIHZhbGlkYXRpb24gYnkgYWRkaW5nIGEgY2FuY2VsIGNsYXNzIHRvIHRoZSBzdWJtaXQgYnV0dG9uXG5cdFx0XHRcdGlmICggJCggdGhpcyApLmhhc0NsYXNzKCBcImNhbmNlbFwiICkgKSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmNhbmNlbFN1Ym1pdCA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBhbGxvdyBzdXBwcmVzc2luZyB2YWxpZGF0aW9uIGJ5IGFkZGluZyB0aGUgaHRtbDUgZm9ybW5vdmFsaWRhdGUgYXR0cmlidXRlIHRvIHRoZSBzdWJtaXQgYnV0dG9uXG5cdFx0XHRcdGlmICggJCggdGhpcyApLmF0dHIoIFwiZm9ybW5vdmFsaWRhdGVcIiApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmNhbmNlbFN1Ym1pdCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHQvLyB2YWxpZGF0ZSB0aGUgZm9ybSBvbiBzdWJtaXRcblx0XHRcdHRoaXMub24oIFwic3VibWl0LnZhbGlkYXRlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCB2YWxpZGF0b3Iuc2V0dGluZ3MuZGVidWcgKSB7XG5cdFx0XHRcdFx0Ly8gcHJldmVudCBmb3JtIHN1Ym1pdCB0byBiZSBhYmxlIHRvIHNlZSBjb25zb2xlIG91dHB1dFxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZnVuY3Rpb24gaGFuZGxlKCkge1xuXHRcdFx0XHRcdHZhciBoaWRkZW4sIHJlc3VsdDtcblx0XHRcdFx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyICkge1xuXHRcdFx0XHRcdFx0aWYgKCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uICkge1xuXHRcdFx0XHRcdFx0XHQvLyBpbnNlcnQgYSBoaWRkZW4gaW5wdXQgYXMgYSByZXBsYWNlbWVudCBmb3IgdGhlIG1pc3Npbmcgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRoaWRkZW4gPSAkKCBcIjxpbnB1dCB0eXBlPSdoaWRkZW4nLz5cIiApXG5cdFx0XHRcdFx0XHRcdFx0LmF0dHIoIFwibmFtZVwiLCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uLm5hbWUgKVxuXHRcdFx0XHRcdFx0XHRcdC52YWwoICQoIHZhbGlkYXRvci5zdWJtaXRCdXR0b24gKS52YWwoKSApXG5cdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFRvKCB2YWxpZGF0b3IuY3VycmVudEZvcm0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJlc3VsdCA9IHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyLmNhbGwoIHZhbGlkYXRvciwgdmFsaWRhdG9yLmN1cnJlbnRGb3JtLCBldmVudCApO1xuXHRcdFx0XHRcdFx0aWYgKCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uICkge1xuXHRcdFx0XHRcdFx0XHQvLyBhbmQgY2xlYW4gdXAgYWZ0ZXJ3YXJkczsgdGhhbmtzIHRvIG5vLWJsb2NrLXNjb3BlLCBoaWRkZW4gY2FuIGJlIHJlZmVyZW5jZWRcblx0XHRcdFx0XHRcdFx0aGlkZGVuLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCByZXN1bHQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBwcmV2ZW50IHN1Ym1pdCBmb3IgaW52YWxpZCBmb3JtcyBvciBjdXN0b20gc3VibWl0IGhhbmRsZXJzXG5cdFx0XHRcdGlmICggdmFsaWRhdG9yLmNhbmNlbFN1Ym1pdCApIHtcblx0XHRcdFx0XHR2YWxpZGF0b3IuY2FuY2VsU3VibWl0ID0gZmFsc2U7XG5cdFx0XHRcdFx0cmV0dXJuIGhhbmRsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggdmFsaWRhdG9yLmZvcm0oKSApIHtcblx0XHRcdFx0XHRpZiAoIHZhbGlkYXRvci5wZW5kaW5nUmVxdWVzdCApIHtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5mb3JtU3VibWl0dGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGhhbmRsZSgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5mb2N1c0ludmFsaWQoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZGF0b3I7XG5cdH0sXG5cdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy92YWxpZC9cblx0dmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2YWxpZCwgdmFsaWRhdG9yLCBlcnJvckxpc3Q7XG5cblx0XHRpZiAoICQoIHRoaXNbIDAgXSApLmlzKCBcImZvcm1cIiApICkge1xuXHRcdFx0dmFsaWQgPSB0aGlzLnZhbGlkYXRlKCkuZm9ybSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlcnJvckxpc3QgPSBbXTtcblx0XHRcdHZhbGlkID0gdHJ1ZTtcblx0XHRcdHZhbGlkYXRvciA9ICQoIHRoaXNbIDAgXS5mb3JtICkudmFsaWRhdGUoKTtcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhbGlkID0gdmFsaWRhdG9yLmVsZW1lbnQoIHRoaXMgKSAmJiB2YWxpZDtcblx0XHRcdFx0ZXJyb3JMaXN0ID0gZXJyb3JMaXN0LmNvbmNhdCggdmFsaWRhdG9yLmVycm9yTGlzdCApO1xuXHRcdFx0fSk7XG5cdFx0XHR2YWxpZGF0b3IuZXJyb3JMaXN0ID0gZXJyb3JMaXN0O1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsaWQ7XG5cdH0sXG5cblx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3J1bGVzL1xuXHRydWxlczogZnVuY3Rpb24oIGNvbW1hbmQsIGFyZ3VtZW50ICkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpc1sgMCBdLFxuXHRcdFx0c2V0dGluZ3MsIHN0YXRpY1J1bGVzLCBleGlzdGluZ1J1bGVzLCBkYXRhLCBwYXJhbSwgZmlsdGVyZWQ7XG5cblx0XHRpZiAoIGNvbW1hbmQgKSB7XG5cdFx0XHRzZXR0aW5ncyA9ICQuZGF0YSggZWxlbWVudC5mb3JtLCBcInZhbGlkYXRvclwiICkuc2V0dGluZ3M7XG5cdFx0XHRzdGF0aWNSdWxlcyA9IHNldHRpbmdzLnJ1bGVzO1xuXHRcdFx0ZXhpc3RpbmdSdWxlcyA9ICQudmFsaWRhdG9yLnN0YXRpY1J1bGVzKCBlbGVtZW50ICk7XG5cdFx0XHRzd2l0Y2ggKCBjb21tYW5kICkge1xuXHRcdFx0Y2FzZSBcImFkZFwiOlxuXHRcdFx0XHQkLmV4dGVuZCggZXhpc3RpbmdSdWxlcywgJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggYXJndW1lbnQgKSApO1xuXHRcdFx0XHQvLyByZW1vdmUgbWVzc2FnZXMgZnJvbSBydWxlcywgYnV0IGFsbG93IHRoZW0gdG8gYmUgc2V0IHNlcGFyYXRlbHlcblx0XHRcdFx0ZGVsZXRlIGV4aXN0aW5nUnVsZXMubWVzc2FnZXM7XG5cdFx0XHRcdHN0YXRpY1J1bGVzWyBlbGVtZW50Lm5hbWUgXSA9IGV4aXN0aW5nUnVsZXM7XG5cdFx0XHRcdGlmICggYXJndW1lbnQubWVzc2FnZXMgKSB7XG5cdFx0XHRcdFx0c2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdID0gJC5leHRlbmQoIHNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSwgYXJndW1lbnQubWVzc2FnZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJyZW1vdmVcIjpcblx0XHRcdFx0aWYgKCAhYXJndW1lbnQgKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHN0YXRpY1J1bGVzWyBlbGVtZW50Lm5hbWUgXTtcblx0XHRcdFx0XHRyZXR1cm4gZXhpc3RpbmdSdWxlcztcblx0XHRcdFx0fVxuXHRcdFx0XHRmaWx0ZXJlZCA9IHt9O1xuXHRcdFx0XHQkLmVhY2goIGFyZ3VtZW50LnNwbGl0KCAvXFxzLyApLCBmdW5jdGlvbiggaW5kZXgsIG1ldGhvZCApIHtcblx0XHRcdFx0XHRmaWx0ZXJlZFsgbWV0aG9kIF0gPSBleGlzdGluZ1J1bGVzWyBtZXRob2QgXTtcblx0XHRcdFx0XHRkZWxldGUgZXhpc3RpbmdSdWxlc1sgbWV0aG9kIF07XG5cdFx0XHRcdFx0aWYgKCBtZXRob2QgPT09IFwicmVxdWlyZWRcIiApIHtcblx0XHRcdFx0XHRcdCQoIGVsZW1lbnQgKS5yZW1vdmVBdHRyKCBcImFyaWEtcmVxdWlyZWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBmaWx0ZXJlZDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRkYXRhID0gJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZXMoXG5cdFx0JC5leHRlbmQoXG5cdFx0XHR7fSxcblx0XHRcdCQudmFsaWRhdG9yLmNsYXNzUnVsZXMoIGVsZW1lbnQgKSxcblx0XHRcdCQudmFsaWRhdG9yLmF0dHJpYnV0ZVJ1bGVzKCBlbGVtZW50ICksXG5cdFx0XHQkLnZhbGlkYXRvci5kYXRhUnVsZXMoIGVsZW1lbnQgKSxcblx0XHRcdCQudmFsaWRhdG9yLnN0YXRpY1J1bGVzKCBlbGVtZW50IClcblx0XHQpLCBlbGVtZW50ICk7XG5cblx0XHQvLyBtYWtlIHN1cmUgcmVxdWlyZWQgaXMgYXQgZnJvbnRcblx0XHRpZiAoIGRhdGEucmVxdWlyZWQgKSB7XG5cdFx0XHRwYXJhbSA9IGRhdGEucmVxdWlyZWQ7XG5cdFx0XHRkZWxldGUgZGF0YS5yZXF1aXJlZDtcblx0XHRcdGRhdGEgPSAkLmV4dGVuZCggeyByZXF1aXJlZDogcGFyYW0gfSwgZGF0YSApO1xuXHRcdFx0JCggZWxlbWVudCApLmF0dHIoIFwiYXJpYS1yZXF1aXJlZFwiLCBcInRydWVcIiApO1xuXHRcdH1cblxuXHRcdC8vIG1ha2Ugc3VyZSByZW1vdGUgaXMgYXQgYmFja1xuXHRcdGlmICggZGF0YS5yZW1vdGUgKSB7XG5cdFx0XHRwYXJhbSA9IGRhdGEucmVtb3RlO1xuXHRcdFx0ZGVsZXRlIGRhdGEucmVtb3RlO1xuXHRcdFx0ZGF0YSA9ICQuZXh0ZW5kKCBkYXRhLCB7IHJlbW90ZTogcGFyYW0gfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cbn0pO1xuXG4vLyBDdXN0b20gc2VsZWN0b3JzXG4kLmV4dGVuZCggJC5leHByWyBcIjpcIiBdLCB7XG5cdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9ibGFuay1zZWxlY3Rvci9cblx0Ymxhbms6IGZ1bmN0aW9uKCBhICkge1xuXHRcdHJldHVybiAhJC50cmltKCBcIlwiICsgJCggYSApLnZhbCgpICk7XG5cdH0sXG5cdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9maWxsZWQtc2VsZWN0b3IvXG5cdGZpbGxlZDogZnVuY3Rpb24oIGEgKSB7XG5cdFx0cmV0dXJuICEhJC50cmltKCBcIlwiICsgJCggYSApLnZhbCgpICk7XG5cdH0sXG5cdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy91bmNoZWNrZWQtc2VsZWN0b3IvXG5cdHVuY2hlY2tlZDogZnVuY3Rpb24oIGEgKSB7XG5cdFx0cmV0dXJuICEkKCBhICkucHJvcCggXCJjaGVja2VkXCIgKTtcblx0fVxufSk7XG5cbi8vIGNvbnN0cnVjdG9yIGZvciB2YWxpZGF0b3JcbiQudmFsaWRhdG9yID0gZnVuY3Rpb24oIG9wdGlvbnMsIGZvcm0gKSB7XG5cdHRoaXMuc2V0dGluZ3MgPSAkLmV4dGVuZCggdHJ1ZSwge30sICQudmFsaWRhdG9yLmRlZmF1bHRzLCBvcHRpb25zICk7XG5cdHRoaXMuY3VycmVudEZvcm0gPSBmb3JtO1xuXHR0aGlzLmluaXQoKTtcbn07XG5cbi8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9qUXVlcnkudmFsaWRhdG9yLmZvcm1hdC9cbiQudmFsaWRhdG9yLmZvcm1hdCA9IGZ1bmN0aW9uKCBzb3VyY2UsIHBhcmFtcyApIHtcblx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAxICkge1xuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBhcmdzID0gJC5tYWtlQXJyYXkoIGFyZ3VtZW50cyApO1xuXHRcdFx0YXJncy51bnNoaWZ0KCBzb3VyY2UgKTtcblx0XHRcdHJldHVybiAkLnZhbGlkYXRvci5mb3JtYXQuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcblx0XHR9O1xuXHR9XG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgcGFyYW1zLmNvbnN0cnVjdG9yICE9PSBBcnJheSAgKSB7XG5cdFx0cGFyYW1zID0gJC5tYWtlQXJyYXkoIGFyZ3VtZW50cyApLnNsaWNlKCAxICk7XG5cdH1cblx0aWYgKCBwYXJhbXMuY29uc3RydWN0b3IgIT09IEFycmF5ICkge1xuXHRcdHBhcmFtcyA9IFsgcGFyYW1zIF07XG5cdH1cblx0JC5lYWNoKCBwYXJhbXMsIGZ1bmN0aW9uKCBpLCBuICkge1xuXHRcdHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKCBuZXcgUmVnRXhwKCBcIlxcXFx7XCIgKyBpICsgXCJcXFxcfVwiLCBcImdcIiApLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBuO1xuXHRcdH0pO1xuXHR9KTtcblx0cmV0dXJuIHNvdXJjZTtcbn07XG5cbiQuZXh0ZW5kKCAkLnZhbGlkYXRvciwge1xuXG5cdGRlZmF1bHRzOiB7XG5cdFx0bWVzc2FnZXM6IHt9LFxuXHRcdGdyb3Vwczoge30sXG5cdFx0cnVsZXM6IHt9LFxuXHRcdGVycm9yQ2xhc3M6IFwiZXJyb3JcIixcblx0XHR2YWxpZENsYXNzOiBcInZhbGlkXCIsXG5cdFx0ZXJyb3JFbGVtZW50OiBcImxhYmVsXCIsXG5cdFx0Zm9jdXNDbGVhbnVwOiBmYWxzZSxcblx0XHRmb2N1c0ludmFsaWQ6IHRydWUsXG5cdFx0ZXJyb3JDb250YWluZXI6ICQoIFtdICksXG5cdFx0ZXJyb3JMYWJlbENvbnRhaW5lcjogJCggW10gKSxcblx0XHRvbnN1Ym1pdDogdHJ1ZSxcblx0XHRpZ25vcmU6IFwiOmhpZGRlblwiLFxuXHRcdGlnbm9yZVRpdGxlOiBmYWxzZSxcblx0XHRvbmZvY3VzaW46IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dGhpcy5sYXN0QWN0aXZlID0gZWxlbWVudDtcblxuXHRcdFx0Ly8gSGlkZSBlcnJvciBsYWJlbCBhbmQgcmVtb3ZlIGVycm9yIGNsYXNzIG9uIGZvY3VzIGlmIGVuYWJsZWRcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5mb2N1c0NsZWFudXAgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVsZW1lbnQsIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5oaWRlVGhlc2UoIHRoaXMuZXJyb3JzRm9yKCBlbGVtZW50ICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9uZm9jdXNvdXQ6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0aWYgKCAhdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSAmJiAoIGVsZW1lbnQubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCB8fCAhdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCggZWxlbWVudCApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b25rZXl1cDogZnVuY3Rpb24oIGVsZW1lbnQsIGV2ZW50ICkge1xuXHRcdFx0Ly8gQXZvaWQgcmV2YWxpZGF0ZSB0aGUgZmllbGQgd2hlbiBwcmVzc2luZyBvbmUgb2YgdGhlIGZvbGxvd2luZyBrZXlzXG5cdFx0XHQvLyBTaGlmdCAgICAgICA9PiAxNlxuXHRcdFx0Ly8gQ3RybCAgICAgICAgPT4gMTdcblx0XHRcdC8vIEFsdCAgICAgICAgID0+IDE4XG5cdFx0XHQvLyBDYXBzIGxvY2sgICA9PiAyMFxuXHRcdFx0Ly8gRW5kICAgICAgICAgPT4gMzVcblx0XHRcdC8vIEhvbWUgICAgICAgID0+IDM2XG5cdFx0XHQvLyBMZWZ0IGFycm93ICA9PiAzN1xuXHRcdFx0Ly8gVXAgYXJyb3cgICAgPT4gMzhcblx0XHRcdC8vIFJpZ2h0IGFycm93ID0+IDM5XG5cdFx0XHQvLyBEb3duIGFycm93ICA9PiA0MFxuXHRcdFx0Ly8gSW5zZXJ0ICAgICAgPT4gNDVcblx0XHRcdC8vIE51bSBsb2NrICAgID0+IDE0NFxuXHRcdFx0Ly8gQWx0R3Iga2V5ICAgPT4gMjI1XG5cdFx0XHR2YXIgZXhjbHVkZWRLZXlzID0gW1xuXHRcdFx0XHQxNiwgMTcsIDE4LCAyMCwgMzUsIDM2LCAzNyxcblx0XHRcdFx0MzgsIDM5LCA0MCwgNDUsIDE0NCwgMjI1XG5cdFx0XHRdO1xuXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09PSA5ICYmIHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICkgPT09IFwiXCIgfHwgJC5pbkFycmF5KCBldmVudC5rZXlDb2RlLCBleGNsdWRlZEtleXMgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW1lbnQubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCB8fCBlbGVtZW50ID09PSB0aGlzLmxhc3RFbGVtZW50ICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9uY2xpY2s6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0Ly8gY2xpY2sgb24gc2VsZWN0cywgcmFkaW9idXR0b25zIGFuZCBjaGVja2JveGVzXG5cdFx0XHRpZiAoIGVsZW1lbnQubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50KCBlbGVtZW50ICk7XG5cblx0XHRcdC8vIG9yIG9wdGlvbiBlbGVtZW50cywgY2hlY2sgcGFyZW50IHNlbGVjdCBpbiB0aGF0IGNhc2Vcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW1lbnQucGFyZW50Tm9kZS5uYW1lIGluIHRoaXMuc3VibWl0dGVkICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQucGFyZW50Tm9kZSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aGlnaGxpZ2h0OiBmdW5jdGlvbiggZWxlbWVudCwgZXJyb3JDbGFzcywgdmFsaWRDbGFzcyApIHtcblx0XHRcdGlmICggZWxlbWVudC50eXBlID09PSBcInJhZGlvXCIgKSB7XG5cdFx0XHRcdHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICkuYWRkQ2xhc3MoIGVycm9yQ2xhc3MgKS5yZW1vdmVDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCggZWxlbWVudCApLmFkZENsYXNzKCBlcnJvckNsYXNzICkucmVtb3ZlQ2xhc3MoIHZhbGlkQ2xhc3MgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHVuaGlnaGxpZ2h0OiBmdW5jdGlvbiggZWxlbWVudCwgZXJyb3JDbGFzcywgdmFsaWRDbGFzcyApIHtcblx0XHRcdGlmICggZWxlbWVudC50eXBlID09PSBcInJhZGlvXCIgKSB7XG5cdFx0XHRcdHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICkucmVtb3ZlQ2xhc3MoIGVycm9yQ2xhc3MgKS5hZGRDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCggZWxlbWVudCApLnJlbW92ZUNsYXNzKCBlcnJvckNsYXNzICkuYWRkQ2xhc3MoIHZhbGlkQ2xhc3MgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3Iuc2V0RGVmYXVsdHMvXG5cdHNldERlZmF1bHRzOiBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XG5cdFx0JC5leHRlbmQoICQudmFsaWRhdG9yLmRlZmF1bHRzLCBzZXR0aW5ncyApO1xuXHR9LFxuXG5cdG1lc3NhZ2VzOiB7XG5cdFx0cmVxdWlyZWQ6IFwiVGhpcyBmaWVsZCBpcyByZXF1aXJlZC5cIixcblx0XHRyZW1vdGU6IFwiUGxlYXNlIGZpeCB0aGlzIGZpZWxkLlwiLFxuXHRcdGVtYWlsOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MuXCIsXG5cdFx0dXJsOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIFVSTC5cIixcblx0XHRkYXRlOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGRhdGUuXCIsXG5cdFx0ZGF0ZUlTTzogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlICggSVNPICkuXCIsXG5cdFx0bnVtYmVyOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIG51bWJlci5cIixcblx0XHRkaWdpdHM6IFwiUGxlYXNlIGVudGVyIG9ubHkgZGlnaXRzLlwiLFxuXHRcdGNyZWRpdGNhcmQ6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgY3JlZGl0IGNhcmQgbnVtYmVyLlwiLFxuXHRcdGVxdWFsVG86IFwiUGxlYXNlIGVudGVyIHRoZSBzYW1lIHZhbHVlIGFnYWluLlwiLFxuXHRcdG1heGxlbmd0aDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBubyBtb3JlIHRoYW4gezB9IGNoYXJhY3RlcnMuXCIgKSxcblx0XHRtaW5sZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYXQgbGVhc3QgezB9IGNoYXJhY3RlcnMuXCIgKSxcblx0XHRyYW5nZWxlbmd0aDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGJldHdlZW4gezB9IGFuZCB7MX0gY2hhcmFjdGVycyBsb25nLlwiICksXG5cdFx0cmFuZ2U6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBiZXR3ZWVuIHswfSBhbmQgezF9LlwiICksXG5cdFx0bWF4OiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHswfS5cIiApLFxuXHRcdG1pbjogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB7MH0uXCIgKVxuXHR9LFxuXG5cdGF1dG9DcmVhdGVSYW5nZXM6IGZhbHNlLFxuXG5cdHByb3RvdHlwZToge1xuXG5cdFx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmxhYmVsQ29udGFpbmVyID0gJCggdGhpcy5zZXR0aW5ncy5lcnJvckxhYmVsQ29udGFpbmVyICk7XG5cdFx0XHR0aGlzLmVycm9yQ29udGV4dCA9IHRoaXMubGFiZWxDb250YWluZXIubGVuZ3RoICYmIHRoaXMubGFiZWxDb250YWluZXIgfHwgJCggdGhpcy5jdXJyZW50Rm9ybSApO1xuXHRcdFx0dGhpcy5jb250YWluZXJzID0gJCggdGhpcy5zZXR0aW5ncy5lcnJvckNvbnRhaW5lciApLmFkZCggdGhpcy5zZXR0aW5ncy5lcnJvckxhYmVsQ29udGFpbmVyICk7XG5cdFx0XHR0aGlzLnN1Ym1pdHRlZCA9IHt9O1xuXHRcdFx0dGhpcy52YWx1ZUNhY2hlID0ge307XG5cdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0ID0gMDtcblx0XHRcdHRoaXMucGVuZGluZyA9IHt9O1xuXHRcdFx0dGhpcy5pbnZhbGlkID0ge307XG5cdFx0XHR0aGlzLnJlc2V0KCk7XG5cblx0XHRcdHZhciBncm91cHMgPSAoIHRoaXMuZ3JvdXBzID0ge30gKSxcblx0XHRcdFx0cnVsZXM7XG5cdFx0XHQkLmVhY2goIHRoaXMuc2V0dGluZ3MuZ3JvdXBzLCBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5zcGxpdCggL1xccy8gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkLmVhY2goIHZhbHVlLCBmdW5jdGlvbiggaW5kZXgsIG5hbWUgKSB7XG5cdFx0XHRcdFx0Z3JvdXBzWyBuYW1lIF0gPSBrZXk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0XHRydWxlcyA9IHRoaXMuc2V0dGluZ3MucnVsZXM7XG5cdFx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0cnVsZXNbIGtleSBdID0gJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggdmFsdWUgKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRmdW5jdGlvbiBkZWxlZ2F0ZSggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB2YWxpZGF0b3IgPSAkLmRhdGEoIHRoaXMuZm9ybSwgXCJ2YWxpZGF0b3JcIiApLFxuXHRcdFx0XHRcdGV2ZW50VHlwZSA9IFwib25cIiArIGV2ZW50LnR5cGUucmVwbGFjZSggL152YWxpZGF0ZS8sIFwiXCIgKSxcblx0XHRcdFx0XHRzZXR0aW5ncyA9IHZhbGlkYXRvci5zZXR0aW5ncztcblx0XHRcdFx0aWYgKCBzZXR0aW5nc1sgZXZlbnRUeXBlIF0gJiYgISQoIHRoaXMgKS5pcyggc2V0dGluZ3MuaWdub3JlICkgKSB7XG5cdFx0XHRcdFx0c2V0dGluZ3NbIGV2ZW50VHlwZSBdLmNhbGwoIHZhbGlkYXRvciwgdGhpcywgZXZlbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtIClcblx0XHRcdFx0Lm9uKCBcImZvY3VzaW4udmFsaWRhdGUgZm9jdXNvdXQudmFsaWRhdGUga2V5dXAudmFsaWRhdGVcIixcblx0XHRcdFx0XHRcIjp0ZXh0LCBbdHlwZT0ncGFzc3dvcmQnXSwgW3R5cGU9J2ZpbGUnXSwgc2VsZWN0LCB0ZXh0YXJlYSwgW3R5cGU9J251bWJlciddLCBbdHlwZT0nc2VhcmNoJ10sIFwiICtcblx0XHRcdFx0XHRcIlt0eXBlPSd0ZWwnXSwgW3R5cGU9J3VybCddLCBbdHlwZT0nZW1haWwnXSwgW3R5cGU9J2RhdGV0aW1lJ10sIFt0eXBlPSdkYXRlJ10sIFt0eXBlPSdtb250aCddLCBcIiArXG5cdFx0XHRcdFx0XCJbdHlwZT0nd2VlayddLCBbdHlwZT0ndGltZSddLCBbdHlwZT0nZGF0ZXRpbWUtbG9jYWwnXSwgW3R5cGU9J3JhbmdlJ10sIFt0eXBlPSdjb2xvciddLCBcIiArXG5cdFx0XHRcdFx0XCJbdHlwZT0ncmFkaW8nXSwgW3R5cGU9J2NoZWNrYm94J11cIiwgZGVsZWdhdGUpXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSwgb2xkSUVcblx0XHRcdFx0Ly8gXCJzZWxlY3RcIiBpcyBwcm92aWRlZCBhcyBldmVudC50YXJnZXQgd2hlbiBjbGlja2luZyBhIG9wdGlvblxuXHRcdFx0XHQub24oXCJjbGljay52YWxpZGF0ZVwiLCBcInNlbGVjdCwgb3B0aW9uLCBbdHlwZT0ncmFkaW8nXSwgW3R5cGU9J2NoZWNrYm94J11cIiwgZGVsZWdhdGUpO1xuXG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuaW52YWxpZEhhbmRsZXIgKSB7XG5cdFx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKS5vbiggXCJpbnZhbGlkLWZvcm0udmFsaWRhdGVcIiwgdGhpcy5zZXR0aW5ncy5pbnZhbGlkSGFuZGxlciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgYXJpYS1yZXF1aXJlZCB0byBhbnkgU3RhdGljL0RhdGEvQ2xhc3MgcmVxdWlyZWQgZmllbGRzIGJlZm9yZSBmaXJzdCB2YWxpZGF0aW9uXG5cdFx0XHQvLyBTY3JlZW4gcmVhZGVycyByZXF1aXJlIHRoaXMgYXR0cmlidXRlIHRvIGJlIHByZXNlbnQgYmVmb3JlIHRoZSBpbml0aWFsIHN1Ym1pc3Npb24gaHR0cDovL3d3dy53My5vcmcvVFIvV0NBRy1URUNIUy9BUklBMi5odG1sXG5cdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkuZmluZCggXCJbcmVxdWlyZWRdLCBbZGF0YS1ydWxlLXJlcXVpcmVkXSwgLnJlcXVpcmVkXCIgKS5hdHRyKCBcImFyaWEtcmVxdWlyZWRcIiwgXCJ0cnVlXCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL1ZhbGlkYXRvci5mb3JtL1xuXHRcdGZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5jaGVja0Zvcm0oKTtcblx0XHRcdCQuZXh0ZW5kKCB0aGlzLnN1Ym1pdHRlZCwgdGhpcy5lcnJvck1hcCApO1xuXHRcdFx0dGhpcy5pbnZhbGlkID0gJC5leHRlbmQoe30sIHRoaXMuZXJyb3JNYXAgKTtcblx0XHRcdGlmICggIXRoaXMudmFsaWQoKSApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLnRyaWdnZXJIYW5kbGVyKCBcImludmFsaWQtZm9ybVwiLCBbIHRoaXMgXSk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnNob3dFcnJvcnMoKTtcblx0XHRcdHJldHVybiB0aGlzLnZhbGlkKCk7XG5cdFx0fSxcblxuXHRcdGNoZWNrRm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnByZXBhcmVGb3JtKCk7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGVsZW1lbnRzID0gKCB0aGlzLmN1cnJlbnRFbGVtZW50cyA9IHRoaXMuZWxlbWVudHMoKSApOyBlbGVtZW50c1sgaSBdOyBpKysgKSB7XG5cdFx0XHRcdHRoaXMuY2hlY2soIGVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnZhbGlkKCk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9WYWxpZGF0b3IuZWxlbWVudC9cblx0XHRlbGVtZW50OiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciBjbGVhbkVsZW1lbnQgPSB0aGlzLmNsZWFuKCBlbGVtZW50ICksXG5cdFx0XHRcdGNoZWNrRWxlbWVudCA9IHRoaXMudmFsaWRhdGlvblRhcmdldEZvciggY2xlYW5FbGVtZW50ICksXG5cdFx0XHRcdHJlc3VsdCA9IHRydWU7XG5cblx0XHRcdHRoaXMubGFzdEVsZW1lbnQgPSBjaGVja0VsZW1lbnQ7XG5cblx0XHRcdGlmICggY2hlY2tFbGVtZW50ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmludmFsaWRbIGNsZWFuRWxlbWVudC5uYW1lIF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnByZXBhcmVFbGVtZW50KCBjaGVja0VsZW1lbnQgKTtcblx0XHRcdFx0dGhpcy5jdXJyZW50RWxlbWVudHMgPSAkKCBjaGVja0VsZW1lbnQgKTtcblxuXHRcdFx0XHRyZXN1bHQgPSB0aGlzLmNoZWNrKCBjaGVja0VsZW1lbnQgKSAhPT0gZmFsc2U7XG5cdFx0XHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLmludmFsaWRbIGNoZWNrRWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5pbnZhbGlkWyBjaGVja0VsZW1lbnQubmFtZSBdID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gQWRkIGFyaWEtaW52YWxpZCBzdGF0dXMgZm9yIHNjcmVlbiByZWFkZXJzXG5cdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWludmFsaWRcIiwgIXJlc3VsdCApO1xuXG5cdFx0XHRpZiAoICF0aGlzLm51bWJlck9mSW52YWxpZHMoKSApIHtcblx0XHRcdFx0Ly8gSGlkZSBlcnJvciBjb250YWluZXJzIG9uIGxhc3QgZXJyb3Jcblx0XHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLnRvSGlkZS5hZGQoIHRoaXMuY29udGFpbmVycyApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zaG93RXJyb3JzKCk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLnNob3dFcnJvcnMvXG5cdFx0c2hvd0Vycm9yczogZnVuY3Rpb24oIGVycm9ycyApIHtcblx0XHRcdGlmICggZXJyb3JzICkge1xuXHRcdFx0XHQvLyBhZGQgaXRlbXMgdG8gZXJyb3IgbGlzdCBhbmQgbWFwXG5cdFx0XHRcdCQuZXh0ZW5kKCB0aGlzLmVycm9yTWFwLCBlcnJvcnMgKTtcblx0XHRcdFx0dGhpcy5lcnJvckxpc3QgPSBbXTtcblx0XHRcdFx0Zm9yICggdmFyIG5hbWUgaW4gZXJyb3JzICkge1xuXHRcdFx0XHRcdHRoaXMuZXJyb3JMaXN0LnB1c2goe1xuXHRcdFx0XHRcdFx0bWVzc2FnZTogZXJyb3JzWyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtZW50OiB0aGlzLmZpbmRCeU5hbWUoIG5hbWUgKVsgMCBdXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gcmVtb3ZlIGl0ZW1zIGZyb20gc3VjY2VzcyBsaXN0XG5cdFx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QgPSAkLmdyZXAoIHRoaXMuc3VjY2Vzc0xpc3QsIGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0XHRcdHJldHVybiAhKCBlbGVtZW50Lm5hbWUgaW4gZXJyb3JzICk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnNob3dFcnJvcnMgKSB7XG5cdFx0XHRcdHRoaXMuc2V0dGluZ3Muc2hvd0Vycm9ycy5jYWxsKCB0aGlzLCB0aGlzLmVycm9yTWFwLCB0aGlzLmVycm9yTGlzdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5kZWZhdWx0U2hvd0Vycm9ycygpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLnJlc2V0Rm9ybS9cblx0XHRyZXNldEZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAkLmZuLnJlc2V0Rm9ybSApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLnJlc2V0Rm9ybSgpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zdWJtaXR0ZWQgPSB7fTtcblx0XHRcdHRoaXMubGFzdEVsZW1lbnQgPSBudWxsO1xuXHRcdFx0dGhpcy5wcmVwYXJlRm9ybSgpO1xuXHRcdFx0dGhpcy5oaWRlRXJyb3JzKCk7XG5cdFx0XHR2YXIgaSwgZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzKClcblx0XHRcdFx0LnJlbW92ZURhdGEoIFwicHJldmlvdXNWYWx1ZVwiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1pbnZhbGlkXCIgKTtcblxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudHNbIGkgXSxcblx0XHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgXCJcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50cy5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdG51bWJlck9mSW52YWxpZHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMub2JqZWN0TGVuZ3RoKCB0aGlzLmludmFsaWQgKTtcblx0XHR9LFxuXG5cdFx0b2JqZWN0TGVuZ3RoOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0LyoganNoaW50IHVudXNlZDogZmFsc2UgKi9cblx0XHRcdHZhciBjb3VudCA9IDAsXG5cdFx0XHRcdGk7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdH1cblx0XHRcdHJldHVybiBjb3VudDtcblx0XHR9LFxuXG5cdFx0aGlkZUVycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmhpZGVUaGVzZSggdGhpcy50b0hpZGUgKTtcblx0XHR9LFxuXG5cdFx0aGlkZVRoZXNlOiBmdW5jdGlvbiggZXJyb3JzICkge1xuXHRcdFx0ZXJyb3JzLm5vdCggdGhpcy5jb250YWluZXJzICkudGV4dCggXCJcIiApO1xuXHRcdFx0dGhpcy5hZGRXcmFwcGVyKCBlcnJvcnMgKS5oaWRlKCk7XG5cdFx0fSxcblxuXHRcdHZhbGlkOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLnNpemUoKSA9PT0gMDtcblx0XHR9LFxuXG5cdFx0c2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcnJvckxpc3QubGVuZ3RoO1xuXHRcdH0sXG5cblx0XHRmb2N1c0ludmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmZvY3VzSW52YWxpZCApIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQkKCB0aGlzLmZpbmRMYXN0QWN0aXZlKCkgfHwgdGhpcy5lcnJvckxpc3QubGVuZ3RoICYmIHRoaXMuZXJyb3JMaXN0WyAwIF0uZWxlbWVudCB8fCBbXSlcblx0XHRcdFx0XHQuZmlsdGVyKCBcIjp2aXNpYmxlXCIgKVxuXHRcdFx0XHRcdC5mb2N1cygpXG5cdFx0XHRcdFx0Ly8gbWFudWFsbHkgdHJpZ2dlciBmb2N1c2luIGV2ZW50OyB3aXRob3V0IGl0LCBmb2N1c2luIGhhbmRsZXIgaXNuJ3QgY2FsbGVkLCBmaW5kTGFzdEFjdGl2ZSB3b24ndCBoYXZlIGFueXRoaW5nIHRvIGZpbmRcblx0XHRcdFx0XHQudHJpZ2dlciggXCJmb2N1c2luXCIgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0Ly8gaWdub3JlIElFIHRocm93aW5nIGVycm9ycyB3aGVuIGZvY3VzaW5nIGhpZGRlbiBlbGVtZW50c1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGZpbmRMYXN0QWN0aXZlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBsYXN0QWN0aXZlID0gdGhpcy5sYXN0QWN0aXZlO1xuXHRcdFx0cmV0dXJuIGxhc3RBY3RpdmUgJiYgJC5ncmVwKCB0aGlzLmVycm9yTGlzdCwgZnVuY3Rpb24oIG4gKSB7XG5cdFx0XHRcdHJldHVybiBuLmVsZW1lbnQubmFtZSA9PT0gbGFzdEFjdGl2ZS5uYW1lO1xuXHRcdFx0fSkubGVuZ3RoID09PSAxICYmIGxhc3RBY3RpdmU7XG5cdFx0fSxcblxuXHRcdGVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB2YWxpZGF0b3IgPSB0aGlzLFxuXHRcdFx0XHRydWxlc0NhY2hlID0ge307XG5cblx0XHRcdC8vIHNlbGVjdCBhbGwgdmFsaWQgaW5wdXRzIGluc2lkZSB0aGUgZm9ybSAobm8gc3VibWl0IG9yIHJlc2V0IGJ1dHRvbnMpXG5cdFx0XHRyZXR1cm4gJCggdGhpcy5jdXJyZW50Rm9ybSApXG5cdFx0XHQuZmluZCggXCJpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYVwiIClcblx0XHRcdC5ub3QoIFwiOnN1Ym1pdCwgOnJlc2V0LCA6aW1hZ2UsIDpkaXNhYmxlZFwiIClcblx0XHRcdC5ub3QoIHRoaXMuc2V0dGluZ3MuaWdub3JlIClcblx0XHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICF0aGlzLm5hbWUgJiYgdmFsaWRhdG9yLnNldHRpbmdzLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIFwiJW8gaGFzIG5vIG5hbWUgYXNzaWduZWRcIiwgdGhpcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gc2VsZWN0IG9ubHkgdGhlIGZpcnN0IGVsZW1lbnQgZm9yIGVhY2ggbmFtZSwgYW5kIG9ubHkgdGhvc2Ugd2l0aCBydWxlcyBzcGVjaWZpZWRcblx0XHRcdFx0aWYgKCB0aGlzLm5hbWUgaW4gcnVsZXNDYWNoZSB8fCAhdmFsaWRhdG9yLm9iamVjdExlbmd0aCggJCggdGhpcyApLnJ1bGVzKCkgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRydWxlc0NhY2hlWyB0aGlzLm5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGNsZWFuOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gJCggc2VsZWN0b3IgKVsgMCBdO1xuXHRcdH0sXG5cblx0XHRlcnJvcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVycm9yQ2xhc3MgPSB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3Muc3BsaXQoIFwiIFwiICkuam9pbiggXCIuXCIgKTtcblx0XHRcdHJldHVybiAkKCB0aGlzLnNldHRpbmdzLmVycm9yRWxlbWVudCArIFwiLlwiICsgZXJyb3JDbGFzcywgdGhpcy5lcnJvckNvbnRleHQgKTtcblx0XHR9LFxuXG5cdFx0cmVzZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5zdWNjZXNzTGlzdCA9IFtdO1xuXHRcdFx0dGhpcy5lcnJvckxpc3QgPSBbXTtcblx0XHRcdHRoaXMuZXJyb3JNYXAgPSB7fTtcblx0XHRcdHRoaXMudG9TaG93ID0gJCggW10gKTtcblx0XHRcdHRoaXMudG9IaWRlID0gJCggW10gKTtcblx0XHRcdHRoaXMuY3VycmVudEVsZW1lbnRzID0gJCggW10gKTtcblx0XHR9LFxuXG5cdFx0cHJlcGFyZUZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLmVycm9ycygpLmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0fSxcblxuXHRcdHByZXBhcmVFbGVtZW50OiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKTtcblx0XHR9LFxuXG5cdFx0ZWxlbWVudFZhbHVlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciB2YWwsXG5cdFx0XHRcdCRlbGVtZW50ID0gJCggZWxlbWVudCApLFxuXHRcdFx0XHR0eXBlID0gZWxlbWVudC50eXBlO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwicmFkaW9cIiB8fCB0eXBlID09PSBcImNoZWNrYm94XCIgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmZpbmRCeU5hbWUoIGVsZW1lbnQubmFtZSApLmZpbHRlcihcIjpjaGVja2VkXCIpLnZhbCgpO1xuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZWxlbWVudC52YWxpZGl0eSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQudmFsaWRpdHkuYmFkSW5wdXQgPyBmYWxzZSA6ICRlbGVtZW50LnZhbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YWwgPSAkZWxlbWVudC52YWwoKTtcblx0XHRcdGlmICggdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0cmV0dXJuIHZhbC5yZXBsYWNlKC9cXHIvZywgXCJcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9LFxuXG5cdFx0Y2hlY2s6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0ZWxlbWVudCA9IHRoaXMudmFsaWRhdGlvblRhcmdldEZvciggdGhpcy5jbGVhbiggZWxlbWVudCApICk7XG5cblx0XHRcdHZhciBydWxlcyA9ICQoIGVsZW1lbnQgKS5ydWxlcygpLFxuXHRcdFx0XHRydWxlc0NvdW50ID0gJC5tYXAoIHJ1bGVzLCBmdW5jdGlvbiggbiwgaSApIHtcblx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0fSkubGVuZ3RoLFxuXHRcdFx0XHRkZXBlbmRlbmN5TWlzbWF0Y2ggPSBmYWxzZSxcblx0XHRcdFx0dmFsID0gdGhpcy5lbGVtZW50VmFsdWUoIGVsZW1lbnQgKSxcblx0XHRcdFx0cmVzdWx0LCBtZXRob2QsIHJ1bGU7XG5cblx0XHRcdGZvciAoIG1ldGhvZCBpbiBydWxlcyApIHtcblx0XHRcdFx0cnVsZSA9IHsgbWV0aG9kOiBtZXRob2QsIHBhcmFtZXRlcnM6IHJ1bGVzWyBtZXRob2QgXSB9O1xuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0cmVzdWx0ID0gJC52YWxpZGF0b3IubWV0aG9kc1sgbWV0aG9kIF0uY2FsbCggdGhpcywgdmFsLCBlbGVtZW50LCBydWxlLnBhcmFtZXRlcnMgKTtcblxuXHRcdFx0XHRcdC8vIGlmIGEgbWV0aG9kIGluZGljYXRlcyB0aGF0IHRoZSBmaWVsZCBpcyBvcHRpb25hbCBhbmQgdGhlcmVmb3JlIHZhbGlkLFxuXHRcdFx0XHRcdC8vIGRvbid0IG1hcmsgaXQgYXMgdmFsaWQgd2hlbiB0aGVyZSBhcmUgbm8gb3RoZXIgcnVsZXNcblx0XHRcdFx0XHRpZiAoIHJlc3VsdCA9PT0gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCIgJiYgcnVsZXNDb3VudCA9PT0gMSApIHtcblx0XHRcdFx0XHRcdGRlcGVuZGVuY3lNaXNtYXRjaCA9IHRydWU7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHJlc3VsdCA9PT0gXCJwZW5kaW5nXCIgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRvSGlkZSA9IHRoaXMudG9IaWRlLm5vdCggdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKSApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggIXJlc3VsdCApIHtcblx0XHRcdFx0XHRcdHRoaXMuZm9ybWF0QW5kQWRkKCBlbGVtZW50LCBydWxlICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuZGVidWcgJiYgd2luZG93LmNvbnNvbGUgKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyggXCJFeGNlcHRpb24gb2NjdXJyZWQgd2hlbiBjaGVja2luZyBlbGVtZW50IFwiICsgZWxlbWVudC5pZCArIFwiLCBjaGVjayB0aGUgJ1wiICsgcnVsZS5tZXRob2QgKyBcIicgbWV0aG9kLlwiLCBlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggZSBpbnN0YW5jZW9mIFR5cGVFcnJvciApIHtcblx0XHRcdFx0XHRcdGUubWVzc2FnZSArPSBcIi4gIEV4Y2VwdGlvbiBvY2N1cnJlZCB3aGVuIGNoZWNraW5nIGVsZW1lbnQgXCIgKyBlbGVtZW50LmlkICsgXCIsIGNoZWNrIHRoZSAnXCIgKyBydWxlLm1ldGhvZCArIFwiJyBtZXRob2QuXCI7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBkZXBlbmRlbmN5TWlzbWF0Y2ggKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5vYmplY3RMZW5ndGgoIHJ1bGVzICkgKSB7XG5cdFx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QucHVzaCggZWxlbWVudCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIHJldHVybiB0aGUgY3VzdG9tIG1lc3NhZ2UgZm9yIHRoZSBnaXZlbiBlbGVtZW50IGFuZCB2YWxpZGF0aW9uIG1ldGhvZFxuXHRcdC8vIHNwZWNpZmllZCBpbiB0aGUgZWxlbWVudCdzIEhUTUw1IGRhdGEgYXR0cmlidXRlXG5cdFx0Ly8gcmV0dXJuIHRoZSBnZW5lcmljIG1lc3NhZ2UgaWYgcHJlc2VudCBhbmQgbm8gbWV0aG9kIHNwZWNpZmljIG1lc3NhZ2UgaXMgcHJlc2VudFxuXHRcdGN1c3RvbURhdGFNZXNzYWdlOiBmdW5jdGlvbiggZWxlbWVudCwgbWV0aG9kICkge1xuXHRcdFx0cmV0dXJuICQoIGVsZW1lbnQgKS5kYXRhKCBcIm1zZ1wiICsgbWV0aG9kLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHRtZXRob2Quc3Vic3RyaW5nKCAxICkudG9Mb3dlckNhc2UoKSApIHx8ICQoIGVsZW1lbnQgKS5kYXRhKCBcIm1zZ1wiICk7XG5cdFx0fSxcblxuXHRcdC8vIHJldHVybiB0aGUgY3VzdG9tIG1lc3NhZ2UgZm9yIHRoZSBnaXZlbiBlbGVtZW50IG5hbWUgYW5kIHZhbGlkYXRpb24gbWV0aG9kXG5cdFx0Y3VzdG9tTWVzc2FnZTogZnVuY3Rpb24oIG5hbWUsIG1ldGhvZCApIHtcblx0XHRcdHZhciBtID0gdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgbmFtZSBdO1xuXHRcdFx0cmV0dXJuIG0gJiYgKCBtLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgPyBtIDogbVsgbWV0aG9kIF0pO1xuXHRcdH0sXG5cblx0XHQvLyByZXR1cm4gdGhlIGZpcnN0IGRlZmluZWQgYXJndW1lbnQsIGFsbG93aW5nIGVtcHR5IHN0cmluZ3Ncblx0XHRmaW5kRGVmaW5lZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKCBhcmd1bWVudHNbIGkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBhcmd1bWVudHNbIGkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9LFxuXG5cdFx0ZGVmYXVsdE1lc3NhZ2U6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXRob2QgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5maW5kRGVmaW5lZChcblx0XHRcdFx0dGhpcy5jdXN0b21NZXNzYWdlKCBlbGVtZW50Lm5hbWUsIG1ldGhvZCApLFxuXHRcdFx0XHR0aGlzLmN1c3RvbURhdGFNZXNzYWdlKCBlbGVtZW50LCBtZXRob2QgKSxcblx0XHRcdFx0Ly8gdGl0bGUgaXMgbmV2ZXIgdW5kZWZpbmVkLCBzbyBoYW5kbGUgZW1wdHkgc3RyaW5nIGFzIHVuZGVmaW5lZFxuXHRcdFx0XHQhdGhpcy5zZXR0aW5ncy5pZ25vcmVUaXRsZSAmJiBlbGVtZW50LnRpdGxlIHx8IHVuZGVmaW5lZCxcblx0XHRcdFx0JC52YWxpZGF0b3IubWVzc2FnZXNbIG1ldGhvZCBdLFxuXHRcdFx0XHRcIjxzdHJvbmc+V2FybmluZzogTm8gbWVzc2FnZSBkZWZpbmVkIGZvciBcIiArIGVsZW1lbnQubmFtZSArIFwiPC9zdHJvbmc+XCJcblx0XHRcdCk7XG5cdFx0fSxcblxuXHRcdGZvcm1hdEFuZEFkZDogZnVuY3Rpb24oIGVsZW1lbnQsIHJ1bGUgKSB7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHJ1bGUubWV0aG9kICksXG5cdFx0XHRcdHRoZXJlZ2V4ID0gL1xcJD9cXHsoXFxkKylcXH0vZztcblx0XHRcdGlmICggdHlwZW9mIG1lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdFx0bWVzc2FnZSA9IG1lc3NhZ2UuY2FsbCggdGhpcywgcnVsZS5wYXJhbWV0ZXJzLCBlbGVtZW50ICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0aGVyZWdleC50ZXN0KCBtZXNzYWdlICkgKSB7XG5cdFx0XHRcdG1lc3NhZ2UgPSAkLnZhbGlkYXRvci5mb3JtYXQoIG1lc3NhZ2UucmVwbGFjZSggdGhlcmVnZXgsIFwieyQxfVwiICksIHJ1bGUucGFyYW1ldGVycyApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5lcnJvckxpc3QucHVzaCh7XG5cdFx0XHRcdG1lc3NhZ2U6IG1lc3NhZ2UsXG5cdFx0XHRcdGVsZW1lbnQ6IGVsZW1lbnQsXG5cdFx0XHRcdG1ldGhvZDogcnVsZS5tZXRob2Rcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmVycm9yTWFwWyBlbGVtZW50Lm5hbWUgXSA9IG1lc3NhZ2U7XG5cdFx0XHR0aGlzLnN1Ym1pdHRlZFsgZWxlbWVudC5uYW1lIF0gPSBtZXNzYWdlO1xuXHRcdH0sXG5cblx0XHRhZGRXcmFwcGVyOiBmdW5jdGlvbiggdG9Ub2dnbGUgKSB7XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Mud3JhcHBlciApIHtcblx0XHRcdFx0dG9Ub2dnbGUgPSB0b1RvZ2dsZS5hZGQoIHRvVG9nZ2xlLnBhcmVudCggdGhpcy5zZXR0aW5ncy53cmFwcGVyICkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0b1RvZ2dsZTtcblx0XHR9LFxuXG5cdFx0ZGVmYXVsdFNob3dFcnJvcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGksIGVsZW1lbnRzLCBlcnJvcjtcblx0XHRcdGZvciAoIGkgPSAwOyB0aGlzLmVycm9yTGlzdFsgaSBdOyBpKysgKSB7XG5cdFx0XHRcdGVycm9yID0gdGhpcy5lcnJvckxpc3RbIGkgXTtcblx0XHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmhpZ2hsaWdodCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmhpZ2hsaWdodC5jYWxsKCB0aGlzLCBlcnJvci5lbGVtZW50LCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MsIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc2hvd0xhYmVsKCBlcnJvci5lbGVtZW50LCBlcnJvci5tZXNzYWdlICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuZXJyb3JMaXN0Lmxlbmd0aCApIHtcblx0XHRcdFx0dGhpcy50b1Nob3cgPSB0aGlzLnRvU2hvdy5hZGQoIHRoaXMuY29udGFpbmVycyApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyB0aGlzLnN1Y2Nlc3NMaXN0WyBpIF07IGkrKyApIHtcblx0XHRcdFx0XHR0aGlzLnNob3dMYWJlbCggdGhpcy5zdWNjZXNzTGlzdFsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodCApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGVsZW1lbnRzID0gdGhpcy52YWxpZEVsZW1lbnRzKCk7IGVsZW1lbnRzWyBpIF07IGkrKyApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVsZW1lbnRzWyBpIF0sIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy50b0hpZGUubm90KCB0aGlzLnRvU2hvdyApO1xuXHRcdFx0dGhpcy5oaWRlRXJyb3JzKCk7XG5cdFx0XHR0aGlzLmFkZFdyYXBwZXIoIHRoaXMudG9TaG93ICkuc2hvdygpO1xuXHRcdH0sXG5cblx0XHR2YWxpZEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmN1cnJlbnRFbGVtZW50cy5ub3QoIHRoaXMuaW52YWxpZEVsZW1lbnRzKCkgKTtcblx0XHR9LFxuXG5cdFx0aW52YWxpZEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAkKCB0aGlzLmVycm9yTGlzdCApLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRzaG93TGFiZWw6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXNzYWdlICkge1xuXHRcdFx0dmFyIHBsYWNlLCBncm91cCwgZXJyb3JJRCxcblx0XHRcdFx0ZXJyb3IgPSB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApLFxuXHRcdFx0XHRlbGVtZW50SUQgPSB0aGlzLmlkT3JOYW1lKCBlbGVtZW50ICksXG5cdFx0XHRcdGRlc2NyaWJlZEJ5ID0gJCggZWxlbWVudCApLmF0dHIoIFwiYXJpYS1kZXNjcmliZWRieVwiICk7XG5cdFx0XHRpZiAoIGVycm9yLmxlbmd0aCApIHtcblx0XHRcdFx0Ly8gcmVmcmVzaCBlcnJvci9zdWNjZXNzIGNsYXNzXG5cdFx0XHRcdGVycm9yLnJlbW92ZUNsYXNzKCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKS5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzICk7XG5cdFx0XHRcdC8vIHJlcGxhY2UgbWVzc2FnZSBvbiBleGlzdGluZyBsYWJlbFxuXHRcdFx0XHRlcnJvci5odG1sKCBtZXNzYWdlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0XHRlcnJvciA9ICQoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy5lcnJvckVsZW1lbnQgKyBcIj5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIFwiaWRcIiwgZWxlbWVudElEICsgXCItZXJyb3JcIiApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKVxuXHRcdFx0XHRcdC5odG1sKCBtZXNzYWdlIHx8IFwiXCIgKTtcblxuXHRcdFx0XHQvLyBNYWludGFpbiByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgdG8gYmUgcGxhY2VkIGludG8gdGhlIERPTVxuXHRcdFx0XHRwbGFjZSA9IGVycm9yO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Mud3JhcHBlciApIHtcblx0XHRcdFx0XHQvLyBtYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSwgZXZlbiBpbiBJRVxuXHRcdFx0XHRcdC8vIGFjdHVhbGx5IHNob3dpbmcgdGhlIHdyYXBwZWQgZWxlbWVudCBpcyBoYW5kbGVkIGVsc2V3aGVyZVxuXHRcdFx0XHRcdHBsYWNlID0gZXJyb3IuaGlkZSgpLnNob3coKS53cmFwKCBcIjxcIiArIHRoaXMuc2V0dGluZ3Mud3JhcHBlciArIFwiLz5cIiApLnBhcmVudCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggdGhpcy5sYWJlbENvbnRhaW5lci5sZW5ndGggKSB7XG5cdFx0XHRcdFx0dGhpcy5sYWJlbENvbnRhaW5lci5hcHBlbmQoIHBsYWNlICk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRoaXMuc2V0dGluZ3MuZXJyb3JQbGFjZW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5lcnJvclBsYWNlbWVudCggcGxhY2UsICQoIGVsZW1lbnQgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHBsYWNlLmluc2VydEFmdGVyKCBlbGVtZW50ICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMaW5rIGVycm9yIGJhY2sgdG8gdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCBlcnJvci5pcyggXCJsYWJlbFwiICkgKSB7XG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVycm9yIGlzIGEgbGFiZWwsIHRoZW4gYXNzb2NpYXRlIHVzaW5nICdmb3InXG5cdFx0XHRcdFx0ZXJyb3IuYXR0ciggXCJmb3JcIiwgZWxlbWVudElEICk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGVycm9yLnBhcmVudHMoIFwibGFiZWxbZm9yPSdcIiArIGVsZW1lbnRJRCArIFwiJ11cIiApLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYSBjaGlsZCBvZiBhbiBhc3NvY2lhdGVkIGxhYmVsLCB0aGVuIGl0J3MgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0Ly8gdG8gZXhwbGljaXRseSBhcHBseSBhcmlhLWRlc2NyaWJlZGJ5XG5cblx0XHRcdFx0XHRlcnJvcklEID0gZXJyb3IuYXR0ciggXCJpZFwiICkucmVwbGFjZSggLyg6fFxcLnxcXFt8XFxdfFxcJCkvZywgXCJcXFxcJDFcIik7XG5cdFx0XHRcdFx0Ly8gUmVzcGVjdCBleGlzdGluZyBub24tZXJyb3IgYXJpYS1kZXNjcmliZWRieVxuXHRcdFx0XHRcdGlmICggIWRlc2NyaWJlZEJ5ICkge1xuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgPSBlcnJvcklEO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFkZXNjcmliZWRCeS5tYXRjaCggbmV3IFJlZ0V4cCggXCJcXFxcYlwiICsgZXJyb3JJRCArIFwiXFxcXGJcIiApICkgKSB7XG5cdFx0XHRcdFx0XHQvLyBBZGQgdG8gZW5kIG9mIGxpc3QgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgKz0gXCIgXCIgKyBlcnJvcklEO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIGRlc2NyaWJlZEJ5ICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGlzIGVsZW1lbnQgaXMgZ3JvdXBlZCwgdGhlbiBhc3NpZ24gdG8gYWxsIGVsZW1lbnRzIGluIHRoZSBzYW1lIGdyb3VwXG5cdFx0XHRcdFx0Z3JvdXAgPSB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdFx0aWYgKCBncm91cCApIHtcblx0XHRcdFx0XHRcdCQuZWFjaCggdGhpcy5ncm91cHMsIGZ1bmN0aW9uKCBuYW1lLCB0ZXN0Z3JvdXAgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggdGVzdGdyb3VwID09PSBncm91cCApIHtcblx0XHRcdFx0XHRcdFx0XHQkKCBcIltuYW1lPSdcIiArIG5hbWUgKyBcIiddXCIsIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmF0dHIoIFwiYXJpYS1kZXNjcmliZWRieVwiLCBlcnJvci5hdHRyKCBcImlkXCIgKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggIW1lc3NhZ2UgJiYgdGhpcy5zZXR0aW5ncy5zdWNjZXNzICkge1xuXHRcdFx0XHRlcnJvci50ZXh0KCBcIlwiICk7XG5cdFx0XHRcdGlmICggdHlwZW9mIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRlcnJvci5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5zdWNjZXNzICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5zdWNjZXNzKCBlcnJvciwgZWxlbWVudCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnRvU2hvdyA9IHRoaXMudG9TaG93LmFkZCggZXJyb3IgKTtcblx0XHR9LFxuXG5cdFx0ZXJyb3JzRm9yOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciBuYW1lID0gdGhpcy5pZE9yTmFtZSggZWxlbWVudCApLFxuXHRcdFx0XHRkZXNjcmliZXIgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIgKSxcblx0XHRcdFx0c2VsZWN0b3IgPSBcImxhYmVsW2Zvcj0nXCIgKyBuYW1lICsgXCInXSwgbGFiZWxbZm9yPSdcIiArIG5hbWUgKyBcIiddICpcIjtcblxuXHRcdFx0Ly8gYXJpYS1kZXNjcmliZWRieSBzaG91bGQgZGlyZWN0bHkgcmVmZXJlbmNlIHRoZSBlcnJvciBlbGVtZW50XG5cdFx0XHRpZiAoIGRlc2NyaWJlciApIHtcblx0XHRcdFx0c2VsZWN0b3IgPSBzZWxlY3RvciArIFwiLCAjXCIgKyBkZXNjcmliZXIucmVwbGFjZSggL1xccysvZywgXCIsICNcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXNcblx0XHRcdFx0LmVycm9ycygpXG5cdFx0XHRcdC5maWx0ZXIoIHNlbGVjdG9yICk7XG5cdFx0fSxcblxuXHRcdGlkT3JOYW1lOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF0gfHwgKCB0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApID8gZWxlbWVudC5uYW1lIDogZWxlbWVudC5pZCB8fCBlbGVtZW50Lm5hbWUgKTtcblx0XHR9LFxuXG5cdFx0dmFsaWRhdGlvblRhcmdldEZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIElmIHJhZGlvL2NoZWNrYm94LCB2YWxpZGF0ZSBmaXJzdCBlbGVtZW50IGluIGdyb3VwIGluc3RlYWRcblx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFsd2F5cyBhcHBseSBpZ25vcmUgZmlsdGVyXG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLm5vdCggdGhpcy5zZXR0aW5ncy5pZ25vcmUgKVsgMCBdO1xuXHRcdH0sXG5cblx0XHRjaGVja2FibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuICggL3JhZGlvfGNoZWNrYm94L2kgKS50ZXN0KCBlbGVtZW50LnR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZmluZEJ5TmFtZTogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gJCggdGhpcy5jdXJyZW50Rm9ybSApLmZpbmQoIFwiW25hbWU9J1wiICsgbmFtZSArIFwiJ11cIiApO1xuXHRcdH0sXG5cblx0XHRnZXRMZW5ndGg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdHN3aXRjaCAoIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdGNhc2UgXCJzZWxlY3RcIjpcblx0XHRcdFx0cmV0dXJuICQoIFwib3B0aW9uOnNlbGVjdGVkXCIsIGVsZW1lbnQgKS5sZW5ndGg7XG5cdFx0XHRjYXNlIFwiaW5wdXRcIjpcblx0XHRcdFx0aWYgKCB0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmZpbmRCeU5hbWUoIGVsZW1lbnQubmFtZSApLmZpbHRlciggXCI6Y2hlY2tlZFwiICkubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUubGVuZ3RoO1xuXHRcdH0sXG5cblx0XHRkZXBlbmQ6IGZ1bmN0aW9uKCBwYXJhbSwgZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLmRlcGVuZFR5cGVzW3R5cGVvZiBwYXJhbV0gPyB0aGlzLmRlcGVuZFR5cGVzW3R5cGVvZiBwYXJhbV0oIHBhcmFtLCBlbGVtZW50ICkgOiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZXBlbmRUeXBlczoge1xuXHRcdFx0XCJib29sZWFuXCI6IGZ1bmN0aW9uKCBwYXJhbSApIHtcblx0XHRcdFx0cmV0dXJuIHBhcmFtO1xuXHRcdFx0fSxcblx0XHRcdFwic3RyaW5nXCI6IGZ1bmN0aW9uKCBwYXJhbSwgZWxlbWVudCApIHtcblx0XHRcdFx0cmV0dXJuICEhJCggcGFyYW0sIGVsZW1lbnQuZm9ybSApLmxlbmd0aDtcblx0XHRcdH0sXG5cdFx0XHRcImZ1bmN0aW9uXCI6IGZ1bmN0aW9uKCBwYXJhbSwgZWxlbWVudCApIHtcblx0XHRcdFx0cmV0dXJuIHBhcmFtKCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdG9wdGlvbmFsOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciB2YWwgPSB0aGlzLmVsZW1lbnRWYWx1ZSggZWxlbWVudCApO1xuXHRcdFx0cmV0dXJuICEkLnZhbGlkYXRvci5tZXRob2RzLnJlcXVpcmVkLmNhbGwoIHRoaXMsIHZhbCwgZWxlbWVudCApICYmIFwiZGVwZW5kZW5jeS1taXNtYXRjaFwiO1xuXHRcdH0sXG5cblx0XHRzdGFydFJlcXVlc3Q6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0aWYgKCAhdGhpcy5wZW5kaW5nWyBlbGVtZW50Lm5hbWUgXSApIHtcblx0XHRcdFx0dGhpcy5wZW5kaW5nUmVxdWVzdCsrO1xuXHRcdFx0XHR0aGlzLnBlbmRpbmdbIGVsZW1lbnQubmFtZSBdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c3RvcFJlcXVlc3Q6IGZ1bmN0aW9uKCBlbGVtZW50LCB2YWxpZCApIHtcblx0XHRcdHRoaXMucGVuZGluZ1JlcXVlc3QtLTtcblx0XHRcdC8vIHNvbWV0aW1lcyBzeW5jaHJvbml6YXRpb24gZmFpbHMsIG1ha2Ugc3VyZSBwZW5kaW5nUmVxdWVzdCBpcyBuZXZlciA8IDBcblx0XHRcdGlmICggdGhpcy5wZW5kaW5nUmVxdWVzdCA8IDAgKSB7XG5cdFx0XHRcdHRoaXMucGVuZGluZ1JlcXVlc3QgPSAwO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHRoaXMucGVuZGluZ1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHRpZiAoIHZhbGlkICYmIHRoaXMucGVuZGluZ1JlcXVlc3QgPT09IDAgJiYgdGhpcy5mb3JtU3VibWl0dGVkICYmIHRoaXMuZm9ybSgpICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkuc3VibWl0KCk7XG5cdFx0XHRcdHRoaXMuZm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICghdmFsaWQgJiYgdGhpcy5wZW5kaW5nUmVxdWVzdCA9PT0gMCAmJiB0aGlzLmZvcm1TdWJtaXR0ZWQgKSB7XG5cdFx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKS50cmlnZ2VySGFuZGxlciggXCJpbnZhbGlkLWZvcm1cIiwgWyB0aGlzIF0pO1xuXHRcdFx0XHR0aGlzLmZvcm1TdWJtaXR0ZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0cHJldmlvdXNWYWx1ZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gJC5kYXRhKCBlbGVtZW50LCBcInByZXZpb3VzVmFsdWVcIiApIHx8ICQuZGF0YSggZWxlbWVudCwgXCJwcmV2aW91c1ZhbHVlXCIsIHtcblx0XHRcdFx0b2xkOiBudWxsLFxuXHRcdFx0XHR2YWxpZDogdHJ1ZSxcblx0XHRcdFx0bWVzc2FnZTogdGhpcy5kZWZhdWx0TWVzc2FnZSggZWxlbWVudCwgXCJyZW1vdGVcIiApXG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Ly8gY2xlYW5zIHVwIGFsbCBmb3JtcyBhbmQgZWxlbWVudHMsIHJlbW92ZXMgdmFsaWRhdG9yLXNwZWNpZmljIGV2ZW50c1xuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldEZvcm0oKTtcblxuXHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApXG5cdFx0XHRcdC5vZmYoIFwiLnZhbGlkYXRlXCIgKVxuXHRcdFx0XHQucmVtb3ZlRGF0YSggXCJ2YWxpZGF0b3JcIiApO1xuXHRcdH1cblxuXHR9LFxuXG5cdGNsYXNzUnVsZVNldHRpbmdzOiB7XG5cdFx0cmVxdWlyZWQ6IHsgcmVxdWlyZWQ6IHRydWUgfSxcblx0XHRlbWFpbDogeyBlbWFpbDogdHJ1ZSB9LFxuXHRcdHVybDogeyB1cmw6IHRydWUgfSxcblx0XHRkYXRlOiB7IGRhdGU6IHRydWUgfSxcblx0XHRkYXRlSVNPOiB7IGRhdGVJU086IHRydWUgfSxcblx0XHRudW1iZXI6IHsgbnVtYmVyOiB0cnVlIH0sXG5cdFx0ZGlnaXRzOiB7IGRpZ2l0czogdHJ1ZSB9LFxuXHRcdGNyZWRpdGNhcmQ6IHsgY3JlZGl0Y2FyZDogdHJ1ZSB9XG5cdH0sXG5cblx0YWRkQ2xhc3NSdWxlczogZnVuY3Rpb24oIGNsYXNzTmFtZSwgcnVsZXMgKSB7XG5cdFx0aWYgKCBjbGFzc05hbWUuY29uc3RydWN0b3IgPT09IFN0cmluZyApIHtcblx0XHRcdHRoaXMuY2xhc3NSdWxlU2V0dGluZ3NbIGNsYXNzTmFtZSBdID0gcnVsZXM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCQuZXh0ZW5kKCB0aGlzLmNsYXNzUnVsZVNldHRpbmdzLCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Y2xhc3NSdWxlczogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIHJ1bGVzID0ge30sXG5cdFx0XHRjbGFzc2VzID0gJCggZWxlbWVudCApLmF0dHIoIFwiY2xhc3NcIiApO1xuXG5cdFx0aWYgKCBjbGFzc2VzICkge1xuXHRcdFx0JC5lYWNoKCBjbGFzc2VzLnNwbGl0KCBcIiBcIiApLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzIGluICQudmFsaWRhdG9yLmNsYXNzUnVsZVNldHRpbmdzICkge1xuXHRcdFx0XHRcdCQuZXh0ZW5kKCBydWxlcywgJC52YWxpZGF0b3IuY2xhc3NSdWxlU2V0dGluZ3NbIHRoaXMgXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0bm9ybWFsaXplQXR0cmlidXRlUnVsZTogZnVuY3Rpb24oIHJ1bGVzLCB0eXBlLCBtZXRob2QsIHZhbHVlICkge1xuXG5cdFx0Ly8gY29udmVydCB0aGUgdmFsdWUgdG8gYSBudW1iZXIgZm9yIG51bWJlciBpbnB1dHMsIGFuZCBmb3IgdGV4dCBmb3IgYmFja3dhcmRzIGNvbXBhYmlsaXR5XG5cdFx0Ly8gYWxsb3dzIHR5cGU9XCJkYXRlXCIgYW5kIG90aGVycyB0byBiZSBjb21wYXJlZCBhcyBzdHJpbmdzXG5cdFx0aWYgKCAvbWlufG1heC8udGVzdCggbWV0aG9kICkgJiYgKCB0eXBlID09PSBudWxsIHx8IC9udW1iZXJ8cmFuZ2V8dGV4dC8udGVzdCggdHlwZSApICkgKSB7XG5cdFx0XHR2YWx1ZSA9IE51bWJlciggdmFsdWUgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydCBPcGVyYSBNaW5pLCB3aGljaCByZXR1cm5zIE5hTiBmb3IgdW5kZWZpbmVkIG1pbmxlbmd0aFxuXHRcdFx0aWYgKCBpc05hTiggdmFsdWUgKSApIHtcblx0XHRcdFx0dmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCApIHtcblx0XHRcdHJ1bGVzWyBtZXRob2QgXSA9IHZhbHVlO1xuXHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IG1ldGhvZCAmJiB0eXBlICE9PSBcInJhbmdlXCIgKSB7XG5cblx0XHRcdC8vIGV4Y2VwdGlvbjogdGhlIGpxdWVyeSB2YWxpZGF0ZSAncmFuZ2UnIG1ldGhvZFxuXHRcdFx0Ly8gZG9lcyBub3QgdGVzdCBmb3IgdGhlIGh0bWw1ICdyYW5nZScgdHlwZVxuXHRcdFx0cnVsZXNbIG1ldGhvZCBdID0gdHJ1ZTtcblx0XHR9XG5cdH0sXG5cblx0YXR0cmlidXRlUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cblx0XHRcdC8vIHN1cHBvcnQgZm9yIDxpbnB1dCByZXF1aXJlZD4gaW4gYm90aCBodG1sNSBhbmQgb2xkZXIgYnJvd3NlcnNcblx0XHRcdGlmICggbWV0aG9kID09PSBcInJlcXVpcmVkXCIgKSB7XG5cdFx0XHRcdHZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIG1ldGhvZCApO1xuXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBmb3IgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZVxuXHRcdFx0XHQvLyBhbmQgbm9uLUhUTUw1IGJyb3dzZXJzIG1pZ2h0IGhhdmUgcmVxdWlyZWQ9XCJcIiBtYXJrdXBcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBmb3JjZSBub24tSFRNTDUgYnJvd3NlcnMgdG8gcmV0dXJuIGJvb2xcblx0XHRcdFx0dmFsdWUgPSAhIXZhbHVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSAkZWxlbWVudC5hdHRyKCBtZXRob2QgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIG1heGxlbmd0aCBtYXkgYmUgcmV0dXJuZWQgYXMgLTEsIDIxNDc0ODM2NDcgKCBJRSApIGFuZCA1MjQyODggKCBzYWZhcmkgKSBmb3IgdGV4dCBpbnB1dHNcblx0XHRpZiAoIHJ1bGVzLm1heGxlbmd0aCAmJiAvLTF8MjE0NzQ4MzY0N3w1MjQyODgvLnRlc3QoIHJ1bGVzLm1heGxlbmd0aCApICkge1xuXHRcdFx0ZGVsZXRlIHJ1bGVzLm1heGxlbmd0aDtcblx0XHR9XG5cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0ZGF0YVJ1bGVzOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgcnVsZXMgPSB7fSxcblx0XHRcdCRlbGVtZW50ID0gJCggZWxlbWVudCApLFxuXHRcdFx0dHlwZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApLFxuXHRcdFx0bWV0aG9kLCB2YWx1ZTtcblxuXHRcdGZvciAoIG1ldGhvZCBpbiAkLnZhbGlkYXRvci5tZXRob2RzICkge1xuXHRcdFx0dmFsdWUgPSAkZWxlbWVudC5kYXRhKCBcInJ1bGVcIiArIG1ldGhvZC5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgbWV0aG9kLnN1YnN0cmluZyggMSApLnRvTG93ZXJDYXNlKCkgKTtcblx0XHRcdHRoaXMubm9ybWFsaXplQXR0cmlidXRlUnVsZSggcnVsZXMsIHR5cGUsIG1ldGhvZCwgdmFsdWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdHN0YXRpY1J1bGVzOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgcnVsZXMgPSB7fSxcblx0XHRcdHZhbGlkYXRvciA9ICQuZGF0YSggZWxlbWVudC5mb3JtLCBcInZhbGlkYXRvclwiICk7XG5cblx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5ydWxlcyApIHtcblx0XHRcdHJ1bGVzID0gJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggdmFsaWRhdG9yLnNldHRpbmdzLnJ1bGVzWyBlbGVtZW50Lm5hbWUgXSApIHx8IHt9O1xuXHRcdH1cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0bm9ybWFsaXplUnVsZXM6IGZ1bmN0aW9uKCBydWxlcywgZWxlbWVudCApIHtcblx0XHQvLyBoYW5kbGUgZGVwZW5kZW5jeSBjaGVja1xuXHRcdCQuZWFjaCggcnVsZXMsIGZ1bmN0aW9uKCBwcm9wLCB2YWwgKSB7XG5cdFx0XHQvLyBpZ25vcmUgcnVsZSB3aGVuIHBhcmFtIGlzIGV4cGxpY2l0bHkgZmFsc2UsIGVnLiByZXF1aXJlZDpmYWxzZVxuXHRcdFx0aWYgKCB2YWwgPT09IGZhbHNlICkge1xuXHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB2YWwucGFyYW0gfHwgdmFsLmRlcGVuZHMgKSB7XG5cdFx0XHRcdHZhciBrZWVwUnVsZSA9IHRydWU7XG5cdFx0XHRcdHN3aXRjaCAoIHR5cGVvZiB2YWwuZGVwZW5kcyApIHtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGtlZXBSdWxlID0gISEkKCB2YWwuZGVwZW5kcywgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRrZWVwUnVsZSA9IHZhbC5kZXBlbmRzLmNhbGwoIGVsZW1lbnQsIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGtlZXBSdWxlICkge1xuXHRcdFx0XHRcdHJ1bGVzWyBwcm9wIF0gPSB2YWwucGFyYW0gIT09IHVuZGVmaW5lZCA/IHZhbC5wYXJhbSA6IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHJ1bGVzWyBwcm9wIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIGV2YWx1YXRlIHBhcmFtZXRlcnNcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcnVsZSwgcGFyYW1ldGVyICkge1xuXHRcdFx0cnVsZXNbIHJ1bGUgXSA9ICQuaXNGdW5jdGlvbiggcGFyYW1ldGVyICkgPyBwYXJhbWV0ZXIoIGVsZW1lbnQgKSA6IHBhcmFtZXRlcjtcblx0XHR9KTtcblxuXHRcdC8vIGNsZWFuIG51bWJlciBwYXJhbWV0ZXJzXG5cdFx0JC5lYWNoKFsgXCJtaW5sZW5ndGhcIiwgXCJtYXhsZW5ndGhcIiBdLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggcnVsZXNbIHRoaXMgXSApIHtcblx0XHRcdFx0cnVsZXNbIHRoaXMgXSA9IE51bWJlciggcnVsZXNbIHRoaXMgXSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdCQuZWFjaChbIFwicmFuZ2VsZW5ndGhcIiwgXCJyYW5nZVwiIF0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHBhcnRzO1xuXHRcdFx0aWYgKCBydWxlc1sgdGhpcyBdICkge1xuXHRcdFx0XHRpZiAoICQuaXNBcnJheSggcnVsZXNbIHRoaXMgXSApICkge1xuXHRcdFx0XHRcdHJ1bGVzWyB0aGlzIF0gPSBbIE51bWJlciggcnVsZXNbIHRoaXMgXVsgMCBdKSwgTnVtYmVyKCBydWxlc1sgdGhpcyBdWyAxIF0gKSBdO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgcnVsZXNbIHRoaXMgXSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRwYXJ0cyA9IHJ1bGVzWyB0aGlzIF0ucmVwbGFjZSgvW1xcW1xcXV0vZywgXCJcIiApLnNwbGl0KCAvW1xccyxdKy8gKTtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHBhcnRzWyAwIF0pLCBOdW1iZXIoIHBhcnRzWyAxIF0gKSBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZiAoICQudmFsaWRhdG9yLmF1dG9DcmVhdGVSYW5nZXMgKSB7XG5cdFx0XHQvLyBhdXRvLWNyZWF0ZSByYW5nZXNcblx0XHRcdGlmICggcnVsZXMubWluICE9IG51bGwgJiYgcnVsZXMubWF4ICE9IG51bGwgKSB7XG5cdFx0XHRcdHJ1bGVzLnJhbmdlID0gWyBydWxlcy5taW4sIHJ1bGVzLm1heCBdO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWluO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWF4O1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBydWxlcy5taW5sZW5ndGggIT0gbnVsbCAmJiBydWxlcy5tYXhsZW5ndGggIT0gbnVsbCApIHtcblx0XHRcdFx0cnVsZXMucmFuZ2VsZW5ndGggPSBbIHJ1bGVzLm1pbmxlbmd0aCwgcnVsZXMubWF4bGVuZ3RoIF07XG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5taW5sZW5ndGg7XG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5tYXhsZW5ndGg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdC8vIENvbnZlcnRzIGEgc2ltcGxlIHN0cmluZyB0byBhIHtzdHJpbmc6IHRydWV9IHJ1bGUsIGUuZy4sIFwicmVxdWlyZWRcIiB0byB7cmVxdWlyZWQ6dHJ1ZX1cblx0bm9ybWFsaXplUnVsZTogZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHZhciB0cmFuc2Zvcm1lZCA9IHt9O1xuXHRcdFx0JC5lYWNoKCBkYXRhLnNwbGl0KCAvXFxzLyApLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dHJhbnNmb3JtZWRbIHRoaXMgXSA9IHRydWU7XG5cdFx0XHR9KTtcblx0XHRcdGRhdGEgPSB0cmFuc2Zvcm1lZDtcblx0XHR9XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH0sXG5cblx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3IuYWRkTWV0aG9kL1xuXHRhZGRNZXRob2Q6IGZ1bmN0aW9uKCBuYW1lLCBtZXRob2QsIG1lc3NhZ2UgKSB7XG5cdFx0JC52YWxpZGF0b3IubWV0aG9kc1sgbmFtZSBdID0gbWV0aG9kO1xuXHRcdCQudmFsaWRhdG9yLm1lc3NhZ2VzWyBuYW1lIF0gPSBtZXNzYWdlICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlIDogJC52YWxpZGF0b3IubWVzc2FnZXNbIG5hbWUgXTtcblx0XHRpZiAoIG1ldGhvZC5sZW5ndGggPCAzICkge1xuXHRcdFx0JC52YWxpZGF0b3IuYWRkQ2xhc3NSdWxlcyggbmFtZSwgJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggbmFtZSApICk7XG5cdFx0fVxuXHR9LFxuXG5cdG1ldGhvZHM6IHtcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9yZXF1aXJlZC1tZXRob2QvXG5cdFx0cmVxdWlyZWQ6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHQvLyBjaGVjayBpZiBkZXBlbmRlbmN5IGlzIG1ldFxuXHRcdFx0aWYgKCAhdGhpcy5kZXBlbmQoIHBhcmFtLCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIjtcblx0XHRcdH1cblx0XHRcdGlmICggZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInNlbGVjdFwiICkge1xuXHRcdFx0XHQvLyBjb3VsZCBiZSBhbiBhcnJheSBmb3Igc2VsZWN0LW11bHRpcGxlIG9yIGEgc3RyaW5nLCBib3RoIGFyZSBmaW5lIHRoaXMgd2F5XG5cdFx0XHRcdHZhciB2YWwgPSAkKCBlbGVtZW50ICkudmFsKCk7XG5cdFx0XHRcdHJldHVybiB2YWwgJiYgdmFsLmxlbmd0aCA+IDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKSA+IDA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUubGVuZ3RoID4gMDtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2VtYWlsLW1ldGhvZC9cblx0XHRlbWFpbDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0Ly8gRnJvbSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI3ZhbGlkLWUtbWFpbC1hZGRyZXNzXG5cdFx0XHQvLyBSZXRyaWV2ZWQgMjAxNC0wMS0xNFxuXHRcdFx0Ly8gSWYgeW91IGhhdmUgYSBwcm9ibGVtIHdpdGggdGhpcyBpbXBsZW1lbnRhdGlvbiwgcmVwb3J0IGEgYnVnIGFnYWluc3QgdGhlIGFib3ZlIHNwZWNcblx0XHRcdC8vIE9yIHVzZSBjdXN0b20gbWV0aG9kcyB0byBpbXBsZW1lbnQgeW91ciBvd24gZW1haWwgdmFsaWRhdGlvblxuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlthLXpBLVowLTkuISMkJSYnKitcXC89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdXJsLW1ldGhvZC9cblx0XHR1cmw6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblxuXHRcdFx0Ly8gQ29weXJpZ2h0IChjKSAyMDEwLTIwMTMgRGllZ28gUGVyaW5pLCBNSVQgbGljZW5zZWRcblx0XHRcdC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2RwZXJpbmkvNzI5Mjk0XG5cdFx0XHQvLyBzZWUgYWxzbyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvZGVtby91cmwtcmVnZXhcblx0XHRcdC8vIG1vZGlmaWVkIHRvIGFsbG93IHByb3RvY29sLXJlbGF0aXZlIFVSTHNcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oPzooPzooPzpodHRwcz98ZnRwKTopP1xcL1xcLykoPzpcXFMrKD86OlxcUyopP0ApPyg/Oig/ISg/OjEwfDEyNykoPzpcXC5cXGR7MSwzfSl7M30pKD8hKD86MTY5XFwuMjU0fDE5MlxcLjE2OCkoPzpcXC5cXGR7MSwzfSl7Mn0pKD8hMTcyXFwuKD86MVs2LTldfDJcXGR8M1swLTFdKSg/OlxcLlxcZHsxLDN9KXsyfSkoPzpbMS05XVxcZD98MVxcZFxcZHwyWzAxXVxcZHwyMlswLTNdKSg/OlxcLig/OjE/XFxkezEsMn18MlswLTRdXFxkfDI1WzAtNV0pKXsyfSg/OlxcLig/OlsxLTldXFxkP3wxXFxkXFxkfDJbMC00XVxcZHwyNVswLTRdKSl8KD86KD86W2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0tKikqW2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rKSg/OlxcLig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldLSopKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykqKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZl17Mix9KSkuPykoPzo6XFxkezIsNX0pPyg/OlsvPyNdXFxTKik/JC9pLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9kYXRlLW1ldGhvZC9cblx0XHRkYXRlOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8ICEvSW52YWxpZHxOYU4vLnRlc3QoIG5ldyBEYXRlKCB2YWx1ZSApLnRvU3RyaW5nKCkgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RhdGVJU08tbWV0aG9kL1xuXHRcdGRhdGVJU086IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL15cXGR7NH1bXFwvXFwtXSgwP1sxLTldfDFbMDEyXSlbXFwvXFwtXSgwP1sxLTldfFsxMl1bMC05XXwzWzAxXSkkLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbnVtYmVyLW1ldGhvZC9cblx0XHRudW1iZXI6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oPzotP1xcZCt8LT9cXGR7MSwzfSg/OixcXGR7M30pKyk/KD86XFwuXFxkKyk/JC8udGVzdCggdmFsdWUgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RpZ2l0cy1tZXRob2QvXG5cdFx0ZGlnaXRzOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXFxkKyQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9jcmVkaXRjYXJkLW1ldGhvZC9cblx0XHQvLyBiYXNlZCBvbiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0x1aG5fYWxnb3JpdGhtXG5cdFx0Y3JlZGl0Y2FyZDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0aWYgKCB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIjtcblx0XHRcdH1cblx0XHRcdC8vIGFjY2VwdCBvbmx5IHNwYWNlcywgZGlnaXRzIGFuZCBkYXNoZXNcblx0XHRcdGlmICggL1teMC05IFxcLV0rLy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgbkNoZWNrID0gMCxcblx0XHRcdFx0bkRpZ2l0ID0gMCxcblx0XHRcdFx0YkV2ZW4gPSBmYWxzZSxcblx0XHRcdFx0biwgY0RpZ2l0O1xuXG5cdFx0XHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApO1xuXG5cdFx0XHQvLyBCYXNpbmcgbWluIGFuZCBtYXggbGVuZ3RoIG9uXG5cdFx0XHQvLyBodHRwOi8vZGV2ZWxvcGVyLmVhbi5jb20vZ2VuZXJhbF9pbmZvL1ZhbGlkX0NyZWRpdF9DYXJkX1R5cGVzXG5cdFx0XHRpZiAoIHZhbHVlLmxlbmd0aCA8IDEzIHx8IHZhbHVlLmxlbmd0aCA+IDE5ICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIG4gPSB2YWx1ZS5sZW5ndGggLSAxOyBuID49IDA7IG4tLSkge1xuXHRcdFx0XHRjRGlnaXQgPSB2YWx1ZS5jaGFyQXQoIG4gKTtcblx0XHRcdFx0bkRpZ2l0ID0gcGFyc2VJbnQoIGNEaWdpdCwgMTAgKTtcblx0XHRcdFx0aWYgKCBiRXZlbiApIHtcblx0XHRcdFx0XHRpZiAoICggbkRpZ2l0ICo9IDIgKSA+IDkgKSB7XG5cdFx0XHRcdFx0XHRuRGlnaXQgLT0gOTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0bkNoZWNrICs9IG5EaWdpdDtcblx0XHRcdFx0YkV2ZW4gPSAhYkV2ZW47XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIG5DaGVjayAlIDEwICkgPT09IDA7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9taW5sZW5ndGgtbWV0aG9kL1xuXHRcdG1pbmxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgbGVuZ3RoID49IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWF4bGVuZ3RoLW1ldGhvZC9cblx0XHRtYXhsZW5ndGg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgbGVuZ3RoID0gJC5pc0FycmF5KCB2YWx1ZSApID8gdmFsdWUubGVuZ3RoIDogdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IGxlbmd0aCA8PSBwYXJhbTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JhbmdlbGVuZ3RoLW1ldGhvZC9cblx0XHRyYW5nZWxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgKCBsZW5ndGggPj0gcGFyYW1bIDAgXSAmJiBsZW5ndGggPD0gcGFyYW1bIDEgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWluLW1ldGhvZC9cblx0XHRtaW46IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHZhbHVlID49IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWF4LW1ldGhvZC9cblx0XHRtYXg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHZhbHVlIDw9IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmFuZ2UtbWV0aG9kL1xuXHRcdHJhbmdlOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAoIHZhbHVlID49IHBhcmFtWyAwIF0gJiYgdmFsdWUgPD0gcGFyYW1bIDEgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZXF1YWxUby1tZXRob2QvXG5cdFx0ZXF1YWxUbzogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdC8vIGJpbmQgdG8gdGhlIGJsdXIgZXZlbnQgb2YgdGhlIHRhcmdldCBpbiBvcmRlciB0byByZXZhbGlkYXRlIHdoZW5ldmVyIHRoZSB0YXJnZXQgZmllbGQgaXMgdXBkYXRlZFxuXHRcdFx0Ly8gVE9ETyBmaW5kIGEgd2F5IHRvIGJpbmQgdGhlIGV2ZW50IGp1c3Qgb25jZSwgYXZvaWRpbmcgdGhlIHVuYmluZC1yZWJpbmQgb3ZlcmhlYWRcblx0XHRcdHZhciB0YXJnZXQgPSAkKCBwYXJhbSApO1xuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLm9uZm9jdXNvdXQgKSB7XG5cdFx0XHRcdHRhcmdldC5vZmYoIFwiLnZhbGlkYXRlLWVxdWFsVG9cIiApLm9uKCBcImJsdXIudmFsaWRhdGUtZXF1YWxUb1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkKCBlbGVtZW50ICkudmFsaWQoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHRhcmdldC52YWwoKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JlbW90ZS1tZXRob2QvXG5cdFx0cmVtb3RlOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0aWYgKCB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHByZXZpb3VzID0gdGhpcy5wcmV2aW91c1ZhbHVlKCBlbGVtZW50ICksXG5cdFx0XHRcdHZhbGlkYXRvciwgZGF0YTtcblxuXHRcdFx0aWYgKCF0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSApIHtcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0gPSB7fTtcblx0XHRcdH1cblx0XHRcdHByZXZpb3VzLm9yaWdpbmFsTWVzc2FnZSA9IHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdLnJlbW90ZTtcblx0XHRcdHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdLnJlbW90ZSA9IHByZXZpb3VzLm1lc3NhZ2U7XG5cblx0XHRcdHBhcmFtID0gdHlwZW9mIHBhcmFtID09PSBcInN0cmluZ1wiICYmIHsgdXJsOiBwYXJhbSB9IHx8IHBhcmFtO1xuXG5cdFx0XHRpZiAoIHByZXZpb3VzLm9sZCA9PT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybiBwcmV2aW91cy52YWxpZDtcblx0XHRcdH1cblxuXHRcdFx0cHJldmlvdXMub2xkID0gdmFsdWU7XG5cdFx0XHR2YWxpZGF0b3IgPSB0aGlzO1xuXHRcdFx0dGhpcy5zdGFydFJlcXVlc3QoIGVsZW1lbnQgKTtcblx0XHRcdGRhdGEgPSB7fTtcblx0XHRcdGRhdGFbIGVsZW1lbnQubmFtZSBdID0gdmFsdWU7XG5cdFx0XHQkLmFqYXgoICQuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdG1vZGU6IFwiYWJvcnRcIixcblx0XHRcdFx0cG9ydDogXCJ2YWxpZGF0ZVwiICsgZWxlbWVudC5uYW1lLFxuXHRcdFx0XHRkYXRhVHlwZTogXCJqc29uXCIsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGNvbnRleHQ6IHZhbGlkYXRvci5jdXJyZW50Rm9ybSxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0XHRcdHZhciB2YWxpZCA9IHJlc3BvbnNlID09PSB0cnVlIHx8IHJlc3BvbnNlID09PSBcInRydWVcIixcblx0XHRcdFx0XHRcdGVycm9ycywgbWVzc2FnZSwgc3VibWl0dGVkO1xuXG5cdFx0XHRcdFx0dmFsaWRhdG9yLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXS5yZW1vdGUgPSBwcmV2aW91cy5vcmlnaW5hbE1lc3NhZ2U7XG5cdFx0XHRcdFx0aWYgKCB2YWxpZCApIHtcblx0XHRcdFx0XHRcdHN1Ym1pdHRlZCA9IHZhbGlkYXRvci5mb3JtU3VibWl0dGVkO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnByZXBhcmVFbGVtZW50KCBlbGVtZW50ICk7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IuZm9ybVN1Ym1pdHRlZCA9IHN1Ym1pdHRlZDtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5zdWNjZXNzTGlzdC5wdXNoKCBlbGVtZW50ICk7XG5cdFx0XHRcdFx0XHRkZWxldGUgdmFsaWRhdG9yLmludmFsaWRbIGVsZW1lbnQubmFtZSBdO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnNob3dFcnJvcnMoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZXJyb3JzID0ge307XG5cdFx0XHRcdFx0XHRtZXNzYWdlID0gcmVzcG9uc2UgfHwgdmFsaWRhdG9yLmRlZmF1bHRNZXNzYWdlKCBlbGVtZW50LCBcInJlbW90ZVwiICk7XG5cdFx0XHRcdFx0XHRlcnJvcnNbIGVsZW1lbnQubmFtZSBdID0gcHJldmlvdXMubWVzc2FnZSA9ICQuaXNGdW5jdGlvbiggbWVzc2FnZSApID8gbWVzc2FnZSggdmFsdWUgKSA6IG1lc3NhZ2U7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IuaW52YWxpZFsgZWxlbWVudC5uYW1lIF0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnNob3dFcnJvcnMoIGVycm9ycyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwcmV2aW91cy52YWxpZCA9IHZhbGlkO1xuXHRcdFx0XHRcdHZhbGlkYXRvci5zdG9wUmVxdWVzdCggZWxlbWVudCwgdmFsaWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgcGFyYW0gKSApO1xuXHRcdFx0cmV0dXJuIFwicGVuZGluZ1wiO1xuXHRcdH1cblx0fVxuXG59KTtcblxuLy8gYWpheCBtb2RlOiBhYm9ydFxuLy8gdXNhZ2U6ICQuYWpheCh7IG1vZGU6IFwiYWJvcnRcIlssIHBvcnQ6IFwidW5pcXVlcG9ydFwiXX0pO1xuLy8gaWYgbW9kZTpcImFib3J0XCIgaXMgdXNlZCwgdGhlIHByZXZpb3VzIHJlcXVlc3Qgb24gdGhhdCBwb3J0IChwb3J0IGNhbiBiZSB1bmRlZmluZWQpIGlzIGFib3J0ZWQgdmlhIFhNTEh0dHBSZXF1ZXN0LmFib3J0KClcblxudmFyIHBlbmRpbmdSZXF1ZXN0cyA9IHt9LFxuXHRhamF4O1xuLy8gVXNlIGEgcHJlZmlsdGVyIGlmIGF2YWlsYWJsZSAoMS41KylcbmlmICggJC5hamF4UHJlZmlsdGVyICkge1xuXHQkLmFqYXhQcmVmaWx0ZXIoZnVuY3Rpb24oIHNldHRpbmdzLCBfLCB4aHIgKSB7XG5cdFx0dmFyIHBvcnQgPSBzZXR0aW5ncy5wb3J0O1xuXHRcdGlmICggc2V0dGluZ3MubW9kZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0aWYgKCBwZW5kaW5nUmVxdWVzdHNbcG9ydF0gKSB7XG5cdFx0XHRcdHBlbmRpbmdSZXF1ZXN0c1twb3J0XS5hYm9ydCgpO1xuXHRcdFx0fVxuXHRcdFx0cGVuZGluZ1JlcXVlc3RzW3BvcnRdID0geGhyO1xuXHRcdH1cblx0fSk7XG59IGVsc2Uge1xuXHQvLyBQcm94eSBhamF4XG5cdGFqYXggPSAkLmFqYXg7XG5cdCQuYWpheCA9IGZ1bmN0aW9uKCBzZXR0aW5ncyApIHtcblx0XHR2YXIgbW9kZSA9ICggXCJtb2RlXCIgaW4gc2V0dGluZ3MgPyBzZXR0aW5ncyA6ICQuYWpheFNldHRpbmdzICkubW9kZSxcblx0XHRcdHBvcnQgPSAoIFwicG9ydFwiIGluIHNldHRpbmdzID8gc2V0dGluZ3MgOiAkLmFqYXhTZXR0aW5ncyApLnBvcnQ7XG5cdFx0aWYgKCBtb2RlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRpZiAoIHBlbmRpbmdSZXF1ZXN0c1twb3J0XSApIHtcblx0XHRcdFx0cGVuZGluZ1JlcXVlc3RzW3BvcnRdLmFib3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRwZW5kaW5nUmVxdWVzdHNbcG9ydF0gPSBhamF4LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHRyZXR1cm4gcGVuZGluZ1JlcXVlc3RzW3BvcnRdO1xuXHRcdH1cblx0XHRyZXR1cm4gYWpheC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9O1xufVxuXG59KSk7IiwiLyohXG4qKiBVbm9idHJ1c2l2ZSB2YWxpZGF0aW9uIHN1cHBvcnQgbGlicmFyeSBmb3IgalF1ZXJ5IGFuZCBqUXVlcnkgVmFsaWRhdGVcbioqIENvcHlyaWdodCAoQykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKi9cblxuLypqc2xpbnQgd2hpdGU6IHRydWUsIGJyb3dzZXI6IHRydWUsIG9uZXZhcjogdHJ1ZSwgdW5kZWY6IHRydWUsIG5vbWVuOiB0cnVlLCBlcWVxZXE6IHRydWUsIHBsdXNwbHVzOiB0cnVlLCBiaXR3aXNlOiB0cnVlLCByZWdleHA6IHRydWUsIG5ld2NhcDogdHJ1ZSwgaW1tZWQ6IHRydWUsIHN0cmljdDogZmFsc2UgKi9cbi8qZ2xvYmFsIGRvY3VtZW50OiBmYWxzZSwgalF1ZXJ5OiBmYWxzZSAqL1xuXG4oZnVuY3Rpb24gKCQpIHtcbiAgICB2YXIgJGpRdmFsID0gJC52YWxpZGF0b3IsXG4gICAgICAgIGFkYXB0ZXJzLFxuICAgICAgICBkYXRhX3ZhbGlkYXRpb24gPSBcInVub2J0cnVzaXZlVmFsaWRhdGlvblwiO1xuXG4gICAgZnVuY3Rpb24gc2V0VmFsaWRhdGlvblZhbHVlcyhvcHRpb25zLCBydWxlTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgb3B0aW9ucy5ydWxlc1tydWxlTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKG9wdGlvbnMubWVzc2FnZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5tZXNzYWdlc1tydWxlTmFtZV0gPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzcGxpdEFuZFRyaW0odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL15cXHMrfFxccyskL2csIFwiXCIpLnNwbGl0KC9cXHMqLFxccyovZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXNjYXBlQXR0cmlidXRlVmFsdWUodmFsdWUpIHtcbiAgICAgICAgLy8gQXMgbWVudGlvbmVkIG9uIGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jYXRlZ29yeS9zZWxlY3RvcnMvXG4gICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC8oWyFcIiMkJSYnKCkqKywuLzo7PD0+P0BcXFtcXFxcXFxdXmB7fH1+XSkvZywgXCJcXFxcJDFcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TW9kZWxQcmVmaXgoZmllbGROYW1lKSB7XG4gICAgICAgIHJldHVybiBmaWVsZE5hbWUuc3Vic3RyKDAsIGZpZWxkTmFtZS5sYXN0SW5kZXhPZihcIi5cIikgKyAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBlbmRNb2RlbFByZWZpeCh2YWx1ZSwgcHJlZml4KSB7XG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFwiKi5cIikgPT09IDApIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShcIiouXCIsIHByZWZpeCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IsIGlucHV0RWxlbWVudCkgeyAgLy8gJ3RoaXMnIGlzIHRoZSBmb3JtIGVsZW1lbnRcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9ICQodGhpcykuZmluZChcIltkYXRhLXZhbG1zZy1mb3I9J1wiICsgZXNjYXBlQXR0cmlidXRlVmFsdWUoaW5wdXRFbGVtZW50WzBdLm5hbWUpICsgXCInXVwiKSxcbiAgICAgICAgICAgIHJlcGxhY2VBdHRyVmFsdWUgPSBjb250YWluZXIuYXR0cihcImRhdGEtdmFsbXNnLXJlcGxhY2VcIiksXG4gICAgICAgICAgICByZXBsYWNlID0gcmVwbGFjZUF0dHJWYWx1ZSA/ICQucGFyc2VKU09OKHJlcGxhY2VBdHRyVmFsdWUpICE9PSBmYWxzZSA6IG51bGw7XG5cbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiZmllbGQtdmFsaWRhdGlvbi12YWxpZFwiKS5hZGRDbGFzcyhcImZpZWxkLXZhbGlkYXRpb24tZXJyb3JcIik7XG4gICAgICAgIGVycm9yLmRhdGEoXCJ1bm9idHJ1c2l2ZUNvbnRhaW5lclwiLCBjb250YWluZXIpO1xuXG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICBjb250YWluZXIuZW1wdHkoKTtcbiAgICAgICAgICAgIGVycm9yLnJlbW92ZUNsYXNzKFwiaW5wdXQtdmFsaWRhdGlvbi1lcnJvclwiKS5hcHBlbmRUbyhjb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXJyb3IuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25FcnJvcnMoZXZlbnQsIHZhbGlkYXRvcikgeyAgLy8gJ3RoaXMnIGlzIHRoZSBmb3JtIGVsZW1lbnRcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9ICQodGhpcykuZmluZChcIltkYXRhLXZhbG1zZy1zdW1tYXJ5PXRydWVdXCIpLFxuICAgICAgICAgICAgbGlzdCA9IGNvbnRhaW5lci5maW5kKFwidWxcIik7XG5cbiAgICAgICAgaWYgKGxpc3QgJiYgbGlzdC5sZW5ndGggJiYgdmFsaWRhdG9yLmVycm9yTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxpc3QuZW1wdHkoKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyhcInZhbGlkYXRpb24tc3VtbWFyeS1lcnJvcnNcIikucmVtb3ZlQ2xhc3MoXCJ2YWxpZGF0aW9uLXN1bW1hcnktdmFsaWRcIik7XG5cbiAgICAgICAgICAgICQuZWFjaCh2YWxpZGF0b3IuZXJyb3JMaXN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJChcIjxsaSAvPlwiKS5odG1sKHRoaXMubWVzc2FnZSkuYXBwZW5kVG8obGlzdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU3VjY2VzcyhlcnJvcikgeyAgLy8gJ3RoaXMnIGlzIHRoZSBmb3JtIGVsZW1lbnRcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGVycm9yLmRhdGEoXCJ1bm9idHJ1c2l2ZUNvbnRhaW5lclwiKTtcblxuICAgICAgICBpZiAoY29udGFpbmVyKSB7XG4gICAgICAgICAgICB2YXIgcmVwbGFjZUF0dHJWYWx1ZSA9IGNvbnRhaW5lci5hdHRyKFwiZGF0YS12YWxtc2ctcmVwbGFjZVwiKSxcbiAgICAgICAgICAgICAgICByZXBsYWNlID0gcmVwbGFjZUF0dHJWYWx1ZSA/ICQucGFyc2VKU09OKHJlcGxhY2VBdHRyVmFsdWUpIDogbnVsbDtcblxuICAgICAgICAgICAgY29udGFpbmVyLmFkZENsYXNzKFwiZmllbGQtdmFsaWRhdGlvbi12YWxpZFwiKS5yZW1vdmVDbGFzcyhcImZpZWxkLXZhbGlkYXRpb24tZXJyb3JcIik7XG4gICAgICAgICAgICBlcnJvci5yZW1vdmVEYXRhKFwidW5vYnRydXNpdmVDb250YWluZXJcIik7XG5cbiAgICAgICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmVtcHR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblJlc2V0KGV2ZW50KSB7ICAvLyAndGhpcycgaXMgdGhlIGZvcm0gZWxlbWVudFxuICAgICAgICB2YXIgJGZvcm0gPSAkKHRoaXMpLFxuICAgICAgICAgICAga2V5ID0gJ19fanF1ZXJ5X3Vub2J0cnVzaXZlX3ZhbGlkYXRpb25fZm9ybV9yZXNldCc7XG4gICAgICAgIGlmICgkZm9ybS5kYXRhKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgYSBmbGFnIHRoYXQgaW5kaWNhdGVzIHdlJ3JlIGN1cnJlbnRseSByZXNldHRpbmcgdGhlIGZvcm0uXG4gICAgICAgICRmb3JtLmRhdGEoa2V5LCB0cnVlKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICRmb3JtLmRhdGEoXCJ2YWxpZGF0b3JcIikucmVzZXRGb3JtKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAkZm9ybS5yZW1vdmVEYXRhKGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICAkZm9ybS5maW5kKFwiLnZhbGlkYXRpb24tc3VtbWFyeS1lcnJvcnNcIilcbiAgICAgICAgICAgIC5hZGRDbGFzcyhcInZhbGlkYXRpb24tc3VtbWFyeS12YWxpZFwiKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFwidmFsaWRhdGlvbi1zdW1tYXJ5LWVycm9yc1wiKTtcbiAgICAgICAgJGZvcm0uZmluZChcIi5maWVsZC12YWxpZGF0aW9uLWVycm9yXCIpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoXCJmaWVsZC12YWxpZGF0aW9uLXZhbGlkXCIpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJmaWVsZC12YWxpZGF0aW9uLWVycm9yXCIpXG4gICAgICAgICAgICAucmVtb3ZlRGF0YShcInVub2J0cnVzaXZlQ29udGFpbmVyXCIpXG4gICAgICAgICAgICAuZmluZChcIj4qXCIpICAvLyBJZiB3ZSB3ZXJlIHVzaW5nIHZhbG1zZy1yZXBsYWNlLCBnZXQgdGhlIHVuZGVybHlpbmcgZXJyb3JcbiAgICAgICAgICAgICAgICAucmVtb3ZlRGF0YShcInVub2J0cnVzaXZlQ29udGFpbmVyXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRpb25JbmZvKGZvcm0pIHtcbiAgICAgICAgdmFyICRmb3JtID0gJChmb3JtKSxcbiAgICAgICAgICAgIHJlc3VsdCA9ICRmb3JtLmRhdGEoZGF0YV92YWxpZGF0aW9uKSxcbiAgICAgICAgICAgIG9uUmVzZXRQcm94eSA9ICQucHJveHkob25SZXNldCwgZm9ybSksXG4gICAgICAgICAgICBkZWZhdWx0T3B0aW9ucyA9ICRqUXZhbC51bm9idHJ1c2l2ZS5vcHRpb25zIHx8IHt9LFxuICAgICAgICAgICAgZXhlY0luQ29udGV4dCA9IGZ1bmN0aW9uIChuYW1lLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmMgPSBkZWZhdWx0T3B0aW9uc1tuYW1lXTtcbiAgICAgICAgICAgICAgICBmdW5jICYmICQuaXNGdW5jdGlvbihmdW5jKSAmJiBmdW5jLmFwcGx5KGZvcm0sIGFyZ3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczogeyAgLy8gb3B0aW9ucyBzdHJ1Y3R1cmUgcGFzc2VkIHRvIGpRdWVyeSBWYWxpZGF0ZSdzIHZhbGlkYXRlKCkgbWV0aG9kXG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2xhc3M6IGRlZmF1bHRPcHRpb25zLmVycm9yQ2xhc3MgfHwgXCJpbnB1dC12YWxpZGF0aW9uLWVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yRWxlbWVudDogZGVmYXVsdE9wdGlvbnMuZXJyb3JFbGVtZW50IHx8IFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgICBlcnJvclBsYWNlbWVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvci5hcHBseShmb3JtLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0luQ29udGV4dChcImVycm9yUGxhY2VtZW50XCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRIYW5kbGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9ycy5hcHBseShmb3JtLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0luQ29udGV4dChcImludmFsaWRIYW5kbGVyXCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgcnVsZXM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MuYXBwbHkoZm9ybSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNJbkNvbnRleHQoXCJzdWNjZXNzXCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF0dGFjaFZhbGlkYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGZvcm1cbiAgICAgICAgICAgICAgICAgICAgICAgIC5vZmYoXCJyZXNldC5cIiArIGRhdGFfdmFsaWRhdGlvbiwgb25SZXNldFByb3h5KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uKFwicmVzZXQuXCIgKyBkYXRhX3ZhbGlkYXRpb24sIG9uUmVzZXRQcm94eSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC52YWxpZGF0ZSh0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICgpIHsgIC8vIGEgdmFsaWRhdGlvbiBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCBieSB1bm9idHJ1c2l2ZSBBamF4XG4gICAgICAgICAgICAgICAgICAgICRmb3JtLnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkZm9ybS52YWxpZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkZm9ybS5kYXRhKGRhdGFfdmFsaWRhdGlvbiwgcmVzdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgJGpRdmFsLnVub2J0cnVzaXZlID0ge1xuICAgICAgICBhZGFwdGVyczogW10sXG5cbiAgICAgICAgcGFyc2VFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgc2tpcEF0dGFjaCkge1xuICAgICAgICAgICAgLy8vIDxzdW1tYXJ5PlxuICAgICAgICAgICAgLy8vIFBhcnNlcyBhIHNpbmdsZSBIVE1MIGVsZW1lbnQgZm9yIHVub2J0cnVzaXZlIHZhbGlkYXRpb24gYXR0cmlidXRlcy5cbiAgICAgICAgICAgIC8vLyA8L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJlbGVtZW50XCIgZG9tRWxlbWVudD1cInRydWVcIj5UaGUgSFRNTCBlbGVtZW50IHRvIGJlIHBhcnNlZC48L3BhcmFtPlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwic2tpcEF0dGFjaFwiIHR5cGU9XCJCb29sZWFuXCI+W09wdGlvbmFsXSB0cnVlIHRvIHNraXAgYXR0YWNoaW5nIHRoZVxuICAgICAgICAgICAgLy8vIHZhbGlkYXRpb24gdG8gdGhlIGZvcm0uIElmIHBhcnNpbmcganVzdCB0aGlzIHNpbmdsZSBlbGVtZW50LCB5b3Ugc2hvdWxkIHNwZWNpZnkgdHJ1ZS5cbiAgICAgICAgICAgIC8vLyBJZiBwYXJzaW5nIHNldmVyYWwgZWxlbWVudHMsIHlvdSBzaG91bGQgc3BlY2lmeSBmYWxzZSwgYW5kIG1hbnVhbGx5IGF0dGFjaCB0aGUgdmFsaWRhdGlvblxuICAgICAgICAgICAgLy8vIHRvIHRoZSBmb3JtIHdoZW4geW91IGFyZSBmaW5pc2hlZC4gVGhlIGRlZmF1bHQgaXMgZmFsc2UuPC9wYXJhbT5cbiAgICAgICAgICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgZm9ybSA9ICRlbGVtZW50LnBhcmVudHMoXCJmb3JtXCIpWzBdLFxuICAgICAgICAgICAgICAgIHZhbEluZm8sIHJ1bGVzLCBtZXNzYWdlcztcblxuICAgICAgICAgICAgaWYgKCFmb3JtKSB7ICAvLyBDYW5ub3QgZG8gY2xpZW50LXNpZGUgdmFsaWRhdGlvbiB3aXRob3V0IGEgZm9ybVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsSW5mbyA9IHZhbGlkYXRpb25JbmZvKGZvcm0pO1xuICAgICAgICAgICAgdmFsSW5mby5vcHRpb25zLnJ1bGVzW2VsZW1lbnQubmFtZV0gPSBydWxlcyA9IHt9O1xuICAgICAgICAgICAgdmFsSW5mby5vcHRpb25zLm1lc3NhZ2VzW2VsZW1lbnQubmFtZV0gPSBtZXNzYWdlcyA9IHt9O1xuXG4gICAgICAgICAgICAkLmVhY2godGhpcy5hZGFwdGVycywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBwcmVmaXggPSBcImRhdGEtdmFsLVwiICsgdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJGVsZW1lbnQuYXR0cihwcmVmaXgpLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbVZhbHVlcyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgeyAgLy8gQ29tcGFyZSBhZ2FpbnN0IHVuZGVmaW5lZCwgYmVjYXVzZSBhbiBlbXB0eSBtZXNzYWdlIGlzIGxlZ2FsIChhbmQgZmFsc3kpXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeCArPSBcIi1cIjtcblxuICAgICAgICAgICAgICAgICAgICAkLmVhY2godGhpcy5wYXJhbXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtVmFsdWVzW3RoaXNdID0gJGVsZW1lbnQuYXR0cihwcmVmaXggKyB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGFwdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybTogZm9ybSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtVmFsdWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXM6IHJ1bGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXM6IG1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkLmV4dGVuZChydWxlcywgeyBcIl9fZHVtbXlfX1wiOiB0cnVlIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXNraXBBdHRhY2gpIHtcbiAgICAgICAgICAgICAgICB2YWxJbmZvLmF0dGFjaFZhbGlkYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAvLy8gPHN1bW1hcnk+XG4gICAgICAgICAgICAvLy8gUGFyc2VzIGFsbCB0aGUgSFRNTCBlbGVtZW50cyBpbiB0aGUgc3BlY2lmaWVkIHNlbGVjdG9yLiBJdCBsb29rcyBmb3IgaW5wdXQgZWxlbWVudHMgZGVjb3JhdGVkXG4gICAgICAgICAgICAvLy8gd2l0aCB0aGUgW2RhdGEtdmFsPXRydWVdIGF0dHJpYnV0ZSB2YWx1ZSBhbmQgZW5hYmxlcyB2YWxpZGF0aW9uIGFjY29yZGluZyB0byB0aGUgZGF0YS12YWwtKlxuICAgICAgICAgICAgLy8vIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICAgICAgICAvLy8gPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwic2VsZWN0b3JcIiB0eXBlPVwiU3RyaW5nXCI+QW55IHZhbGlkIGpRdWVyeSBzZWxlY3Rvci48L3BhcmFtPlxuXG4gICAgICAgICAgICAvLyAkZm9ybXMgaW5jbHVkZXMgYWxsIGZvcm1zIGluIHNlbGVjdG9yJ3MgRE9NIGhpZXJhcmNoeSAocGFyZW50LCBjaGlsZHJlbiBhbmQgc2VsZikgdGhhdCBoYXZlIGF0IGxlYXN0IG9uZVxuICAgICAgICAgICAgLy8gZWxlbWVudCB3aXRoIGRhdGEtdmFsPXRydWVcbiAgICAgICAgICAgIHZhciAkc2VsZWN0b3IgPSAkKHNlbGVjdG9yKSxcbiAgICAgICAgICAgICAgICAkZm9ybXMgPSAkc2VsZWN0b3IucGFyZW50cygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZEJhY2soKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoXCJmb3JtXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZCgkc2VsZWN0b3IuZmluZChcImZvcm1cIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmhhcyhcIltkYXRhLXZhbD10cnVlXVwiKTtcblxuICAgICAgICAgICAgJHNlbGVjdG9yLmZpbmQoXCJbZGF0YS12YWw9dHJ1ZV1cIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGpRdmFsLnVub2J0cnVzaXZlLnBhcnNlRWxlbWVudCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkZm9ybXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZm8gPSB2YWxpZGF0aW9uSW5mbyh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5mbykge1xuICAgICAgICAgICAgICAgICAgICBpbmZvLmF0dGFjaFZhbGlkYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBhZGFwdGVycyA9ICRqUXZhbC51bm9idHJ1c2l2ZS5hZGFwdGVycztcblxuICAgIGFkYXB0ZXJzLmFkZCA9IGZ1bmN0aW9uIChhZGFwdGVyTmFtZSwgcGFyYW1zLCBmbikge1xuICAgICAgICAvLy8gPHN1bW1hcnk+QWRkcyBhIG5ldyBhZGFwdGVyIHRvIGNvbnZlcnQgdW5vYnRydXNpdmUgSFRNTCBpbnRvIGEgalF1ZXJ5IFZhbGlkYXRlIHZhbGlkYXRpb24uPC9zdW1tYXJ5PlxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJhZGFwdGVyTmFtZVwiIHR5cGU9XCJTdHJpbmdcIj5UaGUgbmFtZSBvZiB0aGUgYWRhcHRlciB0byBiZSBhZGRlZC4gVGhpcyBtYXRjaGVzIHRoZSBuYW1lIHVzZWRcbiAgICAgICAgLy8vIGluIHRoZSBkYXRhLXZhbC1ubm5uIEhUTUwgYXR0cmlidXRlICh3aGVyZSBubm5uIGlzIHRoZSBhZGFwdGVyIG5hbWUpLjwvcGFyYW0+XG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInBhcmFtc1wiIHR5cGU9XCJBcnJheVwiIG9wdGlvbmFsPVwidHJ1ZVwiPltPcHRpb25hbF0gQW4gYXJyYXkgb2YgcGFyYW1ldGVyIG5hbWVzIChzdHJpbmdzKSB0aGF0IHdpbGxcbiAgICAgICAgLy8vIGJlIGV4dHJhY3RlZCBmcm9tIHRoZSBkYXRhLXZhbC1ubm5uLW1tbW0gSFRNTCBhdHRyaWJ1dGVzICh3aGVyZSBubm5uIGlzIHRoZSBhZGFwdGVyIG5hbWUsIGFuZFxuICAgICAgICAvLy8gbW1tbSBpcyB0aGUgcGFyYW1ldGVyIG5hbWUpLjwvcGFyYW0+XG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImZuXCIgdHlwZT1cIkZ1bmN0aW9uXCI+VGhlIGZ1bmN0aW9uIHRvIGNhbGwsIHdoaWNoIGFkYXB0cyB0aGUgdmFsdWVzIGZyb20gdGhlIEhUTUxcbiAgICAgICAgLy8vIGF0dHJpYnV0ZXMgaW50byBqUXVlcnkgVmFsaWRhdGUgcnVsZXMgYW5kL29yIG1lc3NhZ2VzLjwvcGFyYW0+XG4gICAgICAgIC8vLyA8cmV0dXJucyB0eXBlPVwialF1ZXJ5LnZhbGlkYXRvci51bm9idHJ1c2l2ZS5hZGFwdGVyc1wiIC8+XG4gICAgICAgIGlmICghZm4pIHsgIC8vIENhbGxlZCB3aXRoIG5vIHBhcmFtcywganVzdCBhIGZ1bmN0aW9uXG4gICAgICAgICAgICBmbiA9IHBhcmFtcztcbiAgICAgICAgICAgIHBhcmFtcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVzaCh7IG5hbWU6IGFkYXB0ZXJOYW1lLCBwYXJhbXM6IHBhcmFtcywgYWRhcHQ6IGZuIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgYWRhcHRlcnMuYWRkQm9vbCA9IGZ1bmN0aW9uIChhZGFwdGVyTmFtZSwgcnVsZU5hbWUpIHtcbiAgICAgICAgLy8vIDxzdW1tYXJ5PkFkZHMgYSBuZXcgYWRhcHRlciB0byBjb252ZXJ0IHVub2J0cnVzaXZlIEhUTUwgaW50byBhIGpRdWVyeSBWYWxpZGF0ZSB2YWxpZGF0aW9uLCB3aGVyZVxuICAgICAgICAvLy8gdGhlIGpRdWVyeSBWYWxpZGF0ZSB2YWxpZGF0aW9uIHJ1bGUgaGFzIG5vIHBhcmFtZXRlciB2YWx1ZXMuPC9zdW1tYXJ5PlxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJhZGFwdGVyTmFtZVwiIHR5cGU9XCJTdHJpbmdcIj5UaGUgbmFtZSBvZiB0aGUgYWRhcHRlciB0byBiZSBhZGRlZC4gVGhpcyBtYXRjaGVzIHRoZSBuYW1lIHVzZWRcbiAgICAgICAgLy8vIGluIHRoZSBkYXRhLXZhbC1ubm5uIEhUTUwgYXR0cmlidXRlICh3aGVyZSBubm5uIGlzIHRoZSBhZGFwdGVyIG5hbWUpLjwvcGFyYW0+XG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInJ1bGVOYW1lXCIgdHlwZT1cIlN0cmluZ1wiIG9wdGlvbmFsPVwidHJ1ZVwiPltPcHRpb25hbF0gVGhlIG5hbWUgb2YgdGhlIGpRdWVyeSBWYWxpZGF0ZSBydWxlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSB2YWx1ZVxuICAgICAgICAvLy8gb2YgYWRhcHRlck5hbWUgd2lsbCBiZSB1c2VkIGluc3RlYWQuPC9wYXJhbT5cbiAgICAgICAgLy8vIDxyZXR1cm5zIHR5cGU9XCJqUXVlcnkudmFsaWRhdG9yLnVub2J0cnVzaXZlLmFkYXB0ZXJzXCIgLz5cbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGFkYXB0ZXJOYW1lLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgc2V0VmFsaWRhdGlvblZhbHVlcyhvcHRpb25zLCBydWxlTmFtZSB8fCBhZGFwdGVyTmFtZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBhZGFwdGVycy5hZGRNaW5NYXggPSBmdW5jdGlvbiAoYWRhcHRlck5hbWUsIG1pblJ1bGVOYW1lLCBtYXhSdWxlTmFtZSwgbWluTWF4UnVsZU5hbWUsIG1pbkF0dHJpYnV0ZSwgbWF4QXR0cmlidXRlKSB7XG4gICAgICAgIC8vLyA8c3VtbWFyeT5BZGRzIGEgbmV3IGFkYXB0ZXIgdG8gY29udmVydCB1bm9idHJ1c2l2ZSBIVE1MIGludG8gYSBqUXVlcnkgVmFsaWRhdGUgdmFsaWRhdGlvbiwgd2hlcmVcbiAgICAgICAgLy8vIHRoZSBqUXVlcnkgVmFsaWRhdGUgdmFsaWRhdGlvbiBoYXMgdGhyZWUgcG90ZW50aWFsIHJ1bGVzIChvbmUgZm9yIG1pbi1vbmx5LCBvbmUgZm9yIG1heC1vbmx5LCBhbmRcbiAgICAgICAgLy8vIG9uZSBmb3IgbWluLWFuZC1tYXgpLiBUaGUgSFRNTCBwYXJhbWV0ZXJzIGFyZSBleHBlY3RlZCB0byBiZSBuYW1lZCAtbWluIGFuZCAtbWF4Ljwvc3VtbWFyeT5cbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiYWRhcHRlck5hbWVcIiB0eXBlPVwiU3RyaW5nXCI+VGhlIG5hbWUgb2YgdGhlIGFkYXB0ZXIgdG8gYmUgYWRkZWQuIFRoaXMgbWF0Y2hlcyB0aGUgbmFtZSB1c2VkXG4gICAgICAgIC8vLyBpbiB0aGUgZGF0YS12YWwtbm5ubiBIVE1MIGF0dHJpYnV0ZSAod2hlcmUgbm5ubiBpcyB0aGUgYWRhcHRlciBuYW1lKS48L3BhcmFtPlxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJtaW5SdWxlTmFtZVwiIHR5cGU9XCJTdHJpbmdcIj5UaGUgbmFtZSBvZiB0aGUgalF1ZXJ5IFZhbGlkYXRlIHJ1bGUgdG8gYmUgdXNlZCB3aGVuIHlvdSBvbmx5XG4gICAgICAgIC8vLyBoYXZlIGEgbWluaW11bSB2YWx1ZS48L3BhcmFtPlxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJtYXhSdWxlTmFtZVwiIHR5cGU9XCJTdHJpbmdcIj5UaGUgbmFtZSBvZiB0aGUgalF1ZXJ5IFZhbGlkYXRlIHJ1bGUgdG8gYmUgdXNlZCB3aGVuIHlvdSBvbmx5XG4gICAgICAgIC8vLyBoYXZlIGEgbWF4aW11bSB2YWx1ZS48L3BhcmFtPlxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJtaW5NYXhSdWxlTmFtZVwiIHR5cGU9XCJTdHJpbmdcIj5UaGUgbmFtZSBvZiB0aGUgalF1ZXJ5IFZhbGlkYXRlIHJ1bGUgdG8gYmUgdXNlZCB3aGVuIHlvdVxuICAgICAgICAvLy8gaGF2ZSBib3RoIGEgbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZS48L3BhcmFtPlxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJtaW5BdHRyaWJ1dGVcIiB0eXBlPVwiU3RyaW5nXCIgb3B0aW9uYWw9XCJ0cnVlXCI+W09wdGlvbmFsXSBUaGUgbmFtZSBvZiB0aGUgSFRNTCBhdHRyaWJ1dGUgdGhhdFxuICAgICAgICAvLy8gY29udGFpbnMgdGhlIG1pbmltdW0gdmFsdWUuIFRoZSBkZWZhdWx0IGlzIFwibWluXCIuPC9wYXJhbT5cbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwibWF4QXR0cmlidXRlXCIgdHlwZT1cIlN0cmluZ1wiIG9wdGlvbmFsPVwidHJ1ZVwiPltPcHRpb25hbF0gVGhlIG5hbWUgb2YgdGhlIEhUTUwgYXR0cmlidXRlIHRoYXRcbiAgICAgICAgLy8vIGNvbnRhaW5zIHRoZSBtYXhpbXVtIHZhbHVlLiBUaGUgZGVmYXVsdCBpcyBcIm1heFwiLjwvcGFyYW0+XG4gICAgICAgIC8vLyA8cmV0dXJucyB0eXBlPVwialF1ZXJ5LnZhbGlkYXRvci51bm9idHJ1c2l2ZS5hZGFwdGVyc1wiIC8+XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChhZGFwdGVyTmFtZSwgW21pbkF0dHJpYnV0ZSB8fCBcIm1pblwiLCBtYXhBdHRyaWJ1dGUgfHwgXCJtYXhcIl0sIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgbWluID0gb3B0aW9ucy5wYXJhbXMubWluLFxuICAgICAgICAgICAgICAgIG1heCA9IG9wdGlvbnMucGFyYW1zLm1heDtcblxuICAgICAgICAgICAgaWYgKG1pbiAmJiBtYXgpIHtcbiAgICAgICAgICAgICAgICBzZXRWYWxpZGF0aW9uVmFsdWVzKG9wdGlvbnMsIG1pbk1heFJ1bGVOYW1lLCBbbWluLCBtYXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG1pbikge1xuICAgICAgICAgICAgICAgIHNldFZhbGlkYXRpb25WYWx1ZXMob3B0aW9ucywgbWluUnVsZU5hbWUsIG1pbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtYXgpIHtcbiAgICAgICAgICAgICAgICBzZXRWYWxpZGF0aW9uVmFsdWVzKG9wdGlvbnMsIG1heFJ1bGVOYW1lLCBtYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgYWRhcHRlcnMuYWRkU2luZ2xlVmFsID0gZnVuY3Rpb24gKGFkYXB0ZXJOYW1lLCBhdHRyaWJ1dGUsIHJ1bGVOYW1lKSB7XG4gICAgICAgIC8vLyA8c3VtbWFyeT5BZGRzIGEgbmV3IGFkYXB0ZXIgdG8gY29udmVydCB1bm9idHJ1c2l2ZSBIVE1MIGludG8gYSBqUXVlcnkgVmFsaWRhdGUgdmFsaWRhdGlvbiwgd2hlcmVcbiAgICAgICAgLy8vIHRoZSBqUXVlcnkgVmFsaWRhdGUgdmFsaWRhdGlvbiBydWxlIGhhcyBhIHNpbmdsZSB2YWx1ZS48L3N1bW1hcnk+XG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImFkYXB0ZXJOYW1lXCIgdHlwZT1cIlN0cmluZ1wiPlRoZSBuYW1lIG9mIHRoZSBhZGFwdGVyIHRvIGJlIGFkZGVkLiBUaGlzIG1hdGNoZXMgdGhlIG5hbWUgdXNlZFxuICAgICAgICAvLy8gaW4gdGhlIGRhdGEtdmFsLW5ubm4gSFRNTCBhdHRyaWJ1dGUod2hlcmUgbm5ubiBpcyB0aGUgYWRhcHRlciBuYW1lKS48L3BhcmFtPlxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJhdHRyaWJ1dGVcIiB0eXBlPVwiU3RyaW5nXCI+W09wdGlvbmFsXSBUaGUgbmFtZSBvZiB0aGUgSFRNTCBhdHRyaWJ1dGUgdGhhdCBjb250YWlucyB0aGUgdmFsdWUuXG4gICAgICAgIC8vLyBUaGUgZGVmYXVsdCBpcyBcInZhbFwiLjwvcGFyYW0+XG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInJ1bGVOYW1lXCIgdHlwZT1cIlN0cmluZ1wiIG9wdGlvbmFsPVwidHJ1ZVwiPltPcHRpb25hbF0gVGhlIG5hbWUgb2YgdGhlIGpRdWVyeSBWYWxpZGF0ZSBydWxlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSB2YWx1ZVxuICAgICAgICAvLy8gb2YgYWRhcHRlck5hbWUgd2lsbCBiZSB1c2VkIGluc3RlYWQuPC9wYXJhbT5cbiAgICAgICAgLy8vIDxyZXR1cm5zIHR5cGU9XCJqUXVlcnkudmFsaWRhdG9yLnVub2J0cnVzaXZlLmFkYXB0ZXJzXCIgLz5cbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGFkYXB0ZXJOYW1lLCBbYXR0cmlidXRlIHx8IFwidmFsXCJdLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgc2V0VmFsaWRhdGlvblZhbHVlcyhvcHRpb25zLCBydWxlTmFtZSB8fCBhZGFwdGVyTmFtZSwgb3B0aW9ucy5wYXJhbXNbYXR0cmlidXRlXSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkalF2YWwuYWRkTWV0aG9kKFwiX19kdW1teV9fXCIsIGZ1bmN0aW9uICh2YWx1ZSwgZWxlbWVudCwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuXG4gICAgJGpRdmFsLmFkZE1ldGhvZChcInJlZ2V4XCIsIGZ1bmN0aW9uICh2YWx1ZSwgZWxlbWVudCwgcGFyYW1zKSB7XG4gICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uYWwoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF0Y2ggPSBuZXcgUmVnRXhwKHBhcmFtcykuZXhlYyh2YWx1ZSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggJiYgKG1hdGNoLmluZGV4ID09PSAwKSAmJiAobWF0Y2hbMF0ubGVuZ3RoID09PSB2YWx1ZS5sZW5ndGgpKTtcbiAgICB9KTtcblxuICAgICRqUXZhbC5hZGRNZXRob2QoXCJub25hbHBoYW1pblwiLCBmdW5jdGlvbiAodmFsdWUsIGVsZW1lbnQsIG5vbmFscGhhbWluKSB7XG4gICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgaWYgKG5vbmFscGhhbWluKSB7XG4gICAgICAgICAgICBtYXRjaCA9IHZhbHVlLm1hdGNoKC9cXFcvZyk7XG4gICAgICAgICAgICBtYXRjaCA9IG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+PSBub25hbHBoYW1pbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICBpZiAoJGpRdmFsLm1ldGhvZHMuZXh0ZW5zaW9uKSB7XG4gICAgICAgIGFkYXB0ZXJzLmFkZFNpbmdsZVZhbChcImFjY2VwdFwiLCBcIm1pbXR5cGVcIik7XG4gICAgICAgIGFkYXB0ZXJzLmFkZFNpbmdsZVZhbChcImV4dGVuc2lvblwiLCBcImV4dGVuc2lvblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgd2hlbiB0aGUgJ2V4dGVuc2lvbicgdmFsaWRhdGlvbiBtZXRob2QgZG9lcyBub3QgZXhpc3QsIHN1Y2ggYXMgd2l0aCB2ZXJzaW9uc1xuICAgICAgICAvLyBvZiBKUXVlcnkgVmFsaWRhdGlvbiBwbHVnaW4gcHJpb3IgdG8gMS4xMCwgd2Ugc2hvdWxkIHVzZSB0aGUgJ2FjY2VwdCcgbWV0aG9kIGZvclxuICAgICAgICAvLyB2YWxpZGF0aW5nIHRoZSBleHRlbnNpb24sIGFuZCBpZ25vcmUgbWltZS10eXBlIHZhbGlkYXRpb25zIGFzIHRoZXkgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgICAgIGFkYXB0ZXJzLmFkZFNpbmdsZVZhbChcImV4dGVuc2lvblwiLCBcImV4dGVuc2lvblwiLCBcImFjY2VwdFwiKTtcbiAgICB9XG5cbiAgICBhZGFwdGVycy5hZGRTaW5nbGVWYWwoXCJyZWdleFwiLCBcInBhdHRlcm5cIik7XG4gICAgYWRhcHRlcnMuYWRkQm9vbChcImNyZWRpdGNhcmRcIikuYWRkQm9vbChcImRhdGVcIikuYWRkQm9vbChcImRpZ2l0c1wiKS5hZGRCb29sKFwiZW1haWxcIikuYWRkQm9vbChcIm51bWJlclwiKS5hZGRCb29sKFwidXJsXCIpO1xuICAgIGFkYXB0ZXJzLmFkZE1pbk1heChcImxlbmd0aFwiLCBcIm1pbmxlbmd0aFwiLCBcIm1heGxlbmd0aFwiLCBcInJhbmdlbGVuZ3RoXCIpLmFkZE1pbk1heChcInJhbmdlXCIsIFwibWluXCIsIFwibWF4XCIsIFwicmFuZ2VcIik7XG4gICAgYWRhcHRlcnMuYWRkTWluTWF4KFwibWlubGVuZ3RoXCIsIFwibWlubGVuZ3RoXCIpLmFkZE1pbk1heChcIm1heGxlbmd0aFwiLCBcIm1pbmxlbmd0aFwiLCBcIm1heGxlbmd0aFwiKTtcbiAgICBhZGFwdGVycy5hZGQoXCJlcXVhbHRvXCIsIFtcIm90aGVyXCJdLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgcHJlZml4ID0gZ2V0TW9kZWxQcmVmaXgob3B0aW9ucy5lbGVtZW50Lm5hbWUpLFxuICAgICAgICAgICAgb3RoZXIgPSBvcHRpb25zLnBhcmFtcy5vdGhlcixcbiAgICAgICAgICAgIGZ1bGxPdGhlck5hbWUgPSBhcHBlbmRNb2RlbFByZWZpeChvdGhlciwgcHJlZml4KSxcbiAgICAgICAgICAgIGVsZW1lbnQgPSAkKG9wdGlvbnMuZm9ybSkuZmluZChcIjppbnB1dFwiKS5maWx0ZXIoXCJbbmFtZT0nXCIgKyBlc2NhcGVBdHRyaWJ1dGVWYWx1ZShmdWxsT3RoZXJOYW1lKSArIFwiJ11cIilbMF07XG5cbiAgICAgICAgc2V0VmFsaWRhdGlvblZhbHVlcyhvcHRpb25zLCBcImVxdWFsVG9cIiwgZWxlbWVudCk7XG4gICAgfSk7XG4gICAgYWRhcHRlcnMuYWRkKFwicmVxdWlyZWRcIiwgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgLy8galF1ZXJ5IFZhbGlkYXRlIGVxdWF0ZXMgXCJyZXF1aXJlZFwiIHdpdGggXCJtYW5kYXRvcnlcIiBmb3IgY2hlY2tib3ggZWxlbWVudHNcbiAgICAgICAgaWYgKG9wdGlvbnMuZWxlbWVudC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgIT09IFwiSU5QVVRcIiB8fCBvcHRpb25zLmVsZW1lbnQudHlwZS50b1VwcGVyQ2FzZSgpICE9PSBcIkNIRUNLQk9YXCIpIHtcbiAgICAgICAgICAgIHNldFZhbGlkYXRpb25WYWx1ZXMob3B0aW9ucywgXCJyZXF1aXJlZFwiLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGFkYXB0ZXJzLmFkZChcInJlbW90ZVwiLCBbXCJ1cmxcIiwgXCJ0eXBlXCIsIFwiYWRkaXRpb25hbGZpZWxkc1wiXSwgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ge1xuICAgICAgICAgICAgdXJsOiBvcHRpb25zLnBhcmFtcy51cmwsXG4gICAgICAgICAgICB0eXBlOiBvcHRpb25zLnBhcmFtcy50eXBlIHx8IFwiR0VUXCIsXG4gICAgICAgICAgICBkYXRhOiB7fVxuICAgICAgICB9LFxuICAgICAgICAgICAgcHJlZml4ID0gZ2V0TW9kZWxQcmVmaXgob3B0aW9ucy5lbGVtZW50Lm5hbWUpO1xuXG4gICAgICAgICQuZWFjaChzcGxpdEFuZFRyaW0ob3B0aW9ucy5wYXJhbXMuYWRkaXRpb25hbGZpZWxkcyB8fCBvcHRpb25zLmVsZW1lbnQubmFtZSksIGZ1bmN0aW9uIChpLCBmaWVsZE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBwYXJhbU5hbWUgPSBhcHBlbmRNb2RlbFByZWZpeChmaWVsZE5hbWUsIHByZWZpeCk7XG4gICAgICAgICAgICB2YWx1ZS5kYXRhW3BhcmFtTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gJChvcHRpb25zLmZvcm0pLmZpbmQoXCI6aW5wdXRcIikuZmlsdGVyKFwiW25hbWU9J1wiICsgZXNjYXBlQXR0cmlidXRlVmFsdWUocGFyYW1OYW1lKSArIFwiJ11cIik7XG4gICAgICAgICAgICAgICAgLy8gRm9yIGNoZWNrYm94ZXMgYW5kIHJhZGlvIGJ1dHRvbnMsIG9ubHkgcGljayB1cCB2YWx1ZXMgZnJvbSBjaGVja2VkIGZpZWxkcy5cbiAgICAgICAgICAgICAgICBpZiAoZmllbGQuaXMoXCI6Y2hlY2tib3hcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkLmZpbHRlcihcIjpjaGVja2VkXCIpLnZhbCgpIHx8IGZpZWxkLmZpbHRlcihcIjpoaWRkZW5cIikudmFsKCkgfHwgJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZpZWxkLmlzKFwiOnJhZGlvXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZC5maWx0ZXIoXCI6Y2hlY2tlZFwiKS52YWwoKSB8fCAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkLnZhbCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2V0VmFsaWRhdGlvblZhbHVlcyhvcHRpb25zLCBcInJlbW90ZVwiLCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgYWRhcHRlcnMuYWRkKFwicGFzc3dvcmRcIiwgW1wibWluXCIsIFwibm9uYWxwaGFtaW5cIiwgXCJyZWdleFwiXSwgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucGFyYW1zLm1pbikge1xuICAgICAgICAgICAgc2V0VmFsaWRhdGlvblZhbHVlcyhvcHRpb25zLCBcIm1pbmxlbmd0aFwiLCBvcHRpb25zLnBhcmFtcy5taW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnBhcmFtcy5ub25hbHBoYW1pbikge1xuICAgICAgICAgICAgc2V0VmFsaWRhdGlvblZhbHVlcyhvcHRpb25zLCBcIm5vbmFscGhhbWluXCIsIG9wdGlvbnMucGFyYW1zLm5vbmFscGhhbWluKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5wYXJhbXMucmVnZXgpIHtcbiAgICAgICAgICAgIHNldFZhbGlkYXRpb25WYWx1ZXMob3B0aW9ucywgXCJyZWdleFwiLCBvcHRpb25zLnBhcmFtcy5yZWdleCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkalF2YWwudW5vYnRydXNpdmUucGFyc2UoZG9jdW1lbnQpO1xuICAgIH0pO1xufShqUXVlcnkpKTsiLCIvKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS42LjZcbiAqIChjKSAyMDEwLTIwMTcgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdykgeyd1c2Ugc3RyaWN0JztcblxuLyogZXhwb3J0ZWRcbiAgbWluRXJyQ29uZmlnLFxuICBlcnJvckhhbmRsaW5nQ29uZmlnLFxuICBpc1ZhbGlkT2JqZWN0TWF4RGVwdGhcbiovXG5cbnZhciBtaW5FcnJDb25maWcgPSB7XG4gIG9iamVjdE1heERlcHRoOiA1XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5lcnJvckhhbmRsaW5nQ29uZmlnXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29uZmlndXJlIHNldmVyYWwgYXNwZWN0cyBvZiBlcnJvciBoYW5kbGluZyBpbiBBbmd1bGFySlMgaWYgdXNlZCBhcyBhIHNldHRlciBvciByZXR1cm4gdGhlXG4gKiBjdXJyZW50IGNvbmZpZ3VyYXRpb24gaWYgdXNlZCBhcyBhIGdldHRlci4gVGhlIGZvbGxvd2luZyBvcHRpb25zIGFyZSBzdXBwb3J0ZWQ6XG4gKlxuICogLSAqKm9iamVjdE1heERlcHRoKio6IFRoZSBtYXhpbXVtIGRlcHRoIHRvIHdoaWNoIG9iamVjdHMgYXJlIHRyYXZlcnNlZCB3aGVuIHN0cmluZ2lmaWVkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAqXG4gKiBPbWl0dGVkIG9yIHVuZGVmaW5lZCBvcHRpb25zIHdpbGwgbGVhdmUgdGhlIGNvcnJlc3BvbmRpbmcgY29uZmlndXJhdGlvbiB2YWx1ZXMgdW5jaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LiBNYXkgb25seSBjb250YWluIHRoZSBvcHRpb25zIHRoYXQgbmVlZCB0byBiZVxuICogICAgIHVwZGF0ZWQuIFN1cHBvcnRlZCBrZXlzOlxuICpcbiAqICogYG9iamVjdE1heERlcHRoYCAgKip7TnVtYmVyfSoqIC0gVGhlIG1heCBkZXB0aCBmb3Igc3RyaW5naWZ5aW5nIG9iamVjdHMuIFNldHRpbmcgdG8gYVxuICogICBub24tcG9zaXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIHJlbW92ZXMgdGhlIG1heCBkZXB0aCBsaW1pdC5cbiAqICAgRGVmYXVsdDogNVxuICovXG5mdW5jdGlvbiBlcnJvckhhbmRsaW5nQ29uZmlnKGNvbmZpZykge1xuICBpZiAoaXNPYmplY3QoY29uZmlnKSkge1xuICAgIGlmIChpc0RlZmluZWQoY29uZmlnLm9iamVjdE1heERlcHRoKSkge1xuICAgICAgbWluRXJyQ29uZmlnLm9iamVjdE1heERlcHRoID0gaXNWYWxpZE9iamVjdE1heERlcHRoKGNvbmZpZy5vYmplY3RNYXhEZXB0aCkgPyBjb25maWcub2JqZWN0TWF4RGVwdGggOiBOYU47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBtaW5FcnJDb25maWc7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IG1heERlcHRoXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgobWF4RGVwdGgpIHtcbiAgcmV0dXJuIGlzTnVtYmVyKG1heERlcHRoKSAmJiBtYXhEZXB0aCA+IDA7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhpcyBvYmplY3QgcHJvdmlkZXMgYSB1dGlsaXR5IGZvciBwcm9kdWNpbmcgcmljaCBFcnJvciBtZXNzYWdlcyB3aXRoaW5cbiAqIEFuZ3VsYXIuIEl0IGNhbiBiZSBjYWxsZWQgYXMgZm9sbG93czpcbiAqXG4gKiB2YXIgZXhhbXBsZU1pbkVyciA9IG1pbkVycignZXhhbXBsZScpO1xuICogdGhyb3cgZXhhbXBsZU1pbkVycignb25lJywgJ1RoaXMgezB9IGlzIHsxfScsIGZvbywgYmFyKTtcbiAqXG4gKiBUaGUgYWJvdmUgY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBtaW5FcnIgaW4gdGhlIGV4YW1wbGUgbmFtZXNwYWNlLiBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIGhhdmUgYSBuYW1lc3BhY2VkIGVycm9yIGNvZGUgb2YgZXhhbXBsZS5vbmUuICBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIHJlcGxhY2UgezB9IHdpdGggdGhlIHZhbHVlIG9mIGZvbywgYW5kIHsxfSB3aXRoIHRoZVxuICogdmFsdWUgb2YgYmFyLiBUaGUgb2JqZWN0IGlzIG5vdCByZXN0cmljdGVkIGluIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGl0IGNhblxuICogdGFrZS5cbiAqXG4gKiBJZiBmZXdlciBhcmd1bWVudHMgYXJlIHNwZWNpZmllZCB0aGFuIG5lY2Vzc2FyeSBmb3IgaW50ZXJwb2xhdGlvbiwgdGhlIGV4dHJhXG4gKiBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgd2lsbCBiZSBwcmVzZXJ2ZWQgaW4gdGhlIGZpbmFsIHN0cmluZy5cbiAqXG4gKiBTaW5jZSBkYXRhIHdpbGwgYmUgcGFyc2VkIHN0YXRpY2FsbHkgZHVyaW5nIGEgYnVpbGQgc3RlcCwgc29tZSByZXN0cmljdGlvbnNcbiAqIGFyZSBhcHBsaWVkIHdpdGggcmVzcGVjdCB0byBob3cgbWluRXJyIGluc3RhbmNlcyBhcmUgY3JlYXRlZCBhbmQgY2FsbGVkLlxuICogSW5zdGFuY2VzIHNob3VsZCBoYXZlIG5hbWVzIG9mIHRoZSBmb3JtIG5hbWVzcGFjZU1pbkVyciBmb3IgYSBtaW5FcnIgY3JlYXRlZFxuICogdXNpbmcgbWluRXJyKCduYW1lc3BhY2UnKSAuIEVycm9yIGNvZGVzLCBuYW1lc3BhY2VzIGFuZCB0ZW1wbGF0ZSBzdHJpbmdzXG4gKiBzaG91bGQgYWxsIGJlIHN0YXRpYyBzdHJpbmdzLCBub3QgdmFyaWFibGVzIG9yIGdlbmVyYWwgZXhwcmVzc2lvbnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZSBUaGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIG5ldyBtaW5FcnIgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBFcnJvckNvbnN0cnVjdG9yIEN1c3RvbSBlcnJvciBjb25zdHJ1Y3RvciB0byBiZSBpbnN0YW50aWF0ZWQgd2hlbiByZXR1cm5pbmdcbiAqICAgZXJyb3IgZnJvbSByZXR1cm5lZCBmdW5jdGlvbiwgZm9yIGNhc2VzIHdoZW4gYSBwYXJ0aWN1bGFyIHR5cGUgb2YgZXJyb3IgaXMgdXNlZnVsLlxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvZGU6c3RyaW5nLCB0ZW1wbGF0ZTpzdHJpbmcsIC4uLnRlbXBsYXRlQXJncyk6IEVycm9yfSBtaW5FcnIgaW5zdGFuY2VcbiAqL1xuXG5mdW5jdGlvbiBtaW5FcnIobW9kdWxlLCBFcnJvckNvbnN0cnVjdG9yKSB7XG4gIEVycm9yQ29uc3RydWN0b3IgPSBFcnJvckNvbnN0cnVjdG9yIHx8IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvZGUgPSBhcmd1bWVudHNbMF0sXG4gICAgICB0ZW1wbGF0ZSA9IGFyZ3VtZW50c1sxXSxcbiAgICAgIG1lc3NhZ2UgPSAnWycgKyAobW9kdWxlID8gbW9kdWxlICsgJzonIDogJycpICsgY29kZSArICddICcsXG4gICAgICB0ZW1wbGF0ZUFyZ3MgPSBzbGljZUFyZ3MoYXJndW1lbnRzLCAyKS5tYXAoZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0b0RlYnVnU3RyaW5nKGFyZywgbWluRXJyQ29uZmlnLm9iamVjdE1heERlcHRoKTtcbiAgICAgIH0pLFxuICAgICAgcGFyYW1QcmVmaXgsIGk7XG5cbiAgICBtZXNzYWdlICs9IHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcZCtcXH0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHZhciBpbmRleCA9ICttYXRjaC5zbGljZSgxLCAtMSk7XG5cbiAgICAgIGlmIChpbmRleCA8IHRlbXBsYXRlQXJncy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlQXJnc1tpbmRleF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIG1lc3NhZ2UgKz0gJ1xcbmh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8xLjYuNi8nICtcbiAgICAgIChtb2R1bGUgPyBtb2R1bGUgKyAnLycgOiAnJykgKyBjb2RlO1xuXG4gICAgZm9yIChpID0gMCwgcGFyYW1QcmVmaXggPSAnPyc7IGkgPCB0ZW1wbGF0ZUFyZ3MubGVuZ3RoOyBpKyssIHBhcmFtUHJlZml4ID0gJyYnKSB7XG4gICAgICBtZXNzYWdlICs9IHBhcmFtUHJlZml4ICsgJ3AnICsgaSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh0ZW1wbGF0ZUFyZ3NbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRXJyb3JDb25zdHJ1Y3RvcihtZXNzYWdlKTtcbiAgfTtcbn1cblxuLyogV2UgbmVlZCB0byB0ZWxsIEVTTGludCB3aGF0IHZhcmlhYmxlcyBhcmUgYmVpbmcgZXhwb3J0ZWQgKi9cbi8qIGV4cG9ydGVkXG4gIGFuZ3VsYXIsXG4gIG1zaWUsXG4gIGpxTGl0ZSxcbiAgalF1ZXJ5LFxuICBzbGljZSxcbiAgc3BsaWNlLFxuICBwdXNoLFxuICB0b1N0cmluZyxcbiAgbWluRXJyQ29uZmlnLFxuICBlcnJvckhhbmRsaW5nQ29uZmlnLFxuICBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgsXG4gIG5nTWluRXJyLFxuICBhbmd1bGFyTW9kdWxlLFxuICB1aWQsXG4gIFJFR0VYX1NUUklOR19SRUdFWFAsXG4gIFZBTElESVRZX1NUQVRFX1BST1BFUlRZLFxuXG4gIGxvd2VyY2FzZSxcbiAgdXBwZXJjYXNlLFxuICBtYW51YWxMb3dlcmNhc2UsXG4gIG1hbnVhbFVwcGVyY2FzZSxcbiAgbm9kZU5hbWVfLFxuICBpc0FycmF5TGlrZSxcbiAgZm9yRWFjaCxcbiAgZm9yRWFjaFNvcnRlZCxcbiAgcmV2ZXJzZVBhcmFtcyxcbiAgbmV4dFVpZCxcbiAgc2V0SGFzaEtleSxcbiAgZXh0ZW5kLFxuICB0b0ludCxcbiAgaW5oZXJpdCxcbiAgbWVyZ2UsXG4gIG5vb3AsXG4gIGlkZW50aXR5LFxuICB2YWx1ZUZuLFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEZWZpbmVkLFxuICBpc09iamVjdCxcbiAgaXNCbGFua09iamVjdCxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc051bWJlck5hTixcbiAgaXNEYXRlLFxuICBpc0Vycm9yLFxuICBpc0FycmF5LFxuICBpc0Z1bmN0aW9uLFxuICBpc1JlZ0V4cCxcbiAgaXNXaW5kb3csXG4gIGlzU2NvcGUsXG4gIGlzRmlsZSxcbiAgaXNGb3JtRGF0YSxcbiAgaXNCbG9iLFxuICBpc0Jvb2xlYW4sXG4gIGlzUHJvbWlzZUxpa2UsXG4gIHRyaW0sXG4gIGVzY2FwZUZvclJlZ2V4cCxcbiAgaXNFbGVtZW50LFxuICBtYWtlTWFwLFxuICBpbmNsdWRlcyxcbiAgYXJyYXlSZW1vdmUsXG4gIGNvcHksXG4gIHNpbXBsZUNvbXBhcmUsXG4gIGVxdWFscyxcbiAgY3NwLFxuICBqcSxcbiAgY29uY2F0LFxuICBzbGljZUFyZ3MsXG4gIGJpbmQsXG4gIHRvSnNvblJlcGxhY2VyLFxuICB0b0pzb24sXG4gIGZyb21Kc29uLFxuICBjb252ZXJ0VGltZXpvbmVUb0xvY2FsLFxuICB0aW1lem9uZVRvT2Zmc2V0LFxuICBzdGFydGluZ1RhZyxcbiAgdHJ5RGVjb2RlVVJJQ29tcG9uZW50LFxuICBwYXJzZUtleVZhbHVlLFxuICB0b0tleVZhbHVlLFxuICBlbmNvZGVVcmlTZWdtZW50LFxuICBlbmNvZGVVcmlRdWVyeSxcbiAgYW5ndWxhckluaXQsXG4gIGJvb3RzdHJhcCxcbiAgZ2V0VGVzdGFiaWxpdHksXG4gIHNuYWtlX2Nhc2UsXG4gIGJpbmRKUXVlcnksXG4gIGFzc2VydEFyZyxcbiAgYXNzZXJ0QXJnRm4sXG4gIGFzc2VydE5vdEhhc093blByb3BlcnR5LFxuICBnZXR0ZXIsXG4gIGdldEJsb2NrTm9kZXMsXG4gIGhhc093blByb3BlcnR5LFxuICBjcmVhdGVNYXAsXG4gIHN0cmluZ2lmeSxcblxuICBOT0RFX1RZUEVfRUxFTUVOVCxcbiAgTk9ERV9UWVBFX0FUVFJJQlVURSxcbiAgTk9ERV9UWVBFX1RFWFQsXG4gIE5PREVfVFlQRV9DT01NRU5ULFxuICBOT0RFX1RZUEVfRE9DVU1FTlQsXG4gIE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVFxuKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbmdcbiAqIEBtb2R1bGUgbmdcbiAqIEBpbnN0YWxsYXRpb25cbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqICMgbmcgKGNvcmUgbW9kdWxlKVxuICogVGhlIG5nIG1vZHVsZSBpcyBsb2FkZWQgYnkgZGVmYXVsdCB3aGVuIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBpcyBzdGFydGVkLiBUaGUgbW9kdWxlIGl0c2VsZlxuICogY29udGFpbnMgdGhlIGVzc2VudGlhbCBjb21wb25lbnRzIGZvciBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24gdG8gZnVuY3Rpb24uIFRoZSB0YWJsZSBiZWxvd1xuICogbGlzdHMgYSBoaWdoIGxldmVsIGJyZWFrZG93biBvZiBlYWNoIG9mIHRoZSBzZXJ2aWNlcy9mYWN0b3JpZXMsIGZpbHRlcnMsIGRpcmVjdGl2ZXMgYW5kIHRlc3RpbmdcbiAqIGNvbXBvbmVudHMgYXZhaWxhYmxlIHdpdGhpbiB0aGlzIGNvcmUgbW9kdWxlLlxuICpcbiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPVwibmdcIj48L2Rpdj5cbiAqL1xuXG52YXIgUkVHRVhfU1RSSU5HX1JFR0VYUCA9IC9eXFwvKC4rKVxcLyhbYS16XSopJC87XG5cbi8vIFRoZSBuYW1lIG9mIGEgZm9ybSBjb250cm9sJ3MgVmFsaWRpdHlTdGF0ZSBwcm9wZXJ0eS5cbi8vIFRoaXMgaXMgdXNlZCBzbyB0aGF0IGl0J3MgcG9zc2libGUgZm9yIGludGVybmFsIHRlc3RzIHRvIGNyZWF0ZSBtb2NrIFZhbGlkaXR5U3RhdGVzLlxudmFyIFZBTElESVRZX1NUQVRFX1BST1BFUlRZID0gJ3ZhbGlkaXR5JztcblxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5sb3dlcmNhc2VcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIHNpbmNlVmVyc2lvbj1cIjEuNS4wXCJcbiAqIHJlbW92ZVZlcnNpb249XCIxLjcuMFwiXG4gKiBVc2UgW1N0cmluZy5wcm90b3R5cGUudG9Mb3dlckNhc2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy90b0xvd2VyQ2FzZSkgaW5zdGVhZC5cbiAqXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gbG93ZXJjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIGxvd2VyY2FzZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IExvd2VyY2FzZWQgc3RyaW5nLlxuICovXG52YXIgbG93ZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKSB7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9Mb3dlckNhc2UoKSA6IHN0cmluZzt9O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci51cHBlcmNhc2VcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIHNpbmNlVmVyc2lvbj1cIjEuNS4wXCJcbiAqIHJlbW92ZVZlcnNpb249XCIxLjcuMFwiXG4gKiBVc2UgW1N0cmluZy5wcm90b3R5cGUudG9VcHBlckNhc2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy90b1VwcGVyQ2FzZSkgaW5zdGVhZC5cbiAqXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gdXBwZXJjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIHVwcGVyY2FzZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFVwcGVyY2FzZWQgc3RyaW5nLlxuICovXG52YXIgdXBwZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKSB7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9VcHBlckNhc2UoKSA6IHN0cmluZzt9O1xuXG5cbnZhciBtYW51YWxMb3dlcmNhc2UgPSBmdW5jdGlvbihzKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cbiAgcmV0dXJuIGlzU3RyaW5nKHMpXG4gICAgICA/IHMucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApIHwgMzIpO30pXG4gICAgICA6IHM7XG4gIC8qIGVzbGludC1lbmFibGUgKi9cbn07XG52YXIgbWFudWFsVXBwZXJjYXNlID0gZnVuY3Rpb24ocykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG4gIHJldHVybiBpc1N0cmluZyhzKVxuICAgICAgPyBzLnJlcGxhY2UoL1thLXpdL2csIGZ1bmN0aW9uKGNoKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSAmIH4zMik7fSlcbiAgICAgIDogcztcbiAgLyogZXNsaW50LWVuYWJsZSAqL1xufTtcblxuXG4vLyBTdHJpbmcjdG9Mb3dlckNhc2UgYW5kIFN0cmluZyN0b1VwcGVyQ2FzZSBkb24ndCBwcm9kdWNlIGNvcnJlY3QgcmVzdWx0cyBpbiBicm93c2VycyB3aXRoIFR1cmtpc2hcbi8vIGxvY2FsZSwgZm9yIHRoaXMgcmVhc29uIHdlIG5lZWQgdG8gZGV0ZWN0IHRoaXMgY2FzZSBhbmQgcmVkZWZpbmUgbG93ZXJjYXNlL3VwcGVyY2FzZSBtZXRob2RzXG4vLyB3aXRoIGNvcnJlY3QgYnV0IHNsb3dlciBhbHRlcm5hdGl2ZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMTM4N1xuaWYgKCdpJyAhPT0gJ0knLnRvTG93ZXJDYXNlKCkpIHtcbiAgbG93ZXJjYXNlID0gbWFudWFsTG93ZXJjYXNlO1xuICB1cHBlcmNhc2UgPSBtYW51YWxVcHBlcmNhc2U7XG59XG5cblxudmFyXG4gICAgbXNpZSwgICAgICAgICAgICAgLy8gaG9sZHMgbWFqb3IgdmVyc2lvbiBudW1iZXIgZm9yIElFLCBvciBOYU4gaWYgVUEgaXMgbm90IElFLlxuICAgIGpxTGl0ZSwgICAgICAgICAgIC8vIGRlbGF5IGJpbmRpbmcgc2luY2UgalF1ZXJ5IGNvdWxkIGJlIGxvYWRlZCBhZnRlciB1cy5cbiAgICBqUXVlcnksICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nXG4gICAgc2xpY2UgICAgICAgICAgICAgPSBbXS5zbGljZSxcbiAgICBzcGxpY2UgICAgICAgICAgICA9IFtdLnNwbGljZSxcbiAgICBwdXNoICAgICAgICAgICAgICA9IFtdLnB1c2gsXG4gICAgdG9TdHJpbmcgICAgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuICAgIGdldFByb3RvdHlwZU9mICAgID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgIG5nTWluRXJyICAgICAgICAgID0gbWluRXJyKCduZycpLFxuXG4gICAgLyoqIEBuYW1lIGFuZ3VsYXIgKi9cbiAgICBhbmd1bGFyICAgICAgICAgICA9IHdpbmRvdy5hbmd1bGFyIHx8ICh3aW5kb3cuYW5ndWxhciA9IHt9KSxcbiAgICBhbmd1bGFyTW9kdWxlLFxuICAgIHVpZCAgICAgICAgICAgICAgID0gMDtcblxuLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4vKipcbiAqIGRvY3VtZW50TW9kZSBpcyBhbiBJRS1vbmx5IHByb3BlcnR5XG4gKiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvY2MxOTY5ODgodj12cy44NSkuYXNweFxuICovXG5tc2llID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50TW9kZTtcblxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGBvYmpgIGlzIGFuIGFycmF5IG9yIGFycmF5LWxpa2Ugb2JqZWN0IChOb2RlTGlzdCwgQXJndW1lbnRzLFxuICogICAgICAgICAgICAgICAgICAgU3RyaW5nIC4uLilcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2Uob2JqKSB7XG5cbiAgLy8gYG51bGxgLCBgdW5kZWZpbmVkYCBhbmQgYHdpbmRvd2AgYXJlIG5vdCBhcnJheS1saWtlXG4gIGlmIChvYmogPT0gbnVsbCB8fCBpc1dpbmRvdyhvYmopKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gYXJyYXlzLCBzdHJpbmdzIGFuZCBqUXVlcnkvanFMaXRlIG9iamVjdHMgYXJlIGFycmF5IGxpa2VcbiAgLy8gKiBqcUxpdGUgaXMgZWl0aGVyIHRoZSBqUXVlcnkgb3IganFMaXRlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gIC8vICogd2UgaGF2ZSB0byBjaGVjayB0aGUgZXhpc3RlbmNlIG9mIGpxTGl0ZSBmaXJzdCBhcyB0aGlzIG1ldGhvZCBpcyBjYWxsZWRcbiAgLy8gICB2aWEgdGhlIGZvckVhY2ggbWV0aG9kIHdoZW4gY29uc3RydWN0aW5nIHRoZSBqcUxpdGUgb2JqZWN0IGluIHRoZSBmaXJzdCBwbGFjZVxuICBpZiAoaXNBcnJheShvYmopIHx8IGlzU3RyaW5nKG9iaikgfHwgKGpxTGl0ZSAmJiBvYmogaW5zdGFuY2VvZiBqcUxpdGUpKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcbiAgLy8gXCJsZW5ndGhcIiBpbiBvYmogdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMTE1MDgpXG4gIHZhciBsZW5ndGggPSAnbGVuZ3RoJyBpbiBPYmplY3Qob2JqKSAmJiBvYmoubGVuZ3RoO1xuXG4gIC8vIE5vZGVMaXN0IG9iamVjdHMgKHdpdGggYGl0ZW1gIG1ldGhvZCkgYW5kXG4gIC8vIG90aGVyIG9iamVjdHMgd2l0aCBzdWl0YWJsZSBsZW5ndGggY2hhcmFjdGVyaXN0aWNzIGFyZSBhcnJheS1saWtlXG4gIHJldHVybiBpc051bWJlcihsZW5ndGgpICYmXG4gICAgKGxlbmd0aCA+PSAwICYmICgobGVuZ3RoIC0gMSkgaW4gb2JqIHx8IG9iaiBpbnN0YW5jZW9mIEFycmF5KSB8fCB0eXBlb2Ygb2JqLml0ZW0gPT09ICdmdW5jdGlvbicpO1xuXG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmZvckVhY2hcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJbnZva2VzIHRoZSBgaXRlcmF0b3JgIGZ1bmN0aW9uIG9uY2UgZm9yIGVhY2ggaXRlbSBpbiBgb2JqYCBjb2xsZWN0aW9uLCB3aGljaCBjYW4gYmUgZWl0aGVyIGFuXG4gKiBvYmplY3Qgb3IgYW4gYXJyYXkuIFRoZSBgaXRlcmF0b3JgIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBgaXRlcmF0b3IodmFsdWUsIGtleSwgb2JqKWAsIHdoZXJlIGB2YWx1ZWBcbiAqIGlzIHRoZSB2YWx1ZSBvZiBhbiBvYmplY3QgcHJvcGVydHkgb3IgYW4gYXJyYXkgZWxlbWVudCwgYGtleWAgaXMgdGhlIG9iamVjdCBwcm9wZXJ0eSBrZXkgb3JcbiAqIGFycmF5IGVsZW1lbnQgaW5kZXggYW5kIG9iaiBpcyB0aGUgYG9iamAgaXRzZWxmLiBTcGVjaWZ5aW5nIGEgYGNvbnRleHRgIGZvciB0aGUgZnVuY3Rpb24gaXMgb3B0aW9uYWwuXG4gKlxuICogSXQgaXMgd29ydGggbm90aW5nIHRoYXQgYC5mb3JFYWNoYCBkb2VzIG5vdCBpdGVyYXRlIG92ZXIgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVjYXVzZSBpdCBmaWx0ZXJzXG4gKiB1c2luZyB0aGUgYGhhc093blByb3BlcnR5YCBtZXRob2QuXG4gKlxuICogVW5saWtlIEVTMjYyJ3NcbiAqIFtBcnJheS5wcm90b3R5cGUuZm9yRWFjaF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjQuNC4xOCksXG4gKiBwcm92aWRpbmcgJ3VuZGVmaW5lZCcgb3IgJ251bGwnIHZhbHVlcyBmb3IgYG9iamAgd2lsbCBub3QgdGhyb3cgYSBUeXBlRXJyb3IsIGJ1dCByYXRoZXIganVzdFxuICogcmV0dXJuIHRoZSB2YWx1ZSBwcm92aWRlZC5cbiAqXG4gICBgYGBqc1xuICAgICB2YXIgdmFsdWVzID0ge25hbWU6ICdtaXNrbycsIGdlbmRlcjogJ21hbGUnfTtcbiAgICAgdmFyIGxvZyA9IFtdO1xuICAgICBhbmd1bGFyLmZvckVhY2godmFsdWVzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgdGhpcy5wdXNoKGtleSArICc6ICcgKyB2YWx1ZSk7XG4gICAgIH0sIGxvZyk7XG4gICAgIGV4cGVjdChsb2cpLnRvRXF1YWwoWyduYW1lOiBtaXNrbycsICdnZW5kZXI6IG1hbGUnXSk7XG4gICBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIE9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRvciBJdGVyYXRvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29udGV4dCBPYmplY3QgdG8gYmVjb21lIGNvbnRleHQgKGB0aGlzYCkgZm9yIHRoZSBpdGVyYXRvciBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl9IFJlZmVyZW5jZSB0byBgb2JqYC5cbiAqL1xuXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgdmFyIGtleSwgbGVuZ3RoO1xuICBpZiAob2JqKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChrZXkgIT09ICdwcm90b3R5cGUnICYmIGtleSAhPT0gJ2xlbmd0aCcgJiYga2V5ICE9PSAnbmFtZScgJiYgb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSB8fCBpc0FycmF5TGlrZShvYmopKSB7XG4gICAgICB2YXIgaXNQcmltaXRpdmUgPSB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JztcbiAgICAgIGZvciAoa2V5ID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsga2V5IDwgbGVuZ3RoOyBrZXkrKykge1xuICAgICAgICBpZiAoaXNQcmltaXRpdmUgfHwga2V5IGluIG9iaikge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2JqLmZvckVhY2ggJiYgb2JqLmZvckVhY2ggIT09IGZvckVhY2gpIHtcbiAgICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQsIG9iaik7XG4gICAgfSBlbHNlIGlmIChpc0JsYW5rT2JqZWN0KG9iaikpIHtcbiAgICAgIC8vIGNyZWF0ZU1hcCgpIGZhc3QgcGF0aCAtLS0gU2FmZSB0byBhdm9pZCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBiZWNhdXNlIHByb3RvdHlwZSBjaGFpbiBpcyBlbXB0eVxuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmouaGFzT3duUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFNsb3cgcGF0aCBmb3Igb2JqZWN0cyBpbmhlcml0aW5nIE9iamVjdC5wcm90b3R5cGUsIGhhc093blByb3BlcnR5IGNoZWNrIG5lZWRlZFxuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTbG93IHBhdGggZm9yIG9iamVjdHMgd2hpY2ggZG8gbm90IGhhdmUgYSBtZXRob2QgYGhhc093blByb3BlcnR5YFxuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoU29ydGVkKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopLnNvcnQoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5c1tpXV0sIGtleXNbaV0pO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuXG5cbi8qKlxuICogd2hlbiB1c2luZyBmb3JFYWNoIHRoZSBwYXJhbXMgYXJlIHZhbHVlLCBrZXksIGJ1dCBpdCBpcyBvZnRlbiB1c2VmdWwgdG8gaGF2ZSBrZXksIHZhbHVlLlxuICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcsICopfSBpdGVyYXRvckZuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oKiwgc3RyaW5nKX1cbiAqL1xuZnVuY3Rpb24gcmV2ZXJzZVBhcmFtcyhpdGVyYXRvckZuKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwga2V5KSB7aXRlcmF0b3JGbihrZXksIHZhbHVlKTt9O1xufVxuXG4vKipcbiAqIEEgY29uc2lzdGVudCB3YXkgb2YgY3JlYXRpbmcgdW5pcXVlIElEcyBpbiBhbmd1bGFyLlxuICpcbiAqIFVzaW5nIHNpbXBsZSBudW1iZXJzIGFsbG93cyB1cyB0byBnZW5lcmF0ZSAyOC42IG1pbGxpb24gdW5pcXVlIGlkcyBwZXIgc2Vjb25kIGZvciAxMCB5ZWFycyBiZWZvcmVcbiAqIHdlIGhpdCBudW1iZXIgcHJlY2lzaW9uIGlzc3VlcyBpbiBKYXZhU2NyaXB0LlxuICpcbiAqIE1hdGgucG93KDIsNTMpIC8gNjAgLyA2MCAvIDI0IC8gMzY1IC8gMTAgPSAyOC42TVxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFuIHVuaXF1ZSBhbHBoYS1udW1lcmljIHN0cmluZ1xuICovXG5mdW5jdGlvbiBuZXh0VWlkKCkge1xuICByZXR1cm4gKyt1aWQ7XG59XG5cblxuLyoqXG4gKiBTZXQgb3IgY2xlYXIgdGhlIGhhc2hrZXkgZm9yIGFuIG9iamVjdC5cbiAqIEBwYXJhbSBvYmogb2JqZWN0XG4gKiBAcGFyYW0gaCB0aGUgaGFzaGtleSAoIXRydXRoeSB0byBkZWxldGUgdGhlIGhhc2hrZXkpXG4gKi9cbmZ1bmN0aW9uIHNldEhhc2hLZXkob2JqLCBoKSB7XG4gIGlmIChoKSB7XG4gICAgb2JqLiQkaGFzaEtleSA9IGg7XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRlIG9iai4kJGhhc2hLZXk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBiYXNlRXh0ZW5kKGRzdCwgb2JqcywgZGVlcCkge1xuICB2YXIgaCA9IGRzdC4kJGhhc2hLZXk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGlpID0gb2Jqcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgdmFyIG9iaiA9IG9ianNbaV07XG4gICAgaWYgKCFpc09iamVjdChvYmopICYmICFpc0Z1bmN0aW9uKG9iaikpIGNvbnRpbnVlO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBqID0gMCwgamogPSBrZXlzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgdmFyIHNyYyA9IG9ialtrZXldO1xuXG4gICAgICBpZiAoZGVlcCAmJiBpc09iamVjdChzcmMpKSB7XG4gICAgICAgIGlmIChpc0RhdGUoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gbmV3IERhdGUoc3JjLnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gbmV3IFJlZ0V4cChzcmMpO1xuICAgICAgICB9IGVsc2UgaWYgKHNyYy5ub2RlTmFtZSkge1xuICAgICAgICAgIGRzdFtrZXldID0gc3JjLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gc3JjLmNsb25lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFpc09iamVjdChkc3Rba2V5XSkpIGRzdFtrZXldID0gaXNBcnJheShzcmMpID8gW10gOiB7fTtcbiAgICAgICAgICBiYXNlRXh0ZW5kKGRzdFtrZXldLCBbc3JjXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldEhhc2hLZXkoZHN0LCBoKTtcbiAgcmV0dXJuIGRzdDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZXh0ZW5kXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocylcbiAqIHRvIGBkc3RgLiBZb3UgY2FuIHNwZWNpZnkgbXVsdGlwbGUgYHNyY2Agb2JqZWN0cy4gSWYgeW91IHdhbnQgdG8gcHJlc2VydmUgb3JpZ2luYWwgb2JqZWN0cywgeW91IGNhbiBkbyBzb1xuICogYnkgcGFzc2luZyBhbiBlbXB0eSBvYmplY3QgYXMgdGhlIHRhcmdldDogYHZhciBvYmplY3QgPSBhbmd1bGFyLmV4dGVuZCh7fSwgb2JqZWN0MSwgb2JqZWN0MilgLlxuICpcbiAqICoqTm90ZToqKiBLZWVwIGluIG1pbmQgdGhhdCBgYW5ndWxhci5leHRlbmRgIGRvZXMgbm90IHN1cHBvcnQgcmVjdXJzaXZlIG1lcmdlIChkZWVwIGNvcHkpLiBVc2VcbiAqIHtAbGluayBhbmd1bGFyLm1lcmdlfSBmb3IgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZHN0IERlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlZmVyZW5jZSB0byBgZHN0YC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGRzdCkge1xuICByZXR1cm4gYmFzZUV4dGVuZChkc3QsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZmFsc2UpO1xufVxuXG5cbi8qKlxuKiBAbmdkb2MgZnVuY3Rpb25cbiogQG5hbWUgYW5ndWxhci5tZXJnZVxuKiBAbW9kdWxlIG5nXG4qIEBraW5kIGZ1bmN0aW9uXG4qXG4qIEBkZXNjcmlwdGlvblxuKiBEZWVwbHkgZXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocylcbiogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLiBJZiB5b3Ugd2FudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCBvYmplY3RzLCB5b3UgY2FuIGRvIHNvXG4qIGJ5IHBhc3NpbmcgYW4gZW1wdHkgb2JqZWN0IGFzIHRoZSB0YXJnZXQ6IGB2YXIgb2JqZWN0ID0gYW5ndWxhci5tZXJnZSh7fSwgb2JqZWN0MSwgb2JqZWN0MilgLlxuKlxuKiBVbmxpa2Uge0BsaW5rIGFuZ3VsYXIuZXh0ZW5kIGV4dGVuZCgpfSwgYG1lcmdlKClgIHJlY3Vyc2l2ZWx5IGRlc2NlbmRzIGludG8gb2JqZWN0IHByb3BlcnRpZXMgb2Ygc291cmNlXG4qIG9iamVjdHMsIHBlcmZvcm1pbmcgYSBkZWVwIGNvcHkuXG4qXG4qIEBkZXByZWNhdGVkXG4qIHNpbmNlVmVyc2lvbj1cIjEuNi41XCJcbiogVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLCBidXQgd2lsbCBub3QgYmUgcmVtb3ZlZCBpbiB0aGUgMS54IGxpZmVjeWNsZS5cbiogVGhlcmUgYXJlIGVkZ2UgY2FzZXMgKHNlZSB7QGxpbmsgYW5ndWxhci5tZXJnZSNrbm93bi1pc3N1ZXMga25vd24gaXNzdWVzfSkgdGhhdCBhcmUgbm90XG4qIHN1cHBvcnRlZCBieSB0aGlzIGZ1bmN0aW9uLiBXZSBzdWdnZXN0XG4qIHVzaW5nIFtsb2Rhc2gncyBtZXJnZSgpXShodHRwczovL2xvZGFzaC5jb20vZG9jcy80LjE3LjQjbWVyZ2UpIGluc3RlYWQuXG4qXG4qIEBrbm93bklzc3VlXG4qIFRoaXMgaXMgYSBsaXN0IG9mIChrbm93bikgb2JqZWN0IHR5cGVzIHRoYXQgYXJlIG5vdCBoYW5kbGVkIGNvcnJlY3RseSBieSB0aGlzIGZ1bmN0aW9uOlxuKiAtIFtgQmxvYmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9CbG9iKVxuKiAtIFtgTWVkaWFTdHJlYW1gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvTWVkaWFTdHJlYW0pXG4qIC0gW2BDYW52YXNHcmFkaWVudGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9DYW52YXNHcmFkaWVudClcbiogLSBBbmd1bGFySlMge0BsaW5rICRyb290U2NvcGUuU2NvcGUgc2NvcGVzfTtcbipcbiogQHBhcmFtIHtPYmplY3R9IGRzdCBEZXN0aW5hdGlvbiBvYmplY3QuXG4qIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS5cbiogQHJldHVybnMge09iamVjdH0gUmVmZXJlbmNlIHRvIGBkc3RgLlxuKi9cbmZ1bmN0aW9uIG1lcmdlKGRzdCkge1xuICByZXR1cm4gYmFzZUV4dGVuZChkc3QsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgdHJ1ZSk7XG59XG5cblxuXG5mdW5jdGlvbiB0b0ludChzdHIpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHN0ciwgMTApO1xufVxuXG52YXIgaXNOdW1iZXJOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNOdW1iZXJOYU4obnVtKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIG51bSAhPT0gbnVtO1xufTtcblxuXG5mdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHtcbiAgcmV0dXJuIGV4dGVuZChPYmplY3QuY3JlYXRlKHBhcmVudCksIGV4dHJhKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIubm9vcFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBubyBvcGVyYXRpb25zLiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlXG4gKiBmdW5jdGlvbmFsIHN0eWxlLlxuICAgYGBganNcbiAgICAgZnVuY3Rpb24gZm9vKGNhbGxiYWNrKSB7XG4gICAgICAgdmFyIHJlc3VsdCA9IGNhbGN1bGF0ZVJlc3VsdCgpO1xuICAgICAgIChjYWxsYmFjayB8fCBhbmd1bGFyLm5vb3ApKHJlc3VsdCk7XG4gICAgIH1cbiAgIGBgYFxuICovXG5mdW5jdGlvbiBub29wKCkge31cbm5vb3AuJGluamVjdCA9IFtdO1xuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlkZW50aXR5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGVcbiAqIGZ1bmN0aW9uYWwgc3R5bGUuXG4gKlxuICAgYGBganNcbiAgIGZ1bmN0aW9uIHRyYW5zZm9ybWVyKHRyYW5zZm9ybWF0aW9uRm4sIHZhbHVlKSB7XG4gICAgIHJldHVybiAodHJhbnNmb3JtYXRpb25GbiB8fCBhbmd1bGFyLmlkZW50aXR5KSh2YWx1ZSk7XG4gICB9O1xuXG4gICAvLyBFLmcuXG4gICBmdW5jdGlvbiBnZXRSZXN1bHQoZm4sIGlucHV0KSB7XG4gICAgIHJldHVybiAoZm4gfHwgYW5ndWxhci5pZGVudGl0eSkoaW5wdXQpO1xuICAgfTtcblxuICAgZ2V0UmVzdWx0KGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiAyOyB9LCAyMSk7ICAgLy8gcmV0dXJucyA0MlxuICAgZ2V0UmVzdWx0KG51bGwsIDIxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyAyMVxuICAgZ2V0UmVzdWx0KHVuZGVmaW5lZCwgMjEpOyAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyAyMVxuICAgYGBgXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB0byBiZSByZXR1cm5lZC5cbiAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgcGFzc2VkIGluLlxuICovXG5mdW5jdGlvbiBpZGVudGl0eSgkKSB7cmV0dXJuICQ7fVxuaWRlbnRpdHkuJGluamVjdCA9IFtdO1xuXG5cbmZ1bmN0aW9uIHZhbHVlRm4odmFsdWUpIHtyZXR1cm4gZnVuY3Rpb24gdmFsdWVSZWYoKSB7cmV0dXJuIHZhbHVlO307fVxuXG5mdW5jdGlvbiBoYXNDdXN0b21Ub1N0cmluZyhvYmopIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqLnRvU3RyaW5nKSAmJiBvYmoudG9TdHJpbmcgIT09IHRvU3RyaW5nO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzVW5kZWZpbmVkXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyB1bmRlZmluZWQuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIHVuZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNEZWZpbmVkXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBkZWZpbmVkLlxuICovXG5mdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNPYmplY3RcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBPYmplY3RgLiBVbmxpa2UgYHR5cGVvZmAgaW4gSmF2YVNjcmlwdCwgYG51bGxgcyBhcmUgbm90XG4gKiBjb25zaWRlcmVkIHRvIGJlIG9iamVjdHMuIE5vdGUgdGhhdCBKYXZhU2NyaXB0IGFycmF5cyBhcmUgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYE9iamVjdGAgYnV0IG5vdCBgbnVsbGAuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2lzb2JqZWN0NFxuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGEgbnVsbCBwcm90b3R5cGVcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBPYmplY3RgIHdpdGggYSBudWxsIHByb3RvdHlwZVxuICovXG5mdW5jdGlvbiBpc0JsYW5rT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICFnZXRQcm90b3R5cGVPZih2YWx1ZSk7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNTdHJpbmdcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYFN0cmluZ2AuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzTnVtYmVyXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBOdW1iZXJgLlxuICpcbiAqIFRoaXMgaW5jbHVkZXMgdGhlIFwic3BlY2lhbFwiIG51bWJlcnMgYE5hTmAsIGArSW5maW5pdHlgIGFuZCBgLUluZmluaXR5YC5cbiAqXG4gKiBJZiB5b3Ugd2lzaCB0byBleGNsdWRlIHRoZXNlIHRoZW4geW91IGNhbiB1c2UgdGhlIG5hdGl2ZVxuICogW2Bpc0Zpbml0ZSddKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2lzRmluaXRlKVxuICogbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBOdW1iZXJgLlxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0RhdGVcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBkYXRlLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBEYXRlYC5cbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzQXJyYXlcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBBcnJheWAuIEFsaWFzIG9mIEFycmF5LmlzQXJyYXkuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBBcnJheWAuXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYEVycm9yYC5cbiAqIExvb3NlbHkgYmFzZWQgb24gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaXNlcnJvclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLlxuICovXG5mdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gIHZhciB0YWcgPSB0b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdbb2JqZWN0IEVycm9yXSc6IHJldHVybiB0cnVlO1xuICAgIGNhc2UgJ1tvYmplY3QgRXhjZXB0aW9uXSc6IHJldHVybiB0cnVlO1xuICAgIGNhc2UgJ1tvYmplY3QgRE9NRXhjZXB0aW9uXSc6IHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEVycm9yO1xuICB9XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRnVuY3Rpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYEZ1bmN0aW9uYC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRnVuY3Rpb25gLlxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzt9XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgUmVnRXhwYC5cbiAqL1xuZnVuY3Rpb24gaXNSZWdFeHAodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxuXG4vKipcbiAqIENoZWNrcyBpZiBgb2JqYCBpcyBhIHdpbmRvdyBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqIE9iamVjdCB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqLlxuICovXG5mdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmoud2luZG93ID09PSBvYmo7XG59XG5cblxuZnVuY3Rpb24gaXNTY29wZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouJGV2YWxBc3luYyAmJiBvYmouJHdhdGNoO1xufVxuXG5cbmZ1bmN0aW9uIGlzRmlsZShvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzRm9ybURhdGEob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCbG9iKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuXG5mdW5jdGlvbiBpc1Byb21pc2VMaWtlKG9iaikge1xuICByZXR1cm4gb2JqICYmIGlzRnVuY3Rpb24ob2JqLnRoZW4pO1xufVxuXG5cbnZhciBUWVBFRF9BUlJBWV9SRUdFWFAgPSAvXlxcW29iamVjdCAoPzpVaW50OHxVaW50OENsYW1wZWR8VWludDE2fFVpbnQzMnxJbnQ4fEludDE2fEludDMyfEZsb2F0MzJ8RmxvYXQ2NClBcnJheV0kLztcbmZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgaXNOdW1iZXIodmFsdWUubGVuZ3RoKSAmJiBUWVBFRF9BUlJBWV9SRUdFWFAudGVzdCh0b1N0cmluZy5jYWxsKHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cblxudmFyIHRyaW0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG59O1xuXG4vLyBDb3BpZWQgZnJvbTpcbi8vIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvbG9jYWxfY2xvc3VyZV9nb29nX3N0cmluZ19zdHJpbmcuanMuc291cmNlLmh0bWwjbGluZTEwMjFcbi8vIFByZXJlcTogcyBpcyBhIHN0cmluZy5cbnZhciBlc2NhcGVGb3JSZWdleHAgPSBmdW5jdGlvbihzKSB7XG4gIHJldHVybiBzXG4gICAgLnJlcGxhY2UoLyhbLSgpW1xcXXt9Kz8qLiRefCw6IzwhXFxcXF0pL2csICdcXFxcJDEnKVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgLnJlcGxhY2UoL1xceDA4L2csICdcXFxceDA4Jyk7XG59O1xuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRWxlbWVudFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLlxuICovXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICByZXR1cm4gISEobm9kZSAmJlxuICAgIChub2RlLm5vZGVOYW1lICAvLyBXZSBhcmUgYSBkaXJlY3QgZWxlbWVudC5cbiAgICB8fCAobm9kZS5wcm9wICYmIG5vZGUuYXR0ciAmJiBub2RlLmZpbmQpKSk7ICAvLyBXZSBoYXZlIGFuIG9uIGFuZCBmaW5kIG1ldGhvZCBwYXJ0IG9mIGpRdWVyeSBBUEkuXG59XG5cbi8qKlxuICogQHBhcmFtIHN0ciAna2V5MSxrZXkyLC4uLidcbiAqIEByZXR1cm5zIHtvYmplY3R9IGluIHRoZSBmb3JtIG9mIHtrZXkxOnRydWUsIGtleTI6dHJ1ZSwgLi4ufVxuICovXG5mdW5jdGlvbiBtYWtlTWFwKHN0cikge1xuICB2YXIgb2JqID0ge30sIGl0ZW1zID0gc3RyLnNwbGl0KCcsJyksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIG9ialtpdGVtc1tpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cblxuZnVuY3Rpb24gbm9kZU5hbWVfKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGxvd2VyY2FzZShlbGVtZW50Lm5vZGVOYW1lIHx8IChlbGVtZW50WzBdICYmIGVsZW1lbnRbMF0ubm9kZU5hbWUpKTtcbn1cblxuZnVuY3Rpb24gaW5jbHVkZXMoYXJyYXksIG9iaikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnJheSwgb2JqKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGFycmF5UmVtb3ZlKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKHZhbHVlKTtcbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiBpbmRleDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuY29weVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgYHNvdXJjZWAsIHdoaWNoIHNob3VsZCBiZSBhbiBvYmplY3Qgb3IgYW4gYXJyYXkuXG4gKlxuICogKiBJZiBubyBkZXN0aW5hdGlvbiBpcyBzdXBwbGllZCwgYSBjb3B5IG9mIHRoZSBvYmplY3Qgb3IgYXJyYXkgaXMgY3JlYXRlZC5cbiAqICogSWYgYSBkZXN0aW5hdGlvbiBpcyBwcm92aWRlZCwgYWxsIG9mIGl0cyBlbGVtZW50cyAoZm9yIGFycmF5cykgb3IgcHJvcGVydGllcyAoZm9yIG9iamVjdHMpXG4gKiAgIGFyZSBkZWxldGVkIGFuZCB0aGVuIGFsbCBlbGVtZW50cy9wcm9wZXJ0aWVzIGZyb20gdGhlIHNvdXJjZSBhcmUgY29waWVkIHRvIGl0LlxuICogKiBJZiBgc291cmNlYCBpcyBub3QgYW4gb2JqZWN0IG9yIGFycmF5IChpbmMuIGBudWxsYCBhbmQgYHVuZGVmaW5lZGApLCBgc291cmNlYCBpcyByZXR1cm5lZC5cbiAqICogSWYgYHNvdXJjZWAgaXMgaWRlbnRpY2FsIHRvIGBkZXN0aW5hdGlvbmAgYW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duLlxuICpcbiAqIDxiciAvPlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICAgT25seSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIHRha2VuIGludG8gYWNjb3VudC4gTm9uLWVudW1lcmFibGUgcHJvcGVydGllcyAoYm90aCBvbiBgc291cmNlYFxuICogICBhbmQgb24gYGRlc3RpbmF0aW9uYCkgd2lsbCBiZSBpZ25vcmVkLlxuICogPC9kaXY+XG4gKlxuICogQHBhcmFtIHsqfSBzb3VyY2UgVGhlIHNvdXJjZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBtYWtlIGEgY29weS5cbiAqICAgICAgICAgICAgICAgICAgIENhbiBiZSBhbnkgdHlwZSwgaW5jbHVkaW5nIHByaW1pdGl2ZXMsIGBudWxsYCwgYW5kIGB1bmRlZmluZWRgLlxuICogQHBhcmFtIHsoT2JqZWN0fEFycmF5KT19IGRlc3RpbmF0aW9uIERlc3RpbmF0aW9uIGludG8gd2hpY2ggdGhlIHNvdXJjZSBpcyBjb3BpZWQuIElmXG4gKiAgICAgcHJvdmlkZWQsIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZSBhcyBgc291cmNlYC5cbiAqIEByZXR1cm5zIHsqfSBUaGUgY29weSBvciB1cGRhdGVkIGBkZXN0aW5hdGlvbmAsIGlmIGBkZXN0aW5hdGlvbmAgd2FzIHNwZWNpZmllZC5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJjb3B5RXhhbXBsZVwiIG5hbWU9XCJhbmd1bGFyLWNvcHlcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGZvcm0gbm92YWxpZGF0ZSBjbGFzcz1cInNpbXBsZS1mb3JtXCI+XG4gICAgICAgICAgPGxhYmVsPk5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgLz48L2xhYmVsPjxiciAvPlxuICAgICAgICAgIDxsYWJlbD5BZ2U6ICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwidXNlci5hZ2VcIiAvPjwvbGFiZWw+PGJyIC8+XG4gICAgICAgICAgR2VuZGVyOiA8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwidXNlci5nZW5kZXJcIiB2YWx1ZT1cIm1hbGVcIiAvPm1hbGU8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cInVzZXIuZ2VuZGVyXCIgdmFsdWU9XCJmZW1hbGVcIiAvPmZlbWFsZTwvbGFiZWw+PGJyIC8+XG4gICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInJlc2V0KClcIj5SRVNFVDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJ1cGRhdGUodXNlcilcIj5TQVZFPC9idXR0b24+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPHByZT5mb3JtID0ge3t1c2VyIHwganNvbn19PC9wcmU+XG4gICAgICAgIDxwcmU+bWFzdGVyID0ge3ttYXN0ZXIgfCBqc29ufX08L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAvLyBNb2R1bGU6IGNvcHlFeGFtcGxlXG4gICAgICBhbmd1bGFyLlxuICAgICAgICBtb2R1bGUoJ2NvcHlFeGFtcGxlJywgW10pLlxuICAgICAgICBjb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLm1hc3RlciA9IHt9O1xuXG4gICAgICAgICAgJHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBFeGFtcGxlIHdpdGggMSBhcmd1bWVudFxuICAgICAgICAgICAgJHNjb3BlLnVzZXIgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLm1hc3Rlcik7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgICRzY29wZS51cGRhdGUgPSBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAvLyBFeGFtcGxlIHdpdGggMiBhcmd1bWVudHNcbiAgICAgICAgICAgIGFuZ3VsYXIuY29weSh1c2VyLCAkc2NvcGUubWFzdGVyKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgJHNjb3BlLnJlc2V0KCk7XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gY29weShzb3VyY2UsIGRlc3RpbmF0aW9uLCBtYXhEZXB0aCkge1xuICB2YXIgc3RhY2tTb3VyY2UgPSBbXTtcbiAgdmFyIHN0YWNrRGVzdCA9IFtdO1xuICBtYXhEZXB0aCA9IGlzVmFsaWRPYmplY3RNYXhEZXB0aChtYXhEZXB0aCkgPyBtYXhEZXB0aCA6IE5hTjtcblxuICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICBpZiAoaXNUeXBlZEFycmF5KGRlc3RpbmF0aW9uKSB8fCBpc0FycmF5QnVmZmVyKGRlc3RpbmF0aW9uKSkge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2NwdGEnLCAnQ2FuXFwndCBjb3B5ISBUeXBlZEFycmF5IGRlc3RpbmF0aW9uIGNhbm5vdCBiZSBtdXRhdGVkLicpO1xuICAgIH1cbiAgICBpZiAoc291cmNlID09PSBkZXN0aW5hdGlvbikge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2NwaScsICdDYW5cXCd0IGNvcHkhIFNvdXJjZSBhbmQgZGVzdGluYXRpb24gYXJlIGlkZW50aWNhbC4nKTtcbiAgICB9XG5cbiAgICAvLyBFbXB0eSB0aGUgZGVzdGluYXRpb24gb2JqZWN0XG4gICAgaWYgKGlzQXJyYXkoZGVzdGluYXRpb24pKSB7XG4gICAgICBkZXN0aW5hdGlvbi5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JFYWNoKGRlc3RpbmF0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkgIT09ICckJGhhc2hLZXknKSB7XG4gICAgICAgICAgZGVsZXRlIGRlc3RpbmF0aW9uW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlKTtcbiAgICBzdGFja0Rlc3QucHVzaChkZXN0aW5hdGlvbik7XG4gICAgcmV0dXJuIGNvcHlSZWN1cnNlKHNvdXJjZSwgZGVzdGluYXRpb24sIG1heERlcHRoKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5RWxlbWVudChzb3VyY2UsIG1heERlcHRoKTtcblxuICBmdW5jdGlvbiBjb3B5UmVjdXJzZShzb3VyY2UsIGRlc3RpbmF0aW9uLCBtYXhEZXB0aCkge1xuICAgIG1heERlcHRoLS07XG4gICAgaWYgKG1heERlcHRoIDwgMCkge1xuICAgICAgcmV0dXJuICcuLi4nO1xuICAgIH1cbiAgICB2YXIgaCA9IGRlc3RpbmF0aW9uLiQkaGFzaEtleTtcbiAgICB2YXIga2V5O1xuICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHNvdXJjZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uLnB1c2goY29weUVsZW1lbnQoc291cmNlW2ldLCBtYXhEZXB0aCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNCbGFua09iamVjdChzb3VyY2UpKSB7XG4gICAgICAvLyBjcmVhdGVNYXAoKSBmYXN0IHBhdGggLS0tIFNhZmUgdG8gYXZvaWQgaGFzT3duUHJvcGVydHkgY2hlY2sgYmVjYXVzZSBwcm90b3R5cGUgY2hhaW4gaXMgZW1wdHlcbiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weUVsZW1lbnQoc291cmNlW2tleV0sIG1heERlcHRoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNvdXJjZSAmJiB0eXBlb2Ygc291cmNlLmhhc093blByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBTbG93IHBhdGgsIHdoaWNoIG11c3QgcmVseSBvbiBoYXNPd25Qcm9wZXJ0eVxuICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjb3B5RWxlbWVudChzb3VyY2Vba2V5XSwgbWF4RGVwdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNsb3dlc3QgcGF0aCAtLS0gaGFzT3duUHJvcGVydHkgY2FuJ3QgYmUgY2FsbGVkIGFzIGEgbWV0aG9kXG4gICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNvcHlFbGVtZW50KHNvdXJjZVtrZXldLCBtYXhEZXB0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2V0SGFzaEtleShkZXN0aW5hdGlvbiwgaCk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gY29weUVsZW1lbnQoc291cmNlLCBtYXhEZXB0aCkge1xuICAgIC8vIFNpbXBsZSB2YWx1ZXNcbiAgICBpZiAoIWlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxuXG4gICAgLy8gQWxyZWFkeSBjb3BpZWQgdmFsdWVzXG4gICAgdmFyIGluZGV4ID0gc3RhY2tTb3VyY2UuaW5kZXhPZihzb3VyY2UpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBzdGFja0Rlc3RbaW5kZXhdO1xuICAgIH1cblxuICAgIGlmIChpc1dpbmRvdyhzb3VyY2UpIHx8IGlzU2NvcGUoc291cmNlKSkge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2Nwd3MnLFxuICAgICAgICAnQ2FuXFwndCBjb3B5ISBNYWtpbmcgY29waWVzIG9mIFdpbmRvdyBvciBTY29wZSBpbnN0YW5jZXMgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZHNSZWN1cnNlID0gZmFsc2U7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gY29weVR5cGUoc291cmNlKTtcblxuICAgIGlmIChkZXN0aW5hdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZXN0aW5hdGlvbiA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDogT2JqZWN0LmNyZWF0ZShnZXRQcm90b3R5cGVPZihzb3VyY2UpKTtcbiAgICAgIG5lZWRzUmVjdXJzZSA9IHRydWU7XG4gICAgfVxuXG4gICAgc3RhY2tTb3VyY2UucHVzaChzb3VyY2UpO1xuICAgIHN0YWNrRGVzdC5wdXNoKGRlc3RpbmF0aW9uKTtcblxuICAgIHJldHVybiBuZWVkc1JlY3Vyc2VcbiAgICAgID8gY29weVJlY3Vyc2Uoc291cmNlLCBkZXN0aW5hdGlvbiwgbWF4RGVwdGgpXG4gICAgICA6IGRlc3RpbmF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gY29weVR5cGUoc291cmNlKSB7XG4gICAgc3dpdGNoICh0b1N0cmluZy5jYWxsKHNvdXJjZSkpIHtcbiAgICAgIGNhc2UgJ1tvYmplY3QgSW50OEFycmF5XSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEludDE2QXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgSW50MzJBcnJheV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBGbG9hdDMyQXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSc6XG4gICAgICBjYXNlICdbb2JqZWN0IFVpbnQ4QXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgVWludDE2QXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgVWludDMyQXJyYXldJzpcbiAgICAgICAgcmV0dXJuIG5ldyBzb3VyY2UuY29uc3RydWN0b3IoY29weUVsZW1lbnQoc291cmNlLmJ1ZmZlciksIHNvdXJjZS5ieXRlT2Zmc2V0LCBzb3VyY2UubGVuZ3RoKTtcblxuICAgICAgY2FzZSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nOlxuICAgICAgICAvLyBTdXBwb3J0OiBJRTEwXG4gICAgICAgIGlmICghc291cmNlLnNsaWNlKSB7XG4gICAgICAgICAgLy8gSWYgd2UncmUgaW4gdGhpcyBjYXNlIHdlIGtub3cgdGhlIGVudmlyb25tZW50IHN1cHBvcnRzIEFycmF5QnVmZmVyXG4gICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgICAgICAgICB2YXIgY29waWVkID0gbmV3IEFycmF5QnVmZmVyKHNvdXJjZS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICBuZXcgVWludDhBcnJheShjb3BpZWQpLnNldChuZXcgVWludDhBcnJheShzb3VyY2UpKTtcbiAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgICAgICAgcmV0dXJuIGNvcGllZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlLnNsaWNlKDApO1xuXG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICAgIHJldHVybiBuZXcgc291cmNlLmNvbnN0cnVjdG9yKHNvdXJjZS52YWx1ZU9mKCkpO1xuXG4gICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKHNvdXJjZS5zb3VyY2UsIHNvdXJjZS50b1N0cmluZygpLm1hdGNoKC9bXi9dKiQvKVswXSk7XG4gICAgICAgIHJlLmxhc3RJbmRleCA9IHNvdXJjZS5sYXN0SW5kZXg7XG4gICAgICAgIHJldHVybiByZTtcblxuICAgICAgY2FzZSAnW29iamVjdCBCbG9iXSc6XG4gICAgICAgIHJldHVybiBuZXcgc291cmNlLmNvbnN0cnVjdG9yKFtzb3VyY2VdLCB7dHlwZTogc291cmNlLnR5cGV9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNGdW5jdGlvbihzb3VyY2UuY2xvbmVOb2RlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgfVxuICB9XG59XG5cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuZnVuY3Rpb24gc2ltcGxlQ29tcGFyZShhLCBiKSB7IHJldHVybiBhID09PSBiIHx8IChhICE9PSBhICYmIGIgIT09IGIpOyB9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZXF1YWxzXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiB0d28gb2JqZWN0cyBvciB0d28gdmFsdWVzIGFyZSBlcXVpdmFsZW50LiBTdXBwb3J0cyB2YWx1ZSB0eXBlcywgcmVndWxhclxuICogZXhwcmVzc2lvbnMsIGFycmF5cyBhbmQgb2JqZWN0cy5cbiAqXG4gKiBUd28gb2JqZWN0cyBvciB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICpcbiAqICogQm90aCBvYmplY3RzIG9yIHZhbHVlcyBwYXNzIGA9PT1gIGNvbXBhcmlzb24uXG4gKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kIGFsbCBvZiB0aGVpciBwcm9wZXJ0aWVzIGFyZSBlcXVhbCBieVxuICogICBjb21wYXJpbmcgdGhlbSB3aXRoIGBhbmd1bGFyLmVxdWFsc2AuXG4gKiAqIEJvdGggdmFsdWVzIGFyZSBOYU4uIChJbiBKYXZhU2NyaXB0LCBOYU4gPT0gTmFOID0+IGZhbHNlLiBCdXQgd2UgY29uc2lkZXIgdHdvIE5hTiBhcyBlcXVhbClcbiAqICogQm90aCB2YWx1ZXMgcmVwcmVzZW50IHRoZSBzYW1lIHJlZ3VsYXIgZXhwcmVzc2lvbiAoSW4gSmF2YVNjcmlwdCxcbiAqICAgL2FiYy8gPT0gL2FiYy8gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gcmVndWxhciBleHByZXNzaW9ucyBhcyBlcXVhbCB3aGVuIHRoZWlyIHRleHR1YWxcbiAqICAgcmVwcmVzZW50YXRpb24gbWF0Y2hlcykuXG4gKlxuICogRHVyaW5nIGEgcHJvcGVydHkgY29tcGFyaXNvbiwgcHJvcGVydGllcyBvZiBgZnVuY3Rpb25gIHR5cGUgYW5kIHByb3BlcnRpZXMgd2l0aCBuYW1lc1xuICogdGhhdCBiZWdpbiB3aXRoIGAkYCBhcmUgaWdub3JlZC5cbiAqXG4gKiBTY29wZSBhbmQgRE9NV2luZG93IG9iamVjdHMgYXJlIGJlaW5nIGNvbXBhcmVkIG9ubHkgYnkgaWRlbnRpZnkgKGA9PT1gKS5cbiAqXG4gKiBAcGFyYW0geyp9IG8xIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvMiBPYmplY3Qgb3IgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWwuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImVxdWFsc0V4YW1wbGVcIiBuYW1lPVwiZXF1YWxzRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGZvcm0gbm92YWxpZGF0ZT5cbiAgICAgICAgICA8aDM+VXNlciAxPC9oMz5cbiAgICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVzZXIxLm5hbWVcIj5cbiAgICAgICAgICBBZ2U6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJ1c2VyMS5hZ2VcIj5cblxuICAgICAgICAgIDxoMz5Vc2VyIDI8L2gzPlxuICAgICAgICAgIE5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlcjIubmFtZVwiPlxuICAgICAgICAgIEFnZTogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInVzZXIyLmFnZVwiPlxuXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiQ29tcGFyZVwiIG5nLWNsaWNrPVwiY29tcGFyZSgpXCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgVXNlciAxOiA8cHJlPnt7dXNlcjEgfCBqc29ufX08L3ByZT5cbiAgICAgICAgICBVc2VyIDI6IDxwcmU+e3t1c2VyMiB8IGpzb259fTwvcHJlPlxuICAgICAgICAgIEVxdWFsOiA8cHJlPnt7cmVzdWx0fX08L3ByZT5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2VxdWFsc0V4YW1wbGUnLCBbXSkuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS51c2VyMSA9IHt9O1xuICAgICAgICAgICRzY29wZS51c2VyMiA9IHt9O1xuICAgICAgICAgICRzY29wZS5jb21wYXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUucmVzdWx0ID0gYW5ndWxhci5lcXVhbHMoJHNjb3BlLnVzZXIxLCAkc2NvcGUudXNlcjIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gZXF1YWxzKG8xLCBvMikge1xuICBpZiAobzEgPT09IG8yKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKG8xID09PSBudWxsIHx8IG8yID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKG8xICE9PSBvMSAmJiBvMiAhPT0gbzIpIHJldHVybiB0cnVlOyAvLyBOYU4gPT09IE5hTlxuICB2YXIgdDEgPSB0eXBlb2YgbzEsIHQyID0gdHlwZW9mIG8yLCBsZW5ndGgsIGtleSwga2V5U2V0O1xuICBpZiAodDEgPT09IHQyICYmIHQxID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChpc0FycmF5KG8xKSkge1xuICAgICAgaWYgKCFpc0FycmF5KG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKChsZW5ndGggPSBvMS5sZW5ndGgpID09PSBvMi5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChrZXkgPSAwOyBrZXkgPCBsZW5ndGg7IGtleSsrKSB7XG4gICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShvMSkpIHtcbiAgICAgIGlmICghaXNEYXRlKG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHNpbXBsZUNvbXBhcmUobzEuZ2V0VGltZSgpLCBvMi5nZXRUaW1lKCkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAobzEpKSB7XG4gICAgICBpZiAoIWlzUmVnRXhwKG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIG8xLnRvU3RyaW5nKCkgPT09IG8yLnRvU3RyaW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1Njb3BlKG8xKSB8fCBpc1Njb3BlKG8yKSB8fCBpc1dpbmRvdyhvMSkgfHwgaXNXaW5kb3cobzIpIHx8XG4gICAgICAgIGlzQXJyYXkobzIpIHx8IGlzRGF0ZShvMikgfHwgaXNSZWdFeHAobzIpKSByZXR1cm4gZmFsc2U7XG4gICAgICBrZXlTZXQgPSBjcmVhdGVNYXAoKTtcbiAgICAgIGZvciAoa2V5IGluIG8xKSB7XG4gICAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnJCcgfHwgaXNGdW5jdGlvbihvMVtrZXldKSkgY29udGludWU7XG4gICAgICAgIGlmICghZXF1YWxzKG8xW2tleV0sIG8yW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGtleVNldFtrZXldID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAoa2V5IGluIG8yKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBrZXlTZXQpICYmXG4gICAgICAgICAgICBrZXkuY2hhckF0KDApICE9PSAnJCcgJiZcbiAgICAgICAgICAgIGlzRGVmaW5lZChvMltrZXldKSAmJlxuICAgICAgICAgICAgIWlzRnVuY3Rpb24obzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBjc3AgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCFpc0RlZmluZWQoY3NwLnJ1bGVzKSkge1xuXG5cbiAgICB2YXIgbmdDc3BFbGVtZW50ID0gKHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmctY3NwXScpIHx8XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uZy1jc3BdJykpO1xuXG4gICAgaWYgKG5nQ3NwRWxlbWVudCkge1xuICAgICAgdmFyIG5nQ3NwQXR0cmlidXRlID0gbmdDc3BFbGVtZW50LmdldEF0dHJpYnV0ZSgnbmctY3NwJykgfHxcbiAgICAgICAgICAgICAgICAgICAgbmdDc3BFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1uZy1jc3AnKTtcbiAgICAgIGNzcC5ydWxlcyA9IHtcbiAgICAgICAgbm9VbnNhZmVFdmFsOiAhbmdDc3BBdHRyaWJ1dGUgfHwgKG5nQ3NwQXR0cmlidXRlLmluZGV4T2YoJ25vLXVuc2FmZS1ldmFsJykgIT09IC0xKSxcbiAgICAgICAgbm9JbmxpbmVTdHlsZTogIW5nQ3NwQXR0cmlidXRlIHx8IChuZ0NzcEF0dHJpYnV0ZS5pbmRleE9mKCduby1pbmxpbmUtc3R5bGUnKSAhPT0gLTEpXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3AucnVsZXMgPSB7XG4gICAgICAgIG5vVW5zYWZlRXZhbDogbm9VbnNhZmVFdmFsKCksXG4gICAgICAgIG5vSW5saW5lU3R5bGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjc3AucnVsZXM7XG5cbiAgZnVuY3Rpb24gbm9VbnNhZmVFdmFsKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LCBuby1uZXctZnVuY1xuICAgICAgbmV3IEZ1bmN0aW9uKCcnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG1vZHVsZSBuZ1xuICogQG5hbWUgbmdKcVxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0pxIHRoZSBuYW1lIG9mIHRoZSBsaWJyYXJ5IGF2YWlsYWJsZSB1bmRlciBgd2luZG93YFxuICogdG8gYmUgdXNlZCBmb3IgYW5ndWxhci5lbGVtZW50XG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGRpcmVjdGl2ZSB0byBmb3JjZSB0aGUgYW5ndWxhci5lbGVtZW50IGxpYnJhcnkuICBUaGlzIHNob3VsZCBiZVxuICogdXNlZCB0byBmb3JjZSBlaXRoZXIganFMaXRlIGJ5IGxlYXZpbmcgbmctanEgYmxhbmsgb3Igc2V0dGluZyB0aGUgbmFtZSBvZlxuICogdGhlIGpxdWVyeSB2YXJpYWJsZSB1bmRlciB3aW5kb3cgKGVnLiBqUXVlcnkpLlxuICpcbiAqIFNpbmNlIGFuZ3VsYXIgbG9va3MgZm9yIHRoaXMgZGlyZWN0aXZlIHdoZW4gaXQgaXMgbG9hZGVkIChkb2Vzbid0IHdhaXQgZm9yIHRoZVxuICogRE9NQ29udGVudExvYWRlZCBldmVudCksIGl0IG11c3QgYmUgcGxhY2VkIG9uIGFuIGVsZW1lbnQgdGhhdCBjb21lcyBiZWZvcmUgdGhlIHNjcmlwdFxuICogd2hpY2ggbG9hZHMgYW5ndWxhci4gQWxzbywgb25seSB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYG5nLWpxYCB3aWxsIGJlIHVzZWQgYW5kIGFsbFxuICogb3RoZXJzIGlnbm9yZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gZm9yY2UganFMaXRlIHVzaW5nIHRoZSBgbmdKcWAgZGlyZWN0aXZlIHRvIHRoZSBgaHRtbGAgdGFnLlxuIGBgYGh0bWxcbiA8IWRvY3R5cGUgaHRtbD5cbiA8aHRtbCBuZy1hcHAgbmctanE+XG4gLi4uXG4gLi4uXG4gPC9odG1sPlxuIGBgYFxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGEgalF1ZXJ5IGJhc2VkIGxpYnJhcnkgb2YgYSBkaWZmZXJlbnQgbmFtZS5cbiAqIFRoZSBsaWJyYXJ5IG5hbWUgbXVzdCBiZSBhdmFpbGFibGUgYXQgdGhlIHRvcCBtb3N0ICd3aW5kb3cnLlxuIGBgYGh0bWxcbiA8IWRvY3R5cGUgaHRtbD5cbiA8aHRtbCBuZy1hcHAgbmctanE9XCJqUXVlcnlMaWJcIj5cbiAuLi5cbiAuLi5cbiA8L2h0bWw+XG4gYGBgXG4gKi9cbnZhciBqcSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoaXNEZWZpbmVkKGpxLm5hbWVfKSkgcmV0dXJuIGpxLm5hbWVfO1xuICB2YXIgZWw7XG4gIHZhciBpLCBpaSA9IG5nQXR0clByZWZpeGVzLmxlbmd0aCwgcHJlZml4LCBuYW1lO1xuICBmb3IgKGkgPSAwOyBpIDwgaWk7ICsraSkge1xuICAgIHByZWZpeCA9IG5nQXR0clByZWZpeGVzW2ldO1xuICAgIGVsID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgcHJlZml4LnJlcGxhY2UoJzonLCAnXFxcXDonKSArICdqcV0nKTtcbiAgICBpZiAoZWwpIHtcbiAgICAgIG5hbWUgPSBlbC5nZXRBdHRyaWJ1dGUocHJlZml4ICsgJ2pxJyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGpxLm5hbWVfID0gbmFtZSk7XG59O1xuXG5mdW5jdGlvbiBjb25jYXQoYXJyYXkxLCBhcnJheTIsIGluZGV4KSB7XG4gIHJldHVybiBhcnJheTEuY29uY2F0KHNsaWNlLmNhbGwoYXJyYXkyLCBpbmRleCkpO1xufVxuXG5mdW5jdGlvbiBzbGljZUFyZ3MoYXJncywgc3RhcnRJbmRleCkge1xuICByZXR1cm4gc2xpY2UuY2FsbChhcmdzLCBzdGFydEluZGV4IHx8IDApO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmJpbmRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggY2FsbHMgZnVuY3Rpb24gYGZuYCBib3VuZCB0byBgc2VsZmAgKGBzZWxmYCBiZWNvbWVzIHRoZSBgdGhpc2AgZm9yXG4gKiBgZm5gKS4gWW91IGNhbiBzdXBwbHkgb3B0aW9uYWwgYGFyZ3NgIHRoYXQgYXJlIHByZWJvdW5kIHRvIHRoZSBmdW5jdGlvbi4gVGhpcyBmZWF0dXJlIGlzIGFsc29cbiAqIGtub3duIGFzIFtwYXJ0aWFsIGFwcGxpY2F0aW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BhcnRpYWxfYXBwbGljYXRpb24pLCBhc1xuICogZGlzdGluZ3Vpc2hlZCBmcm9tIFtmdW5jdGlvbiBjdXJyeWluZ10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdXJyeWluZyNDb250cmFzdF93aXRoX3BhcnRpYWxfZnVuY3Rpb25fYXBwbGljYXRpb24pLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIENvbnRleHQgd2hpY2ggYGZuYCBzaG91bGQgYmUgZXZhbHVhdGVkIGluLlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBGdW5jdGlvbiB0byBiZSBib3VuZC5cbiAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBhcmd1bWVudHMgdG8gYmUgcHJlYm91bmQgdG8gdGhlIGBmbmAgZnVuY3Rpb24gY2FsbC5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBGdW5jdGlvbiB0aGF0IHdyYXBzIHRoZSBgZm5gIHdpdGggYWxsIHRoZSBzcGVjaWZpZWQgYmluZGluZ3MuXG4gKi9cbmZ1bmN0aW9uIGJpbmQoc2VsZiwgZm4pIHtcbiAgdmFyIGN1cnJ5QXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gc2xpY2VBcmdzKGFyZ3VtZW50cywgMikgOiBbXTtcbiAgaWYgKGlzRnVuY3Rpb24oZm4pICYmICEoZm4gaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgcmV0dXJuIGN1cnJ5QXJncy5sZW5ndGhcbiAgICAgID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgY29uY2F0KGN1cnJ5QXJncywgYXJndW1lbnRzLCAwKSlcbiAgICAgICAgICAgIDogZm4uYXBwbHkoc2VsZiwgY3VycnlBcmdzKTtcbiAgICAgICAgfVxuICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgPyBmbi5hcHBseShzZWxmLCBhcmd1bWVudHMpXG4gICAgICAgICAgICA6IGZuLmNhbGwoc2VsZik7XG4gICAgICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gSUUsIG5hdGl2ZSBtZXRob2RzIGFyZSBub3QgZnVuY3Rpb25zIHNvIHRoZXkgY2Fubm90IGJlIGJvdW5kIChub3RlOiB0aGV5IGRvbid0IG5lZWQgdG8gYmUpLlxuICAgIHJldHVybiBmbjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHRvSnNvblJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgdmFyIHZhbCA9IHZhbHVlO1xuXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnJCcgJiYga2V5LmNoYXJBdCgxKSA9PT0gJyQnKSB7XG4gICAgdmFsID0gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKGlzV2luZG93KHZhbHVlKSkge1xuICAgIHZhbCA9ICckV0lORE9XJztcbiAgfSBlbHNlIGlmICh2YWx1ZSAmJiAgd2luZG93LmRvY3VtZW50ID09PSB2YWx1ZSkge1xuICAgIHZhbCA9ICckRE9DVU1FTlQnO1xuICB9IGVsc2UgaWYgKGlzU2NvcGUodmFsdWUpKSB7XG4gICAgdmFsID0gJyRTQ09QRSc7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLnRvSnNvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlcmlhbGl6ZXMgaW5wdXQgaW50byBhIEpTT04tZm9ybWF0dGVkIHN0cmluZy4gUHJvcGVydGllcyB3aXRoIGxlYWRpbmcgJCQgY2hhcmFjdGVycyB3aWxsIGJlXG4gKiBzdHJpcHBlZCBzaW5jZSBhbmd1bGFyIHVzZXMgdGhpcyBub3RhdGlvbiBpbnRlcm5hbGx5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fERhdGV8c3RyaW5nfG51bWJlcnxib29sZWFufSBvYmogSW5wdXQgdG8gYmUgc2VyaWFsaXplZCBpbnRvIEpTT04uXG4gKiBAcGFyYW0ge2Jvb2xlYW58bnVtYmVyfSBbcHJldHR5PTJdIElmIHNldCB0byB0cnVlLCB0aGUgSlNPTiBvdXRwdXQgd2lsbCBjb250YWluIG5ld2xpbmVzIGFuZCB3aGl0ZXNwYWNlLlxuICogICAgSWYgc2V0IHRvIGFuIGludGVnZXIsIHRoZSBKU09OIG91dHB1dCB3aWxsIGNvbnRhaW4gdGhhdCBtYW55IHNwYWNlcyBwZXIgaW5kZW50YXRpb24uXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gSlNPTi1pZmllZCBzdHJpbmcgcmVwcmVzZW50aW5nIGBvYmpgLlxuICogQGtub3duSXNzdWVcbiAqXG4gKiBUaGUgU2FmYXJpIGJyb3dzZXIgdGhyb3dzIGEgYFJhbmdlRXJyb3JgIGluc3RlYWQgb2YgcmV0dXJuaW5nIGBudWxsYCB3aGVuIGl0IHRyaWVzIHRvIHN0cmluZ2lmeSBhIGBEYXRlYFxuICogb2JqZWN0IHdpdGggYW4gaW52YWxpZCBkYXRlIHZhbHVlLiBUaGUgb25seSByZWxpYWJsZSB3YXkgdG8gcHJldmVudCB0aGlzIGlzIHRvIG1vbmtleXBhdGNoIHRoZVxuICogYERhdGUucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kIGFzIGZvbGxvd3M6XG4gKlxuICogYGBgXG4gKiB2YXIgX0RhdGV0b0pTT04gPSBEYXRlLnByb3RvdHlwZS50b0pTT047XG4gKiBEYXRlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAqICAgdHJ5IHtcbiAqICAgICByZXR1cm4gX0RhdGV0b0pTT04uY2FsbCh0aGlzKTtcbiAqICAgfSBjYXRjaChlKSB7XG4gKiAgICAgaWYgKGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSB7XG4gKiAgICAgICByZXR1cm4gbnVsbDtcbiAqICAgICB9XG4gKiAgICAgdGhyb3cgZTtcbiAqICAgfVxuICogfTtcbiAqIGBgYFxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTQyMjEgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKi9cbmZ1bmN0aW9uIHRvSnNvbihvYmosIHByZXR0eSkge1xuICBpZiAoaXNVbmRlZmluZWQob2JqKSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgaWYgKCFpc051bWJlcihwcmV0dHkpKSB7XG4gICAgcHJldHR5ID0gcHJldHR5ID8gMiA6IG51bGw7XG4gIH1cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgdG9Kc29uUmVwbGFjZXIsIHByZXR0eSk7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZnJvbUpzb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXNlcmlhbGl6ZXMgYSBKU09OIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ganNvbiBKU09OIHN0cmluZyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl8c3RyaW5nfG51bWJlcn0gRGVzZXJpYWxpemVkIEpTT04gc3RyaW5nLlxuICovXG5mdW5jdGlvbiBmcm9tSnNvbihqc29uKSB7XG4gIHJldHVybiBpc1N0cmluZyhqc29uKVxuICAgICAgPyBKU09OLnBhcnNlKGpzb24pXG4gICAgICA6IGpzb247XG59XG5cblxudmFyIEFMTF9DT0xPTlMgPSAvOi9nO1xuZnVuY3Rpb24gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZmFsbGJhY2spIHtcbiAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5LCBFZGdlIDEzLTE1K1xuICAvLyBJRS9FZGdlIGRvIG5vdCBcInVuZGVyc3RhbmRcIiBjb2xvbiAoYDpgKSBpbiB0aW1lem9uZVxuICB0aW1lem9uZSA9IHRpbWV6b25lLnJlcGxhY2UoQUxMX0NPTE9OUywgJycpO1xuICB2YXIgcmVxdWVzdGVkVGltZXpvbmVPZmZzZXQgPSBEYXRlLnBhcnNlKCdKYW4gMDEsIDE5NzAgMDA6MDA6MDAgJyArIHRpbWV6b25lKSAvIDYwMDAwO1xuICByZXR1cm4gaXNOdW1iZXJOYU4ocmVxdWVzdGVkVGltZXpvbmVPZmZzZXQpID8gZmFsbGJhY2sgOiByZXF1ZXN0ZWRUaW1lem9uZU9mZnNldDtcbn1cblxuXG5mdW5jdGlvbiBhZGREYXRlTWludXRlcyhkYXRlLCBtaW51dGVzKSB7XG4gIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gIGRhdGUuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSArIG1pbnV0ZXMpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxuXG5mdW5jdGlvbiBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCByZXZlcnNlKSB7XG4gIHJldmVyc2UgPSByZXZlcnNlID8gLTEgOiAxO1xuICB2YXIgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICB2YXIgdGltZXpvbmVPZmZzZXQgPSB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBkYXRlVGltZXpvbmVPZmZzZXQpO1xuICByZXR1cm4gYWRkRGF0ZU1pbnV0ZXMoZGF0ZSwgcmV2ZXJzZSAqICh0aW1lem9uZU9mZnNldCAtIGRhdGVUaW1lem9uZU9mZnNldCkpO1xufVxuXG5cbi8qKlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBzdGFydGluZ1RhZyhlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCkuY2xvbmUoKS5lbXB0eSgpO1xuICB2YXIgZWxlbUh0bWwgPSBqcUxpdGUoJzxkaXY+JykuYXBwZW5kKGVsZW1lbnQpLmh0bWwoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZWxlbWVudFswXS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgPyBsb3dlcmNhc2UoZWxlbUh0bWwpIDpcbiAgICAgICAgZWxlbUh0bWwuXG4gICAgICAgICAgbWF0Y2goL14oPFtePl0rPikvKVsxXS5cbiAgICAgICAgICByZXBsYWNlKC9ePChbXFx3LV0rKS8sIGZ1bmN0aW9uKG1hdGNoLCBub2RlTmFtZSkge3JldHVybiAnPCcgKyBsb3dlcmNhc2Uobm9kZU5hbWUpO30pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGxvd2VyY2FzZShlbGVtSHRtbCk7XG4gIH1cblxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBUcmllcyB0byBkZWNvZGUgdGhlIFVSSSBjb21wb25lbnQgd2l0aG91dCB0aHJvd2luZyBhbiBleGNlcHRpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBzdHIgdmFsdWUgcG90ZW50aWFsIFVSSSBjb21wb25lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGNhbiBiZSBkZWNvZGVkXG4gKiB3aXRoIHRoZSBkZWNvZGVVUklDb21wb25lbnQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSWdub3JlIGFueSBpbnZhbGlkIHVyaSBjb21wb25lbnQuXG4gIH1cbn1cblxuXG4vKipcbiAqIFBhcnNlcyBhbiBlc2NhcGVkIHVybCBxdWVyeSBzdHJpbmcgaW50byBrZXktdmFsdWUgcGFpcnMuXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsYm9vbGVhbnxBcnJheT59XG4gKi9cbmZ1bmN0aW9uIHBhcnNlS2V5VmFsdWUoLyoqc3RyaW5nKi9rZXlWYWx1ZSkge1xuICB2YXIgb2JqID0ge307XG4gIGZvckVhY2goKGtleVZhbHVlIHx8ICcnKS5zcGxpdCgnJicpLCBmdW5jdGlvbihrZXlWYWx1ZSkge1xuICAgIHZhciBzcGxpdFBvaW50LCBrZXksIHZhbDtcbiAgICBpZiAoa2V5VmFsdWUpIHtcbiAgICAgIGtleSA9IGtleVZhbHVlID0ga2V5VmFsdWUucmVwbGFjZSgvXFwrL2csJyUyMCcpO1xuICAgICAgc3BsaXRQb2ludCA9IGtleVZhbHVlLmluZGV4T2YoJz0nKTtcbiAgICAgIGlmIChzcGxpdFBvaW50ICE9PSAtMSkge1xuICAgICAgICBrZXkgPSBrZXlWYWx1ZS5zdWJzdHJpbmcoMCwgc3BsaXRQb2ludCk7XG4gICAgICAgIHZhbCA9IGtleVZhbHVlLnN1YnN0cmluZyhzcGxpdFBvaW50ICsgMSk7XG4gICAgICB9XG4gICAgICBrZXkgPSB0cnlEZWNvZGVVUklDb21wb25lbnQoa2V5KTtcbiAgICAgIGlmIChpc0RlZmluZWQoa2V5KSkge1xuICAgICAgICB2YWwgPSBpc0RlZmluZWQodmFsKSA/IHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWwpIDogdHJ1ZTtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqW2tleV0pKSB7XG4gICAgICAgICAgb2JqW2tleV0ucHVzaCh2YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9ialtrZXldID0gW29ialtrZXldLHZhbF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiB0b0tleVZhbHVlKG9iaikge1xuICB2YXIgcGFydHMgPSBbXTtcbiAgZm9yRWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKGFycmF5VmFsdWUpIHtcbiAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXksIHRydWUpICtcbiAgICAgICAgICAgICAgICAgICAoYXJyYXlWYWx1ZSA9PT0gdHJ1ZSA/ICcnIDogJz0nICsgZW5jb2RlVXJpUXVlcnkoYXJyYXlWYWx1ZSwgdHJ1ZSkpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXksIHRydWUpICtcbiAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogJz0nICsgZW5jb2RlVXJpUXVlcnkodmFsdWUsIHRydWUpKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHBhcnRzLmxlbmd0aCA/IHBhcnRzLmpvaW4oJyYnKSA6ICcnO1xufVxuXG5cbi8qKlxuICogV2UgbmVlZCBvdXIgY3VzdG9tIG1ldGhvZCBiZWNhdXNlIGVuY29kZVVSSUNvbXBvbmVudCBpcyB0b28gYWdncmVzc2l2ZSBhbmQgZG9lc24ndCBmb2xsb3dcbiAqIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0IHdpdGggcmVnYXJkcyB0byB0aGUgY2hhcmFjdGVyIHNldCAocGNoYXIpIGFsbG93ZWQgaW4gcGF0aFxuICogc2VnbWVudHM6XG4gKiAgICBzZWdtZW50ICAgICAgID0gKnBjaGFyXG4gKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvIFwiOlwiIC8gXCJAXCJcbiAqICAgIHBjdC1lbmNvZGVkICAgPSBcIiVcIiBIRVhESUcgSEVYRElHXG4gKiAgICB1bnJlc2VydmVkICAgID0gQUxQSEEgLyBESUdJVCAvIFwiLVwiIC8gXCIuXCIgLyBcIl9cIiAvIFwiflwiXG4gKiAgICBzdWItZGVsaW1zICAgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiXG4gKiAgICAgICAgICAgICAgICAgICAgIC8gXCIqXCIgLyBcIitcIiAvIFwiLFwiIC8gXCI7XCIgLyBcIj1cIlxuICovXG5mdW5jdGlvbiBlbmNvZGVVcmlTZWdtZW50KHZhbCkge1xuICByZXR1cm4gZW5jb2RlVXJpUXVlcnkodmFsLCB0cnVlKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMjYvZ2ksICcmJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNEL2dpLCAnPScpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyQi9naSwgJysnKTtcbn1cblxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBlbmNvZGluZyAqa2V5KiBvciAqdmFsdWUqIHBhcnRzIG9mIHF1ZXJ5IGNvbXBvbmVudC4gV2UgbmVlZCBhIGN1c3RvbVxuICogbWV0aG9kIGJlY2F1c2UgZW5jb2RlVVJJQ29tcG9uZW50IGlzIHRvbyBhZ2dyZXNzaXZlIGFuZCBlbmNvZGVzIHN0dWZmIHRoYXQgZG9lc24ndCBoYXZlIHRvIGJlXG4gKiBlbmNvZGVkIHBlciBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2OlxuICogICAgcXVlcnkgICAgICAgICA9ICooIHBjaGFyIC8gXCIvXCIgLyBcIj9cIiApXG4gKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvIFwiOlwiIC8gXCJAXCJcbiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gXCItXCIgLyBcIi5cIiAvIFwiX1wiIC8gXCJ+XCJcbiAqICAgIHBjdC1lbmNvZGVkICAgPSBcIiVcIiBIRVhESUcgSEVYRElHXG4gKiAgICBzdWItZGVsaW1zICAgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiXG4gKiAgICAgICAgICAgICAgICAgICAgIC8gXCIqXCIgLyBcIitcIiAvIFwiLFwiIC8gXCI7XCIgLyBcIj1cIlxuICovXG5mdW5jdGlvbiBlbmNvZGVVcmlRdWVyeSh2YWwsIHBjdEVuY29kZVNwYWNlcykge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNCL2dpLCAnOycpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyMC9nLCAocGN0RW5jb2RlU3BhY2VzID8gJyUyMCcgOiAnKycpKTtcbn1cblxudmFyIG5nQXR0clByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmc6JywgJ3gtbmctJ107XG5cbmZ1bmN0aW9uIGdldE5nQXR0cmlidXRlKGVsZW1lbnQsIG5nQXR0cikge1xuICB2YXIgYXR0ciwgaSwgaWkgPSBuZ0F0dHJQcmVmaXhlcy5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XG4gICAgYXR0ciA9IG5nQXR0clByZWZpeGVzW2ldICsgbmdBdHRyO1xuICAgIGlmIChpc1N0cmluZyhhdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cikpKSB7XG4gICAgICByZXR1cm4gYXR0cjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGFsbG93QXV0b0Jvb3RzdHJhcChkb2N1bWVudCkge1xuICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdDtcblxuICBpZiAoIXNjcmlwdCkge1xuICAgIC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYGRvY3VtZW50LmN1cnJlbnRTY3JpcHRgXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJZiB0aGUgYGN1cnJlbnRTY3JpcHRgIHByb3BlcnR5IGhhcyBiZWVuIGNsb2JiZXJlZCBqdXN0IHJldHVybiBmYWxzZSwgc2luY2UgdGhpcyBpbmRpY2F0ZXMgYSBwcm9iYWJsZSBhdHRhY2tcbiAgaWYgKCEoc2NyaXB0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxTY3JpcHRFbGVtZW50IHx8IHNjcmlwdCBpbnN0YW5jZW9mIHdpbmRvdy5TVkdTY3JpcHRFbGVtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBhdHRyaWJ1dGVzID0gc2NyaXB0LmF0dHJpYnV0ZXM7XG4gIHZhciBzcmNzID0gW2F0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdzcmMnKSwgYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2hyZWYnKSwgYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ3hsaW5rOmhyZWYnKV07XG5cbiAgcmV0dXJuIHNyY3MuZXZlcnkoZnVuY3Rpb24oc3JjKSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXNyYy52YWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxpbmsuaHJlZiA9IHNyYy52YWx1ZTtcblxuICAgIGlmIChkb2N1bWVudC5sb2NhdGlvbi5vcmlnaW4gPT09IGxpbmsub3JpZ2luKSB7XG4gICAgICAvLyBTYW1lLW9yaWdpbiByZXNvdXJjZXMgYXJlIGFsd2F5cyBhbGxvd2VkLCBldmVuIGZvciBub24td2hpdGVsaXN0ZWQgc2NoZW1lcy5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBEaXNhYmxlZCBib290c3RyYXBwaW5nIHVubGVzcyBhbmd1bGFyLmpzIHdhcyBsb2FkZWQgZnJvbSBhIGtub3duIHNjaGVtZSB1c2VkIG9uIHRoZSB3ZWIuXG4gICAgLy8gVGhpcyBpcyB0byBwcmV2ZW50IGFuZ3VsYXIuanMgYnVuZGxlZCB3aXRoIGJyb3dzZXIgZXh0ZW5zaW9ucyBmcm9tIGJlaW5nIHVzZWQgdG8gYnlwYXNzIHRoZVxuICAgIC8vIGNvbnRlbnQgc2VjdXJpdHkgcG9saWN5IGluIHdlYiBwYWdlcyBhbmQgb3RoZXIgYnJvd3NlciBleHRlbnNpb25zLlxuICAgIHN3aXRjaCAobGluay5wcm90b2NvbCkge1xuICAgICAgY2FzZSAnaHR0cDonOlxuICAgICAgY2FzZSAnaHR0cHM6JzpcbiAgICAgIGNhc2UgJ2Z0cDonOlxuICAgICAgY2FzZSAnYmxvYjonOlxuICAgICAgY2FzZSAnZmlsZTonOlxuICAgICAgY2FzZSAnZGF0YTonOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBDYWNoZWQgYXMgaXQgaGFzIHRvIHJ1biBkdXJpbmcgbG9hZGluZyBzbyB0aGF0IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgaXMgYXZhaWxhYmxlLlxudmFyIGlzQXV0b0Jvb3RzdHJhcEFsbG93ZWQgPSBhbGxvd0F1dG9Cb290c3RyYXAod2luZG93LmRvY3VtZW50KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0FwcFxuICogQG1vZHVsZSBuZ1xuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHthbmd1bGFyLk1vZHVsZX0gbmdBcHAgYW4gb3B0aW9uYWwgYXBwbGljYXRpb25cbiAqICAge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZX0gbmFtZSB0byBsb2FkLlxuICogQHBhcmFtIHtib29sZWFuPX0gbmdTdHJpY3REaSBpZiB0aGlzIGF0dHJpYnV0ZSBpcyBwcmVzZW50IG9uIHRoZSBhcHAgZWxlbWVudCwgdGhlIGluamVjdG9yIHdpbGwgYmVcbiAqICAgY3JlYXRlZCBpbiBcInN0cmljdC1kaVwiIG1vZGUuIFRoaXMgbWVhbnMgdGhhdCB0aGUgYXBwbGljYXRpb24gd2lsbCBmYWlsIHRvIGludm9rZSBmdW5jdGlvbnMgd2hpY2hcbiAqICAgZG8gbm90IHVzZSBleHBsaWNpdCBmdW5jdGlvbiBhbm5vdGF0aW9uIChhbmQgYXJlIHRodXMgdW5zdWl0YWJsZSBmb3IgbWluaWZpY2F0aW9uKSwgYXMgZGVzY3JpYmVkXG4gKiAgIGluIHtAbGluayBndWlkZS9kaSB0aGUgRGVwZW5kZW5jeSBJbmplY3Rpb24gZ3VpZGV9LCBhbmQgdXNlZnVsIGRlYnVnZ2luZyBpbmZvIHdpbGwgYXNzaXN0IGluXG4gKiAgIHRyYWNraW5nIGRvd24gdGhlIHJvb3Qgb2YgdGhlc2UgYnVncy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2UgdGhpcyBkaXJlY3RpdmUgdG8gKiphdXRvLWJvb3RzdHJhcCoqIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbi4gVGhlIGBuZ0FwcGAgZGlyZWN0aXZlXG4gKiBkZXNpZ25hdGVzIHRoZSAqKnJvb3QgZWxlbWVudCoqIG9mIHRoZSBhcHBsaWNhdGlvbiBhbmQgaXMgdHlwaWNhbGx5IHBsYWNlZCBuZWFyIHRoZSByb290IGVsZW1lbnRcbiAqIG9mIHRoZSBwYWdlIC0gZS5nLiBvbiB0aGUgYDxib2R5PmAgb3IgYDxodG1sPmAgdGFncy5cbiAqXG4gKiBUaGVyZSBhcmUgYSBmZXcgdGhpbmdzIHRvIGtlZXAgaW4gbWluZCB3aGVuIHVzaW5nIGBuZ0FwcGA6XG4gKiAtIG9ubHkgb25lIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBjYW4gYmUgYXV0by1ib290c3RyYXBwZWQgcGVyIEhUTUwgZG9jdW1lbnQuIFRoZSBmaXJzdCBgbmdBcHBgXG4gKiAgIGZvdW5kIGluIHRoZSBkb2N1bWVudCB3aWxsIGJlIHVzZWQgdG8gZGVmaW5lIHRoZSByb290IGVsZW1lbnQgdG8gYXV0by1ib290c3RyYXAgYXMgYW5cbiAqICAgYXBwbGljYXRpb24uIFRvIHJ1biBtdWx0aXBsZSBhcHBsaWNhdGlvbnMgaW4gYW4gSFRNTCBkb2N1bWVudCB5b3UgbXVzdCBtYW51YWxseSBib290c3RyYXAgdGhlbSB1c2luZ1xuICogICB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9IGluc3RlYWQuXG4gKiAtIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbnMgY2Fubm90IGJlIG5lc3RlZCB3aXRoaW4gZWFjaCBvdGhlci5cbiAqIC0gRG8gbm90IHVzZSBhIGRpcmVjdGl2ZSB0aGF0IHVzZXMge0BsaW5rIG5nLiRjb21waWxlI3RyYW5zY2x1c2lvbiB0cmFuc2NsdXNpb259IG9uIHRoZSBzYW1lIGVsZW1lbnQgYXMgYG5nQXBwYC5cbiAqICAgVGhpcyBpbmNsdWRlcyBkaXJlY3RpdmVzIHN1Y2ggYXMge0BsaW5rIG5nLm5nSWYgYG5nSWZgfSwge0BsaW5rIG5nLm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0gYW5kXG4gKiAgIHtAbGluayBuZ1JvdXRlLm5nVmlldyBgbmdWaWV3YH0uXG4gKiAgIERvaW5nIHRoaXMgbWlzcGxhY2VzIHRoZSBhcHAge0BsaW5rIG5nLiRyb290RWxlbWVudCBgJHJvb3RFbGVtZW50YH0gYW5kIHRoZSBhcHAncyB7QGxpbmsgYXV0by4kaW5qZWN0b3IgaW5qZWN0b3J9LFxuICogICBjYXVzaW5nIGFuaW1hdGlvbnMgdG8gc3RvcCB3b3JraW5nIGFuZCBtYWtpbmcgdGhlIGluamVjdG9yIGluYWNjZXNzaWJsZSBmcm9tIG91dHNpZGUgdGhlIGFwcC5cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgYW4gKipBbmd1bGFySlMgbW9kdWxlKiogdG8gYmUgdXNlZCBhcyB0aGUgcm9vdCBtb2R1bGUgZm9yIHRoZSBhcHBsaWNhdGlvbi4gIFRoaXNcbiAqIG1vZHVsZSB3aWxsIGJlIGxvYWRlZCBpbnRvIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3J9IHdoZW4gdGhlIGFwcGxpY2F0aW9uIGlzIGJvb3RzdHJhcHBlZC4gSXRcbiAqIHNob3VsZCBjb250YWluIHRoZSBhcHBsaWNhdGlvbiBjb2RlIG5lZWRlZCBvciBoYXZlIGRlcGVuZGVuY2llcyBvbiBvdGhlciBtb2R1bGVzIHRoYXQgd2lsbFxuICogY29udGFpbiB0aGUgY29kZS4gU2VlIHtAbGluayBhbmd1bGFyLm1vZHVsZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogSW4gdGhlIGV4YW1wbGUgYmVsb3cgaWYgdGhlIGBuZ0FwcGAgZGlyZWN0aXZlIHdlcmUgbm90IHBsYWNlZCBvbiB0aGUgYGh0bWxgIGVsZW1lbnQgdGhlbiB0aGVcbiAqIGRvY3VtZW50IHdvdWxkIG5vdCBiZSBjb21waWxlZCwgdGhlIGBBcHBDb250cm9sbGVyYCB3b3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGFuZCB0aGUgYHt7IGErYiB9fWBcbiAqIHdvdWxkIG5vdCBiZSByZXNvbHZlZCB0byBgM2AuXG4gKlxuICogYG5nQXBwYCBpcyB0aGUgZWFzaWVzdCwgYW5kIG1vc3QgY29tbW9uIHdheSB0byBib290c3RyYXAgYW4gYXBwbGljYXRpb24uXG4gKlxuIDxleGFtcGxlIG1vZHVsZT1cIm5nQXBwRGVtb1wiIG5hbWU9XCJuZy1hcHBcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJuZ0FwcERlbW9Db250cm9sbGVyXCI+XG4gICAgIEkgY2FuIGFkZDoge3thfX0gKyB7e2J9fSA9ICB7eyBhK2IgfX1cbiAgIDwvZGl2PlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgYW5ndWxhci5tb2R1bGUoJ25nQXBwRGVtbycsIFtdKS5jb250cm9sbGVyKCduZ0FwcERlbW9Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICRzY29wZS5hID0gMTtcbiAgICAgJHNjb3BlLmIgPSAyO1xuICAgfSk7XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuICpcbiAqIFVzaW5nIGBuZ1N0cmljdERpYCwgeW91IHdvdWxkIHNlZSBzb21ldGhpbmcgbGlrZSB0aGlzOlxuICpcbiA8ZXhhbXBsZSBuZy1hcHAtaW5jbHVkZWQ9XCJ0cnVlXCIgbmFtZT1cInN0cmljdC1kaVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgIDxkaXYgbmctYXBwPVwibmdBcHBTdHJpY3REZW1vXCIgbmctc3RyaWN0LWRpPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdvb2RDb250cm9sbGVyMVwiPlxuICAgICAgICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG5cbiAgICAgICAgICAgPHA+VGhpcyByZW5kZXJzIGJlY2F1c2UgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgZmFpbCB0b1xuICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZSAoc2VlXG4gICAgICAgICAgICAgIHNjcmlwdC5qcyBmb3IgZGV0YWlscylcbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiR29vZENvbnRyb2xsZXIyXCI+XG4gICAgICAgICAgIE5hbWU6IDxpbnB1dCBuZy1tb2RlbD1cIm5hbWVcIj48YnIgLz5cbiAgICAgICAgICAgSGVsbG8sIHt7bmFtZX19IVxuXG4gICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG9cbiAgICAgICAgICAgICAgaW5zdGFudGlhdGUsIGJ5IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gc3R5bGVcbiAgICAgICAgICAgICAgKHNlZSBzY3JpcHQuanMgZm9yIGRldGFpbHMpXG4gICAgICAgICAgIDwvcD5cbiAgICAgICA8L2Rpdj5cblxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkJhZENvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fVxuXG4gICAgICAgICAgIDxwPlRoZSBjb250cm9sbGVyIGNvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQsIGR1ZSB0byByZWx5aW5nXG4gICAgICAgICAgICAgIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9ucyAod2hpY2ggYXJlIGRpc2FibGVkIGluXG4gICAgICAgICAgICAgIHN0cmljdCBtb2RlKS4gQXMgc3VjaCwgdGhlIGNvbnRlbnQgb2YgdGhpcyBzZWN0aW9uIGlzIG5vdFxuICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWQsIGFuZCB0aGVyZSBzaG91bGQgYmUgYW4gZXJyb3IgaW4geW91ciB3ZWIgY29uc29sZS5cbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICBhbmd1bGFyLm1vZHVsZSgnbmdBcHBTdHJpY3REZW1vJywgW10pXG4gICAgIC8vIEJhZENvbnRyb2xsZXIgd2lsbCBmYWlsIHRvIGluc3RhbnRpYXRlLCBkdWUgdG8gcmVseWluZyBvbiBhdXRvbWF0aWMgZnVuY3Rpb24gYW5ub3RhdGlvbixcbiAgICAgLy8gcmF0aGVyIHRoYW4gYW4gZXhwbGljaXQgYW5ub3RhdGlvblxuICAgICAuY29udHJvbGxlcignQmFkQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICRzY29wZS5hID0gMTtcbiAgICAgICAkc2NvcGUuYiA9IDI7XG4gICAgIH0pXG4gICAgIC8vIFVubGlrZSBCYWRDb250cm9sbGVyLCBHb29kQ29udHJvbGxlcjEgYW5kIEdvb2RDb250cm9sbGVyMiB3aWxsIG5vdCBmYWlsIHRvIGJlIGluc3RhbnRpYXRlZCxcbiAgICAgLy8gZHVlIHRvIHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb25zIHVzaW5nIHRoZSBhcnJheSBzdHlsZSBhbmQgJGluamVjdCBwcm9wZXJ0eSwgcmVzcGVjdGl2ZWx5LlxuICAgICAuY29udHJvbGxlcignR29vZENvbnRyb2xsZXIxJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICAgJHNjb3BlLmIgPSAyO1xuICAgICB9XSlcbiAgICAgLmNvbnRyb2xsZXIoJ0dvb2RDb250cm9sbGVyMicsIEdvb2RDb250cm9sbGVyMik7XG4gICAgIGZ1bmN0aW9uIEdvb2RDb250cm9sbGVyMigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUubmFtZSA9ICdXb3JsZCc7XG4gICAgIH1cbiAgICAgR29vZENvbnRyb2xsZXIyLiRpbmplY3QgPSBbJyRzY29wZSddO1xuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgZGl2W25nLWNvbnRyb2xsZXJdIHtcbiAgICAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgIGJvcmRlcjogMXB4IHNvbGlkO1xuICAgICAgIHBhZGRpbmc6IC41ZW07XG4gICB9XG4gICBkaXZbbmctY29udHJvbGxlcl49R29vZF0ge1xuICAgICAgIGJvcmRlci1jb2xvcjogI2Q2ZTljNjtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGZmMGQ4O1xuICAgICAgIGNvbG9yOiAjM2M3NjNkO1xuICAgfVxuICAgZGl2W25nLWNvbnRyb2xsZXJePUJhZF0ge1xuICAgICAgIGJvcmRlci1jb2xvcjogI2ViY2NkMTtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJkZWRlO1xuICAgICAgIGNvbG9yOiAjYTk0NDQyO1xuICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICB9XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiBhbmd1bGFySW5pdChlbGVtZW50LCBib290c3RyYXApIHtcbiAgdmFyIGFwcEVsZW1lbnQsXG4gICAgICBtb2R1bGUsXG4gICAgICBjb25maWcgPSB7fTtcblxuICAvLyBUaGUgZWxlbWVudCBgZWxlbWVudGAgaGFzIHByaW9yaXR5IG92ZXIgYW55IG90aGVyIGVsZW1lbnQuXG4gIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ICsgJ2FwcCc7XG5cbiAgICBpZiAoIWFwcEVsZW1lbnQgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIGFwcEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgbW9kdWxlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICB9KTtcbiAgZm9yRWFjaChuZ0F0dHJQcmVmaXhlcywgZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJztcbiAgICB2YXIgY2FuZGlkYXRlO1xuXG4gICAgaWYgKCFhcHBFbGVtZW50ICYmIChjYW5kaWRhdGUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgbmFtZS5yZXBsYWNlKCc6JywgJ1xcXFw6JykgKyAnXScpKSkge1xuICAgICAgYXBwRWxlbWVudCA9IGNhbmRpZGF0ZTtcbiAgICAgIG1vZHVsZSA9IGNhbmRpZGF0ZS5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICB9KTtcbiAgaWYgKGFwcEVsZW1lbnQpIHtcbiAgICBpZiAoIWlzQXV0b0Jvb3RzdHJhcEFsbG93ZWQpIHtcbiAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKCdBbmd1bGFyOiBkaXNhYmxpbmcgYXV0b21hdGljIGJvb3RzdHJhcC4gPHNjcmlwdD4gcHJvdG9jb2wgaW5kaWNhdGVzICcgK1xuICAgICAgICAgICdhbiBleHRlbnNpb24sIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgZG9lcyBub3QgbWF0Y2guJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbmZpZy5zdHJpY3REaSA9IGdldE5nQXR0cmlidXRlKGFwcEVsZW1lbnQsICdzdHJpY3QtZGknKSAhPT0gbnVsbDtcbiAgICBib290c3RyYXAoYXBwRWxlbWVudCwgbW9kdWxlID8gW21vZHVsZV0gOiBbXSwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5ib290c3RyYXBcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gbWFudWFsbHkgc3RhcnQgdXAgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSB7QGxpbmsgZ3VpZGUvYm9vdHN0cmFwIEJvb3RzdHJhcCBndWlkZX0uXG4gKlxuICogQW5ndWxhciB3aWxsIGRldGVjdCBpZiBpdCBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgYnJvd3NlciBtb3JlIHRoYW4gb25jZSBhbmQgb25seSBhbGxvdyB0aGVcbiAqIGZpcnN0IGxvYWRlZCBzY3JpcHQgdG8gYmUgYm9vdHN0cmFwcGVkIGFuZCB3aWxsIHJlcG9ydCBhIHdhcm5pbmcgdG8gdGhlIGJyb3dzZXIgY29uc29sZSBmb3JcbiAqIGVhY2ggb2YgdGhlIHN1YnNlcXVlbnQgc2NyaXB0cy4gVGhpcyBwcmV2ZW50cyBzdHJhbmdlIHJlc3VsdHMgaW4gYXBwbGljYXRpb25zLCB3aGVyZSBvdGhlcndpc2VcbiAqIG11bHRpcGxlIGluc3RhbmNlcyBvZiBBbmd1bGFyIHRyeSB0byB3b3JrIG9uIHRoZSBET00uXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBQcm90cmFjdG9yIGJhc2VkIGVuZC10by1lbmQgdGVzdHMgY2Fubm90IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGJvb3RzdHJhcCBtYW51YWxseS5cbiAqIFRoZXkgbXVzdCB1c2Uge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0uXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIERvIG5vdCBib290c3RyYXAgdGhlIGFwcCBvbiBhbiBlbGVtZW50IHdpdGggYSBkaXJlY3RpdmUgdGhhdCB1c2VzIHtAbGluayBuZy4kY29tcGlsZSN0cmFuc2NsdXNpb24gdHJhbnNjbHVzaW9ufSxcbiAqIHN1Y2ggYXMge0BsaW5rIG5nLm5nSWYgYG5nSWZgfSwge0BsaW5rIG5nLm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0gYW5kIHtAbGluayBuZ1JvdXRlLm5nVmlldyBgbmdWaWV3YH0uXG4gKiBEb2luZyB0aGlzIG1pc3BsYWNlcyB0aGUgYXBwIHtAbGluayBuZy4kcm9vdEVsZW1lbnQgYCRyb290RWxlbWVudGB9IGFuZCB0aGUgYXBwJ3Mge0BsaW5rIGF1dG8uJGluamVjdG9yIGluamVjdG9yfSxcbiAqIGNhdXNpbmcgYW5pbWF0aW9ucyB0byBzdG9wIHdvcmtpbmcgYW5kIG1ha2luZyB0aGUgaW5qZWN0b3IgaW5hY2Nlc3NpYmxlIGZyb20gb3V0c2lkZSB0aGUgYXBwLlxuICogPC9kaXY+XG4gKlxuICogYGBgaHRtbFxuICogPCFkb2N0eXBlIGh0bWw+XG4gKiA8aHRtbD5cbiAqIDxib2R5PlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiV2VsY29tZUNvbnRyb2xsZXJcIj5cbiAqICAge3tncmVldGluZ319XG4gKiA8L2Rpdj5cbiAqXG4gKiA8c2NyaXB0IHNyYz1cImFuZ3VsYXIuanNcIj48L3NjcmlwdD5cbiAqIDxzY3JpcHQ+XG4gKiAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnZGVtbycsIFtdKVxuICogICAuY29udHJvbGxlcignV2VsY29tZUNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICRzY29wZS5ncmVldGluZyA9ICdXZWxjb21lISc7XG4gKiAgIH0pO1xuICogICBhbmd1bGFyLmJvb3RzdHJhcChkb2N1bWVudCwgWydkZW1vJ10pO1xuICogPC9zY3JpcHQ+XG4gKiA8L2JvZHk+XG4gKiA8L2h0bWw+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgRE9NIGVsZW1lbnQgd2hpY2ggaXMgdGhlIHJvb3Qgb2YgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfEZ1bmN0aW9ufEFycmF5Pj19IG1vZHVsZXMgYW4gYXJyYXkgb2YgbW9kdWxlcyB0byBsb2FkIGludG8gdGhlIGFwcGxpY2F0aW9uLlxuICogICAgIEVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgc2hvdWxkIGJlIHRoZSBuYW1lIG9mIGEgcHJlZGVmaW5lZCBtb2R1bGUgb3IgYSAoREkgYW5ub3RhdGVkKVxuICogICAgIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkIGJ5IHRoZSBpbmplY3RvciBhcyBhIGBjb25maWdgIGJsb2NrLlxuICogICAgIFNlZToge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9XG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBhbiBvYmplY3QgZm9yIGRlZmluaW5nIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGFwcGxpY2F0aW9uLiBUaGVcbiAqICAgICBmb2xsb3dpbmcga2V5cyBhcmUgc3VwcG9ydGVkOlxuICpcbiAqICogYHN0cmljdERpYCAtIGRpc2FibGUgYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhpcyBpcyBtZWFudCB0b1xuICogICBhc3Npc3QgaW4gZmluZGluZyBidWdzIHdoaWNoIGJyZWFrIG1pbmlmaWVkIGNvZGUuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gKlxuICogQHJldHVybnMge2F1dG8uJGluamVjdG9yfSBSZXR1cm5zIHRoZSBuZXdseSBjcmVhdGVkIGluamVjdG9yIGZvciB0aGlzIGFwcC5cbiAqL1xuZnVuY3Rpb24gYm9vdHN0cmFwKGVsZW1lbnQsIG1vZHVsZXMsIGNvbmZpZykge1xuICBpZiAoIWlzT2JqZWN0KGNvbmZpZykpIGNvbmZpZyA9IHt9O1xuICB2YXIgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBzdHJpY3REaTogZmFsc2VcbiAgfTtcbiAgY29uZmlnID0gZXh0ZW5kKGRlZmF1bHRDb25maWcsIGNvbmZpZyk7XG4gIHZhciBkb0Jvb3RzdHJhcCA9IGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudC5pbmplY3RvcigpKSB7XG4gICAgICB2YXIgdGFnID0gKGVsZW1lbnRbMF0gPT09IHdpbmRvdy5kb2N1bWVudCkgPyAnZG9jdW1lbnQnIDogc3RhcnRpbmdUYWcoZWxlbWVudCk7XG4gICAgICAvLyBFbmNvZGUgYW5nbGUgYnJhY2tldHMgdG8gcHJldmVudCBpbnB1dCBmcm9tIGJlaW5nIHNhbml0aXplZCB0byBlbXB0eSBzdHJpbmcgIzg2ODMuXG4gICAgICB0aHJvdyBuZ01pbkVycihcbiAgICAgICAgICAnYnRzdHJwZCcsXG4gICAgICAgICAgJ0FwcCBhbHJlYWR5IGJvb3RzdHJhcHBlZCB3aXRoIHRoaXMgZWxlbWVudCBcXCd7MH1cXCcnLFxuICAgICAgICAgIHRhZy5yZXBsYWNlKC88LywnJmx0OycpLnJlcGxhY2UoLz4vLCcmZ3Q7JykpO1xuICAgIH1cblxuICAgIG1vZHVsZXMgPSBtb2R1bGVzIHx8IFtdO1xuICAgIG1vZHVsZXMudW5zaGlmdChbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAgICAgICRwcm92aWRlLnZhbHVlKCckcm9vdEVsZW1lbnQnLCBlbGVtZW50KTtcbiAgICB9XSk7XG5cbiAgICBpZiAoY29uZmlnLmRlYnVnSW5mb0VuYWJsZWQpIHtcbiAgICAgIC8vIFB1c2hpbmcgc28gdGhhdCB0aGlzIG92ZXJyaWRlcyBgZGVidWdJbmZvRW5hYmxlZGAgc2V0dGluZyBkZWZpbmVkIGluIHVzZXIncyBgbW9kdWxlc2AuXG4gICAgICBtb2R1bGVzLnB1c2goWyckY29tcGlsZVByb3ZpZGVyJywgZnVuY3Rpb24oJGNvbXBpbGVQcm92aWRlcikge1xuICAgICAgICAkY29tcGlsZVByb3ZpZGVyLmRlYnVnSW5mb0VuYWJsZWQodHJ1ZSk7XG4gICAgICB9XSk7XG4gICAgfVxuXG4gICAgbW9kdWxlcy51bnNoaWZ0KCduZycpO1xuICAgIHZhciBpbmplY3RvciA9IGNyZWF0ZUluamVjdG9yKG1vZHVsZXMsIGNvbmZpZy5zdHJpY3REaSk7XG4gICAgaW5qZWN0b3IuaW52b2tlKFsnJHJvb3RTY29wZScsICckcm9vdEVsZW1lbnQnLCAnJGNvbXBpbGUnLCAnJGluamVjdG9yJyxcbiAgICAgICBmdW5jdGlvbiBib290c3RyYXBBcHBseShzY29wZSwgZWxlbWVudCwgY29tcGlsZSwgaW5qZWN0b3IpIHtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQuZGF0YSgnJGluamVjdG9yJywgaW5qZWN0b3IpO1xuICAgICAgICAgIGNvbXBpbGUoZWxlbWVudCkoc2NvcGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1dXG4gICAgKTtcbiAgICByZXR1cm4gaW5qZWN0b3I7XG4gIH07XG5cbiAgdmFyIE5HX0VOQUJMRV9ERUJVR19JTkZPID0gL15OR19FTkFCTEVfREVCVUdfSU5GTyEvO1xuICB2YXIgTkdfREVGRVJfQk9PVFNUUkFQID0gL15OR19ERUZFUl9CT09UU1RSQVAhLztcblxuICBpZiAod2luZG93ICYmIE5HX0VOQUJMRV9ERUJVR19JTkZPLnRlc3Qod2luZG93Lm5hbWUpKSB7XG4gICAgY29uZmlnLmRlYnVnSW5mb0VuYWJsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5uYW1lID0gd2luZG93Lm5hbWUucmVwbGFjZShOR19FTkFCTEVfREVCVUdfSU5GTywgJycpO1xuICB9XG5cbiAgaWYgKHdpbmRvdyAmJiAhTkdfREVGRVJfQk9PVFNUUkFQLnRlc3Qod2luZG93Lm5hbWUpKSB7XG4gICAgcmV0dXJuIGRvQm9vdHN0cmFwKCk7XG4gIH1cblxuICB3aW5kb3cubmFtZSA9IHdpbmRvdy5uYW1lLnJlcGxhY2UoTkdfREVGRVJfQk9PVFNUUkFQLCAnJyk7XG4gIGFuZ3VsYXIucmVzdW1lQm9vdHN0cmFwID0gZnVuY3Rpb24oZXh0cmFNb2R1bGVzKSB7XG4gICAgZm9yRWFjaChleHRyYU1vZHVsZXMsIGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgICAgbW9kdWxlcy5wdXNoKG1vZHVsZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRvQm9vdHN0cmFwKCk7XG4gIH07XG5cbiAgaWYgKGlzRnVuY3Rpb24oYW5ndWxhci5yZXN1bWVEZWZlcnJlZEJvb3RzdHJhcCkpIHtcbiAgICBhbmd1bGFyLnJlc3VtZURlZmVycmVkQm9vdHN0cmFwKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIucmVsb2FkV2l0aERlYnVnSW5mb1xuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhpcyBmdW5jdGlvbiB0byByZWxvYWQgdGhlIGN1cnJlbnQgYXBwbGljYXRpb24gd2l0aCBkZWJ1ZyBpbmZvcm1hdGlvbiB0dXJuZWQgb24uXG4gKiBUaGlzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBhIGNhbGwgdG8gYCRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZChmYWxzZSlgLlxuICpcbiAqIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkZWJ1Z0luZm9FbmFibGVkfSBmb3IgbW9yZS5cbiAqL1xuZnVuY3Rpb24gcmVsb2FkV2l0aERlYnVnSW5mbygpIHtcbiAgd2luZG93Lm5hbWUgPSAnTkdfRU5BQkxFX0RFQlVHX0lORk8hJyArIHdpbmRvdy5uYW1lO1xuICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG59XG5cbi8qKlxuICogQG5hbWUgYW5ndWxhci5nZXRUZXN0YWJpbGl0eVxuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIHRlc3RhYmlsaXR5IHNlcnZpY2UgZm9yIHRoZSBpbnN0YW5jZSBvZiBBbmd1bGFyIG9uIHRoZSBnaXZlblxuICogZWxlbWVudC5cbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCBET00gZWxlbWVudCB3aGljaCBpcyB0aGUgcm9vdCBvZiBhbmd1bGFyIGFwcGxpY2F0aW9uLlxuICovXG5mdW5jdGlvbiBnZXRUZXN0YWJpbGl0eShyb290RWxlbWVudCkge1xuICB2YXIgaW5qZWN0b3IgPSBhbmd1bGFyLmVsZW1lbnQocm9vdEVsZW1lbnQpLmluamVjdG9yKCk7XG4gIGlmICghaW5qZWN0b3IpIHtcbiAgICB0aHJvdyBuZ01pbkVycigndGVzdCcsXG4gICAgICAnbm8gaW5qZWN0b3IgZm91bmQgZm9yIGVsZW1lbnQgYXJndW1lbnQgdG8gZ2V0VGVzdGFiaWxpdHknKTtcbiAgfVxuICByZXR1cm4gaW5qZWN0b3IuZ2V0KCckJHRlc3RhYmlsaXR5Jyk7XG59XG5cbnZhciBTTkFLRV9DQVNFX1JFR0VYUCA9IC9bQS1aXS9nO1xuZnVuY3Rpb24gc25ha2VfY2FzZShuYW1lLCBzZXBhcmF0b3IpIHtcbiAgc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8ICdfJztcbiAgcmV0dXJuIG5hbWUucmVwbGFjZShTTkFLRV9DQVNFX1JFR0VYUCwgZnVuY3Rpb24obGV0dGVyLCBwb3MpIHtcbiAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpO1xuICB9KTtcbn1cblxudmFyIGJpbmRKUXVlcnlGaXJlZCA9IGZhbHNlO1xuZnVuY3Rpb24gYmluZEpRdWVyeSgpIHtcbiAgdmFyIG9yaWdpbmFsQ2xlYW5EYXRhO1xuXG4gIGlmIChiaW5kSlF1ZXJ5RmlyZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBiaW5kIHRvIGpRdWVyeSBpZiBwcmVzZW50O1xuICB2YXIganFOYW1lID0ganEoKTtcbiAgalF1ZXJ5ID0gaXNVbmRlZmluZWQoanFOYW1lKSA/IHdpbmRvdy5qUXVlcnkgOiAgIC8vIHVzZSBqUXVlcnkgKGlmIHByZXNlbnQpXG4gICAgICAgICAgICFqcU5hbWUgICAgICAgICAgICAgPyB1bmRlZmluZWQgICAgIDogICAvLyB1c2UganFMaXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dbanFOYW1lXTsgICAvLyB1c2UgalF1ZXJ5IHNwZWNpZmllZCBieSBgbmdKcWBcblxuICAvLyBVc2UgalF1ZXJ5IGlmIGl0IGV4aXN0cyB3aXRoIHByb3BlciBmdW5jdGlvbmFsaXR5LCBvdGhlcndpc2UgZGVmYXVsdCB0byB1cy5cbiAgLy8gQW5ndWxhciAxLjIrIHJlcXVpcmVzIGpRdWVyeSAxLjcrIGZvciBvbigpL29mZigpIHN1cHBvcnQuXG4gIC8vIEFuZ3VsYXIgMS4zKyB0ZWNobmljYWxseSByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgMi4xKyBidXQgaXQgbWF5IHdvcmsgd2l0aCBvbGRlclxuICAvLyB2ZXJzaW9ucy4gSXQgd2lsbCBub3Qgd29yayBmb3Igc3VyZSB3aXRoIGpRdWVyeSA8MS43LCB0aG91Z2guXG4gIGlmIChqUXVlcnkgJiYgalF1ZXJ5LmZuLm9uKSB7XG4gICAganFMaXRlID0galF1ZXJ5O1xuICAgIGV4dGVuZChqUXVlcnkuZm4sIHtcbiAgICAgIHNjb3BlOiBKUUxpdGVQcm90b3R5cGUuc2NvcGUsXG4gICAgICBpc29sYXRlU2NvcGU6IEpRTGl0ZVByb3RvdHlwZS5pc29sYXRlU2NvcGUsXG4gICAgICBjb250cm9sbGVyOiAvKiogQHR5cGUgez99ICovIChKUUxpdGVQcm90b3R5cGUpLmNvbnRyb2xsZXIsXG4gICAgICBpbmplY3RvcjogSlFMaXRlUHJvdG90eXBlLmluamVjdG9yLFxuICAgICAgaW5oZXJpdGVkRGF0YTogSlFMaXRlUHJvdG90eXBlLmluaGVyaXRlZERhdGFcbiAgICB9KTtcblxuICAgIC8vIEFsbCBub2RlcyByZW1vdmVkIGZyb20gdGhlIERPTSB2aWEgdmFyaW91cyBqUXVlcnkgQVBJcyBsaWtlIC5yZW1vdmUoKVxuICAgIC8vIGFyZSBwYXNzZWQgdGhyb3VnaCBqUXVlcnkuY2xlYW5EYXRhLiBNb25rZXktcGF0Y2ggdGhpcyBtZXRob2QgdG8gZmlyZVxuICAgIC8vIHRoZSAkZGVzdHJveSBldmVudCBvbiBhbGwgcmVtb3ZlZCBub2Rlcy5cbiAgICBvcmlnaW5hbENsZWFuRGF0YSA9IGpRdWVyeS5jbGVhbkRhdGE7XG4gICAgalF1ZXJ5LmNsZWFuRGF0YSA9IGZ1bmN0aW9uKGVsZW1zKSB7XG4gICAgICB2YXIgZXZlbnRzO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGVsZW07IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKykge1xuICAgICAgICBldmVudHMgPSBqUXVlcnkuX2RhdGEoZWxlbSwgJ2V2ZW50cycpO1xuICAgICAgICBpZiAoZXZlbnRzICYmIGV2ZW50cy4kZGVzdHJveSkge1xuICAgICAgICAgIGpRdWVyeShlbGVtKS50cmlnZ2VySGFuZGxlcignJGRlc3Ryb3knKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3JpZ2luYWxDbGVhbkRhdGEoZWxlbXMpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAganFMaXRlID0gSlFMaXRlO1xuICB9XG5cbiAgYW5ndWxhci5lbGVtZW50ID0ganFMaXRlO1xuXG4gIC8vIFByZXZlbnQgZG91YmxlLXByb3h5aW5nLlxuICBiaW5kSlF1ZXJ5RmlyZWQgPSB0cnVlO1xufVxuXG4vKipcbiAqIHRocm93IGVycm9yIGlmIHRoZSBhcmd1bWVudCBpcyBmYWxzeS5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0QXJnKGFyZywgbmFtZSwgcmVhc29uKSB7XG4gIGlmICghYXJnKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ2FyZXEnLCAnQXJndW1lbnQgXFwnezB9XFwnIGlzIHsxfScsIChuYW1lIHx8ICc/JyksIChyZWFzb24gfHwgJ3JlcXVpcmVkJykpO1xuICB9XG4gIHJldHVybiBhcmc7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEFyZ0ZuKGFyZywgbmFtZSwgYWNjZXB0QXJyYXlBbm5vdGF0aW9uKSB7XG4gIGlmIChhY2NlcHRBcnJheUFubm90YXRpb24gJiYgaXNBcnJheShhcmcpKSB7XG4gICAgICBhcmcgPSBhcmdbYXJnLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgYXNzZXJ0QXJnKGlzRnVuY3Rpb24oYXJnKSwgbmFtZSwgJ25vdCBhIGZ1bmN0aW9uLCBnb3QgJyArXG4gICAgICAoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnID8gYXJnLmNvbnN0cnVjdG9yLm5hbWUgfHwgJ09iamVjdCcgOiB0eXBlb2YgYXJnKSk7XG4gIHJldHVybiBhcmc7XG59XG5cbi8qKlxuICogdGhyb3cgZXJyb3IgaWYgdGhlIG5hbWUgZ2l2ZW4gaXMgaGFzT3duUHJvcGVydHlcbiAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSAgICB0aGUgbmFtZSB0byB0ZXN0XG4gKiBAcGFyYW0gIHtTdHJpbmd9IGNvbnRleHQgdGhlIGNvbnRleHQgaW4gd2hpY2ggdGhlIG5hbWUgaXMgdXNlZCwgc3VjaCBhcyBtb2R1bGUgb3IgZGlyZWN0aXZlXG4gKi9cbmZ1bmN0aW9uIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsIGNvbnRleHQpIHtcbiAgaWYgKG5hbWUgPT09ICdoYXNPd25Qcm9wZXJ0eScpIHtcbiAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZScsIGNvbnRleHQpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSB2YWx1ZSBhY2Nlc3NpYmxlIGZyb20gdGhlIG9iamVjdCBieSBwYXRoLiBBbnkgdW5kZWZpbmVkIHRyYXZlcnNhbHMgYXJlIGlnbm9yZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogc3RhcnRpbmcgb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBwYXRoIHRvIHRyYXZlcnNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtiaW5kRm5Ub1Njb3BlPXRydWVdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB2YWx1ZSBhcyBhY2Nlc3NpYmxlIGJ5IHBhdGhcbiAqL1xuLy9UT0RPKG1pc2tvKTogdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZW1vdmVkXG5mdW5jdGlvbiBnZXR0ZXIob2JqLCBwYXRoLCBiaW5kRm5Ub1Njb3BlKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIG9iajtcbiAgdmFyIGtleXMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHZhciBrZXk7XG4gIHZhciBsYXN0SW5zdGFuY2UgPSBvYmo7XG4gIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAob2JqKSB7XG4gICAgICBvYmogPSAobGFzdEluc3RhbmNlID0gb2JqKVtrZXldO1xuICAgIH1cbiAgfVxuICBpZiAoIWJpbmRGblRvU2NvcGUgJiYgaXNGdW5jdGlvbihvYmopKSB7XG4gICAgcmV0dXJuIGJpbmQobGFzdEluc3RhbmNlLCBvYmopO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBET00gc2libGluZ3MgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3Qgbm9kZSBpbiB0aGUgZ2l2ZW4gYXJyYXkuXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBsaWtlIG9iamVjdFxuICogQHJldHVybnMge0FycmF5fSB0aGUgaW5wdXR0ZWQgb2JqZWN0IG9yIGEganFMaXRlIGNvbGxlY3Rpb24gY29udGFpbmluZyB0aGUgbm9kZXNcbiAqL1xuZnVuY3Rpb24gZ2V0QmxvY2tOb2Rlcyhub2Rlcykge1xuICAvLyBUT0RPKHBlcmYpOiB1cGRhdGUgYG5vZGVzYCBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG9iamVjdD9cbiAgdmFyIG5vZGUgPSBub2Rlc1swXTtcbiAgdmFyIGVuZE5vZGUgPSBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXTtcbiAgdmFyIGJsb2NrTm9kZXM7XG5cbiAgZm9yICh2YXIgaSA9IDE7IG5vZGUgIT09IGVuZE5vZGUgJiYgKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKTsgaSsrKSB7XG4gICAgaWYgKGJsb2NrTm9kZXMgfHwgbm9kZXNbaV0gIT09IG5vZGUpIHtcbiAgICAgIGlmICghYmxvY2tOb2Rlcykge1xuICAgICAgICBibG9ja05vZGVzID0ganFMaXRlKHNsaWNlLmNhbGwobm9kZXMsIDAsIGkpKTtcbiAgICAgIH1cbiAgICAgIGJsb2NrTm9kZXMucHVzaChub2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYmxvY2tOb2RlcyB8fCBub2Rlcztcbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGhvdXQgYSBwcm90b3R5cGUuIFRoaXMgb2JqZWN0IGlzIHVzZWZ1bCBmb3IgbG9va3VwIHdpdGhvdXQgaGF2aW5nIHRvXG4gKiBndWFyZCBhZ2FpbnN0IHByb3RvdHlwaWNhbGx5IGluaGVyaXRlZCBwcm9wZXJ0aWVzIHZpYSBoYXNPd25Qcm9wZXJ0eS5cbiAqXG4gKiBSZWxhdGVkIG1pY3JvLWJlbmNobWFya3M6XG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL29iamVjdC1jcmVhdGUyXG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL3Byb3RvLW1hcC1sb29rdXAvMlxuICogLSBodHRwOi8vanNwZXJmLmNvbS9mb3ItaW4tdnMtb2JqZWN0LWtleXMyXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7IC8vIG51bGwgfHwgdW5kZWZpbmVkXG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGhhc0N1c3RvbVRvU3RyaW5nKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgIWlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB0b0pzb24odmFsdWUpO1xuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgTk9ERV9UWVBFX0VMRU1FTlQgPSAxO1xudmFyIE5PREVfVFlQRV9BVFRSSUJVVEUgPSAyO1xudmFyIE5PREVfVFlQRV9URVhUID0gMztcbnZhciBOT0RFX1RZUEVfQ09NTUVOVCA9IDg7XG52YXIgTk9ERV9UWVBFX0RPQ1VNRU5UID0gOTtcbnZhciBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgPSAxMTtcblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgYW5ndWxhci5Nb2R1bGVcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEludGVyZmFjZSBmb3IgY29uZmlndXJpbmcgYW5ndWxhciB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlc30uXG4gKi9cblxuZnVuY3Rpb24gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KSB7XG5cbiAgdmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG4gIHZhciBuZ01pbkVyciA9IG1pbkVycignbmcnKTtcblxuICBmdW5jdGlvbiBlbnN1cmUob2JqLCBuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIG9ialtuYW1lXSB8fCAob2JqW25hbWVdID0gZmFjdG9yeSgpKTtcbiAgfVxuXG4gIHZhciBhbmd1bGFyID0gZW5zdXJlKHdpbmRvdywgJ2FuZ3VsYXInLCBPYmplY3QpO1xuXG4gIC8vIFdlIG5lZWQgdG8gZXhwb3NlIGBhbmd1bGFyLiQkbWluRXJyYCB0byBtb2R1bGVzIHN1Y2ggYXMgYG5nUmVzb3VyY2VgIHRoYXQgcmVmZXJlbmNlIGl0IGR1cmluZyBib290c3RyYXBcbiAgYW5ndWxhci4kJG1pbkVyciA9IGFuZ3VsYXIuJCRtaW5FcnIgfHwgbWluRXJyO1xuXG4gIHJldHVybiBlbnN1cmUoYW5ndWxhciwgJ21vZHVsZScsIGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGFuZ3VsYXIuTW9kdWxlPn0gKi9cbiAgICB2YXIgbW9kdWxlcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgYW5ndWxhci5tb2R1bGVcbiAgICAgKiBAbW9kdWxlIG5nXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBUaGUgYGFuZ3VsYXIubW9kdWxlYCBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcsIHJlZ2lzdGVyaW5nIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXJcbiAgICAgKiBtb2R1bGVzLlxuICAgICAqIEFsbCBtb2R1bGVzIChhbmd1bGFyIGNvcmUgb3IgM3JkIHBhcnR5KSB0aGF0IHNob3VsZCBiZSBhdmFpbGFibGUgdG8gYW4gYXBwbGljYXRpb24gbXVzdCBiZVxuICAgICAqIHJlZ2lzdGVyZWQgdXNpbmcgdGhpcyBtZWNoYW5pc20uXG4gICAgICpcbiAgICAgKiBQYXNzaW5nIG9uZSBhcmd1bWVudCByZXRyaWV2ZXMgYW4gZXhpc3Rpbmcge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfSxcbiAgICAgKiB3aGVyZWFzIHBhc3NpbmcgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCBjcmVhdGVzIGEgbmV3IHtAbGluayBhbmd1bGFyLk1vZHVsZX1cbiAgICAgKlxuICAgICAqXG4gICAgICogIyBNb2R1bGVcbiAgICAgKlxuICAgICAqIEEgbW9kdWxlIGlzIGEgY29sbGVjdGlvbiBvZiBzZXJ2aWNlcywgZGlyZWN0aXZlcywgY29udHJvbGxlcnMsIGZpbHRlcnMsIGFuZCBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLlxuICAgICAqIGBhbmd1bGFyLm1vZHVsZWAgaXMgdXNlZCB0byBjb25maWd1cmUgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBDcmVhdGUgYSBuZXcgbW9kdWxlXG4gICAgICogdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJywgW10pO1xuICAgICAqXG4gICAgICogLy8gcmVnaXN0ZXIgYSBuZXcgc2VydmljZVxuICAgICAqIG15TW9kdWxlLnZhbHVlKCdhcHBOYW1lJywgJ015Q29vbEFwcCcpO1xuICAgICAqXG4gICAgICogLy8gY29uZmlndXJlIGV4aXN0aW5nIHNlcnZpY2VzIGluc2lkZSBpbml0aWFsaXphdGlvbiBibG9ja3MuXG4gICAgICogbXlNb2R1bGUuY29uZmlnKFsnJGxvY2F0aW9uUHJvdmlkZXInLCBmdW5jdGlvbigkbG9jYXRpb25Qcm92aWRlcikge1xuICAgICAqICAgLy8gQ29uZmlndXJlIGV4aXN0aW5nIHByb3ZpZGVyc1xuICAgICAqICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnIScpO1xuICAgICAqIH1dKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZW4geW91IGNhbiBjcmVhdGUgYW4gaW5qZWN0b3IgYW5kIGxvYWQgeW91ciBtb2R1bGVzIGxpa2UgdGhpczpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogdmFyIGluamVjdG9yID0gYW5ndWxhci5pbmplY3RvcihbJ25nJywgJ215TW9kdWxlJ10pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBIb3dldmVyIGl0J3MgbW9yZSBsaWtlbHkgdGhhdCB5b3UnbGwganVzdCB1c2VcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfSBvclxuICAgICAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gdG8gc2ltcGxpZnkgdGhpcyBwcm9jZXNzIGZvciB5b3UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byBjcmVhdGUgb3IgcmV0cmlldmUuXG4gICAgICogQHBhcmFtIHshQXJyYXkuPHN0cmluZz49fSByZXF1aXJlcyBJZiBzcGVjaWZpZWQgdGhlbiBuZXcgbW9kdWxlIGlzIGJlaW5nIGNyZWF0ZWQuIElmXG4gICAgICogICAgICAgIHVuc3BlY2lmaWVkIHRoZW4gdGhlIG1vZHVsZSBpcyBiZWluZyByZXRyaWV2ZWQgZm9yIGZ1cnRoZXIgY29uZmlndXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gY29uZmlnRm4gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmdW5jdGlvbiBmb3IgdGhlIG1vZHVsZS4gU2FtZSBhc1xuICAgICAqICAgICAgICB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnIE1vZHVsZSNjb25maWcoKX0uXG4gICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfSBuZXcgbW9kdWxlIHdpdGggdGhlIHtAbGluayBhbmd1bGFyLk1vZHVsZX0gYXBpLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBtb2R1bGUobmFtZSwgcmVxdWlyZXMsIGNvbmZpZ0ZuKSB7XG5cbiAgICAgIHZhciBpbmZvID0ge307XG5cbiAgICAgIHZhciBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdoYXNPd25Qcm9wZXJ0eScpIHtcbiAgICAgICAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZScsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnbW9kdWxlJyk7XG4gICAgICBpZiAocmVxdWlyZXMgJiYgbW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBtb2R1bGVzW25hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbnN1cmUobW9kdWxlcywgbmFtZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghcmVxdWlyZXMpIHtcbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ25vbW9kJywgJ01vZHVsZSBcXCd7MH1cXCcgaXMgbm90IGF2YWlsYWJsZSEgWW91IGVpdGhlciBtaXNzcGVsbGVkICcgK1xuICAgICAgICAgICAgICd0aGUgbW9kdWxlIG5hbWUgb3IgZm9yZ290IHRvIGxvYWQgaXQuIElmIHJlZ2lzdGVyaW5nIGEgbW9kdWxlIGVuc3VyZSB0aGF0IHlvdSAnICtcbiAgICAgICAgICAgICAnc3BlY2lmeSB0aGUgZGVwZW5kZW5jaWVzIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuJywgbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48QXJyYXkuPCo+Pn0gKi9cbiAgICAgICAgdmFyIGludm9rZVF1ZXVlID0gW107XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi9cbiAgICAgICAgdmFyIGNvbmZpZ0Jsb2NrcyA9IFtdO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxGdW5jdGlvbj59ICovXG4gICAgICAgIHZhciBydW5CbG9ja3MgPSBbXTtcblxuICAgICAgICB2YXIgY29uZmlnID0gaW52b2tlTGF0ZXIoJyRpbmplY3RvcicsICdpbnZva2UnLCAncHVzaCcsIGNvbmZpZ0Jsb2Nrcyk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHthbmd1bGFyLk1vZHVsZX0gKi9cbiAgICAgICAgdmFyIG1vZHVsZUluc3RhbmNlID0ge1xuICAgICAgICAgIC8vIFByaXZhdGUgc3RhdGVcbiAgICAgICAgICBfaW52b2tlUXVldWU6IGludm9rZVF1ZXVlLFxuICAgICAgICAgIF9jb25maWdCbG9ja3M6IGNvbmZpZ0Jsb2NrcyxcbiAgICAgICAgICBfcnVuQmxvY2tzOiBydW5CbG9ja3MsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjaW5mb1xuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gaW5mbyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgbW9kdWxlXG4gICAgICAgICAgICogQHJldHVybnMge09iamVjdHxNb2R1bGV9IFRoZSBjdXJyZW50IGluZm8gb2JqZWN0IGZvciB0aGlzIG1vZHVsZSBpZiBjYWxsZWQgYXMgYSBnZXR0ZXIsXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGB0aGlzYCBpZiBjYWxsZWQgYXMgYSBzZXR0ZXIuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBSZWFkIGFuZCB3cml0ZSBjdXN0b20gaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBtb2R1bGUuXG4gICAgICAgICAgICogRm9yIGV4YW1wbGUgeW91IGNvdWxkIHB1dCB0aGUgdmVyc2lvbiBvZiB0aGUgbW9kdWxlIGluIGhlcmUuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBgYGBqc1xuICAgICAgICAgICAqIGFuZ3VsYXIubW9kdWxlKCdteU1vZHVsZScsIFtdKS5pbmZvKHsgdmVyc2lvbjogJzEuMC4wJyB9KTtcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFRoZSB2ZXJzaW9uIGNvdWxkIHRoZW4gYmUgcmVhZCBiYWNrIG91dCBieSBhY2Nlc3NpbmcgdGhlIG1vZHVsZSBlbHNld2hlcmU6XG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKiB2YXIgdmVyc2lvbiA9IGFuZ3VsYXIubW9kdWxlKCdteU1vZHVsZScpLmluZm8oKS52ZXJzaW9uO1xuICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAqXG4gICAgICAgICAgICogWW91IGNhbiBhbHNvIHJldHJpZXZlIHRoaXMgaW5mb3JtYXRpb24gZHVyaW5nIHJ1bnRpbWUgdmlhIHRoZVxuICAgICAgICAgICAqIHtAbGluayAkaW5qZWN0b3IjbW9kdWxlcyBgJGluamVjdG9yLm1vZHVsZXNgfSBwcm9wZXJ0eTpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIGBgYGpzXG4gICAgICAgICAgICogdmFyIHZlcnNpb24gPSAkaW5qZWN0b3IubW9kdWxlc1snbXlNb2R1bGUnXS5pbmZvKCkudmVyc2lvbjtcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBpbmZvOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHRocm93IG5nTWluRXJyKCdhb2JqJywgJ0FyZ3VtZW50IFxcJ3swfVxcJyBtdXN0IGJlIGFuIG9iamVjdCcsICd2YWx1ZScpO1xuICAgICAgICAgICAgICBpbmZvID0gdmFsdWU7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3JlcXVpcmVzXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogSG9sZHMgdGhlIGxpc3Qgb2YgbW9kdWxlcyB3aGljaCB0aGUgaW5qZWN0b3Igd2lsbCBsb2FkIGJlZm9yZSB0aGUgY3VycmVudCBtb2R1bGUgaXNcbiAgICAgICAgICAgKiBsb2FkZWQuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcmVxdWlyZXM6IHJlcXVpcmVzLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjbmFtZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIE5hbWUgb2YgdGhlIG1vZHVsZS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBuYW1lOiBuYW1lLFxuXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcHJvdmlkZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJUeXBlIENvbnN0cnVjdGlvbiBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZVxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBwcm92aWRlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdwcm92aWRlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZhY3RvcnlcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJGdW5jdGlvbiBGdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5ICRwcm92aWRlLmZhY3RvcnkoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgZmFjdG9yeTogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdmYWN0b3J5JyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjc2VydmljZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBBIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnN0YW50aWF0ZWQuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBzZXJ2aWNlOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ3NlcnZpY2UnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSN2YWx1ZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBTZXJ2aWNlIGluc3RhbmNlIG9iamVjdC5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgJHByb3ZpZGUudmFsdWUoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgdmFsdWU6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICd2YWx1ZScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnN0YW50XG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGNvbnN0YW50IG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBDb25zdGFudCB2YWx1ZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBCZWNhdXNlIHRoZSBjb25zdGFudHMgYXJlIGZpeGVkLCB0aGV5IGdldCBhcHBsaWVkIGJlZm9yZSBvdGhlciBwcm92aWRlIG1ldGhvZHMuXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50ICRwcm92aWRlLmNvbnN0YW50KCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0YW50OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnY29uc3RhbnQnLCAndW5zaGlmdCcpLFxuXG4gICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNkZWNvcmF0b3JcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGVjb3JGbiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBzZXJ2aWNlIG5lZWRzIHRvIGJlXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgJHByb3ZpZGUuZGVjb3JhdG9yKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGRlY29yYXRvcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdkZWNvcmF0b3InLCBjb25maWdCbG9ja3MpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2FuaW1hdGlvblxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBhbmltYXRpb24gbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFuaW1hdGlvbkZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGFuXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiAqKk5PVEUqKjogYW5pbWF0aW9ucyB0YWtlIGVmZmVjdCBvbmx5IGlmIHRoZSAqKm5nQW5pbWF0ZSoqIG1vZHVsZSBpcyBsb2FkZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIERlZmluZXMgYW4gYW5pbWF0aW9uIGhvb2sgdGhhdCBjYW4gYmUgbGF0ZXIgdXNlZCB3aXRoXG4gICAgICAgICAgICoge0BsaW5rICRhbmltYXRlICRhbmltYXRlfSBzZXJ2aWNlIGFuZCBkaXJlY3RpdmVzIHRoYXQgdXNlIHRoaXMgc2VydmljZS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIGBgYGpzXG4gICAgICAgICAgICogbW9kdWxlLmFuaW1hdGlvbignLmFuaW1hdGlvbi1uYW1lJywgZnVuY3Rpb24oJGluamVjdDEsICRpbmplY3QyKSB7XG4gICAgICAgICAgICogICByZXR1cm4ge1xuICAgICAgICAgICAqICAgICBldmVudE5hbWUgOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7XG4gICAgICAgICAgICogICAgICAgLy9jb2RlIHRvIHJ1biB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICAgICAgICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gY2FuY2VsbGF0aW9uRnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICogICAgICAgfVxuICAgICAgICAgICAqICAgICB9XG4gICAgICAgICAgICogICB9XG4gICAgICAgICAgICogfSlcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlciAkYW5pbWF0ZVByb3ZpZGVyLnJlZ2lzdGVyKCl9IGFuZFxuICAgICAgICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICAgICAgICovXG4gICAgICAgICAgYW5pbWF0aW9uOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRhbmltYXRlUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmaWx0ZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmlsdGVyIG5hbWUgLSB0aGlzIG11c3QgYmUgYSB2YWxpZCBhbmd1bGFyIGV4cHJlc3Npb24gaWRlbnRpZmllclxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbHRlckZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGZpbHRlci5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRmaWx0ZXJQcm92aWRlciNyZWdpc3RlciAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgICAgICAgICAqICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gICAgICAgICAgICogTmFtZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMsIHN1Y2ggYXMgaHlwaGVucyBhbmQgZG90cywgYXJlIG5vdCBhbGxvd2VkLiBJZiB5b3Ugd2lzaCB0byBuYW1lc3BhY2VcbiAgICAgICAgICAgKiB5b3VyIGZpbHRlcnMsIHRoZW4geW91IGNhbiB1c2UgY2FwaXRhbGl6YXRpb24gKGBteWFwcFN1YnNlY3Rpb25GaWx0ZXJ4YCkgb3IgdW5kZXJzY29yZXNcbiAgICAgICAgICAgKiAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICAgICAgICAgICAqIDwvZGl2PlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZpbHRlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckZmlsdGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb250cm9sbGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlXG4gICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgY29uc3RydWN0b3JzLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyICRjb250cm9sbGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29udHJvbGxlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckY29udHJvbGxlclByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZGlyZWN0aXZlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBEaXJlY3RpdmUgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZVxuICAgICAgICAgICAqICAgIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZhY3Rvcmllcy5cbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXJlY3RpdmVGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZlxuICAgICAgICAgICAqIGRpcmVjdGl2ZXMuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBkaXJlY3RpdmU6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGNvbXBpbGVQcm92aWRlcicsICdkaXJlY3RpdmUnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb21wb25lbnRcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGluIGNhbWVsLWNhc2UgKGkuZS4gbXlDb21wIHdoaWNoIHdpbGwgbWF0Y2ggYXMgbXktY29tcClcbiAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBDb21wb25lbnQgZGVmaW5pdGlvbiBvYmplY3QgKGEgc2ltcGxpZmllZFxuICAgICAgICAgICAqICAgIHtAbGluayBuZy4kY29tcGlsZSNkaXJlY3RpdmUtZGVmaW5pdGlvbi1vYmplY3QgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0fSlcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNjb21wb25lbnQgJGNvbXBpbGVQcm92aWRlci5jb21wb25lbnQoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29tcG9uZW50OiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRjb21waWxlUHJvdmlkZXInLCAnY29tcG9uZW50JyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uZmlnXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZ0ZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBvbiBtb2R1bGUgbG9hZC4gVXNlZnVsIGZvciBzZXJ2aWNlXG4gICAgICAgICAgICogICAgY29uZmlndXJhdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gcmVnaXN0ZXIgd29yayB3aGljaCBuZWVkcyB0byBiZSBwZXJmb3JtZWQgb24gbW9kdWxlIGxvYWRpbmcuXG4gICAgICAgICAgICogRm9yIG1vcmUgYWJvdXQgaG93IHRvIGNvbmZpZ3VyZSBzZXJ2aWNlcywgc2VlXG4gICAgICAgICAgICoge0BsaW5rIHByb3ZpZGVycyNwcm92aWRlci1yZWNpcGUgUHJvdmlkZXIgUmVjaXBlfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25maWc6IGNvbmZpZyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNydW5cbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW5pdGlhbGl6YXRpb25GbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gYWZ0ZXIgaW5qZWN0b3IgY3JlYXRpb24uXG4gICAgICAgICAgICogICAgVXNlZnVsIGZvciBhcHBsaWNhdGlvbiBpbml0aWFsaXphdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gcmVnaXN0ZXIgd29yayB3aGljaCBzaG91bGQgYmUgcGVyZm9ybWVkIHdoZW4gdGhlIGluamVjdG9yIGlzIGRvbmVcbiAgICAgICAgICAgKiBsb2FkaW5nIGFsbCBtb2R1bGVzLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJ1bjogZnVuY3Rpb24oYmxvY2spIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoY29uZmlnRm4pIHtcbiAgICAgICAgICBjb25maWcoY29uZmlnRm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvdmlkZXJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZz19IGluc2VydE1ldGhvZFxuICAgICAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5Nb2R1bGV9XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBpbnZva2VMYXRlcihwcm92aWRlciwgbWV0aG9kLCBpbnNlcnRNZXRob2QsIHF1ZXVlKSB7XG4gICAgICAgICAgaWYgKCFxdWV1ZSkgcXVldWUgPSBpbnZva2VRdWV1ZTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBxdWV1ZVtpbnNlcnRNZXRob2QgfHwgJ3B1c2gnXShbcHJvdmlkZXIsIG1ldGhvZCwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvdmlkZXJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICAgICAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5Nb2R1bGV9XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUocHJvdmlkZXIsIG1ldGhvZCwgcXVldWUpIHtcbiAgICAgICAgICBpZiAoIXF1ZXVlKSBxdWV1ZSA9IGludm9rZVF1ZXVlO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZWNpcGVOYW1lLCBmYWN0b3J5RnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChmYWN0b3J5RnVuY3Rpb24gJiYgaXNGdW5jdGlvbihmYWN0b3J5RnVuY3Rpb24pKSBmYWN0b3J5RnVuY3Rpb24uJCRtb2R1bGVOYW1lID0gbmFtZTtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goW3Byb3ZpZGVyLCBtZXRob2QsIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG59XG5cbi8qIGdsb2JhbCBzaGFsbG93Q29weTogdHJ1ZSAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzaGFsbG93IGNvcHkgb2YgYW4gb2JqZWN0LCBhbiBhcnJheSBvciBhIHByaW1pdGl2ZS5cbiAqXG4gKiBBc3N1bWVzIHRoYXQgdGhlcmUgYXJlIG5vIHByb3RvIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dDb3B5KHNyYywgZHN0KSB7XG4gIGlmIChpc0FycmF5KHNyYykpIHtcbiAgICBkc3QgPSBkc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzcmMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgZHN0W2ldID0gc3JjW2ldO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChzcmMpKSB7XG4gICAgZHN0ID0gZHN0IHx8IHt9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgICAgaWYgKCEoa2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykpIHtcbiAgICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZHN0IHx8IHNyYztcbn1cblxuLyogZXhwb3J0ZWQgdG9EZWJ1Z1N0cmluZyAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemVPYmplY3Qob2JqLCBtYXhEZXB0aCkge1xuICB2YXIgc2VlbiA9IFtdO1xuXG4gIC8vIFRoZXJlIGlzIG5vIGRpcmVjdCB3YXkgdG8gc3RyaW5naWZ5IG9iamVjdCB1bnRpbCByZWFjaGluZyBhIHNwZWNpZmljIGRlcHRoXG4gIC8vIGFuZCBhIHZlcnkgZGVlcCBvYmplY3QgY2FuIGNhdXNlIGEgcGVyZm9ybWFuY2UgaXNzdWUsIHNvIHdlIGNvcHkgdGhlIG9iamVjdFxuICAvLyBiYXNlZCBvbiB0aGlzIHNwZWNpZmljIGRlcHRoIGFuZCB0aGVuIHN0cmluZ2lmeSBpdC5cbiAgaWYgKGlzVmFsaWRPYmplY3RNYXhEZXB0aChtYXhEZXB0aCkpIHtcbiAgICAvLyBUaGlzIGZpbGUgaXMgYWxzbyBpbmNsdWRlZCBpbiBgYW5ndWxhci1sb2FkZXJgLCBzbyBgY29weSgpYCBtaWdodCBub3QgYWx3YXlzIGJlIGF2YWlsYWJsZSBpblxuICAgIC8vIHRoZSBjbG9zdXJlLiBUaGVyZWZvcmUsIGl0IGlzIGxhemlseSByZXRyaWV2ZWQgYXMgYGFuZ3VsYXIuY29weSgpYCB3aGVuIG5lZWRlZC5cbiAgICBvYmogPSBhbmd1bGFyLmNvcHkob2JqLCBudWxsLCBtYXhEZXB0aCk7XG4gIH1cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZnVuY3Rpb24oa2V5LCB2YWwpIHtcbiAgICB2YWwgPSB0b0pzb25SZXBsYWNlcihrZXksIHZhbCk7XG4gICAgaWYgKGlzT2JqZWN0KHZhbCkpIHtcblxuICAgICAgaWYgKHNlZW4uaW5kZXhPZih2YWwpID49IDApIHJldHVybiAnLi4uJztcblxuICAgICAgc2Vlbi5wdXNoKHZhbCk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0b0RlYnVnU3RyaW5nKG9iaiwgbWF4RGVwdGgpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb2JqLnRvU3RyaW5nKCkucmVwbGFjZSgvIFxce1tcXHNcXFNdKiQvLCAnJyk7XG4gIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQob2JqKSkge1xuICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzZXJpYWxpemVPYmplY3Qob2JqLCBtYXhEZXB0aCk7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyogZ2xvYmFsIGFuZ3VsYXJNb2R1bGU6IHRydWUsXG4gIHZlcnNpb246IHRydWUsXG5cbiAgJENvbXBpbGVQcm92aWRlcixcblxuICBodG1sQW5jaG9yRGlyZWN0aXZlLFxuICBpbnB1dERpcmVjdGl2ZSxcbiAgaW5wdXREaXJlY3RpdmUsXG4gIGZvcm1EaXJlY3RpdmUsXG4gIHNjcmlwdERpcmVjdGl2ZSxcbiAgc2VsZWN0RGlyZWN0aXZlLFxuICBvcHRpb25EaXJlY3RpdmUsXG4gIG5nQmluZERpcmVjdGl2ZSxcbiAgbmdCaW5kSHRtbERpcmVjdGl2ZSxcbiAgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsXG4gIG5nQ2xhc3NEaXJlY3RpdmUsXG4gIG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICBuZ0NsYXNzT2RkRGlyZWN0aXZlLFxuICBuZ0Nsb2FrRGlyZWN0aXZlLFxuICBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsXG4gIG5nRm9ybURpcmVjdGl2ZSxcbiAgbmdIaWRlRGlyZWN0aXZlLFxuICBuZ0lmRGlyZWN0aXZlLFxuICBuZ0luY2x1ZGVEaXJlY3RpdmUsXG4gIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlLFxuICBuZ0luaXREaXJlY3RpdmUsXG4gIG5nTm9uQmluZGFibGVEaXJlY3RpdmUsXG4gIG5nUGx1cmFsaXplRGlyZWN0aXZlLFxuICBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgbmdTaG93RGlyZWN0aXZlLFxuICBuZ1N0eWxlRGlyZWN0aXZlLFxuICBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLFxuICBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gIG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgbmdUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICBuZ01vZGVsRGlyZWN0aXZlLFxuICBuZ0xpc3REaXJlY3RpdmUsXG4gIG5nQ2hhbmdlRGlyZWN0aXZlLFxuICBwYXR0ZXJuRGlyZWN0aXZlLFxuICBwYXR0ZXJuRGlyZWN0aXZlLFxuICByZXF1aXJlZERpcmVjdGl2ZSxcbiAgcmVxdWlyZWREaXJlY3RpdmUsXG4gIG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgbWlubGVuZ3RoRGlyZWN0aXZlLFxuICBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gIG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgbmdWYWx1ZURpcmVjdGl2ZSxcbiAgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUsXG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzLFxuICBuZ0V2ZW50RGlyZWN0aXZlcyxcblxuICAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXG4gICRBbmltYXRlUHJvdmlkZXIsXG4gICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyLFxuICAkJENvcmVBbmltYXRlSnNQcm92aWRlcixcbiAgJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIsXG4gICQkQW5pbWF0ZVJ1bm5lckZhY3RvcnlQcm92aWRlcixcbiAgJCRBbmltYXRlQXN5bmNSdW5GYWN0b3J5UHJvdmlkZXIsXG4gICRCcm93c2VyUHJvdmlkZXIsXG4gICRDYWNoZUZhY3RvcnlQcm92aWRlcixcbiAgJENvbnRyb2xsZXJQcm92aWRlcixcbiAgJERhdGVQcm92aWRlcixcbiAgJERvY3VtZW50UHJvdmlkZXIsXG4gICQkSXNEb2N1bWVudEhpZGRlblByb3ZpZGVyLFxuICAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLFxuICAkRmlsdGVyUHJvdmlkZXIsXG4gICQkRm9yY2VSZWZsb3dQcm92aWRlcixcbiAgJEludGVycG9sYXRlUHJvdmlkZXIsXG4gICRJbnRlcnZhbFByb3ZpZGVyLFxuICAkSHR0cFByb3ZpZGVyLFxuICAkSHR0cFBhcmFtU2VyaWFsaXplclByb3ZpZGVyLFxuICAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyLFxuICAkSHR0cEJhY2tlbmRQcm92aWRlcixcbiAgJHhockZhY3RvcnlQcm92aWRlcixcbiAgJGpzb25wQ2FsbGJhY2tzUHJvdmlkZXIsXG4gICRMb2NhdGlvblByb3ZpZGVyLFxuICAkTG9nUHJvdmlkZXIsXG4gICQkTWFwUHJvdmlkZXIsXG4gICRQYXJzZVByb3ZpZGVyLFxuICAkUm9vdFNjb3BlUHJvdmlkZXIsXG4gICRRUHJvdmlkZXIsXG4gICQkUVByb3ZpZGVyLFxuICAkJFNhbml0aXplVXJpUHJvdmlkZXIsXG4gICRTY2VQcm92aWRlcixcbiAgJFNjZURlbGVnYXRlUHJvdmlkZXIsXG4gICRTbmlmZmVyUHJvdmlkZXIsXG4gICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcixcbiAgJCRUZXN0YWJpbGl0eVByb3ZpZGVyLFxuICAkVGltZW91dFByb3ZpZGVyLFxuICAkJFJBRlByb3ZpZGVyLFxuICAkV2luZG93UHJvdmlkZXIsXG4gICQkanFMaXRlUHJvdmlkZXIsXG4gICQkQ29va2llUmVhZGVyUHJvdmlkZXJcbiovXG5cblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSBhbmd1bGFyLnZlcnNpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgQW5ndWxhckpTIHZlcnNpb24uXG4gKlxuICogVGhpcyBvYmplY3QgaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAtIGBmdWxsYCDigJMgYHtzdHJpbmd9YCDigJMgRnVsbCB2ZXJzaW9uIHN0cmluZywgc3VjaCBhcyBcIjAuOS4xOFwiLlxuICogLSBgbWFqb3JgIOKAkyBge251bWJlcn1gIOKAkyBNYWpvciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyBcIjBcIi5cbiAqIC0gYG1pbm9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWlub3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCI5XCIuXG4gKiAtIGBkb3RgIOKAkyBge251bWJlcn1gIOKAkyBEb3QgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCIxOFwiLlxuICogLSBgY29kZU5hbWVgIOKAkyBge3N0cmluZ31gIOKAkyBDb2RlIG5hbWUgb2YgdGhlIHJlbGVhc2UsIHN1Y2ggYXMgXCJqaWdnbGluZy1hcm1mYXRcIi5cbiAqL1xudmFyIHZlcnNpb24gPSB7XG4gIC8vIFRoZXNlIHBsYWNlaG9sZGVyIHN0cmluZ3Mgd2lsbCBiZSByZXBsYWNlZCBieSBncnVudCdzIGBidWlsZGAgdGFzay5cbiAgLy8gVGhleSBuZWVkIHRvIGJlIGRvdWJsZS0gb3Igc2luZ2xlLXF1b3RlZC5cbiAgZnVsbDogJzEuNi42JyxcbiAgbWFqb3I6IDEsXG4gIG1pbm9yOiA2LFxuICBkb3Q6IDYsXG4gIGNvZGVOYW1lOiAnaW50ZXJkaW1lbnNpb25hbC1jYWJsZSdcbn07XG5cblxuZnVuY3Rpb24gcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpIHtcbiAgZXh0ZW5kKGFuZ3VsYXIsIHtcbiAgICAnZXJyb3JIYW5kbGluZ0NvbmZpZyc6IGVycm9ySGFuZGxpbmdDb25maWcsXG4gICAgJ2Jvb3RzdHJhcCc6IGJvb3RzdHJhcCxcbiAgICAnY29weSc6IGNvcHksXG4gICAgJ2V4dGVuZCc6IGV4dGVuZCxcbiAgICAnbWVyZ2UnOiBtZXJnZSxcbiAgICAnZXF1YWxzJzogZXF1YWxzLFxuICAgICdlbGVtZW50JzoganFMaXRlLFxuICAgICdmb3JFYWNoJzogZm9yRWFjaCxcbiAgICAnaW5qZWN0b3InOiBjcmVhdGVJbmplY3RvcixcbiAgICAnbm9vcCc6IG5vb3AsXG4gICAgJ2JpbmQnOiBiaW5kLFxuICAgICd0b0pzb24nOiB0b0pzb24sXG4gICAgJ2Zyb21Kc29uJzogZnJvbUpzb24sXG4gICAgJ2lkZW50aXR5JzogaWRlbnRpdHksXG4gICAgJ2lzVW5kZWZpbmVkJzogaXNVbmRlZmluZWQsXG4gICAgJ2lzRGVmaW5lZCc6IGlzRGVmaW5lZCxcbiAgICAnaXNTdHJpbmcnOiBpc1N0cmluZyxcbiAgICAnaXNGdW5jdGlvbic6IGlzRnVuY3Rpb24sXG4gICAgJ2lzT2JqZWN0JzogaXNPYmplY3QsXG4gICAgJ2lzTnVtYmVyJzogaXNOdW1iZXIsXG4gICAgJ2lzRWxlbWVudCc6IGlzRWxlbWVudCxcbiAgICAnaXNBcnJheSc6IGlzQXJyYXksXG4gICAgJ3ZlcnNpb24nOiB2ZXJzaW9uLFxuICAgICdpc0RhdGUnOiBpc0RhdGUsXG4gICAgJ2xvd2VyY2FzZSc6IGxvd2VyY2FzZSxcbiAgICAndXBwZXJjYXNlJzogdXBwZXJjYXNlLFxuICAgICdjYWxsYmFja3MnOiB7JCRjb3VudGVyOiAwfSxcbiAgICAnZ2V0VGVzdGFiaWxpdHknOiBnZXRUZXN0YWJpbGl0eSxcbiAgICAncmVsb2FkV2l0aERlYnVnSW5mbyc6IHJlbG9hZFdpdGhEZWJ1Z0luZm8sXG4gICAgJyQkbWluRXJyJzogbWluRXJyLFxuICAgICckJGNzcCc6IGNzcCxcbiAgICAnJCRlbmNvZGVVcmlTZWdtZW50JzogZW5jb2RlVXJpU2VnbWVudCxcbiAgICAnJCRlbmNvZGVVcmlRdWVyeSc6IGVuY29kZVVyaVF1ZXJ5LFxuICAgICckJHN0cmluZ2lmeSc6IHN0cmluZ2lmeVxuICB9KTtcblxuICBhbmd1bGFyTW9kdWxlID0gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KTtcblxuICBhbmd1bGFyTW9kdWxlKCduZycsIFsnbmdMb2NhbGUnXSwgWyckcHJvdmlkZScsXG4gICAgZnVuY3Rpb24gbmdNb2R1bGUoJHByb3ZpZGUpIHtcbiAgICAgIC8vICQkc2FuaXRpemVVcmlQcm92aWRlciBuZWVkcyB0byBiZSBiZWZvcmUgJGNvbXBpbGVQcm92aWRlciBhcyBpdCBpcyB1c2VkIGJ5IGl0LlxuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkJHNhbml0aXplVXJpOiAkJFNhbml0aXplVXJpUHJvdmlkZXJcbiAgICAgIH0pO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJyRjb21waWxlJywgJENvbXBpbGVQcm92aWRlcikuXG4gICAgICAgIGRpcmVjdGl2ZSh7XG4gICAgICAgICAgICBhOiBodG1sQW5jaG9yRGlyZWN0aXZlLFxuICAgICAgICAgICAgaW5wdXQ6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgdGV4dGFyZWE6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgZm9ybTogZm9ybURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHNjcmlwdDogc2NyaXB0RGlyZWN0aXZlLFxuICAgICAgICAgICAgc2VsZWN0OiBzZWxlY3REaXJlY3RpdmUsXG4gICAgICAgICAgICBvcHRpb246IG9wdGlvbkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZDogbmdCaW5kRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdCaW5kSHRtbDogbmdCaW5kSHRtbERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZFRlbXBsYXRlOiBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xhc3M6IG5nQ2xhc3NEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzRXZlbjogbmdDbGFzc0V2ZW5EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzT2RkOiBuZ0NsYXNzT2RkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbG9hazogbmdDbG9ha0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ29udHJvbGxlcjogbmdDb250cm9sbGVyRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdGb3JtOiBuZ0Zvcm1EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0hpZGU6IG5nSGlkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSWY6IG5nSWZEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0luY2x1ZGU6IG5nSW5jbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSW5pdDogbmdJbml0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdOb25CaW5kYWJsZTogbmdOb25CaW5kYWJsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUGx1cmFsaXplOiBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUmVwZWF0OiBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU2hvdzogbmdTaG93RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTdHlsZTogbmdTdHlsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoOiBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoV2hlbjogbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTd2l0Y2hEZWZhdWx0OiBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ09wdGlvbnM6IG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nVHJhbnNjbHVkZTogbmdUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNb2RlbDogbmdNb2RlbERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTGlzdDogbmdMaXN0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDaGFuZ2U6IG5nQ2hhbmdlRGlyZWN0aXZlLFxuICAgICAgICAgICAgcGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUmVxdWlyZWQ6IHJlcXVpcmVkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbWlubGVuZ3RoOiBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbWF4bGVuZ3RoOiBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdWYWx1ZTogbmdWYWx1ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTW9kZWxPcHRpb25zOiBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZVxuICAgICAgICB9KS5cbiAgICAgICAgZGlyZWN0aXZlKHtcbiAgICAgICAgICBuZ0luY2x1ZGU6IG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlXG4gICAgICAgIH0pLlxuICAgICAgICBkaXJlY3RpdmUobmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMpLlxuICAgICAgICBkaXJlY3RpdmUobmdFdmVudERpcmVjdGl2ZXMpO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkYW5jaG9yU2Nyb2xsOiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXG4gICAgICAgICRhbmltYXRlOiAkQW5pbWF0ZVByb3ZpZGVyLFxuICAgICAgICAkYW5pbWF0ZUNzczogJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIsXG4gICAgICAgICQkYW5pbWF0ZUpzOiAkJENvcmVBbmltYXRlSnNQcm92aWRlcixcbiAgICAgICAgJCRhbmltYXRlUXVldWU6ICQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyLFxuICAgICAgICAkJEFuaW1hdGVSdW5uZXI6ICQkQW5pbWF0ZVJ1bm5lckZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJCRhbmltYXRlQXN5bmNSdW46ICQkQW5pbWF0ZUFzeW5jUnVuRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkYnJvd3NlcjogJEJyb3dzZXJQcm92aWRlcixcbiAgICAgICAgJGNhY2hlRmFjdG9yeTogJENhY2hlRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkY29udHJvbGxlcjogJENvbnRyb2xsZXJQcm92aWRlcixcbiAgICAgICAgJGRvY3VtZW50OiAkRG9jdW1lbnRQcm92aWRlcixcbiAgICAgICAgJCRpc0RvY3VtZW50SGlkZGVuOiAkJElzRG9jdW1lbnRIaWRkZW5Qcm92aWRlcixcbiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXI6ICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsXG4gICAgICAgICRmaWx0ZXI6ICRGaWx0ZXJQcm92aWRlcixcbiAgICAgICAgJCRmb3JjZVJlZmxvdzogJCRGb3JjZVJlZmxvd1Byb3ZpZGVyLFxuICAgICAgICAkaW50ZXJwb2xhdGU6ICRJbnRlcnBvbGF0ZVByb3ZpZGVyLFxuICAgICAgICAkaW50ZXJ2YWw6ICRJbnRlcnZhbFByb3ZpZGVyLFxuICAgICAgICAkaHR0cDogJEh0dHBQcm92aWRlcixcbiAgICAgICAgJGh0dHBQYXJhbVNlcmlhbGl6ZXI6ICRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIsXG4gICAgICAgICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlOiAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyLFxuICAgICAgICAkaHR0cEJhY2tlbmQ6ICRIdHRwQmFja2VuZFByb3ZpZGVyLFxuICAgICAgICAkeGhyRmFjdG9yeTogJHhockZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJGpzb25wQ2FsbGJhY2tzOiAkanNvbnBDYWxsYmFja3NQcm92aWRlcixcbiAgICAgICAgJGxvY2F0aW9uOiAkTG9jYXRpb25Qcm92aWRlcixcbiAgICAgICAgJGxvZzogJExvZ1Byb3ZpZGVyLFxuICAgICAgICAkcGFyc2U6ICRQYXJzZVByb3ZpZGVyLFxuICAgICAgICAkcm9vdFNjb3BlOiAkUm9vdFNjb3BlUHJvdmlkZXIsXG4gICAgICAgICRxOiAkUVByb3ZpZGVyLFxuICAgICAgICAkJHE6ICQkUVByb3ZpZGVyLFxuICAgICAgICAkc2NlOiAkU2NlUHJvdmlkZXIsXG4gICAgICAgICRzY2VEZWxlZ2F0ZTogJFNjZURlbGVnYXRlUHJvdmlkZXIsXG4gICAgICAgICRzbmlmZmVyOiAkU25pZmZlclByb3ZpZGVyLFxuICAgICAgICAkdGVtcGxhdGVDYWNoZTogJFRlbXBsYXRlQ2FjaGVQcm92aWRlcixcbiAgICAgICAgJHRlbXBsYXRlUmVxdWVzdDogJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyLFxuICAgICAgICAkJHRlc3RhYmlsaXR5OiAkJFRlc3RhYmlsaXR5UHJvdmlkZXIsXG4gICAgICAgICR0aW1lb3V0OiAkVGltZW91dFByb3ZpZGVyLFxuICAgICAgICAkd2luZG93OiAkV2luZG93UHJvdmlkZXIsXG4gICAgICAgICQkckFGOiAkJFJBRlByb3ZpZGVyLFxuICAgICAgICAkJGpxTGl0ZTogJCRqcUxpdGVQcm92aWRlcixcbiAgICAgICAgJCRNYXA6ICQkTWFwUHJvdmlkZXIsXG4gICAgICAgICQkY29va2llUmVhZGVyOiAkJENvb2tpZVJlYWRlclByb3ZpZGVyXG4gICAgICB9KTtcbiAgICB9XG4gIF0pXG4gIC5pbmZvKHsgYW5ndWxhclZlcnNpb246ICcxLjYuNicgfSk7XG59XG5cbi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAqICAgQ2hhbmdlcyB0byB0aGlzIGZpbGUgY2FuIHBvdGVudGlhbGx5IGNyZWF0ZSBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuICpcbiAqICAgICAgICAgIEFuIGFwcHJvdmFsIGZyb20gMiBDb3JlIG1lbWJlcnMgd2l0aCBoaXN0b3J5IG9mIG1vZGlmeWluZyAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBEb2VzIHRoZSBjaGFuZ2Ugc29tZWhvdyBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQ/ICpcbiAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAqICAgICBPciBnaXZlcyB1bmRlc2lyZWQgYWNjZXNzIHRvIHZhcmlhYmxlcyBsaWtlcyBkb2N1bWVudCBvciB3aW5kb3c/ICAgICpcbiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbi8qIGdsb2JhbFxuICBKUUxpdGVQcm90b3R5cGU6IHRydWUsXG4gIEJPT0xFQU5fQVRUUjogdHJ1ZSxcbiAgQUxJQVNFRF9BVFRSOiB0cnVlXG4qL1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL0pRTGl0ZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5lbGVtZW50XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogV3JhcHMgYSByYXcgRE9NIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgYXMgYSBbalF1ZXJ5XShodHRwOi8vanF1ZXJ5LmNvbSkgZWxlbWVudC5cbiAqXG4gKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YCBpcyBhbiBhbGlhcyBmb3IgdGhlXG4gKiBbalF1ZXJ5XShodHRwOi8vYXBpLmpxdWVyeS5jb20valF1ZXJ5LykgZnVuY3Rpb24uIElmIGpRdWVyeSBpcyBub3QgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YFxuICogZGVsZWdhdGVzIHRvIEFuZ3VsYXIncyBidWlsdC1pbiBzdWJzZXQgb2YgalF1ZXJ5LCBjYWxsZWQgXCJqUXVlcnkgbGl0ZVwiIG9yICoqanFMaXRlKiouXG4gKlxuICoganFMaXRlIGlzIGEgdGlueSwgQVBJLWNvbXBhdGlibGUgc3Vic2V0IG9mIGpRdWVyeSB0aGF0IGFsbG93c1xuICogQW5ndWxhciB0byBtYW5pcHVsYXRlIHRoZSBET00gaW4gYSBjcm9zcy1icm93c2VyIGNvbXBhdGlibGUgd2F5LiBqcUxpdGUgaW1wbGVtZW50cyBvbmx5IHRoZSBtb3N0XG4gKiBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eSB3aXRoIHRoZSBnb2FsIG9mIGhhdmluZyBhIHZlcnkgc21hbGwgZm9vdHByaW50LlxuICpcbiAqIFRvIHVzZSBgalF1ZXJ5YCwgc2ltcGx5IGVuc3VyZSBpdCBpcyBsb2FkZWQgYmVmb3JlIHRoZSBgYW5ndWxhci5qc2AgZmlsZS4gWW91IGNhbiBhbHNvIHVzZSB0aGVcbiAqIHtAbGluayBuZ0pxIGBuZ0pxYH0gZGlyZWN0aXZlIHRvIHNwZWNpZnkgdGhhdCBqcWxpdGUgc2hvdWxkIGJlIHVzZWQgb3ZlciBqUXVlcnksIG9yIHRvIHVzZSBhXG4gKiBzcGVjaWZpYyB2ZXJzaW9uIG9mIGpRdWVyeSBpZiBtdWx0aXBsZSB2ZXJzaW9ucyBleGlzdCBvbiB0aGUgcGFnZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPioqTm90ZToqKiBBbGwgZWxlbWVudCByZWZlcmVuY2VzIGluIEFuZ3VsYXIgYXJlIGFsd2F5cyB3cmFwcGVkIHdpdGggalF1ZXJ5IG9yXG4gKiBqcUxpdGUgKHN1Y2ggYXMgdGhlIGVsZW1lbnQgYXJndW1lbnQgaW4gYSBkaXJlY3RpdmUncyBjb21waWxlIC8gbGluayBmdW5jdGlvbikuIFRoZXkgYXJlIG5ldmVyIHJhdyBET00gcmVmZXJlbmNlcy48L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPioqTm90ZToqKiBLZWVwIGluIG1pbmQgdGhhdCB0aGlzIGZ1bmN0aW9uIHdpbGwgbm90IGZpbmQgZWxlbWVudHNcbiAqIGJ5IHRhZyBuYW1lIC8gQ1NTIHNlbGVjdG9yLiBGb3IgbG9va3VwcyBieSB0YWcgbmFtZSwgdHJ5IGluc3RlYWQgYGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCguLi4pYFxuICogb3IgYCRkb2N1bWVudC5maW5kKClgLCBvciB1c2UgdGhlIHN0YW5kYXJkIERPTSBBUElzLCBlLmcuIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKClgLjwvZGl2PlxuICpcbiAqICMjIEFuZ3VsYXIncyBqcUxpdGVcbiAqIGpxTGl0ZSBwcm92aWRlcyBvbmx5IHRoZSBmb2xsb3dpbmcgalF1ZXJ5IG1ldGhvZHM6XG4gKlxuICogLSBbYGFkZENsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWRkQ2xhc3MvKSAtIERvZXMgbm90IHN1cHBvcnQgYSBmdW5jdGlvbiBhcyBmaXJzdCBhcmd1bWVudFxuICogLSBbYGFmdGVyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWZ0ZXIvKVxuICogLSBbYGFwcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FwcGVuZC8pXG4gKiAtIFtgYXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2F0dHIvKSAtIERvZXMgbm90IHN1cHBvcnQgZnVuY3Rpb25zIGFzIHBhcmFtZXRlcnNcbiAqIC0gW2BiaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYmluZC8pIChfZGVwcmVjYXRlZF8sIHVzZSBbYG9uKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb24vKSkgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcbiAqIC0gW2BjaGlsZHJlbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NoaWxkcmVuLykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYGNsb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2xvbmUvKVxuICogLSBbYGNvbnRlbnRzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGVudHMvKVxuICogLSBbYGNzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nzcy8pIC0gT25seSByZXRyaWV2ZXMgaW5saW5lLXN0eWxlcywgZG9lcyBub3QgY2FsbCBgZ2V0Q29tcHV0ZWRTdHlsZSgpYC5cbiAqICAgQXMgYSBzZXR0ZXIsIGRvZXMgbm90IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdzIG9yIGFwcGVuZCAncHgnLCBhbmQgYWxzbyBkb2VzIG5vdCBoYXZlIGF1dG9tYXRpYyBwcm9wZXJ0eSBwcmVmaXhpbmcuXG4gKiAtIFtgZGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RhdGEvKVxuICogLSBbYGRldGFjaCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RldGFjaC8pXG4gKiAtIFtgZW1wdHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lbXB0eS8pXG4gKiAtIFtgZXEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lcS8pXG4gKiAtIFtgZmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2ZpbmQvKSAtIExpbWl0ZWQgdG8gbG9va3VwcyBieSB0YWcgbmFtZVxuICogLSBbYGhhc0NsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaGFzQ2xhc3MvKVxuICogLSBbYGh0bWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9odG1sLylcbiAqIC0gW2BuZXh0KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vbmV4dC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcbiAqIC0gW2BvbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcbiAqIC0gW2BvZmYoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50IG9iamVjdCBhcyBwYXJhbWV0ZXJcbiAqIC0gW2BvbmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbmUvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBzZWxlY3RvcnNcbiAqIC0gW2BwYXJlbnQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wYXJlbnQvKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXG4gKiAtIFtgcHJlcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ByZXBlbmQvKVxuICogLSBbYHByb3AoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcm9wLylcbiAqIC0gW2ByZWFkeSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlYWR5LykgKF9kZXByZWNhdGVkXywgdXNlIGBhbmd1bGFyLmVsZW1lbnQoY2FsbGJhY2spYCBpbnN0ZWFkIG9mIGBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGNhbGxiYWNrKWApXG4gKiAtIFtgcmVtb3ZlKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlLylcbiAqIC0gW2ByZW1vdmVBdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQXR0ci8pIC0gRG9lcyBub3Qgc3VwcG9ydCBtdWx0aXBsZSBhdHRyaWJ1dGVzXG4gKiAtIFtgcmVtb3ZlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVDbGFzcy8pIC0gRG9lcyBub3Qgc3VwcG9ydCBhIGZ1bmN0aW9uIGFzIGZpcnN0IGFyZ3VtZW50XG4gKiAtIFtgcmVtb3ZlRGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZURhdGEvKVxuICogLSBbYHJlcGxhY2VXaXRoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVwbGFjZVdpdGgvKVxuICogLSBbYHRleHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90ZXh0LylcbiAqIC0gW2B0b2dnbGVDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RvZ2dsZUNsYXNzLykgLSBEb2VzIG5vdCBzdXBwb3J0IGEgZnVuY3Rpb24gYXMgZmlyc3QgYXJndW1lbnRcbiAqIC0gW2B0cmlnZ2VySGFuZGxlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RyaWdnZXJIYW5kbGVyLykgLSBQYXNzZXMgYSBkdW1teSBldmVudCBvYmplY3QgdG8gaGFuZGxlcnNcbiAqIC0gW2B1bmJpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS91bmJpbmQvKSAoX2RlcHJlY2F0ZWRfLCB1c2UgW2BvZmYoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSkgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMgb3IgZXZlbnQgb2JqZWN0IGFzIHBhcmFtZXRlclxuICogLSBbYHZhbCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ZhbC8pXG4gKiAtIFtgd3JhcCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3dyYXAvKVxuICpcbiAqICMjIGpRdWVyeS9qcUxpdGUgRXh0cmFzXG4gKiBBbmd1bGFyIGFsc28gcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIG1ldGhvZHMgYW5kIGV2ZW50cyB0byBib3RoIGpRdWVyeSBhbmQganFMaXRlOlxuICpcbiAqICMjIyBFdmVudHNcbiAqIC0gYCRkZXN0cm95YCAtIEFuZ3VsYXJKUyBpbnRlcmNlcHRzIGFsbCBqcUxpdGUvalF1ZXJ5J3MgRE9NIGRlc3RydWN0aW9uIGFwaXMgYW5kIGZpcmVzIHRoaXMgZXZlbnRcbiAqICAgIG9uIGFsbCBET00gbm9kZXMgYmVpbmcgcmVtb3ZlZC4gIFRoaXMgY2FuIGJlIHVzZWQgdG8gY2xlYW4gdXAgYW55IDNyZCBwYXJ0eSBiaW5kaW5ncyB0byB0aGUgRE9NXG4gKiAgICBlbGVtZW50IGJlZm9yZSBpdCBpcyByZW1vdmVkLlxuICpcbiAqICMjIyBNZXRob2RzXG4gKiAtIGBjb250cm9sbGVyKG5hbWUpYCAtIHJldHJpZXZlcyB0aGUgY29udHJvbGxlciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIEJ5IGRlZmF1bHRcbiAqICAgcmV0cmlldmVzIGNvbnRyb2xsZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUuIElmIGBuYW1lYCBpcyBwcm92aWRlZCBhc1xuICogICBjYW1lbENhc2UgZGlyZWN0aXZlIG5hbWUsIHRoZW4gdGhlIGNvbnRyb2xsZXIgZm9yIHRoaXMgZGlyZWN0aXZlIHdpbGwgYmUgcmV0cmlldmVkIChlLmcuXG4gKiAgIGAnbmdNb2RlbCdgKS5cbiAqIC0gYGluamVjdG9yKClgIC0gcmV0cmlldmVzIHRoZSBpbmplY3RvciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuXG4gKiAtIGBzY29wZSgpYCAtIHJldHJpZXZlcyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IG9mIHRoZSBjdXJyZW50XG4gKiAgIGVsZW1lbnQgb3IgaXRzIHBhcmVudC4gUmVxdWlyZXMge0BsaW5rIGd1aWRlL3Byb2R1Y3Rpb24jZGlzYWJsaW5nLWRlYnVnLWRhdGEgRGVidWcgRGF0YX0gdG9cbiAqICAgYmUgZW5hYmxlZC5cbiAqIC0gYGlzb2xhdGVTY29wZSgpYCAtIHJldHJpZXZlcyBhbiBpc29sYXRlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBpZiBvbmUgaXMgYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlXG4gKiAgIGN1cnJlbnQgZWxlbWVudC4gVGhpcyBnZXR0ZXIgc2hvdWxkIGJlIHVzZWQgb25seSBvbiBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYSBkaXJlY3RpdmUgd2hpY2ggc3RhcnRzIGEgbmV3IGlzb2xhdGVcbiAqICAgc2NvcGUuIENhbGxpbmcgYHNjb3BlKClgIG9uIHRoaXMgZWxlbWVudCBhbHdheXMgcmV0dXJucyB0aGUgb3JpZ2luYWwgbm9uLWlzb2xhdGUgc2NvcGUuXG4gKiAgIFJlcXVpcmVzIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERlYnVnIERhdGF9IHRvIGJlIGVuYWJsZWQuXG4gKiAtIGBpbmhlcml0ZWREYXRhKClgIC0gc2FtZSBhcyBgZGF0YSgpYCwgYnV0IHdhbGtzIHVwIHRoZSBET00gdW50aWwgYSB2YWx1ZSBpcyBmb3VuZCBvciB0aGUgdG9wXG4gKiAgIHBhcmVudCBlbGVtZW50IGlzIHJlYWNoZWQuXG4gKlxuICogQGtub3duSXNzdWUgWW91IGNhbm5vdCBzcHkgb24gYGFuZ3VsYXIuZWxlbWVudGAgaWYgeW91IGFyZSB1c2luZyBKYXNtaW5lIHZlcnNpb24gMS54LiBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE0MjUxIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgSFRNTCBzdHJpbmcgb3IgRE9NRWxlbWVudCB0byBiZSB3cmFwcGVkIGludG8galF1ZXJ5LlxuICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC5cbiAqL1xuXG5KUUxpdGUuZXhwYW5kbyA9ICduZzMzOSc7XG5cbnZhciBqcUNhY2hlID0gSlFMaXRlLmNhY2hlID0ge30sXG4gICAganFJZCA9IDE7XG5cbi8qXG4gKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgZnVuY3Rpb24gISEhXG4gKi9cbkpRTGl0ZS5fZGF0YSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgLy9qUXVlcnkgYWx3YXlzIHJldHVybnMgYW4gb2JqZWN0IG9uIGNhY2hlIG1pc3NcbiAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTtcbn07XG5cbmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9XG5cblxudmFyIERBU0hfTE9XRVJDQVNFX1JFR0VYUCA9IC8tKFthLXpdKS9nO1xudmFyIE1TX0hBQ0tfUkVHRVhQID0gL14tbXMtLztcbnZhciBNT1VTRV9FVkVOVF9NQVAgPSB7IG1vdXNlbGVhdmU6ICdtb3VzZW91dCcsIG1vdXNlZW50ZXI6ICdtb3VzZW92ZXInIH07XG52YXIganFMaXRlTWluRXJyID0gbWluRXJyKCdqcUxpdGUnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBrZWJhYi1jYXNlIHRvIGNhbWVsQ2FzZS5cbiAqIFRoZXJlIGlzIGFsc28gYSBzcGVjaWFsIGNhc2UgZm9yIHRoZSBtcyBwcmVmaXggc3RhcnRpbmcgd2l0aCBhIGxvd2VyY2FzZSBsZXR0ZXIuXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxuICovXG5mdW5jdGlvbiBjc3NLZWJhYlRvQ2FtZWwobmFtZSkge1xuICAgIHJldHVybiBrZWJhYlRvQ2FtZWwobmFtZS5yZXBsYWNlKE1TX0hBQ0tfUkVHRVhQLCAnbXMtJykpO1xufVxuXG5mdW5jdGlvbiBmbkNhbWVsQ2FzZVJlcGxhY2UoYWxsLCBsZXR0ZXIpIHtcbiAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGtlYmFiLWNhc2UgdG8gY2FtZWxDYXNlLlxuICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAqL1xuZnVuY3Rpb24ga2ViYWJUb0NhbWVsKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVcbiAgICAucmVwbGFjZShEQVNIX0xPV0VSQ0FTRV9SRUdFWFAsIGZuQ2FtZWxDYXNlUmVwbGFjZSk7XG59XG5cbnZhciBTSU5HTEVfVEFHX1JFR0VYUCA9IC9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLztcbnZhciBIVE1MX1JFR0VYUCA9IC88fCYjP1xcdys7LztcbnZhciBUQUdfTkFNRV9SRUdFWFAgPSAvPChbXFx3Oi1dKykvO1xudmFyIFhIVE1MX1RBR19SRUdFWFAgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpO1xuXG52YXIgd3JhcE1hcCA9IHtcbiAgJ29wdGlvbic6IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cIm11bHRpcGxlXCI+JywgJzwvc2VsZWN0PiddLFxuXG4gICd0aGVhZCc6IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddLFxuICAnY29sJzogWzIsICc8dGFibGU+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuICAndGQnOiBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXSxcbiAgJ19kZWZhdWx0JzogWzAsICcnLCAnJ11cbn07XG5cbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBqcUxpdGVJc1RleHROb2RlKGh0bWwpIHtcbiAgcmV0dXJuICFIVE1MX1JFR0VYUC50ZXN0KGh0bWwpO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVBY2NlcHRzRGF0YShub2RlKSB7XG4gIC8vIFRoZSB3aW5kb3cgb2JqZWN0IGNhbiBhY2NlcHQgZGF0YSBidXQgaGFzIG5vIG5vZGVUeXBlXG4gIC8vIE90aGVyd2lzZSB3ZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIGVsZW1lbnRzICgxKSBhbmQgZG9jdW1lbnRzICg5KVxuICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UIHx8ICFub2RlVHlwZSB8fCBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0RPQ1VNRU5UO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVIYXNEYXRhKG5vZGUpIHtcbiAgZm9yICh2YXIga2V5IGluIGpxQ2FjaGVbbm9kZS5uZzMzOV0pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkge1xuICB2YXIgdG1wLCB0YWcsIHdyYXAsXG4gICAgICBmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgbm9kZXMgPSBbXSwgaTtcblxuICBpZiAoanFMaXRlSXNUZXh0Tm9kZShodG1sKSkge1xuICAgIC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuICAgIG5vZGVzLnB1c2goY29udGV4dC5jcmVhdGVUZXh0Tm9kZShodG1sKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG4gICAgdG1wID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29udGV4dC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgdGFnID0gKFRBR19OQU1FX1JFR0VYUC5leGVjKGh0bWwpIHx8IFsnJywgJyddKVsxXS50b0xvd2VyQ2FzZSgpO1xuICAgIHdyYXAgPSB3cmFwTWFwW3RhZ10gfHwgd3JhcE1hcC5fZGVmYXVsdDtcbiAgICB0bXAuaW5uZXJIVE1MID0gd3JhcFsxXSArIGh0bWwucmVwbGFjZShYSFRNTF9UQUdfUkVHRVhQLCAnPCQxPjwvJDI+JykgKyB3cmFwWzJdO1xuXG4gICAgLy8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG4gICAgaSA9IHdyYXBbMF07XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdG1wID0gdG1wLmxhc3RDaGlsZDtcbiAgICB9XG5cbiAgICBub2RlcyA9IGNvbmNhdChub2RlcywgdG1wLmNoaWxkTm9kZXMpO1xuXG4gICAgdG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcbiAgICB0bXAudGV4dENvbnRlbnQgPSAnJztcbiAgfVxuXG4gIC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcbiAgZnJhZ21lbnQudGV4dENvbnRlbnQgPSAnJztcbiAgZnJhZ21lbnQuaW5uZXJIVE1MID0gJyc7IC8vIENsZWFyIGlubmVyIEhUTUxcbiAgZm9yRWFjaChub2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICB9KTtcblxuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVBhcnNlSFRNTChodG1sLCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBjb250ZXh0IHx8IHdpbmRvdy5kb2N1bWVudDtcbiAgdmFyIHBhcnNlZDtcblxuICBpZiAoKHBhcnNlZCA9IFNJTkdMRV9UQUdfUkVHRVhQLmV4ZWMoaHRtbCkpKSB7XG4gICAgcmV0dXJuIFtjb250ZXh0LmNyZWF0ZUVsZW1lbnQocGFyc2VkWzFdKV07XG4gIH1cblxuICBpZiAoKHBhcnNlZCA9IGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkpKSB7XG4gICAgcmV0dXJuIHBhcnNlZC5jaGlsZE5vZGVzO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVXcmFwTm9kZShub2RlLCB3cmFwcGVyKSB7XG4gIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQod3JhcHBlciwgbm9kZSk7XG4gIH1cblxuICB3cmFwcGVyLmFwcGVuZENoaWxkKG5vZGUpO1xufVxuXG5cbi8vIElFOS0xMSBoYXMgbm8gbWV0aG9kIFwiY29udGFpbnNcIiBpbiBTVkcgZWxlbWVudCBhbmQgaW4gTm9kZS5wcm90b3R5cGUuIEJ1ZyAjMTAyNTkuXG52YXIganFMaXRlQ29udGFpbnMgPSB3aW5kb3cuTm9kZS5wcm90b3R5cGUuY29udGFpbnMgfHwgLyoqIEB0aGlzICovIGZ1bmN0aW9uKGFyZykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICByZXR1cm4gISEodGhpcy5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhcmcpICYgMTYpO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mdW5jdGlvbiBKUUxpdGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEpRTGl0ZSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgdmFyIGFyZ0lzU3RyaW5nO1xuXG4gIGlmIChpc1N0cmluZyhlbGVtZW50KSkge1xuICAgIGVsZW1lbnQgPSB0cmltKGVsZW1lbnQpO1xuICAgIGFyZ0lzU3RyaW5nID0gdHJ1ZTtcbiAgfVxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSlFMaXRlKSkge1xuICAgIGlmIChhcmdJc1N0cmluZyAmJiBlbGVtZW50LmNoYXJBdCgwKSAhPT0gJzwnKSB7XG4gICAgICB0aHJvdyBqcUxpdGVNaW5FcnIoJ25vc2VsJywgJ0xvb2tpbmcgdXAgZWxlbWVudHMgdmlhIHNlbGVjdG9ycyBpcyBub3Qgc3VwcG9ydGVkIGJ5IGpxTGl0ZSEgU2VlOiBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9hbmd1bGFyLmVsZW1lbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBKUUxpdGUoZWxlbWVudCk7XG4gIH1cblxuICBpZiAoYXJnSXNTdHJpbmcpIHtcbiAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBqcUxpdGVQYXJzZUhUTUwoZWxlbWVudCkpO1xuICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24oZWxlbWVudCkpIHtcbiAgICBqcUxpdGVSZWFkeShlbGVtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBlbGVtZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVDbG9uZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlRGVhbG9jKGVsZW1lbnQsIG9ubHlEZXNjZW5kYW50cykge1xuICBpZiAoIW9ubHlEZXNjZW5kYW50cyAmJiBqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkganFMaXRlLmNsZWFuRGF0YShbZWxlbWVudF0pO1xuXG4gIGlmIChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpIHtcbiAgICBqcUxpdGUuY2xlYW5EYXRhKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnKicpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVPZmYoZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKSB7XG4gIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29mZmFyZ3MnLCAnanFMaXRlI29mZigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgYXJndW1lbnQnKTtcblxuICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQpO1xuICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmhhbmRsZTtcblxuICBpZiAoIWhhbmRsZSkgcmV0dXJuOyAvL25vIGxpc3RlbmVycyByZWdpc3RlcmVkXG5cbiAgaWYgKCF0eXBlKSB7XG4gICAgZm9yICh0eXBlIGluIGV2ZW50cykge1xuICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG4gICAgICB9XG4gICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgIH1cbiAgfSBlbHNlIHtcblxuICAgIHZhciByZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVyRm5zID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGlzRGVmaW5lZChmbikpIHtcbiAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJGbnMgfHwgW10sIGZuKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGlzRGVmaW5lZChmbikgJiYgbGlzdGVuZXJGbnMgJiYgbGlzdGVuZXJGbnMubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG4gICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICByZW1vdmVIYW5kbGVyKHR5cGUpO1xuICAgICAgaWYgKE1PVVNFX0VWRU5UX01BUFt0eXBlXSkge1xuICAgICAgICByZW1vdmVIYW5kbGVyKE1PVVNFX0VWRU5UX01BUFt0eXBlXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlRGF0YShlbGVtZW50LCBuYW1lKSB7XG4gIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5O1xuICB2YXIgZXhwYW5kb1N0b3JlID0gZXhwYW5kb0lkICYmIGpxQ2FjaGVbZXhwYW5kb0lkXTtcblxuICBpZiAoZXhwYW5kb1N0b3JlKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGRlbGV0ZSBleHBhbmRvU3RvcmUuZGF0YVtuYW1lXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXhwYW5kb1N0b3JlLmhhbmRsZSkge1xuICAgICAgaWYgKGV4cGFuZG9TdG9yZS5ldmVudHMuJGRlc3Ryb3kpIHtcbiAgICAgICAgZXhwYW5kb1N0b3JlLmhhbmRsZSh7fSwgJyRkZXN0cm95Jyk7XG4gICAgICB9XG4gICAgICBqcUxpdGVPZmYoZWxlbWVudCk7XG4gICAgfVxuICAgIGRlbGV0ZSBqcUNhY2hlW2V4cGFuZG9JZF07XG4gICAgZWxlbWVudC5uZzMzOSA9IHVuZGVmaW5lZDsgLy8gZG9uJ3QgZGVsZXRlIERPTSBleHBhbmRvcy4gSUUgYW5kIENocm9tZSBkb24ndCBsaWtlIGl0XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgY3JlYXRlSWZOZWNlc3NhcnkpIHtcbiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnQubmczMzksXG4gICAgICBleHBhbmRvU3RvcmUgPSBleHBhbmRvSWQgJiYganFDYWNoZVtleHBhbmRvSWRdO1xuXG4gIGlmIChjcmVhdGVJZk5lY2Vzc2FyeSAmJiAhZXhwYW5kb1N0b3JlKSB7XG4gICAgZWxlbWVudC5uZzMzOSA9IGV4cGFuZG9JZCA9IGpxTmV4dElkKCk7XG4gICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWRdID0ge2V2ZW50czoge30sIGRhdGE6IHt9LCBoYW5kbGU6IHVuZGVmaW5lZH07XG4gIH1cblxuICByZXR1cm4gZXhwYW5kb1N0b3JlO1xufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZURhdGEoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICBpZiAoanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHtcbiAgICB2YXIgcHJvcDtcblxuICAgIHZhciBpc1NpbXBsZVNldHRlciA9IGlzRGVmaW5lZCh2YWx1ZSk7XG4gICAgdmFyIGlzU2ltcGxlR2V0dGVyID0gIWlzU2ltcGxlU2V0dGVyICYmIGtleSAmJiAhaXNPYmplY3Qoa2V5KTtcbiAgICB2YXIgbWFzc0dldHRlciA9ICFrZXk7XG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAhaXNTaW1wbGVHZXR0ZXIpO1xuICAgIHZhciBkYXRhID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5kYXRhO1xuXG4gICAgaWYgKGlzU2ltcGxlU2V0dGVyKSB7IC8vIGRhdGEoJ2tleScsIHZhbHVlKVxuICAgICAgZGF0YVtrZWJhYlRvQ2FtZWwoa2V5KV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hc3NHZXR0ZXIpIHsgIC8vIGRhdGEoKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1NpbXBsZUdldHRlcikgeyAvLyBkYXRhKCdrZXknKVxuICAgICAgICAgIC8vIGRvbid0IGZvcmNlIGNyZWF0aW9uIG9mIGV4cGFuZG9TdG9yZSBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgICAgICAgIHJldHVybiBkYXRhICYmIGRhdGFba2ViYWJUb0NhbWVsKGtleSldO1xuICAgICAgICB9IGVsc2UgeyAvLyBtYXNzLXNldHRlcjogZGF0YSh7a2V5MTogdmFsMSwga2V5MjogdmFsMn0pXG4gICAgICAgICAgZm9yIChwcm9wIGluIGtleSkge1xuICAgICAgICAgICAgZGF0YVtrZWJhYlRvQ2FtZWwocHJvcCldID0ga2V5W3Byb3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVIYXNDbGFzcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAoKCcgJyArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAnICcpLnJlcGxhY2UoL1tcXG5cXHRdL2csICcgJykuXG4gICAgICBpbmRleE9mKCcgJyArIHNlbGVjdG9yICsgJyAnKSA+IC0xKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3Nlcykge1xuICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShcbiAgICAgICAgICAoJyAnICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICcgJylcbiAgICAgICAgICAucmVwbGFjZSgvW1xcblxcdF0vZywgJyAnKVxuICAgICAgICAgIC5yZXBsYWNlKCcgJyArIHRyaW0oY3NzQ2xhc3MpICsgJyAnLCAnICcpKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVBZGRDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7XG4gIGlmIChjc3NDbGFzc2VzICYmIGVsZW1lbnQuc2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIGV4aXN0aW5nQ2xhc3NlcyA9ICgnICcgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFxuXFx0XS9nLCAnICcpO1xuXG4gICAgZm9yRWFjaChjc3NDbGFzc2VzLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNzc0NsYXNzKSB7XG4gICAgICBjc3NDbGFzcyA9IHRyaW0oY3NzQ2xhc3MpO1xuICAgICAgaWYgKGV4aXN0aW5nQ2xhc3Nlcy5pbmRleE9mKCcgJyArIGNzc0NsYXNzICsgJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgZXhpc3RpbmdDbGFzc2VzICs9IGNzc0NsYXNzICsgJyAnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShleGlzdGluZ0NsYXNzZXMpKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZUFkZE5vZGVzKHJvb3QsIGVsZW1lbnRzKSB7XG4gIC8vIFRISVMgQ09ERSBJUyBWRVJZIEhPVC4gRG9uJ3QgbWFrZSBjaGFuZ2VzIHdpdGhvdXQgYmVuY2htYXJraW5nLlxuXG4gIGlmIChlbGVtZW50cykge1xuXG4gICAgLy8gaWYgYSBOb2RlICh0aGUgbW9zdCBjb21tb24gY2FzZSlcbiAgICBpZiAoZWxlbWVudHMubm9kZVR5cGUpIHtcbiAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgLy8gaWYgYW4gQXJyYXkgb3IgTm9kZUxpc3QgYW5kIG5vdCBhIFdpbmRvd1xuICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInICYmIGVsZW1lbnRzLndpbmRvdyAhPT0gZWxlbWVudHMpIHtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVDb250cm9sbGVyKGVsZW1lbnQsIG5hbWUpIHtcbiAgcmV0dXJuIGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgJyQnICsgKG5hbWUgfHwgJ25nQ29udHJvbGxlcicpICsgJ0NvbnRyb2xsZXInKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAvLyBpZiBlbGVtZW50IGlzIHRoZSBkb2N1bWVudCBvYmplY3Qgd29yayB3aXRoIHRoZSBodG1sIGVsZW1lbnQgaW5zdGVhZFxuICAvLyB0aGlzIG1ha2VzICQoZG9jdW1lbnQpLnNjb3BlKCkgcG9zc2libGVcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgbmFtZXMgPSBpc0FycmF5KG5hbWUpID8gbmFtZSA6IFtuYW1lXTtcblxuICB3aGlsZSAoZWxlbWVudCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5hbWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUgPSBqcUxpdGUuZGF0YShlbGVtZW50LCBuYW1lc1tpXSkpKSByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gSWYgZGVhbGluZyB3aXRoIGEgZG9jdW1lbnQgZnJhZ21lbnQgbm9kZSB3aXRoIGEgaG9zdCBlbGVtZW50LCBhbmQgbm8gcGFyZW50LCB1c2UgdGhlIGhvc3RcbiAgICAvLyBlbGVtZW50IGFzIHRoZSBwYXJlbnQuIFRoaXMgZW5hYmxlcyBkaXJlY3RpdmVzIHdpdGhpbiBhIFNoYWRvdyBET00gb3IgcG9seWZpbGxlZCBTaGFkb3cgRE9NXG4gICAgLy8gdG8gbG9va3VwIHBhcmVudCBjb250cm9sbGVycy5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlIHx8IChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgJiYgZWxlbWVudC5ob3N0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVFbXB0eShlbGVtZW50KSB7XG4gIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVSZW1vdmUoZWxlbWVudCwga2VlcERhdGEpIHtcbiAgaWYgKCFrZWVwRGF0YSkganFMaXRlRGVhbG9jKGVsZW1lbnQpO1xuICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRG9jdW1lbnRMb2FkZWQoYWN0aW9uLCB3aW4pIHtcbiAgd2luID0gd2luIHx8IHdpbmRvdztcbiAgaWYgKHdpbi5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgLy8gRm9yY2UgdGhlIGFjdGlvbiB0byBiZSBydW4gYXN5bmMgZm9yIGNvbnNpc3RlbnQgYmVoYXZpb3JcbiAgICAvLyBmcm9tIHRoZSBhY3Rpb24ncyBwb2ludCBvZiB2aWV3XG4gICAgLy8gaS5lLiBpdCB3aWxsIGRlZmluaXRlbHkgbm90IGJlIGluIGEgJGFwcGx5XG4gICAgd2luLnNldFRpbWVvdXQoYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBObyBuZWVkIHRvIHVuYmluZCB0aGlzIGhhbmRsZXIgYXMgbG9hZCBpcyBvbmx5IGV2ZXIgY2FsbGVkIG9uY2VcbiAgICBqcUxpdGUod2luKS5vbignbG9hZCcsIGFjdGlvbik7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlUmVhZHkoZm4pIHtcbiAgZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgdHJpZ2dlcik7XG4gICAgZm4oKTtcbiAgfVxuXG4gIC8vIGNoZWNrIGlmIGRvY3VtZW50IGlzIGFscmVhZHkgbG9hZGVkXG4gIGlmICh3aW5kb3cuZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZuKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZSBjYW4gbm90IHVzZSBqcUxpdGUgc2luY2Ugd2UgYXJlIG5vdCBkb25lIGxvYWRpbmcgYW5kIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgbGF0ZXIuXG5cbiAgICAvLyBXb3JrcyBmb3IgbW9kZXJuIGJyb3dzZXJzIGFuZCBJRTlcbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpO1xuXG4gICAgLy8gRmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCBmb3Igb3RoZXJzXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0cmlnZ2VyKTtcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEZ1bmN0aW9ucyB3aGljaCBhcmUgZGVjbGFyZWQgZGlyZWN0bHkuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBKUUxpdGVQcm90b3R5cGUgPSBKUUxpdGUucHJvdG90eXBlID0ge1xuICByZWFkeToganFMaXRlUmVhZHksXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBbXTtcbiAgICBmb3JFYWNoKHRoaXMsIGZ1bmN0aW9uKGUpIHsgdmFsdWUucHVzaCgnJyArIGUpO30pO1xuICAgIHJldHVybiAnWycgKyB2YWx1ZS5qb2luKCcsICcpICsgJ10nO1xuICB9LFxuXG4gIGVxOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIChpbmRleCA+PSAwKSA/IGpxTGl0ZSh0aGlzW2luZGV4XSkgOiBqcUxpdGUodGhpc1t0aGlzLmxlbmd0aCArIGluZGV4XSk7XG4gIH0sXG5cbiAgbGVuZ3RoOiAwLFxuICBwdXNoOiBwdXNoLFxuICBzb3J0OiBbXS5zb3J0LFxuICBzcGxpY2U6IFtdLnNwbGljZVxufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgaXRlcmF0aW5nIGdldHRlci9zZXR0ZXJzLlxuLy8gdGhlc2UgZnVuY3Rpb25zIHJldHVybiBzZWxmIG9uIHNldHRlciBhbmRcbi8vIHZhbHVlIG9uIGdldC5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xudmFyIEJPT0xFQU5fQVRUUiA9IHt9O1xuZm9yRWFjaCgnbXVsdGlwbGUsc2VsZWN0ZWQsY2hlY2tlZCxkaXNhYmxlZCxyZWFkT25seSxyZXF1aXJlZCxvcGVuJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkge1xuICBCT09MRUFOX0FUVFJbbG93ZXJjYXNlKHZhbHVlKV0gPSB2YWx1ZTtcbn0pO1xudmFyIEJPT0xFQU5fRUxFTUVOVFMgPSB7fTtcbmZvckVhY2goJ2lucHV0LHNlbGVjdCxvcHRpb24sdGV4dGFyZWEsYnV0dG9uLGZvcm0sZGV0YWlscycuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgQk9PTEVBTl9FTEVNRU5UU1t2YWx1ZV0gPSB0cnVlO1xufSk7XG52YXIgQUxJQVNFRF9BVFRSID0ge1xuICAnbmdNaW5sZW5ndGgnOiAnbWlubGVuZ3RoJyxcbiAgJ25nTWF4bGVuZ3RoJzogJ21heGxlbmd0aCcsXG4gICduZ01pbic6ICdtaW4nLFxuICAnbmdNYXgnOiAnbWF4JyxcbiAgJ25nUGF0dGVybic6ICdwYXR0ZXJuJyxcbiAgJ25nU3RlcCc6ICdzdGVwJ1xufTtcblxuZnVuY3Rpb24gZ2V0Qm9vbGVhbkF0dHJOYW1lKGVsZW1lbnQsIG5hbWUpIHtcbiAgLy8gY2hlY2sgZG9tIGxhc3Qgc2luY2Ugd2Ugd2lsbCBtb3N0IGxpa2VseSBmYWlsIG9uIG5hbWVcbiAgdmFyIGJvb2xlYW5BdHRyID0gQk9PTEVBTl9BVFRSW25hbWUudG9Mb3dlckNhc2UoKV07XG5cbiAgLy8gYm9vbGVhbkF0dHIgaXMgaGVyZSB0d2ljZSB0byBtaW5pbWl6ZSBET00gYWNjZXNzXG4gIHJldHVybiBib29sZWFuQXR0ciAmJiBCT09MRUFOX0VMRU1FTlRTW25vZGVOYW1lXyhlbGVtZW50KV0gJiYgYm9vbGVhbkF0dHI7XG59XG5cbmZ1bmN0aW9uIGdldEFsaWFzZWRBdHRyTmFtZShuYW1lKSB7XG4gIHJldHVybiBBTElBU0VEX0FUVFJbbmFtZV07XG59XG5cbmZvckVhY2goe1xuICBkYXRhOiBqcUxpdGVEYXRhLFxuICByZW1vdmVEYXRhOiBqcUxpdGVSZW1vdmVEYXRhLFxuICBoYXNEYXRhOiBqcUxpdGVIYXNEYXRhLFxuICBjbGVhbkRhdGE6IGZ1bmN0aW9uIGpxTGl0ZUNsZWFuRGF0YShub2Rlcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGpxTGl0ZVJlbW92ZURhdGEobm9kZXNbaV0pO1xuICAgIH1cbiAgfVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgSlFMaXRlW25hbWVdID0gZm47XG59KTtcblxuZm9yRWFjaCh7XG4gIGRhdGE6IGpxTGl0ZURhdGEsXG4gIGluaGVyaXRlZERhdGE6IGpxTGl0ZUluaGVyaXRlZERhdGEsXG5cbiAgc2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSFcbiAgICByZXR1cm4ganFMaXRlLmRhdGEoZWxlbWVudCwgJyRzY29wZScpIHx8IGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQsIFsnJGlzb2xhdGVTY29wZScsICckc2NvcGUnXSk7XG4gIH0sXG5cbiAgaXNvbGF0ZVNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gQ2FuJ3QgdXNlIGpxTGl0ZURhdGEgaGVyZSBkaXJlY3RseSBzbyB3ZSBzdGF5IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkhXG4gICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlJykgfHwganFMaXRlLmRhdGEoZWxlbWVudCwgJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyk7XG4gIH0sXG5cbiAgY29udHJvbGxlcjoganFMaXRlQ29udHJvbGxlcixcblxuICBpbmplY3RvcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckaW5qZWN0b3InKTtcbiAgfSxcblxuICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH0sXG5cbiAgaGFzQ2xhc3M6IGpxTGl0ZUhhc0NsYXNzLFxuXG4gIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gY3NzS2ViYWJUb0NhbWVsKG5hbWUpO1xuXG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbbmFtZV07XG4gICAgfVxuICB9LFxuXG4gIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIHJldDtcbiAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgIGlmIChub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9BVFRSSUJVVEUgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UIHx8XG4gICAgICAhZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbG93ZXJjYXNlZE5hbWUgPSBsb3dlcmNhc2UobmFtZSk7XG4gICAgdmFyIGlzQm9vbGVhbkF0dHIgPSBCT09MRUFOX0FUVFJbbG93ZXJjYXNlZE5hbWVdO1xuXG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIC8vIHNldHRlclxuXG4gICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgKHZhbHVlID09PSBmYWxzZSAmJiBpc0Jvb2xlYW5BdHRyKSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIGlzQm9vbGVhbkF0dHIgPyBsb3dlcmNhc2VkTmFtZSA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZ2V0dGVyXG5cbiAgICAgIHJldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG4gICAgICBpZiAoaXNCb29sZWFuQXR0ciAmJiByZXQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0ID0gbG93ZXJjYXNlZE5hbWU7XG4gICAgICB9XG4gICAgICAvLyBOb3JtYWxpemUgbm9uLWV4aXN0aW5nIGF0dHJpYnV0ZXMgdG8gdW5kZWZpbmVkIChhcyBqUXVlcnkpLlxuICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcbiAgICB9XG4gIH0sXG5cbiAgcHJvcDogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudFtuYW1lXTtcbiAgICB9XG4gIH0sXG5cbiAgdGV4dDogKGZ1bmN0aW9uKCkge1xuICAgIGdldFRleHQuJGR2ID0gJyc7XG4gICAgcmV0dXJuIGdldFRleHQ7XG5cbiAgICBmdW5jdGlvbiBnZXRUZXh0KGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgICAgIHJldHVybiAobm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCkgPyBlbGVtZW50LnRleHRDb250ZW50IDogJyc7XG4gICAgICB9XG4gICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfVxuICB9KSgpLFxuXG4gIHZhbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSAmJiBub2RlTmFtZV8oZWxlbWVudCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yRWFjaChlbGVtZW50Lm9wdGlvbnMsIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBlbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gIH0sXG5cbiAgaHRtbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUw7XG4gICAgfVxuICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHZhbHVlO1xuICB9LFxuXG4gIGVtcHR5OiBqcUxpdGVFbXB0eVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgLyoqXG4gICAqIFByb3BlcnRpZXM6IHdyaXRlcyByZXR1cm4gc2VsZWN0aW9uLCByZWFkcyByZXR1cm4gZmlyc3QgdmFsdWVcbiAgICovXG4gIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyKSB7XG4gICAgdmFyIGksIGtleTtcbiAgICB2YXIgbm9kZUNvdW50ID0gdGhpcy5sZW5ndGg7XG5cbiAgICAvLyBqcUxpdGVIYXNDbGFzcyBoYXMgb25seSB0d28gYXJndW1lbnRzLCBidXQgaXMgYSBnZXR0ZXItb25seSBmbiwgc28gd2UgbmVlZCB0byBzcGVjaWFsLWNhc2UgaXRcbiAgICAvLyBpbiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbi5cbiAgICAvLyBqcUxpdGVFbXB0eSB0YWtlcyBubyBhcmd1bWVudHMgYnV0IGlzIGEgc2V0dGVyLlxuICAgIGlmIChmbiAhPT0ganFMaXRlRW1wdHkgJiZcbiAgICAgICAgKGlzVW5kZWZpbmVkKChmbi5sZW5ndGggPT09IDIgJiYgKGZuICE9PSBqcUxpdGVIYXNDbGFzcyAmJiBmbiAhPT0ganFMaXRlQ29udHJvbGxlcikpID8gYXJnMSA6IGFyZzIpKSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGFyZzEpKSB7XG5cbiAgICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIGJ1dCB0aGUgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHRoZSBrZXkvdmFsdWVzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgICAgIGlmIChmbiA9PT0ganFMaXRlRGF0YSkge1xuICAgICAgICAgICAgLy8gZGF0YSgpIHRha2VzIHRoZSB3aG9sZSBvYmplY3QgaW4galF1ZXJ5XG4gICAgICAgICAgICBmbih0aGlzW2ldLCBhcmcxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gYXJnMSkge1xuICAgICAgICAgICAgICBmbih0aGlzW2ldLCBrZXksIGFyZzFba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZ1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdlIGFyZSBhIHJlYWQsIHNvIHJlYWQgdGhlIGZpcnN0IGNoaWxkLlxuICAgICAgICAvLyBUT0RPOiBkbyB3ZSBzdGlsbCBuZWVkIHRoaXM/XG4gICAgICAgIHZhciB2YWx1ZSA9IGZuLiRkdjtcbiAgICAgICAgLy8gT25seSBpZiB3ZSBoYXZlICRkdiBkbyB3ZSBpdGVyYXRlIG92ZXIgYWxsLCBvdGhlcndpc2UgaXQgaXMganVzdCB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICAgICAgdmFyIGpqID0gKGlzVW5kZWZpbmVkKHZhbHVlKSkgPyBNYXRoLm1pbihub2RlQ291bnQsIDEpIDogbm9kZUNvdW50O1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICB2YXIgbm9kZVZhbHVlID0gZm4odGhpc1tqXSwgYXJnMSwgYXJnMik7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlICsgbm9kZVZhbHVlIDogbm9kZVZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIHNvIGFwcGx5IHRvIGFsbCBjaGlsZHJlblxuICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XG4gICAgICAgIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHNlbGYgZm9yIGNoYWluaW5nXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cykge1xuICB2YXIgZXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQsIHR5cGUpIHtcbiAgICAvLyBqUXVlcnkgc3BlY2lmaWMgYXBpXG4gICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICB9O1xuXG4gICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGUgfHwgZXZlbnQudHlwZV07XG4gICAgdmFyIGV2ZW50Rm5zTGVuZ3RoID0gZXZlbnRGbnMgPyBldmVudEZucy5sZW5ndGggOiAwO1xuXG4gICAgaWYgKCFldmVudEZuc0xlbmd0aCkgcmV0dXJuO1xuXG4gICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCkpIHtcbiAgICAgIHZhciBvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikge1xuICAgICAgICAgIG9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLmNhbGwoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID09PSB0cnVlO1xuICAgIH07XG5cbiAgICAvLyBTb21lIGV2ZW50cyBoYXZlIHNwZWNpYWwgaGFuZGxlcnMgdGhhdCB3cmFwIHRoZSByZWFsIGhhbmRsZXJcbiAgICB2YXIgaGFuZGxlcldyYXBwZXIgPSBldmVudEZucy5zcGVjaWFsSGFuZGxlcldyYXBwZXIgfHwgZGVmYXVsdEhhbmRsZXJXcmFwcGVyO1xuXG4gICAgLy8gQ29weSBldmVudCBoYW5kbGVycyBpbiBjYXNlIGV2ZW50IGhhbmRsZXJzIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyBleGVjdXRpb24uXG4gICAgaWYgKChldmVudEZuc0xlbmd0aCA+IDEpKSB7XG4gICAgICBldmVudEZucyA9IHNoYWxsb3dDb3B5KGV2ZW50Rm5zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50Rm5zTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBoYW5kbGVyV3JhcHBlcihlbGVtZW50LCBldmVudCwgZXZlbnRGbnNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjayBmb3IgYW5ndWxhck1vY2tzL2NsZWFyRGF0YUNhY2hlIHRoYXQgbWFrZXMgaXQgcG9zc2libGUgdG8gZGVyZWdpc3RlciBhbGxcbiAgLy8gICAgICAgZXZlbnRzIG9uIGBlbGVtZW50YFxuICBldmVudEhhbmRsZXIuZWxlbSA9IGVsZW1lbnQ7XG4gIHJldHVybiBldmVudEhhbmRsZXI7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRIYW5kbGVyV3JhcHBlcihlbGVtZW50LCBldmVudCwgaGFuZGxlcikge1xuICBoYW5kbGVyLmNhbGwoZWxlbWVudCwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBzcGVjaWFsTW91c2VIYW5kbGVyV3JhcHBlcih0YXJnZXQsIGV2ZW50LCBoYW5kbGVyKSB7XG4gIC8vIFJlZmVyIHRvIGpRdWVyeSdzIGltcGxlbWVudGF0aW9uIG9mIG1vdXNlZW50ZXIgJiBtb3VzZWxlYXZlXG4gIC8vIFJlYWQgYWJvdXQgbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZTpcbiAgLy8gaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfbW91c2UuaHRtbCNsaW5rOFxuICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gIC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cbiAgLy8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcbiAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpxTGl0ZUNvbnRhaW5zLmNhbGwodGFyZ2V0LCByZWxhdGVkKSkpIHtcbiAgICBoYW5kbGVyLmNhbGwodGFyZ2V0LCBldmVudCk7XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgaXRlcmF0aW5nIHRyYXZlcnNhbC5cbi8vIFRoZXNlIGZ1bmN0aW9ucyBjaGFpbiByZXN1bHRzIGludG8gYSBzaW5nbGVcbi8vIHNlbGVjdG9yLlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mb3JFYWNoKHtcbiAgcmVtb3ZlRGF0YToganFMaXRlUmVtb3ZlRGF0YSxcblxuICBvbjogZnVuY3Rpb24ganFMaXRlT24oZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh1bnN1cHBvcnRlZCkpIHRocm93IGpxTGl0ZU1pbkVycignb25hcmdzJywgJ2pxTGl0ZSNvbigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgb3IgYGV2ZW50RGF0YWAgcGFyYW1ldGVycycpO1xuXG4gICAgLy8gRG8gbm90IGFkZCBldmVudCBoYW5kbGVycyB0byBub24tZWxlbWVudHMgYmVjYXVzZSB0aGV5IHdpbGwgbm90IGJlIGNsZWFuZWQgdXAuXG4gICAgaWYgKCFqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgdHJ1ZSk7XG4gICAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gICAgdmFyIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGU7XG5cbiAgICBpZiAoIWhhbmRsZSkge1xuICAgICAgaGFuZGxlID0gZXhwYW5kb1N0b3JlLmhhbmRsZSA9IGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpO1xuICAgIH1cblxuICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL3N0cmluZy1pbmRleG9mLXZzLXNwbGl0XG4gICAgdmFyIHR5cGVzID0gdHlwZS5pbmRleE9mKCcgJykgPj0gMCA/IHR5cGUuc3BsaXQoJyAnKSA6IFt0eXBlXTtcbiAgICB2YXIgaSA9IHR5cGVzLmxlbmd0aDtcblxuICAgIHZhciBhZGRIYW5kbGVyID0gZnVuY3Rpb24odHlwZSwgc3BlY2lhbEhhbmRsZXJXcmFwcGVyLCBub0V2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKCFldmVudEZucykge1xuICAgICAgICBldmVudEZucyA9IGV2ZW50c1t0eXBlXSA9IFtdO1xuICAgICAgICBldmVudEZucy5zcGVjaWFsSGFuZGxlcldyYXBwZXIgPSBzcGVjaWFsSGFuZGxlcldyYXBwZXI7XG4gICAgICAgIGlmICh0eXBlICE9PSAnJGRlc3Ryb3knICYmICFub0V2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBldmVudEZucy5wdXNoKGZuKTtcbiAgICB9O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdHlwZSA9IHR5cGVzW2ldO1xuICAgICAgaWYgKE1PVVNFX0VWRU5UX01BUFt0eXBlXSkge1xuICAgICAgICBhZGRIYW5kbGVyKE1PVVNFX0VWRU5UX01BUFt0eXBlXSwgc3BlY2lhbE1vdXNlSGFuZGxlcldyYXBwZXIpO1xuICAgICAgICBhZGRIYW5kbGVyKHR5cGUsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRIYW5kbGVyKHR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBvZmY6IGpxTGl0ZU9mZixcblxuICBvbmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7XG4gICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcblxuICAgIC8vYWRkIHRoZSBsaXN0ZW5lciB0d2ljZSBzbyB0aGF0IHdoZW4gaXQgaXMgY2FsbGVkXG4gICAgLy95b3UgY2FuIHJlbW92ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gYW5kIHN0aWxsIGJlXG4gICAgLy9hYmxlIHRvIGNhbGwgZWxlbWVudC5vZmYoZXYsIGZuKSBub3JtYWxseVxuICAgIGVsZW1lbnQub24odHlwZSwgZnVuY3Rpb24gb25GbigpIHtcbiAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIGZuKTtcbiAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIG9uRm4pO1xuICAgIH0pO1xuICAgIGVsZW1lbnQub24odHlwZSwgZm4pO1xuICB9LFxuXG4gIHJlcGxhY2VXaXRoOiBmdW5jdGlvbihlbGVtZW50LCByZXBsYWNlTm9kZSkge1xuICAgIHZhciBpbmRleCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50KTtcbiAgICBmb3JFYWNoKG5ldyBKUUxpdGUocmVwbGFjZU5vZGUpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBpbmRleC5uZXh0U2libGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5vZGUsIGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgaW5kZXggPSBub2RlO1xuICAgIH0pO1xuICB9LFxuXG4gIGNoaWxkcmVuOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yRWFjaChlbGVtZW50LmNoaWxkTm9kZXMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfSxcblxuICBjb250ZW50czogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmNvbnRlbnREb2N1bWVudCB8fCBlbGVtZW50LmNoaWxkTm9kZXMgfHwgW107XG4gIH0sXG5cbiAgYXBwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7XG4gICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTtcbiAgICBpZiAobm9kZVR5cGUgIT09IE5PREVfVFlQRV9FTEVNRU5UICYmIG5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQpIHJldHVybjtcblxuICAgIG5vZGUgPSBuZXcgSlFMaXRlKG5vZGUpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbm9kZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBlbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG5vZGUpIHtcbiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgIHZhciBpbmRleCA9IGVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICAgIGZvckVhY2gobmV3IEpRTGl0ZShub2RlKSwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICB3cmFwOiBmdW5jdGlvbihlbGVtZW50LCB3cmFwTm9kZSkge1xuICAgIGpxTGl0ZVdyYXBOb2RlKGVsZW1lbnQsIGpxTGl0ZSh3cmFwTm9kZSkuZXEoMCkuY2xvbmUoKVswXSk7XG4gIH0sXG5cbiAgcmVtb3ZlOiBqcUxpdGVSZW1vdmUsXG5cbiAgZGV0YWNoOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAganFMaXRlUmVtb3ZlKGVsZW1lbnQsIHRydWUpO1xuICB9LFxuXG4gIGFmdGVyOiBmdW5jdGlvbihlbGVtZW50LCBuZXdFbGVtZW50KSB7XG4gICAgdmFyIGluZGV4ID0gZWxlbWVudCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbmV3RWxlbWVudCA9IG5ldyBKUUxpdGUobmV3RWxlbWVudCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5ld0VsZW1lbnQubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5ld0VsZW1lbnRbaV07XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgICBpbmRleCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFkZENsYXNzOiBqcUxpdGVBZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3M6IGpxTGl0ZVJlbW92ZUNsYXNzLFxuXG4gIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3RvciwgY29uZGl0aW9uKSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBmb3JFYWNoKHNlbGVjdG9yLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgY2xhc3NDb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChjbGFzc0NvbmRpdGlvbikpIHtcbiAgICAgICAgICBjbGFzc0NvbmRpdGlvbiA9ICFqcUxpdGVIYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIChjbGFzc0NvbmRpdGlvbiA/IGpxTGl0ZUFkZENsYXNzIDoganFMaXRlUmVtb3ZlQ2xhc3MpKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgcGFyZW50OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UID8gcGFyZW50IDogbnVsbDtcbiAgfSxcblxuICBuZXh0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9LFxuXG4gIGZpbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgaWYgKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSxcblxuICBjbG9uZToganFMaXRlQ2xvbmUsXG5cbiAgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBleHRyYVBhcmFtZXRlcnMpIHtcblxuICAgIHZhciBkdW1teUV2ZW50LCBldmVudEZuc0NvcHksIGhhbmRsZXJBcmdzO1xuICAgIHZhciBldmVudE5hbWUgPSBldmVudC50eXBlIHx8IGV2ZW50O1xuICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCk7XG4gICAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICAgIHZhciBldmVudEZucyA9IGV2ZW50cyAmJiBldmVudHNbZXZlbnROYW1lXTtcblxuICAgIGlmIChldmVudEZucykge1xuICAgICAgLy8gQ3JlYXRlIGEgZHVtbXkgZXZlbnQgdG8gcGFzcyB0byB0aGUgaGFuZGxlcnNcbiAgICAgIGR1bW15RXZlbnQgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsgfSxcbiAgICAgICAgaXNEZWZhdWx0UHJldmVudGVkOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdHJ1ZTsgfSxcbiAgICAgICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHsgdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlOyB9LFxuICAgICAgICBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9PT0gdHJ1ZTsgfSxcbiAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBub29wLFxuICAgICAgICB0eXBlOiBldmVudE5hbWUsXG4gICAgICAgIHRhcmdldDogZWxlbWVudFxuICAgICAgfTtcblxuICAgICAgLy8gSWYgYSBjdXN0b20gZXZlbnQgd2FzIHByb3ZpZGVkIHRoZW4gZXh0ZW5kIG91ciBkdW1teSBldmVudCB3aXRoIGl0XG4gICAgICBpZiAoZXZlbnQudHlwZSkge1xuICAgICAgICBkdW1teUV2ZW50ID0gZXh0ZW5kKGR1bW15RXZlbnQsIGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29weSBldmVudCBoYW5kbGVycyBpbiBjYXNlIGV2ZW50IGhhbmRsZXJzIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyBleGVjdXRpb24uXG4gICAgICBldmVudEZuc0NvcHkgPSBzaGFsbG93Q29weShldmVudEZucyk7XG4gICAgICBoYW5kbGVyQXJncyA9IGV4dHJhUGFyYW1ldGVycyA/IFtkdW1teUV2ZW50XS5jb25jYXQoZXh0cmFQYXJhbWV0ZXJzKSA6IFtkdW1teUV2ZW50XTtcblxuICAgICAgZm9yRWFjaChldmVudEZuc0NvcHksIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIGlmICghZHVtbXlFdmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgICAgZm4uYXBwbHkoZWxlbWVudCwgaGFuZGxlckFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0sIGZ1bmN0aW9uKGZuLCBuYW1lKSB7XG4gIC8qKlxuICAgKiBjaGFpbmluZyBmdW5jdGlvbnNcbiAgICovXG4gIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gdGhpcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gZm4odGhpc1tpXSwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgLy8gYW55IGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSB2YWx1ZSBuZWVkcyB0byBiZSB3cmFwcGVkXG4gICAgICAgICAgdmFsdWUgPSBqcUxpdGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBqcUxpdGVBZGROb2Rlcyh2YWx1ZSwgZm4odGhpc1tpXSwgYXJnMSwgYXJnMiwgYXJnMykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogdGhpcztcbiAgfTtcbn0pO1xuXG4vLyBiaW5kIGxlZ2FjeSBiaW5kL3VuYmluZCB0byBvbi9vZmZcbkpRTGl0ZS5wcm90b3R5cGUuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub247XG5KUUxpdGUucHJvdG90eXBlLnVuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub2ZmO1xuXG5cbi8vIFByb3ZpZGVyIGZvciBwcml2YXRlICQkanFMaXRlIHNlcnZpY2Vcbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRqcUxpdGVQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24gJCRqcUxpdGUoKSB7XG4gICAgcmV0dXJuIGV4dGVuZChKUUxpdGUsIHtcbiAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbihub2RlLCBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChub2RlLmF0dHIpIG5vZGUgPSBub2RlWzBdO1xuICAgICAgICByZXR1cm4ganFMaXRlSGFzQ2xhc3Mobm9kZSwgY2xhc3Nlcyk7XG4gICAgICB9LFxuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIGNsYXNzZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuYXR0cikgbm9kZSA9IG5vZGVbMF07XG4gICAgICAgIHJldHVybiBqcUxpdGVBZGRDbGFzcyhub2RlLCBjbGFzc2VzKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3Nlcykge1xuICAgICAgICBpZiAobm9kZS5hdHRyKSBub2RlID0gbm9kZVswXTtcbiAgICAgICAgcmV0dXJuIGpxTGl0ZVJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGEgaGFzaCBvZiBhbiAnb2JqJy5cbiAqIEhhc2ggb2YgYTpcbiAqICBzdHJpbmcgaXMgc3RyaW5nXG4gKiAgbnVtYmVyIGlzIG51bWJlciBhcyBzdHJpbmdcbiAqICBvYmplY3QgaXMgZWl0aGVyIHJlc3VsdCBvZiBjYWxsaW5nICQkaGFzaEtleSBmdW5jdGlvbiBvbiB0aGUgb2JqZWN0IG9yIHVuaXF1ZWx5IGdlbmVyYXRlZCBpZCxcbiAqICAgICAgICAgdGhhdCBpcyBhbHNvIGFzc2lnbmVkIHRvIHRoZSAkJGhhc2hLZXkgcHJvcGVydHkgb2YgdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gb2JqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBoYXNoIHN0cmluZyBzdWNoIHRoYXQgdGhlIHNhbWUgaW5wdXQgd2lsbCBoYXZlIHRoZSBzYW1lIGhhc2ggc3RyaW5nLlxuICogICAgICAgICBUaGUgcmVzdWx0aW5nIHN0cmluZyBrZXkgaXMgaW4gJ3R5cGU6aGFzaEtleScgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBoYXNoS2V5KG9iaiwgbmV4dFVpZEZuKSB7XG4gIHZhciBrZXkgPSBvYmogJiYgb2JqLiQkaGFzaEtleTtcblxuICBpZiAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGtleSA9IG9iai4kJGhhc2hLZXkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHZhciBvYmpUeXBlID0gdHlwZW9mIG9iajtcbiAgaWYgKG9ialR5cGUgPT09ICdmdW5jdGlvbicgfHwgKG9ialR5cGUgPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCkpIHtcbiAgICBrZXkgPSBvYmouJCRoYXNoS2V5ID0gb2JqVHlwZSArICc6JyArIChuZXh0VWlkRm4gfHwgbmV4dFVpZCkoKTtcbiAgfSBlbHNlIHtcbiAgICBrZXkgPSBvYmpUeXBlICsgJzonICsgb2JqO1xuICB9XG5cbiAgcmV0dXJuIGtleTtcbn1cblxuLy8gQSBtaW5pbWFsIEVTMjAxNSBNYXAgaW1wbGVtZW50YXRpb24uXG4vLyBTaG91bGQgYmUgYnVnL2ZlYXR1cmUgZXF1aXZhbGVudCB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9ucyBvZiBzdXBwb3J0ZWQgYnJvd3NlcnNcbi8vIChmb3IgdGhlIGZlYXR1cmVzIHJlcXVpcmVkIGluIEFuZ3VsYXIpLlxuLy8gU2VlIGh0dHBzOi8va2FuZ2F4LmdpdGh1Yi5pby9jb21wYXQtdGFibGUvZXM2LyN0ZXN0LU1hcFxudmFyIG5hbktleSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBOZ01hcFNoaW0oKSB7XG4gIHRoaXMuX2tleXMgPSBbXTtcbiAgdGhpcy5fdmFsdWVzID0gW107XG4gIHRoaXMuX2xhc3RLZXkgPSBOYU47XG4gIHRoaXMuX2xhc3RJbmRleCA9IC0xO1xufVxuTmdNYXBTaGltLnByb3RvdHlwZSA9IHtcbiAgX2lkeDogZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGtleSA9PT0gdGhpcy5fbGFzdEtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xhc3RJbmRleDtcbiAgICB9XG4gICAgdGhpcy5fbGFzdEtleSA9IGtleTtcbiAgICB0aGlzLl9sYXN0SW5kZXggPSB0aGlzLl9rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICByZXR1cm4gdGhpcy5fbGFzdEluZGV4O1xuICB9LFxuICBfdHJhbnNmb3JtS2V5OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gaXNOdW1iZXJOYU4oa2V5KSA/IG5hbktleSA6IGtleTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICBrZXkgPSB0aGlzLl90cmFuc2Zvcm1LZXkoa2V5KTtcbiAgICB2YXIgaWR4ID0gdGhpcy5faWR4KGtleSk7XG4gICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZXNbaWR4XTtcbiAgICB9XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGtleSA9IHRoaXMuX3RyYW5zZm9ybUtleShrZXkpO1xuICAgIHZhciBpZHggPSB0aGlzLl9pZHgoa2V5KTtcbiAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgaWR4ID0gdGhpcy5fbGFzdEluZGV4ID0gdGhpcy5fa2V5cy5sZW5ndGg7XG4gICAgfVxuICAgIHRoaXMuX2tleXNbaWR4XSA9IGtleTtcbiAgICB0aGlzLl92YWx1ZXNbaWR4XSA9IHZhbHVlO1xuXG4gICAgLy8gU3VwcG9ydDogSUUxMVxuICAgIC8vIERvIG5vdCBgcmV0dXJuIHRoaXNgIHRvIHNpbXVsYXRlIHRoZSBwYXJ0aWFsIElFMTEgaW1wbGVtZW50YXRpb25cbiAgfSxcbiAgZGVsZXRlOiBmdW5jdGlvbihrZXkpIHtcbiAgICBrZXkgPSB0aGlzLl90cmFuc2Zvcm1LZXkoa2V5KTtcbiAgICB2YXIgaWR4ID0gdGhpcy5faWR4KGtleSk7XG4gICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5fa2V5cy5zcGxpY2UoaWR4LCAxKTtcbiAgICB0aGlzLl92YWx1ZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgdGhpcy5fbGFzdEtleSA9IE5hTjtcbiAgICB0aGlzLl9sYXN0SW5kZXggPSAtMTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLy8gRm9yIG5vdywgYWx3YXlzIHVzZSBgTmdNYXBTaGltYCwgZXZlbiBpZiBgd2luZG93Lk1hcGAgaXMgYXZhaWxhYmxlLiBTb21lIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnNcbi8vIGFyZSBzdGlsbCBidWdneSAob2Z0ZW4gaW4gc3VidGxlIHdheXMpIGFuZCBjYW4gY2F1c2UgaGFyZC10by1kZWJ1ZyBmYWlsdXJlcy4gV2hlbiBuYXRpdmUgYE1hcGBcbi8vIGltcGxlbWVudGF0aW9ucyBnZXQgbW9yZSBzdGFibGUsIHdlIGNhbiByZWNvbnNpZGVyIHN3aXRjaGluZyB0byBgd2luZG93Lk1hcGAgKHdoZW4gYXZhaWxhYmxlKS5cbnZhciBOZ01hcCA9IE5nTWFwU2hpbTtcblxudmFyICQkTWFwUHJvdmlkZXIgPSBbLyoqIEB0aGlzICovZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFtmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gTmdNYXA7XG4gIH1dO1xufV07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbW9kdWxlIG5nXG4gKiBAbmFtZSBhbmd1bGFyLmluamVjdG9yXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhbiBpbmplY3RvciBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBmb3IgcmV0cmlldmluZyBzZXJ2aWNlcyBhcyB3ZWxsIGFzIGZvclxuICogZGVwZW5kZW5jeSBpbmplY3Rpb24gKHNlZSB7QGxpbmsgZ3VpZGUvZGkgZGVwZW5kZW5jeSBpbmplY3Rpb259KS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBtb2R1bGVzIEEgbGlzdCBvZiBtb2R1bGUgZnVuY3Rpb25zIG9yIHRoZWlyIGFsaWFzZXMuIFNlZVxuICogICAgIHtAbGluayBhbmd1bGFyLm1vZHVsZX0uIFRoZSBgbmdgIG1vZHVsZSBtdXN0IGJlIGV4cGxpY2l0bHkgYWRkZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RyaWN0RGk9ZmFsc2VdIFdoZXRoZXIgdGhlIGluamVjdG9yIHNob3VsZCBiZSBpbiBzdHJpY3QgbW9kZSwgd2hpY2hcbiAqICAgICBkaXNhbGxvd3MgYXJndW1lbnQgbmFtZSBhbm5vdGF0aW9uIGluZmVyZW5jZS5cbiAqIEByZXR1cm5zIHtpbmplY3Rvcn0gSW5qZWN0b3Igb2JqZWN0LiBTZWUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gKlxuICogQGV4YW1wbGVcbiAqIFR5cGljYWwgdXNhZ2VcbiAqIGBgYGpzXG4gKiAgIC8vIGNyZWF0ZSBhbiBpbmplY3RvclxuICogICB2YXIgJGluamVjdG9yID0gYW5ndWxhci5pbmplY3RvcihbJ25nJ10pO1xuICpcbiAqICAgLy8gdXNlIHRoZSBpbmplY3RvciB0byBraWNrIG9mZiB5b3VyIGFwcGxpY2F0aW9uXG4gKiAgIC8vIHVzZSB0aGUgdHlwZSBpbmZlcmVuY2UgdG8gYXV0byBpbmplY3QgYXJndW1lbnRzLCBvciB1c2UgaW1wbGljaXQgaW5qZWN0aW9uXG4gKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJHJvb3RTY29wZSwgJGNvbXBpbGUsICRkb2N1bWVudCkge1xuICogICAgICRjb21waWxlKCRkb2N1bWVudCkoJHJvb3RTY29wZSk7XG4gKiAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogU29tZXRpbWVzIHlvdSB3YW50IHRvIGdldCBhY2Nlc3MgdG8gdGhlIGluamVjdG9yIG9mIGEgY3VycmVudGx5IHJ1bm5pbmcgQW5ndWxhciBhcHBcbiAqIGZyb20gb3V0c2lkZSBBbmd1bGFyLiBQZXJoYXBzLCB5b3Ugd2FudCB0byBpbmplY3QgYW5kIGNvbXBpbGUgc29tZSBtYXJrdXAgYWZ0ZXIgdGhlXG4gKiBhcHBsaWNhdGlvbiBoYXMgYmVlbiBib290c3RyYXBwZWQuIFlvdSBjYW4gZG8gdGhpcyB1c2luZyB0aGUgZXh0cmEgYGluamVjdG9yKClgIGFkZGVkXG4gKiB0byBKUXVlcnkvanFMaXRlIGVsZW1lbnRzLiBTZWUge0BsaW5rIGFuZ3VsYXIuZWxlbWVudH0uXG4gKlxuICogKlRoaXMgaXMgZmFpcmx5IHJhcmUgYnV0IGNvdWxkIGJlIHRoZSBjYXNlIGlmIGEgdGhpcmQgcGFydHkgbGlicmFyeSBpcyBpbmplY3RpbmcgdGhlXG4gKiBtYXJrdXAuKlxuICpcbiAqIEluIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSBhIG5ldyBibG9jayBvZiBIVE1MIGNvbnRhaW5pbmcgYSBgbmctY29udHJvbGxlcmBcbiAqIGRpcmVjdGl2ZSBpcyBhZGRlZCB0byB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudCBib2R5IGJ5IEpRdWVyeS4gV2UgdGhlbiBjb21waWxlIGFuZCBsaW5rXG4gKiBpdCBpbnRvIHRoZSBjdXJyZW50IEFuZ3VsYXJKUyBzY29wZS5cbiAqXG4gKiBgYGBqc1xuICogdmFyICRkaXYgPSAkKCc8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNeUN0cmxcIj57e2NvbnRlbnQubGFiZWx9fTwvZGl2PicpO1xuICogJChkb2N1bWVudC5ib2R5KS5hcHBlbmQoJGRpdik7XG4gKlxuICogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5pbmplY3RvcigpLmludm9rZShmdW5jdGlvbigkY29tcGlsZSkge1xuICogICB2YXIgc2NvcGUgPSBhbmd1bGFyLmVsZW1lbnQoJGRpdikuc2NvcGUoKTtcbiAqICAgJGNvbXBpbGUoJGRpdikoc2NvcGUpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgYXV0b1xuICogQGluc3RhbGxhdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogSW1wbGljaXQgbW9kdWxlIHdoaWNoIGdldHMgYXV0b21hdGljYWxseSBhZGRlZCB0byBlYWNoIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICovXG5cbnZhciBBUlJPV19BUkcgPSAvXihbXihdKz8pPT4vO1xudmFyIEZOX0FSR1MgPSAvXlteKF0qXFwoXFxzKihbXildKilcXCkvbTtcbnZhciBGTl9BUkdfU1BMSVQgPSAvLC87XG52YXIgRk5fQVJHID0gL15cXHMqKF8/KShcXFMrPylcXDFcXHMqJC87XG52YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcXC9cXC8uKiQpfChcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKSkvbWc7XG52YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTtcblxuZnVuY3Rpb24gc3RyaW5naWZ5Rm4oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZuKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdEFyZ3MoZm4pIHtcbiAgdmFyIGZuVGV4dCA9IHN0cmluZ2lmeUZuKGZuKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyksXG4gICAgICBhcmdzID0gZm5UZXh0Lm1hdGNoKEFSUk9XX0FSRykgfHwgZm5UZXh0Lm1hdGNoKEZOX0FSR1MpO1xuICByZXR1cm4gYXJncztcbn1cblxuZnVuY3Rpb24gYW5vbkZuKGZuKSB7XG4gIC8vIEZvciBhbm9ueW1vdXMgZnVuY3Rpb25zLCBzaG93aW5nIGF0IHRoZSB2ZXJ5IGxlYXN0IHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgY2FuIGhlbHAgaW5cbiAgLy8gZGVidWdnaW5nLlxuICB2YXIgYXJncyA9IGV4dHJhY3RBcmdzKGZuKTtcbiAgaWYgKGFyZ3MpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCcgKyAoYXJnc1sxXSB8fCAnJykucmVwbGFjZSgvW1xcc1xcclxcbl0rLywgJyAnKSArICcpJztcbiAgfVxuICByZXR1cm4gJ2ZuJztcbn1cblxuZnVuY3Rpb24gYW5ub3RhdGUoZm4sIHN0cmljdERpLCBuYW1lKSB7XG4gIHZhciAkaW5qZWN0LFxuICAgICAgYXJnRGVjbCxcbiAgICAgIGxhc3Q7XG5cbiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICghKCRpbmplY3QgPSBmbi4kaW5qZWN0KSkge1xuICAgICAgJGluamVjdCA9IFtdO1xuICAgICAgaWYgKGZuLmxlbmd0aCkge1xuICAgICAgICBpZiAoc3RyaWN0RGkpIHtcbiAgICAgICAgICBpZiAoIWlzU3RyaW5nKG5hbWUpIHx8ICFuYW1lKSB7XG4gICAgICAgICAgICBuYW1lID0gZm4ubmFtZSB8fCBhbm9uRm4oZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3N0cmljdGRpJyxcbiAgICAgICAgICAgICd7MH0gaXMgbm90IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gYW5kIGNhbm5vdCBiZSBpbnZva2VkIGluIHN0cmljdCBtb2RlJywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJnRGVjbCA9IGV4dHJhY3RBcmdzKGZuKTtcbiAgICAgICAgZm9yRWFjaChhcmdEZWNsWzFdLnNwbGl0KEZOX0FSR19TUExJVCksIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgIGFyZy5yZXBsYWNlKEZOX0FSRywgZnVuY3Rpb24oYWxsLCB1bmRlcnNjb3JlLCBuYW1lKSB7XG4gICAgICAgICAgICAkaW5qZWN0LnB1c2gobmFtZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZm4uJGluamVjdCA9ICRpbmplY3Q7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgbGFzdCA9IGZuLmxlbmd0aCAtIDE7XG4gICAgYXNzZXJ0QXJnRm4oZm5bbGFzdF0sICdmbicpO1xuICAgICRpbmplY3QgPSBmbi5zbGljZSgwLCBsYXN0KTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJywgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuICRpbmplY3Q7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkaW5qZWN0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJGluamVjdG9yYCBpcyB1c2VkIHRvIHJldHJpZXZlIG9iamVjdCBpbnN0YW5jZXMgYXMgZGVmaW5lZCBieVxuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUgcHJvdmlkZXJ9LCBpbnN0YW50aWF0ZSB0eXBlcywgaW52b2tlIG1ldGhvZHMsXG4gKiBhbmQgbG9hZCBtb2R1bGVzLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgYWx3YXlzIGhvbGRzIHRydWU6XG4gKlxuICogYGBganNcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoKTtcbiAqICAgZXhwZWN0KCRpbmplY3Rvci5nZXQoJyRpbmplY3RvcicpKS50b0JlKCRpbmplY3Rvcik7XG4gKiAgIGV4cGVjdCgkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICogICAgIHJldHVybiAkaW5qZWN0b3I7XG4gKiAgIH0pKS50b0JlKCRpbmplY3Rvcik7XG4gKiBgYGBcbiAqXG4gKiAjIEluamVjdGlvbiBGdW5jdGlvbiBBbm5vdGF0aW9uXG4gKlxuICogSmF2YVNjcmlwdCBkb2VzIG5vdCBoYXZlIGFubm90YXRpb25zLCBhbmQgYW5ub3RhdGlvbnMgYXJlIG5lZWRlZCBmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb24uIFRoZVxuICogZm9sbG93aW5nIGFyZSBhbGwgdmFsaWQgd2F5cyBvZiBhbm5vdGF0aW5nIGZ1bmN0aW9uIHdpdGggaW5qZWN0aW9uIGFyZ3VtZW50cyBhbmQgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogYGBganNcbiAqICAgLy8gaW5mZXJyZWQgKG9ubHkgd29ya3MgaWYgY29kZSBub3QgbWluaWZpZWQvb2JmdXNjYXRlZClcbiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbihzZXJ2aWNlQSl7fSk7XG4gKlxuICogICAvLyBhbm5vdGF0ZWRcbiAqICAgZnVuY3Rpb24gZXhwbGljaXQoc2VydmljZUEpIHt9O1xuICogICBleHBsaWNpdC4kaW5qZWN0ID0gWydzZXJ2aWNlQSddO1xuICogICAkaW5qZWN0b3IuaW52b2tlKGV4cGxpY2l0KTtcbiAqXG4gKiAgIC8vIGlubGluZVxuICogICAkaW5qZWN0b3IuaW52b2tlKFsnc2VydmljZUEnLCBmdW5jdGlvbihzZXJ2aWNlQSl7fV0pO1xuICogYGBgXG4gKlxuICogIyMgSW5mZXJlbmNlXG4gKlxuICogSW4gSmF2YVNjcmlwdCBjYWxsaW5nIGB0b1N0cmluZygpYCBvbiBhIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24uIFRoZSBkZWZpbml0aW9uXG4gKiBjYW4gdGhlbiBiZSBwYXJzZWQgYW5kIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMgY2FuIGJlIGV4dHJhY3RlZC4gVGhpcyBtZXRob2Qgb2YgZGlzY292ZXJpbmdcbiAqIGFubm90YXRpb25zIGlzIGRpc2FsbG93ZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgaW4gc3RyaWN0IG1vZGUuXG4gKiAqTk9URToqIFRoaXMgZG9lcyBub3Qgd29yayB3aXRoIG1pbmlmaWNhdGlvbiwgYW5kIG9iZnVzY2F0aW9uIHRvb2xzIHNpbmNlIHRoZXNlIHRvb2xzIGNoYW5nZSB0aGVcbiAqIGFyZ3VtZW50IG5hbWVzLlxuICpcbiAqICMjIGAkaW5qZWN0YCBBbm5vdGF0aW9uXG4gKiBCeSBhZGRpbmcgYW4gYCRpbmplY3RgIHByb3BlcnR5IG9udG8gYSBmdW5jdGlvbiB0aGUgaW5qZWN0aW9uIHBhcmFtZXRlcnMgY2FuIGJlIHNwZWNpZmllZC5cbiAqXG4gKiAjIyBJbmxpbmVcbiAqIEFzIGFuIGFycmF5IG9mIGluamVjdGlvbiBuYW1lcywgd2hlcmUgdGhlIGxhc3QgaXRlbSBpbiB0aGUgYXJyYXkgaXMgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvcGVydHlcbiAqIEBuYW1lICRpbmplY3RvciNtb2R1bGVzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGhhc2ggY29udGFpbmluZyBhbGwgdGhlIG1vZHVsZXMgdGhhdCBoYXZlIGJlZW4gbG9hZGVkIGludG8gdGhlXG4gKiAkaW5qZWN0b3IuXG4gKlxuICogWW91IGNhbiB1c2UgdGhpcyBwcm9wZXJ0eSB0byBmaW5kIG91dCBpbmZvcm1hdGlvbiBhYm91dCBhIG1vZHVsZSB2aWEgdGhlXG4gKiB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjaW5mbyBgbXlNb2R1bGUuaW5mbyguLi4pYH0gbWV0aG9kLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYFxuICogdmFyIGluZm8gPSAkaW5qZWN0b3IubW9kdWxlc1snbmdBbmltYXRlJ10uaW5mbygpO1xuICogYGBgXG4gKlxuICogKipEbyBub3QgdXNlIHRoaXMgcHJvcGVydHkgdG8gYXR0ZW1wdCB0byBtb2RpZnkgdGhlIG1vZHVsZXMgYWZ0ZXIgdGhlIGFwcGxpY2F0aW9uXG4gKiBoYXMgYmVlbiBib290c3RyYXBwZWQuKipcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2dldFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIGFuIGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZSB0byByZXRyaWV2ZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gY2FsbGVyIEFuIG9wdGlvbmFsIHN0cmluZyB0byBwcm92aWRlIHRoZSBvcmlnaW4gb2YgdGhlIGZ1bmN0aW9uIGNhbGwgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHJldHVybiB7Kn0gVGhlIGluc3RhbmNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2ludm9rZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW52b2tlIHRoZSBtZXRob2QgYW5kIHN1cHBseSB0aGUgbWV0aG9kIGFyZ3VtZW50cyBmcm9tIHRoZSBgJGluamVjdG9yYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBUaGUgaW5qZWN0YWJsZSBmdW5jdGlvbiB0byBpbnZva2UuIEZ1bmN0aW9uIHBhcmFtZXRlcnMgYXJlXG4gKiAgIGluamVjdGVkIGFjY29yZGluZyB0byB0aGUge0BsaW5rIGd1aWRlL2RpICRpbmplY3QgQW5ub3RhdGlvbn0gcnVsZXMuXG4gKiBAcGFyYW0ge09iamVjdD19IHNlbGYgVGhlIGB0aGlzYCBmb3IgdGhlIGludm9rZWQgbWV0aG9kLlxuICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLlxuICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgaW52b2tlZCBgZm5gIGZ1bmN0aW9uLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2hhc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWxsb3dzIHRoZSB1c2VyIHRvIHF1ZXJ5IGlmIHRoZSBwYXJ0aWN1bGFyIHNlcnZpY2UgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGluamVjdG9yIGhhcyBnaXZlbiBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2luc3RhbnRpYXRlXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIGludm9rZXMgdGhlIG5ld1xuICogb3BlcmF0b3IsIGFuZCBzdXBwbGllcyBhbGwgb2YgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gYXMgc3BlY2lmaWVkIGJ5IHRoZVxuICogY29uc3RydWN0b3IgYW5ub3RhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBUeXBlIEFubm90YXRlZCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpc1xuICogb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IG5ldyBpbnN0YW5jZSBvZiBgVHlwZWAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjYW5ub3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VydmljZSBuYW1lcyB3aGljaCB0aGUgZnVuY3Rpb24gaXMgcmVxdWVzdGluZyBmb3IgaW5qZWN0aW9uLiBUaGlzIEFQSSBpc1xuICogdXNlZCBieSB0aGUgaW5qZWN0b3IgdG8gZGV0ZXJtaW5lIHdoaWNoIHNlcnZpY2VzIG5lZWQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24gd2hlbiB0aGVcbiAqIGZ1bmN0aW9uIGlzIGludm9rZWQuIFRoZXJlIGFyZSB0aHJlZSB3YXlzIGluIHdoaWNoIHRoZSBmdW5jdGlvbiBjYW4gYmUgYW5ub3RhdGVkIHdpdGggdGhlIG5lZWRlZFxuICogZGVwZW5kZW5jaWVzLlxuICpcbiAqICMgQXJndW1lbnQgbmFtZXNcbiAqXG4gKiBUaGUgc2ltcGxlc3QgZm9ybSBpcyB0byBleHRyYWN0IHRoZSBkZXBlbmRlbmNpZXMgZnJvbSB0aGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbi4gVGhpcyBpcyBkb25lXG4gKiBieSBjb252ZXJ0aW5nIHRoZSBmdW5jdGlvbiBpbnRvIGEgc3RyaW5nIHVzaW5nIGB0b1N0cmluZygpYCBtZXRob2QgYW5kIGV4dHJhY3RpbmcgdGhlIGFyZ3VtZW50XG4gKiBuYW1lcy5cbiAqIGBgYGpzXG4gKiAgIC8vIEdpdmVuXG4gKiAgIGZ1bmN0aW9uIE15Q29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSkge1xuICogICAgIC8vIC4uLlxuICogICB9XG4gKlxuICogICAvLyBUaGVuXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTtcbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gZGlzYWxsb3cgdGhpcyBtZXRob2QgYnkgdXNpbmcgc3RyaWN0IGluamVjdGlvbiBtb2RlLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHdvcmsgd2l0aCBjb2RlIG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uLiBGb3IgdGhpcyByZWFzb24gdGhlIGZvbGxvd2luZ1xuICogYW5ub3RhdGlvbiBzdHJhdGVnaWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogIyBUaGUgYCRpbmplY3RgIHByb3BlcnR5XG4gKlxuICogSWYgYSBmdW5jdGlvbiBoYXMgYW4gYCRpbmplY3RgIHByb3BlcnR5IGFuZCBpdHMgdmFsdWUgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgdGhlbiB0aGUgc3RyaW5nc1xuICogcmVwcmVzZW50IG5hbWVzIG9mIHNlcnZpY2VzIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uLlxuICogYGBganNcbiAqICAgLy8gR2l2ZW5cbiAqICAgdmFyIE15Q29udHJvbGxlciA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRTY29wZSwgb2JmdXNjYXRlZFJvdXRlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH1cbiAqICAgLy8gRGVmaW5lIGZ1bmN0aW9uIGRlcGVuZGVuY2llc1xuICogICBNeUNvbnRyb2xsZXJbJyRpbmplY3QnXSA9IFsnJHNjb3BlJywgJyRyb3V0ZSddO1xuICpcbiAqICAgLy8gVGhlblxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7XG4gKiBgYGBcbiAqXG4gKiAjIFRoZSBhcnJheSBub3RhdGlvblxuICpcbiAqIEl0IGlzIG9mdGVuIGRlc2lyYWJsZSB0byBpbmxpbmUgSW5qZWN0ZWQgZnVuY3Rpb25zIGFuZCB0aGF0J3Mgd2hlbiBzZXR0aW5nIHRoZSBgJGluamVjdGAgcHJvcGVydHlcbiAqIGlzIHZlcnkgaW5jb252ZW5pZW50LiBJbiB0aGVzZSBzaXR1YXRpb25zIHVzaW5nIHRoZSBhcnJheSBub3RhdGlvbiB0byBzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgaW5cbiAqIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uIGlzIGEgYmV0dGVyIGNob2ljZTpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBXZSB3aXNoIHRvIHdyaXRlIHRoaXMgKG5vdCBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbiBzYWZlKVxuICogICBpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUsICRyb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfSk7XG4gKlxuICogICAvLyBXZSBhcmUgZm9yY2VkIHRvIHdyaXRlIGJyZWFrIGlubGluaW5nXG4gKiAgIHZhciB0bXBGbiA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRDb21waWxlLCBvYmZ1c2NhdGVkUm9vdFNjb3BlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH07XG4gKiAgIHRtcEZuLiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRyb290U2NvcGUnXTtcbiAqICAgaW5qZWN0b3IuaW52b2tlKHRtcEZuKTtcbiAqXG4gKiAgIC8vIFRvIGJldHRlciBzdXBwb3J0IGlubGluZSBmdW5jdGlvbiB0aGUgaW5saW5lIGFubm90YXRpb24gaXMgc3VwcG9ydGVkXG4gKiAgIGluamVjdG9yLmludm9rZShbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZDb21waWxlLCBvYmZSb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfV0pO1xuICpcbiAqICAgLy8gVGhlcmVmb3JlXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShcbiAqICAgICAgWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmdXNfJGNvbXBpbGUsIG9iZnVzXyRyb290U2NvcGUpIHt9XSlcbiAqICAgICkudG9FcXVhbChbJyRjb21waWxlJywgJyRyb290U2NvcGUnXSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBGdW5jdGlvbiBmb3Igd2hpY2ggZGVwZW5kZW50IHNlcnZpY2UgbmFtZXMgbmVlZCB0b1xuICogYmUgcmV0cmlldmVkIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RyaWN0RGk9ZmFsc2VdIERpc2FsbG93IGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gKlxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBUaGUgbmFtZXMgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHRoZSBmdW5jdGlvbiByZXF1aXJlcy5cbiAqL1xuXG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHByb3ZpZGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGEgbnVtYmVyIG9mIG1ldGhvZHMgZm9yIHJlZ2lzdGVyaW5nIGNvbXBvbmVudHNcbiAqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBNYW55IG9mIHRoZXNlIGZ1bmN0aW9ucyBhcmUgYWxzbyBleHBvc2VkIG9uXG4gKiB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9LlxuICpcbiAqIEFuIEFuZ3VsYXIgKipzZXJ2aWNlKiogaXMgYSBzaW5nbGV0b24gb2JqZWN0IGNyZWF0ZWQgYnkgYSAqKnNlcnZpY2UgZmFjdG9yeSoqLiAgVGhlc2UgKipzZXJ2aWNlXG4gKiBmYWN0b3JpZXMqKiBhcmUgZnVuY3Rpb25zIHdoaWNoLCBpbiB0dXJuLCBhcmUgY3JlYXRlZCBieSBhICoqc2VydmljZSBwcm92aWRlcioqLlxuICogVGhlICoqc2VydmljZSBwcm92aWRlcnMqKiBhcmUgY29uc3RydWN0b3IgZnVuY3Rpb25zLiBXaGVuIGluc3RhbnRpYXRlZCB0aGV5IG11c3QgY29udGFpbiBhXG4gKiBwcm9wZXJ0eSBjYWxsZWQgYCRnZXRgLCB3aGljaCBob2xkcyB0aGUgKipzZXJ2aWNlIGZhY3RvcnkqKiBmdW5jdGlvbi5cbiAqXG4gKiBXaGVuIHlvdSByZXF1ZXN0IGEgc2VydmljZSwgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9IGlzIHJlc3BvbnNpYmxlIGZvciBmaW5kaW5nIHRoZVxuICogY29ycmVjdCAqKnNlcnZpY2UgcHJvdmlkZXIqKiwgaW5zdGFudGlhdGluZyBpdCBhbmQgdGhlbiBjYWxsaW5nIGl0cyBgJGdldGAgKipzZXJ2aWNlIGZhY3RvcnkqKlxuICogZnVuY3Rpb24gdG8gZ2V0IHRoZSBpbnN0YW5jZSBvZiB0aGUgKipzZXJ2aWNlKiouXG4gKlxuICogT2Z0ZW4gc2VydmljZXMgaGF2ZSBubyBjb25maWd1cmF0aW9uIG9wdGlvbnMgYW5kIHRoZXJlIGlzIG5vIG5lZWQgdG8gYWRkIG1ldGhvZHMgdG8gdGhlIHNlcnZpY2VcbiAqIHByb3ZpZGVyLiAgVGhlIHByb3ZpZGVyIHdpbGwgYmUgbm8gbW9yZSB0aGFuIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gd2l0aCBhIGAkZ2V0YCBwcm9wZXJ0eS4gRm9yXG4gKiB0aGVzZSBjYXNlcyB0aGUge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGFkZGl0aW9uYWwgaGVscGVyIG1ldGhvZHMgdG8gcmVnaXN0ZXJcbiAqIHNlcnZpY2VzIHdpdGhvdXQgc3BlY2lmeWluZyBhIHByb3ZpZGVyLlxuICpcbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgcHJvdmlkZXIobmFtZSwgcHJvdmlkZXIpfSAtIHJlZ2lzdGVycyBhICoqc2VydmljZSBwcm92aWRlcioqIHdpdGggdGhlXG4gKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn1cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjY29uc3RhbnQgY29uc3RhbnQobmFtZSwgb2JqKX0gLSByZWdpc3RlcnMgYSB2YWx1ZS9vYmplY3QgdGhhdCBjYW4gYmUgYWNjZXNzZWQgYnlcbiAqICAgICBwcm92aWRlcnMgYW5kIHNlcnZpY2VzLlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZShuYW1lLCBvYmopfSAtIHJlZ2lzdGVycyBhIHZhbHVlL29iamVjdCB0aGF0IGNhbiBvbmx5IGJlIGFjY2Vzc2VkIGJ5XG4gKiAgICAgc2VydmljZXMsIG5vdCBwcm92aWRlcnMuXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgZmFjdG9yeShuYW1lLCBmbil9IC0gcmVnaXN0ZXJzIGEgc2VydmljZSAqKmZhY3RvcnkgZnVuY3Rpb24qKlxuICogICAgIHRoYXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogb2JqZWN0LCB3aG9zZSBgJGdldGAgcHJvcGVydHkgd2lsbCBjb250YWluIHRoZVxuICogICAgIGdpdmVuIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZShuYW1lLCBGbil9IC0gcmVnaXN0ZXJzIGEgKipjb25zdHJ1Y3RvciBmdW5jdGlvbioqXG4gKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGluc3RhbnRpYXRlXG4gKiAgICAgIGEgbmV3IG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3IobmFtZSwgZGVjb3JGbil9IC0gcmVnaXN0ZXJzIGEgKipkZWNvcmF0b3IgZnVuY3Rpb24qKiB0aGF0XG4gKiAgICAgIHdpbGwgYmUgYWJsZSB0byBtb2RpZnkgb3IgcmVwbGFjZSB0aGUgaW1wbGVtZW50YXRpb24gb2YgYW5vdGhlciBzZXJ2aWNlLlxuICpcbiAqIFNlZSB0aGUgaW5kaXZpZHVhbCBtZXRob2RzIGZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlcy5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI3Byb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqcHJvdmlkZXIgZnVuY3Rpb24qKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gUHJvdmlkZXIgZnVuY3Rpb25zXG4gKiBhcmUgY29uc3RydWN0b3IgZnVuY3Rpb25zLCB3aG9zZSBpbnN0YW5jZXMgYXJlIHJlc3BvbnNpYmxlIGZvciBcInByb3ZpZGluZ1wiIGEgZmFjdG9yeSBmb3IgYVxuICogc2VydmljZS5cbiAqXG4gKiBTZXJ2aWNlIHByb3ZpZGVyIG5hbWVzIHN0YXJ0IHdpdGggdGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdGhleSBwcm92aWRlIGZvbGxvd2VkIGJ5IGBQcm92aWRlcmAuXG4gKiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2UgaGFzIGEgcHJvdmlkZXIgY2FsbGVkXG4gKiB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyICRsb2dQcm92aWRlcn0uXG4gKlxuICogU2VydmljZSBwcm92aWRlciBvYmplY3RzIGNhbiBoYXZlIGFkZGl0aW9uYWwgbWV0aG9kcyB3aGljaCBhbGxvdyBjb25maWd1cmF0aW9uIG9mIHRoZSBwcm92aWRlclxuICogYW5kIGl0cyBzZXJ2aWNlLiBJbXBvcnRhbnRseSwgeW91IGNhbiBjb25maWd1cmUgd2hhdCBraW5kIG9mIHNlcnZpY2UgaXMgY3JlYXRlZCBieSB0aGUgYCRnZXRgXG4gKiBtZXRob2QsIG9yIGhvdyB0aGF0IHNlcnZpY2Ugd2lsbCBhY3QuIEZvciBleGFtcGxlLCB0aGUge0BsaW5rIG5nLiRsb2dQcm92aWRlciAkbG9nUHJvdmlkZXJ9IGhhcyBhXG4gKiBtZXRob2Qge0BsaW5rIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWQgZGVidWdFbmFibGVkfVxuICogd2hpY2ggbGV0cyB5b3Ugc3BlY2lmeSB3aGV0aGVyIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIHdpbGwgbG9nIGRlYnVnIG1lc3NhZ2VzIHRvIHRoZVxuICogY29uc29sZSBvciBub3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLiBOT1RFOiB0aGUgcHJvdmlkZXIgd2lsbCBiZSBhdmFpbGFibGUgdW5kZXIgYG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1Byb3ZpZGVyJ2Aga2V5LlxuICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKCkpfSBwcm92aWRlciBJZiB0aGUgcHJvdmlkZXIgaXM6XG4gKlxuICogICAtIGBPYmplY3RgOiB0aGVuIGl0IHNob3VsZCBoYXZlIGEgYCRnZXRgIG1ldGhvZC4gVGhlIGAkZ2V0YCBtZXRob2Qgd2lsbCBiZSBpbnZva2VkIHVzaW5nXG4gKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSAkaW5qZWN0b3IuaW52b2tlKCl9IHdoZW4gYW4gaW5zdGFuY2UgbmVlZHMgdG8gYmUgY3JlYXRlZC5cbiAqICAgLSBgQ29uc3RydWN0b3JgOiBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgcHJvdmlkZXIgd2lsbCBiZSBjcmVhdGVkIHVzaW5nXG4gKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yI2luc3RhbnRpYXRlICRpbmplY3Rvci5pbnN0YW50aWF0ZSgpfSwgdGhlbiB0cmVhdGVkIGFzIGBvYmplY3RgLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcblxuICogQGV4YW1wbGVcbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNyZWF0ZSBhIHNpbXBsZSBldmVudCB0cmFja2luZyBzZXJ2aWNlIGFuZCByZWdpc3RlciBpdCB1c2luZ1xuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uXG4gKlxuICogYGBganNcbiAqICAvLyBEZWZpbmUgdGhlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICogIGZ1bmN0aW9uIEV2ZW50VHJhY2tlclByb3ZpZGVyKCkge1xuICogICAgdmFyIHRyYWNraW5nVXJsID0gJy90cmFjayc7XG4gKlxuICogICAgLy8gQSBwcm92aWRlciBtZXRob2QgZm9yIGNvbmZpZ3VyaW5nIHdoZXJlIHRoZSB0cmFja2VkIGV2ZW50cyBzaG91bGQgYmVlbiBzYXZlZFxuICogICAgdGhpcy5zZXRUcmFja2luZ1VybCA9IGZ1bmN0aW9uKHVybCkge1xuICogICAgICB0cmFja2luZ1VybCA9IHVybDtcbiAqICAgIH07XG4gKlxuICogICAgLy8gVGhlIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvblxuICogICAgdGhpcy4kZ2V0ID0gWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XG4gKiAgICAgIHZhciB0cmFja2VkRXZlbnRzID0ge307XG4gKiAgICAgIHJldHVybiB7XG4gKiAgICAgICAgLy8gQ2FsbCB0aGlzIHRvIHRyYWNrIGFuIGV2ZW50XG4gKiAgICAgICAgZXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gKiAgICAgICAgICB2YXIgY291bnQgPSB0cmFja2VkRXZlbnRzW2V2ZW50XSB8fCAwO1xuICogICAgICAgICAgY291bnQgKz0gMTtcbiAqICAgICAgICAgIHRyYWNrZWRFdmVudHNbZXZlbnRdID0gY291bnQ7XG4gKiAgICAgICAgICByZXR1cm4gY291bnQ7XG4gKiAgICAgICAgfSxcbiAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gc2F2ZSB0aGUgdHJhY2tlZCBldmVudHMgdG8gdGhlIHRyYWNraW5nVXJsXG4gKiAgICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAkaHR0cC5wb3N0KHRyYWNraW5nVXJsLCB0cmFja2VkRXZlbnRzKTtcbiAqICAgICAgICB9XG4gKiAgICAgIH07XG4gKiAgICB9XTtcbiAqICB9XG4gKlxuICogIGRlc2NyaWJlKCdldmVudFRyYWNrZXInLCBmdW5jdGlvbigpIHtcbiAqICAgIHZhciBwb3N0U3B5O1xuICpcbiAqICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gKiAgICAgIC8vIFJlZ2lzdGVyIHRoZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAqICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJ2V2ZW50VHJhY2tlcicsIEV2ZW50VHJhY2tlclByb3ZpZGVyKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbihldmVudFRyYWNrZXJQcm92aWRlcikge1xuICogICAgICAvLyBDb25maWd1cmUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gKiAgICAgIGV2ZW50VHJhY2tlclByb3ZpZGVyLnNldFRyYWNraW5nVXJsKCcvY3VzdG9tLXRyYWNrJyk7XG4gKiAgICB9KSk7XG4gKlxuICogICAgaXQoJ3RyYWNrcyBldmVudHMnLCBpbmplY3QoZnVuY3Rpb24oZXZlbnRUcmFja2VyKSB7XG4gKiAgICAgIGV4cGVjdChldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJykpLnRvRXF1YWwoMSk7XG4gKiAgICAgIGV4cGVjdChldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJykpLnRvRXF1YWwoMik7XG4gKiAgICB9KSk7XG4gKlxuICogICAgaXQoJ3NhdmVzIHRvIHRoZSB0cmFja2luZyB1cmwnLCBpbmplY3QoZnVuY3Rpb24oZXZlbnRUcmFja2VyLCAkaHR0cCkge1xuICogICAgICBwb3N0U3B5ID0gc3B5T24oJGh0dHAsICdwb3N0Jyk7XG4gKiAgICAgIGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKTtcbiAqICAgICAgZXZlbnRUcmFja2VyLnNhdmUoKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkubm90LnRvRXF1YWwoJy90cmFjaycpO1xuICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzBdKS50b0VxdWFsKCcvY3VzdG9tLXRyYWNrJyk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMV0pLnRvRXF1YWwoeyAnbG9naW4nOiAxIH0pO1xuICogICAgfSkpO1xuICogIH0pO1xuICogYGBgXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNmYWN0b3J5XG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqc2VydmljZSBmYWN0b3J5KiosIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHRvIHJldHVybiB0aGUgc2VydmljZSBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHMgcHJvdmlkZXIgY29uc2lzdHMgb2Ygb25seSBhIGAkZ2V0YCBwcm9wZXJ0eSxcbiAqIHdoaWNoIGlzIHRoZSBnaXZlbiBzZXJ2aWNlIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiBZb3Ugc2hvdWxkIHVzZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5ICRwcm92aWRlLmZhY3RvcnkoZ2V0Rm4pfSBpZiB5b3UgZG8gbm90IG5lZWQgdG9cbiAqIGNvbmZpZ3VyZSB5b3VyIHNlcnZpY2UgaW4gYSBwcm92aWRlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSAkZ2V0Rm4gVGhlIGluamVjdGFibGUgJGdldEZuIGZvciB0aGUgaW5zdGFuY2UgY3JlYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hbGx5IHRoaXMgaXMgYSBzaG9ydCBoYW5kIGZvciBgJHByb3ZpZGUucHJvdmlkZXIobmFtZSwgeyRnZXQ6ICRnZXRGbn0pYC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBpcyBhbiBleGFtcGxlIG9mIHJlZ2lzdGVyaW5nIGEgc2VydmljZVxuICogYGBganNcbiAqICAgJHByb3ZpZGUuZmFjdG9yeSgncGluZycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xuICogICAgIHJldHVybiBmdW5jdGlvbiBwaW5nKCkge1xuICogICAgICAgcmV0dXJuICRodHRwLnNlbmQoJy9waW5nJyk7XG4gKiAgICAgfTtcbiAqICAgfV0pO1xuICogYGBgXG4gKiBZb3Ugd291bGQgdGhlbiBpbmplY3QgYW5kIHVzZSB0aGlzIHNlcnZpY2UgbGlrZSB0aGlzOlxuICogYGBganNcbiAqICAgc29tZU1vZHVsZS5jb250cm9sbGVyKCdDdHJsJywgWydwaW5nJywgZnVuY3Rpb24ocGluZykge1xuICogICAgIHBpbmcoKTtcbiAqICAgfV0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI3NlcnZpY2VcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGNvbnN0cnVjdG9yKiosIHdoaWNoIHdpbGwgYmUgaW52b2tlZCB3aXRoIGBuZXdgIHRvIGNyZWF0ZSB0aGUgc2VydmljZVxuICogaW5zdGFuY2UuXG4gKiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeVxuICogZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGluc3RhbmNlIGluc3RhbnRpYXRlZCBieSB0aGUgaW5qZWN0b3IgZnJvbSB0aGUgc2VydmljZSBjb25zdHJ1Y3RvclxuICogZnVuY3Rpb24uXG4gKlxuICogSW50ZXJuYWxseSBpdCBsb29rcyBhIGJpdCBsaWtlIHRoaXM6XG4gKlxuICogYGBgXG4gKiB7XG4gKiAgICRnZXQ6IGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKlxuICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0gaWYgeW91IGRlZmluZSB5b3VyIHNlcnZpY2VcbiAqIGFzIGEgdHlwZS9jbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBjb25zdHJ1Y3RvciBBbiBpbmplY3RhYmxlIGNsYXNzIChjb25zdHJ1Y3RvciBmdW5jdGlvbilcbiAqICAgICB0aGF0IHdpbGwgYmUgaW5zdGFudGlhdGVkLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHVzaW5nXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoY2xhc3MpfS5cbiAqIGBgYGpzXG4gKiAgIHZhciBQaW5nID0gZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gKiAgIH07XG4gKlxuICogICBQaW5nLiRpbmplY3QgPSBbJyRodHRwJ107XG4gKlxuICogICBQaW5nLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIHRoaXMuJGh0dHAuZ2V0KCcvcGluZycpO1xuICogICB9O1xuICogICAkcHJvdmlkZS5zZXJ2aWNlKCdwaW5nJywgUGluZyk7XG4gKiBgYGBcbiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6XG4gKiBgYGBqc1xuICogICBzb21lTW9kdWxlLmNvbnRyb2xsZXIoJ0N0cmwnLCBbJ3BpbmcnLCBmdW5jdGlvbihwaW5nKSB7XG4gKiAgICAgcGluZy5zZW5kKCk7XG4gKiAgIH1dKTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSN2YWx1ZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnZhbHVlIHNlcnZpY2UqKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgc3VjaCBhcyBhIHN0cmluZywgYVxuICogbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24uIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHNcbiAqIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB0aGUgKip2YWx1ZVxuICogc2VydmljZSoqLiBUaGF0IGFsc28gbWVhbnMgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGluamVjdCBvdGhlciBzZXJ2aWNlcyBpbnRvIGEgdmFsdWUgc2VydmljZS5cbiAqXG4gKiBWYWx1ZSBzZXJ2aWNlcyBhcmUgc2ltaWxhciB0byBjb25zdGFudCBzZXJ2aWNlcywgZXhjZXB0IHRoYXQgdGhleSBjYW5ub3QgYmUgaW5qZWN0ZWQgaW50byBhXG4gKiBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBidXQgdGhleSBjYW4gYmUgb3ZlcnJpZGRlbiBieVxuICogYW4gQW5ndWxhciB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBhcmUgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyB2YWx1ZSBzZXJ2aWNlcy5cbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLnZhbHVlKCdBRE1JTl9VU0VSJywgJ2FkbWluJyk7XG4gKlxuICogICAkcHJvdmlkZS52YWx1ZSgnUm9sZUxvb2t1cCcsIHsgYWRtaW46IDAsIHdyaXRlcjogMSwgcmVhZGVyOiAyIH0pO1xuICpcbiAqICAgJHByb3ZpZGUudmFsdWUoJ2hhbGZPZicsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlIC8gMjtcbiAqICAgfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjY29uc3RhbnRcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipjb25zdGFudCBzZXJ2aWNlKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0sIHN1Y2ggYXMgYSBzdHJpbmcsXG4gKiBhIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLiBMaWtlIHRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZX0sIGl0IGlzIG5vdFxuICogcG9zc2libGUgdG8gaW5qZWN0IG90aGVyIHNlcnZpY2VzIGludG8gYSBjb25zdGFudC5cbiAqXG4gKiBCdXQgdW5saWtlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlfSwgYSBjb25zdGFudCBjYW4gYmVcbiAqIGluamVjdGVkIGludG8gYSBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBhbmQgaXQgY2Fubm90XG4gKiBiZSBvdmVycmlkZGVuIGJ5IGFuIEFuZ3VsYXIge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbnN0YW50LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgY29uc3RhbnQgdmFsdWUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgYSBzb21lIGV4YW1wbGVzIG9mIGNyZWF0aW5nIGNvbnN0YW50czpcbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmNvbnN0YW50KCdTSEFSRF9IRUlHSFQnLCAzMDYpO1xuICpcbiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ01ZX0NPTE9VUlMnLCBbJ3JlZCcsICdibHVlJywgJ2dyZXknXSk7XG4gKlxuICogICAkcHJvdmlkZS5jb25zdGFudCgnZG91YmxlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICByZXR1cm4gdmFsdWUgKiAyO1xuICogICB9KTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNkZWNvcmF0b3JcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipkZWNvcmF0b3IgZnVuY3Rpb24qKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gQSBkZWNvcmF0b3IgZnVuY3Rpb25cbiAqIGludGVyY2VwdHMgdGhlIGNyZWF0aW9uIG9mIGEgc2VydmljZSwgYWxsb3dpbmcgaXQgdG8gb3ZlcnJpZGUgb3IgbW9kaWZ5IHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIHNlcnZpY2UuIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGRlY29yYXRvciBmdW5jdGlvbiBtYXkgYmUgdGhlIG9yaWdpbmFsIHNlcnZpY2UsIG9yIGEgbmV3IHNlcnZpY2VcbiAqIHRoYXQgcmVwbGFjZXMgKG9yIHdyYXBzIGFuZCBkZWxlZ2F0ZXMgdG8pIHRoZSBvcmlnaW5hbCBzZXJ2aWNlLlxuICpcbiAqIFlvdSBjYW4gZmluZCBvdXQgbW9yZSBhYm91dCB1c2luZyBkZWNvcmF0b3JzIGluIHRoZSB7QGxpbmsgZ3VpZGUvZGVjb3JhdG9yc30gZ3VpZGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBkZWNvcmF0b3IgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZVxuICogICAgcHJvdmlkZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHVzaW5nXG4gKiAgICB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3Rvci5pbnZva2V9IG1ldGhvZCBhbmQgaXMgdGhlcmVmb3JlIGZ1bGx5IGluamVjdGFibGUuXG4gKiAgICBMb2NhbCBpbmplY3Rpb24gYXJndW1lbnRzOlxuICpcbiAqICAgICogYCRkZWxlZ2F0ZWAgLSBUaGUgb3JpZ2luYWwgc2VydmljZSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIHJlcGxhY2VkLCBtb25rZXkgcGF0Y2hlZCwgY29uZmlndXJlZCxcbiAqICAgICAgZGVjb3JhdGVkIG9yIGRlbGVnYXRlZCB0by5cbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSB3ZSBkZWNvcmF0ZSB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSB0byBjb252ZXJ0IHdhcm5pbmdzIHRvIGVycm9ycyBieSBpbnRlcmNlcHRpbmdcbiAqIGNhbGxzIHRvIHtAbGluayBuZy4kbG9nI2Vycm9yICRsb2cud2FybigpfS5cbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmRlY29yYXRvcignJGxvZycsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24oJGRlbGVnYXRlKSB7XG4gKiAgICAgJGRlbGVnYXRlLndhcm4gPSAkZGVsZWdhdGUuZXJyb3I7XG4gKiAgICAgcmV0dXJuICRkZWxlZ2F0ZTtcbiAqICAgfV0pO1xuICogYGBgXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVJbmplY3Rvcihtb2R1bGVzVG9Mb2FkLCBzdHJpY3REaSkge1xuICBzdHJpY3REaSA9IChzdHJpY3REaSA9PT0gdHJ1ZSk7XG4gIHZhciBJTlNUQU5USUFUSU5HID0ge30sXG4gICAgICBwcm92aWRlclN1ZmZpeCA9ICdQcm92aWRlcicsXG4gICAgICBwYXRoID0gW10sXG4gICAgICBsb2FkZWRNb2R1bGVzID0gbmV3IE5nTWFwKCksXG4gICAgICBwcm92aWRlckNhY2hlID0ge1xuICAgICAgICAkcHJvdmlkZToge1xuICAgICAgICAgICAgcHJvdmlkZXI6IHN1cHBvcnRPYmplY3QocHJvdmlkZXIpLFxuICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSxcbiAgICAgICAgICAgIHNlcnZpY2U6IHN1cHBvcnRPYmplY3Qoc2VydmljZSksXG4gICAgICAgICAgICB2YWx1ZTogc3VwcG9ydE9iamVjdCh2YWx1ZSksXG4gICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksXG4gICAgICAgICAgICBkZWNvcmF0b3I6IGRlY29yYXRvclxuICAgICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm92aWRlckluamVjdG9yID0gKHByb3ZpZGVyQ2FjaGUuJGluamVjdG9yID1cbiAgICAgICAgICBjcmVhdGVJbnRlcm5hbEluamVjdG9yKHByb3ZpZGVyQ2FjaGUsIGZ1bmN0aW9uKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGNhbGxlcikpIHtcbiAgICAgICAgICAgICAgcGF0aC5wdXNoKGNhbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VucHInLCAnVW5rbm93biBwcm92aWRlcjogezB9JywgcGF0aC5qb2luKCcgPC0gJykpO1xuICAgICAgICAgIH0pKSxcbiAgICAgIGluc3RhbmNlQ2FjaGUgPSB7fSxcbiAgICAgIHByb3RvSW5zdGFuY2VJbmplY3RvciA9XG4gICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3RvcihpbnN0YW5jZUNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlTmFtZSwgY2FsbGVyKSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4LCBjYWxsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyLiRnZXQsIHByb3ZpZGVyLCB1bmRlZmluZWQsIHNlcnZpY2VOYW1lKTtcbiAgICAgICAgICB9KSxcbiAgICAgIGluc3RhbmNlSW5qZWN0b3IgPSBwcm90b0luc3RhbmNlSW5qZWN0b3I7XG5cbiAgcHJvdmlkZXJDYWNoZVsnJGluamVjdG9yJyArIHByb3ZpZGVyU3VmZml4XSA9IHsgJGdldDogdmFsdWVGbihwcm90b0luc3RhbmNlSW5qZWN0b3IpIH07XG4gIGluc3RhbmNlSW5qZWN0b3IubW9kdWxlcyA9IHByb3ZpZGVySW5qZWN0b3IubW9kdWxlcyA9IGNyZWF0ZU1hcCgpO1xuICB2YXIgcnVuQmxvY2tzID0gbG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCk7XG4gIGluc3RhbmNlSW5qZWN0b3IgPSBwcm90b0luc3RhbmNlSW5qZWN0b3IuZ2V0KCckaW5qZWN0b3InKTtcbiAgaW5zdGFuY2VJbmplY3Rvci5zdHJpY3REaSA9IHN0cmljdERpO1xuICBmb3JFYWNoKHJ1bkJsb2NrcywgZnVuY3Rpb24oZm4pIHsgaWYgKGZuKSBpbnN0YW5jZUluamVjdG9yLmludm9rZShmbik7IH0pO1xuXG4gIHJldHVybiBpbnN0YW5jZUluamVjdG9yO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyAkcHJvdmlkZXJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgZnVuY3Rpb24gc3VwcG9ydE9iamVjdChkZWxlZ2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICBmb3JFYWNoKGtleSwgcmV2ZXJzZVBhcmFtcyhkZWxlZ2F0ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm92aWRlcihuYW1lLCBwcm92aWRlcl8pIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnc2VydmljZScpO1xuICAgIGlmIChpc0Z1bmN0aW9uKHByb3ZpZGVyXykgfHwgaXNBcnJheShwcm92aWRlcl8pKSB7XG4gICAgICBwcm92aWRlcl8gPSBwcm92aWRlckluamVjdG9yLmluc3RhbnRpYXRlKHByb3ZpZGVyXyk7XG4gICAgfVxuICAgIGlmICghcHJvdmlkZXJfLiRnZXQpIHtcbiAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycigncGdldCcsICdQcm92aWRlciBcXCd7MH1cXCcgbXVzdCBkZWZpbmUgJGdldCBmYWN0b3J5IG1ldGhvZC4nLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIChwcm92aWRlckNhY2hlW25hbWUgKyBwcm92aWRlclN1ZmZpeF0gPSBwcm92aWRlcl8pO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5mb3JjZVJldHVyblZhbHVlKG5hbWUsIGZhY3RvcnkpIHtcbiAgICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uIGVuZm9yY2VkUmV0dXJuVmFsdWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZmFjdG9yeSwgdGhpcyk7XG4gICAgICBpZiAoaXNVbmRlZmluZWQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VuZGVmJywgJ1Byb3ZpZGVyIFxcJ3swfVxcJyBtdXN0IHJldHVybiBhIHZhbHVlIGZyb20gJGdldCBmYWN0b3J5IG1ldGhvZC4nLCBuYW1lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZhY3RvcnkobmFtZSwgZmFjdG9yeUZuLCBlbmZvcmNlKSB7XG4gICAgcmV0dXJuIHByb3ZpZGVyKG5hbWUsIHtcbiAgICAgICRnZXQ6IGVuZm9yY2UgIT09IGZhbHNlID8gZW5mb3JjZVJldHVyblZhbHVlKG5hbWUsIGZhY3RvcnlGbikgOiBmYWN0b3J5Rm5cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcnZpY2UobmFtZSwgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gZmFjdG9yeShuYW1lLCBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5pbnN0YW50aWF0ZShjb25zdHJ1Y3Rvcik7XG4gICAgfV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsdWUobmFtZSwgdmFsKSB7IHJldHVybiBmYWN0b3J5KG5hbWUsIHZhbHVlRm4odmFsKSwgZmFsc2UpOyB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnY29uc3RhbnQnKTtcbiAgICBwcm92aWRlckNhY2hlW25hbWVdID0gdmFsdWU7XG4gICAgaW5zdGFuY2VDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVjb3JhdG9yKHNlcnZpY2VOYW1lLCBkZWNvckZuKSB7XG4gICAgdmFyIG9yaWdQcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lICsgcHJvdmlkZXJTdWZmaXgpLFxuICAgICAgICBvcmlnJGdldCA9IG9yaWdQcm92aWRlci4kZ2V0O1xuXG4gICAgb3JpZ1Byb3ZpZGVyLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcmlnSW5zdGFuY2UgPSBpbnN0YW5jZUluamVjdG9yLmludm9rZShvcmlnJGdldCwgb3JpZ1Byb3ZpZGVyKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShkZWNvckZuLCBudWxsLCB7JGRlbGVnYXRlOiBvcmlnSW5zdGFuY2V9KTtcbiAgICB9O1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1vZHVsZSBMb2FkaW5nXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBmdW5jdGlvbiBsb2FkTW9kdWxlcyhtb2R1bGVzVG9Mb2FkKSB7XG4gICAgYXNzZXJ0QXJnKGlzVW5kZWZpbmVkKG1vZHVsZXNUb0xvYWQpIHx8IGlzQXJyYXkobW9kdWxlc1RvTG9hZCksICdtb2R1bGVzVG9Mb2FkJywgJ25vdCBhbiBhcnJheScpO1xuICAgIHZhciBydW5CbG9ja3MgPSBbXSwgbW9kdWxlRm47XG4gICAgZm9yRWFjaChtb2R1bGVzVG9Mb2FkLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIGlmIChsb2FkZWRNb2R1bGVzLmdldChtb2R1bGUpKSByZXR1cm47XG4gICAgICBsb2FkZWRNb2R1bGVzLnNldChtb2R1bGUsIHRydWUpO1xuXG4gICAgICBmdW5jdGlvbiBydW5JbnZva2VRdWV1ZShxdWV1ZSkge1xuICAgICAgICB2YXIgaSwgaWk7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcXVldWUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhciBpbnZva2VBcmdzID0gcXVldWVbaV0sXG4gICAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoaW52b2tlQXJnc1swXSk7XG5cbiAgICAgICAgICBwcm92aWRlcltpbnZva2VBcmdzWzFdXS5hcHBseShwcm92aWRlciwgaW52b2tlQXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1vZHVsZSkpIHtcbiAgICAgICAgICBtb2R1bGVGbiA9IGFuZ3VsYXJNb2R1bGUobW9kdWxlKTtcbiAgICAgICAgICBpbnN0YW5jZUluamVjdG9yLm1vZHVsZXNbbW9kdWxlXSA9IG1vZHVsZUZuO1xuICAgICAgICAgIHJ1bkJsb2NrcyA9IHJ1bkJsb2Nrcy5jb25jYXQobG9hZE1vZHVsZXMobW9kdWxlRm4ucmVxdWlyZXMpKS5jb25jYXQobW9kdWxlRm4uX3J1bkJsb2Nrcyk7XG4gICAgICAgICAgcnVuSW52b2tlUXVldWUobW9kdWxlRm4uX2ludm9rZVF1ZXVlKTtcbiAgICAgICAgICBydW5JbnZva2VRdWV1ZShtb2R1bGVGbi5fY29uZmlnQmxvY2tzKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG1vZHVsZSkpIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzZXJ0QXJnRm4obW9kdWxlLCAnbW9kdWxlJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZVttb2R1bGUubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUubWVzc2FnZSAmJiBlLnN0YWNrICYmIGUuc3RhY2suaW5kZXhPZihlLm1lc3NhZ2UpID09PSAtMSkge1xuICAgICAgICAgIC8vIFNhZmFyaSAmIEZGJ3Mgc3RhY2sgdHJhY2VzIGRvbid0IGNvbnRhaW4gZXJyb3IubWVzc2FnZSBjb250ZW50XG4gICAgICAgICAgLy8gdW5saWtlIHRob3NlIG9mIENocm9tZSBhbmQgSUVcbiAgICAgICAgICAvLyBTbyBpZiBzdGFjayBkb2Vzbid0IGNvbnRhaW4gbWVzc2FnZSwgd2UgY3JlYXRlIGEgbmV3IHN0cmluZyB0aGF0IGNvbnRhaW5zIGJvdGguXG4gICAgICAgICAgLy8gU2luY2UgZXJyb3Iuc3RhY2sgaXMgcmVhZC1vbmx5IGluIFNhZmFyaSwgSSdtIG92ZXJyaWRpbmcgZSBhbmQgbm90IGUuc3RhY2sgaGVyZS5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXgtYXNzaWduXG4gICAgICAgICAgZSA9IGUubWVzc2FnZSArICdcXG4nICsgZS5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ21vZHVsZXJyJywgJ0ZhaWxlZCB0byBpbnN0YW50aWF0ZSBtb2R1bGUgezB9IGR1ZSB0bzpcXG57MX0nLFxuICAgICAgICAgICAgICAgICAgbW9kdWxlLCBlLnN0YWNrIHx8IGUubWVzc2FnZSB8fCBlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcnVuQmxvY2tzO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIGludGVybmFsIEluamVjdG9yXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoY2FjaGUsIGZhY3RvcnkpIHtcblxuICAgIGZ1bmN0aW9uIGdldFNlcnZpY2Uoc2VydmljZU5hbWUsIGNhbGxlcikge1xuICAgICAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KHNlcnZpY2VOYW1lKSkge1xuICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdjZGVwJywgJ0NpcmN1bGFyIGRlcGVuZGVuY3kgZm91bmQ6IHswfScsXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lICsgJyA8LSAnICsgcGF0aC5qb2luKCcgPC0gJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHBhdGgudW5zaGlmdChzZXJ2aWNlTmFtZSk7XG4gICAgICAgICAgY2FjaGVbc2VydmljZU5hbWVdID0gSU5TVEFOVElBVElORztcbiAgICAgICAgICBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBmYWN0b3J5KHNlcnZpY2VOYW1lLCBjYWxsZXIpO1xuICAgICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChjYWNoZVtzZXJ2aWNlTmFtZV0gPT09IElOU1RBTlRJQVRJTkcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBwYXRoLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGluamVjdGlvbkFyZ3MoZm4sIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgJGluamVjdCA9IGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUoZm4sIHN0cmljdERpLCBzZXJ2aWNlTmFtZSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSAkaW5qZWN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSAkaW5qZWN0W2ldO1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ2l0a24nLFxuICAgICAgICAgICAgICAgICAgJ0luY29ycmVjdCBpbmplY3Rpb24gdG9rZW4hIEV4cGVjdGVkIHNlcnZpY2UgbmFtZSBhcyBzdHJpbmcsIGdvdCB7MH0nLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MucHVzaChsb2NhbHMgJiYgbG9jYWxzLmhhc093blByb3BlcnR5KGtleSkgPyBsb2NhbHNba2V5XSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRTZXJ2aWNlKGtleSwgc2VydmljZU5hbWUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmdzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQ2xhc3MoZnVuYykge1xuICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gICAgICAvLyBJRSA5LTExIGRvIG5vdCBzdXBwb3J0IGNsYXNzZXMgYW5kIElFOSBsZWFrcyB3aXRoIHRoZSBjb2RlIGJlbG93LlxuICAgICAgaWYgKG1zaWUgfHwgdHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuJCRuZ0lzQ2xhc3M7XG4gICAgICBpZiAoIWlzQm9vbGVhbihyZXN1bHQpKSB7XG4gICAgICAgIC8vIFN1cHBvcnQ6IEVkZ2UgMTItMTMgb25seVxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzYxNTYxMzUvXG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuJCRuZ0lzQ2xhc3MgPSAvXig/OmNsYXNzXFxifGNvbnN0cnVjdG9yXFwoKS8udGVzdChzdHJpbmdpZnlGbihmdW5jKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludm9rZShmbiwgc2VsZiwgbG9jYWxzLCBzZXJ2aWNlTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiBsb2NhbHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNlcnZpY2VOYW1lID0gbG9jYWxzO1xuICAgICAgICBsb2NhbHMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXJncyA9IGluamVjdGlvbkFyZ3MoZm4sIGxvY2Fscywgc2VydmljZU5hbWUpO1xuICAgICAgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgICAgIGZuID0gZm5bZm4ubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNDbGFzcyhmbikpIHtcbiAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLWludm9rZS1hcHBseS12cy1zd2l0Y2hcbiAgICAgICAgLy8gIzUzODhcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJncy51bnNoaWZ0KG51bGwpO1xuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShmbiwgYXJncykpKCk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbnN0YW50aWF0ZShUeXBlLCBsb2NhbHMsIHNlcnZpY2VOYW1lKSB7XG4gICAgICAvLyBDaGVjayBpZiBUeXBlIGlzIGFubm90YXRlZCBhbmQgdXNlIGp1c3QgdGhlIGdpdmVuIGZ1bmN0aW9uIGF0IG4tMSBhcyBwYXJhbWV0ZXJcbiAgICAgIC8vIGUuZy4gc29tZU1vZHVsZS5mYWN0b3J5KCdncmVldGVyJywgWyckd2luZG93JywgZnVuY3Rpb24ocmVuYW1lZCR3aW5kb3cpIHt9XSk7XG4gICAgICB2YXIgY3RvciA9IChpc0FycmF5KFR5cGUpID8gVHlwZVtUeXBlLmxlbmd0aCAtIDFdIDogVHlwZSk7XG4gICAgICB2YXIgYXJncyA9IGluamVjdGlvbkFyZ3MoVHlwZSwgbG9jYWxzLCBzZXJ2aWNlTmFtZSk7XG4gICAgICAvLyBFbXB0eSBvYmplY3QgYXQgcG9zaXRpb24gMCBpcyBpZ25vcmVkIGZvciBpbnZvY2F0aW9uIHdpdGggYG5ld2AsIGJ1dCByZXF1aXJlZC5cbiAgICAgIGFyZ3MudW5zaGlmdChudWxsKTtcbiAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KGN0b3IsIGFyZ3MpKSgpO1xuICAgIH1cblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGludm9rZTogaW52b2tlLFxuICAgICAgaW5zdGFudGlhdGU6IGluc3RhbnRpYXRlLFxuICAgICAgZ2V0OiBnZXRTZXJ2aWNlLFxuICAgICAgYW5ub3RhdGU6IGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUsXG4gICAgICBoYXM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSArIHByb3ZpZGVyU3VmZml4KSB8fCBjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUgPSBhbm5vdGF0ZTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhbmNob3JTY3JvbGxQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGFuY2hvclNjcm9sbFByb3ZpZGVyYCB0byBkaXNhYmxlIGF1dG9tYXRpYyBzY3JvbGxpbmcgd2hlbmV2ZXJcbiAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIoKSB7XG5cbiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmdcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJ5IGRlZmF1bHQsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gd2lsbCBhdXRvbWF0aWNhbGx5IGRldGVjdCBjaGFuZ2VzIHRvXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgc2Nyb2xsIHRvIHRoZSBlbGVtZW50IG1hdGNoaW5nIHRoZSBuZXcgaGFzaC48YnIgLz5cbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIGRpc2FibGUgYXV0b21hdGljIHNjcm9sbGluZy5cbiAgICpcbiAgICogSWYgYXV0b21hdGljIHNjcm9sbGluZyBpcyBkaXNhYmxlZCwgb25lIG11c3QgZXhwbGljaXRseSBjYWxsXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gaW4gb3JkZXIgdG8gc2Nyb2xsIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlXG4gICAqIGN1cnJlbnQgaGFzaC5cbiAgICovXG4gIHRoaXMuZGlzYWJsZUF1dG9TY3JvbGxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqIEByZXF1aXJlcyAkd2luZG93XG4gICAqIEByZXF1aXJlcyAkbG9jYXRpb25cbiAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdoZW4gY2FsbGVkLCBpdCBzY3JvbGxzIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlIHNwZWNpZmllZCBgaGFzaGAgb3IgKGlmIG9taXR0ZWQpIHRvIHRoZVxuICAgKiBjdXJyZW50IHZhbHVlIG9mIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSwgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBzcGVjaWZpZWRcbiAgICogaW4gdGhlXG4gICAqIFtIVE1MNSBzcGVjXShodHRwOi8vd3d3LnczLm9yZy9odG1sL3dnL2RyYWZ0cy9odG1sL21hc3Rlci9icm93c2Vycy5odG1sI2FuLWluZGljYXRlZC1wYXJ0LW9mLXRoZS1kb2N1bWVudCkuXG4gICAqXG4gICAqIEl0IGFsc28gd2F0Y2hlcyB0aGUge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGFuZCBhdXRvbWF0aWNhbGx5IHNjcm9sbHMgdG9cbiAgICogbWF0Y2ggYW55IGFuY2hvciB3aGVuZXZlciBpdCBjaGFuZ2VzLiBUaGlzIGNhbiBiZSBkaXNhYmxlZCBieSBjYWxsaW5nXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmcgJGFuY2hvclNjcm9sbFByb3ZpZGVyLmRpc2FibGVBdXRvU2Nyb2xsaW5nKCl9LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gdXNlIGl0cyB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCN5T2Zmc2V0IHlPZmZzZXR9IHByb3BlcnR5IHRvIHNwZWNpZnkgYVxuICAgKiB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChlaXRoZXIgZml4ZWQgb3IgZHluYW1pYykuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaGFzaCBUaGUgaGFzaCBzcGVjaWZ5aW5nIHRoZSBlbGVtZW50IHRvIHNjcm9sbCB0by4gSWYgb21pdHRlZCwgdGhlIHZhbHVlIG9mXG4gICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBAcHJvcGVydHkgeyhudW1iZXJ8ZnVuY3Rpb258anFMaXRlKX0geU9mZnNldFxuICAgKiBJZiBzZXQsIHNwZWNpZmllcyBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQuIFRoaXMgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gdGhlcmUgYXJlIGZpeGVkXG4gICAqIHBvc2l0aW9uZWQgZWxlbWVudHMgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZSwgc3VjaCBhcyBuYXZiYXJzLCBoZWFkZXJzIGV0Yy5cbiAgICpcbiAgICogYHlPZmZzZXRgIGNhbiBiZSBzcGVjaWZpZWQgaW4gdmFyaW91cyB3YXlzOlxuICAgKiAtICoqbnVtYmVyKio6IEEgZml4ZWQgbnVtYmVyIG9mIHBpeGVscyB0byBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz48YnIgLz5cbiAgICogLSAqKmZ1bmN0aW9uKio6IEEgZ2V0dGVyIGZ1bmN0aW9uIGNhbGxlZCBldmVyeXRpbWUgYCRhbmNob3JTY3JvbGwoKWAgaXMgZXhlY3V0ZWQuIE11c3QgcmV0dXJuXG4gICAqICAgYSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvZmZzZXQgKGluIHBpeGVscykuPGJyIC8+PGJyIC8+XG4gICAqIC0gKipqcUxpdGUqKjogQSBqcUxpdGUvalF1ZXJ5IGVsZW1lbnQgdG8gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGUgb2Zmc2V0LiBUaGUgZGlzdGFuY2UgZnJvbVxuICAgKiAgIHRoZSB0b3Agb2YgdGhlIHBhZ2UgdG8gdGhlIGVsZW1lbnQncyBib3R0b20gd2lsbCBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz5cbiAgICogICAqKk5vdGUqKjogVGhlIGVsZW1lbnQgd2lsbCBiZSB0YWtlbiBpbnRvIGFjY291bnQgb25seSBhcyBsb25nIGFzIGl0cyBgcG9zaXRpb25gIGlzIHNldCB0b1xuICAgKiAgIGBmaXhlZGAuIFRoaXMgb3B0aW9uIGlzIHVzZWZ1bCwgd2hlbiBkZWFsaW5nIHdpdGggcmVzcG9uc2l2ZSBuYXZiYXJzL2hlYWRlcnMgdGhhdCBhZGp1c3RcbiAgICogICB0aGVpciBoZWlnaHQgYW5kL29yIHBvc2l0aW9uaW5nIGFjY29yZGluZyB0byB0aGUgdmlld3BvcnQncyBzaXplLlxuICAgKlxuICAgKiA8YnIgLz5cbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogSW4gb3JkZXIgZm9yIGB5T2Zmc2V0YCB0byB3b3JrIHByb3Blcmx5LCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgcGxhY2Ugb24gdGhlIGRvY3VtZW50J3Mgcm9vdCBhbmRcbiAgICogbm90IHNvbWUgY2hpbGQgZWxlbWVudC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvclNjcm9sbEV4YW1wbGVcIiBuYW1lPVwiYW5jaG9yLXNjcm9sbFwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IGlkPVwic2Nyb2xsQXJlYVwiIG5nLWNvbnRyb2xsZXI9XCJTY3JvbGxDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxhIG5nLWNsaWNrPVwiZ290b0JvdHRvbSgpXCI+R28gdG8gYm90dG9tPC9hPlxuICAgICAgICAgICA8YSBpZD1cImJvdHRvbVwiPjwvYT4gWW91J3JlIGF0IHRoZSBib3R0b20hXG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2FuY2hvclNjcm9sbEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ1Njcm9sbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJGFuY2hvclNjcm9sbCcsXG4gICAgICAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sICRhbmNob3JTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5nb3RvQm90dG9tID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgbG9jYXRpb24uaGFzaCB0byB0aGUgaWQgb2ZcbiAgICAgICAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgeW91IHdpc2ggdG8gc2Nyb2xsIHRvLlxuICAgICAgICAgICAgICAgICAkbG9jYXRpb24uaGFzaCgnYm90dG9tJyk7XG5cbiAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKClcbiAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgICNzY3JvbGxBcmVhIHtcbiAgICAgICAgICAgaGVpZ2h0OiAyODBweDtcbiAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgICB9XG5cbiAgICAgICAgICNib3R0b20ge1xuICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgbWFyZ2luLXRvcDogMjAwMHB4O1xuICAgICAgICAgfVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKlxuICAgKiA8aHIgLz5cbiAgICogVGhlIGV4YW1wbGUgYmVsb3cgaWxsdXN0cmF0ZXMgdGhlIHVzZSBvZiBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQgKHNwZWNpZmllZCBhcyBhIGZpeGVkIHZhbHVlKS5cbiAgICogU2VlIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsI3lPZmZzZXQgJGFuY2hvclNjcm9sbC55T2Zmc2V0fSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJhbmNob3JTY3JvbGxPZmZzZXRFeGFtcGxlXCIgbmFtZT1cImFuY2hvci1zY3JvbGwtb2Zmc2V0XCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJmaXhlZC1oZWFkZXJcIiBuZy1jb250cm9sbGVyPVwiaGVhZGVyQ3RybFwiPlxuICAgICAgICAgICA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJnb3RvQW5jaG9yKHgpXCIgbmctcmVwZWF0PVwieCBpbiBbMSwyLDMsNCw1XVwiPlxuICAgICAgICAgICAgIEdvIHRvIGFuY2hvciB7e3h9fVxuICAgICAgICAgICA8L2E+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDxkaXYgaWQ9XCJhbmNob3J7e3h9fVwiIGNsYXNzPVwiYW5jaG9yXCIgbmctcmVwZWF0PVwieCBpbiBbMSwyLDMsNCw1XVwiPlxuICAgICAgICAgICBBbmNob3Ige3t4fX0gb2YgNVxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxPZmZzZXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5ydW4oWyckYW5jaG9yU2Nyb2xsJywgZnVuY3Rpb24oJGFuY2hvclNjcm9sbCkge1xuICAgICAgICAgICAgICRhbmNob3JTY3JvbGwueU9mZnNldCA9IDUwOyAgIC8vIGFsd2F5cyBzY3JvbGwgYnkgNTAgZXh0cmEgcGl4ZWxzXG4gICAgICAgICAgIH1dKVxuICAgICAgICAgICAuY29udHJvbGxlcignaGVhZGVyQ3RybCcsIFsnJGFuY2hvclNjcm9sbCcsICckbG9jYXRpb24nLCAnJHNjb3BlJyxcbiAgICAgICAgICAgICBmdW5jdGlvbigkYW5jaG9yU2Nyb2xsLCAkbG9jYXRpb24sICRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9BbmNob3IgPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgIHZhciBuZXdIYXNoID0gJ2FuY2hvcicgKyB4O1xuICAgICAgICAgICAgICAgICBpZiAoJGxvY2F0aW9uLmhhc2goKSAhPT0gbmV3SGFzaCkge1xuICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgJGxvY2F0aW9uLmhhc2ggdG8gYG5ld0hhc2hgIGFuZFxuICAgICAgICAgICAgICAgICAgIC8vICRhbmNob3JTY3JvbGwgd2lsbCBhdXRvbWF0aWNhbGx5IHNjcm9sbCB0byBpdFxuICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdhbmNob3InICsgeCk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKCkgZXhwbGljaXRseSxcbiAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSAkbG9jYXRpb24uaGFzaCBoYXNuJ3QgY2hhbmdlZFxuICAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIF0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICBib2R5IHtcbiAgICAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5hbmNob3Ige1xuICAgICAgICAgICBib3JkZXI6IDJweCBkYXNoZWQgRGFya09yY2hpZDtcbiAgICAgICAgICAgcGFkZGluZzogMTBweCAxMHB4IDIwMHB4IDEwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5maXhlZC1oZWFkZXIge1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICB0b3A6IDA7IGxlZnQ6IDA7IHJpZ2h0OiAwO1xuICAgICAgICAgfVxuXG4gICAgICAgICAuZml4ZWQtaGVhZGVyID4gYSB7XG4gICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgbWFyZ2luOiA1cHggMTVweDtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCR3aW5kb3csICRsb2NhdGlvbiwgJHJvb3RTY29wZSkge1xuICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7XG5cbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGZpcnN0IGFuY2hvciBmcm9tIGEgTm9kZUxpc3RcbiAgICAvLyAodXNpbmcgYEFycmF5I3NvbWUoKWAgaW5zdGVhZCBvZiBgYW5ndWxhciNmb3JFYWNoKClgIHNpbmNlIGl0J3MgbW9yZSBwZXJmb3JtYW50XG4gICAgLy8gIGFuZCB3b3JraW5nIGluIGFsbCBzdXBwb3J0ZWQgYnJvd3NlcnMuKVxuICAgIGZ1bmN0aW9uIGdldEZpcnN0QW5jaG9yKGxpc3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChsaXN0LCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIGlmIChub2RlTmFtZV8oZWxlbWVudCkgPT09ICdhJykge1xuICAgICAgICAgIHJlc3VsdCA9IGVsZW1lbnQ7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRZT2Zmc2V0KCkge1xuXG4gICAgICB2YXIgb2Zmc2V0ID0gc2Nyb2xsLnlPZmZzZXQ7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0KCk7XG4gICAgICB9IGVsc2UgaWYgKGlzRWxlbWVudChvZmZzZXQpKSB7XG4gICAgICAgIHZhciBlbGVtID0gb2Zmc2V0WzBdO1xuICAgICAgICB2YXIgc3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWlzTnVtYmVyKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxUbyhlbGVtKSB7XG4gICAgICBpZiAoZWxlbSkge1xuICAgICAgICBlbGVtLnNjcm9sbEludG9WaWV3KCk7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IGdldFlPZmZzZXQoKTtcblxuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgLy8gYG9mZnNldGAgaXMgdGhlIG51bWJlciBvZiBwaXhlbHMgd2Ugc2hvdWxkIHNjcm9sbCBVUCBpbiBvcmRlciB0byBhbGlnbiBgZWxlbWAgcHJvcGVybHkuXG4gICAgICAgICAgLy8gVGhpcyBpcyB0cnVlIE9OTFkgaWYgdGhlIGNhbGwgdG8gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgaW5pdGlhbGx5IGFsaWducyBgZWxlbWAgYXQgdGhlXG4gICAgICAgICAgLy8gdG9wIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIElGIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGZyb20gdGhlIHRvcCBvZiBgZWxlbWAgdG8gdGhlIGVuZCBvZiB0aGUgcGFnZSdzIGNvbnRlbnQgaXMgbGVzc1xuICAgICAgICAgIC8vIHRoYW4gdGhlIGhlaWdodCBvZiB0aGUgdmlld3BvcnQsIHRoZW4gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgd2lsbCBhbGlnbiB0aGUgYGVsZW1gIHNvbWVcbiAgICAgICAgICAvLyB3YXkgZG93biB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFRoaXMgaXMgb2Z0ZW4gdGhlIGNhc2UgZm9yIGVsZW1lbnRzIG5lYXIgdGhlIGJvdHRvbSBvZiB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEluIHN1Y2ggY2FzZXMgd2UgZG8gbm90IG5lZWQgdG8gc2Nyb2xsIHRoZSB3aG9sZSBgb2Zmc2V0YCB1cCwganVzdCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuXG4gICAgICAgICAgLy8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCBhbmQgdGhlIG9mZnNldCwgd2hpY2ggaXMgZW5vdWdoIHRvIGFsaWduIHRoZSB0b3Agb2YgYGVsZW1gIGF0IHRoZVxuICAgICAgICAgIC8vIGRlc2lyZWQgcG9zaXRpb24uXG4gICAgICAgICAgdmFyIGVsZW1Ub3AgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAkd2luZG93LnNjcm9sbEJ5KDAsIGVsZW1Ub3AgLSBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbChoYXNoKSB7XG4gICAgICAvLyBBbGxvdyBudW1lcmljIGhhc2hlc1xuICAgICAgaGFzaCA9IGlzU3RyaW5nKGhhc2gpID8gaGFzaCA6IGlzTnVtYmVyKGhhc2gpID8gaGFzaC50b1N0cmluZygpIDogJGxvY2F0aW9uLmhhc2goKTtcbiAgICAgIHZhciBlbG07XG5cbiAgICAgIC8vIGVtcHR5IGhhc2gsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBpZiAoIWhhc2gpIHNjcm9sbFRvKG51bGwpO1xuXG4gICAgICAvLyBlbGVtZW50IHdpdGggZ2l2ZW4gaWRcbiAgICAgIGVsc2UgaWYgKChlbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoKSkpIHNjcm9sbFRvKGVsbSk7XG5cbiAgICAgIC8vIGZpcnN0IGFuY2hvciB3aXRoIGdpdmVuIG5hbWUgOi1EXG4gICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgc2Nyb2xsVG8oZWxtKTtcblxuICAgICAgLy8gbm8gZWxlbWVudCBhbmQgaGFzaCA9PT0gJ3RvcCcsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBlbHNlIGlmIChoYXNoID09PSAndG9wJykgc2Nyb2xsVG8obnVsbCk7XG4gICAgfVxuXG4gICAgLy8gZG9lcyBub3Qgc2Nyb2xsIHdoZW4gdXNlciBjbGlja3Mgb24gYW5jaG9yIGxpbmsgdGhhdCBpcyBjdXJyZW50bHkgb25cbiAgICAvLyAobm8gdXJsIGNoYW5nZSwgbm8gJGxvY2F0aW9uLmhhc2goKSBjaGFuZ2UpLCBicm93c2VyIG5hdGl2ZSBkb2VzIHNjcm9sbFxuICAgIGlmIChhdXRvU2Nyb2xsaW5nRW5hYmxlZCkge1xuICAgICAgJHJvb3RTY29wZS4kd2F0Y2goZnVuY3Rpb24gYXV0b1Njcm9sbFdhdGNoKCkge3JldHVybiAkbG9jYXRpb24uaGFzaCgpO30sXG4gICAgICAgIGZ1bmN0aW9uIGF1dG9TY3JvbGxXYXRjaEFjdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICAgIC8vIHNraXAgdGhlIGluaXRpYWwgc2Nyb2xsIGlmICRsb2NhdGlvbi5oYXNoIGlzIGVtcHR5XG4gICAgICAgICAgaWYgKG5ld1ZhbCA9PT0gb2xkVmFsICYmIG5ld1ZhbCA9PT0gJycpIHJldHVybjtcblxuICAgICAgICAgIGpxTGl0ZURvY3VtZW50TG9hZGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKHNjcm9sbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzY3JvbGw7XG4gIH1dO1xufVxuXG52YXIgJGFuaW1hdGVNaW5FcnIgPSBtaW5FcnIoJyRhbmltYXRlJyk7XG52YXIgRUxFTUVOVF9OT0RFID0gMTtcbnZhciBOR19BTklNQVRFX0NMQVNTTkFNRSA9ICduZy1hbmltYXRlJztcblxuZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGEsYikge1xuICBpZiAoIWEgJiYgIWIpIHJldHVybiAnJztcbiAgaWYgKCFhKSByZXR1cm4gYjtcbiAgaWYgKCFiKSByZXR1cm4gYTtcbiAgaWYgKGlzQXJyYXkoYSkpIGEgPSBhLmpvaW4oJyAnKTtcbiAgaWYgKGlzQXJyYXkoYikpIGIgPSBiLmpvaW4oJyAnKTtcbiAgcmV0dXJuIGEgKyAnICcgKyBiO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxtID0gZWxlbWVudFtpXTtcbiAgICBpZiAoZWxtLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgIHJldHVybiBlbG07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGl0Q2xhc3NlcyhjbGFzc2VzKSB7XG4gIGlmIChpc1N0cmluZyhjbGFzc2VzKSkge1xuICAgIGNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KCcgJyk7XG4gIH1cblxuICAvLyBVc2UgY3JlYXRlTWFwKCkgdG8gcHJldmVudCBjbGFzcyBhc3N1bXB0aW9ucyBpbnZvbHZpbmcgcHJvcGVydHkgbmFtZXMgaW5cbiAgLy8gT2JqZWN0LnByb3RvdHlwZVxuICB2YXIgb2JqID0gY3JlYXRlTWFwKCk7XG4gIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oa2xhc3MpIHtcbiAgICAvLyBzb21ldGltZXMgdGhlIHNwbGl0IGxlYXZlcyBlbXB0eSBzdHJpbmcgdmFsdWVzXG4gICAgLy8gaW5jYXNlIGV4dHJhIHNwYWNlcyB3ZXJlIGFwcGxpZWQgdG8gdGhlIG9wdGlvbnNcbiAgICBpZiAoa2xhc3MubGVuZ3RoKSB7XG4gICAgICBvYmpba2xhc3NdID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuXG4vLyBpZiBhbnkgb3RoZXIgdHlwZSBvZiBvcHRpb25zIHZhbHVlIGJlc2lkZXMgYW4gT2JqZWN0IHZhbHVlIGlzXG4vLyBwYXNzZWQgaW50byB0aGUgJGFuaW1hdGUubWV0aG9kKCkgYW5pbWF0aW9uIHRoZW4gdGhpcyBoZWxwZXIgY29kZVxuLy8gd2lsbCBiZSBydW4gd2hpY2ggd2lsbCBpZ25vcmUgaXQuIFdoaWxlIHRoaXMgcGF0Y2ggaXMgbm90IHRoZVxuLy8gZ3JlYXRlc3Qgc29sdXRpb24gdG8gdGhpcywgYSBsb3Qgb2YgZXhpc3RpbmcgcGx1Z2lucyBkZXBlbmQgb25cbi8vICRhbmltYXRlIHRvIGVpdGhlciBjYWxsIHRoZSBjYWxsYmFjayAoPCAxLjIpIG9yIHJldHVybiBhIHByb21pc2Vcbi8vIHRoYXQgY2FuIGJlIGNoYW5nZWQuIFRoaXMgaGVscGVyIGZ1bmN0aW9uIGVuc3VyZXMgdGhhdCB0aGUgb3B0aW9uc1xuLy8gYXJlIHdpcGVkIGNsZWFuIGluY2FzZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLlxuZnVuY3Rpb24gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9wdGlvbnMpXG4gICAgICA/IG9wdGlvbnNcbiAgICAgIDoge307XG59XG5cbnZhciAkJENvcmVBbmltYXRlSnNQcm92aWRlciA9IC8qKiBAdGhpcyAqLyBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gbm9vcDtcbn07XG5cbi8vIHRoaXMgaXMgcHJlZml4ZWQgd2l0aCBDb3JlIHNpbmNlIGl0IGNvbmZsaWN0cyB3aXRoXG4vLyB0aGUgYW5pbWF0ZVF1ZXVlUHJvdmlkZXIgZGVmaW5lZCBpbiBuZ0FuaW1hdGUvYW5pbWF0ZVF1ZXVlLmpzXG52YXIgJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIgPSAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gIHZhciBwb3N0RGlnZXN0UXVldWUgPSBuZXcgTmdNYXAoKTtcbiAgdmFyIHBvc3REaWdlc3RFbGVtZW50cyA9IFtdO1xuXG4gIHRoaXMuJGdldCA9IFsnJCRBbmltYXRlUnVubmVyJywgJyRyb290U2NvcGUnLFxuICAgICAgIGZ1bmN0aW9uKCQkQW5pbWF0ZVJ1bm5lciwgICAkcm9vdFNjb3BlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVuYWJsZWQ6IG5vb3AsXG4gICAgICBvbjogbm9vcCxcbiAgICAgIG9mZjogbm9vcCxcbiAgICAgIHBpbjogbm9vcCxcblxuICAgICAgcHVzaDogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGRvbU9wZXJhdGlvbikge1xuICAgICAgICBpZiAoZG9tT3BlcmF0aW9uKSB7XG4gICAgICAgICAgZG9tT3BlcmF0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZnJvbSkge1xuICAgICAgICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMuZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudG8pIHtcbiAgICAgICAgICBlbGVtZW50LmNzcyhvcHRpb25zLnRvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmFkZENsYXNzIHx8IG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICAgICBhZGRSZW1vdmVDbGFzc2VzUG9zdERpZ2VzdChlbGVtZW50LCBvcHRpb25zLmFkZENsYXNzLCBvcHRpb25zLnJlbW92ZUNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKCk7XG5cbiAgICAgICAgLy8gc2luY2UgdGhlcmUgYXJlIG5vIGFuaW1hdGlvbnMgdG8gcnVuIHRoZSBydW5uZXIgbmVlZHMgdG8gYmVcbiAgICAgICAgLy8gbm90aWZpZWQgdGhhdCB0aGUgYW5pbWF0aW9uIGNhbGwgaXMgY29tcGxldGUuXG4gICAgICAgIHJ1bm5lci5jb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoZGF0YSwgY2xhc3NlcywgdmFsdWUpIHtcbiAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICBpZiAoY2xhc3Nlcykge1xuICAgICAgICBjbGFzc2VzID0gaXNTdHJpbmcoY2xhc3NlcykgPyBjbGFzc2VzLnNwbGl0KCcgJykgOlxuICAgICAgICAgICAgICAgICAgaXNBcnJheShjbGFzc2VzKSA/IGNsYXNzZXMgOiBbXTtcbiAgICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRhdGFbY2xhc3NOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVDU1NDbGFzc0NoYW5nZXMoKSB7XG4gICAgICBmb3JFYWNoKHBvc3REaWdlc3RFbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgZGF0YSA9IHBvc3REaWdlc3RRdWV1ZS5nZXQoZWxlbWVudCk7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgdmFyIGV4aXN0aW5nID0gc3BsaXRDbGFzc2VzKGVsZW1lbnQuYXR0cignY2xhc3MnKSk7XG4gICAgICAgICAgdmFyIHRvQWRkID0gJyc7XG4gICAgICAgICAgdmFyIHRvUmVtb3ZlID0gJyc7XG4gICAgICAgICAgZm9yRWFjaChkYXRhLCBmdW5jdGlvbihzdGF0dXMsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgdmFyIGhhc0NsYXNzID0gISFleGlzdGluZ1tjbGFzc05hbWVdO1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gaGFzQ2xhc3MpIHtcbiAgICAgICAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgICAgIHRvQWRkICs9ICh0b0FkZC5sZW5ndGggPyAnICcgOiAnJykgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9SZW1vdmUgKz0gKHRvUmVtb3ZlLmxlbmd0aCA/ICcgJyA6ICcnKSArIGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LCBmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgICAgIGlmICh0b0FkZCkge1xuICAgICAgICAgICAgICBqcUxpdGVBZGRDbGFzcyhlbG0sIHRvQWRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b1JlbW92ZSkge1xuICAgICAgICAgICAgICBqcUxpdGVSZW1vdmVDbGFzcyhlbG0sIHRvUmVtb3ZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwb3N0RGlnZXN0UXVldWUuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHBvc3REaWdlc3RFbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QoZWxlbWVudCwgYWRkLCByZW1vdmUpIHtcbiAgICAgIHZhciBkYXRhID0gcG9zdERpZ2VzdFF1ZXVlLmdldChlbGVtZW50KSB8fCB7fTtcblxuICAgICAgdmFyIGNsYXNzZXNBZGRlZCA9IHVwZGF0ZURhdGEoZGF0YSwgYWRkLCB0cnVlKTtcbiAgICAgIHZhciBjbGFzc2VzUmVtb3ZlZCA9IHVwZGF0ZURhdGEoZGF0YSwgcmVtb3ZlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChjbGFzc2VzQWRkZWQgfHwgY2xhc3Nlc1JlbW92ZWQpIHtcblxuICAgICAgICBwb3N0RGlnZXN0UXVldWUuc2V0KGVsZW1lbnQsIGRhdGEpO1xuICAgICAgICBwb3N0RGlnZXN0RWxlbWVudHMucHVzaChlbGVtZW50KTtcblxuICAgICAgICBpZiAocG9zdERpZ2VzdEVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGhhbmRsZUNTU0NsYXNzQ2hhbmdlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgJGFuaW1hdGUgdGhhdCBkb2Vzbid0IHBlcmZvcm0gYW55IGFuaW1hdGlvbnMsIGluc3RlYWQganVzdFxuICogc3luY2hyb25vdXNseSBwZXJmb3JtcyBET00gdXBkYXRlcyBhbmQgcmVzb2x2ZXMgdGhlIHJldHVybmVkIHJ1bm5lciBwcm9taXNlLlxuICpcbiAqIEluIG9yZGVyIHRvIGVuYWJsZSBhbmltYXRpb25zIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaGFzIHRvIGJlIGxvYWRlZC5cbiAqXG4gKiBUbyBzZWUgdGhlIGZ1bmN0aW9uYWwgaW1wbGVtZW50YXRpb24gY2hlY2sgb3V0IGBzcmMvbmdBbmltYXRlL2FuaW1hdGUuanNgLlxuICovXG52YXIgJEFuaW1hdGVQcm92aWRlciA9IFsnJHByb3ZpZGUnLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAgdmFyIHByb3ZpZGVyID0gdGhpcztcbiAgdmFyIGNsYXNzTmFtZUZpbHRlciA9IG51bGw7XG4gIHZhciBjdXN0b21GaWx0ZXIgPSBudWxsO1xuXG4gIHRoaXMuJCRyZWdpc3RlcmVkQW5pbWF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIG5ldyBpbmplY3RhYmxlIGFuaW1hdGlvbiBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBwcm9kdWNlcyB0aGVcbiAgICogYW5pbWF0aW9uIG9iamVjdCB3aGljaCBjb250YWlucyBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQgdGhhdCBpcyBleHBlY3RlZCB0byBiZVxuICAgKiBhbmltYXRlZC5cbiAgICpcbiAgICogICAqIGBldmVudEZuYDogYGZ1bmN0aW9uKGVsZW1lbnQsIC4uLiAsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylgXG4gICAqICAgVGhlIGVsZW1lbnQgdG8gYW5pbWF0ZSwgdGhlIGBkb25lRnVuY3Rpb25gIGFuZCB0aGUgb3B0aW9ucyBmZWQgaW50byB0aGUgYW5pbWF0aW9uLiBEZXBlbmRpbmdcbiAgICogICBvbiB0aGUgdHlwZSBvZiBhbmltYXRpb24gYWRkaXRpb25hbCBhcmd1bWVudHMgd2lsbCBiZSBpbmplY3RlZCBpbnRvIHRoZSBhbmltYXRpb24gZnVuY3Rpb24uIFRoZVxuICAgKiAgIGxpc3QgYmVsb3cgZXhwbGFpbnMgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZXMgZm9yIHRoZSBkaWZmZXJlbnQgYW5pbWF0aW9uIG1ldGhvZHM6XG4gICAqXG4gICAqICAgLSBzZXRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkZWRDbGFzc2VzLCByZW1vdmVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZGVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlbW92ZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSBlbnRlciwgbGVhdmUsIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICogICAtIGFuaW1hdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb21TdHlsZXMsIHRvU3R5bGVzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqXG4gICAqICAgTWFrZSBzdXJlIHRvIHRyaWdnZXIgdGhlIGBkb25lRnVuY3Rpb25gIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBmdWxseSBjb21wbGV0ZS5cbiAgICpcbiAgICogYGBganNcbiAgICogICByZXR1cm4ge1xuICAgKiAgICAgLy9lbnRlciwgbGVhdmUsIG1vdmUgc2lnbmF0dXJlXG4gICAqICAgICBldmVudEZuIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSwgb3B0aW9ucykge1xuICAgKiAgICAgICAvL2NvZGUgdG8gcnVuIHRoZSBhbmltYXRpb25cbiAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVuZEZ1bmN0aW9uKHdhc0NhbmNlbGxlZCkge1xuICAgKiAgICAgICAgIC8vY29kZSB0byBjYW5jZWwgdGhlIGFuaW1hdGlvblxuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGFuaW1hdGlvbiAodGhpcyBpcyB3aGF0IHRoZSBjbGFzcy1iYXNlZCBDU1MgdmFsdWUgd2lsbCBiZSBjb21wYXJlZCB0bykuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgVGhlIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHJldHVybiB0aGUgYW5pbWF0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LlxuICAgKi9cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGZhY3RvcnkpIHtcbiAgICBpZiAobmFtZSAmJiBuYW1lLmNoYXJBdCgwKSAhPT0gJy4nKSB7XG4gICAgICB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm90Y3NlbCcsICdFeHBlY3RpbmcgY2xhc3Mgc2VsZWN0b3Igc3RhcnRpbmcgd2l0aCBcXCcuXFwnIGdvdCBcXCd7MH1cXCcuJywgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IG5hbWUgKyAnLWFuaW1hdGlvbic7XG4gICAgcHJvdmlkZXIuJCRyZWdpc3RlcmVkQW5pbWF0aW9uc1tuYW1lLnN1YnN0cigxKV0gPSBrZXk7XG4gICAgJHByb3ZpZGUuZmFjdG9yeShrZXksIGZhY3RvcnkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjY3VzdG9tRmlsdGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuZC9vciByZXR1cm5zIHRoZSBjdXN0b20gZmlsdGVyIGZ1bmN0aW9uIHRoYXQgaXMgdXNlZCB0byBcImZpbHRlclwiIGFuaW1hdGlvbnMsIGkuZS5cbiAgICogZGV0ZXJtaW5lIGlmIGFuIGFuaW1hdGlvbiBpcyBhbGxvd2VkIG9yIG5vdC4gV2hlbiBubyBmaWx0ZXIgaXMgc3BlY2lmaWVkICh0aGUgZGVmYXVsdCksIG5vXG4gICAqIGFuaW1hdGlvbiB3aWxsIGJlIGJsb2NrZWQuIFNldHRpbmcgdGhlIGBjdXN0b21GaWx0ZXJgIHZhbHVlIHdpbGwgb25seSBhbGxvdyBhbmltYXRpb25zIGZvclxuICAgKiB3aGljaCB0aGUgZmlsdGVyIGZ1bmN0aW9uJ3MgcmV0dXJuIHZhbHVlIGlzIHRydXRoeS5cbiAgICpcbiAgICogVGhpcyBhbGxvd3MgdG8gZWFzaWx5IGNyZWF0ZSBhcmJpdHJhcmlseSBjb21wbGV4IHJ1bGVzIGZvciBmaWx0ZXJpbmcgYW5pbWF0aW9ucywgc3VjaCBhc1xuICAgKiBhbGxvd2luZyBzcGVjaWZpYyBldmVudHMgb25seSwgb3IgZW5hYmxpbmcgYW5pbWF0aW9ucyBvbiBzcGVjaWZpYyBzdWJ0cmVlcyBvZiB0aGUgRE9NLCBldGMuXG4gICAqIEZpbHRlcmluZyBhbmltYXRpb25zIGNhbiBhbHNvIGJvb3N0IHBlcmZvcm1hbmNlIGZvciBsb3ctcG93ZXJlZCBkZXZpY2VzLCBhcyB3ZWxsIGFzXG4gICAqIGFwcGxpY2F0aW9ucyBjb250YWluaW5nIGEgbG90IG9mIHN0cnVjdHVyYWwgb3BlcmF0aW9ucy5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAgICogICAqKkJlc3QgUHJhY3RpY2U6KipcbiAgICogICBLZWVwIHRoZSBmaWx0ZXJpbmcgZnVuY3Rpb24gYXMgbGVhbiBhcyBwb3NzaWJsZSwgYmVjYXVzZSBpdCB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaCBET01cbiAgICogICBhY3Rpb24gKGUuZy4gaW5zZXJ0aW9uLCByZW1vdmFsLCBjbGFzcyBjaGFuZ2UpIHBlcmZvcm1lZCBieSBcImFuaW1hdGlvbi1hd2FyZVwiIGRpcmVjdGl2ZXMuXG4gICAqICAgU2VlIHtAbGluayBndWlkZS9hbmltYXRpb25zI3doaWNoLWRpcmVjdGl2ZXMtc3VwcG9ydC1hbmltYXRpb25zLSBoZXJlfSBmb3IgYSBsaXN0IG9mIGJ1aWx0LWluXG4gICAqICAgZGlyZWN0aXZlcyB0aGF0IHN1cHBvcnQgYW5pbWF0aW9ucy5cbiAgICogICBQZXJmb3JtaW5nIGNvbXB1dGF0aW9uYWxseSBleHBlbnNpdmUgb3IgdGltZS1jb25zdW1pbmcgb3BlcmF0aW9ucyBvbiBlYWNoIGNhbGwgb2YgdGhlXG4gICAqICAgZmlsdGVyaW5nIGZ1bmN0aW9uIGNhbiBtYWtlIHlvdXIgYW5pbWF0aW9ucyBzbHVnZ2lzaC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqICoqTm90ZToqKiBJZiBwcmVzZW50LCBgY3VzdG9tRmlsdGVyYCB3aWxsIGJlIGNoZWNrZWQgYmVmb3JlXG4gICAqIHtAbGluayAkYW5pbWF0ZVByb3ZpZGVyI2NsYXNzTmFtZUZpbHRlciBjbGFzc05hbWVGaWx0ZXJ9LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZmlsdGVyRm4gLSBUaGUgZmlsdGVyIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBmaWx0ZXIgYWxsIGFuaW1hdGlvbnMuXG4gICAqICAgSWYgYSBmYWxzeSB2YWx1ZSBpcyByZXR1cm5lZCwgbm8gYW5pbWF0aW9uIHdpbGwgYmUgcGVyZm9ybWVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWRcbiAgICogICB3aXRoIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICAgKiAgIC0gKipub2RlKiogYHtET01FbGVtZW50fWAgLSBUaGUgRE9NIGVsZW1lbnQgdG8gYmUgYW5pbWF0ZWQuXG4gICAqICAgLSAqKmV2ZW50KiogYHtTdHJpbmd9YCAtIFRoZSBuYW1lIG9mIHRoZSBhbmltYXRpb24gZXZlbnQgKGUuZy4gYGVudGVyYCwgYGxlYXZlYCwgYGFkZENsYXNzYFxuICAgKiAgICAgZXRjKS5cbiAgICogICAtICoqb3B0aW9ucyoqIGB7T2JqZWN0fWAgLSBBIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdXNlZCBmb3IgdGhlIGFuaW1hdGlvbi5cbiAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBjdXJyZW50IGZpbHRlciBmdW5jdGlvbiBvciBgbnVsbGAgaWYgdGhlcmUgaXMgbm9uZSBzZXQuXG4gICAqL1xuICB0aGlzLmN1c3RvbUZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlckZuKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGN1c3RvbUZpbHRlciA9IGlzRnVuY3Rpb24oZmlsdGVyRm4pID8gZmlsdGVyRm4gOiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjdXN0b21GaWx0ZXI7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNjbGFzc05hbWVGaWx0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgYW5kL29yIHJldHVybnMgdGhlIENTUyBjbGFzcyByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyBjaGVja2VkIHdoZW4gcGVyZm9ybWluZ1xuICAgKiBhbiBhbmltYXRpb24uIFVwb24gYm9vdHN0cmFwIHRoZSBjbGFzc05hbWVGaWx0ZXIgdmFsdWUgaXMgbm90IHNldCBhdCBhbGwgYW5kIHdpbGxcbiAgICogdGhlcmVmb3JlIGVuYWJsZSAkYW5pbWF0ZSB0byBhdHRlbXB0IHRvIHBlcmZvcm0gYW4gYW5pbWF0aW9uIG9uIGFueSBlbGVtZW50IHRoYXQgaXMgdHJpZ2dlcmVkLlxuICAgKiBXaGVuIHNldHRpbmcgdGhlIGBjbGFzc05hbWVGaWx0ZXJgIHZhbHVlLCBhbmltYXRpb25zIHdpbGwgb25seSBiZSBwZXJmb3JtZWQgb24gZWxlbWVudHNcbiAgICogdGhhdCBzdWNjZXNzZnVsbHkgbWF0Y2ggdGhlIGZpbHRlciBleHByZXNzaW9uLiBUaGlzIGluIHR1cm4gY2FuIGJvb3N0IHBlcmZvcm1hbmNlXG4gICAqIGZvciBsb3ctcG93ZXJlZCBkZXZpY2VzIGFzIHdlbGwgYXMgYXBwbGljYXRpb25zIGNvbnRhaW5pbmcgYSBsb3Qgb2Ygc3RydWN0dXJhbCBvcGVyYXRpb25zLlxuICAgKlxuICAgKiAqKk5vdGU6KiogSWYgcHJlc2VudCwgYGNsYXNzTmFtZUZpbHRlcmAgd2lsbCBiZSBjaGVja2VkIGFmdGVyXG4gICAqIHtAbGluayAkYW5pbWF0ZVByb3ZpZGVyI2N1c3RvbUZpbHRlciBjdXN0b21GaWx0ZXJ9LiBJZiBgY3VzdG9tRmlsdGVyYCBpcyBwcmVzZW50IGFuZCByZXR1cm5zXG4gICAqIGZhbHNlLCBgY2xhc3NOYW1lRmlsdGVyYCB3aWxsIG5vdCBiZSBjaGVja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IGV4cHJlc3Npb24gVGhlIGNsYXNzTmFtZSBleHByZXNzaW9uIHdoaWNoIHdpbGwgYmUgY2hlY2tlZCBhZ2FpbnN0IGFsbCBhbmltYXRpb25zXG4gICAqIEByZXR1cm4ge1JlZ0V4cH0gVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSBleHByZXNzaW9uIHZhbHVlLiBJZiBudWxsIHRoZW4gdGhlcmUgaXMgbm8gZXhwcmVzc2lvbiB2YWx1ZVxuICAgKi9cbiAgdGhpcy5jbGFzc05hbWVGaWx0ZXIgPSBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNsYXNzTmFtZUZpbHRlciA9IChleHByZXNzaW9uIGluc3RhbmNlb2YgUmVnRXhwKSA/IGV4cHJlc3Npb24gOiBudWxsO1xuICAgICAgaWYgKGNsYXNzTmFtZUZpbHRlcikge1xuICAgICAgICB2YXIgcmVzZXJ2ZWRSZWdleCA9IG5ldyBSZWdFeHAoJ1soXFxcXHN8XFxcXC8pXScgKyBOR19BTklNQVRFX0NMQVNTTkFNRSArICdbKFxcXFxzfFxcXFwvKV0nKTtcbiAgICAgICAgaWYgKHJlc2VydmVkUmVnZXgudGVzdChjbGFzc05hbWVGaWx0ZXIudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICBjbGFzc05hbWVGaWx0ZXIgPSBudWxsO1xuICAgICAgICAgIHRocm93ICRhbmltYXRlTWluRXJyKCdub25nY2xzJywgJyRhbmltYXRlUHJvdmlkZXIuY2xhc3NOYW1lRmlsdGVyKHJlZ2V4KSBwcm9oaWJpdHMgYWNjZXB0aW5nIGEgcmVnZXggdmFsdWUgd2hpY2ggbWF0Y2hlcy9jb250YWlucyB0aGUgXCJ7MH1cIiBDU1MgY2xhc3MuJywgTkdfQU5JTUFURV9DTEFTU05BTUUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbGFzc05hbWVGaWx0ZXI7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gWyckJGFuaW1hdGVRdWV1ZScsIGZ1bmN0aW9uKCQkYW5pbWF0ZVF1ZXVlKSB7XG4gICAgZnVuY3Rpb24gZG9tSW5zZXJ0KGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCkge1xuICAgICAgLy8gaWYgZm9yIHNvbWUgcmVhc29uIHRoZSBwcmV2aW91cyBlbGVtZW50IHdhcyByZW1vdmVkXG4gICAgICAvLyBmcm9tIHRoZSBkb20gc29tZXRpbWUgYmVmb3JlIHRoaXMgY29kZSBydW5zIHRoZW4gbGV0J3NcbiAgICAgIC8vIGp1c3Qgc3RpY2sgdG8gdXNpbmcgdGhlIHBhcmVudCBlbGVtZW50IGFzIHRoZSBhbmNob3JcbiAgICAgIGlmIChhZnRlckVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFmdGVyTm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShhZnRlckVsZW1lbnQpO1xuICAgICAgICBpZiAoYWZ0ZXJOb2RlICYmICFhZnRlck5vZGUucGFyZW50Tm9kZSAmJiAhYWZ0ZXJOb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICBhZnRlckVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYWZ0ZXJFbGVtZW50KSB7XG4gICAgICAgIGFmdGVyRWxlbWVudC5hZnRlcihlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudEVsZW1lbnQucHJlcGVuZChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRhbmltYXRlXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSAkYW5pbWF0ZSBzZXJ2aWNlIGV4cG9zZXMgYSBzZXJpZXMgb2YgRE9NIHV0aWxpdHkgbWV0aG9kcyB0aGF0IHByb3ZpZGUgc3VwcG9ydFxuICAgICAqIGZvciBhbmltYXRpb24gaG9va3MuIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRoZSBhcHBsaWNhdGlvbiBvZiBET00gb3BlcmF0aW9ucywgaG93ZXZlcixcbiAgICAgKiB3aGVuIGFuIGFuaW1hdGlvbiBpcyBkZXRlY3RlZCAoYW5kIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQpLCAkYW5pbWF0ZSB3aWxsIGRvIHRoZSBoZWF2eSBsaWZ0aW5nXG4gICAgICogdG8gZW5zdXJlIHRoYXQgYW5pbWF0aW9uIHJ1bnMgd2l0aCB0aGUgdHJpZ2dlcmVkIERPTSBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0ICRhbmltYXRlIGRvZXNuJ3QgdHJpZ2dlciBhbnkgYW5pbWF0aW9ucy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXNuJ3RcbiAgICAgKiBpbmNsdWRlZCBhbmQgb25seSB3aGVuIGl0IGlzIGFjdGl2ZSB0aGVuIHRoZSBhbmltYXRpb24gaG9va3MgdGhhdCBgJGFuaW1hdGVgIHRyaWdnZXJzIHdpbGwgYmVcbiAgICAgKiBmdW5jdGlvbmFsLiBPbmNlIGFjdGl2ZSB0aGVuIGFsbCBzdHJ1Y3R1cmFsIGBuZy1gIGRpcmVjdGl2ZXMgd2lsbCB0cmlnZ2VyIGFuaW1hdGlvbnMgYXMgdGhleSBwZXJmb3JtXG4gICAgICogdGhlaXIgRE9NLXJlbGF0ZWQgb3BlcmF0aW9ucyAoZW50ZXIsIGxlYXZlIGFuZCBtb3ZlKS4gT3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBuZ0NsYXNzYCxcbiAgICAgKiBgbmdTaG93YCwgYG5nSGlkZWAgYW5kIGBuZ01lc3NhZ2VzYCBhbHNvIHByb3ZpZGUgc3VwcG9ydCBmb3IgYW5pbWF0aW9ucy5cbiAgICAgKlxuICAgICAqIEl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhlYCRhbmltYXRlYCBzZXJ2aWNlIGlzIGFsd2F5cyB1c2VkIHdoZW4gZXhlY3V0aW5nIERPTS1yZWxhdGVkIHByb2NlZHVyZXMgd2l0aGluIGRpcmVjdGl2ZXMuXG4gICAgICpcbiAgICAgKiBUbyBsZWFybiBtb3JlIGFib3V0IGVuYWJsaW5nIGFuaW1hdGlvbiBzdXBwb3J0LCBjbGljayBoZXJlIHRvIHZpc2l0IHRoZVxuICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZSBwYWdlfS5cbiAgICAgKi9cbiAgICByZXR1cm4ge1xuICAgICAgLy8gd2UgZG9uJ3QgY2FsbCBpdCBkaXJlY3RseSBzaW5jZSBub24tZXhpc3RhbnQgYXJndW1lbnRzIG1heVxuICAgICAgLy8gYmUgaW50ZXJwcmV0ZWQgYXMgbnVsbCB3aXRoaW4gdGhlIHN1YiBlbmFibGVkIGZ1bmN0aW9uXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI29uXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFNldHMgdXAgYW4gZXZlbnQgbGlzdGVuZXIgdG8gZmlyZSB3aGVuZXZlciB0aGUgYW5pbWF0aW9uIGV2ZW50IChlbnRlciwgbGVhdmUsIG1vdmUsIGV0Yy4uLilcbiAgICAgICAqICAgIGhhcyBmaXJlZCBvbiB0aGUgZ2l2ZW4gZWxlbWVudCBvciBhbW9uZyBhbnkgb2YgaXRzIGNoaWxkcmVuLiBPbmNlIHRoZSBsaXN0ZW5lciBpcyBmaXJlZCwgdGhlIHByb3ZpZGVkIGNhbGxiYWNrXG4gICAgICAgKiAgICBpcyBmaXJlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1zOlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAkYW5pbWF0ZS5vbignZW50ZXInLCBjb250YWluZXIsXG4gICAgICAgKiAgICBmdW5jdGlvbiBjYWxsYmFjayhlbGVtZW50LCBwaGFzZSkge1xuICAgICAgICogICAgICAvLyBjb29sIHdlIGRldGVjdGVkIGFuIGVudGVyIGFuaW1hdGlvbiB3aXRoaW4gdGhlIGNvbnRhaW5lclxuICAgICAgICogICAgfVxuICAgICAgICogKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCB0aGUgYW5pbWF0aW9uIGV2ZW50IHRoYXQgd2lsbCBiZSBjYXB0dXJlZCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgZXRjLi4uKVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgdGhlIGNvbnRhaW5lciBlbGVtZW50IHRoYXQgd2lsbCBjYXB0dXJlIGVhY2ggb2YgdGhlIGFuaW1hdGlvbiBldmVudHMgdGhhdCBhcmUgZmlyZWQgb24gaXRzZWxmXG4gICAgICAgKiAgICAgYXMgd2VsbCBhcyBhbW9uZyBpdHMgY2hpbGRyZW5cbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiB0aGUgbGlzdGVuZXIgaXMgdHJpZ2dlcmVkXG4gICAgICAgKlxuICAgICAgICogVGhlIGFyZ3VtZW50cyBwcmVzZW50IGluIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBhcmU6XG4gICAgICAgKiAqIGBlbGVtZW50YCAtIFRoZSBjYXB0dXJlZCBET00gZWxlbWVudCB0aGF0IHRoZSBhbmltYXRpb24gd2FzIGZpcmVkIG9uLlxuICAgICAgICogKiBgcGhhc2VgIC0gVGhlIHBoYXNlIG9mIHRoZSBhbmltYXRpb24uIFRoZSB0d28gcG9zc2libGUgcGhhc2VzIGFyZSAqKnN0YXJ0KiogKHdoZW4gdGhlIGFuaW1hdGlvbiBzdGFydHMpIGFuZCAqKmNsb3NlKiogKHdoZW4gaXQgZW5kcykuXG4gICAgICAgKi9cbiAgICAgIG9uOiAkJGFuaW1hdGVRdWV1ZS5vbixcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjb2ZmXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIERlcmVnaXN0ZXJzIGFuIGV2ZW50IGxpc3RlbmVyIGJhc2VkIG9uIHRoZSBldmVudCB3aGljaCBoYXMgYmVlbiBhc3NvY2lhdGVkIHdpdGggdGhlIHByb3ZpZGVkIGVsZW1lbnQuIFRoaXMgbWV0aG9kXG4gICAgICAgKiBjYW4gYmUgdXNlZCBpbiB0aHJlZSBkaWZmZXJlbnQgd2F5cyBkZXBlbmRpbmcgb24gdGhlIGFyZ3VtZW50czpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogLy8gcmVtb3ZlIGFsbCB0aGUgYW5pbWF0aW9uIGV2ZW50IGxpc3RlbmVycyBsaXN0ZW5pbmcgZm9yIGBlbnRlcmBcbiAgICAgICAqICRhbmltYXRlLm9mZignZW50ZXInKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyByZW1vdmUgbGlzdGVuZXJzIGZvciBhbGwgYW5pbWF0aW9uIGV2ZW50cyBmcm9tIHRoZSBjb250YWluZXIgZWxlbWVudFxuICAgICAgICogJGFuaW1hdGUub2ZmKGNvbnRhaW5lcik7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIGFsbCB0aGUgYW5pbWF0aW9uIGV2ZW50IGxpc3RlbmVycyBsaXN0ZW5pbmcgZm9yIGBlbnRlcmAgb24gdGhlIGdpdmVuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlblxuICAgICAgICogJGFuaW1hdGUub2ZmKCdlbnRlcicsIGNvbnRhaW5lcik7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBwcm92aWRlZCBieSBgY2FsbGJhY2tgIHRoYXQgaXMgc2V0XG4gICAgICAgKiAvLyB0byBsaXN0ZW4gZm9yIGBlbnRlcmAgb24gdGhlIGdpdmVuIGBjb250YWluZXJgIGFzIHdlbGwgYXMgaXRzIGNoaWxkcmVuXG4gICAgICAgKiAkYW5pbWF0ZS5vZmYoJ2VudGVyJywgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBldmVudHxjb250YWluZXIgdGhlIGFuaW1hdGlvbiBldmVudCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUsXG4gICAgICAgKiBhZGRDbGFzcywgcmVtb3ZlQ2xhc3MsIGV0Yy4uLiksIG9yIHRoZSBjb250YWluZXIgZWxlbWVudC4gSWYgaXQgaXMgdGhlIGVsZW1lbnQsIGFsbCBvdGhlclxuICAgICAgICogYXJndW1lbnRzIGFyZSBpZ25vcmVkLlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gY29udGFpbmVyIHRoZSBjb250YWluZXIgZWxlbWVudCB0aGUgZXZlbnQgbGlzdGVuZXIgd2FzIHBsYWNlZCBvblxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdhcyByZWdpc3RlcmVkIGFzIHRoZSBsaXN0ZW5lclxuICAgICAgICovXG4gICAgICBvZmY6ICQkYW5pbWF0ZVF1ZXVlLm9mZixcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNwaW5cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQXNzb2NpYXRlcyB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoIGEgaG9zdCBwYXJlbnQgZWxlbWVudCB0byBhbGxvdyB0aGUgZWxlbWVudCB0byBiZSBhbmltYXRlZCBldmVuIGlmIGl0IGV4aXN0c1xuICAgICAgICogICAgb3V0c2lkZSBvZiB0aGUgRE9NIHN0cnVjdHVyZSBvZiB0aGUgQW5ndWxhciBhcHBsaWNhdGlvbi4gQnkgZG9pbmcgc28sIGFueSBhbmltYXRpb24gdHJpZ2dlcmVkIHZpYSBgJGFuaW1hdGVgIGNhbiBiZSBpc3N1ZWQgb24gdGhlXG4gICAgICAgKiAgICBlbGVtZW50IGRlc3BpdGUgYmVpbmcgb3V0c2lkZSB0aGUgcmVhbG0gb2YgdGhlIGFwcGxpY2F0aW9uIG9yIHdpdGhpbiBhbm90aGVyIGFwcGxpY2F0aW9uLiBTYXkgZm9yIGV4YW1wbGUgaWYgdGhlIGFwcGxpY2F0aW9uXG4gICAgICAgKiAgICB3YXMgYm9vdHN0cmFwcGVkIG9uIGFuIGVsZW1lbnQgdGhhdCBpcyBzb21ld2hlcmUgaW5zaWRlIG9mIHRoZSBgPGJvZHk+YCB0YWcsIGJ1dCB3ZSB3YW50ZWQgdG8gYWxsb3cgZm9yIGFuIGVsZW1lbnQgdG8gYmUgc2l0dWF0ZWRcbiAgICAgICAqICAgIGFzIGEgZGlyZWN0IGNoaWxkIG9mIGBkb2N1bWVudC5ib2R5YCwgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSBwaW5uaW5nIHRoZSBlbGVtZW50IHZpYSBgJGFuaW1hdGUucGluKGVsZW1lbnQpYC4gS2VlcCBpbiBtaW5kXG4gICAgICAgKiAgICB0aGF0IGNhbGxpbmcgYCRhbmltYXRlLnBpbihlbGVtZW50LCBwYXJlbnRFbGVtZW50KWAgd2lsbCBub3QgYWN0dWFsbHkgaW5zZXJ0IGludG8gdGhlIERPTSBhbnl3aGVyZTsgaXQgd2lsbCBqdXN0IGNyZWF0ZSB0aGUgYXNzb2NpYXRpb24uXG4gICAgICAgKlxuICAgICAgICogICAgTm90ZSB0aGF0IHRoaXMgZmVhdHVyZSBpcyBvbmx5IGFjdGl2ZSB3aGVuIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXMgdXNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGV4dGVybmFsIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHBpbm5lZFxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnRFbGVtZW50IHRoZSBob3N0IHBhcmVudCBlbGVtZW50IHRoYXQgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGV4dGVybmFsIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgcGluOiAkJGFuaW1hdGVRdWV1ZS5waW4sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2VuYWJsZWRcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVXNlZCB0byBnZXQgYW5kIHNldCB3aGV0aGVyIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgb3Igbm90IG9uIHRoZSBlbnRpcmUgYXBwbGljYXRpb24gb3Igb24gYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuLiBUaGlzXG4gICAgICAgKiBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGluIGZvdXIgd2F5czpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogLy8gcmV0dXJucyB0cnVlIG9yIGZhbHNlXG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKCk7XG4gICAgICAgKlxuICAgICAgICogLy8gY2hhbmdlcyB0aGUgZW5hYmxlZCBzdGF0ZSBmb3IgYWxsIGFuaW1hdGlvbnNcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZmFsc2UpO1xuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZCh0cnVlKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyByZXR1cm5zIHRydWUgb3IgZmFsc2UgaWYgYW5pbWF0aW9ucyBhcmUgZW5hYmxlZCBmb3IgYW4gZWxlbWVudFxuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZChlbGVtZW50KTtcbiAgICAgICAqXG4gICAgICAgKiAvLyBjaGFuZ2VzIHRoZSBlbmFibGVkIHN0YXRlIGZvciBhbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGNvbnNpZGVyZWQgZm9yIGNoZWNraW5nL3NldHRpbmcgdGhlIGVuYWJsZWQgc3RhdGVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGVuYWJsZWQgd2hldGhlciBvciBub3QgdGhlIGFuaW1hdGlvbnMgd2lsbCBiZSBlbmFibGVkIGZvciB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IGFuaW1hdGlvbnMgYXJlIGVuYWJsZWRcbiAgICAgICAqL1xuICAgICAgZW5hYmxlZDogJCRhbmltYXRlUXVldWUuZW5hYmxlZCxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNjYW5jZWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQ2FuY2VscyB0aGUgcHJvdmlkZWQgYW5pbWF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7UHJvbWlzZX0gYW5pbWF0aW9uUHJvbWlzZSBUaGUgYW5pbWF0aW9uIHByb21pc2UgdGhhdCBpcyByZXR1cm5lZCB3aGVuIGFuIGFuaW1hdGlvbiBpcyBzdGFydGVkLlxuICAgICAgICovXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBpZiAocnVubmVyLmVuZCkge1xuICAgICAgICAgIHJ1bm5lci5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjZW50ZXJcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyB0aGUgZWxlbWVudCBpbnRvIHRoZSBET00gZWl0aGVyIGFmdGVyIHRoZSBgYWZ0ZXJgIGVsZW1lbnQgKGlmIHByb3ZpZGVkKSBvclxuICAgICAgICogICBhcyB0aGUgZmlyc3QgY2hpbGQgd2l0aGluIHRoZSBgcGFyZW50YCBlbGVtZW50IGFuZCB0aGVuIHRyaWdnZXJzIGFuIGFuaW1hdGlvbi5cbiAgICAgICAqICAgQSBwcm9taXNlIGlzIHJldHVybmVkIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBkdXJpbmcgdGhlIG5leHQgZGlnZXN0IG9uY2UgdGhlIGFuaW1hdGlvblxuICAgICAgICogICBoYXMgY29tcGxldGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIGluc2VydGVkIGludG8gdGhlIERPTVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50IGFzXG4gICAgICAgKiAgIGEgY2hpbGQgKHNvIGxvbmcgYXMgdGhlIGFmdGVyIGVsZW1lbnQgaXMgbm90IHByZXNlbnQpXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IGFmdGVyIHdoaWNoIHRoZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnQsIGFmdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudCAmJiBqcUxpdGUocGFyZW50KTtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlciAmJiBqcUxpdGUoYWZ0ZXIpO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgYWZ0ZXIucGFyZW50KCk7XG4gICAgICAgIGRvbUluc2VydChlbGVtZW50LCBwYXJlbnQsIGFmdGVyKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2VudGVyJywgcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI21vdmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyAobW92ZXMpIHRoZSBlbGVtZW50IGludG8gaXRzIG5ldyBwb3NpdGlvbiBpbiB0aGUgRE9NIGVpdGhlciBhZnRlclxuICAgICAgICogICB0aGUgYGFmdGVyYCBlbGVtZW50IChpZiBwcm92aWRlZCkgb3IgYXMgdGhlIGZpcnN0IGNoaWxkIHdpdGhpbiB0aGUgYHBhcmVudGAgZWxlbWVudFxuICAgICAgICogICBhbmQgdGhlbiB0cmlnZ2VycyBhbiBhbmltYXRpb24uIEEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWRcbiAgICAgICAqICAgZHVyaW5nIHRoZSBuZXh0IGRpZ2VzdCBvbmNlIHRoZSBhbmltYXRpb24gaGFzIGNvbXBsZXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBtb3ZlZCBpbnRvIHRoZSBuZXcgRE9NIHBvc2l0aW9uXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQgYXNcbiAgICAgICAqICAgYSBjaGlsZCAoc28gbG9uZyBhcyB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudClcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgYWZ0ZXIgd2hpY2ggdGhlIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZFxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgIFRoZSBvYmplY3QgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICpcbiAgICAgICAqICAgLSAqKmFkZENsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIGFkZCB0byBlbGVtZW50XG4gICAgICAgKiAgIC0gKipmcm9tKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgdG9gXG4gICAgICAgKiAgIC0gKipyZW1vdmVDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byByZW1vdmUgZnJvbSBlbGVtZW50XG4gICAgICAgKiAgIC0gKip0byoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IGVuZCBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgZnJvbWBcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgbW92ZTogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgJiYganFMaXRlKHBhcmVudCk7XG4gICAgICAgIGFmdGVyID0gYWZ0ZXIgJiYganFMaXRlKGFmdGVyKTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IGFmdGVyLnBhcmVudCgpO1xuICAgICAgICBkb21JbnNlcnQoZWxlbWVudCwgcGFyZW50LCBhZnRlcik7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdtb3ZlJywgcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjbGVhdmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVHJpZ2dlcnMgYW4gYW5pbWF0aW9uIGFuZCB0aGVuIHJlbW92ZXMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NLlxuICAgICAgICogV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgZHVyaW5nIHRoZSBuZXh0XG4gICAgICAgKiBkaWdlc3Qgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGxlYXZlOiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdsZWF2ZScsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2FkZENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUcmlnZ2VycyBhbiBhZGRDbGFzcyBhbmltYXRpb24gc3Vycm91bmRpbmcgdGhlIGFkZGl0aW9uIG9mIHRoZSBwcm92aWRlZCBDU1MgY2xhc3MoZXMpLiBVcG9uXG4gICAgICAgKiAgIGV4ZWN1dGlvbiwgdGhlIGFkZENsYXNzIG9wZXJhdGlvbiB3aWxsIG9ubHkgYmUgaGFuZGxlZCBhZnRlciB0aGUgbmV4dCBkaWdlc3QgYW5kIGl0IHdpbGwgbm90IHRyaWdnZXIgYW5cbiAgICAgICAqICAgYW5pbWF0aW9uIGlmIGVsZW1lbnQgYWxyZWFkeSBjb250YWlucyB0aGUgQ1NTIGNsYXNzIG9yIGlmIHRoZSBjbGFzcyBpcyByZW1vdmVkIGF0IGEgbGF0ZXIgc3RlcC5cbiAgICAgICAqICAgTm90ZSB0aGF0IGNsYXNzLWJhc2VkIGFuaW1hdGlvbnMgYXJlIHRyZWF0ZWQgZGlmZmVyZW50bHkgY29tcGFyZWQgdG8gc3RydWN0dXJhbCBhbmltYXRpb25zXG4gICAgICAgKiAgIChsaWtlIGVudGVyLCBtb3ZlIGFuZCBsZWF2ZSkgc2luY2UgdGhlIENTUyBjbGFzc2VzIG1heSBiZSBhZGRlZC9yZW1vdmVkIGF0IGRpZmZlcmVudCBwb2ludHNcbiAgICAgICAqICAgZGVwZW5kaW5nIGlmIENTUyBvciBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgYXJlIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIGFkZGVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLmFkZGNsYXNzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnYWRkQ2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjcmVtb3ZlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFRyaWdnZXJzIGEgcmVtb3ZlQ2xhc3MgYW5pbWF0aW9uIHN1cnJvdW5kaW5nIHRoZSByZW1vdmFsIG9mIHRoZSBwcm92aWRlZCBDU1MgY2xhc3MoZXMpLiBVcG9uXG4gICAgICAgKiAgIGV4ZWN1dGlvbiwgdGhlIHJlbW92ZUNsYXNzIG9wZXJhdGlvbiB3aWxsIG9ubHkgYmUgaGFuZGxlZCBhZnRlciB0aGUgbmV4dCBkaWdlc3QgYW5kIGl0IHdpbGwgbm90IHRyaWdnZXIgYW5cbiAgICAgICAqICAgYW5pbWF0aW9uIGlmIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiB0aGUgQ1NTIGNsYXNzIG9yIGlmIHRoZSBjbGFzcyBpcyBhZGRlZCBhdCBhIGxhdGVyIHN0ZXAuXG4gICAgICAgKiAgIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAobGlrZSBlbnRlciwgbW92ZSBhbmQgbGVhdmUpIHNpbmNlIHRoZSBDU1MgY2xhc3NlcyBtYXkgYmUgYWRkZWQvcmVtb3ZlZCBhdCBkaWZmZXJlbnQgcG9pbnRzXG4gICAgICAgKiAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSByZW1vdmVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAncmVtb3ZlQ2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjc2V0Q2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm1zIGJvdGggdGhlIGFkZGl0aW9uIGFuZCByZW1vdmFsIG9mIGEgQ1NTIGNsYXNzZXMgb24gYW4gZWxlbWVudCBhbmQgKGR1cmluZyB0aGUgcHJvY2VzcylcbiAgICAgICAqICAgIHRyaWdnZXJzIGFuIGFuaW1hdGlvbiBzdXJyb3VuZGluZyB0aGUgY2xhc3MgYWRkaXRpb24vcmVtb3ZhbC4gTXVjaCBsaWtlIGAkYW5pbWF0ZS5hZGRDbGFzc2AgYW5kXG4gICAgICAgKiAgICBgJGFuaW1hdGUucmVtb3ZlQ2xhc3NgLCBgc2V0Q2xhc3NgIHdpbGwgb25seSBldmFsdWF0ZSB0aGUgY2xhc3NlcyBiZWluZyBhZGRlZC9yZW1vdmVkIG9uY2UgYSBkaWdlc3QgaGFzXG4gICAgICAgKiAgICBwYXNzZWQuIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAgKGxpa2UgZW50ZXIsIG1vdmUgYW5kIGxlYXZlKSBzaW5jZSB0aGUgQ1NTIGNsYXNzZXMgbWF5IGJlIGFkZGVkL3JlbW92ZWQgYXQgZGlmZmVyZW50IHBvaW50c1xuICAgICAgICogICAgZGVwZW5kaW5nIGlmIENTUyBvciBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgYXJlIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZGQgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIGFkZGVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdmUgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIHJlbW92ZWQgKG11bHRpcGxlIGNsYXNzZXMgYXJlIHNlcGFyYXRlZCB2aWEgc3BhY2VzKVxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgIFRoZSBvYmplY3QgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICpcbiAgICAgICAqICAgLSAqKmFkZENsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIGFkZCB0byBlbGVtZW50XG4gICAgICAgKiAgIC0gKipmcm9tKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgdG9gXG4gICAgICAgKiAgIC0gKipyZW1vdmVDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byByZW1vdmUgZnJvbSBlbGVtZW50XG4gICAgICAgKiAgIC0gKip0byoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IGVuZCBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgZnJvbWBcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgc2V0Q2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZCwgcmVtb3ZlLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5hZGRDbGFzcywgYWRkKTtcbiAgICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCByZW1vdmUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnc2V0Q2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjYW5pbWF0ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gUGVyZm9ybXMgYW4gaW5saW5lIGFuaW1hdGlvbiBvbiB0aGUgZWxlbWVudCB3aGljaCBhcHBsaWVzIHRoZSBwcm92aWRlZCB0byBhbmQgZnJvbSBDU1Mgc3R5bGVzIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogSWYgYW55IGRldGVjdGVkIENTUyB0cmFuc2l0aW9uLCBrZXlmcmFtZSBvciBKYXZhU2NyaXB0IG1hdGNoZXMgdGhlIHByb3ZpZGVkIGNsYXNzTmFtZSB2YWx1ZSwgdGhlbiB0aGUgYW5pbWF0aW9uIHdpbGwgdGFrZVxuICAgICAgICogb24gdGhlIHByb3ZpZGVkIHN0eWxlcy4gRm9yIGV4YW1wbGUsIGlmIGEgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgc2V0IGZvciB0aGUgZ2l2ZW4gY2xhc3NOYW1lLCB0aGVuIHRoZSBwcm92aWRlZCBgZnJvbWAgYW5kXG4gICAgICAgKiBgdG9gIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgYWxvbmdzaWRlIHRoZSBnaXZlbiB0cmFuc2l0aW9uLiBJZiB0aGUgQ1NTIHN0eWxlIHByb3ZpZGVkIGluIGBmcm9tYCBkb2VzIG5vdCBoYXZlIGEgY29ycmVzcG9uZGluZ1xuICAgICAgICogc3R5bGUgaW4gYHRvYCwgdGhlIHN0eWxlIGluIGBmcm9tYCBpcyBhcHBsaWVkIGltbWVkaWF0ZWx5LCBhbmQgbm8gYW5pbWF0aW9uIGlzIHJ1bi5cbiAgICAgICAqIElmIGEgSmF2YVNjcmlwdCBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgdGhlbiB0aGUgcHJvdmlkZWQgc3R5bGVzIHdpbGwgYmUgZ2l2ZW4gaW4gYXMgZnVuY3Rpb24gcGFyYW1ldGVycyBpbnRvIHRoZSBgYW5pbWF0ZWBcbiAgICAgICAqIG1ldGhvZCAob3IgYXMgcGFydCBvZiB0aGUgYG9wdGlvbnNgIHBhcmFtZXRlcik6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqIG5nTW9kdWxlLmFuaW1hdGlvbignLm15LWlubGluZS1hbmltYXRpb24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAqICAgcmV0dXJuIHtcbiAgICAgICAqICAgICBhbmltYXRlIDogZnVuY3Rpb24oZWxlbWVudCwgZnJvbSwgdG8sIGRvbmUsIG9wdGlvbnMpIHtcbiAgICAgICAqICAgICAgIC8vYW5pbWF0aW9uXG4gICAgICAgKiAgICAgICBkb25lKCk7XG4gICAgICAgKiAgICAgfVxuICAgICAgICogICB9XG4gICAgICAgKiB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBmcm9tIHRoZSBmcm9tIChzdGFydGluZykgQ1NTIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCBhbmQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gdG8gdGhlIHRvIChkZXN0aW5hdGlvbikgQ1NTIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCBhbmQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGNsYXNzTmFtZSBhbiBvcHRpb25hbCBDU1MgY2xhc3MgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uLiBJZlxuICAgICAgICogICAgdGhpcyB2YWx1ZSBpcyBsZWZ0IGFzIGVtcHR5IHRoZW4gYSBDU1MgY2xhc3Mgb2YgYG5nLWlubGluZS1hbmltYXRlYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgICAoTm90ZSB0aGF0IGlmIG5vIGFuaW1hdGlvbiBpcyBkZXRlY3RlZCB0aGVuIHRoaXMgdmFsdWUgd2lsbCBub3QgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC4pXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqICAgVGhlIG9iamVjdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKlxuICAgICAgICogICAtICoqYWRkQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gYWRkIHRvIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKmZyb20qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGB0b2BcbiAgICAgICAqICAgLSAqKnJlbW92ZUNsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIHJlbW92ZSBmcm9tIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKnRvKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgZW5kIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGBmcm9tYFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBhbmltYXRlOiBmdW5jdGlvbihlbGVtZW50LCBmcm9tLCB0bywgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMuZnJvbSA/IGV4dGVuZChvcHRpb25zLmZyb20sIGZyb20pIDogZnJvbTtcbiAgICAgICAgb3B0aW9ucy50byAgID0gb3B0aW9ucy50byAgID8gZXh0ZW5kKG9wdGlvbnMudG8sIHRvKSAgICAgOiB0bztcblxuICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgfHwgJ25nLWlubGluZS1hbmltYXRlJztcbiAgICAgICAgb3B0aW9ucy50ZW1wQ2xhc3NlcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnRlbXBDbGFzc2VzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnYW5pbWF0ZScsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xufV07XG5cbnZhciAkJEFuaW1hdGVBc3luY1J1bkZhY3RvcnlQcm92aWRlciA9IC8qKiBAdGhpcyAqLyBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckJHJBRicsIGZ1bmN0aW9uKCQkckFGKSB7XG4gICAgdmFyIHdhaXRRdWV1ZSA9IFtdO1xuXG4gICAgZnVuY3Rpb24gd2FpdEZvclRpY2soZm4pIHtcbiAgICAgIHdhaXRRdWV1ZS5wdXNoKGZuKTtcbiAgICAgIGlmICh3YWl0UXVldWUubGVuZ3RoID4gMSkgcmV0dXJuO1xuICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2FpdFF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgd2FpdFF1ZXVlW2ldKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2FpdFF1ZXVlID0gW107XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFzc2VkID0gZmFsc2U7XG4gICAgICB3YWl0Rm9yVGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgcGFzc2VkID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChwYXNzZWQpIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhaXRGb3JUaWNrKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9XTtcbn07XG5cbnZhciAkJEFuaW1hdGVSdW5uZXJGYWN0b3J5UHJvdmlkZXIgPSAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFsnJHEnLCAnJHNuaWZmZXInLCAnJCRhbmltYXRlQXN5bmNSdW4nLCAnJCRpc0RvY3VtZW50SGlkZGVuJywgJyR0aW1lb3V0JyxcbiAgICAgICBmdW5jdGlvbigkcSwgICAkc25pZmZlciwgICAkJGFuaW1hdGVBc3luY1J1biwgICAkJGlzRG9jdW1lbnRIaWRkZW4sICAgJHRpbWVvdXQpIHtcblxuICAgIHZhciBJTklUSUFMX1NUQVRFID0gMDtcbiAgICB2YXIgRE9ORV9QRU5ESU5HX1NUQVRFID0gMTtcbiAgICB2YXIgRE9ORV9DT01QTEVURV9TVEFURSA9IDI7XG5cbiAgICBBbmltYXRlUnVubmVyLmNoYWluID0gZnVuY3Rpb24oY2hhaW4sIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuXG4gICAgICBuZXh0KCk7XG4gICAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IGNoYWluLmxlbmd0aCkge1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYWluW2luZGV4XShmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBBbmltYXRlUnVubmVyLmFsbCA9IGZ1bmN0aW9uKHJ1bm5lcnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgdmFyIHN0YXR1cyA9IHRydWU7XG4gICAgICBmb3JFYWNoKHJ1bm5lcnMsIGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBydW5uZXIuZG9uZShvblByb2dyZXNzKTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBvblByb2dyZXNzKHJlc3BvbnNlKSB7XG4gICAgICAgIHN0YXR1cyA9IHN0YXR1cyAmJiByZXNwb25zZTtcbiAgICAgICAgaWYgKCsrY291bnQgPT09IHJ1bm5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgY2FsbGJhY2soc3RhdHVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBBbmltYXRlUnVubmVyKGhvc3QpIHtcbiAgICAgIHRoaXMuc2V0SG9zdChob3N0KTtcblxuICAgICAgdmFyIHJhZlRpY2sgPSAkJGFuaW1hdGVBc3luY1J1bigpO1xuICAgICAgdmFyIHRpbWVvdXRUaWNrID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgJHRpbWVvdXQoZm4sIDAsIGZhbHNlKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2RvbmVDYWxsYmFja3MgPSBbXTtcbiAgICAgIHRoaXMuX3RpY2sgPSBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAoJCRpc0RvY3VtZW50SGlkZGVuKCkpIHtcbiAgICAgICAgICB0aW1lb3V0VGljayhmbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmFmVGljayhmbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLl9zdGF0ZSA9IDA7XG4gICAgfVxuXG4gICAgQW5pbWF0ZVJ1bm5lci5wcm90b3R5cGUgPSB7XG4gICAgICBzZXRIb3N0OiBmdW5jdGlvbihob3N0KSB7XG4gICAgICAgIHRoaXMuaG9zdCA9IGhvc3QgfHwge307XG4gICAgICB9LFxuXG4gICAgICBkb25lOiBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IERPTkVfQ09NUExFVEVfU1RBVEUpIHtcbiAgICAgICAgICBmbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2RvbmVDYWxsYmFja3MucHVzaChmbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHByb2dyZXNzOiBub29wLFxuXG4gICAgICBnZXRQcm9taXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb21pc2UpIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgdGhpcy5wcm9taXNlID0gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBzZWxmLmRvbmUoZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xuICAgICAgfSxcblxuICAgICAgdGhlbjogZnVuY3Rpb24ocmVzb2x2ZUhhbmRsZXIsIHJlamVjdEhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpLnRoZW4ocmVzb2x2ZUhhbmRsZXIsIHJlamVjdEhhbmRsZXIpO1xuICAgICAgfSxcblxuICAgICAgJ2NhdGNoJzogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKClbJ2NhdGNoJ10oaGFuZGxlcik7XG4gICAgICB9LFxuXG4gICAgICAnZmluYWxseSc6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpWydmaW5hbGx5J10oaGFuZGxlcik7XG4gICAgICB9LFxuXG4gICAgICBwYXVzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmhvc3QucGF1c2UpIHtcbiAgICAgICAgICB0aGlzLmhvc3QucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgcmVzdW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9zdC5yZXN1bWUpIHtcbiAgICAgICAgICB0aGlzLmhvc3QucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmhvc3QuZW5kKSB7XG4gICAgICAgICAgdGhpcy5ob3N0LmVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jlc29sdmUodHJ1ZSk7XG4gICAgICB9LFxuXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ob3N0LmNhbmNlbCkge1xuICAgICAgICAgIHRoaXMuaG9zdC5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXNvbHZlKGZhbHNlKTtcbiAgICAgIH0sXG5cbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmIChzZWxmLl9zdGF0ZSA9PT0gSU5JVElBTF9TVEFURSkge1xuICAgICAgICAgIHNlbGYuX3N0YXRlID0gRE9ORV9QRU5ESU5HX1NUQVRFO1xuICAgICAgICAgIHNlbGYuX3RpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLl9yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX3Jlc29sdmU6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gRE9ORV9DT01QTEVURV9TVEFURSkge1xuICAgICAgICAgIGZvckVhY2godGhpcy5fZG9uZUNhbGxiYWNrcywgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIGZuKHJlc3BvbnNlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLl9kb25lQ2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgdGhpcy5fc3RhdGUgPSBET05FX0NPTVBMRVRFX1NUQVRFO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBBbmltYXRlUnVubmVyO1xuICB9XTtcbn07XG5cbi8qIGV4cG9ydGVkICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyICovXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRhbmltYXRlQ3NzXG4gKiBAa2luZCBvYmplY3RcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIHRoZSBjb3JlIHZlcnNpb24gb2YgYCRhbmltYXRlQ3NzYC4gQnkgZGVmYXVsdCwgb25seSB3aGVuIHRoZSBgbmdBbmltYXRlYCBpcyBpbmNsdWRlZCxcbiAqIHRoZW4gdGhlIGAkYW5pbWF0ZUNzc2Agc2VydmljZSB3aWxsIGFjdHVhbGx5IHBlcmZvcm0gYW5pbWF0aW9ucy5cbiAqXG4gKiBDbGljayBoZXJlIHtAbGluayBuZ0FuaW1hdGUuJGFuaW1hdGVDc3MgdG8gcmVhZCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgJGFuaW1hdGVDc3N9LlxuICovXG52YXIgJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckJHJBRicsICckcScsICckJEFuaW1hdGVSdW5uZXInLCBmdW5jdGlvbigkJHJBRiwgJHEsICQkQW5pbWF0ZVJ1bm5lcikge1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIGluaXRpYWxPcHRpb25zKSB7XG4gICAgICAvLyBhbGwgb2YgdGhlIGFuaW1hdGlvbiBmdW5jdGlvbnMgc2hvdWxkIGNyZWF0ZVxuICAgICAgLy8gYSBjb3B5IG9mIHRoZSBvcHRpb25zIGRhdGEsIGhvd2V2ZXIsIGlmIGFcbiAgICAgIC8vIHBhcmVudCBzZXJ2aWNlIGhhcyBhbHJlYWR5IGNyZWF0ZWQgYSBjb3B5IHRoZW5cbiAgICAgIC8vIHdlIHNob3VsZCBzdGljayB0byB1c2luZyB0aGF0XG4gICAgICB2YXIgb3B0aW9ucyA9IGluaXRpYWxPcHRpb25zIHx8IHt9O1xuICAgICAgaWYgKCFvcHRpb25zLiQkcHJlcGFyZWQpIHtcbiAgICAgICAgb3B0aW9ucyA9IGNvcHkob3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHRoZXJlIGlzIG5vIHBvaW50IGluIGFwcGx5aW5nIHRoZSBzdHlsZXMgc2luY2VcbiAgICAgIC8vIHRoZXJlIGlzIG5vIGFuaW1hdGlvbiB0aGF0IGdvZXMgb24gYXQgYWxsIGluXG4gICAgICAvLyB0aGlzIHZlcnNpb24gb2YgJGFuaW1hdGVDc3MuXG4gICAgICBpZiAob3B0aW9ucy5jbGVhbnVwU3R5bGVzKSB7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMudG8gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5mcm9tKSB7XG4gICAgICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMuZnJvbSk7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBjbG9zZWQsIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBydW4sXG4gICAgICAgIGVuZDogcnVuXG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBydW4oKSB7XG4gICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGFwcGx5QW5pbWF0aW9uQ29udGVudHMoKTtcbiAgICAgICAgICBpZiAoIWNsb3NlZCkge1xuICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhcHBseUFuaW1hdGlvbkNvbnRlbnRzKCkge1xuICAgICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcykge1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3Mob3B0aW9ucy5hZGRDbGFzcyk7XG4gICAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKG9wdGlvbnMucmVtb3ZlQ2xhc3MpO1xuICAgICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnRvKSB7XG4gICAgICAgICAgZWxlbWVudC5jc3Mob3B0aW9ucy50byk7XG4gICAgICAgICAgb3B0aW9ucy50byA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XTtcbn07XG5cbi8qIGdsb2JhbCBzdHJpcEhhc2g6IHRydWUgKi9cblxuLyoqXG4gKiAhIFRoaXMgaXMgYSBwcml2YXRlIHVuZG9jdW1lbnRlZCBzZXJ2aWNlICFcbiAqXG4gKiBAbmFtZSAkYnJvd3NlclxuICogQHJlcXVpcmVzICRsb2dcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBvYmplY3QgaGFzIHR3byBnb2FsczpcbiAqXG4gKiAtIGhpZGUgYWxsIHRoZSBnbG9iYWwgc3RhdGUgaW4gdGhlIGJyb3dzZXIgY2F1c2VkIGJ5IHRoZSB3aW5kb3cgb2JqZWN0XG4gKiAtIGFic3RyYWN0IGF3YXkgYWxsIHRoZSBicm93c2VyIHNwZWNpZmljIGZlYXR1cmVzIGFuZCBpbmNvbnNpc3RlbmNpZXNcbiAqXG4gKiBGb3IgdGVzdHMgd2UgcHJvdmlkZSB7QGxpbmsgbmdNb2NrLiRicm93c2VyIG1vY2sgaW1wbGVtZW50YXRpb259IG9mIHRoZSBgJGJyb3dzZXJgXG4gKiBzZXJ2aWNlLCB3aGljaCBjYW4gYmUgdXNlZCBmb3IgY29udmVuaWVudCB0ZXN0aW5nIG9mIHRoZSBhcHBsaWNhdGlvbiB3aXRob3V0IHRoZSBpbnRlcmFjdGlvbiB3aXRoXG4gKiB0aGUgcmVhbCBicm93c2VyIGFwaXMuXG4gKi9cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHdpbmRvdyBUaGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QuXG4gKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgalF1ZXJ5IHdyYXBwZWQgZG9jdW1lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gJGxvZyB3aW5kb3cuY29uc29sZSBvciBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBpbnRlcmZhY2UuXG4gKiBAcGFyYW0ge29iamVjdH0gJHNuaWZmZXIgJHNuaWZmZXIgc2VydmljZVxuICovXG5mdW5jdGlvbiBCcm93c2VyKHdpbmRvdywgZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5LFxuICAgICAgc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0LFxuICAgICAgY2xlYXJUaW1lb3V0ID0gd2luZG93LmNsZWFyVGltZW91dCxcbiAgICAgIHBlbmRpbmdEZWZlcklkcyA9IHt9O1xuXG4gIHNlbGYuaXNNb2NrID0gZmFsc2U7XG5cbiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gMDtcbiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcyA9IFtdO1xuXG4gIC8vIFRPRE8odm9qdGEpOiByZW1vdmUgdGhpcyB0ZW1wb3JhcnkgYXBpXG4gIHNlbGYuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCA9IGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0O1xuICBzZWxmLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSBmdW5jdGlvbigpIHsgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKzsgfTtcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24oc3VwcG9ydHMgY3VycnlpbmcpIGFuZCBkZWNyZW1lbnRzIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYFxuICAgKiBjb3VudGVyLiBJZiB0aGUgY291bnRlciByZWFjaGVzIDAsIGFsbCB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2AgYXJlIGV4ZWN1dGVkLlxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgc2xpY2VBcmdzKGFyZ3VtZW50cywgMSkpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudC0tO1xuICAgICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7XG4gICAgICAgIHdoaWxlIChvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SGFzaCh1cmwpIHtcbiAgICB2YXIgaW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIHJldHVybiBpbmRleCA9PT0gLTEgPyAnJyA6IHVybC5zdWJzdHIoaW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIE5vdGU6IHRoaXMgbWV0aG9kIGlzIHVzZWQgb25seSBieSBzY2VuYXJpbyBydW5uZXJcbiAgICogVE9ETyh2b2p0YSk6IHByZWZpeCB0aGlzIG1ldGhvZCB3aXRoICQkID9cbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gbm8gb3V0c3RhbmRpbmcgcmVxdWVzdFxuICAgKi9cbiAgc2VsZi5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZiAob3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG4gIH07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gVVJMIEFQSVxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIHZhciBjYWNoZWRTdGF0ZSwgbGFzdEhpc3RvcnlTdGF0ZSxcbiAgICAgIGxhc3RCcm93c2VyVXJsID0gbG9jYXRpb24uaHJlZixcbiAgICAgIGJhc2VFbGVtZW50ID0gZG9jdW1lbnQuZmluZCgnYmFzZScpLFxuICAgICAgcGVuZGluZ0xvY2F0aW9uID0gbnVsbCxcbiAgICAgIGdldEN1cnJlbnRTdGF0ZSA9ICEkc25pZmZlci5oaXN0b3J5ID8gbm9vcCA6IGZ1bmN0aW9uIGdldEN1cnJlbnRTdGF0ZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gaGlzdG9yeS5zdGF0ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIE1TSUUgY2FuIHJlcG9ydGVkbHkgdGhyb3cgd2hlbiB0aGVyZSBpcyBubyBzdGF0ZSAoVU5DT05GSVJNRUQpLlxuICAgICAgICB9XG4gICAgICB9O1xuXG4gIGNhY2hlU3RhdGUoKTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjdXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHRVRURVI6XG4gICAqIFdpdGhvdXQgYW55IGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBqdXN0IHJldHVybnMgY3VycmVudCB2YWx1ZSBvZiBsb2NhdGlvbi5ocmVmLlxuICAgKlxuICAgKiBTRVRURVI6XG4gICAqIFdpdGggYXQgbGVhc3Qgb25lIGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBzZXRzIHVybCB0byBuZXcgdmFsdWUuXG4gICAqIElmIGh0bWw1IGhpc3RvcnkgYXBpIHN1cHBvcnRlZCwgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSBpcyB1c2VkLCBvdGhlcndpc2VcbiAgICogbG9jYXRpb24uaHJlZi9sb2NhdGlvbi5yZXBsYWNlIGlzIHVzZWQuXG4gICAqIFJldHVybnMgaXRzIG93biBpbnN0YW5jZSB0byBhbGxvdyBjaGFpbmluZ1xuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBjaGFuZ2UgdXJsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIE5ldyB1cmwgKHdoZW4gdXNlZCBhcyBzZXR0ZXIpXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlcGxhY2UgU2hvdWxkIG5ldyB1cmwgcmVwbGFjZSBjdXJyZW50IGhpc3RvcnkgcmVjb3JkP1xuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlIG9iamVjdCB0byB1c2Ugd2l0aCBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlXG4gICAqL1xuICBzZWxmLnVybCA9IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgYGhpc3Rvcnkuc3RhdGVgIGlzIGBudWxsYCBieSBkZWZhdWx0OyB0cmVhdGluZyBpdCBzZXBhcmF0ZWx5XG4gICAgLy8gZnJvbSBgdW5kZWZpbmVkYCB3b3VsZCBjYXVzZSBgJGJyb3dzZXIudXJsKCcvZm9vJylgIHRvIGNoYW5nZSBgaGlzdG9yeS5zdGF0ZWBcbiAgICAvLyB0byB1bmRlZmluZWQgdmlhIGBwdXNoU3RhdGVgLiBJbnN0ZWFkLCBsZXQncyBjaGFuZ2UgYHVuZGVmaW5lZGAgdG8gYG51bGxgIGhlcmUuXG4gICAgaWYgKGlzVW5kZWZpbmVkKHN0YXRlKSkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEFuZHJvaWQgQnJvd3NlciBCRkNhY2hlIGNhdXNlcyBsb2NhdGlvbiwgaGlzdG9yeSByZWZlcmVuY2UgdG8gYmVjb21lIHN0YWxlLlxuICAgIGlmIChsb2NhdGlvbiAhPT0gd2luZG93LmxvY2F0aW9uKSBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICBpZiAoaGlzdG9yeSAhPT0gd2luZG93Lmhpc3RvcnkpIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICAgIC8vIHNldHRlclxuICAgIGlmICh1cmwpIHtcbiAgICAgIHZhciBzYW1lU3RhdGUgPSBsYXN0SGlzdG9yeVN0YXRlID09PSBzdGF0ZTtcblxuICAgICAgLy8gRG9uJ3QgY2hhbmdlIGFueXRoaW5nIGlmIHByZXZpb3VzIGFuZCBjdXJyZW50IFVSTHMgYW5kIHN0YXRlcyBtYXRjaC4gVGhpcyBhbHNvIHByZXZlbnRzXG4gICAgICAvLyBJRTwxMCBmcm9tIGdldHRpbmcgaW50byByZWRpcmVjdCBsb29wIHdoZW4gaW4gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwgbW9kZS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2NvbW1pdC9mZmIyNzAxXG4gICAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHVybCAmJiAoISRzbmlmZmVyLmhpc3RvcnkgfHwgc2FtZVN0YXRlKSkge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cbiAgICAgIHZhciBzYW1lQmFzZSA9IGxhc3RCcm93c2VyVXJsICYmIHN0cmlwSGFzaChsYXN0QnJvd3NlclVybCkgPT09IHN0cmlwSGFzaCh1cmwpO1xuICAgICAgbGFzdEJyb3dzZXJVcmwgPSB1cmw7XG4gICAgICBsYXN0SGlzdG9yeVN0YXRlID0gc3RhdGU7XG4gICAgICAvLyBEb24ndCB1c2UgaGlzdG9yeSBBUEkgaWYgb25seSB0aGUgaGFzaCBjaGFuZ2VkXG4gICAgICAvLyBkdWUgdG8gYSBidWcgaW4gSUUxMC9JRTExIHdoaWNoIGxlYWRzXG4gICAgICAvLyB0byBub3QgZmlyaW5nIGEgYGhhc2hjaGFuZ2VgIG5vciBgcG9wc3RhdGVgIGV2ZW50XG4gICAgICAvLyBpbiBzb21lIGNhc2VzIChzZWUgIzkxNDMpLlxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkgJiYgKCFzYW1lQmFzZSB8fCAhc2FtZVN0YXRlKSkge1xuICAgICAgICBoaXN0b3J5W3JlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXShzdGF0ZSwgJycsIHVybCk7XG4gICAgICAgIGNhY2hlU3RhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghc2FtZUJhc2UpIHtcbiAgICAgICAgICBwZW5kaW5nTG9jYXRpb24gPSB1cmw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICBsb2NhdGlvbi5yZXBsYWNlKHVybCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXNhbWVCYXNlKSB7XG4gICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2NhdGlvbi5oYXNoID0gZ2V0SGFzaCh1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhdGlvbi5ocmVmICE9PSB1cmwpIHtcbiAgICAgICAgICBwZW5kaW5nTG9jYXRpb24gPSB1cmw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdXJsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgLy8gZ2V0dGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC0gcGVuZGluZ0xvY2F0aW9uIGlzIG5lZWRlZCBhcyBicm93c2VycyBkb24ndCBhbGxvdyB0byByZWFkIG91dFxuICAgICAgLy8gICB0aGUgbmV3IGxvY2F0aW9uLmhyZWYgaWYgYSByZWxvYWQgaGFwcGVuZWQgb3IgaWYgdGhlcmUgaXMgYSBidWcgbGlrZSBpbiBpT1MgOSAoc2VlXG4gICAgICAvLyAgIGh0dHBzOi8vb3BlbnJhZGFyLmFwcHNwb3QuY29tLzIyMTg2MTA5KS5cbiAgICAgIC8vIC0gdGhlIHJlcGxhY2VtZW50IGlzIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDA3MTcyXG4gICAgICByZXR1cm4gcGVuZGluZ0xvY2F0aW9uIHx8IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvJTI3L2csJ1xcJycpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjc3RhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGEgZ2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gaGlzdG9yeS5zdGF0ZSBvciBudWxsIGlmIGhpc3Rvcnkuc3RhdGUgaXMgdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBzdGF0ZVxuICAgKi9cbiAgc2VsZi5zdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjYWNoZWRTdGF0ZTtcbiAgfTtcblxuICB2YXIgdXJsQ2hhbmdlTGlzdGVuZXJzID0gW10sXG4gICAgICB1cmxDaGFuZ2VJbml0ID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UoKSB7XG4gICAgcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICBmaXJlU3RhdGVPclVybENoYW5nZSgpO1xuICB9XG5cbiAgLy8gVGhpcyB2YXJpYWJsZSBzaG91bGQgYmUgdXNlZCAqb25seSogaW5zaWRlIHRoZSBjYWNoZVN0YXRlIGZ1bmN0aW9uLlxuICB2YXIgbGFzdENhY2hlZFN0YXRlID0gbnVsbDtcbiAgZnVuY3Rpb24gY2FjaGVTdGF0ZSgpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBiZSB0aGUgb25seSBwbGFjZSBpbiAkYnJvd3NlciB3aGVyZSBgaGlzdG9yeS5zdGF0ZWAgaXMgcmVhZC5cbiAgICBjYWNoZWRTdGF0ZSA9IGdldEN1cnJlbnRTdGF0ZSgpO1xuICAgIGNhY2hlZFN0YXRlID0gaXNVbmRlZmluZWQoY2FjaGVkU3RhdGUpID8gbnVsbCA6IGNhY2hlZFN0YXRlO1xuXG4gICAgLy8gUHJldmVudCBjYWxsYmFja3MgZm8gZmlyZSB0d2ljZSBpZiBib3RoIGhhc2hjaGFuZ2UgJiBwb3BzdGF0ZSB3ZXJlIGZpcmVkLlxuICAgIGlmIChlcXVhbHMoY2FjaGVkU3RhdGUsIGxhc3RDYWNoZWRTdGF0ZSkpIHtcbiAgICAgIGNhY2hlZFN0YXRlID0gbGFzdENhY2hlZFN0YXRlO1xuICAgIH1cblxuICAgIGxhc3RDYWNoZWRTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpcmVTdGF0ZU9yVXJsQ2hhbmdlKCkge1xuICAgIHZhciBwcmV2TGFzdEhpc3RvcnlTdGF0ZSA9IGxhc3RIaXN0b3J5U3RhdGU7XG4gICAgY2FjaGVTdGF0ZSgpO1xuXG4gICAgaWYgKGxhc3RCcm93c2VyVXJsID09PSBzZWxmLnVybCgpICYmIHByZXZMYXN0SGlzdG9yeVN0YXRlID09PSBjYWNoZWRTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxhc3RCcm93c2VyVXJsID0gc2VsZi51cmwoKTtcbiAgICBsYXN0SGlzdG9yeVN0YXRlID0gY2FjaGVkU3RhdGU7XG4gICAgZm9yRWFjaCh1cmxDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcihzZWxmLnVybCgpLCBjYWNoZWRTdGF0ZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjb25VcmxDaGFuZ2VcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQsIHdoZW4gdXJsIGNoYW5nZXMuXG4gICAqXG4gICAqIEl0J3Mgb25seSBjYWxsZWQgd2hlbiB0aGUgdXJsIGlzIGNoYW5nZWQgZnJvbSBvdXRzaWRlIG9mIGFuZ3VsYXI6XG4gICAqIC0gdXNlciB0eXBlcyBkaWZmZXJlbnQgdXJsIGludG8gYWRkcmVzcyBiYXJcbiAgICogLSB1c2VyIGNsaWNrcyBvbiBoaXN0b3J5IChmb3J3YXJkL2JhY2spIGJ1dHRvblxuICAgKiAtIHVzZXIgY2xpY2tzIG9uIGEgbGlua1xuICAgKlxuICAgKiBJdCdzIG5vdCBjYWxsZWQgd2hlbiB1cmwgaXMgY2hhbmdlZCBieSAkYnJvd3Nlci51cmwoKSBtZXRob2RcbiAgICpcbiAgICogVGhlIGxpc3RlbmVyIGdldHMgY2FsbGVkIHdpdGggbmV3IHVybCBhcyBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIG1vbml0b3IgdXJsIGNoYW5nZXMgaW4gYW5ndWxhciBhcHBzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGxpc3RlbmVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHVybCBjaGFuZ2VzLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbihzdHJpbmcpfSBSZXR1cm5zIHRoZSByZWdpc3RlcmVkIGxpc3RlbmVyIGZuIC0gaGFuZHkgaWYgdGhlIGZuIGlzIGFub255bW91cy5cbiAgICovXG4gIHNlbGYub25VcmxDaGFuZ2UgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIC8vIFRPRE8odm9qdGEpOiByZWZhY3RvciB0byB1c2Ugbm9kZSdzIHN5bnRheCBmb3IgZXZlbnRzXG4gICAgaWYgKCF1cmxDaGFuZ2VJbml0KSB7XG4gICAgICAvLyBXZSBsaXN0ZW4gb24gYm90aCAoaGFzaGNoYW5nZS9wb3BzdGF0ZSkgd2hlbiBhdmFpbGFibGUsIGFzIHNvbWUgYnJvd3NlcnMgZG9uJ3RcbiAgICAgIC8vIGZpcmUgcG9wc3RhdGUgd2hlbiB1c2VyIGNoYW5nZXMgdGhlIGFkZHJlc3MgYmFyIGFuZCBkb24ndCBmaXJlIGhhc2hjaGFuZ2Ugd2hlbiB1cmxcbiAgICAgIC8vIGNoYW5nZWQgYnkgcHVzaC9yZXBsYWNlU3RhdGVcblxuICAgICAgLy8gaHRtbDUgaGlzdG9yeSBhcGkgLSBwb3BzdGF0ZSBldmVudFxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIGpxTGl0ZSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcbiAgICAgIC8vIGhhc2hjaGFuZ2UgZXZlbnRcbiAgICAgIGpxTGl0ZSh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UpO1xuXG4gICAgICB1cmxDaGFuZ2VJbml0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1cmxDaGFuZ2VMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBSZW1vdmUgcG9wc3RhdGUgYW5kIGhhc2hjaGFuZ2UgaGFuZGxlciBmcm9tIHdpbmRvdy5cbiAgICpcbiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5ICRyb290U2NvcGUuXG4gICAqL1xuICBzZWxmLiQkYXBwbGljYXRpb25EZXN0cm95ZWQgPSBmdW5jdGlvbigpIHtcbiAgICBqcUxpdGUod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2UgcG9wc3RhdGUnLCBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIHRoZSB1cmwgaGFzIGNoYW5nZWQgb3V0c2lkZSBvZiBBbmd1bGFyLlxuICAgKiBOZWVkcyB0byBiZSBleHBvcnRlZCB0byBiZSBhYmxlIHRvIGNoZWNrIGZvciBjaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIGRvbmUgaW4gc3luYyxcbiAgICogYXMgaGFzaGNoYW5nZS9wb3BzdGF0ZSBldmVudHMgZmlyZSBpbiBhc3luYy5cbiAgICovXG4gIHNlbGYuJCRjaGVja1VybENoYW5nZSA9IGZpcmVTdGF0ZU9yVXJsQ2hhbmdlO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1pc2MgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2Jhc2VIcmVmXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGN1cnJlbnQgPGJhc2UgaHJlZj5cbiAgICogKGFsd2F5cyByZWxhdGl2ZSAtIHdpdGhvdXQgZG9tYWluKVxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY3VycmVudCBiYXNlIGhyZWZcbiAgICovXG4gIHNlbGYuYmFzZUhyZWYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaHJlZiA9IGJhc2VFbGVtZW50LmF0dHIoJ2hyZWYnKTtcbiAgICByZXR1cm4gaHJlZiA/IGhyZWYucmVwbGFjZSgvXihodHRwcz86KT9cXC9cXC9bXi9dKi8sICcnKSA6ICcnO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdobydzIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVmZXJyZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gW2RlbGF5PTBdIG9mIG1pbGxpc2Vjb25kcyB0byBkZWZlciB0aGUgZnVuY3Rpb24gZXhlY3V0aW9uLlxuICAgKiBAcmV0dXJucyB7Kn0gRGVmZXJJZCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNhbmNlbCB0aGUgdGFzayB2aWEgYCRicm93c2VyLmRlZmVyLmNhbmNlbCgpYC5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEV4ZWN1dGVzIGEgZm4gYXN5bmNocm9ub3VzbHkgdmlhIGBzZXRUaW1lb3V0KGZuLCBkZWxheSlgLlxuICAgKlxuICAgKiBVbmxpa2Ugd2hlbiBjYWxsaW5nIGBzZXRUaW1lb3V0YCBkaXJlY3RseSwgaW4gdGVzdCB0aGlzIGZ1bmN0aW9uIGlzIG1vY2tlZCBhbmQgaW5zdGVhZCBvZiB1c2luZ1xuICAgKiBgc2V0VGltZW91dGAgaW4gdGVzdHMsIHRoZSBmbnMgYXJlIHF1ZXVlZCBpbiBhbiBhcnJheSwgd2hpY2ggY2FuIGJlIHByb2dyYW1tYXRpY2FsbHkgZmx1c2hlZFxuICAgKiB2aWEgYCRicm93c2VyLmRlZmVyLmZsdXNoKClgLlxuICAgKlxuICAgKi9cbiAgc2VsZi5kZWZlciA9IGZ1bmN0aW9uKGZuLCBkZWxheSkge1xuICAgIHZhciB0aW1lb3V0SWQ7XG4gICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKztcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZGVsZXRlIHBlbmRpbmdEZWZlcklkc1t0aW1lb3V0SWRdO1xuICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pO1xuICAgIH0sIGRlbGF5IHx8IDApO1xuICAgIHBlbmRpbmdEZWZlcklkc1t0aW1lb3V0SWRdID0gdHJ1ZTtcbiAgICByZXR1cm4gdGltZW91dElkO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2RlZmVyLmNhbmNlbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FuY2VscyBhIGRlZmVycmVkIHRhc2sgaWRlbnRpZmllZCB3aXRoIGBkZWZlcklkYC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBkZWZlcklkIFRva2VuIHJldHVybmVkIGJ5IHRoZSBgJGJyb3dzZXIuZGVmZXJgIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgKiAgICAgICAgICAgICAgICAgICAgY2FuY2VsZWQuXG4gICAqL1xuICBzZWxmLmRlZmVyLmNhbmNlbCA9IGZ1bmN0aW9uKGRlZmVySWQpIHtcbiAgICBpZiAocGVuZGluZ0RlZmVySWRzW2RlZmVySWRdKSB7XG4gICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW2RlZmVySWRdO1xuICAgICAgY2xlYXJUaW1lb3V0KGRlZmVySWQpO1xuICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Qobm9vcCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJEJyb3dzZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRsb2cnLCAnJHNuaWZmZXInLCAnJGRvY3VtZW50JyxcbiAgICAgIGZ1bmN0aW9uKCR3aW5kb3csICRsb2csICRzbmlmZmVyLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCcm93c2VyKCR3aW5kb3csICRkb2N1bWVudCwgJGxvZywgJHNuaWZmZXIpO1xuICAgICAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRjYWNoZUZhY3RvcnlcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGYWN0b3J5IHRoYXQgY29uc3RydWN0cyB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0cyBhbmQgZ2l2ZXMgYWNjZXNzIHRvXG4gKiB0aGVtLlxuICpcbiAqIGBgYGpzXG4gKlxuICogIHZhciBjYWNoZSA9ICRjYWNoZUZhY3RvcnkoJ2NhY2hlSWQnKTtcbiAqICBleHBlY3QoJGNhY2hlRmFjdG9yeS5nZXQoJ2NhY2hlSWQnKSkudG9CZShjYWNoZSk7XG4gKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdub1N1Y2hDYWNoZUlkJykpLm5vdC50b0JlRGVmaW5lZCgpO1xuICpcbiAqICBjYWNoZS5wdXQoXCJrZXlcIiwgXCJ2YWx1ZVwiKTtcbiAqICBjYWNoZS5wdXQoXCJhbm90aGVyIGtleVwiLCBcImFub3RoZXIgdmFsdWVcIik7XG4gKlxuICogIC8vIFdlJ3ZlIHNwZWNpZmllZCBubyBvcHRpb25zIG9uIGNyZWF0aW9uXG4gKiAgZXhwZWN0KGNhY2hlLmluZm8oKSkudG9FcXVhbCh7aWQ6ICdjYWNoZUlkJywgc2l6ZTogMn0pO1xuICpcbiAqIGBgYFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIHRoZSBuZXdseSBjcmVhdGVkIGNhY2hlLlxuICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBjYWNoZSBiZWhhdmlvci4gUHJvcGVydGllczpcbiAqXG4gKiAgIC0gYHtudW1iZXI9fWAgYGNhcGFjaXR5YCDigJQgdHVybnMgdGhlIGNhY2hlIGludG8gTFJVIGNhY2hlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IE5ld2x5IGNyZWF0ZWQgY2FjaGUgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzZXQgb2YgbWV0aG9kczpcbiAqXG4gKiAtIGB7b2JqZWN0fWAgYGluZm8oKWAg4oCUIFJldHVybnMgaWQsIHNpemUsIGFuZCBvcHRpb25zIG9mIGNhY2hlLlxuICogLSBge3sqfX1gIGBwdXQoe3N0cmluZ30ga2V5LCB7Kn0gdmFsdWUpYCDigJQgUHV0cyBhIG5ldyBrZXktdmFsdWUgcGFpciBpbnRvIHRoZSBjYWNoZSBhbmQgcmV0dXJuc1xuICogICBpdC5cbiAqIC0gYHt7Kn19YCBgZ2V0KHtzdHJpbmd9IGtleSlgIOKAlCBSZXR1cm5zIGNhY2hlZCB2YWx1ZSBmb3IgYGtleWAgb3IgdW5kZWZpbmVkIGZvciBjYWNoZSBtaXNzLlxuICogLSBge3ZvaWR9YCBgcmVtb3ZlKHtzdHJpbmd9IGtleSlgIOKAlCBSZW1vdmVzIGEga2V5LXZhbHVlIHBhaXIgZnJvbSB0aGUgY2FjaGUuXG4gKiAtIGB7dm9pZH1gIGByZW1vdmVBbGwoKWAg4oCUIFJlbW92ZXMgYWxsIGNhY2hlZCB2YWx1ZXMuXG4gKiAtIGB7dm9pZH1gIGBkZXN0cm95KClgIOKAlCBSZW1vdmVzIHJlZmVyZW5jZXMgdG8gdGhpcyBjYWNoZSBmcm9tICRjYWNoZUZhY3RvcnkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImNhY2hlRXhhbXBsZUFwcFwiIG5hbWU9XCJjYWNoZS1mYWN0b3J5XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ2FjaGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuZXdDYWNoZUtleVwiIHBsYWNlaG9sZGVyPVwiS2V5XCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuZXdDYWNoZVZhbHVlXCIgcGxhY2Vob2xkZXI9XCJWYWx1ZVwiPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInB1dChuZXdDYWNoZUtleSwgbmV3Q2FjaGVWYWx1ZSlcIj5DYWNoZTwvYnV0dG9uPlxuXG4gICAgICAgICA8cCBuZy1pZj1cImtleXMubGVuZ3RoXCI+Q2FjaGVkIFZhbHVlczwvcD5cbiAgICAgICAgIDxkaXYgbmctcmVwZWF0PVwia2V5IGluIGtleXNcIj5cbiAgICAgICAgICAgPHNwYW4gbmctYmluZD1cImtleVwiPjwvc3Bhbj5cbiAgICAgICAgICAgPHNwYW4+OiA8L3NwYW4+XG4gICAgICAgICAgIDxiIG5nLWJpbmQ9XCJjYWNoZS5nZXQoa2V5KVwiPjwvYj5cbiAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICA8cD5DYWNoZSBJbmZvPC9wPlxuICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCIoa2V5LCB2YWx1ZSkgaW4gY2FjaGUuaW5mbygpXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWJpbmQ9XCJrZXlcIj48L3NwYW4+XG4gICAgICAgICAgIDxzcGFuPjogPC9zcGFuPlxuICAgICAgICAgICA8YiBuZy1iaW5kPVwidmFsdWVcIj48L2I+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2NhY2hlRXhhbXBsZUFwcCcsIFtdKS5cbiAgICAgICAgIGNvbnRyb2xsZXIoJ0NhY2hlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkc2NvcGUsICRjYWNoZUZhY3RvcnkpIHtcbiAgICAgICAgICAgJHNjb3BlLmtleXMgPSBbXTtcbiAgICAgICAgICAgJHNjb3BlLmNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpO1xuICAgICAgICAgICAkc2NvcGUucHV0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKCRzY29wZS5jYWNoZS5nZXQoa2V5KSkpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgJHNjb3BlLmNhY2hlLnB1dChrZXksIGFuZ3VsYXIuaXNVbmRlZmluZWQodmFsdWUpID8gbnVsbCA6IHZhbHVlKTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgcCB7XG4gICAgICAgICBtYXJnaW46IDEwcHggMCAzcHg7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRDYWNoZUZhY3RvcnlQcm92aWRlcigpIHtcblxuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2FjaGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBjYWNoZUZhY3RvcnkoY2FjaGVJZCwgb3B0aW9ucykge1xuICAgICAgaWYgKGNhY2hlSWQgaW4gY2FjaGVzKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGNhY2hlRmFjdG9yeScpKCdpaWQnLCAnQ2FjaGVJZCBcXCd7MH1cXCcgaXMgYWxyZWFkeSB0YWtlbiEnLCBjYWNoZUlkKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpemUgPSAwLFxuICAgICAgICAgIHN0YXRzID0gZXh0ZW5kKHt9LCBvcHRpb25zLCB7aWQ6IGNhY2hlSWR9KSxcbiAgICAgICAgICBkYXRhID0gY3JlYXRlTWFwKCksXG4gICAgICAgICAgY2FwYWNpdHkgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNhcGFjaXR5KSB8fCBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgIGxydUhhc2ggPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICBmcmVzaEVuZCA9IG51bGwsXG4gICAgICAgICAgc3RhbGVFbmQgPSBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIGNhY2hlIG9iamVjdCB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBkYXRhLCBwcmltYXJpbHkgdXNlZCBieVxuICAgICAgICoge0BsaW5rICRodHRwICRodHRwfSBhbmQgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6c2NyaXB0IHNjcmlwdH0gZGlyZWN0aXZlIHRvIGNhY2hlXG4gICAgICAgKiB0ZW1wbGF0ZXMgYW5kIG90aGVyIGRhdGEuXG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICBhbmd1bGFyLm1vZHVsZSgnc3VwZXJDYWNoZScpXG4gICAgICAgKiAgICAuZmFjdG9yeSgnc3VwZXJDYWNoZScsIFsnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnkpIHtcbiAgICAgICAqICAgICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3N1cGVyLWNhY2hlJyk7XG4gICAgICAgKiAgICB9XSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBFeGFtcGxlIHRlc3Q6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICBpdCgnc2hvdWxkIGJlaGF2ZSBsaWtlIGEgY2FjaGUnLCBpbmplY3QoZnVuY3Rpb24oc3VwZXJDYWNoZSkge1xuICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2tleScsICd2YWx1ZScpO1xuICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2Fub3RoZXIga2V5JywgJ2Fub3RoZXIgdmFsdWUnKTtcbiAgICAgICAqXG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5pbmZvKCkpLnRvRXF1YWwoe1xuICAgICAgICogICAgICBpZDogJ3N1cGVyLWNhY2hlJyxcbiAgICAgICAqICAgICAgc2l6ZTogMlxuICAgICAgICogICAgfSk7XG4gICAgICAgKlxuICAgICAgICogICAgc3VwZXJDYWNoZS5yZW1vdmUoJ2Fub3RoZXIga2V5Jyk7XG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5nZXQoJ2Fub3RoZXIga2V5JykpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgICAqXG4gICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZUFsbCgpO1xuICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuaW5mbygpKS50b0VxdWFsKHtcbiAgICAgICAqICAgICAgaWQ6ICdzdXBlci1jYWNoZScsXG4gICAgICAgKiAgICAgIHNpemU6IDBcbiAgICAgICAqICAgIH0pO1xuICAgICAgICogIH0pKTtcbiAgICAgICAqIGBgYFxuICAgICAgICovXG4gICAgICByZXR1cm4gKGNhY2hlc1tjYWNoZUlkXSA9IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3B1dFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogSW5zZXJ0cyBhIG5hbWVkIGVudHJ5IGludG8gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QgdG8gYmVcbiAgICAgICAgICogcmV0cmlldmVkIGxhdGVyLCBhbmQgaW5jcmVtZW50aW5nIHRoZSBzaXplIG9mIHRoZSBjYWNoZSBpZiB0aGUga2V5IHdhcyBub3QgYWxyZWFkeVxuICAgICAgICAgKiBwcmVzZW50IGluIHRoZSBjYWNoZS4gSWYgYmVoYXZpbmcgbGlrZSBhbiBMUlUgY2FjaGUsIGl0IHdpbGwgYWxzbyByZW1vdmUgc3RhbGVcbiAgICAgICAgICogZW50cmllcyBmcm9tIHRoZSBzZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEl0IHdpbGwgbm90IGluc2VydCB1bmRlZmluZWQgdmFsdWVzIGludG8gdGhlIGNhY2hlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgdW5kZXIgd2hpY2ggdGhlIGNhY2hlZCBkYXRhIGlzIHN0b3JlZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSB0aGUgdmFsdWUgdG8gc3RvcmUgYWxvbmdzaWRlIHRoZSBrZXkuIElmIGl0IGlzIHVuZGVmaW5lZCwgdGhlIGtleVxuICAgICAgICAgKiAgICB3aWxsIG5vdCBiZSBzdG9yZWQuXG4gICAgICAgICAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgc3RvcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XSB8fCAobHJ1SGFzaFtrZXldID0ge2tleToga2V5fSk7XG5cbiAgICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghKGtleSBpbiBkYXRhKSkgc2l6ZSsrO1xuICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuXG4gICAgICAgICAgaWYgKHNpemUgPiBjYXBhY2l0eSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3RhbGVFbmQua2V5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNnZXRcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlcyBuYW1lZCBkYXRhIHN0b3JlZCBpbiB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IG9mIHRoZSBkYXRhIHRvIGJlIHJldHJpZXZlZFxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHN0b3JlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldO1xuXG4gICAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XG5cbiAgICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3JlbW92ZVxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUmVtb3ZlcyBhbiBlbnRyeSBmcm9tIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldO1xuXG4gICAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PT0gZnJlc2hFbmQpIGZyZXNoRW5kID0gbHJ1RW50cnkucDtcbiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PT0gc3RhbGVFbmQpIHN0YWxlRW5kID0gbHJ1RW50cnkubjtcbiAgICAgICAgICAgIGxpbmsobHJ1RW50cnkubixscnVFbnRyeS5wKTtcblxuICAgICAgICAgICAgZGVsZXRlIGxydUhhc2hba2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHJldHVybjtcblxuICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICAgICAgc2l6ZS0tO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVBbGxcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIENsZWFycyB0aGUgY2FjaGUgb2JqZWN0IG9mIGFueSBlbnRyaWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkYXRhID0gY3JlYXRlTWFwKCk7XG4gICAgICAgICAgc2l6ZSA9IDA7XG4gICAgICAgICAgbHJ1SGFzaCA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGZyZXNoRW5kID0gc3RhbGVFbmQgPSBudWxsO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNkZXN0cm95XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBEZXN0cm95cyB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCBlbnRpcmVseSxcbiAgICAgICAgICogcmVtb3ZpbmcgaXQgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0gc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgc3RhdHMgPSBudWxsO1xuICAgICAgICAgIGxydUhhc2ggPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZXNbY2FjaGVJZF07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2luZm9cbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBhIHBhcnRpY3VsYXIge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgICAqICAgPHVsPlxuICAgICAgICAgKiAgICAgPGxpPioqaWQqKjogdGhlIGlkIG9mIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KipzaXplKio6IHRoZSBudW1iZXIgb2YgZW50cmllcyBrZXB0IGluIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KiouLi4qKjogYW55IGFkZGl0aW9uYWwgcHJvcGVydGllcyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCB3aGVuIGNyZWF0aW5nIHRoZVxuICAgICAgICAgKiAgICAgICBjYWNoZS48L2xpPlxuICAgICAgICAgKiAgIDwvdWw+XG4gICAgICAgICAqL1xuICAgICAgICBpbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBzdGF0cywge3NpemU6IHNpemV9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBtYWtlcyB0aGUgYGVudHJ5YCB0aGUgZnJlc2hFbmQgb2YgdGhlIExSVSBsaW5rZWQgbGlzdFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiByZWZyZXNoKGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeSAhPT0gZnJlc2hFbmQpIHtcbiAgICAgICAgICBpZiAoIXN0YWxlRW5kKSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhbGVFbmQgPT09IGVudHJ5KSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5Lm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluayhlbnRyeS5uLCBlbnRyeS5wKTtcbiAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7XG4gICAgICAgICAgZnJlc2hFbmQgPSBlbnRyeTtcbiAgICAgICAgICBmcmVzaEVuZC5uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogYmlkaXJlY3Rpb25hbGx5IGxpbmtzIHR3byBlbnRyaWVzIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gbGluayhuZXh0RW50cnksIHByZXZFbnRyeSkge1xuICAgICAgICBpZiAobmV4dEVudHJ5ICE9PSBwcmV2RW50cnkpIHtcbiAgICAgICAgICBpZiAobmV4dEVudHJ5KSBuZXh0RW50cnkucCA9IHByZXZFbnRyeTsgLy9wIHN0YW5kcyBmb3IgcHJldmlvdXMsICdwcmV2JyBkaWRuJ3QgbWluaWZ5XG4gICAgICAgICAgaWYgKHByZXZFbnRyeSkgcHJldkVudHJ5Lm4gPSBuZXh0RW50cnk7IC8vbiBzdGFuZHMgZm9yIG5leHQsICduZXh0JyBkaWRuJ3QgbWluaWZ5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2luZm9cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgdGhlIGNhY2hlcyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IC0ga2V5LXZhbHVlIG1hcCBvZiBgY2FjaGVJZGAgdG8gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIGBjYWNoZSNpbmZvYFxuICAgKi9cbiAgICBjYWNoZUZhY3RvcnkuaW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGluZm8gPSB7fTtcbiAgICAgIGZvckVhY2goY2FjaGVzLCBmdW5jdGlvbihjYWNoZSwgY2FjaGVJZCkge1xuICAgICAgICBpbmZvW2NhY2hlSWRdID0gY2FjaGUuaW5mbygpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNhY2hlRmFjdG9yeSNnZXRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEdldCBhY2Nlc3MgdG8gYSBjYWNoZSBvYmplY3QgYnkgdGhlIGBjYWNoZUlkYCB1c2VkIHdoZW4gaXQgd2FzIGNyZWF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUlkIE5hbWUgb3IgaWQgb2YgYSBjYWNoZSB0byBhY2Nlc3MuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IENhY2hlIG9iamVjdCBpZGVudGlmaWVkIGJ5IHRoZSBjYWNoZUlkIG9yIHVuZGVmaW5lZCBpZiBubyBzdWNoIGNhY2hlLlxuICAgKi9cbiAgICBjYWNoZUZhY3RvcnkuZ2V0ID0gZnVuY3Rpb24oY2FjaGVJZCkge1xuICAgICAgcmV0dXJuIGNhY2hlc1tjYWNoZUlkXTtcbiAgICB9O1xuXG5cbiAgICByZXR1cm4gY2FjaGVGYWN0b3J5O1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkdGVtcGxhdGVDYWNoZVxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBmaXJzdCB0aW1lIGEgdGVtcGxhdGUgaXMgdXNlZCwgaXQgaXMgbG9hZGVkIGluIHRoZSB0ZW1wbGF0ZSBjYWNoZSBmb3IgcXVpY2sgcmV0cmlldmFsLiBZb3VcbiAqIGNhbiBsb2FkIHRlbXBsYXRlcyBkaXJlY3RseSBpbnRvIHRoZSBjYWNoZSBpbiBhIGBzY3JpcHRgIHRhZywgb3IgYnkgY29uc3VtaW5nIHRoZVxuICogYCR0ZW1wbGF0ZUNhY2hlYCBzZXJ2aWNlIGRpcmVjdGx5LlxuICpcbiAqIEFkZGluZyB2aWEgdGhlIGBzY3JpcHRgIHRhZzpcbiAqXG4gKiBgYGBodG1sXG4gKiAgIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cInRlbXBsYXRlSWQuaHRtbFwiPlxuICogICAgIDxwPlRoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlPC9wPlxuICogICA8L3NjcmlwdD5cbiAqIGBgYFxuICpcbiAqICoqTm90ZToqKiB0aGUgYHNjcmlwdGAgdGFnIGNvbnRhaW5pbmcgdGhlIHRlbXBsYXRlIGRvZXMgbm90IG5lZWQgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGBoZWFkYCBvZlxuICogdGhlIGRvY3VtZW50LCBidXQgaXQgbXVzdCBiZSBhIGRlc2NlbmRlbnQgb2YgdGhlIHtAbGluayBuZy4kcm9vdEVsZW1lbnQgJHJvb3RFbGVtZW50fSAoSUUsXG4gKiBlbGVtZW50IHdpdGggbmctYXBwIGF0dHJpYnV0ZSksIG90aGVyd2lzZSB0aGUgdGVtcGxhdGUgd2lsbCBiZSBpZ25vcmVkLlxuICpcbiAqIEFkZGluZyB2aWEgdGhlIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIG15QXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgW10pO1xuICogbXlBcHAucnVuKGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gKiAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGVtcGxhdGVJZC5odG1sJywgJ1RoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIFRvIHJldHJpZXZlIHRoZSB0ZW1wbGF0ZSBsYXRlciwgc2ltcGx5IHVzZSBpdCBpbiB5b3VyIGNvbXBvbmVudDpcbiAqIGBgYGpzXG4gKiBteUFwcC5jb21wb25lbnQoJ215Q29tcG9uZW50Jywge1xuICogICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZUlkLmh0bWwnXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIG9yIGdldCBpdCB2aWEgdGhlIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZTpcbiAqIGBgYGpzXG4gKiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3RlbXBsYXRlSWQuaHRtbCcpXG4gKiBgYGBcbiAqXG4gKiBTZWUge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0uXG4gKlxuICovXG5mdW5jdGlvbiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3RlbXBsYXRlcycpO1xuICB9XTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2UgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiAhIFZBUklBQkxFL0ZVTkNUSU9OIE5BTUlORyBDT05WRU5USU9OUyBUSEFUIEFQUExZIFRPIFRISVMgRklMRSFcbiAqXG4gKiBET00tcmVsYXRlZCB2YXJpYWJsZXM6XG4gKlxuICogLSBcIm5vZGVcIiAtIERPTSBOb2RlXG4gKiAtIFwiZWxlbWVudFwiIC0gRE9NIEVsZW1lbnQgb3IgTm9kZVxuICogLSBcIiRub2RlXCIgb3IgXCIkZWxlbWVudFwiIC0ganFMaXRlLXdyYXBwZWQgbm9kZSBvciBlbGVtZW50XG4gKlxuICpcbiAqIENvbXBpbGVyIHJlbGF0ZWQgc3R1ZmY6XG4gKlxuICogLSBcImxpbmtGblwiIC0gbGlua2luZyBmbiBvZiBhIHNpbmdsZSBkaXJlY3RpdmVcbiAqIC0gXCJub2RlTGlua0ZuXCIgLSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBhIHBhcnRpY3VsYXIgbm9kZVxuICogLSBcImNoaWxkTGlua0ZuXCIgLSAgZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgY2hpbGQgbm9kZXMgb2YgYSBwYXJ0aWN1bGFyIG5vZGVcbiAqIC0gXCJjb21wb3NpdGVMaW5rRm5cIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgY29tcGlsYXRpb24gcm9vdCAobm9kZUxpc3QpXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkY29tcGlsZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBpbGVzIGFuIEhUTUwgc3RyaW5nIG9yIERPTSBpbnRvIGEgdGVtcGxhdGUgYW5kIHByb2R1Y2VzIGEgdGVtcGxhdGUgZnVuY3Rpb24sIHdoaWNoXG4gKiBjYW4gdGhlbiBiZSB1c2VkIHRvIGxpbmsge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgYHNjb3BlYH0gYW5kIHRoZSB0ZW1wbGF0ZSB0b2dldGhlci5cbiAqXG4gKiBUaGUgY29tcGlsYXRpb24gaXMgYSBwcm9jZXNzIG9mIHdhbGtpbmcgdGhlIERPTSB0cmVlIGFuZCBtYXRjaGluZyBET00gZWxlbWVudHMgdG9cbiAqIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFRoaXMgZG9jdW1lbnQgaXMgYW4gaW4tZGVwdGggcmVmZXJlbmNlIG9mIGFsbCBkaXJlY3RpdmUgb3B0aW9ucy5cbiAqIEZvciBhIGdlbnRsZSBpbnRyb2R1Y3Rpb24gdG8gZGlyZWN0aXZlcyB3aXRoIGV4YW1wbGVzIG9mIGNvbW1vbiB1c2UgY2FzZXMsXG4gKiBzZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlIGd1aWRlfS5cbiAqIDwvZGl2PlxuICpcbiAqICMjIENvbXByZWhlbnNpdmUgRGlyZWN0aXZlIEFQSVxuICpcbiAqIFRoZXJlIGFyZSBtYW55IGRpZmZlcmVudCBvcHRpb25zIGZvciBhIGRpcmVjdGl2ZS5cbiAqXG4gKiBUaGUgZGlmZmVyZW5jZSByZXNpZGVzIGluIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiBZb3UgY2FuIGVpdGhlciByZXR1cm4gYSB7QGxpbmsgJGNvbXBpbGUjZGlyZWN0aXZlLWRlZmluaXRpb24tb2JqZWN0IERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdCAoc2VlIGJlbG93KX1cbiAqIHRoYXQgZGVmaW5lcyB0aGUgZGlyZWN0aXZlIHByb3BlcnRpZXMsIG9yIGp1c3QgdGhlIGBwb3N0TGlua2AgZnVuY3Rpb24gKGFsbCBvdGhlciBwcm9wZXJ0aWVzIHdpbGwgaGF2ZVxuICogdGhlIGRlZmF1bHQgdmFsdWVzKS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBcImRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdFwiIGZvcm0uXG4gKiA8L2Rpdj5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBkaXJlY3RpdmUgZGVjbGFyZWQgd2l0aCBhIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdDpcbiAqXG4gKiBgYGBqc1xuICogICB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSguLi4pO1xuICpcbiAqICAgbXlNb2R1bGUuZGlyZWN0aXZlKCdkaXJlY3RpdmVOYW1lJywgZnVuY3Rpb24gZmFjdG9yeShpbmplY3RhYmxlcykge1xuICogICAgIHZhciBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0ID0ge1xuICogICAgICAge0BsaW5rICRjb21waWxlIy1wcmlvcml0eS0gcHJpb3JpdHl9OiAwLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy10ZW1wbGF0ZS0gdGVtcGxhdGV9OiAnPGRpdj48L2Rpdj4nLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LFxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIHtAbGluayAkY29tcGlsZSMtdGVtcGxhdGV1cmwtIHRlbXBsYXRlVXJsfTogJ2RpcmVjdGl2ZS5odG1sJywgLy8gb3IgLy8gZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgeyAuLi4gfSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtdHJhbnNjbHVkZS0gdHJhbnNjbHVkZX06IGZhbHNlLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy1yZXN0cmljdC0gcmVzdHJpY3R9OiAnQScsXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLXRlbXBsYXRlbmFtZXNwYWNlLSB0ZW1wbGF0ZU5hbWVzcGFjZX06ICdodG1sJyxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtc2NvcGUtIHNjb3BlfTogZmFsc2UsXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLWNvbnRyb2xsZXItIGNvbnRyb2xsZXJ9OiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICR0cmFuc2NsdWRlLCBvdGhlckluamVjdGFibGVzKSB7IC4uLiB9LFxuICogICAgICAge0BsaW5rICRjb21waWxlIy1jb250cm9sbGVyYXMtIGNvbnRyb2xsZXJBc306ICdzdHJpbmdJZGVudGlmaWVyJyxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtYmluZHRvY29udHJvbGxlci0gYmluZFRvQ29udHJvbGxlcn06IGZhbHNlLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy1yZXF1aXJlLSByZXF1aXJlfTogJ3NpYmxpbmdEaXJlY3RpdmVOYW1lJywgLy8gb3IgLy8gWydecGFyZW50RGlyZWN0aXZlTmFtZScsICc/b3B0aW9uYWxEaXJlY3RpdmVOYW1lJywgJz9eb3B0aW9uYWxQYXJlbnQnXSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtbXVsdGllbGVtZW50LSBtdWx0aUVsZW1lbnR9OiBmYWxzZSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtY29tcGlsZS0gY29tcGlsZX06IGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgICB7QGxpbmsgJGNvbXBpbGUjcHJlLWxpbmtpbmctZnVuY3Rpb24gcHJlfTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSxcbiAqICAgICAgICAgICAge0BsaW5rICRjb21waWxlI3Bvc3QtbGlua2luZy1mdW5jdGlvbiBwb3N0fTogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH1cbiAqICAgICAgICAgfVxuICogICAgICAgICAvLyBvclxuICogICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8ge0BsaW5rICRjb21waWxlIy1saW5rLSBsaW5rfToge1xuICogICAgICAgLy8gIHtAbGluayAkY29tcGlsZSNwcmUtbGlua2luZy1mdW5jdGlvbiBwcmV9OiBmdW5jdGlvbiBwcmVMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9LFxuICogICAgICAgLy8gIHtAbGluayAkY29tcGlsZSNwb3N0LWxpbmtpbmctZnVuY3Rpb24gcG9zdH06IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9XG4gKiAgICAgICAvLyB9XG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8ge0BsaW5rICRjb21waWxlIy1saW5rLSBsaW5rfTogZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICB9O1xuICogICAgIHJldHVybiBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0O1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogQW55IHVuc3BlY2lmaWVkIG9wdGlvbnMgd2lsbCB1c2UgdGhlIGRlZmF1bHQgdmFsdWUuIFlvdSBjYW4gc2VlIHRoZSBkZWZhdWx0IHZhbHVlcyBiZWxvdy5cbiAqIDwvZGl2PlxuICpcbiAqIFRoZXJlZm9yZSB0aGUgYWJvdmUgY2FuIGJlIHNpbXBsaWZpZWQgYXM6XG4gKlxuICogYGBganNcbiAqICAgdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoLi4uKTtcbiAqXG4gKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHtcbiAqICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHtcbiAqICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzKSB7IC4uLiB9XG4gKiAgICAgfTtcbiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcbiAqICAgICAvLyBvclxuICogICAgIC8vIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfVxuICogICB9KTtcbiAqIGBgYFxuICpcbiAqICMjIyBMaWZlLWN5Y2xlIGhvb2tzXG4gKiBEaXJlY3RpdmUgY29udHJvbGxlcnMgY2FuIHByb3ZpZGUgdGhlIGZvbGxvd2luZyBtZXRob2RzIHRoYXQgYXJlIGNhbGxlZCBieSBBbmd1bGFyIGF0IHBvaW50cyBpbiB0aGUgbGlmZS1jeWNsZSBvZiB0aGVcbiAqIGRpcmVjdGl2ZTpcbiAqICogYCRvbkluaXQoKWAgLSBDYWxsZWQgb24gZWFjaCBjb250cm9sbGVyIGFmdGVyIGFsbCB0aGUgY29udHJvbGxlcnMgb24gYW4gZWxlbWVudCBoYXZlIGJlZW4gY29uc3RydWN0ZWQgYW5kXG4gKiAgIGhhZCB0aGVpciBiaW5kaW5ncyBpbml0aWFsaXplZCAoYW5kIGJlZm9yZSB0aGUgcHJlICZhbXA7IHBvc3QgbGlua2luZyBmdW5jdGlvbnMgZm9yIHRoZSBkaXJlY3RpdmVzIG9uXG4gKiAgIHRoaXMgZWxlbWVudCkuIFRoaXMgaXMgYSBnb29kIHBsYWNlIHRvIHB1dCBpbml0aWFsaXphdGlvbiBjb2RlIGZvciB5b3VyIGNvbnRyb2xsZXIuXG4gKiAqIGAkb25DaGFuZ2VzKGNoYW5nZXNPYmopYCAtIENhbGxlZCB3aGVuZXZlciBvbmUtd2F5IChgPGApIG9yIGludGVycG9sYXRpb24gKGBAYCkgYmluZGluZ3MgYXJlIHVwZGF0ZWQuIFRoZVxuICogICBgY2hhbmdlc09iamAgaXMgYSBoYXNoIHdob3NlIGtleXMgYXJlIHRoZSBuYW1lcyBvZiB0aGUgYm91bmQgcHJvcGVydGllcyB0aGF0IGhhdmUgY2hhbmdlZCwgYW5kIHRoZSB2YWx1ZXMgYXJlIGFuXG4gKiAgIG9iamVjdCBvZiB0aGUgZm9ybSBgeyBjdXJyZW50VmFsdWUsIHByZXZpb3VzVmFsdWUsIGlzRmlyc3RDaGFuZ2UoKSB9YC4gVXNlIHRoaXMgaG9vayB0byB0cmlnZ2VyIHVwZGF0ZXMgd2l0aGluIGFcbiAqICAgY29tcG9uZW50IHN1Y2ggYXMgY2xvbmluZyB0aGUgYm91bmQgdmFsdWUgdG8gcHJldmVudCBhY2NpZGVudGFsIG11dGF0aW9uIG9mIHRoZSBvdXRlciB2YWx1ZS4gTm90ZSB0aGF0IHRoaXMgd2lsbFxuICogICBhbHNvIGJlIGNhbGxlZCB3aGVuIHlvdXIgYmluZGluZ3MgYXJlIGluaXRpYWxpemVkLlxuICogKiBgJGRvQ2hlY2soKWAgLSBDYWxsZWQgb24gZWFjaCB0dXJuIG9mIHRoZSBkaWdlc3QgY3ljbGUuIFByb3ZpZGVzIGFuIG9wcG9ydHVuaXR5IHRvIGRldGVjdCBhbmQgYWN0IG9uXG4gKiAgIGNoYW5nZXMuIEFueSBhY3Rpb25zIHRoYXQgeW91IHdpc2ggdG8gdGFrZSBpbiByZXNwb25zZSB0byB0aGUgY2hhbmdlcyB0aGF0IHlvdSBkZXRlY3QgbXVzdCBiZVxuICogICBpbnZva2VkIGZyb20gdGhpcyBob29rOyBpbXBsZW1lbnRpbmcgdGhpcyBoYXMgbm8gZWZmZWN0IG9uIHdoZW4gYCRvbkNoYW5nZXNgIGlzIGNhbGxlZC4gRm9yIGV4YW1wbGUsIHRoaXMgaG9va1xuICogICBjb3VsZCBiZSB1c2VmdWwgaWYgeW91IHdpc2ggdG8gcGVyZm9ybSBhIGRlZXAgZXF1YWxpdHkgY2hlY2ssIG9yIHRvIGNoZWNrIGEgRGF0ZSBvYmplY3QsIGNoYW5nZXMgdG8gd2hpY2ggd291bGQgbm90XG4gKiAgIGJlIGRldGVjdGVkIGJ5IEFuZ3VsYXIncyBjaGFuZ2UgZGV0ZWN0b3IgYW5kIHRodXMgbm90IHRyaWdnZXIgYCRvbkNoYW5nZXNgLiBUaGlzIGhvb2sgaXMgaW52b2tlZCB3aXRoIG5vIGFyZ3VtZW50cztcbiAqICAgaWYgZGV0ZWN0aW5nIGNoYW5nZXMsIHlvdSBtdXN0IHN0b3JlIHRoZSBwcmV2aW91cyB2YWx1ZShzKSBmb3IgY29tcGFyaXNvbiB0byB0aGUgY3VycmVudCB2YWx1ZXMuXG4gKiAqIGAkb25EZXN0cm95KClgIC0gQ2FsbGVkIG9uIGEgY29udHJvbGxlciB3aGVuIGl0cyBjb250YWluaW5nIHNjb3BlIGlzIGRlc3Ryb3llZC4gVXNlIHRoaXMgaG9vayBmb3IgcmVsZWFzaW5nXG4gKiAgIGV4dGVybmFsIHJlc291cmNlcywgd2F0Y2hlcyBhbmQgZXZlbnQgaGFuZGxlcnMuIE5vdGUgdGhhdCBjb21wb25lbnRzIGhhdmUgdGhlaXIgYCRvbkRlc3Ryb3koKWAgaG9va3MgY2FsbGVkIGluXG4gKiAgIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBgJHNjb3BlLiRicm9hZGNhc3RgIGV2ZW50cyBhcmUgdHJpZ2dlcmVkLCB3aGljaCBpcyB0b3AgZG93bi4gVGhpcyBtZWFucyB0aGF0IHBhcmVudFxuICogICBjb21wb25lbnRzIHdpbGwgaGF2ZSB0aGVpciBgJG9uRGVzdHJveSgpYCBob29rIGNhbGxlZCBiZWZvcmUgY2hpbGQgY29tcG9uZW50cy5cbiAqICogYCRwb3N0TGluaygpYCAtIENhbGxlZCBhZnRlciB0aGlzIGNvbnRyb2xsZXIncyBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4gaGF2ZSBiZWVuIGxpbmtlZC4gU2ltaWxhciB0byB0aGUgcG9zdC1saW5rXG4gKiAgIGZ1bmN0aW9uIHRoaXMgaG9vayBjYW4gYmUgdXNlZCB0byBzZXQgdXAgRE9NIGV2ZW50IGhhbmRsZXJzIGFuZCBkbyBkaXJlY3QgRE9NIG1hbmlwdWxhdGlvbi5cbiAqICAgTm90ZSB0aGF0IGNoaWxkIGVsZW1lbnRzIHRoYXQgY29udGFpbiBgdGVtcGxhdGVVcmxgIGRpcmVjdGl2ZXMgd2lsbCBub3QgaGF2ZSBiZWVuIGNvbXBpbGVkIGFuZCBsaW5rZWQgc2luY2VcbiAqICAgdGhleSBhcmUgd2FpdGluZyBmb3IgdGhlaXIgdGVtcGxhdGUgdG8gbG9hZCBhc3luY2hyb25vdXNseSBhbmQgdGhlaXIgb3duIGNvbXBpbGF0aW9uIGFuZCBsaW5raW5nIGhhcyBiZWVuXG4gKiAgIHN1c3BlbmRlZCB1bnRpbCB0aGF0IG9jY3Vycy5cbiAqXG4gKiAjIyMjIENvbXBhcmlzb24gd2l0aCBBbmd1bGFyIDIgbGlmZS1jeWNsZSBob29rc1xuICogQW5ndWxhciAyIGFsc28gdXNlcyBsaWZlLWN5Y2xlIGhvb2tzIGZvciBpdHMgY29tcG9uZW50cy4gV2hpbGUgdGhlIEFuZ3VsYXIgMSBsaWZlLWN5Y2xlIGhvb2tzIGFyZSBzaW1pbGFyIHRoZXJlIGFyZVxuICogc29tZSBkaWZmZXJlbmNlcyB0aGF0IHlvdSBzaG91bGQgYmUgYXdhcmUgb2YsIGVzcGVjaWFsbHkgd2hlbiBpdCBjb21lcyB0byBtb3ZpbmcgeW91ciBjb2RlIGZyb20gQW5ndWxhciAxIHRvIEFuZ3VsYXIgMjpcbiAqXG4gKiAqIEFuZ3VsYXIgMSBob29rcyBhcmUgcHJlZml4ZWQgd2l0aCBgJGAsIHN1Y2ggYXMgYCRvbkluaXRgLiBBbmd1bGFyIDIgaG9va3MgYXJlIHByZWZpeGVkIHdpdGggYG5nYCwgc3VjaCBhcyBgbmdPbkluaXRgLlxuICogKiBBbmd1bGFyIDEgaG9va3MgY2FuIGJlIGRlZmluZWQgb24gdGhlIGNvbnRyb2xsZXIgcHJvdG90eXBlIG9yIGFkZGVkIHRvIHRoZSBjb250cm9sbGVyIGluc2lkZSBpdHMgY29uc3RydWN0b3IuXG4gKiAgIEluIEFuZ3VsYXIgMiB5b3UgY2FuIG9ubHkgZGVmaW5lIGhvb2tzIG9uIHRoZSBwcm90b3R5cGUgb2YgdGhlIENvbXBvbmVudCBjbGFzcy5cbiAqICogRHVlIHRvIHRoZSBkaWZmZXJlbmNlcyBpbiBjaGFuZ2UtZGV0ZWN0aW9uLCB5b3UgbWF5IGdldCBtYW55IG1vcmUgY2FsbHMgdG8gYCRkb0NoZWNrYCBpbiBBbmd1bGFyIDEgdGhhbiB5b3Ugd291bGQgdG9cbiAqICAgYG5nRG9DaGVja2AgaW4gQW5ndWxhciAyXG4gKiAqIENoYW5nZXMgdG8gdGhlIG1vZGVsIGluc2lkZSBgJGRvQ2hlY2tgIHdpbGwgdHJpZ2dlciBuZXcgdHVybnMgb2YgdGhlIGRpZ2VzdCBsb29wLCB3aGljaCB3aWxsIGNhdXNlIHRoZSBjaGFuZ2VzIHRvIGJlXG4gKiAgIHByb3BhZ2F0ZWQgdGhyb3VnaG91dCB0aGUgYXBwbGljYXRpb24uXG4gKiAgIEFuZ3VsYXIgMiBkb2VzIG5vdCBhbGxvdyB0aGUgYG5nRG9DaGVja2AgaG9vayB0byB0cmlnZ2VyIGEgY2hhbmdlIG91dHNpZGUgb2YgdGhlIGNvbXBvbmVudC4gSXQgd2lsbCBlaXRoZXIgdGhyb3cgYW5cbiAqICAgZXJyb3Igb3IgZG8gbm90aGluZyBkZXBlbmRpbmcgdXBvbiB0aGUgc3RhdGUgb2YgYGVuYWJsZVByb2RNb2RlKClgLlxuICpcbiAqICMjIyMgTGlmZS1jeWNsZSBob29rIGV4YW1wbGVzXG4gKlxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB5b3UgY2FuIGNoZWNrIGZvciBtdXRhdGlvbnMgdG8gYSBEYXRlIG9iamVjdCBldmVuIHRob3VnaCB0aGUgaWRlbnRpdHkgb2YgdGhlIG9iamVjdFxuICogaGFzIG5vdCBjaGFuZ2VkLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJkb0NoZWNrRGF0ZUV4YW1wbGVcIiBtb2R1bGU9XCJkby1jaGVjay1tb2R1bGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgIGFuZ3VsYXIubW9kdWxlKCdkby1jaGVjay1tb2R1bGUnLCBbXSlcbiAqICAgICAgIC5jb21wb25lbnQoJ2FwcCcsIHtcbiAqICAgICAgICAgdGVtcGxhdGU6XG4gKiAgICAgICAgICAgJ01vbnRoOiA8aW5wdXQgbmctbW9kZWw9XCIkY3RybC5tb250aFwiIG5nLWNoYW5nZT1cIiRjdHJsLnVwZGF0ZURhdGUoKVwiPicgK1xuICogICAgICAgICAgICdEYXRlOiB7eyAkY3RybC5kYXRlIH19JyArXG4gKiAgICAgICAgICAgJzx0ZXN0IGRhdGU9XCIkY3RybC5kYXRlXCI+PC90ZXN0PicsXG4gKiAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKCk7XG4gKiAgICAgICAgICAgdGhpcy5tb250aCA9IHRoaXMuZGF0ZS5nZXRNb250aCgpO1xuICogICAgICAgICAgIHRoaXMudXBkYXRlRGF0ZSA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgdGhpcy5kYXRlLnNldE1vbnRoKHRoaXMubW9udGgpO1xuICogICAgICAgICAgIH07XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0pXG4gKiAgICAgICAuY29tcG9uZW50KCd0ZXN0Jywge1xuICogICAgICAgICBiaW5kaW5nczogeyBkYXRlOiAnPCcgfSxcbiAqICAgICAgICAgdGVtcGxhdGU6XG4gKiAgICAgICAgICAgJzxwcmU+e3sgJGN0cmwubG9nIHwganNvbiB9fTwvcHJlPicsXG4gKiAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgIHZhciBwcmV2aW91c1ZhbHVlO1xuICogICAgICAgICAgIHRoaXMubG9nID0gW107XG4gKiAgICAgICAgICAgdGhpcy4kZG9DaGVjayA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRoaXMuZGF0ZSAmJiB0aGlzLmRhdGUudmFsdWVPZigpO1xuICogICAgICAgICAgICAgaWYgKHByZXZpb3VzVmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuICogICAgICAgICAgICAgICB0aGlzLmxvZy5wdXNoKCdkb0NoZWNrOiBkYXRlIG11dGF0ZWQ6ICcgKyB0aGlzLmRhdGUpO1xuICogICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gY3VycmVudFZhbHVlO1xuICogICAgICAgICAgICAgfVxuICogICAgICAgICAgIH07XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPGFwcD48L2FwcD5cbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIFRoaXMgZXhhbXBsZSBzaG93IGhvdyB5b3UgbWlnaHQgdXNlIGAkZG9DaGVja2AgdG8gdHJpZ2dlciBjaGFuZ2VzIGluIHlvdXIgY29tcG9uZW50J3MgaW5wdXRzIGV2ZW4gaWYgdGhlXG4gKiBhY3R1YWwgaWRlbnRpdHkgb2YgdGhlIGNvbXBvbmVudCBkb2Vzbid0IGNoYW5nZS4gKEJlIGF3YXJlIHRoYXQgY2xvbmluZyBhbmQgZGVlcCBlcXVhbGl0eSBjaGVja3Mgb24gbGFyZ2VcbiAqIGFycmF5cyBvciBvYmplY3RzIGNhbiBoYXZlIGEgbmVnYXRpdmUgaW1wYWN0IG9uIHlvdXIgYXBwbGljYXRpb24gcGVyZm9ybWFuY2UpXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cImRvQ2hlY2tBcnJheUV4YW1wbGVcIiBtb2R1bGU9XCJkby1jaGVjay1tb2R1bGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8ZGl2IG5nLWluaXQ9XCJpdGVtcyA9IFtdXCI+XG4gKiAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiaXRlbXMucHVzaChpdGVtcy5sZW5ndGgpXCI+QWRkIEl0ZW08L2J1dHRvbj5cbiAqICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJpdGVtcyA9IFtdXCI+UmVzZXQgSXRlbXM8L2J1dHRvbj5cbiAqICAgICAgIDxwcmU+e3sgaXRlbXMgfX08L3ByZT5cbiAqICAgICAgIDx0ZXN0IGl0ZW1zPVwiaXRlbXNcIj48L3Rlc3Q+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgICBhbmd1bGFyLm1vZHVsZSgnZG8tY2hlY2stbW9kdWxlJywgW10pXG4gKiAgICAgICAgLmNvbXBvbmVudCgndGVzdCcsIHtcbiAqICAgICAgICAgIGJpbmRpbmdzOiB7IGl0ZW1zOiAnPCcgfSxcbiAqICAgICAgICAgIHRlbXBsYXRlOlxuICogICAgICAgICAgICAnPHByZT57eyAkY3RybC5sb2cgfCBqc29uIH19PC9wcmU+JyxcbiAqICAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICB0aGlzLmxvZyA9IFtdO1xuICpcbiAqICAgICAgICAgICAgdGhpcy4kZG9DaGVjayA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zX3JlZiAhPT0gdGhpcy5pdGVtcykge1xuICogICAgICAgICAgICAgICAgdGhpcy5sb2cucHVzaCgnZG9DaGVjazogaXRlbXMgY2hhbmdlZCcpO1xuICogICAgICAgICAgICAgICAgdGhpcy5pdGVtc19yZWYgPSB0aGlzLml0ZW1zO1xuICogICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKHRoaXMuaXRlbXNfY2xvbmUsIHRoaXMuaXRlbXMpKSB7XG4gKiAgICAgICAgICAgICAgICB0aGlzLmxvZy5wdXNoKCdkb0NoZWNrOiBpdGVtcyBtdXRhdGVkJyk7XG4gKiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zX2Nsb25lID0gYW5ndWxhci5jb3B5KHRoaXMuaXRlbXMpO1xuICogICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgfTtcbiAqICAgICAgICAgIH1cbiAqICAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqXG4gKiAjIyMgRGlyZWN0aXZlIERlZmluaXRpb24gT2JqZWN0XG4gKlxuICogVGhlIGRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdCBwcm92aWRlcyBpbnN0cnVjdGlvbnMgdG8gdGhlIHtAbGluayBuZy4kY29tcGlsZVxuICogY29tcGlsZXJ9LiBUaGUgYXR0cmlidXRlcyBhcmU6XG4gKlxuICogIyMjIyBgbXVsdGlFbGVtZW50YFxuICogV2hlbiB0aGlzIHByb3BlcnR5IGlzIHNldCB0byB0cnVlIChkZWZhdWx0IGlzIGBmYWxzZWApLCB0aGUgSFRNTCBjb21waWxlciB3aWxsIGNvbGxlY3QgRE9NIG5vZGVzIGJldHdlZW5cbiAqIG5vZGVzIHdpdGggdGhlIGF0dHJpYnV0ZXMgYGRpcmVjdGl2ZS1uYW1lLXN0YXJ0YCBhbmQgYGRpcmVjdGl2ZS1uYW1lLWVuZGAsIGFuZCBncm91cCB0aGVtXG4gKiB0b2dldGhlciBhcyB0aGUgZGlyZWN0aXZlIGVsZW1lbnRzLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHRoaXMgZmVhdHVyZSBiZSB1c2VkIG9uIGRpcmVjdGl2ZXNcbiAqIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgYmVoYXZpb3JhbCAoc3VjaCBhcyB7QGxpbmsgbmdDbGlja30pLCBhbmQgd2hpY2hcbiAqIGRvIG5vdCBtYW5pcHVsYXRlIG9yIHJlcGxhY2UgY2hpbGQgbm9kZXMgKHN1Y2ggYXMge0BsaW5rIG5nSW5jbHVkZX0pLlxuICpcbiAqICMjIyMgYHByaW9yaXR5YFxuICogV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgZGlyZWN0aXZlcyBkZWZpbmVkIG9uIGEgc2luZ2xlIERPTSBlbGVtZW50LCBzb21ldGltZXMgaXRcbiAqIGlzIG5lY2Vzc2FyeSB0byBzcGVjaWZ5IHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYXBwbGllZC4gVGhlIGBwcmlvcml0eWAgaXMgdXNlZFxuICogdG8gc29ydCB0aGUgZGlyZWN0aXZlcyBiZWZvcmUgdGhlaXIgYGNvbXBpbGVgIGZ1bmN0aW9ucyBnZXQgY2FsbGVkLiBQcmlvcml0eSBpcyBkZWZpbmVkIGFzIGFcbiAqIG51bWJlci4gRGlyZWN0aXZlcyB3aXRoIGdyZWF0ZXIgbnVtZXJpY2FsIGBwcmlvcml0eWAgYXJlIGNvbXBpbGVkIGZpcnN0LiBQcmUtbGluayBmdW5jdGlvbnNcbiAqIGFyZSBhbHNvIHJ1biBpbiBwcmlvcml0eSBvcmRlciwgYnV0IHBvc3QtbGluayBmdW5jdGlvbnMgYXJlIHJ1biBpbiByZXZlcnNlIG9yZGVyLiBUaGUgb3JkZXJcbiAqIG9mIGRpcmVjdGl2ZXMgd2l0aCB0aGUgc2FtZSBwcmlvcml0eSBpcyB1bmRlZmluZWQuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIGAwYC5cbiAqXG4gKiAjIyMjIGB0ZXJtaW5hbGBcbiAqIElmIHNldCB0byB0cnVlIHRoZW4gdGhlIGN1cnJlbnQgYHByaW9yaXR5YCB3aWxsIGJlIHRoZSBsYXN0IHNldCBvZiBkaXJlY3RpdmVzXG4gKiB3aGljaCB3aWxsIGV4ZWN1dGUgKGFueSBkaXJlY3RpdmVzIGF0IHRoZSBjdXJyZW50IHByaW9yaXR5IHdpbGwgc3RpbGwgZXhlY3V0ZVxuICogYXMgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiBvbiBzYW1lIGBwcmlvcml0eWAgaXMgdW5kZWZpbmVkKS4gTm90ZSB0aGF0IGV4cHJlc3Npb25zXG4gKiBhbmQgb3RoZXIgZGlyZWN0aXZlcyB1c2VkIGluIHRoZSBkaXJlY3RpdmUncyB0ZW1wbGF0ZSB3aWxsIGFsc28gYmUgZXhjbHVkZWQgZnJvbSBleGVjdXRpb24uXG4gKlxuICogIyMjIyBgc2NvcGVgXG4gKiBUaGUgc2NvcGUgcHJvcGVydHkgY2FuIGJlIGBmYWxzZWAsIGB0cnVlYCwgb3IgYW4gb2JqZWN0OlxuICpcbiAqICogKipgZmFsc2VgIChkZWZhdWx0KToqKiBObyBzY29wZSB3aWxsIGJlIGNyZWF0ZWQgZm9yIHRoZSBkaXJlY3RpdmUuIFRoZSBkaXJlY3RpdmUgd2lsbCB1c2UgaXRzXG4gKiBwYXJlbnQncyBzY29wZS5cbiAqXG4gKiAqICoqYHRydWVgOioqIEEgbmV3IGNoaWxkIHNjb3BlIHRoYXQgcHJvdG90eXBpY2FsbHkgaW5oZXJpdHMgZnJvbSBpdHMgcGFyZW50IHdpbGwgYmUgY3JlYXRlZCBmb3JcbiAqIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LiBJZiBtdWx0aXBsZSBkaXJlY3RpdmVzIG9uIHRoZSBzYW1lIGVsZW1lbnQgcmVxdWVzdCBhIG5ldyBzY29wZSxcbiAqIG9ubHkgb25lIG5ldyBzY29wZSBpcyBjcmVhdGVkLlxuICpcbiAqICogKipgey4uLn1gIChhbiBvYmplY3QgaGFzaCk6KiogQSBuZXcgXCJpc29sYXRlXCIgc2NvcGUgaXMgY3JlYXRlZCBmb3IgdGhlIGRpcmVjdGl2ZSdzIHRlbXBsYXRlLlxuICogVGhlICdpc29sYXRlJyBzY29wZSBkaWZmZXJzIGZyb20gbm9ybWFsIHNjb3BlIGluIHRoYXQgaXQgZG9lcyBub3QgcHJvdG90eXBpY2FsbHlcbiAqIGluaGVyaXQgZnJvbSBpdHMgcGFyZW50IHNjb3BlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGNyZWF0aW5nIHJldXNhYmxlIGNvbXBvbmVudHMsIHdoaWNoIHNob3VsZCBub3RcbiAqIGFjY2lkZW50YWxseSByZWFkIG9yIG1vZGlmeSBkYXRhIGluIHRoZSBwYXJlbnQgc2NvcGUuIE5vdGUgdGhhdCBhbiBpc29sYXRlIHNjb3BlXG4gKiBkaXJlY3RpdmUgd2l0aG91dCBhIGB0ZW1wbGF0ZWAgb3IgYHRlbXBsYXRlVXJsYCB3aWxsIG5vdCBhcHBseSB0aGUgaXNvbGF0ZSBzY29wZVxuICogdG8gaXRzIGNoaWxkcmVuIGVsZW1lbnRzLlxuICpcbiAqIFRoZSAnaXNvbGF0ZScgc2NvcGUgb2JqZWN0IGhhc2ggZGVmaW5lcyBhIHNldCBvZiBsb2NhbCBzY29wZSBwcm9wZXJ0aWVzIGRlcml2ZWQgZnJvbSBhdHRyaWJ1dGVzIG9uIHRoZVxuICogZGlyZWN0aXZlJ3MgZWxlbWVudC4gVGhlc2UgbG9jYWwgcHJvcGVydGllcyBhcmUgdXNlZnVsIGZvciBhbGlhc2luZyB2YWx1ZXMgZm9yIHRlbXBsYXRlcy4gVGhlIGtleXMgaW5cbiAqIHRoZSBvYmplY3QgaGFzaCBtYXAgdG8gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IG9uIHRoZSBpc29sYXRlIHNjb3BlOyB0aGUgdmFsdWVzIGRlZmluZSBob3cgdGhlIHByb3BlcnR5XG4gKiBpcyBib3VuZCB0byB0aGUgcGFyZW50IHNjb3BlLCB2aWEgbWF0Y2hpbmcgYXR0cmlidXRlcyBvbiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudDpcbiAqXG4gKiAqIGBAYCBvciBgQGF0dHJgIC0gYmluZCBhIGxvY2FsIHNjb3BlIHByb3BlcnR5IHRvIHRoZSB2YWx1ZSBvZiBET00gYXR0cmlidXRlLiBUaGUgcmVzdWx0IGlzXG4gKiAgIGFsd2F5cyBhIHN0cmluZyBzaW5jZSBET00gYXR0cmlidXRlcyBhcmUgc3RyaW5ncy4gSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlXG4gKiAgIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUuIEdpdmVuIGA8bXktY29tcG9uZW50XG4gKiAgIG15LWF0dHI9XCJoZWxsbyB7e25hbWV9fVwiPmAgYW5kIHRoZSBpc29sYXRlIHNjb3BlIGRlZmluaXRpb24gYHNjb3BlOiB7IGxvY2FsTmFtZTonQG15QXR0cicgfWAsXG4gKiAgIHRoZSBkaXJlY3RpdmUncyBzY29wZSBwcm9wZXJ0eSBgbG9jYWxOYW1lYCB3aWxsIHJlZmxlY3QgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiBgaGVsbG9cbiAqICAge3tuYW1lfX1gLiBBcyB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBjaGFuZ2VzIHNvIHdpbGwgdGhlIGBsb2NhbE5hbWVgIHByb3BlcnR5IG9uIHRoZSBkaXJlY3RpdmUnc1xuICogICBzY29wZS4gVGhlIGBuYW1lYCBpcyByZWFkIGZyb20gdGhlIHBhcmVudCBzY29wZSAobm90IHRoZSBkaXJlY3RpdmUncyBzY29wZSkuXG4gKlxuICogKiBgPWAgb3IgYD1hdHRyYCAtIHNldCB1cCBhIGJpZGlyZWN0aW9uYWwgYmluZGluZyBiZXR3ZWVuIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgYW5kIGFuIGV4cHJlc3Npb25cbiAqICAgcGFzc2VkIHZpYSB0aGUgYXR0cmlidXRlIGBhdHRyYC4gVGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnQgc2NvcGUuXG4gKiAgIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbFxuICogICBuYW1lLiBHaXZlbiBgPG15LWNvbXBvbmVudCBteS1hdHRyPVwicGFyZW50TW9kZWxcIj5gIGFuZCB0aGUgaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uIGBzY29wZToge1xuICogICBsb2NhbE1vZGVsOiAnPW15QXR0cicgfWAsIHRoZSBwcm9wZXJ0eSBgbG9jYWxNb2RlbGAgb24gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIHdpbGwgcmVmbGVjdCB0aGVcbiAqICAgdmFsdWUgb2YgYHBhcmVudE1vZGVsYCBvbiB0aGUgcGFyZW50IHNjb3BlLiBDaGFuZ2VzIHRvIGBwYXJlbnRNb2RlbGAgd2lsbCBiZSByZWZsZWN0ZWQgaW5cbiAqICAgYGxvY2FsTW9kZWxgIGFuZCB2aWNlIHZlcnNhLiBPcHRpb25hbCBhdHRyaWJ1dGVzIHNob3VsZCBiZSBtYXJrZWQgYXMgc3VjaCB3aXRoIGEgcXVlc3Rpb24gbWFyazpcbiAqICAgYD0/YCBvciBgPT9hdHRyYC4gSWYgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbiBpcyBub24tYXNzaWduYWJsZSwgb3IgaWYgdGhlIGF0dHJpYnV0ZSBpc24ndFxuICogICBvcHRpb25hbCBhbmQgZG9lc24ndCBleGlzdCwgYW4gZXhjZXB0aW9uICh7QGxpbmsgZXJyb3IvJGNvbXBpbGUvbm9uYXNzaWduIGAkY29tcGlsZTpub25hc3NpZ25gfSlcbiAqICAgd2lsbCBiZSB0aHJvd24gdXBvbiBkaXNjb3ZlcmluZyBjaGFuZ2VzIHRvIHRoZSBsb2NhbCB2YWx1ZSwgc2luY2UgaXQgd2lsbCBiZSBpbXBvc3NpYmxlIHRvIHN5bmNcbiAqICAgdGhlbSBiYWNrIHRvIHRoZSBwYXJlbnQgc2NvcGUuIEJ5IGRlZmF1bHQsIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggYCR3YXRjaGB9XG4gKiAgIG1ldGhvZCBpcyB1c2VkIGZvciB0cmFja2luZyBjaGFuZ2VzLCBhbmQgdGhlIGVxdWFsaXR5IGNoZWNrIGlzIGJhc2VkIG9uIG9iamVjdCBpZGVudGl0eS5cbiAqICAgSG93ZXZlciwgaWYgYW4gb2JqZWN0IGxpdGVyYWwgb3IgYW4gYXJyYXkgbGl0ZXJhbCBpcyBwYXNzZWQgYXMgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbiwgdGhlXG4gKiAgIGVxdWFsaXR5IGNoZWNrIGlzIGRvbmUgYnkgdmFsdWUgKHVzaW5nIHRoZSB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGZ1bmN0aW9uKS4gSXQncyBhbHNvIHBvc3NpYmxlXG4gKiAgIHRvIHdhdGNoIHRoZSBldmFsdWF0ZWQgdmFsdWUgc2hhbGxvd2x5IHdpdGgge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvblxuICogICBgJHdhdGNoQ29sbGVjdGlvbmB9OiB1c2UgYD0qYCBvciBgPSphdHRyYCAoYD0qP2Agb3IgYD0qP2F0dHJgIGlmIHRoZSBhdHRyaWJ1dGUgaXMgb3B0aW9uYWwpLlxuICpcbiAgKiAqIGA8YCBvciBgPGF0dHJgIC0gc2V0IHVwIGEgb25lLXdheSAob25lLWRpcmVjdGlvbmFsKSBiaW5kaW5nIGJldHdlZW4gYSBsb2NhbCBzY29wZSBwcm9wZXJ0eSBhbmQgYW5cbiAqICAgZXhwcmVzc2lvbiBwYXNzZWQgdmlhIHRoZSBhdHRyaWJ1dGUgYGF0dHJgLiBUaGUgZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlXG4gKiAgIHBhcmVudCBzY29wZS4gSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlXG4gKiAgIGxvY2FsIG5hbWUuIFlvdSBjYW4gYWxzbyBtYWtlIHRoZSBiaW5kaW5nIG9wdGlvbmFsIGJ5IGFkZGluZyBgP2A6IGA8P2Agb3IgYDw/YXR0cmAuXG4gKlxuICogICBGb3IgZXhhbXBsZSwgZ2l2ZW4gYDxteS1jb21wb25lbnQgbXktYXR0cj1cInBhcmVudE1vZGVsXCI+YCBhbmQgZGlyZWN0aXZlIGRlZmluaXRpb24gb2ZcbiAqICAgYHNjb3BlOiB7IGxvY2FsTW9kZWw6JzxteUF0dHInIH1gLCB0aGVuIHRoZSBpc29sYXRlZCBzY29wZSBwcm9wZXJ0eSBgbG9jYWxNb2RlbGAgd2lsbCByZWZsZWN0IHRoZVxuICogICB2YWx1ZSBvZiBgcGFyZW50TW9kZWxgIG9uIHRoZSBwYXJlbnQgc2NvcGUuIEFueSBjaGFuZ2VzIHRvIGBwYXJlbnRNb2RlbGAgd2lsbCBiZSByZWZsZWN0ZWRcbiAqICAgaW4gYGxvY2FsTW9kZWxgLCBidXQgY2hhbmdlcyBpbiBgbG9jYWxNb2RlbGAgd2lsbCBub3QgcmVmbGVjdCBpbiBgcGFyZW50TW9kZWxgLiBUaGVyZSBhcmUgaG93ZXZlclxuICogICB0d28gY2F2ZWF0czpcbiAqICAgICAxLiBvbmUtd2F5IGJpbmRpbmcgZG9lcyBub3QgY29weSB0aGUgdmFsdWUgZnJvbSB0aGUgcGFyZW50IHRvIHRoZSBpc29sYXRlIHNjb3BlLCBpdCBzaW1wbHlcbiAqICAgICBzZXRzIHRoZSBzYW1lIHZhbHVlLiBUaGF0IG1lYW5zIGlmIHlvdXIgYm91bmQgdmFsdWUgaXMgYW4gb2JqZWN0LCBjaGFuZ2VzIHRvIGl0cyBwcm9wZXJ0aWVzXG4gKiAgICAgaW4gdGhlIGlzb2xhdGVkIHNjb3BlIHdpbGwgYmUgcmVmbGVjdGVkIGluIHRoZSBwYXJlbnQgc2NvcGUgKGJlY2F1c2UgYm90aCByZWZlcmVuY2UgdGhlIHNhbWUgb2JqZWN0KS5cbiAqICAgICAyLiBvbmUtd2F5IGJpbmRpbmcgd2F0Y2hlcyBjaGFuZ2VzIHRvIHRoZSAqKmlkZW50aXR5Kiogb2YgdGhlIHBhcmVudCB2YWx1ZS4gVGhhdCBtZWFucyB0aGVcbiAqICAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggYCR3YXRjaGB9IG9uIHRoZSBwYXJlbnQgdmFsdWUgb25seSBmaXJlcyBpZiB0aGUgcmVmZXJlbmNlXG4gKiAgICAgdG8gdGhlIHZhbHVlIGhhcyBjaGFuZ2VkLiBJbiBtb3N0IGNhc2VzLCB0aGlzIHNob3VsZCBub3QgYmUgb2YgY29uY2VybiwgYnV0IGNhbiBiZSBpbXBvcnRhbnRcbiAqICAgICB0byBrbm93IGlmIHlvdSBvbmUtd2F5IGJpbmQgdG8gYW4gb2JqZWN0LCBhbmQgdGhlbiByZXBsYWNlIHRoYXQgb2JqZWN0IGluIHRoZSBpc29sYXRlZCBzY29wZS5cbiAqICAgICBJZiB5b3Ugbm93IGNoYW5nZSBhIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgaW4geW91ciBwYXJlbnQgc2NvcGUsIHRoZSBjaGFuZ2Ugd2lsbCBub3QgYmVcbiAqICAgICBwcm9wYWdhdGVkIHRvIHRoZSBpc29sYXRlZCBzY29wZSwgYmVjYXVzZSB0aGUgaWRlbnRpdHkgb2YgdGhlIG9iamVjdCBvbiB0aGUgcGFyZW50IHNjb3BlXG4gKiAgICAgaGFzIG5vdCBjaGFuZ2VkLiBJbnN0ZWFkIHlvdSBtdXN0IGFzc2lnbiBhIG5ldyBvYmplY3QuXG4gKlxuICogICBPbmUtd2F5IGJpbmRpbmcgaXMgdXNlZnVsIGlmIHlvdSBkbyBub3QgcGxhbiB0byBwcm9wYWdhdGUgY2hhbmdlcyB0byB5b3VyIGlzb2xhdGVkIHNjb3BlIGJpbmRpbmdzXG4gKiAgIGJhY2sgdG8gdGhlIHBhcmVudC4gSG93ZXZlciwgaXQgZG9lcyBub3QgbWFrZSB0aGlzIGNvbXBsZXRlbHkgaW1wb3NzaWJsZS5cbiAqXG4gKiAqIGAmYCBvciBgJmF0dHJgIC0gcHJvdmlkZXMgYSB3YXkgdG8gZXhlY3V0ZSBhbiBleHByZXNzaW9uIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnQgc2NvcGUuIElmXG4gKiAgIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLlxuICogICBHaXZlbiBgPG15LWNvbXBvbmVudCBteS1hdHRyPVwiY291bnQgPSBjb3VudCArIHZhbHVlXCI+YCBhbmQgdGhlIGlzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbiBgc2NvcGU6IHtcbiAqICAgbG9jYWxGbjonJm15QXR0cicgfWAsIHRoZSBpc29sYXRlIHNjb3BlIHByb3BlcnR5IGBsb2NhbEZuYCB3aWxsIHBvaW50IHRvIGEgZnVuY3Rpb24gd3JhcHBlciBmb3JcbiAqICAgdGhlIGBjb3VudCA9IGNvdW50ICsgdmFsdWVgIGV4cHJlc3Npb24uIE9mdGVuIGl0J3MgZGVzaXJhYmxlIHRvIHBhc3MgZGF0YSBmcm9tIHRoZSBpc29sYXRlZCBzY29wZVxuICogICB2aWEgYW4gZXhwcmVzc2lvbiB0byB0aGUgcGFyZW50IHNjb3BlLiBUaGlzIGNhbiBiZSBkb25lIGJ5IHBhc3NpbmcgYSBtYXAgb2YgbG9jYWwgdmFyaWFibGUgbmFtZXNcbiAqICAgYW5kIHZhbHVlcyBpbnRvIHRoZSBleHByZXNzaW9uIHdyYXBwZXIgZm4uIEZvciBleGFtcGxlLCBpZiB0aGUgZXhwcmVzc2lvbiBpcyBgaW5jcmVtZW50KGFtb3VudClgXG4gKiAgIHRoZW4gd2UgY2FuIHNwZWNpZnkgdGhlIGFtb3VudCB2YWx1ZSBieSBjYWxsaW5nIHRoZSBgbG9jYWxGbmAgYXMgYGxvY2FsRm4oe2Ftb3VudDogMjJ9KWAuXG4gKlxuICogSW4gZ2VuZXJhbCBpdCdzIHBvc3NpYmxlIHRvIGFwcGx5IG1vcmUgdGhhbiBvbmUgZGlyZWN0aXZlIHRvIG9uZSBlbGVtZW50LCBidXQgdGhlcmUgbWlnaHQgYmUgbGltaXRhdGlvbnNcbiAqIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBzY29wZSByZXF1aXJlZCBieSB0aGUgZGlyZWN0aXZlcy4gVGhlIGZvbGxvd2luZyBwb2ludHMgd2lsbCBoZWxwIGV4cGxhaW4gdGhlc2UgbGltaXRhdGlvbnMuXG4gKiBGb3Igc2ltcGxpY2l0eSBvbmx5IHR3byBkaXJlY3RpdmVzIGFyZSB0YWtlbiBpbnRvIGFjY291bnQsIGJ1dCBpdCBpcyBhbHNvIGFwcGxpY2FibGUgZm9yIHNldmVyYWwgZGlyZWN0aXZlczpcbiAqXG4gKiAqICoqbm8gc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiBUd28gZGlyZWN0aXZlcyB3aGljaCBkb24ndCByZXF1aXJlIHRoZWlyIG93biBzY29wZSB3aWxsIHVzZSB0aGVpciBwYXJlbnQncyBzY29wZVxuICogKiAqKmNoaWxkIHNjb3BlKiogKyAqKm5vIHNjb3BlKiogPT4gIEJvdGggZGlyZWN0aXZlcyB3aWxsIHNoYXJlIG9uZSBzaW5nbGUgY2hpbGQgc2NvcGVcbiAqICogKipjaGlsZCBzY29wZSoqICsgKipjaGlsZCBzY29wZSoqID0+ICBCb3RoIGRpcmVjdGl2ZXMgd2lsbCBzaGFyZSBvbmUgc2luZ2xlIGNoaWxkIHNjb3BlXG4gKiAqICoqaXNvbGF0ZWQgc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiAgVGhlIGlzb2xhdGVkIGRpcmVjdGl2ZSB3aWxsIHVzZSBpdCdzIG93biBjcmVhdGVkIGlzb2xhdGVkIHNjb3BlLiBUaGUgb3RoZXIgZGlyZWN0aXZlIHdpbGwgdXNlXG4gKiBpdHMgcGFyZW50J3Mgc2NvcGVcbiAqICogKippc29sYXRlZCBzY29wZSoqICsgKipjaGlsZCBzY29wZSoqID0+ICAqKldvbid0IHdvcmshKiogT25seSBvbmUgc2NvcGUgY2FuIGJlIHJlbGF0ZWQgdG8gb25lIGVsZW1lbnQuIFRoZXJlZm9yZSB0aGVzZSBkaXJlY3RpdmVzIGNhbm5vdFxuICogYmUgYXBwbGllZCB0byB0aGUgc2FtZSBlbGVtZW50LlxuICogKiAqKmlzb2xhdGVkIHNjb3BlKiogKyAqKmlzb2xhdGVkIHNjb3BlKiogID0+ICAqKldvbid0IHdvcmshKiogT25seSBvbmUgc2NvcGUgY2FuIGJlIHJlbGF0ZWQgdG8gb25lIGVsZW1lbnQuIFRoZXJlZm9yZSB0aGVzZSBkaXJlY3RpdmVzXG4gKiBjYW5ub3QgYmUgYXBwbGllZCB0byB0aGUgc2FtZSBlbGVtZW50LlxuICpcbiAqXG4gKiAjIyMjIGBiaW5kVG9Db250cm9sbGVyYFxuICogVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIHRvIGJpbmQgc2NvcGUgcHJvcGVydGllcyBkaXJlY3RseSB0byB0aGUgY29udHJvbGxlci4gSXQgY2FuIGJlIGVpdGhlclxuICogYHRydWVgIG9yIGFuIG9iamVjdCBoYXNoIHdpdGggdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBgc2NvcGVgIHByb3BlcnR5LlxuICpcbiAqIFdoZW4gYW4gaXNvbGF0ZSBzY29wZSBpcyB1c2VkIGZvciBhIGRpcmVjdGl2ZSAoc2VlIGFib3ZlKSwgYGJpbmRUb0NvbnRyb2xsZXI6IHRydWVgIHdpbGxcbiAqIGFsbG93IGEgY29tcG9uZW50IHRvIGhhdmUgaXRzIHByb3BlcnRpZXMgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXIsIHJhdGhlciB0aGFuIHRvIHNjb3BlLlxuICpcbiAqIEFmdGVyIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCwgdGhlIGluaXRpYWwgdmFsdWVzIG9mIHRoZSBpc29sYXRlIHNjb3BlIGJpbmRpbmdzIHdpbGwgYmUgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXJcbiAqIHByb3BlcnRpZXMuIFlvdSBjYW4gYWNjZXNzIHRoZXNlIGJpbmRpbmdzIG9uY2UgdGhleSBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQgYnkgcHJvdmlkaW5nIGEgY29udHJvbGxlciBtZXRob2QgY2FsbGVkXG4gKiBgJG9uSW5pdGAsIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBhbGwgdGhlIGNvbnRyb2xsZXJzIG9uIGFuIGVsZW1lbnQgaGF2ZSBiZWVuIGNvbnN0cnVjdGVkIGFuZCBoYWQgdGhlaXIgYmluZGluZ3NcbiAqIGluaXRpYWxpemVkLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKkRlcHJlY2F0aW9uIHdhcm5pbmc6KiogaWYgYCRjb21waWxlUHJvY3ZpZGVyLnByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCh0cnVlKWAgd2FzIGNhbGxlZCwgYmluZGluZ3MgZm9yIG5vbi1FUzYgY2xhc3NcbiAqIGNvbnRyb2xsZXJzIGFyZSBib3VuZCB0byBgdGhpc2AgYmVmb3JlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGlzIGNhbGxlZCBidXQgdGhpcyB1c2UgaXMgbm93IGRlcHJlY2F0ZWQuIFBsZWFzZVxuICogcGxhY2UgaW5pdGlhbGl6YXRpb24gY29kZSB0aGF0IHJlbGllcyB1cG9uIGJpbmRpbmdzIGluc2lkZSBhIGAkb25Jbml0YCBtZXRob2Qgb24gdGhlIGNvbnRyb2xsZXIsIGluc3RlYWQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHNldCBgYmluZFRvQ29udHJvbGxlcmAgdG8gYW4gb2JqZWN0IGhhc2ggd2l0aCB0aGUgc2FtZSBmb3JtYXQgYXMgdGhlIGBzY29wZWAgcHJvcGVydHkuXG4gKiBUaGlzIHdpbGwgc2V0IHVwIHRoZSBzY29wZSBiaW5kaW5ncyB0byB0aGUgY29udHJvbGxlciBkaXJlY3RseS4gTm90ZSB0aGF0IGBzY29wZWAgY2FuIHN0aWxsIGJlIHVzZWRcbiAqIHRvIGRlZmluZSB3aGljaCBraW5kIG9mIHNjb3BlIGlzIGNyZWF0ZWQuIEJ5IGRlZmF1bHQsIG5vIHNjb3BlIGlzIGNyZWF0ZWQuIFVzZSBgc2NvcGU6IHt9YCB0byBjcmVhdGUgYW4gaXNvbGF0ZVxuICogc2NvcGUgKHVzZWZ1bCBmb3IgY29tcG9uZW50IGRpcmVjdGl2ZXMpLlxuICpcbiAqIElmIGJvdGggYGJpbmRUb0NvbnRyb2xsZXJgIGFuZCBgc2NvcGVgIGFyZSBkZWZpbmVkIGFuZCBoYXZlIG9iamVjdCBoYXNoZXMsIGBiaW5kVG9Db250cm9sbGVyYCBvdmVycmlkZXMgYHNjb3BlYC5cbiAqXG4gKlxuICogIyMjIyBgY29udHJvbGxlcmBcbiAqIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIFRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBiZWZvcmUgdGhlXG4gKiBwcmUtbGlua2luZyBwaGFzZSBhbmQgY2FuIGJlIGFjY2Vzc2VkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgKHNlZVxuICogYHJlcXVpcmVgIGF0dHJpYnV0ZSkuIFRoaXMgYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIGNvbW11bmljYXRlIHdpdGggZWFjaCBvdGhlciBhbmQgYXVnbWVudFxuICogZWFjaCBvdGhlcidzIGJlaGF2aW9yLiBUaGUgY29udHJvbGxlciBpcyBpbmplY3RhYmxlIChhbmQgc3VwcG9ydHMgYnJhY2tldCBub3RhdGlvbikgd2l0aCB0aGUgZm9sbG93aW5nIGxvY2FsczpcbiAqXG4gKiAqIGAkc2NvcGVgIC0gQ3VycmVudCBzY29wZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqICogYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICogKiBgJGF0dHJzYCAtIEN1cnJlbnQgYXR0cmlidXRlcyBvYmplY3QgZm9yIHRoZSBlbGVtZW50XG4gKiAqIGAkdHJhbnNjbHVkZWAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlOlxuICogICBgZnVuY3Rpb24oW3Njb3BlXSwgY2xvbmVMaW5raW5nRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNsb3ROYW1lKWA6XG4gKiAgICAqIGBzY29wZWA6IChvcHRpb25hbCkgb3ZlcnJpZGUgdGhlIHNjb3BlLlxuICogICAgKiBgY2xvbmVMaW5raW5nRm5gOiAob3B0aW9uYWwpIGFyZ3VtZW50IHRvIGNyZWF0ZSBjbG9uZXMgb2YgdGhlIG9yaWdpbmFsIHRyYW5zY2x1ZGVkIGNvbnRlbnQuXG4gKiAgICAqIGBmdXR1cmVQYXJlbnRFbGVtZW50YCAob3B0aW9uYWwpOlxuICogICAgICAgICogZGVmaW5lcyB0aGUgcGFyZW50IHRvIHdoaWNoIHRoZSBgY2xvbmVMaW5raW5nRm5gIHdpbGwgYWRkIHRoZSBjbG9uZWQgZWxlbWVudHMuXG4gKiAgICAgICAgKiBkZWZhdWx0OiBgJGVsZW1lbnQucGFyZW50KClgIHJlc3AuIGAkZWxlbWVudGAgZm9yIGB0cmFuc2NsdWRlOidlbGVtZW50J2AgcmVzcC4gYHRyYW5zY2x1ZGU6dHJ1ZWAuXG4gKiAgICAgICAgKiBvbmx5IG5lZWRlZCBmb3IgdHJhbnNjbHVkZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBjb250YWluIG5vbiBodG1sIGVsZW1lbnRzIChlLmcuIFNWRyBlbGVtZW50cylcbiAqICAgICAgICAgIGFuZCB3aGVuIHRoZSBgY2xvbmVMaW5raW5nRm5gIGlzIHBhc3NlZCxcbiAqICAgICAgICAgIGFzIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8gY3JlYXRlZCBhbmQgY2xvbmVkIGluIGEgc3BlY2lhbCB3YXkgd2hlbiB0aGV5IGFyZSBkZWZpbmVkIG91dHNpZGUgdGhlaXJcbiAqICAgICAgICAgIHVzdWFsIGNvbnRhaW5lcnMgKGUuZy4gbGlrZSBgPHN2Zz5gKS5cbiAqICAgICAgICAqIFNlZSBhbHNvIHRoZSBgZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlYCBwcm9wZXJ0eS5cbiAqICAgICogYHNsb3ROYW1lYDogKG9wdGlvbmFsKSB0aGUgbmFtZSBvZiB0aGUgc2xvdCB0byB0cmFuc2NsdWRlLiBJZiBmYWxzeSAoZS5nLiBgbnVsbGAsIGB1bmRlZmluZWRgIG9yIGAnJ2ApXG4gKiAgICAgIHRoZW4gdGhlIGRlZmF1bHQgdHJhbnNjbHVzaW9uIGlzIHByb3ZpZGVkLlxuICogICAgVGhlIGAkdHJhbnNjbHVkZWAgZnVuY3Rpb24gYWxzbyBoYXMgYSBtZXRob2Qgb24gaXQsIGAkdHJhbnNjbHVkZS5pc1Nsb3RGaWxsZWQoc2xvdE5hbWUpYCwgd2hpY2ggcmV0dXJuc1xuICogICAgYHRydWVgIGlmIHRoZSBzcGVjaWZpZWQgc2xvdCBjb250YWlucyBjb250ZW50IChpLmUuIG9uZSBvciBtb3JlIERPTSBub2RlcykuXG4gKlxuICogIyMjIyBgcmVxdWlyZWBcbiAqIFJlcXVpcmUgYW5vdGhlciBkaXJlY3RpdmUgYW5kIGluamVjdCBpdHMgY29udHJvbGxlciBhcyB0aGUgZm91cnRoIGFyZ3VtZW50IHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGVcbiAqIGByZXF1aXJlYCBwcm9wZXJ0eSBjYW4gYmUgYSBzdHJpbmcsIGFuIGFycmF5IG9yIGFuIG9iamVjdDpcbiAqICogYSAqKnN0cmluZyoqIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBwYXNzIHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uXG4gKiAqIGFuICoqYXJyYXkqKiBjb250YWluaW5nIHRoZSBuYW1lcyBvZiBkaXJlY3RpdmVzIHRvIHBhc3MgdG8gdGhlIGxpbmtpbmcgZnVuY3Rpb24uIFRoZSBhcmd1bWVudCBwYXNzZWQgdG8gdGhlXG4gKiBsaW5raW5nIGZ1bmN0aW9uIHdpbGwgYmUgYW4gYXJyYXkgb2YgY29udHJvbGxlcnMgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIG5hbWVzIGluIHRoZSBgcmVxdWlyZWAgcHJvcGVydHlcbiAqICogYW4gKipvYmplY3QqKiB3aG9zZSBwcm9wZXJ0eSB2YWx1ZXMgYXJlIHRoZSBuYW1lcyBvZiB0aGUgZGlyZWN0aXZlcyB0byBwYXNzIHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGUgYXJndW1lbnRcbiAqIHBhc3NlZCB0byB0aGUgbGlua2luZyBmdW5jdGlvbiB3aWxsIGFsc28gYmUgYW4gb2JqZWN0IHdpdGggbWF0Y2hpbmcga2V5cywgd2hvc2UgdmFsdWVzIHdpbGwgaG9sZCB0aGUgY29ycmVzcG9uZGluZ1xuICogY29udHJvbGxlcnMuXG4gKlxuICogSWYgdGhlIGByZXF1aXJlYCBwcm9wZXJ0eSBpcyBhbiBvYmplY3QgYW5kIGBiaW5kVG9Db250cm9sbGVyYCBpcyB0cnV0aHksIHRoZW4gdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXJzIGFyZVxuICogYm91bmQgdG8gdGhlIGNvbnRyb2xsZXIgdXNpbmcgdGhlIGtleXMgb2YgdGhlIGByZXF1aXJlYCBwcm9wZXJ0eS4gVGhpcyBiaW5kaW5nIG9jY3VycyBhZnRlciBhbGwgdGhlIGNvbnRyb2xsZXJzXG4gKiBoYXZlIGJlZW4gY29uc3RydWN0ZWQgYnV0IGJlZm9yZSBgJG9uSW5pdGAgaXMgY2FsbGVkLlxuICogSWYgdGhlIG5hbWUgb2YgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgaXMgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUgKHRoZSBrZXkpLCB0aGUgbmFtZSBjYW4gYmVcbiAqIG9taXR0ZWQuIEZvciBleGFtcGxlLCBge3BhcmVudERpcjogJ15eJ31gIGlzIGVxdWl2YWxlbnQgdG8gYHtwYXJlbnREaXI6ICdeXnBhcmVudERpcid9YC5cbiAqIFNlZSB0aGUge0BsaW5rICRjb21waWxlUHJvdmlkZXIjY29tcG9uZW50fSBoZWxwZXIgZm9yIGFuIGV4YW1wbGUgb2YgaG93IHRoaXMgY2FuIGJlIHVzZWQuXG4gKiBJZiBubyBzdWNoIHJlcXVpcmVkIGRpcmVjdGl2ZShzKSBjYW4gYmUgZm91bmQsIG9yIGlmIHRoZSBkaXJlY3RpdmUgZG9lcyBub3QgaGF2ZSBhIGNvbnRyb2xsZXIsIHRoZW4gYW4gZXJyb3IgaXNcbiAqIHJhaXNlZCAodW5sZXNzIG5vIGxpbmsgZnVuY3Rpb24gaXMgc3BlY2lmaWVkIGFuZCB0aGUgcmVxdWlyZWQgY29udHJvbGxlcnMgYXJlIG5vdCBiZWluZyBib3VuZCB0byB0aGUgZGlyZWN0aXZlXG4gKiBjb250cm9sbGVyLCBpbiB3aGljaCBjYXNlIGVycm9yIGNoZWNraW5nIGlzIHNraXBwZWQpLiBUaGUgbmFtZSBjYW4gYmUgcHJlZml4ZWQgd2l0aDpcbiAqXG4gKiAqIChubyBwcmVmaXgpIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAqICogYD9gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb3IgcGFzcyBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKiAqIGBeYCAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQgYW5kIGl0cyBwYXJlbnRzLiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gKiAqIGBeXmAgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50J3MgcGFyZW50cy4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLlxuICogKiBgP15gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cyBvciBwYXNzXG4gKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqICogYD9eXmAgLSBBdHRlbXB0IHRvIGxvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQncyBwYXJlbnRzLCBvciBwYXNzXG4gKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqXG4gKlxuICogIyMjIyBgY29udHJvbGxlckFzYFxuICogSWRlbnRpZmllciBuYW1lIGZvciBhIHJlZmVyZW5jZSB0byB0aGUgY29udHJvbGxlciBpbiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUuXG4gKiBUaGlzIGFsbG93cyB0aGUgY29udHJvbGxlciB0byBiZSByZWZlcmVuY2VkIGZyb20gdGhlIGRpcmVjdGl2ZSB0ZW1wbGF0ZS4gVGhpcyBpcyBlc3BlY2lhbGx5XG4gKiB1c2VmdWwgd2hlbiBhIGRpcmVjdGl2ZSBpcyB1c2VkIGFzIGNvbXBvbmVudCwgaS5lLiB3aXRoIGFuIGBpc29sYXRlYCBzY29wZS4gSXQncyBhbHNvIHBvc3NpYmxlXG4gKiB0byB1c2UgaXQgaW4gYSBkaXJlY3RpdmUgd2l0aG91dCBhbiBgaXNvbGF0ZWAgLyBgbmV3YCBzY29wZSwgYnV0IHlvdSBuZWVkIHRvIGJlIGF3YXJlIHRoYXQgdGhlXG4gKiBgY29udHJvbGxlckFzYCByZWZlcmVuY2UgbWlnaHQgb3ZlcndyaXRlIGEgcHJvcGVydHkgdGhhdCBhbHJlYWR5IGV4aXN0cyBvbiB0aGUgcGFyZW50IHNjb3BlLlxuICpcbiAqXG4gKiAjIyMjIGByZXN0cmljdGBcbiAqIFN0cmluZyBvZiBzdWJzZXQgb2YgYEVBQ01gIHdoaWNoIHJlc3RyaWN0cyB0aGUgZGlyZWN0aXZlIHRvIGEgc3BlY2lmaWMgZGlyZWN0aXZlXG4gKiBkZWNsYXJhdGlvbiBzdHlsZS4gSWYgb21pdHRlZCwgdGhlIGRlZmF1bHRzIChlbGVtZW50cyBhbmQgYXR0cmlidXRlcykgYXJlIHVzZWQuXG4gKlxuICogKiBgRWAgLSBFbGVtZW50IG5hbWUgKGRlZmF1bHQpOiBgPG15LWRpcmVjdGl2ZT48L215LWRpcmVjdGl2ZT5gXG4gKiAqIGBBYCAtIEF0dHJpYnV0ZSAoZGVmYXVsdCk6IGA8ZGl2IG15LWRpcmVjdGl2ZT1cImV4cFwiPjwvZGl2PmBcbiAqICogYENgIC0gQ2xhc3M6IGA8ZGl2IGNsYXNzPVwibXktZGlyZWN0aXZlOiBleHA7XCI+PC9kaXY+YFxuICogKiBgTWAgLSBDb21tZW50OiBgPCEtLSBkaXJlY3RpdmU6IG15LWRpcmVjdGl2ZSBleHAgLS0+YFxuICpcbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZU5hbWVzcGFjZWBcbiAqIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRvY3VtZW50IHR5cGUgdXNlZCBieSB0aGUgbWFya3VwIGluIHRoZSB0ZW1wbGF0ZS5cbiAqIEFuZ3VsYXJKUyBuZWVkcyB0aGlzIGluZm9ybWF0aW9uIGFzIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8gYmUgY3JlYXRlZCBhbmQgY2xvbmVkXG4gKiBpbiBhIHNwZWNpYWwgd2F5IHdoZW4gdGhleSBhcmUgZGVmaW5lZCBvdXRzaWRlIHRoZWlyIHVzdWFsIGNvbnRhaW5lcnMgbGlrZSBgPHN2Zz5gIGFuZCBgPG1hdGg+YC5cbiAqXG4gKiAqIGBodG1sYCAtIEFsbCByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgSFRNTC4gUm9vdCBub2RlcyBtYXkgYWxzbyBiZVxuICogICB0b3AtbGV2ZWwgZWxlbWVudHMgc3VjaCBhcyBgPHN2Zz5gIG9yIGA8bWF0aD5gLlxuICogKiBgc3ZnYCAtIFRoZSByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgU1ZHIGVsZW1lbnRzIChleGNsdWRpbmcgYDxtYXRoPmApLlxuICogKiBgbWF0aGAgLSBUaGUgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIE1hdGhNTCBlbGVtZW50cyAoZXhjbHVkaW5nIGA8c3ZnPmApLlxuICpcbiAqIElmIG5vIGB0ZW1wbGF0ZU5hbWVzcGFjZWAgaXMgc3BlY2lmaWVkLCB0aGVuIHRoZSBuYW1lc3BhY2UgaXMgY29uc2lkZXJlZCB0byBiZSBgaHRtbGAuXG4gKlxuICogIyMjIyBgdGVtcGxhdGVgXG4gKiBIVE1MIG1hcmt1cCB0aGF0IG1heTpcbiAqICogUmVwbGFjZSB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGRlZmF1bHQpLlxuICogKiBSZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGl0c2VsZiAoaWYgYHJlcGxhY2VgIGlzIHRydWUgLSBERVBSRUNBVEVEKS5cbiAqICogV3JhcCB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGlmIGB0cmFuc2NsdWRlYCBpcyB0cnVlKS5cbiAqXG4gKiBWYWx1ZSBtYXkgYmU6XG4gKlxuICogKiBBIHN0cmluZy4gRm9yIGV4YW1wbGUgYDxkaXYgcmVkLW9uLWhvdmVyPnt7ZGVsZXRlX3N0cn19PC9kaXY+YC5cbiAqICogQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYFxuICogICBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlLlxuICpcbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZVVybGBcbiAqIFRoaXMgaXMgc2ltaWxhciB0byBgdGVtcGxhdGVgIGJ1dCB0aGUgdGVtcGxhdGUgaXMgbG9hZGVkIGZyb20gdGhlIHNwZWNpZmllZCBVUkwsIGFzeW5jaHJvbm91c2x5LlxuICpcbiAqIEJlY2F1c2UgdGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgdGhlIGNvbXBpbGVyIHdpbGwgc3VzcGVuZCBjb21waWxhdGlvbiBvZiBkaXJlY3RpdmVzIG9uIHRoYXQgZWxlbWVudFxuICogZm9yIGxhdGVyIHdoZW4gdGhlIHRlbXBsYXRlIGhhcyBiZWVuIHJlc29sdmVkLiAgSW4gdGhlIG1lYW50aW1lIGl0IHdpbGwgY29udGludWUgdG8gY29tcGlsZSBhbmQgbGlua1xuICogc2libGluZyBhbmQgcGFyZW50IGVsZW1lbnRzIGFzIHRob3VnaCB0aGlzIGVsZW1lbnQgaGFkIG5vdCBjb250YWluZWQgYW55IGRpcmVjdGl2ZXMuXG4gKlxuICogVGhlIGNvbXBpbGVyIGRvZXMgbm90IHN1c3BlbmQgdGhlIGVudGlyZSBjb21waWxhdGlvbiB0byB3YWl0IGZvciB0ZW1wbGF0ZXMgdG8gYmUgbG9hZGVkIGJlY2F1c2UgdGhpc1xuICogd291bGQgcmVzdWx0IGluIHRoZSB3aG9sZSBhcHAgXCJzdGFsbGluZ1wiIHVudGlsIGFsbCB0ZW1wbGF0ZXMgYXJlIGxvYWRlZCBhc3luY2hyb25vdXNseSAtIGV2ZW4gaW4gdGhlXG4gKiBjYXNlIHdoZW4gb25seSBvbmUgZGVlcGx5IG5lc3RlZCBkaXJlY3RpdmUgaGFzIGB0ZW1wbGF0ZVVybGAuXG4gKlxuICogVGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgZXZlbiBpZiB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gcHJlbG9hZGVkIGludG8gdGhlIHtAbGluayAkdGVtcGxhdGVDYWNoZX1cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgYHRlbXBsYXRlVXJsYCBhcyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIFVSTCBvciBhcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3b1xuICogYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYCBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zXG4gKiBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIHVybC4gIEluIGVpdGhlciBjYXNlLCB0aGUgdGVtcGxhdGUgVVJMIGlzIHBhc3NlZCB0aHJvdWdoIHtAbGlua1xuICogJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmwgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9LlxuICpcbiAqXG4gKiAjIyMjIGByZXBsYWNlYCAoWypERVBSRUNBVEVEKiFdLCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciByZWxlYXNlIC0gaS5lLiB2Mi4wKVxuICogc3BlY2lmeSB3aGF0IHRoZSB0ZW1wbGF0ZSBzaG91bGQgcmVwbGFjZS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqXG4gKiAqIGB0cnVlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKiAqIGBmYWxzZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqXG4gKiBUaGUgcmVwbGFjZW1lbnQgcHJvY2VzcyBtaWdyYXRlcyBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgLyBjbGFzc2VzIGZyb20gdGhlIG9sZCBlbGVtZW50IHRvIHRoZSBuZXdcbiAqIG9uZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI3RlbXBsYXRlLWV4cGFuZGluZy1kaXJlY3RpdmVcbiAqIERpcmVjdGl2ZXMgR3VpZGV9IGZvciBhbiBleGFtcGxlLlxuICpcbiAqIFRoZXJlIGFyZSB2ZXJ5IGZldyBzY2VuYXJpb3Mgd2hlcmUgZWxlbWVudCByZXBsYWNlbWVudCBpcyByZXF1aXJlZCBmb3IgdGhlIGFwcGxpY2F0aW9uIGZ1bmN0aW9uLFxuICogdGhlIG1haW4gb25lIGJlaW5nIHJldXNhYmxlIGN1c3RvbSBjb21wb25lbnRzIHRoYXQgYXJlIHVzZWQgd2l0aGluIFNWRyBjb250ZXh0c1xuICogKGJlY2F1c2UgU1ZHIGRvZXNuJ3Qgd29yayB3aXRoIGN1c3RvbSBlbGVtZW50cyBpbiB0aGUgRE9NIHRyZWUpLlxuICpcbiAqICMjIyMgYHRyYW5zY2x1ZGVgXG4gKiBFeHRyYWN0IHRoZSBjb250ZW50cyBvZiB0aGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGFwcGVhcnMgYW5kIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBkaXJlY3RpdmUuXG4gKiBUaGUgY29udGVudHMgYXJlIGNvbXBpbGVkIGFuZCBwcm92aWRlZCB0byB0aGUgZGlyZWN0aXZlIGFzIGEgKip0cmFuc2NsdXNpb24gZnVuY3Rpb24qKi4gU2VlIHRoZVxuICoge0BsaW5rICRjb21waWxlI3RyYW5zY2x1c2lvbiBUcmFuc2NsdXNpb259IHNlY3Rpb24gYmVsb3cuXG4gKlxuICpcbiAqICMjIyMgYGNvbXBpbGVgXG4gKlxuICogYGBganNcbiAqICAgZnVuY3Rpb24gY29tcGlsZSh0RWxlbWVudCwgdEF0dHJzLCB0cmFuc2NsdWRlKSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBkZWFscyB3aXRoIHRyYW5zZm9ybWluZyB0aGUgdGVtcGxhdGUgRE9NLiBTaW5jZSBtb3N0IGRpcmVjdGl2ZXMgZG8gbm90IGRvXG4gKiB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiwgaXQgaXMgbm90IHVzZWQgb2Z0ZW4uIFRoZSBjb21waWxlIGZ1bmN0aW9uIHRha2VzIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICpcbiAqICAgKiBgdEVsZW1lbnRgIC0gdGVtcGxhdGUgZWxlbWVudCAtIFRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgaGFzIGJlZW4gZGVjbGFyZWQuIEl0IGlzXG4gKiAgICAgc2FmZSB0byBkbyB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiBvbiB0aGUgZWxlbWVudCBhbmQgY2hpbGQgZWxlbWVudHMgb25seS5cbiAqXG4gKiAgICogYHRBdHRyc2AgLSB0ZW1wbGF0ZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBjb21waWxlIGZ1bmN0aW9ucy5cbiAqXG4gKiAgICogYHRyYW5zY2x1ZGVgIC0gIFsqREVQUkVDQVRFRCohXSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbjogYGZ1bmN0aW9uKHNjb3BlLCBjbG9uZUxpbmtpbmdGbilgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGUgdGVtcGxhdGUgaW5zdGFuY2UgYW5kIHRoZSBsaW5rIGluc3RhbmNlIG1heSBiZSBkaWZmZXJlbnQgb2JqZWN0cyBpZiB0aGUgdGVtcGxhdGUgaGFzXG4gKiBiZWVuIGNsb25lZC4gRm9yIHRoaXMgcmVhc29uIGl0IGlzICoqbm90Kiogc2FmZSB0byBkbyBhbnl0aGluZyBvdGhlciB0aGFuIERPTSB0cmFuc2Zvcm1hdGlvbnMgdGhhdFxuICogYXBwbHkgdG8gYWxsIGNsb25lZCBET00gbm9kZXMgd2l0aGluIHRoZSBjb21waWxlIGZ1bmN0aW9uLiBTcGVjaWZpY2FsbHksIERPTSBsaXN0ZW5lciByZWdpc3RyYXRpb25cbiAqIHNob3VsZCBiZSBkb25lIGluIGEgbGlua2luZyBmdW5jdGlvbiByYXRoZXIgdGhhbiBpbiBhIGNvbXBpbGUgZnVuY3Rpb24uXG4gKiA8L2Rpdj5cblxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBjYW5ub3QgaGFuZGxlIGRpcmVjdGl2ZXMgdGhhdCByZWN1cnNpdmVseSB1c2UgdGhlbXNlbHZlcyBpbiB0aGVpclxuICogb3duIHRlbXBsYXRlcyBvciBjb21waWxlIGZ1bmN0aW9ucy4gQ29tcGlsaW5nIHRoZXNlIGRpcmVjdGl2ZXMgcmVzdWx0cyBpbiBhbiBpbmZpbml0ZSBsb29wIGFuZFxuICogc3RhY2sgb3ZlcmZsb3cgZXJyb3JzLlxuICpcbiAqIFRoaXMgY2FuIGJlIGF2b2lkZWQgYnkgbWFudWFsbHkgdXNpbmcgJGNvbXBpbGUgaW4gdGhlIHBvc3RMaW5rIGZ1bmN0aW9uIHRvIGltcGVyYXRpdmVseSBjb21waWxlXG4gKiBhIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIGluc3RlYWQgb2YgcmVseWluZyBvbiBhdXRvbWF0aWMgdGVtcGxhdGUgY29tcGlsYXRpb24gdmlhIGB0ZW1wbGF0ZWAgb3JcbiAqIGB0ZW1wbGF0ZVVybGAgZGVjbGFyYXRpb24gb3IgbWFudWFsIGNvbXBpbGF0aW9uIGluc2lkZSB0aGUgY29tcGlsZSBmdW5jdGlvbi5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAqICoqTm90ZToqKiBUaGUgYHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQsIGFzIGl0XG4gKiAgIGUuZy4gZG9lcyBub3Qga25vdyBhYm91dCB0aGUgcmlnaHQgb3V0ZXIgc2NvcGUuIFBsZWFzZSB1c2UgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWRcbiAqICAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuXG4gKiBBIGNvbXBpbGUgZnVuY3Rpb24gY2FuIGhhdmUgYSByZXR1cm4gdmFsdWUgd2hpY2ggY2FuIGJlIGVpdGhlciBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdC5cbiAqXG4gKiAqIHJldHVybmluZyBhIChwb3N0LWxpbmspIGZ1bmN0aW9uIC0gaXMgZXF1aXZhbGVudCB0byByZWdpc3RlcmluZyB0aGUgbGlua2luZyBmdW5jdGlvbiB2aWEgdGhlXG4gKiAgIGBsaW5rYCBwcm9wZXJ0eSBvZiB0aGUgY29uZmlnIG9iamVjdCB3aGVuIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGVtcHR5LlxuICpcbiAqICogcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGZ1bmN0aW9uKHMpIHJlZ2lzdGVyZWQgdmlhIGBwcmVgIGFuZCBgcG9zdGAgcHJvcGVydGllcyAtIGFsbG93cyB5b3UgdG9cbiAqICAgY29udHJvbCB3aGVuIGEgbGlua2luZyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGR1cmluZyB0aGUgbGlua2luZyBwaGFzZS4gU2VlIGluZm8gYWJvdXRcbiAqICAgcHJlLWxpbmtpbmcgYW5kIHBvc3QtbGlua2luZyBmdW5jdGlvbnMgYmVsb3cuXG4gKlxuICpcbiAqICMjIyMgYGxpbmtgXG4gKiBUaGlzIHByb3BlcnR5IGlzIHVzZWQgb25seSBpZiB0aGUgYGNvbXBpbGVgIHByb3BlcnR5IGlzIG5vdCBkZWZpbmVkLlxuICpcbiAqIGBgYGpzXG4gKiAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIsIHRyYW5zY2x1ZGVGbikgeyAuLi4gfVxuICogYGBgXG4gKlxuICogVGhlIGxpbmsgZnVuY3Rpb24gaXMgcmVzcG9uc2libGUgZm9yIHJlZ2lzdGVyaW5nIERPTSBsaXN0ZW5lcnMgYXMgd2VsbCBhcyB1cGRhdGluZyB0aGUgRE9NLiBJdCBpc1xuICogZXhlY3V0ZWQgYWZ0ZXIgdGhlIHRlbXBsYXRlIGhhcyBiZWVuIGNsb25lZC4gVGhpcyBpcyB3aGVyZSBtb3N0IG9mIHRoZSBkaXJlY3RpdmUgbG9naWMgd2lsbCBiZVxuICogcHV0LlxuICpcbiAqICAgKiBgc2NvcGVgIC0ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IC0gVGhlIHNjb3BlIHRvIGJlIHVzZWQgYnkgdGhlXG4gKiAgICAgZGlyZWN0aXZlIGZvciByZWdpc3RlcmluZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlc30uXG4gKlxuICogICAqIGBpRWxlbWVudGAgLSBpbnN0YW5jZSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBpcyB0byBiZSB1c2VkLiBJdCBpcyBzYWZlIHRvXG4gKiAgICAgbWFuaXB1bGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnQgb25seSBpbiBgcG9zdExpbmtgIGZ1bmN0aW9uIHNpbmNlIHRoZSBjaGlsZHJlbiBoYXZlXG4gKiAgICAgYWxyZWFkeSBiZWVuIGxpbmtlZC5cbiAqXG4gKiAgICogYGlBdHRyc2AgLSBpbnN0YW5jZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBsaW5raW5nIGZ1bmN0aW9ucy5cbiAqXG4gKiAgICogYGNvbnRyb2xsZXJgIC0gdGhlIGRpcmVjdGl2ZSdzIHJlcXVpcmVkIGNvbnRyb2xsZXIgaW5zdGFuY2UocykgLSBJbnN0YW5jZXMgYXJlIHNoYXJlZFxuICogICAgIGFtb25nIGFsbCBkaXJlY3RpdmVzLCB3aGljaCBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gdXNlIHRoZSBjb250cm9sbGVycyBhcyBhIGNvbW11bmljYXRpb25cbiAqICAgICBjaGFubmVsLiBUaGUgZXhhY3QgdmFsdWUgZGVwZW5kcyBvbiB0aGUgZGlyZWN0aXZlJ3MgYHJlcXVpcmVgIHByb3BlcnR5OlxuICogICAgICAgKiBubyBjb250cm9sbGVyKHMpIHJlcXVpcmVkOiB0aGUgZGlyZWN0aXZlJ3Mgb3duIGNvbnRyb2xsZXIsIG9yIGB1bmRlZmluZWRgIGlmIGl0IGRvZXNuJ3QgaGF2ZSBvbmVcbiAqICAgICAgICogYHN0cmluZ2A6IHRoZSBjb250cm9sbGVyIGluc3RhbmNlXG4gKiAgICAgICAqIGBhcnJheWA6IGFycmF5IG9mIGNvbnRyb2xsZXIgaW5zdGFuY2VzXG4gKlxuICogICAgIElmIGEgcmVxdWlyZWQgY29udHJvbGxlciBjYW5ub3QgYmUgZm91bmQsIGFuZCBpdCBpcyBvcHRpb25hbCwgdGhlIGluc3RhbmNlIGlzIGBudWxsYCxcbiAqICAgICBvdGhlcndpc2UgdGhlIHtAbGluayBlcnJvcjokY29tcGlsZTpjdHJlcSBNaXNzaW5nIFJlcXVpcmVkIENvbnRyb2xsZXJ9IGVycm9yIGlzIHRocm93bi5cbiAqXG4gKiAgICAgTm90ZSB0aGF0IHlvdSBjYW4gYWxzbyByZXF1aXJlIHRoZSBkaXJlY3RpdmUncyBvd24gY29udHJvbGxlciAtIGl0IHdpbGwgYmUgbWFkZSBhdmFpbGFibGUgbGlrZVxuICogICAgIGFueSBvdGhlciBjb250cm9sbGVyLlxuICpcbiAqICAgKiBgdHJhbnNjbHVkZUZuYCAtIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uIHByZS1ib3VuZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiAgICAgVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgYCR0cmFuc2NsdWRlYCBwYXJhbWV0ZXIgb2YgZGlyZWN0aXZlIGNvbnRyb2xsZXJzLFxuICogICAgIHNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLWNvbnRyb2xsZXItIHRoZSBjb250cm9sbGVyIHNlY3Rpb24gZm9yIGRldGFpbHN9LlxuICogICAgIGBmdW5jdGlvbihbc2NvcGVdLCBjbG9uZUxpbmtpbmdGbiwgZnV0dXJlUGFyZW50RWxlbWVudClgLlxuICpcbiAqICMjIyMgUHJlLWxpbmtpbmcgZnVuY3Rpb25cbiAqXG4gKiBFeGVjdXRlZCBiZWZvcmUgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuIE5vdCBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBzaW5jZSB0aGVcbiAqIGNvbXBpbGVyIGxpbmtpbmcgZnVuY3Rpb24gd2lsbCBmYWlsIHRvIGxvY2F0ZSB0aGUgY29ycmVjdCBlbGVtZW50cyBmb3IgbGlua2luZy5cbiAqXG4gKiAjIyMjIFBvc3QtbGlua2luZyBmdW5jdGlvblxuICpcbiAqIEV4ZWN1dGVkIGFmdGVyIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLlxuICpcbiAqIE5vdGUgdGhhdCBjaGlsZCBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYHRlbXBsYXRlVXJsYCBkaXJlY3RpdmVzIHdpbGwgbm90IGhhdmUgYmVlbiBjb21waWxlZFxuICogYW5kIGxpbmtlZCBzaW5jZSB0aGV5IGFyZSB3YWl0aW5nIGZvciB0aGVpciB0ZW1wbGF0ZSB0byBsb2FkIGFzeW5jaHJvbm91c2x5IGFuZCB0aGVpciBvd25cbiAqIGNvbXBpbGF0aW9uIGFuZCBsaW5raW5nIGhhcyBiZWVuIHN1c3BlbmRlZCB1bnRpbCB0aGF0IG9jY3Vycy5cbiAqXG4gKiBJdCBpcyBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBpbiB0aGUgcG9zdC1saW5raW5nIGZ1bmN0aW9uIG9uIGVsZW1lbnRzIHRoYXQgYXJlIG5vdCB3YWl0aW5nXG4gKiBmb3IgdGhlaXIgYXN5bmMgdGVtcGxhdGVzIHRvIGJlIHJlc29sdmVkLlxuICpcbiAqXG4gKiAjIyMgVHJhbnNjbHVzaW9uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHRoZSBwcm9jZXNzIG9mIGV4dHJhY3RpbmcgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50cyBmcm9tIG9uZSBwYXJ0IG9mIHRoZSBET00gYW5kXG4gKiBjb3B5aW5nIHRoZW0gdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBET00sIHdoaWxlIG1haW50YWluaW5nIHRoZWlyIGNvbm5lY3Rpb24gdG8gdGhlIG9yaWdpbmFsIEFuZ3VsYXJKU1xuICogc2NvcGUgZnJvbSB3aGVyZSB0aGV5IHdlcmUgdGFrZW4uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHVzZWQgKG9mdGVuIHdpdGgge0BsaW5rIG5nVHJhbnNjbHVkZX0pIHRvIGluc2VydCB0aGVcbiAqIG9yaWdpbmFsIGNvbnRlbnRzIG9mIGEgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbnRvIGEgc3BlY2lmaWVkIHBsYWNlIGluIHRoZSB0ZW1wbGF0ZSBvZiB0aGUgZGlyZWN0aXZlLlxuICogVGhlIGJlbmVmaXQgb2YgdHJhbnNjbHVzaW9uLCBvdmVyIHNpbXBseSBtb3ZpbmcgdGhlIERPTSBlbGVtZW50cyBtYW51YWxseSwgaXMgdGhhdCB0aGUgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgaGFzIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBvbiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdCB3YXMgdGFrZW4sIGV2ZW4gaWYgdGhlIGRpcmVjdGl2ZVxuICogaGFzIGlzb2xhdGVkIHNjb3BlLlxuICogU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI2NyZWF0aW5nLWEtZGlyZWN0aXZlLXRoYXQtd3JhcHMtb3RoZXItZWxlbWVudHMgRGlyZWN0aXZlcyBHdWlkZX0uXG4gKlxuICogVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgdGhlIHdpZGdldCB0byBoYXZlIHByaXZhdGUgc3RhdGUgZm9yIGl0cyB0ZW1wbGF0ZSwgd2hpbGUgdGhlIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGhhcyBhY2Nlc3MgdG8gaXRzIG9yaWdpbmF0aW5nIHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogV2hlbiB0ZXN0aW5nIGFuIGVsZW1lbnQgdHJhbnNjbHVkZSBkaXJlY3RpdmUgeW91IG11c3Qgbm90IHBsYWNlIHRoZSBkaXJlY3RpdmUgYXQgdGhlIHJvb3Qgb2YgdGhlXG4gKiBET00gZnJhZ21lbnQgdGhhdCBpcyBiZWluZyBjb21waWxlZC4gU2VlIHtAbGluayBndWlkZS91bml0LXRlc3RpbmcjdGVzdGluZy10cmFuc2NsdXNpb24tZGlyZWN0aXZlc1xuICogVGVzdGluZyBUcmFuc2NsdXNpb24gRGlyZWN0aXZlc30uXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGVyZSBhcmUgdGhyZWUga2luZHMgb2YgdHJhbnNjbHVzaW9uIGRlcGVuZGluZyB1cG9uIHdoZXRoZXIgeW91IHdhbnQgdG8gdHJhbnNjbHVkZSBqdXN0IHRoZSBjb250ZW50cyBvZiB0aGVcbiAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQsIHRoZSBlbnRpcmUgZWxlbWVudCBvciBtdWx0aXBsZSBwYXJ0cyBvZiB0aGUgZWxlbWVudCBjb250ZW50czpcbiAqXG4gKiAqIGB0cnVlYCAtIHRyYW5zY2x1ZGUgdGhlIGNvbnRlbnQgKGkuZS4gdGhlIGNoaWxkIG5vZGVzKSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqICogYCdlbGVtZW50J2AgLSB0cmFuc2NsdWRlIHRoZSB3aG9sZSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbmNsdWRpbmcgYW55IGRpcmVjdGl2ZXMgb24gdGhpc1xuICogICBlbGVtZW50IHRoYXQgZGVmaW5lZCBhdCBhIGxvd2VyIHByaW9yaXR5IHRoYW4gdGhpcyBkaXJlY3RpdmUuIFdoZW4gdXNlZCwgdGhlIGB0ZW1wbGF0ZWBcbiAqICAgcHJvcGVydHkgaXMgaWdub3JlZC5cbiAqICogKipgey4uLn1gIChhbiBvYmplY3QgaGFzaCk6KiogLSBtYXAgZWxlbWVudHMgb2YgdGhlIGNvbnRlbnQgb250byB0cmFuc2NsdXNpb24gXCJzbG90c1wiIGluIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiAqKk11bHQtc2xvdCB0cmFuc2NsdXNpb24qKiBpcyBkZWNsYXJlZCBieSBwcm92aWRpbmcgYW4gb2JqZWN0IGZvciB0aGUgYHRyYW5zY2x1ZGVgIHByb3BlcnR5LlxuICpcbiAqIFRoaXMgb2JqZWN0IGlzIGEgbWFwIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGUgbmFtZSBvZiB0aGUgc2xvdCB0byBmaWxsIGFuZCB0aGUgdmFsdWUgaXMgYW4gZWxlbWVudCBzZWxlY3RvclxuICogdXNlZCB0byBtYXRjaCB0aGUgSFRNTCB0byB0aGUgc2xvdC4gVGhlIGVsZW1lbnQgc2VsZWN0b3Igc2hvdWxkIGJlIGluIG5vcm1hbGl6ZWQgZm9ybSAoZS5nLiBgbXlFbGVtZW50YClcbiAqIGFuZCB3aWxsIG1hdGNoIHRoZSBzdGFuZGFyZCBlbGVtZW50IHZhcmlhbnRzIChlLmcuIGBteS1lbGVtZW50YCwgYG15OmVsZW1lbnRgLCBgZGF0YS1teS1lbGVtZW50YCwgZXRjKS5cbiAqXG4gKiBGb3IgZnVydGhlciBpbmZvcm1hdGlvbiBjaGVjayBvdXQgdGhlIGd1aWRlIG9uIHtAbGluayBndWlkZS9kaXJlY3RpdmUjbWF0Y2hpbmctZGlyZWN0aXZlcyBNYXRjaGluZyBEaXJlY3RpdmVzfVxuICpcbiAqIElmIHRoZSBlbGVtZW50IHNlbGVjdG9yIGlzIHByZWZpeGVkIHdpdGggYSBgP2AgdGhlbiB0aGF0IHNsb3QgaXMgb3B0aW9uYWwuXG4gKlxuICogRm9yIGV4YW1wbGUsIHRoZSB0cmFuc2NsdWRlIG9iamVjdCBgeyBzbG90QTogJz9teUN1c3RvbUVsZW1lbnQnIH1gIG1hcHMgYDxteS1jdXN0b20tZWxlbWVudD5gIGVsZW1lbnRzIHRvXG4gKiB0aGUgYHNsb3RBYCBzbG90LCB3aGljaCBjYW4gYmUgYWNjZXNzZWQgdmlhIHRoZSBgJHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIG9yIHZpYSB0aGUge0BsaW5rIG5nVHJhbnNjbHVkZX0gZGlyZWN0aXZlLlxuICpcbiAqIFNsb3RzIHRoYXQgYXJlIG5vdCBtYXJrZWQgYXMgb3B0aW9uYWwgKGA/YCkgd2lsbCB0cmlnZ2VyIGEgY29tcGlsZSB0aW1lIGVycm9yIGlmIHRoZXJlIGFyZSBubyBtYXRjaGluZyBlbGVtZW50c1xuICogaW4gdGhlIHRyYW5zY2x1ZGUgY29udGVudC4gSWYgeW91IHdpc2ggdG8ga25vdyBpZiBhbiBvcHRpb25hbCBzbG90IHdhcyBmaWxsZWQgd2l0aCBjb250ZW50LCB0aGVuIHlvdSBjYW4gY2FsbFxuICogYCR0cmFuc2NsdWRlLmlzU2xvdEZpbGxlZChzbG90TmFtZSlgIG9uIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHBhc3NlZCB0byB0aGUgZGlyZWN0aXZlJ3MgbGluayBmdW5jdGlvbiBhbmRcbiAqIGluamVjdGFibGUgaW50byB0aGUgZGlyZWN0aXZlJ3MgY29udHJvbGxlci5cbiAqXG4gKlxuICogIyMjIyBUcmFuc2NsdXNpb24gRnVuY3Rpb25zXG4gKlxuICogV2hlbiBhIGRpcmVjdGl2ZSByZXF1ZXN0cyB0cmFuc2NsdXNpb24sIHRoZSBjb21waWxlciBleHRyYWN0cyBpdHMgY29udGVudHMgYW5kIHByb3ZpZGVzIGEgKip0cmFuc2NsdXNpb25cbiAqIGZ1bmN0aW9uKiogdG8gdGhlIGRpcmVjdGl2ZSdzIGBsaW5rYCBmdW5jdGlvbiBhbmQgYGNvbnRyb2xsZXJgLiBUaGlzIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiBpcyBhIHNwZWNpYWxcbiAqICoqbGlua2luZyBmdW5jdGlvbioqIHRoYXQgd2lsbCByZXR1cm4gdGhlIGNvbXBpbGVkIGNvbnRlbnRzIGxpbmtlZCB0byBhIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqIElmIHlvdSBhcmUganVzdCB1c2luZyB7QGxpbmsgbmdUcmFuc2NsdWRlfSB0aGVuIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMgZnVuY3Rpb24sIHNpbmNlXG4gKiBuZ1RyYW5zY2x1ZGUgd2lsbCBkZWFsIHdpdGggaXQgZm9yIHVzLlxuICogPC9kaXY+XG4gKlxuICogSWYgeW91IHdhbnQgdG8gbWFudWFsbHkgY29udHJvbCB0aGUgaW5zZXJ0aW9uIGFuZCByZW1vdmFsIG9mIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGluIHlvdXIgZGlyZWN0aXZlXG4gKiB0aGVuIHlvdSBtdXN0IHVzZSB0aGlzIHRyYW5zY2x1ZGUgZnVuY3Rpb24uIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBhIGpxTGl0ZS9KUXVlcnlcbiAqIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBjb21waWxlZCBET00sIHdoaWNoIGlzIGxpbmtlZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKlxuICogV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiB5b3UgY2FuIHBhc3MgaW4gYSAqKmNsb25lIGF0dGFjaCBmdW5jdGlvbioqLiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHNcbiAqIHR3byBwYXJhbWV0ZXJzLCBgZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7IC4uLiB9YCwgd2hlcmUgdGhlIGBjbG9uZWAgaXMgYSBmcmVzaCBjb21waWxlZCBjb3B5IG9mIHlvdXIgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgYW5kIHRoZSBgc2NvcGVgIGlzIHRoZSBuZXdseSBjcmVhdGVkIHRyYW5zY2x1c2lvbiBzY29wZSwgd2hpY2ggdGhlIGNsb25lIHdpbGwgYmUgbGlua2VkIHRvLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKkJlc3QgUHJhY3RpY2UqKjogQWx3YXlzIHByb3ZpZGUgYSBgY2xvbmVGbmAgKGNsb25lIGF0dGFjaCBmdW5jdGlvbikgd2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb25cbiAqIHNpbmNlIHlvdSB0aGVuIGdldCBhIGZyZXNoIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBET00gYW5kIGFsc28gaGF2ZSBhY2Nlc3MgdG8gdGhlIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJdCBpcyBub3JtYWwgcHJhY3RpY2UgdG8gYXR0YWNoIHlvdXIgdHJhbnNjbHVkZWQgY29udGVudCAoYGNsb25lYCkgdG8gdGhlIERPTSBpbnNpZGUgeW91ciAqKmNsb25lXG4gKiBhdHRhY2ggZnVuY3Rpb24qKjpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHRyYW5zY2x1ZGVkQ29udGVudCwgdHJhbnNjbHVzaW9uU2NvcGU7XG4gKlxuICogJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7XG4gKiAgIGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAqICAgdHJhbnNjbHVkZWRDb250ZW50ID0gY2xvbmU7XG4gKiAgIHRyYW5zY2x1c2lvblNjb3BlID0gc2NvcGU7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIExhdGVyLCBpZiB5b3Ugd2FudCB0byByZW1vdmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgZnJvbSB5b3VyIERPTSB0aGVuIHlvdSBzaG91bGQgYWxzbyBkZXN0cm95IHRoZVxuICogYXNzb2NpYXRlZCB0cmFuc2NsdXNpb24gc2NvcGU6XG4gKlxuICogYGBganNcbiAqIHRyYW5zY2x1ZGVkQ29udGVudC5yZW1vdmUoKTtcbiAqIHRyYW5zY2x1c2lvblNjb3BlLiRkZXN0cm95KCk7XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipCZXN0IFByYWN0aWNlKio6IGlmIHlvdSBpbnRlbmQgdG8gYWRkIGFuZCByZW1vdmUgdHJhbnNjbHVkZWQgY29udGVudCBtYW51YWxseSBpbiB5b3VyIGRpcmVjdGl2ZVxuICogKGJ5IGNhbGxpbmcgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBET00gYW5kIGNhbGxpbmcgYGVsZW1lbnQucmVtb3ZlKClgIHRvIHJlbW92ZSBpdCksXG4gKiB0aGVuIHlvdSBhcmUgYWxzbyByZXNwb25zaWJsZSBmb3IgY2FsbGluZyBgJGRlc3Ryb3lgIG9uIHRoZSB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGUgYnVpbHQtaW4gRE9NIG1hbmlwdWxhdGlvbiBkaXJlY3RpdmVzLCBzdWNoIGFzIHtAbGluayBuZ0lmfSwge0BsaW5rIG5nU3dpdGNofSBhbmQge0BsaW5rIG5nUmVwZWF0fVxuICogYXV0b21hdGljYWxseSBkZXN0cm95IHRoZWlyIHRyYW5zY2x1ZGVkIGNsb25lcyBhcyBuZWNlc3Nhcnkgc28geW91IGRvIG5vdCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMgaWZcbiAqIHlvdSBhcmUgc2ltcGx5IHVzaW5nIHtAbGluayBuZ1RyYW5zY2x1ZGV9IHRvIGluamVjdCB0aGUgdHJhbnNjbHVzaW9uIGludG8geW91ciBkaXJlY3RpdmUuXG4gKlxuICpcbiAqICMjIyMgVHJhbnNjbHVzaW9uIFNjb3Blc1xuICpcbiAqIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBET00gZnJhZ21lbnQgdGhhdCBpcyBwcmUtYm91bmQgdG8gYSAqKnRyYW5zY2x1c2lvblxuICogc2NvcGUqKi4gVGhpcyBzY29wZSBpcyBzcGVjaWFsLCBpbiB0aGF0IGl0IGlzIGEgY2hpbGQgb2YgdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIChhbmQgc28gZ2V0cyBkZXN0cm95ZWRcbiAqIHdoZW4gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIGdldHMgZGVzdHJveWVkKSBidXQgaXQgaW5oZXJpdHMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHNjb3BlIGZyb20gd2hpY2ggaXRcbiAqIHdhcyB0YWtlbi5cbiAqXG4gKiBGb3IgZXhhbXBsZSBjb25zaWRlciBhIGRpcmVjdGl2ZSB0aGF0IHVzZXMgdHJhbnNjbHVzaW9uIGFuZCBpc29sYXRlZCBzY29wZS4gVGhlIERPTSBoaWVyYXJjaHkgbWlnaHQgbG9va1xuICogbGlrZSB0aGlzOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctYXBwPlxuICogICA8ZGl2IGlzb2xhdGU+XG4gKiAgICAgPGRpdiB0cmFuc2NsdXNpb24+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBUaGUgYCRwYXJlbnRgIHNjb3BlIGhpZXJhcmNoeSB3aWxsIGxvb2sgbGlrZSB0aGlzOlxuICpcbiAgIGBgYFxuICAgLSAkcm9vdFNjb3BlXG4gICAgIC0gaXNvbGF0ZVxuICAgICAgIC0gdHJhbnNjbHVzaW9uXG4gICBgYGBcbiAqXG4gKiBidXQgdGhlIHNjb3BlcyB3aWxsIGluaGVyaXQgcHJvdG90eXBpY2FsbHkgZnJvbSBkaWZmZXJlbnQgc2NvcGVzIHRvIHRoZWlyIGAkcGFyZW50YC5cbiAqXG4gICBgYGBcbiAgIC0gJHJvb3RTY29wZVxuICAgICAtIHRyYW5zY2x1c2lvblxuICAgLSBpc29sYXRlXG4gICBgYGBcbiAqXG4gKlxuICogIyMjIEF0dHJpYnV0ZXNcbiAqXG4gKiBUaGUge0BsaW5rIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIEF0dHJpYnV0ZXN9IG9iamVjdCAtIHBhc3NlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGVcbiAqIGBsaW5rKClgIG9yIGBjb21waWxlKClgIGZ1bmN0aW9ucy4gSXQgaGFzIGEgdmFyaWV0eSBvZiB1c2VzLlxuICpcbiAqICogKkFjY2Vzc2luZyBub3JtYWxpemVkIGF0dHJpYnV0ZSBuYW1lczoqIERpcmVjdGl2ZXMgbGlrZSAnbmdCaW5kJyBjYW4gYmUgZXhwcmVzc2VkIGluIG1hbnkgd2F5czpcbiAqICAgJ25nOmJpbmQnLCBgZGF0YS1uZy1iaW5kYCwgb3IgJ3gtbmctYmluZCcuIFRoZSBhdHRyaWJ1dGVzIG9iamVjdCBhbGxvd3MgZm9yIG5vcm1hbGl6ZWQgYWNjZXNzXG4gKiAgIHRvIHRoZSBhdHRyaWJ1dGVzLlxuICpcbiAqICogKkRpcmVjdGl2ZSBpbnRlci1jb21tdW5pY2F0aW9uOiogQWxsIGRpcmVjdGl2ZXMgc2hhcmUgdGhlIHNhbWUgaW5zdGFuY2Ugb2YgdGhlIGF0dHJpYnV0ZXNcbiAqICAgb2JqZWN0IHdoaWNoIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFzIGludGVyIGRpcmVjdGl2ZVxuICogICBjb21tdW5pY2F0aW9uLlxuICpcbiAqICogKlN1cHBvcnRzIGludGVycG9sYXRpb246KiBJbnRlcnBvbGF0aW9uIGF0dHJpYnV0ZXMgYXJlIGFzc2lnbmVkIHRvIHRoZSBhdHRyaWJ1dGUgb2JqZWN0XG4gKiAgIGFsbG93aW5nIG90aGVyIGRpcmVjdGl2ZXMgdG8gcmVhZCB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlLlxuICpcbiAqICogKk9ic2VydmluZyBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlczoqIFVzZSBgJG9ic2VydmVgIHRvIG9ic2VydmUgdGhlIHZhbHVlIGNoYW5nZXMgb2YgYXR0cmlidXRlc1xuICogICB0aGF0IGNvbnRhaW4gaW50ZXJwb2xhdGlvbiAoZS5nLiBgc3JjPVwie3tiYXJ9fVwiYCkuIE5vdCBvbmx5IGlzIHRoaXMgdmVyeSBlZmZpY2llbnQgYnV0IGl0J3MgYWxzb1xuICogICB0aGUgb25seSB3YXkgdG8gZWFzaWx5IGdldCB0aGUgYWN0dWFsIHZhbHVlIGJlY2F1c2UgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlIHRoZSBpbnRlcnBvbGF0aW9uXG4gKiAgIGhhc24ndCBiZWVuIGV2YWx1YXRlZCB5ZXQgYW5kIHNvIHRoZSB2YWx1ZSBpcyBhdCB0aGlzIHRpbWUgc2V0IHRvIGB1bmRlZmluZWRgLlxuICpcbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiBsaW5raW5nRm4oc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwpIHtcbiAqICAgLy8gZ2V0IHRoZSBhdHRyaWJ1dGUgdmFsdWVcbiAqICAgY29uc29sZS5sb2coYXR0cnMubmdNb2RlbCk7XG4gKlxuICogICAvLyBjaGFuZ2UgdGhlIGF0dHJpYnV0ZVxuICogICBhdHRycy4kc2V0KCduZ01vZGVsJywgJ25ldyB2YWx1ZScpO1xuICpcbiAqICAgLy8gb2JzZXJ2ZSBjaGFuZ2VzIHRvIGludGVycG9sYXRlZCBhdHRyaWJ1dGVcbiAqICAgYXR0cnMuJG9ic2VydmUoJ25nTW9kZWwnLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgIGNvbnNvbGUubG9nKCduZ01vZGVsIGhhcyBjaGFuZ2VkIHZhbHVlIHRvICcgKyB2YWx1ZSk7XG4gKiAgIH0pO1xuICogfVxuICogYGBgXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogVHlwaWNhbGx5IGRpcmVjdGl2ZXMgYXJlIHJlZ2lzdGVyZWQgd2l0aCBgbW9kdWxlLmRpcmVjdGl2ZWAuIFRoZSBleGFtcGxlIGJlbG93IGlzXG4gKiB0byBpbGx1c3RyYXRlIGhvdyBgJGNvbXBpbGVgIHdvcmtzLlxuICogPC9kaXY+XG4gKlxuIDxleGFtcGxlIG1vZHVsZT1cImNvbXBpbGVFeGFtcGxlXCIgbmFtZT1cImNvbXBpbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdjb21waWxlRXhhbXBsZScsIFtdLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgIC8vIGNvbmZpZ3VyZSBuZXcgJ2NvbXBpbGUnIGRpcmVjdGl2ZSBieSBwYXNzaW5nIGEgZGlyZWN0aXZlXG4gICAgICAgIC8vIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIGluamVjdHMgdGhlICckY29tcGlsZSdcbiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoJ2NvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgICAgICAgIC8vIGRpcmVjdGl2ZSBmYWN0b3J5IGNyZWF0ZXMgYSBsaW5rIGZ1bmN0aW9uXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgICBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gZm9yIGNoYW5nZXNcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGV2YWwoYXR0cnMuY29tcGlsZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gY2hhbmdlc1xuICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBpdCBpbnRvIHRoZSBjdXJyZW50IERPTVxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBjb21waWxlIHRoZSBuZXcgRE9NIGFuZCBsaW5rIGl0IHRvIHRoZSBjdXJyZW50XG4gICAgICAgICAgICAgICAgLy8gc2NvcGUuXG4gICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugb25seSBjb21waWxlIC5jaGlsZE5vZGVzIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBnZXQgaW50byBpbmZpbml0ZSBsb29wIGNvbXBpbGluZyBvdXJzZWx2ZXNcbiAgICAgICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY29udHJvbGxlcignR3JlZXRlckNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUubmFtZSA9ICdBbmd1bGFyJztcbiAgICAgICAgJHNjb3BlLmh0bWwgPSAnSGVsbG8ge3tuYW1lfX0nO1xuICAgICAgfV0pO1xuICAgIDwvc2NyaXB0PlxuICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdyZWV0ZXJDb250cm9sbGVyXCI+XG4gICAgICA8aW5wdXQgbmctbW9kZWw9XCJuYW1lXCI+IDxici8+XG4gICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJodG1sXCI+PC90ZXh0YXJlYT4gPGJyLz5cbiAgICAgIDxkaXYgY29tcGlsZT1cImh0bWxcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgaXQoJ3Nob3VsZCBhdXRvIGNvbXBpbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICB2YXIgdGV4dGFyZWEgPSAkKCd0ZXh0YXJlYScpO1xuICAgICAgIHZhciBvdXRwdXQgPSAkKCdkaXZbY29tcGlsZV0nKTtcbiAgICAgICAvLyBUaGUgaW5pdGlhbCBzdGF0ZSByZWFkcyAnSGVsbG8gQW5ndWxhcicuXG4gICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIEFuZ3VsYXInKTtcbiAgICAgICB0ZXh0YXJlYS5jbGVhcigpO1xuICAgICAgIHRleHRhcmVhLnNlbmRLZXlzKCd7e25hbWV9fSEnKTtcbiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9CZSgnQW5ndWxhciEnKTtcbiAgICAgfSk7XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBvciBIVE1MIHN0cmluZyB0byBjb21waWxlIGludG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGF2YWlsYWJsZSB0byBkaXJlY3RpdmVzIC0gREVQUkVDQVRFRC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiAqKk5vdGU6KiogUGFzc2luZyBhIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0byB0aGUgJGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXRcbiAqICAgZS5nLiB3aWxsIG5vdCB1c2UgdGhlIHJpZ2h0IG91dGVyIHNjb3BlLiBQbGVhc2UgcGFzcyB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiBhcyBhXG4gKiAgIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhQcmlvcml0eSBvbmx5IGFwcGx5IGRpcmVjdGl2ZXMgbG93ZXIgdGhhbiBnaXZlbiBwcmlvcml0eSAoT25seSBlZmZlY3RzIHRoZVxuICogICAgICAgICAgICAgICAgIHJvb3QgZWxlbWVudChzKSwgbm90IHRoZWlyIGNoaWxkcmVuKVxuICogQHJldHVybnMge2Z1bmN0aW9uKHNjb3BlLCBjbG9uZUF0dGFjaEZuPSwgb3B0aW9ucz0pfSBhIGxpbmsgZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBiaW5kIHRlbXBsYXRlXG4gKiAoYSBET00gZWxlbWVudC90cmVlKSB0byBhIHNjb3BlLiBXaGVyZTpcbiAqXG4gKiAgKiBgc2NvcGVgIC0gQSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gdG8gYmluZCB0by5cbiAqICAqIGBjbG9uZUF0dGFjaEZuYCAtIElmIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgbGluayBmdW5jdGlvbiB3aWxsIGNsb25lIHRoZVxuICogIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGVcbiAqICBjbG9uZWQgZWxlbWVudHMgdG8gdGhlIERPTSBkb2N1bWVudCBhdCB0aGUgYXBwcm9wcmlhdGUgcGxhY2UuIFRoZSBgY2xvbmVBdHRhY2hGbmAgaXNcbiAqICBjYWxsZWQgYXM6IDxici8+IGBjbG9uZUF0dGFjaEZuKGNsb25lZEVsZW1lbnQsIHNjb3BlKWAgd2hlcmU6XG4gKlxuICogICAgICAqIGBjbG9uZWRFbGVtZW50YCAtIGlzIGEgY2xvbmUgb2YgdGhlIG9yaWdpbmFsIGBlbGVtZW50YCBwYXNzZWQgaW50byB0aGUgY29tcGlsZXIuXG4gKiAgICAgICogYHNjb3BlYCAtIGlzIHRoZSBjdXJyZW50IHNjb3BlIHdpdGggd2hpY2ggdGhlIGxpbmtpbmcgZnVuY3Rpb24gaXMgd29ya2luZyB3aXRoLlxuICpcbiAqICAqIGBvcHRpb25zYCAtIEFuIG9wdGlvbmFsIG9iamVjdCBoYXNoIHdpdGggbGlua2luZyBvcHRpb25zLiBJZiBgb3B0aW9uc2AgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGZvbGxvd2luZ1xuICogIGtleXMgbWF5IGJlIHVzZWQgdG8gY29udHJvbCBsaW5raW5nIGJlaGF2aW9yOlxuICpcbiAqICAgICAgKiBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIC0gdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gbWFkZSBhdmFpbGFibGUgdG9cbiAqICAgICAgICBkaXJlY3RpdmVzOyBpZiBnaXZlbiwgaXQgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCB0byB0aGUgbGluayBmdW5jdGlvbnMgb2ZcbiAqICAgICAgICBkaXJlY3RpdmVzIGZvdW5kIGluIGBlbGVtZW50YCBkdXJpbmcgY29tcGlsYXRpb24uXG4gKiAgICAgICogYHRyYW5zY2x1ZGVDb250cm9sbGVyc2AgLSBhbiBvYmplY3QgaGFzaCB3aXRoIGtleXMgdGhhdCBtYXAgY29udHJvbGxlciBuYW1lc1xuICogICAgICAgIHRvIGEgaGFzaCB3aXRoIHRoZSBrZXkgYGluc3RhbmNlYCwgd2hpY2ggbWFwcyB0byB0aGUgY29udHJvbGxlciBpbnN0YW5jZTtcbiAqICAgICAgICBpZiBnaXZlbiwgaXQgd2lsbCBtYWtlIHRoZSBjb250cm9sbGVycyBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcyBvbiB0aGUgY29tcGlsZU5vZGU6XG4gKiAgICAgICAgYGBgXG4gKiAgICAgICAge1xuICogICAgICAgICAgcGFyZW50OiB7XG4gKiAgICAgICAgICAgIGluc3RhbmNlOiBwYXJlbnRDb250cm9sbGVySW5zdGFuY2VcbiAqICAgICAgICAgIH1cbiAqICAgICAgICB9XG4gKiAgICAgICAgYGBgXG4gKiAgICAgICogYGZ1dHVyZVBhcmVudEVsZW1lbnRgIC0gZGVmaW5lcyB0aGUgcGFyZW50IHRvIHdoaWNoIHRoZSBgY2xvbmVBdHRhY2hGbmAgd2lsbCBhZGRcbiAqICAgICAgICB0aGUgY2xvbmVkIGVsZW1lbnRzOyBvbmx5IG5lZWRlZCBmb3IgdHJhbnNjbHVkZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBjb250YWluIG5vbiBodG1sXG4gKiAgICAgICAgZWxlbWVudHMgKGUuZy4gU1ZHIGVsZW1lbnRzKS4gU2VlIGFsc28gdGhlIGRpcmVjdGl2ZS5jb250cm9sbGVyIHByb3BlcnR5LlxuICpcbiAqIENhbGxpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gcmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgdGVtcGxhdGUuIEl0IGlzIGVpdGhlciB0aGUgb3JpZ2luYWxcbiAqIGVsZW1lbnQgcGFzc2VkIGluLCBvciB0aGUgY2xvbmUgb2YgdGhlIGVsZW1lbnQgaWYgdGhlIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZC5cbiAqXG4gKiBBZnRlciBsaW5raW5nIHRoZSB2aWV3IGlzIG5vdCB1cGRhdGVkIHVudGlsIGFmdGVyIGEgY2FsbCB0byAkZGlnZXN0IHdoaWNoIHR5cGljYWxseSBpcyBkb25lIGJ5XG4gKiBBbmd1bGFyIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogSWYgeW91IG5lZWQgYWNjZXNzIHRvIHRoZSBib3VuZCB2aWV3LCB0aGVyZSBhcmUgdHdvIHdheXMgdG8gZG8gaXQ6XG4gKlxuICogLSBJZiB5b3UgYXJlIG5vdCBhc2tpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gdG8gY2xvbmUgdGhlIHRlbXBsYXRlLCBjcmVhdGUgdGhlIERPTSBlbGVtZW50KHMpXG4gKiAgIGJlZm9yZSB5b3Ugc2VuZCB0aGVtIHRvIHRoZSBjb21waWxlciBhbmQga2VlcCB0aGlzIHJlZmVyZW5jZSBhcm91bmQuXG4gKiAgIGBgYGpzXG4gKiAgICAgdmFyIGVsZW1lbnQgPSAkY29tcGlsZSgnPHA+e3t0b3RhbH19PC9wPicpKHNjb3BlKTtcbiAqICAgYGBgXG4gKlxuICogLSBpZiBvbiB0aGUgb3RoZXIgaGFuZCwgeW91IG5lZWQgdGhlIGVsZW1lbnQgdG8gYmUgY2xvbmVkLCB0aGUgdmlldyByZWZlcmVuY2UgZnJvbSB0aGUgb3JpZ2luYWxcbiAqICAgZXhhbXBsZSB3b3VsZCBub3QgcG9pbnQgdG8gdGhlIGNsb25lLCBidXQgcmF0aGVyIHRvIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSB0aGF0IHdhcyBjbG9uZWQuIEluXG4gKiAgIHRoaXMgY2FzZSwgeW91IGNhbiBhY2Nlc3MgdGhlIGNsb25lIHZpYSB0aGUgY2xvbmVBdHRhY2hGbjpcbiAqICAgYGBganNcbiAqICAgICB2YXIgdGVtcGxhdGVFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCc8cD57e3RvdGFsfX08L3A+JyksXG4gKiAgICAgICAgIHNjb3BlID0gLi4uLjtcbiAqXG4gKiAgICAgdmFyIGNsb25lZEVsZW1lbnQgPSAkY29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpKHNjb3BlLCBmdW5jdGlvbihjbG9uZWRFbGVtZW50LCBzY29wZSkge1xuICogICAgICAgLy9hdHRhY2ggdGhlIGNsb25lIHRvIERPTSBkb2N1bWVudCBhdCB0aGUgcmlnaHQgcGxhY2VcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgLy9ub3cgd2UgaGF2ZSByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBET00gdmlhIGBjbG9uZWRFbGVtZW50YFxuICogICBgYGBcbiAqXG4gKlxuICogRm9yIGluZm9ybWF0aW9uIG9uIGhvdyB0aGUgY29tcGlsZXIgd29ya3MsIHNlZSB0aGVcbiAqIHtAbGluayBndWlkZS9jb21waWxlciBBbmd1bGFyIEhUTUwgQ29tcGlsZXJ9IHNlY3Rpb24gb2YgdGhlIERldmVsb3BlciBHdWlkZS5cbiAqXG4gKiBAa25vd25Jc3N1ZVxuICpcbiAqICMjIyBEb3VibGUgQ29tcGlsYXRpb25cbiAqXG4gICBEb3VibGUgY29tcGlsYXRpb24gb2NjdXJzIHdoZW4gYW4gYWxyZWFkeSBjb21waWxlZCBwYXJ0IG9mIHRoZSBET00gZ2V0c1xuICAgY29tcGlsZWQgYWdhaW4uIFRoaXMgaXMgYW4gdW5kZXNpcmVkIGVmZmVjdCBhbmQgY2FuIGxlYWQgdG8gbWlzYmVoYXZpbmcgZGlyZWN0aXZlcywgcGVyZm9ybWFuY2UgaXNzdWVzLFxuICAgYW5kIG1lbW9yeSBsZWFrcy4gUmVmZXIgdG8gdGhlIENvbXBpbGVyIEd1aWRlIHtAbGluayBndWlkZS9jb21waWxlciNkb3VibGUtY29tcGlsYXRpb24tYW5kLWhvdy10by1hdm9pZC1pdFxuICAgc2VjdGlvbiBvbiBkb3VibGUgY29tcGlsYXRpb259IGZvciBhbiBpbi1kZXB0aCBleHBsYW5hdGlvbiBhbmQgd2F5cyB0byBhdm9pZCBpdC5cbiAqXG4gKi9cblxudmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG5mdW5jdGlvbiBVTklOSVRJQUxJWkVEX1ZBTFVFKCkge31cbnZhciBfVU5JTklUSUFMSVpFRF9WQUxVRSA9IG5ldyBVTklOSVRJQUxJWkVEX1ZBTFVFKCk7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKi9cbiRDb21waWxlUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnLCAnJCRzYW5pdGl6ZVVyaVByb3ZpZGVyJ107XG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICRDb21waWxlUHJvdmlkZXIoJHByb3ZpZGUsICQkc2FuaXRpemVVcmlQcm92aWRlcikge1xuICB2YXIgaGFzRGlyZWN0aXZlcyA9IHt9LFxuICAgICAgU3VmZml4ID0gJ0RpcmVjdGl2ZScsXG4gICAgICBDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAgPSAvXlxccypkaXJlY3RpdmU6XFxzKihbXFx3LV0rKVxccysoLiopJC8sXG4gICAgICBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQID0gLygoW1xcdy1dKykoPzo6KFteO10rKSk/Oz8pLyxcbiAgICAgIEFMTF9PUl9OT1RISU5HX0FUVFJTID0gbWFrZU1hcCgnbmdTcmMsbmdTcmNzZXQsc3JjLHNyY3NldCcpLFxuICAgICAgUkVRVUlSRV9QUkVGSVhfUkVHRVhQID0gL14oPzooXFxeXFxePyk/KFxcPyk/KFxcXlxcXj8pPyk/LztcblxuICAvLyBSZWY6IGh0dHA6Ly9kZXZlbG9wZXJzLndoYXR3Zy5vcmcvd2ViYXBwYXBpcy5odG1sI2V2ZW50LWhhbmRsZXItaWRsLWF0dHJpYnV0ZXNcbiAgLy8gVGhlIGFzc3VtcHRpb24gaXMgdGhhdCBmdXR1cmUgRE9NIGV2ZW50IGF0dHJpYnV0ZSBuYW1lcyB3aWxsIGJlZ2luIHdpdGhcbiAgLy8gJ29uJyBhbmQgYmUgY29tcG9zZWQgb2Ygb25seSBFbmdsaXNoIGxldHRlcnMuXG4gIHZhciBFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQID0gL14ob25bYS16XSt8Zm9ybWFjdGlvbikkLztcbiAgdmFyIGJpbmRpbmdDYWNoZSA9IGNyZWF0ZU1hcCgpO1xuXG4gIGZ1bmN0aW9uIHBhcnNlSXNvbGF0ZUJpbmRpbmdzKHNjb3BlLCBkaXJlY3RpdmVOYW1lLCBpc0NvbnRyb2xsZXIpIHtcbiAgICB2YXIgTE9DQUxfUkVHRVhQID0gL15cXHMqKFtAJjxdfD0oXFwqPykpKFxcPz8pXFxzKihbXFx3JF0qKVxccyokLztcblxuICAgIHZhciBiaW5kaW5ncyA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgZm9yRWFjaChzY29wZSwgZnVuY3Rpb24oZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7XG4gICAgICBpZiAoZGVmaW5pdGlvbiBpbiBiaW5kaW5nQ2FjaGUpIHtcbiAgICAgICAgYmluZGluZ3Nbc2NvcGVOYW1lXSA9IGJpbmRpbmdDYWNoZVtkZWZpbml0aW9uXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdGlvbi5tYXRjaChMT0NBTF9SRUdFWFApO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdpc2NwJyxcbiAgICAgICAgICAgICdJbnZhbGlkIHszfSBmb3IgZGlyZWN0aXZlIFxcJ3swfVxcJy4nICtcbiAgICAgICAgICAgICcgRGVmaW5pdGlvbjogey4uLiB7MX06IFxcJ3syfVxcJyAuLi59JyxcbiAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsIHNjb3BlTmFtZSwgZGVmaW5pdGlvbixcbiAgICAgICAgICAgIChpc0NvbnRyb2xsZXIgPyAnY29udHJvbGxlciBiaW5kaW5ncyBkZWZpbml0aW9uJyA6XG4gICAgICAgICAgICAnaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uJykpO1xuICAgICAgfVxuXG4gICAgICBiaW5kaW5nc1tzY29wZU5hbWVdID0ge1xuICAgICAgICBtb2RlOiBtYXRjaFsxXVswXSxcbiAgICAgICAgY29sbGVjdGlvbjogbWF0Y2hbMl0gPT09ICcqJyxcbiAgICAgICAgb3B0aW9uYWw6IG1hdGNoWzNdID09PSAnPycsXG4gICAgICAgIGF0dHJOYW1lOiBtYXRjaFs0XSB8fCBzY29wZU5hbWVcbiAgICAgIH07XG4gICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgYmluZGluZ0NhY2hlW2RlZmluaXRpb25dID0gYmluZGluZ3Nbc2NvcGVOYW1lXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGlyZWN0aXZlQmluZGluZ3MoZGlyZWN0aXZlLCBkaXJlY3RpdmVOYW1lKSB7XG4gICAgdmFyIGJpbmRpbmdzID0ge1xuICAgICAgaXNvbGF0ZVNjb3BlOiBudWxsLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogbnVsbFxuICAgIH07XG4gICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZS5zY29wZSkpIHtcbiAgICAgIGlmIChkaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlciA9PT0gdHJ1ZSkge1xuICAgICAgICBiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyID0gcGFyc2VJc29sYXRlQmluZGluZ3MoZGlyZWN0aXZlLnNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgdHJ1ZSk7XG4gICAgICAgIGJpbmRpbmdzLmlzb2xhdGVTY29wZSA9IHt9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmluZGluZ3MuaXNvbGF0ZVNjb3BlID0gcGFyc2VJc29sYXRlQmluZGluZ3MoZGlyZWN0aXZlLnNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVOYW1lLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc09iamVjdChkaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlcikpIHtcbiAgICAgIGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXIgPVxuICAgICAgICAgIHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyLCBkaXJlY3RpdmVOYW1lLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXIgJiYgIWRpcmVjdGl2ZS5jb250cm9sbGVyKSB7XG4gICAgICAvLyBUaGVyZSBpcyBubyBjb250cm9sbGVyXG4gICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9jdHJsJyxcbiAgICAgICAgICAgICdDYW5ub3QgYmluZCB0byBjb250cm9sbGVyIHdpdGhvdXQgZGlyZWN0aXZlIFxcJ3swfVxcJ3MgY29udHJvbGxlci4nLFxuICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZShuYW1lKSB7XG4gICAgdmFyIGxldHRlciA9IG5hbWUuY2hhckF0KDApO1xuICAgIGlmICghbGV0dGVyIHx8IGxldHRlciAhPT0gbG93ZXJjYXNlKGxldHRlcikpIHtcbiAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdiYWRkaXInLCAnRGlyZWN0aXZlL0NvbXBvbmVudCBuYW1lIFxcJ3swfVxcJyBpcyBpbnZhbGlkLiBUaGUgZmlyc3QgY2hhcmFjdGVyIG11c3QgYmUgYSBsb3dlcmNhc2UgbGV0dGVyJywgbmFtZSk7XG4gICAgfVxuICAgIGlmIChuYW1lICE9PSBuYW1lLnRyaW0oKSkge1xuICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2JhZGRpcicsXG4gICAgICAgICAgICAnRGlyZWN0aXZlL0NvbXBvbmVudCBuYW1lIFxcJ3swfVxcJyBpcyBpbnZhbGlkLiBUaGUgbmFtZSBzaG91bGQgbm90IGNvbnRhaW4gbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlcycsXG4gICAgICAgICAgICBuYW1lKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXREaXJlY3RpdmVSZXF1aXJlKGRpcmVjdGl2ZSkge1xuICAgIHZhciByZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmUgfHwgKGRpcmVjdGl2ZS5jb250cm9sbGVyICYmIGRpcmVjdGl2ZS5uYW1lKTtcblxuICAgIGlmICghaXNBcnJheShyZXF1aXJlKSAmJiBpc09iamVjdChyZXF1aXJlKSkge1xuICAgICAgZm9yRWFjaChyZXF1aXJlLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHZhbHVlLm1hdGNoKFJFUVVJUkVfUFJFRklYX1JFR0VYUCk7XG4gICAgICAgIHZhciBuYW1lID0gdmFsdWUuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgIGlmICghbmFtZSkgcmVxdWlyZVtrZXldID0gbWF0Y2hbMF0gKyBrZXk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWlyZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERpcmVjdGl2ZVJlc3RyaWN0KHJlc3RyaWN0LCBuYW1lKSB7XG4gICAgaWYgKHJlc3RyaWN0ICYmICEoaXNTdHJpbmcocmVzdHJpY3QpICYmIC9bRUFDTV0vLnRlc3QocmVzdHJpY3QpKSkge1xuICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2JhZHJlc3RyaWN0JyxcbiAgICAgICAgICAnUmVzdHJpY3QgcHJvcGVydHkgXFwnezB9XFwnIG9mIGRpcmVjdGl2ZSBcXCd7MX1cXCcgaXMgaW52YWxpZCcsXG4gICAgICAgICAgcmVzdHJpY3QsXG4gICAgICAgICAgbmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3RyaWN0IHx8ICdFQSc7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZVxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSBuZXcgZGlyZWN0aXZlIHdpdGggdGhlIGNvbXBpbGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgTmFtZSBvZiB0aGUgZGlyZWN0aXZlIGluIGNhbWVsLWNhc2UgKGkuZS4gPGNvZGU+bmdCaW5kPC9jb2RlPiB3aGljaFxuICAgKiAgICB3aWxsIG1hdGNoIGFzIDxjb2RlPm5nLWJpbmQ8L2NvZGU+KSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGVcbiAgICogICAgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGRpcmVjdGl2ZUZhY3RvcnkgQW4gaW5qZWN0YWJsZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbi4gU2VlIHRoZVxuICAgKiAgICB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZSBndWlkZX0gYW5kIHRoZSB7QGxpbmsgJGNvbXBpbGUgY29tcGlsZSBBUEl9IGZvciBtb3JlIGluZm8uXG4gICAqIEByZXR1cm5zIHtuZy4kY29tcGlsZVByb3ZpZGVyfSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICovXG4gIHRoaXMuZGlyZWN0aXZlID0gZnVuY3Rpb24gcmVnaXN0ZXJEaXJlY3RpdmUobmFtZSwgZGlyZWN0aXZlRmFjdG9yeSkge1xuICAgIGFzc2VydEFyZyhuYW1lLCAnbmFtZScpO1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdkaXJlY3RpdmUnKTtcbiAgICBpZiAoaXNTdHJpbmcobmFtZSkpIHtcbiAgICAgIGFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZShuYW1lKTtcbiAgICAgIGFzc2VydEFyZyhkaXJlY3RpdmVGYWN0b3J5LCAnZGlyZWN0aXZlRmFjdG9yeScpO1xuICAgICAgaWYgKCFoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0gPSBbXTtcbiAgICAgICAgJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgU3VmZml4LCBbJyRpbmplY3RvcicsICckZXhjZXB0aW9uSGFuZGxlcicsXG4gICAgICAgICAgZnVuY3Rpb24oJGluamVjdG9yLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvckVhY2goaGFzRGlyZWN0aXZlc1tuYW1lXSwgZnVuY3Rpb24oZGlyZWN0aXZlRmFjdG9yeSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gJGluamVjdG9yLmludm9rZShkaXJlY3RpdmVGYWN0b3J5KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmUgPSB7IGNvbXBpbGU6IHZhbHVlRm4oZGlyZWN0aXZlKSB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRpcmVjdGl2ZS5jb21waWxlICYmIGRpcmVjdGl2ZS5saW5rKSB7XG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmUuY29tcGlsZSA9IHZhbHVlRm4oZGlyZWN0aXZlLmxpbmspO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHkgfHwgMDtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUuaW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUubmFtZSA9IGRpcmVjdGl2ZS5uYW1lIHx8IG5hbWU7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlcXVpcmUgPSBnZXREaXJlY3RpdmVSZXF1aXJlKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZ2V0RGlyZWN0aXZlUmVzdHJpY3QoZGlyZWN0aXZlLnJlc3RyaWN0LCBuYW1lKTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUuJCRtb2R1bGVOYW1lID0gZGlyZWN0aXZlRmFjdG9yeS4kJG1vZHVsZU5hbWU7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlcztcbiAgICAgICAgICB9XSk7XG4gICAgICB9XG4gICAgICBoYXNEaXJlY3RpdmVzW25hbWVdLnB1c2goZGlyZWN0aXZlRmFjdG9yeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvckVhY2gobmFtZSwgcmV2ZXJzZVBhcmFtcyhyZWdpc3RlckRpcmVjdGl2ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2NvbXBvbmVudFxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgaW4gY2FtZWxDYXNlIChpLmUuIGBteUNvbXBgIHdoaWNoIHdpbGwgbWF0Y2ggYDxteS1jb21wPmApLFxuICAgKiAgICBvciBhbiBvYmplY3QgbWFwIG9mIGNvbXBvbmVudHMgd2hlcmUgdGhlIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uIG9iamVjdHMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIENvbXBvbmVudCBkZWZpbml0aW9uIG9iamVjdCAoYSBzaW1wbGlmaWVkXG4gICAqICAgIHtAbGluayBuZy4kY29tcGlsZSNkaXJlY3RpdmUtZGVmaW5pdGlvbi1vYmplY3QgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0fSksXG4gICAqICAgIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIChhbGwgb3B0aW9uYWwpOlxuICAgKlxuICAgKiAgICAtIGBjb250cm9sbGVyYCDigJMgYHsoc3RyaW5nfGZ1bmN0aW9uKCk9fWAg4oCTIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmVcbiAgICogICAgICBhc3NvY2lhdGVkIHdpdGggbmV3bHkgY3JlYXRlZCBzY29wZSBvciB0aGUgbmFtZSBvZiBhIHtAbGluayBuZy4kY29tcGlsZSMtY29udHJvbGxlci1cbiAgICogICAgICByZWdpc3RlcmVkIGNvbnRyb2xsZXJ9IGlmIHBhc3NlZCBhcyBhIHN0cmluZy4gQW4gZW1wdHkgYG5vb3BgIGZ1bmN0aW9uIGJ5IGRlZmF1bHQuXG4gICAqICAgIC0gYGNvbnRyb2xsZXJBc2Ag4oCTIGB7c3RyaW5nPX1gIOKAkyBpZGVudGlmaWVyIG5hbWUgZm9yIHRvIHJlZmVyZW5jZSB0aGUgY29udHJvbGxlciBpbiB0aGUgY29tcG9uZW50J3Mgc2NvcGUuXG4gICAqICAgICAgSWYgcHJlc2VudCwgdGhlIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgdG8gc2NvcGUgdW5kZXIgdGhlIGBjb250cm9sbGVyQXNgIG5hbWUuXG4gICAqICAgICAgSWYgbm90IHByZXNlbnQsIHRoaXMgd2lsbCBkZWZhdWx0IHRvIGJlIGAkY3RybGAuXG4gICAqICAgIC0gYHRlbXBsYXRlYCDigJMgYHtzdHJpbmc9fGZ1bmN0aW9uKCk9fWAg4oCTIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgb3IgYSBmdW5jdGlvbiB0aGF0XG4gICAqICAgICAgcmV0dXJucyBhbiBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nIHdoaWNoIHNob3VsZCBiZSB1c2VkIGFzIHRoZSBjb250ZW50cyBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICogICAgICBFbXB0eSBzdHJpbmcgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogICAgICBJZiBgdGVtcGxhdGVgIGlzIGEgZnVuY3Rpb24sIHRoZW4gaXQgaXMge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3RlZH0gd2l0aFxuICAgKiAgICAgIHRoZSBmb2xsb3dpbmcgbG9jYWxzOlxuICAgKlxuICAgKiAgICAgIC0gYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICAgKiAgICAgIC0gYCRhdHRyc2AgLSBDdXJyZW50IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGUgZWxlbWVudFxuICAgKlxuICAgKiAgICAtIGB0ZW1wbGF0ZVVybGAg4oCTIGB7c3RyaW5nPXxmdW5jdGlvbigpPX1gIOKAkyBwYXRoIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHBhdGggdG8gYW4gaHRtbFxuICAgKiAgICAgIHRlbXBsYXRlIHRoYXQgc2hvdWxkIGJlIHVzZWQgIGFzIHRoZSBjb250ZW50cyBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogICAgICBJZiBgdGVtcGxhdGVVcmxgIGlzIGEgZnVuY3Rpb24sIHRoZW4gaXQgaXMge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3RlZH0gd2l0aFxuICAgKiAgICAgIHRoZSBmb2xsb3dpbmcgbG9jYWxzOlxuICAgKlxuICAgKiAgICAgIC0gYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICAgKiAgICAgIC0gYCRhdHRyc2AgLSBDdXJyZW50IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGUgZWxlbWVudFxuICAgKlxuICAgKiAgICAtIGBiaW5kaW5nc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBkZWZpbmVzIGJpbmRpbmdzIGJldHdlZW4gRE9NIGF0dHJpYnV0ZXMgYW5kIGNvbXBvbmVudCBwcm9wZXJ0aWVzLlxuICAgKiAgICAgIENvbXBvbmVudCBwcm9wZXJ0aWVzIGFyZSBhbHdheXMgYm91bmQgdG8gdGhlIGNvbXBvbmVudCBjb250cm9sbGVyIGFuZCBub3QgdG8gdGhlIHNjb3BlLlxuICAgKiAgICAgIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLWJpbmR0b2NvbnRyb2xsZXItIGBiaW5kVG9Db250cm9sbGVyYH0uXG4gICAqICAgIC0gYHRyYW5zY2x1ZGVgIOKAkyBge2Jvb2xlYW49fWAg4oCTIHdoZXRoZXIge0BsaW5rICRjb21waWxlI3RyYW5zY2x1c2lvbiBjb250ZW50IHRyYW5zY2x1c2lvbn0gaXMgZW5hYmxlZC5cbiAgICogICAgICBEaXNhYmxlZCBieSBkZWZhdWx0LlxuICAgKiAgICAtIGByZXF1aXJlYCAtIGB7T2JqZWN0PHN0cmluZywgc3RyaW5nPj19YCAtIHJlcXVpcmVzIHRoZSBjb250cm9sbGVycyBvZiBvdGhlciBkaXJlY3RpdmVzIGFuZCBiaW5kcyB0aGVtIHRvXG4gICAqICAgICAgdGhpcyBjb21wb25lbnQncyBjb250cm9sbGVyLiBUaGUgb2JqZWN0IGtleXMgc3BlY2lmeSB0aGUgcHJvcGVydHkgbmFtZXMgdW5kZXIgd2hpY2ggdGhlIHJlcXVpcmVkXG4gICAqICAgICAgY29udHJvbGxlcnMgKG9iamVjdCB2YWx1ZXMpIHdpbGwgYmUgYm91bmQuIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLXJlcXVpcmUtIGByZXF1aXJlYH0uXG4gICAqICAgIC0gYCQuLi5gIOKAkyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYXR0YWNoIHRvIHRoZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbiBhbmQgdGhlIGNvbnRyb2xsZXJcbiAgICogICAgICBjb25zdHJ1Y3RvciBmdW5jdGlvbi4gKFRoaXMgaXMgdXNlZCBieSB0aGUgY29tcG9uZW50IHJvdXRlciB0byBhbm5vdGF0ZSlcbiAgICpcbiAgICogQHJldHVybnMge25nLiRjb21waWxlUHJvdmlkZXJ9IHRoZSBjb21waWxlIHByb3ZpZGVyIGl0c2VsZiwgZm9yIGNoYWluaW5nIG9mIGZ1bmN0aW9uIGNhbGxzLlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSAqKmNvbXBvbmVudCBkZWZpbml0aW9uKiogd2l0aCB0aGUgY29tcGlsZXIuIFRoaXMgaXMgYSBzaG9ydGhhbmQgZm9yIHJlZ2lzdGVyaW5nIGEgc3BlY2lhbFxuICAgKiB0eXBlIG9mIGRpcmVjdGl2ZSwgd2hpY2ggcmVwcmVzZW50cyBhIHNlbGYtY29udGFpbmVkIFVJIGNvbXBvbmVudCBpbiB5b3VyIGFwcGxpY2F0aW9uLiBTdWNoIGNvbXBvbmVudHNcbiAgICogYXJlIGFsd2F5cyBpc29sYXRlZCAoaS5lLiBgc2NvcGU6IHt9YCkgYW5kIGFyZSBhbHdheXMgcmVzdHJpY3RlZCB0byBlbGVtZW50cyAoaS5lLiBgcmVzdHJpY3Q6ICdFJ2ApLlxuICAgKlxuICAgKiBDb21wb25lbnQgZGVmaW5pdGlvbnMgYXJlIHZlcnkgc2ltcGxlIGFuZCBkbyBub3QgcmVxdWlyZSBhcyBtdWNoIGNvbmZpZ3VyYXRpb24gYXMgZGVmaW5pbmcgZ2VuZXJhbFxuICAgKiBkaXJlY3RpdmVzLiBDb21wb25lbnQgZGVmaW5pdGlvbnMgdXN1YWxseSBjb25zaXN0IG9ubHkgb2YgYSB0ZW1wbGF0ZSBhbmQgYSBjb250cm9sbGVyIGJhY2tpbmcgaXQuXG4gICAqXG4gICAqIEluIG9yZGVyIHRvIG1ha2UgdGhlIGRlZmluaXRpb24gZWFzaWVyLCBjb21wb25lbnRzIGVuZm9yY2UgYmVzdCBwcmFjdGljZXMgbGlrZSB1c2Ugb2YgYGNvbnRyb2xsZXJBc2AsXG4gICAqIGBiaW5kVG9Db250cm9sbGVyYC4gVGhleSBhbHdheXMgaGF2ZSAqKmlzb2xhdGUgc2NvcGUqKiBhbmQgYXJlIHJlc3RyaWN0ZWQgdG8gZWxlbWVudHMuXG4gICAqXG4gICAqIEhlcmUgYXJlIGEgZmV3IGV4YW1wbGVzIG9mIGhvdyB5b3Ugd291bGQgdXN1YWxseSBkZWZpbmUgY29tcG9uZW50czpcbiAgICpcbiAgICogYGBganNcbiAgICogICB2YXIgbXlNb2QgPSBhbmd1bGFyLm1vZHVsZSguLi4pO1xuICAgKiAgIG15TW9kLmNvbXBvbmVudCgnbXlDb21wJywge1xuICAgKiAgICAgdGVtcGxhdGU6ICc8ZGl2Pk15IG5hbWUgaXMge3skY3RybC5uYW1lfX08L2Rpdj4nLFxuICAgKiAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIHRoaXMubmFtZSA9ICdzaGFoYXInO1xuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiAgIG15TW9kLmNvbXBvbmVudCgnbXlDb21wJywge1xuICAgKiAgICAgdGVtcGxhdGU6ICc8ZGl2Pk15IG5hbWUgaXMge3skY3RybC5uYW1lfX08L2Rpdj4nLFxuICAgKiAgICAgYmluZGluZ3M6IHtuYW1lOiAnQCd9XG4gICAqICAgfSk7XG4gICAqXG4gICAqICAgbXlNb2QuY29tcG9uZW50KCdteUNvbXAnLCB7XG4gICAqICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL215LWNvbXAuaHRtbCcsXG4gICAqICAgICBjb250cm9sbGVyOiAnTXlDdHJsJyxcbiAgICogICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxuICAgKiAgICAgYmluZGluZ3M6IHtuYW1lOiAnQCd9XG4gICAqICAgfSk7XG4gICAqXG4gICAqIGBgYFxuICAgKiBGb3IgbW9yZSBleGFtcGxlcywgYW5kIGFuIGluLWRlcHRoIGd1aWRlLCBzZWUgdGhlIHtAbGluayBndWlkZS9jb21wb25lbnQgY29tcG9uZW50IGd1aWRlfS5cbiAgICpcbiAgICogPGJyIC8+XG4gICAqIFNlZSBhbHNvIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS5cbiAgICovXG4gIHRoaXMuY29tcG9uZW50ID0gZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQobmFtZSwgb3B0aW9ucykge1xuICAgIGlmICghaXNTdHJpbmcobmFtZSkpIHtcbiAgICAgIGZvckVhY2gobmFtZSwgcmV2ZXJzZVBhcmFtcyhiaW5kKHRoaXMsIHJlZ2lzdGVyQ29tcG9uZW50KSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRyb2xsZXIgPSBvcHRpb25zLmNvbnRyb2xsZXIgfHwgZnVuY3Rpb24oKSB7fTtcblxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoJGluamVjdG9yKSB7XG4gICAgICBmdW5jdGlvbiBtYWtlSW5qZWN0YWJsZShmbikge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihmbikgfHwgaXNBcnJheShmbikpIHtcbiAgICAgICAgICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgICAgICAgIHJldHVybiAkaW5qZWN0b3IuaW52b2tlKGZuLCB0aGlzLCB7JGVsZW1lbnQ6IHRFbGVtZW50LCAkYXR0cnM6IHRBdHRyc30pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZW1wbGF0ZSA9ICghb3B0aW9ucy50ZW1wbGF0ZSAmJiAhb3B0aW9ucy50ZW1wbGF0ZVVybCA/ICcnIDogb3B0aW9ucy50ZW1wbGF0ZSk7XG4gICAgICB2YXIgZGRvID0ge1xuICAgICAgICBjb250cm9sbGVyOiBjb250cm9sbGVyLFxuICAgICAgICBjb250cm9sbGVyQXM6IGlkZW50aWZpZXJGb3JDb250cm9sbGVyKG9wdGlvbnMuY29udHJvbGxlcikgfHwgb3B0aW9ucy5jb250cm9sbGVyQXMgfHwgJyRjdHJsJyxcbiAgICAgICAgdGVtcGxhdGU6IG1ha2VJbmplY3RhYmxlKHRlbXBsYXRlKSxcbiAgICAgICAgdGVtcGxhdGVVcmw6IG1ha2VJbmplY3RhYmxlKG9wdGlvbnMudGVtcGxhdGVVcmwpLFxuICAgICAgICB0cmFuc2NsdWRlOiBvcHRpb25zLnRyYW5zY2x1ZGUsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjogb3B0aW9ucy5iaW5kaW5ncyB8fCB7fSxcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgcmVxdWlyZTogb3B0aW9ucy5yZXF1aXJlXG4gICAgICB9O1xuXG4gICAgICAvLyBDb3B5IGFubm90YXRpb25zIChzdGFydGluZyB3aXRoICQpIG92ZXIgdG8gdGhlIERET1xuICAgICAgZm9yRWFjaChvcHRpb25zLCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSA9PT0gJyQnKSBkZG9ba2V5XSA9IHZhbDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGRvO1xuICAgIH1cblxuICAgIC8vIFRPRE8ocGV0ZSkgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgYGZvckVhY2hgIGJlZm9yZSB3ZSByZWxlYXNlIDEuNi4wXG4gICAgLy8gVGhlIGNvbXBvbmVudC1yb3V0ZXJAMC4yLjAgbG9va3MgZm9yIHRoZSBhbm5vdGF0aW9ucyBvbiB0aGUgY29udHJvbGxlciBjb25zdHJ1Y3RvclxuICAgIC8vIE5vdGhpbmcgaW4gQW5ndWxhciBsb29rcyBmb3IgYW5ub3RhdGlvbnMgb24gdGhlIGZhY3RvcnkgZnVuY3Rpb24gYnV0IHdlIGNhbid0IHJlbW92ZVxuICAgIC8vIGl0IGZyb20gMS41LnggeWV0LlxuXG4gICAgLy8gQ29weSBhbnkgYW5ub3RhdGlvbiBwcm9wZXJ0aWVzIChzdGFydGluZyB3aXRoICQpIG92ZXIgdG8gdGhlIGZhY3RvcnkgYW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb25zXG4gICAgLy8gVGhlc2UgY291bGQgYmUgdXNlZCBieSBsaWJyYXJpZXMgc3VjaCBhcyB0aGUgbmV3IGNvbXBvbmVudCByb3V0ZXJcbiAgICBmb3JFYWNoKG9wdGlvbnMsIGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gICAgICBpZiAoa2V5LmNoYXJBdCgwKSA9PT0gJyQnKSB7XG4gICAgICAgIGZhY3Rvcnlba2V5XSA9IHZhbDtcbiAgICAgICAgLy8gRG9uJ3QgdHJ5IHRvIGNvcHkgb3ZlciBhbm5vdGF0aW9ucyB0byBuYW1lZCBjb250cm9sbGVyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXIpKSBjb250cm9sbGVyW2tleV0gPSB2YWw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmYWN0b3J5LiRpbmplY3QgPSBbJyRpbmplY3RvciddO1xuXG4gICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlKG5hbWUsIGZhY3RvcnkpO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudGluZyBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCgpO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChyZWdleHApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWRcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gZW5hYmxlZCB1cGRhdGUgdGhlIGRlYnVnSW5mb0VuYWJsZWQgc3RhdGUgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSBqdXN0IHJldHVybiB0aGVcbiAgICogY3VycmVudCBkZWJ1Z0luZm9FbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHZhcmlvdXMgZGVidWcgcnVudGltZSBpbmZvcm1hdGlvbiBpbiB0aGUgY29tcGlsZXIgc3VjaCBhcyBhZGRpbmdcbiAgICogYmluZGluZyBpbmZvcm1hdGlvbiBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgc2NvcGUgb24gdG8gRE9NIGVsZW1lbnRzLlxuICAgKiBJZiBlbmFibGVkLCB0aGUgY29tcGlsZXIgd2lsbCBhZGQgdGhlIGZvbGxvd2luZyB0byBET00gZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gYm91bmQgdG8gdGhlIHNjb3BlXG4gICAqICogYG5nLWJpbmRpbmdgIENTUyBjbGFzc1xuICAgKiAqIGAkYmluZGluZ2AgZGF0YSBwcm9wZXJ0eSBjb250YWluaW5nIGFuIGFycmF5IG9mIHRoZSBiaW5kaW5nIGV4cHJlc3Npb25zXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoaXMgaW4gcHJvZHVjdGlvbiBmb3IgYSBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBib29zdC4gU2VlXG4gICAqIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERpc2FibGluZyBEZWJ1ZyBEYXRhfSBmb3IgbW9yZS5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIHZhciBkZWJ1Z0luZm9FbmFibGVkID0gdHJ1ZTtcbiAgdGhpcy5kZWJ1Z0luZm9FbmFibGVkID0gZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIGlmIChpc0RlZmluZWQoZW5hYmxlZCkpIHtcbiAgICAgIGRlYnVnSW5mb0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBkZWJ1Z0luZm9FbmFibGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI3ByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHVwZGF0ZSB0aGUgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkIHN0YXRlIGlmIHByb3ZpZGVkLCBvdGhlcndpc2UganVzdCByZXR1cm4gdGhlXG4gICAqIGN1cnJlbnQgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHdoZXRoZXIgZGlyZWN0aXZlIGNvbnRyb2xsZXJzIGFyZSBhc3NpZ25lZCBiaW5kaW5ncyBiZWZvcmVcbiAgICogY2FsbGluZyB0aGUgY29udHJvbGxlcidzIGNvbnN0cnVjdG9yLlxuICAgKiBJZiBlbmFibGVkICh0cnVlKSwgdGhlIGNvbXBpbGVyIGFzc2lnbnMgdGhlIHZhbHVlIG9mIGVhY2ggb2YgdGhlIGJpbmRpbmdzIHRvIHRoZVxuICAgKiBwcm9wZXJ0aWVzIG9mIHRoZSBjb250cm9sbGVyIG9iamVjdCBiZWZvcmUgdGhlIGNvbnN0cnVjdG9yIG9mIHRoaXMgb2JqZWN0IGlzIGNhbGxlZC5cbiAgICpcbiAgICogSWYgZGlzYWJsZWQgKGZhbHNlKSwgdGhlIGNvbXBpbGVyIGNhbGxzIHRoZSBjb25zdHJ1Y3RvciBmaXJzdCBiZWZvcmUgYXNzaWduaW5nIGJpbmRpbmdzLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogc2luY2VWZXJzaW9uPVwiMS42LjBcIlxuICAgKiByZW1vdmVWZXJzaW9uPVwiMS43LjBcIlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBhbmQgdGhlIG9wdGlvbiB0byBhc3NpZ24gdGhlIGJpbmRpbmdzIGJlZm9yZSBjYWxsaW5nIHRoZSBjb250cm9sbGVyJ3MgY29uc3RydWN0b3JcbiAgICogd2lsbCBiZSByZW1vdmVkIGluIHYxLjcuMC5cbiAgICovXG4gIHZhciBwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQgPSBmYWxzZTtcbiAgdGhpcy5wcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQgPSBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZChlbmFibGVkKSkge1xuICAgICAgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkID0gZW5hYmxlZDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gcHJlQXNzaWduQmluZGluZ3NFbmFibGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI3N0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHVwZGF0ZSB0aGUgc3RyaWN0Q29tcG9uZW50QmluZGluZ3NFbmFibGVkIHN0YXRlIGlmIHByb3ZpZGVkLCBvdGhlcndpc2UganVzdCByZXR1cm4gdGhlXG4gICAqIGN1cnJlbnQgc3RyaWN0Q29tcG9uZW50QmluZGluZ3NFbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHN0cmljdCBjb21wb25lbnQgYmluZGluZ3MgY2hlY2suIElmIGVuYWJsZWQsIHRoZSBjb21waWxlciB3aWxsIGVuZm9yY2UgdGhhdFxuICAgKiBmb3IgYWxsIGJpbmRpbmdzIG9mIGEgY29tcG9uZW50IHRoYXQgYXJlIG5vdCBzZXQgYXMgb3B0aW9uYWwgd2l0aCBgP2AsIGFuIGF0dHJpYnV0ZSBuZWVkcyB0byBiZSBwcm92aWRlZFxuICAgKiBvbiB0aGUgY29tcG9uZW50J3MgSFRNTCB0YWcuXG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgKi9cbiAgdmFyIHN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCA9IGZhbHNlO1xuICB0aGlzLnN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCA9IGZ1bmN0aW9uKGVuYWJsZWQpIHtcbiAgICBpZiAoaXNEZWZpbmVkKGVuYWJsZWQpKSB7XG4gICAgICBzdHJpY3RDb21wb25lbnRCaW5kaW5nc0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBzdHJpY3RDb21wb25lbnRCaW5kaW5nc0VuYWJsZWQ7XG4gIH07XG5cbiAgdmFyIFRUTCA9IDEwO1xuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI29uQ2hhbmdlc1R0bFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogU2V0cyB0aGUgbnVtYmVyIG9mIHRpbWVzIGAkb25DaGFuZ2VzYCBob29rcyBjYW4gdHJpZ2dlciBuZXcgY2hhbmdlcyBiZWZvcmUgZ2l2aW5nIHVwIGFuZFxuICAgKiBhc3N1bWluZyB0aGF0IHRoZSBtb2RlbCBpcyB1bnN0YWJsZS5cbiAgICpcbiAgICogVGhlIGN1cnJlbnQgZGVmYXVsdCBpcyAxMCBpdGVyYXRpb25zLlxuICAgKlxuICAgKiBJbiBjb21wbGV4IGFwcGxpY2F0aW9ucyBpdCdzIHBvc3NpYmxlIHRoYXQgZGVwZW5kZW5jaWVzIGJldHdlZW4gYCRvbkNoYW5nZXNgIGhvb2tzIGFuZCBiaW5kaW5ncyB3aWxsIHJlc3VsdFxuICAgKiBpbiBzZXZlcmFsIGl0ZXJhdGlvbnMgb2YgY2FsbHMgdG8gdGhlc2UgaG9va3MuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwXG4gICAqIGl0ZXJhdGlvbnMgdG8gc3RhYmlsaXplIHRoZW4geW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB3aGF0IGlzIGNhdXNpbmcgdGhlIG1vZGVsIHRvIGNvbnRpbnVvdXNseSBjaGFuZ2UgZHVyaW5nXG4gICAqIHRoZSBgJG9uQ2hhbmdlc2AgaG9vayBleGVjdXRpb24uXG4gICAqXG4gICAqIEluY3JlYXNpbmcgdGhlIFRUTCBjb3VsZCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucywgc28geW91IHNob3VsZCBub3QgY2hhbmdlIGl0IHdpdGhvdXQgcHJvcGVyIGp1c3RpZmljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbnVtYmVyIG9mIGAkb25DaGFuZ2VzYCBob29rIGl0ZXJhdGlvbnMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ8b2JqZWN0fSB0aGUgY3VycmVudCBsaW1pdCAob3IgYHRoaXNgIGlmIGNhbGxlZCBhcyBhIHNldHRlciBmb3IgY2hhaW5pbmcpXG4gICAqL1xuICB0aGlzLm9uQ2hhbmdlc1R0bCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIFRUTCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBUVEw7XG4gIH07XG5cbiAgdmFyIGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZyA9IHRydWU7XG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjY29tbWVudERpcmVjdGl2ZXNFbmFibGVkXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJdCBpbmRpY2F0ZXMgdG8gdGhlIGNvbXBpbGVyXG4gICAqIHdoZXRoZXIgb3Igbm90IGRpcmVjdGl2ZXMgb24gY29tbWVudHMgc2hvdWxkIGJlIGNvbXBpbGVkLlxuICAgKiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gICAqXG4gICAqIENhbGxpbmcgdGhpcyBmdW5jdGlvbiB3aXRoIGZhbHNlIGRpc2FibGVzIHRoZSBjb21waWxhdGlvbiBvZiBkaXJlY3RpdmVzXG4gICAqIG9uIGNvbW1lbnRzIGZvciB0aGUgd2hvbGUgYXBwbGljYXRpb24uXG4gICAqIFRoaXMgcmVzdWx0cyBpbiBhIGNvbXBpbGF0aW9uIHBlcmZvcm1hbmNlIGdhaW4sXG4gICAqIGFzIHRoZSBjb21waWxlciBkb2Vzbid0IGhhdmUgdG8gY2hlY2sgY29tbWVudHMgd2hlbiBsb29raW5nIGZvciBkaXJlY3RpdmVzLlxuICAgKiBUaGlzIHNob3VsZCBob3dldmVyIG9ubHkgYmUgdXNlZCBpZiB5b3UgYXJlIHN1cmUgdGhhdCBubyBjb21tZW50IGRpcmVjdGl2ZXMgYXJlIHVzZWQgaW5cbiAgICogdGhlIGFwcGxpY2F0aW9uIChpbmNsdWRpbmcgYW55IDNyZCBwYXJ0eSBkaXJlY3RpdmVzKS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkIGBmYWxzZWAgaWYgdGhlIGNvbXBpbGVyIG1heSBpZ25vcmUgZGlyZWN0aXZlcyBvbiBjb21tZW50c1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxvYmplY3R9IHRoZSBjdXJyZW50IHZhbHVlIChvciBgdGhpc2AgaWYgY2FsbGVkIGFzIGEgc2V0dGVyIGZvciBjaGFpbmluZylcbiAgICovXG4gIHRoaXMuY29tbWVudERpcmVjdGl2ZXNFbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY29tbWVudERpcmVjdGl2ZXNFbmFibGVkQ29uZmlnID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZztcbiAgfTtcblxuXG4gIHZhciBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkQ29uZmlnID0gdHJ1ZTtcbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJdCBpbmRpY2F0ZXMgdG8gdGhlIGNvbXBpbGVyXG4gICAqIHdoZXRoZXIgb3Igbm90IGRpcmVjdGl2ZXMgb24gZWxlbWVudCBjbGFzc2VzIHNob3VsZCBiZSBjb21waWxlZC5cbiAgICogRGVmYXVsdHMgdG8gYHRydWVgLlxuICAgKlxuICAgKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gd2l0aCBmYWxzZSBkaXNhYmxlcyB0aGUgY29tcGlsYXRpb24gb2YgZGlyZWN0aXZlc1xuICAgKiBvbiBlbGVtZW50IGNsYXNzZXMgZm9yIHRoZSB3aG9sZSBhcHBsaWNhdGlvbi5cbiAgICogVGhpcyByZXN1bHRzIGluIGEgY29tcGlsYXRpb24gcGVyZm9ybWFuY2UgZ2FpbixcbiAgICogYXMgdGhlIGNvbXBpbGVyIGRvZXNuJ3QgaGF2ZSB0byBjaGVjayBlbGVtZW50IGNsYXNzZXMgd2hlbiBsb29raW5nIGZvciBkaXJlY3RpdmVzLlxuICAgKiBUaGlzIHNob3VsZCBob3dldmVyIG9ubHkgYmUgdXNlZCBpZiB5b3UgYXJlIHN1cmUgdGhhdCBubyBjbGFzcyBkaXJlY3RpdmVzIGFyZSB1c2VkIGluXG4gICAqIHRoZSBhcHBsaWNhdGlvbiAoaW5jbHVkaW5nIGFueSAzcmQgcGFydHkgZGlyZWN0aXZlcykuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBgZmFsc2VgIGlmIHRoZSBjb21waWxlciBtYXkgaWdub3JlIGRpcmVjdGl2ZXMgb24gZWxlbWVudCBjbGFzc2VzXG4gICAqIEByZXR1cm5zIHtib29sZWFufG9iamVjdH0gdGhlIGN1cnJlbnQgdmFsdWUgKG9yIGB0aGlzYCBpZiBjYWxsZWQgYXMgYSBzZXR0ZXIgZm9yIGNoYWluaW5nKVxuICAgKi9cbiAgdGhpcy5jc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZENvbmZpZyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkQ29uZmlnO1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFtcbiAgICAgICAgICAgICckaW5qZWN0b3InLCAnJGludGVycG9sYXRlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJHBhcnNlJyxcbiAgICAgICAgICAgICckY29udHJvbGxlcicsICckcm9vdFNjb3BlJywgJyRzY2UnLCAnJGFuaW1hdGUnLCAnJCRzYW5pdGl6ZVVyaScsXG4gICAgZnVuY3Rpb24oJGluamVjdG9yLCAgICRpbnRlcnBvbGF0ZSwgICAkZXhjZXB0aW9uSGFuZGxlciwgICAkdGVtcGxhdGVSZXF1ZXN0LCAgICRwYXJzZSxcbiAgICAgICAgICAgICAkY29udHJvbGxlciwgICAkcm9vdFNjb3BlLCAgICRzY2UsICAgJGFuaW1hdGUsICAgJCRzYW5pdGl6ZVVyaSkge1xuXG4gICAgdmFyIFNJTVBMRV9BVFRSX05BTUUgPSAvXlxcdy87XG4gICAgdmFyIHNwZWNpYWxBdHRySG9sZGVyID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG5cbiAgICB2YXIgY29tbWVudERpcmVjdGl2ZXNFbmFibGVkID0gY29tbWVudERpcmVjdGl2ZXNFbmFibGVkQ29uZmlnO1xuICAgIHZhciBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkID0gY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZENvbmZpZztcblxuXG4gICAgdmFyIG9uQ2hhbmdlc1R0bCA9IFRUTDtcbiAgICAvLyBUaGUgb25DaGFuZ2VzIGhvb2tzIHNob3VsZCBhbGwgYmUgcnVuIHRvZ2V0aGVyIGluIGEgc2luZ2xlIGRpZ2VzdFxuICAgIC8vIFdoZW4gY2hhbmdlcyBvY2N1ciwgdGhlIGNhbGwgdG8gdHJpZ2dlciB0aGVpciBob29rcyB3aWxsIGJlIGFkZGVkIHRvIHRoaXMgcXVldWVcbiAgICB2YXIgb25DaGFuZ2VzUXVldWU7XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBpbiBhICQkcG9zdERpZ2VzdCB0byB0cmlnZ2VyIGFsbCB0aGUgb25DaGFuZ2VzIGhvb2tzIGluIGEgc2luZ2xlIGRpZ2VzdFxuICAgIGZ1bmN0aW9uIGZsdXNoT25DaGFuZ2VzUXVldWUoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoISgtLW9uQ2hhbmdlc1R0bCkpIHtcbiAgICAgICAgICAvLyBXZSBoYXZlIGhpdCB0aGUgVFRMIGxpbWl0IHNvIHJlc2V0IGV2ZXJ5dGhpbmdcbiAgICAgICAgICBvbkNoYW5nZXNRdWV1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignaW5mY2huZycsICd7MH0gJG9uQ2hhbmdlcygpIGl0ZXJhdGlvbnMgcmVhY2hlZC4gQWJvcnRpbmchXFxuJywgVFRMKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBtdXN0IHJ1biB0aGlzIGhvb2sgaW4gYW4gYXBwbHkgc2luY2UgdGhlICQkcG9zdERpZ2VzdCBydW5zIG91dHNpZGUgYXBwbHlcbiAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG9uQ2hhbmdlc1F1ZXVlLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIG9uQ2hhbmdlc1F1ZXVlW2ldKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZXNldCB0aGUgcXVldWUgdG8gdHJpZ2dlciBhIG5ldyBzY2hlZHVsZSBuZXh0IHRpbWUgdGhlcmUgaXMgYSBjaGFuZ2VcbiAgICAgICAgICBvbkNoYW5nZXNRdWV1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JzO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBvbkNoYW5nZXNUdGwrKztcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlc1RvQ29weSkge1xuICAgICAgaWYgKGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzVG9Db3B5KTtcbiAgICAgICAgdmFyIGksIGwsIGtleTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIHRoaXNba2V5XSA9IGF0dHJpYnV0ZXNUb0NvcHlba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kYXR0ciA9IHt9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLiQkZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgQXR0cmlidXRlcy5wcm90b3R5cGUgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRub3JtYWxpemVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBDb252ZXJ0cyBhbiBhdHRyaWJ1dGUgbmFtZSAoZS5nLiBkYXNoL2NvbG9uL3VuZGVyc2NvcmUtZGVsaW1pdGVkIHN0cmluZywgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGB4LWAgb3JcbiAgICAgICAqIGBkYXRhLWApIHRvIGl0cyBub3JtYWxpemVkLCBjYW1lbENhc2UgZm9ybS5cbiAgICAgICAqXG4gICAgICAgKiBBbHNvIHRoZXJlIGlzIHNwZWNpYWwgY2FzZSBmb3IgTW96IHByZWZpeCBzdGFydGluZyB3aXRoIHVwcGVyIGNhc2UgbGV0dGVyLlxuICAgICAgICpcbiAgICAgICAqIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uIGNoZWNrIG91dCB0aGUgZ3VpZGUgb24ge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSNtYXRjaGluZy1kaXJlY3RpdmVzIE1hdGNoaW5nIERpcmVjdGl2ZXN9XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAgICAgICAqL1xuICAgICAgJG5vcm1hbGl6ZTogZGlyZWN0aXZlTm9ybWFsaXplLFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGFkZENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQWRkcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIHRvIHRoZSBlbGVtZW50LiBJZiBhbmltYXRpb25zXG4gICAgICAgKiBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIGFkZGl0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudFxuICAgICAgICovXG4gICAgICAkYWRkQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7XG4gICAgICAgIGlmIChjbGFzc1ZhbCAmJiBjbGFzc1ZhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkcmVtb3ZlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZW1vdmVzIHRoZSBDU1MgY2xhc3MgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjbGFzc1ZhbCBwYXJhbWV0ZXIgZnJvbSB0aGUgZWxlbWVudC4gSWZcbiAgICAgICAqIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgdGhlbiBhbiBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBjbGFzcyByZW1vdmFsLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgJHJlbW92ZUNsYXNzOiBmdW5jdGlvbihjbGFzc1ZhbCkge1xuICAgICAgICBpZiAoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBjbGFzc1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHVwZGF0ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQWRkcyBhbmQgcmVtb3ZlcyB0aGUgYXBwcm9wcmlhdGUgQ1NTIGNsYXNzIHZhbHVlcyB0byB0aGUgZWxlbWVudCBiYXNlZCBvbiB0aGUgZGlmZmVyZW5jZVxuICAgICAgICogYmV0d2VlbiB0aGUgbmV3IGFuZCBvbGQgQ1NTIGNsYXNzIHZhbHVlcyAoc3BlY2lmaWVkIGFzIG5ld0NsYXNzZXMgYW5kIG9sZENsYXNzZXMpLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdDbGFzc2VzIFRoZSBjdXJyZW50IENTUyBjbGFzc05hbWUgdmFsdWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvbGRDbGFzc2VzIFRoZSBmb3JtZXIgQ1NTIGNsYXNzTmFtZSB2YWx1ZVxuICAgICAgICovXG4gICAgICAkdXBkYXRlQ2xhc3M6IGZ1bmN0aW9uKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpIHtcbiAgICAgICAgdmFyIHRvQWRkID0gdG9rZW5EaWZmZXJlbmNlKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpO1xuICAgICAgICBpZiAodG9BZGQgJiYgdG9BZGQubGVuZ3RoKSB7XG4gICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvQWRkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b1JlbW92ZSA9IHRva2VuRGlmZmVyZW5jZShvbGRDbGFzc2VzLCBuZXdDbGFzc2VzKTtcbiAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCB0b1JlbW92ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0IGEgbm9ybWFsaXplZCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaW4gYSB3YXkgc3VjaCB0aGF0IGFsbCBkaXJlY3RpdmVzXG4gICAgICAgKiBjYW4gc2hhcmUgdGhlIGF0dHJpYnV0ZS4gVGhpcyBmdW5jdGlvbiBwcm9wZXJseSBoYW5kbGVzIGJvb2xlYW4gYXR0cmlidXRlcy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTm9ybWFsaXplZCBrZXkuIChpZSBuZ0F0dHJpYnV0ZSlcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW59IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuIElmIGBudWxsYCBhdHRyaWJ1dGUgd2lsbCBiZSBkZWxldGVkLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gd3JpdGVBdHRyIElmIGZhbHNlLCBkb2VzIG5vdCB3cml0ZSB0aGUgdmFsdWUgdG8gRE9NIGVsZW1lbnQgYXR0cmlidXRlLlxuICAgICAgICogICAgIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJOYW1lIE9wdGlvbmFsIG5vbmUgbm9ybWFsaXplZCBuYW1lLiBEZWZhdWx0cyB0byBrZXkuXG4gICAgICAgKi9cbiAgICAgICRzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHdyaXRlQXR0ciwgYXR0ck5hbWUpIHtcbiAgICAgICAgLy8gVE9ETzogZGVjaWRlIHdoZXRoZXIgb3Igbm90IHRvIHRocm93IGFuIGVycm9yIGlmIFwiY2xhc3NcIlxuICAgICAgICAvL2lzIHNldCB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc2luY2UgaXQgbWF5IGNhdXNlICR1cGRhdGVDbGFzcyB0b1xuICAgICAgICAvL2JlY29tZSB1bnN0YWJsZS5cblxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuJCRlbGVtZW50WzBdLFxuICAgICAgICAgICAgYm9vbGVhbktleSA9IGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBrZXkpLFxuICAgICAgICAgICAgYWxpYXNlZEtleSA9IGdldEFsaWFzZWRBdHRyTmFtZShrZXkpLFxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBrZXksXG4gICAgICAgICAgICBub2RlTmFtZTtcblxuICAgICAgICBpZiAoYm9vbGVhbktleSkge1xuICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnByb3Aoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgYXR0ck5hbWUgPSBib29sZWFuS2V5O1xuICAgICAgICB9IGVsc2UgaWYgKGFsaWFzZWRLZXkpIHtcbiAgICAgICAgICB0aGlzW2FsaWFzZWRLZXldID0gdmFsdWU7XG4gICAgICAgICAgb2JzZXJ2ZXIgPSBhbGlhc2VkS2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG5cbiAgICAgICAgLy8gdHJhbnNsYXRlIG5vcm1hbGl6ZWQga2V5IHRvIGFjdHVhbCBrZXlcbiAgICAgICAgaWYgKGF0dHJOYW1lKSB7XG4gICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXR0ck5hbWUgPSB0aGlzLiRhdHRyW2tleV07XG4gICAgICAgICAgaWYgKCFhdHRyTmFtZSkge1xuICAgICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWUgPSBzbmFrZV9jYXNlKGtleSwgJy0nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBub2RlTmFtZSA9IG5vZGVOYW1lXyh0aGlzLiQkZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKChub2RlTmFtZSA9PT0gJ2EnICYmIChrZXkgPT09ICdocmVmJyB8fCBrZXkgPT09ICd4bGlua0hyZWYnKSkgfHxcbiAgICAgICAgICAgIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3JjJykpIHtcbiAgICAgICAgICAvLyBzYW5pdGl6ZSBhW2hyZWZdIGFuZCBpbWdbc3JjXSB2YWx1ZXNcbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9ICQkc2FuaXRpemVVcmkodmFsdWUsIGtleSA9PT0gJ3NyYycpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGVOYW1lID09PSAnaW1nJyAmJiBrZXkgPT09ICdzcmNzZXQnICYmIGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAvLyBzYW5pdGl6ZSBpbWdbc3Jjc2V0XSB2YWx1ZXNcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICAgICAgICAvLyBmaXJzdCBjaGVjayBpZiB0aGVyZSBhcmUgc3BhY2VzIGJlY2F1c2UgaXQncyBub3QgdGhlIHNhbWUgcGF0dGVyblxuICAgICAgICAgIHZhciB0cmltbWVkU3Jjc2V0ID0gdHJpbSh2YWx1ZSk7XG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgKCAgIDk5OXggICAsfCAgIDk5OXcgICAsfCAgICx8LCAgIClcbiAgICAgICAgICB2YXIgc3JjUGF0dGVybiA9IC8oXFxzK1xcZCt4XFxzKix8XFxzK1xcZCt3XFxzKix8XFxzKyx8LFxccyspLztcbiAgICAgICAgICB2YXIgcGF0dGVybiA9IC9cXHMvLnRlc3QodHJpbW1lZFNyY3NldCkgPyBzcmNQYXR0ZXJuIDogLygsKS87XG5cbiAgICAgICAgICAvLyBzcGxpdCBzcmNzZXQgaW50byB0dXBsZSBvZiB1cmkgYW5kIGRlc2NyaXB0b3IgZXhjZXB0IGZvciB0aGUgbGFzdCBpdGVtXG4gICAgICAgICAgdmFyIHJhd1VyaXMgPSB0cmltbWVkU3Jjc2V0LnNwbGl0KHBhdHRlcm4pO1xuXG4gICAgICAgICAgLy8gZm9yIGVhY2ggdHVwbGVzXG4gICAgICAgICAgdmFyIG5iclVyaXNXaXRoMnBhcnRzID0gTWF0aC5mbG9vcihyYXdVcmlzLmxlbmd0aCAvIDIpO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmJyVXJpc1dpdGgycGFydHM7IGkrKykge1xuICAgICAgICAgICAgdmFyIGlubmVySWR4ID0gaSAqIDI7XG4gICAgICAgICAgICAvLyBzYW5pdGl6ZSB0aGUgdXJpXG4gICAgICAgICAgICByZXN1bHQgKz0gJCRzYW5pdGl6ZVVyaSh0cmltKHJhd1VyaXNbaW5uZXJJZHhdKSwgdHJ1ZSk7XG4gICAgICAgICAgICAvLyBhZGQgdGhlIGRlc2NyaXB0b3JcbiAgICAgICAgICAgIHJlc3VsdCArPSAoJyAnICsgdHJpbShyYXdVcmlzW2lubmVySWR4ICsgMV0pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzcGxpdCB0aGUgbGFzdCBpdGVtIGludG8gdXJpIGFuZCBkZXNjcmlwdG9yXG4gICAgICAgICAgdmFyIGxhc3RUdXBsZSA9IHRyaW0ocmF3VXJpc1tpICogMl0pLnNwbGl0KC9cXHMvKTtcblxuICAgICAgICAgIC8vIHNhbml0aXplIHRoZSBsYXN0IHVyaVxuICAgICAgICAgIHJlc3VsdCArPSAkJHNhbml0aXplVXJpKHRyaW0obGFzdFR1cGxlWzBdKSwgdHJ1ZSk7XG5cbiAgICAgICAgICAvLyBhbmQgYWRkIHRoZSBsYXN0IGRlc2NyaXB0b3IgaWYgYW55XG4gICAgICAgICAgaWYgKGxhc3RUdXBsZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAoJyAnICsgdHJpbShsYXN0VHVwbGVbMV0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpc1trZXldID0gdmFsdWUgPSByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod3JpdGVBdHRyICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnJlbW92ZUF0dHIoYXR0ck5hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoU0lNUExFX0FUVFJfTkFNRS50ZXN0KGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5hdHRyKGF0dHJOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZXRTcGVjaWFsQXR0cih0aGlzLiQkZWxlbWVudFswXSwgYXR0ck5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaXJlIG9ic2VydmVyc1xuICAgICAgICB2YXIgJCRvYnNlcnZlcnMgPSB0aGlzLiQkb2JzZXJ2ZXJzO1xuICAgICAgICBpZiAoJCRvYnNlcnZlcnMpIHtcbiAgICAgICAgICBmb3JFYWNoKCQkb2JzZXJ2ZXJzW29ic2VydmVyXSwgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZuKHZhbHVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkb2JzZXJ2ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIE9ic2VydmVzIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUuXG4gICAgICAgKlxuICAgICAgICogVGhlIG9ic2VydmVyIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBvbmNlIGR1cmluZyB0aGUgbmV4dCBgJGRpZ2VzdGAgZm9sbG93aW5nXG4gICAgICAgKiBjb21waWxhdGlvbi4gVGhlIG9ic2VydmVyIGlzIHRoZW4gaW52b2tlZCB3aGVuZXZlciB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlXG4gICAgICAgKiBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTm9ybWFsaXplZCBrZXkuIChpZSBuZ0F0dHJpYnV0ZSkgLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihpbnRlcnBvbGF0ZWRWYWx1ZSl9IGZuIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXJcbiAgICAgICAgICAgICAgICB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgICAqICAgICAgICBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uI2hvdy10ZXh0LWFuZC1hdHRyaWJ1dGUtYmluZGluZ3Mtd29yayBJbnRlcnBvbGF0aW9uXG4gICAgICAgKiAgICAgICAgZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIG9ic2VydmVyLlxuICAgICAgICovXG4gICAgICAkb2JzZXJ2ZTogZnVuY3Rpb24oa2V5LCBmbikge1xuICAgICAgICB2YXIgYXR0cnMgPSB0aGlzLFxuICAgICAgICAgICAgJCRvYnNlcnZlcnMgPSAoYXR0cnMuJCRvYnNlcnZlcnMgfHwgKGF0dHJzLiQkb2JzZXJ2ZXJzID0gY3JlYXRlTWFwKCkpKSxcbiAgICAgICAgICAgIGxpc3RlbmVycyA9ICgkJG9ic2VydmVyc1trZXldIHx8ICgkJG9ic2VydmVyc1trZXldID0gW10pKTtcblxuICAgICAgICBsaXN0ZW5lcnMucHVzaChmbik7XG4gICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIWxpc3RlbmVycy4kJGludGVyICYmIGF0dHJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIWlzVW5kZWZpbmVkKGF0dHJzW2tleV0pKSB7XG4gICAgICAgICAgICAvLyBubyBvbmUgcmVnaXN0ZXJlZCBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiwgc28gbGV0cyBjYWxsIGl0IG1hbnVhbGx5XG4gICAgICAgICAgICBmbihhdHRyc1trZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBhcnJheVJlbW92ZShsaXN0ZW5lcnMsIGZuKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc2V0U3BlY2lhbEF0dHIoZWxlbWVudCwgYXR0ck5hbWUsIHZhbHVlKSB7XG4gICAgICAvLyBBdHRyaWJ1dGVzIG5hbWVzIHRoYXQgZG8gbm90IHN0YXJ0IHdpdGggbGV0dGVycyAoc3VjaCBhcyBgKGNsaWNrKWApIGNhbm5vdCBiZSBzZXQgdXNpbmcgYHNldEF0dHJpYnV0ZWBcbiAgICAgIC8vIHNvIHdlIGhhdmUgdG8ganVtcCB0aHJvdWdoIHNvbWUgaG9vcHMgdG8gZ2V0IHN1Y2ggYW4gYXR0cmlidXRlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTMzMThcbiAgICAgIHNwZWNpYWxBdHRySG9sZGVyLmlubmVySFRNTCA9ICc8c3BhbiAnICsgYXR0ck5hbWUgKyAnPic7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHNwZWNpYWxBdHRySG9sZGVyLmZpcnN0Q2hpbGQuYXR0cmlidXRlcztcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWzBdO1xuICAgICAgLy8gV2UgaGF2ZSB0byByZW1vdmUgdGhlIGF0dHJpYnV0ZSBmcm9tIGl0cyBjb250YWluZXIgZWxlbWVudCBiZWZvcmUgd2UgY2FuIGFkZCBpdCB0byB0aGUgZGVzdGluYXRpb24gZWxlbWVudFxuICAgICAgYXR0cmlidXRlcy5yZW1vdmVOYW1lZEl0ZW0oYXR0cmlidXRlLm5hbWUpO1xuICAgICAgYXR0cmlidXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBlbGVtZW50LmF0dHJpYnV0ZXMuc2V0TmFtZWRJdGVtKGF0dHJpYnV0ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlnbm9yZSwgc2luY2UgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgdHJ5aW5nIHRvIHNldCBjbGFzcyBvblxuICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuXG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB2YXIgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICBkZW5vcm1hbGl6ZVRlbXBsYXRlID0gKHN0YXJ0U3ltYm9sID09PSAne3snICYmIGVuZFN5bWJvbCAgPT09ICd9fScpXG4gICAgICAgICAgICA/IGlkZW50aXR5XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIGRlbm9ybWFsaXplVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcey9nLCBzdGFydFN5bWJvbCkucmVwbGFjZSgvfX0vZywgZW5kU3ltYm9sKTtcbiAgICAgICAgfSxcbiAgICAgICAgTkdfQVRUUl9CSU5ESU5HID0gL15uZ0F0dHJbQS1aXS87XG4gICAgdmFyIE1VTFRJX0VMRU1FTlRfRElSX1JFID0gL14oLispU3RhcnQkLztcblxuICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZEJpbmRpbmdJbmZvKCRlbGVtZW50LCBiaW5kaW5nKSB7XG4gICAgICB2YXIgYmluZGluZ3MgPSAkZWxlbWVudC5kYXRhKCckYmluZGluZycpIHx8IFtdO1xuXG4gICAgICBpZiAoaXNBcnJheShiaW5kaW5nKSkge1xuICAgICAgICBiaW5kaW5ncyA9IGJpbmRpbmdzLmNvbmNhdChiaW5kaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbmRpbmdzLnB1c2goYmluZGluZyk7XG4gICAgICB9XG5cbiAgICAgICRlbGVtZW50LmRhdGEoJyRiaW5kaW5nJywgYmluZGluZ3MpO1xuICAgIH0gOiBub29wO1xuXG4gICAgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZEJpbmRpbmdDbGFzcygkZWxlbWVudCkge1xuICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCAnbmctYmluZGluZycpO1xuICAgIH0gOiBub29wO1xuXG4gICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlSW5mbygkZWxlbWVudCwgc2NvcGUsIGlzb2xhdGVkLCBub1RlbXBsYXRlKSB7XG4gICAgICB2YXIgZGF0YU5hbWUgPSBpc29sYXRlZCA/IChub1RlbXBsYXRlID8gJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyA6ICckaXNvbGF0ZVNjb3BlJykgOiAnJHNjb3BlJztcbiAgICAgICRlbGVtZW50LmRhdGEoZGF0YU5hbWUsIHNjb3BlKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkU2NvcGVDbGFzcygkZWxlbWVudCwgaXNvbGF0ZWQpIHtcbiAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgaXNvbGF0ZWQgPyAnbmctaXNvbGF0ZS1zY29wZScgOiAnbmctc2NvcGUnKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRjcmVhdGVDb21tZW50ID0gZnVuY3Rpb24oZGlyZWN0aXZlTmFtZSwgY29tbWVudCkge1xuICAgICAgdmFyIGNvbnRlbnQgPSAnJztcbiAgICAgIGlmIChkZWJ1Z0luZm9FbmFibGVkKSB7XG4gICAgICAgIGNvbnRlbnQgPSAnICcgKyAoZGlyZWN0aXZlTmFtZSB8fCAnJykgKyAnOiAnO1xuICAgICAgICBpZiAoY29tbWVudCkgY29udGVudCArPSBjb21tZW50ICsgJyAnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVDb21tZW50KGNvbnRlbnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gY29tcGlsZTtcblxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIGZ1bmN0aW9uIGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgaWYgKCEoJGNvbXBpbGVOb2RlcyBpbnN0YW5jZW9mIGpxTGl0ZSkpIHtcbiAgICAgICAgLy8ganF1ZXJ5IGFsd2F5cyByZXdyYXBzLCB3aGVyZWFzIHdlIG5lZWQgdG8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIHNlbGVjdG9yIHNvIHRoYXQgd2UgY2FuXG4gICAgICAgIC8vIG1vZGlmeSBpdC5cbiAgICAgICAgJGNvbXBpbGVOb2RlcyA9IGpxTGl0ZSgkY29tcGlsZU5vZGVzKTtcbiAgICAgIH1cbiAgICAgIHZhciBjb21wb3NpdGVMaW5rRm4gPVxuICAgICAgICAgICAgICBjb21waWxlTm9kZXMoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcygkY29tcGlsZU5vZGVzKTtcbiAgICAgIHZhciBuYW1lc3BhY2UgPSBudWxsO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHB1YmxpY0xpbmtGbihzY29wZSwgY2xvbmVDb25uZWN0Rm4sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCEkY29tcGlsZU5vZGVzKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ211bHRpbGluaycsICdUaGlzIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiBsaW5rZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QXJnKHNjb3BlLCAnc2NvcGUnKTtcblxuICAgICAgICBpZiAocHJldmlvdXNDb21waWxlQ29udGV4dCAmJiBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5lZWRzTmV3U2NvcGUpIHtcbiAgICAgICAgICAvLyBBIHBhcmVudCBkaXJlY3RpdmUgZGlkIGEgcmVwbGFjZSBhbmQgYSBkaXJlY3RpdmUgb24gdGhpcyBlbGVtZW50IGFza2VkXG4gICAgICAgICAgLy8gZm9yIHRyYW5zY2x1c2lvbiwgd2hpY2ggY2F1c2VkIHVzIHRvIGxvc2UgYSBsYXllciBvZiBlbGVtZW50IG9uIHdoaWNoXG4gICAgICAgICAgLy8gd2UgY291bGQgaG9sZCB0aGUgbmV3IHRyYW5zY2x1c2lvbiBzY29wZSwgc28gd2Ugd2lsbCBjcmVhdGUgaXQgbWFudWFsbHlcbiAgICAgICAgICAvLyBoZXJlLlxuICAgICAgICAgIHNjb3BlID0gc2NvcGUuJHBhcmVudC4kbmV3KCk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuID0gb3B0aW9ucy5wYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnMgPSBvcHRpb25zLnRyYW5zY2x1ZGVDb250cm9sbGVycyxcbiAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gb3B0aW9ucy5mdXR1cmVQYXJlbnRFbGVtZW50O1xuXG4gICAgICAgIC8vIFdoZW4gYHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuYCBpcyBwYXNzZWQsIGl0IGlzIGFcbiAgICAgICAgLy8gYGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlYCBmdW5jdGlvbiAoaXQgd2FzIHByZXZpb3VzbHkgcGFzc2VkXG4gICAgICAgIC8vIGFzIGB0cmFuc2NsdWRlYCB0byBkaXJlY3RpdmUubGluaykgc28gd2UgbXVzdCB1bndyYXAgaXQgdG8gZ2V0XG4gICAgICAgIC8vIGl0cyBgYm91bmRUcmFuc2NsdWRlRm5gXG4gICAgICAgIGlmIChwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZSkge1xuICAgICAgICAgIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuID0gcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4uJCRib3VuZFRyYW5zY2x1ZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW5hbWVzcGFjZSkge1xuICAgICAgICAgIG5hbWVzcGFjZSA9IGRldGVjdE5hbWVzcGFjZUZvckNoaWxkRWxlbWVudHMoZnV0dXJlUGFyZW50RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyICRsaW5rTm9kZTtcbiAgICAgICAgaWYgKG5hbWVzcGFjZSAhPT0gJ2h0bWwnKSB7XG4gICAgICAgICAgLy8gV2hlbiB1c2luZyBhIGRpcmVjdGl2ZSB3aXRoIHJlcGxhY2U6dHJ1ZSBhbmQgdGVtcGxhdGVVcmwgdGhlICRjb21waWxlTm9kZXNcbiAgICAgICAgICAvLyAob3IgYSBjaGlsZCBlbGVtZW50IGluc2lkZSBvZiB0aGVtKVxuICAgICAgICAgIC8vIG1pZ2h0IGNoYW5nZSwgc28gd2UgbmVlZCB0byByZWNyZWF0ZSB0aGUgbmFtZXNwYWNlIGFkYXB0ZWQgY29tcGlsZU5vZGVzXG4gICAgICAgICAgLy8gZm9yIGNhbGwgdG8gdGhlIGxpbmsgZnVuY3Rpb24uXG4gICAgICAgICAgLy8gTm90ZTogVGhpcyB3aWxsIGFscmVhZHkgY2xvbmUgdGhlIG5vZGVzLi4uXG4gICAgICAgICAgJGxpbmtOb2RlID0ganFMaXRlKFxuICAgICAgICAgICAgd3JhcFRlbXBsYXRlKG5hbWVzcGFjZSwganFMaXRlKCc8ZGl2PicpLmFwcGVuZCgkY29tcGlsZU5vZGVzKS5odG1sKCkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjbG9uZUNvbm5lY3RGbikge1xuICAgICAgICAgIC8vIGltcG9ydGFudCEhOiB3ZSBtdXN0IGNhbGwgb3VyIGpxTGl0ZS5jbG9uZSgpIHNpbmNlIHRoZSBqUXVlcnkgb25lIGlzIHRyeWluZyB0byBiZSBzbWFydFxuICAgICAgICAgIC8vIGFuZCBzb21ldGltZXMgY2hhbmdlcyB0aGUgc3RydWN0dXJlIG9mIHRoZSBET00uXG4gICAgICAgICAgJGxpbmtOb2RlID0gSlFMaXRlUHJvdG90eXBlLmNsb25lLmNhbGwoJGNvbXBpbGVOb2Rlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGxpbmtOb2RlID0gJGNvbXBpbGVOb2RlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2NsdWRlQ29udHJvbGxlcnMpIHtcbiAgICAgICAgICBmb3IgKHZhciBjb250cm9sbGVyTmFtZSBpbiB0cmFuc2NsdWRlQ29udHJvbGxlcnMpIHtcbiAgICAgICAgICAgICRsaW5rTm9kZS5kYXRhKCckJyArIGNvbnRyb2xsZXJOYW1lICsgJ0NvbnRyb2xsZXInLCB0cmFuc2NsdWRlQ29udHJvbGxlcnNbY29udHJvbGxlck5hbWVdLmluc3RhbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvKCRsaW5rTm9kZSwgc2NvcGUpO1xuXG4gICAgICAgIGlmIChjbG9uZUNvbm5lY3RGbikgY2xvbmVDb25uZWN0Rm4oJGxpbmtOb2RlLCBzY29wZSk7XG4gICAgICAgIGlmIChjb21wb3NpdGVMaW5rRm4pIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgJGxpbmtOb2RlLCAkbGlua05vZGUsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICBpZiAoIWNsb25lQ29ubmVjdEZuKSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2RlcyA9IGNvbXBvc2l0ZUxpbmtGbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRsaW5rTm9kZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGV0ZWN0TmFtZXNwYWNlRm9yQ2hpbGRFbGVtZW50cyhwYXJlbnRFbGVtZW50KSB7XG4gICAgICAvLyBUT0RPOiBNYWtlIHRoaXMgZGV0ZWN0IE1hdGhNTCBhcyB3ZWxsLi4uXG4gICAgICB2YXIgbm9kZSA9IHBhcmVudEVsZW1lbnQgJiYgcGFyZW50RWxlbWVudFswXTtcbiAgICAgIGlmICghbm9kZSkge1xuICAgICAgICByZXR1cm4gJ2h0bWwnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5vZGVOYW1lXyhub2RlKSAhPT0gJ2ZvcmVpZ25vYmplY3QnICYmIHRvU3RyaW5nLmNhbGwobm9kZSkubWF0Y2goL1NWRy8pID8gJ3N2ZycgOiAnaHRtbCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGlsZSBmdW5jdGlvbiBtYXRjaGVzIGVhY2ggbm9kZSBpbiBub2RlTGlzdCBhZ2FpbnN0IHRoZSBkaXJlY3RpdmVzLiBPbmNlIGFsbCBkaXJlY3RpdmVzXG4gICAgICogZm9yIGEgcGFydGljdWxhciBub2RlIGFyZSBjb2xsZWN0ZWQgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGUgY29tcGlsZVxuICAgICAqIGZ1bmN0aW9ucyByZXR1cm4gdmFsdWVzIC0gdGhlIGxpbmtpbmcgZnVuY3Rpb25zIC0gYXJlIGNvbWJpbmVkIGludG8gYSBjb21wb3NpdGUgbGlua2luZ1xuICAgICAqIGZ1bmN0aW9uLCB3aGljaCBpcyB0aGUgYSBsaW5raW5nIGZ1bmN0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZUxpc3R9IG5vZGVMaXN0IGFuIGFycmF5IG9mIG5vZGVzIG9yIE5vZGVMaXN0IHRvIGNvbXBpbGVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZUZuIEEgbGlua2luZyBmdW5jdGlvbiwgd2hlcmUgdGhlXG4gICAgICogICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS5cbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSAkcm9vdEVsZW1lbnQgSWYgdGhlIG5vZGVMaXN0IGlzIHRoZSByb290IG9mIHRoZSBjb21waWxhdGlvbiB0cmVlIHRoZW5cbiAgICAgKiAgICAgICAgdGhlIHJvb3RFbGVtZW50IG11c3QgYmUgc2V0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBvZiB0aGUgY29tcGlsZSByb290LiBUaGlzIGlzXG4gICAgICogICAgICAgIG5lZWRlZCBzbyB0aGF0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBpdGVtcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCB3aWRnZXRzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgY29tcG9zaXRlIGxpbmtpbmcgZnVuY3Rpb24gb2YgYWxsIG9mIHRoZSBtYXRjaGVkIGRpcmVjdGl2ZXMgb3IgbnVsbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21waWxlTm9kZXMobm9kZUxpc3QsIHRyYW5zY2x1ZGVGbiwgJHJvb3RFbGVtZW50LCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBsaW5rRm5zID0gW10sXG4gICAgICAgICAgLy8gYG5vZGVMaXN0YCBjYW4gYmUgZWl0aGVyIGFuIGVsZW1lbnQncyBgLmNoaWxkTm9kZXNgIChsaXZlIE5vZGVMaXN0KVxuICAgICAgICAgIC8vIG9yIGEganFMaXRlL2pRdWVyeSBjb2xsZWN0aW9uIG9yIGFuIGFycmF5XG4gICAgICAgICAgbm90TGl2ZUxpc3QgPSBpc0FycmF5KG5vZGVMaXN0KSB8fCAobm9kZUxpc3QgaW5zdGFuY2VvZiBqcUxpdGUpLFxuICAgICAgICAgIGF0dHJzLCBkaXJlY3RpdmVzLCBub2RlTGlua0ZuLCBjaGlsZE5vZGVzLCBjaGlsZExpbmtGbiwgbGlua0ZuRm91bmQsIG5vZGVMaW5rRm5Gb3VuZDtcblxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGF0dHJzID0gbmV3IEF0dHJpYnV0ZXMoKTtcblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG4gICAgICAgIC8vIFdvcmthcm91bmQgZm9yICMxMTc4MSBhbmQgIzE0OTI0XG4gICAgICAgIGlmIChtc2llID09PSAxMSkge1xuICAgICAgICAgIG1lcmdlQ29uc2VjdXRpdmVUZXh0Tm9kZXMobm9kZUxpc3QsIGksIG5vdExpdmVMaXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIG11c3QgYWx3YXlzIHJlZmVyIHRvIGBub2RlTGlzdFtpXWAgaGVyZWFmdGVyLFxuICAgICAgICAvLyBzaW5jZSB0aGUgbm9kZXMgY2FuIGJlIHJlcGxhY2VkIHVuZGVybmVhdGggdXMuXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhub2RlTGlzdFtpXSwgW10sIGF0dHJzLCBpID09PSAwID8gbWF4UHJpb3JpdHkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlRGlyZWN0aXZlKTtcblxuICAgICAgICBub2RlTGlua0ZuID0gKGRpcmVjdGl2ZXMubGVuZ3RoKVxuICAgICAgICAgICAgPyBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgbm9kZUxpc3RbaV0sIGF0dHJzLCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgW10sIFtdLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KVxuICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgIGlmIChub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4uc2NvcGUpIHtcbiAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcyhhdHRycy4kJGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGRMaW5rRm4gPSAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnRlcm1pbmFsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgIShjaGlsZE5vZGVzID0gbm9kZUxpc3RbaV0uY2hpbGROb2RlcykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAhY2hpbGROb2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogY29tcGlsZU5vZGVzKGNoaWxkTm9kZXMsXG4gICAgICAgICAgICAgICAgIG5vZGVMaW5rRm4gPyAoXG4gICAgICAgICAgICAgICAgICAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCB8fCAhbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAmJiBub2RlTGlua0ZuLnRyYW5zY2x1ZGUpIDogdHJhbnNjbHVkZUZuKTtcblxuICAgICAgICBpZiAobm9kZUxpbmtGbiB8fCBjaGlsZExpbmtGbikge1xuICAgICAgICAgIGxpbmtGbnMucHVzaChpLCBub2RlTGlua0ZuLCBjaGlsZExpbmtGbik7XG4gICAgICAgICAgbGlua0ZuRm91bmQgPSB0cnVlO1xuICAgICAgICAgIG5vZGVMaW5rRm5Gb3VuZCA9IG5vZGVMaW5rRm5Gb3VuZCB8fCBub2RlTGlua0ZuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy91c2UgdGhlIHByZXZpb3VzIGNvbnRleHQgb25seSBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHZpcnR1YWwgZ3JvdXBcbiAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIHJldHVybiBhIGxpbmtpbmcgZnVuY3Rpb24gaWYgd2UgaGF2ZSBmb3VuZCBhbnl0aGluZywgbnVsbCBvdGhlcndpc2VcbiAgICAgIHJldHVybiBsaW5rRm5Gb3VuZCA/IGNvbXBvc2l0ZUxpbmtGbiA6IG51bGw7XG5cbiAgICAgIGZ1bmN0aW9uIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgbm9kZUxpc3QsICRyb290RWxlbWVudCwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuLCBub2RlLCBjaGlsZFNjb3BlLCBpLCBpaSwgaWR4LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICB2YXIgc3RhYmxlTm9kZUxpc3Q7XG5cblxuICAgICAgICBpZiAobm9kZUxpbmtGbkZvdW5kKSB7XG4gICAgICAgICAgLy8gY29weSBub2RlTGlzdCBzbyB0aGF0IGlmIGEgbm9kZUxpbmtGbiByZW1vdmVzIG9yIGFkZHMgYW4gZWxlbWVudCBhdCB0aGlzIERPTSBsZXZlbCBvdXJcbiAgICAgICAgICAvLyBvZmZzZXRzIGRvbid0IGdldCBzY3Jld2VkIHVwXG4gICAgICAgICAgdmFyIG5vZGVMaXN0TGVuZ3RoID0gbm9kZUxpc3QubGVuZ3RoO1xuICAgICAgICAgIHN0YWJsZU5vZGVMaXN0ID0gbmV3IEFycmF5KG5vZGVMaXN0TGVuZ3RoKTtcblxuICAgICAgICAgIC8vIGNyZWF0ZSBhIHNwYXJzZSBhcnJheSBieSBvbmx5IGNvcHlpbmcgdGhlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBsaW5rRm5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlua0Zucy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgaWR4ID0gbGlua0Zuc1tpXTtcbiAgICAgICAgICAgIHN0YWJsZU5vZGVMaXN0W2lkeF0gPSBub2RlTGlzdFtpZHhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5vZGVMaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBsaW5rRm5zLmxlbmd0aDsgaSA8IGlpOykge1xuICAgICAgICAgIG5vZGUgPSBzdGFibGVOb2RlTGlzdFtsaW5rRm5zW2krK11dO1xuICAgICAgICAgIG5vZGVMaW5rRm4gPSBsaW5rRm5zW2krK107XG4gICAgICAgICAgY2hpbGRMaW5rRm4gPSBsaW5rRm5zW2krK107XG5cbiAgICAgICAgICBpZiAobm9kZUxpbmtGbikge1xuICAgICAgICAgICAgaWYgKG5vZGVMaW5rRm4uc2NvcGUpIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyhqcUxpdGUobm9kZSksIGNoaWxkU2NvcGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oXG4gICAgICAgICAgICAgICAgICBzY29wZSwgbm9kZUxpbmtGbi50cmFuc2NsdWRlLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIW5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50ICYmIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICghcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gJiYgdHJhbnNjbHVkZUZuKSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgdHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5vZGVMaW5rRm4oY2hpbGRMaW5rRm4sIGNoaWxkU2NvcGUsIG5vZGUsICRyb290RWxlbWVudCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkTGlua0ZuKSB7XG4gICAgICAgICAgICBjaGlsZExpbmtGbihzY29wZSwgbm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbnNlY3V0aXZlVGV4dE5vZGVzKG5vZGVMaXN0LCBpZHgsIG5vdExpdmVMaXN0KSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVMaXN0W2lkeF07XG4gICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgdmFyIHNpYmxpbmc7XG5cbiAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfVEVYVCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHNpYmxpbmcgPSBwYXJlbnQgPyBub2RlLm5leHRTaWJsaW5nIDogbm9kZUxpc3RbaWR4ICsgMV07XG4gICAgICAgIGlmICghc2libGluZyB8fCBzaWJsaW5nLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfVEVYVCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS5ub2RlVmFsdWUgPSBub2RlLm5vZGVWYWx1ZSArIHNpYmxpbmcubm9kZVZhbHVlO1xuXG4gICAgICAgIGlmIChzaWJsaW5nLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBzaWJsaW5nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2libGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdExpdmVMaXN0ICYmIHNpYmxpbmcgPT09IG5vZGVMaXN0W2lkeCArIDFdKSB7XG4gICAgICAgICAgbm9kZUxpc3Quc3BsaWNlKGlkeCArIDEsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIHRyYW5zY2x1ZGVGbiwgcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgZnVuY3Rpb24gYm91bmRUcmFuc2NsdWRlRm4odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIGNvbnRhaW5pbmdTY29wZSkge1xuXG4gICAgICAgIGlmICghdHJhbnNjbHVkZWRTY29wZSkge1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUgPSBzY29wZS4kbmV3KGZhbHNlLCBjb250YWluaW5nU2NvcGUpO1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIHtcbiAgICAgICAgICBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjogcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnM6IGNvbnRyb2xsZXJzLFxuICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQ6IGZ1dHVyZVBhcmVudEVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIG5lZWQgIHRvIGF0dGFjaCB0aGUgdHJhbnNjbHVzaW9uIHNsb3RzIG9udG8gdGhlIGBib3VuZFRyYW5zY2x1ZGVGbmBcbiAgICAgIC8vIHNvIHRoYXQgdGhleSBhcmUgYXZhaWxhYmxlIGluc2lkZSB0aGUgYGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlYCBmdW5jdGlvblxuICAgICAgdmFyIGJvdW5kU2xvdHMgPSBib3VuZFRyYW5zY2x1ZGVGbi4kJHNsb3RzID0gY3JlYXRlTWFwKCk7XG4gICAgICBmb3IgKHZhciBzbG90TmFtZSBpbiB0cmFuc2NsdWRlRm4uJCRzbG90cykge1xuICAgICAgICBpZiAodHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdKSB7XG4gICAgICAgICAgYm91bmRTbG90c1tzbG90TmFtZV0gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgdHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdLCBwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBib3VuZFNsb3RzW3Nsb3ROYW1lXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvb2tzIGZvciBkaXJlY3RpdmVzIG9uIHRoZSBnaXZlbiBub2RlIGFuZCBhZGRzIHRoZW0gdG8gdGhlIGRpcmVjdGl2ZSBjb2xsZWN0aW9uIHdoaWNoIGlzXG4gICAgICogc29ydGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIGRpcmVjdGl2ZXMgQW4gYXJyYXkgdG8gd2hpY2ggdGhlIGRpcmVjdGl2ZXMgYXJlIGFkZGVkIHRvLiBUaGlzIGFycmF5IGlzIHNvcnRlZCBiZWZvcmVcbiAgICAgKiAgICAgICAgdGhlIGZ1bmN0aW9uIHJldHVybnMuXG4gICAgICogQHBhcmFtIGF0dHJzIFRoZSBzaGFyZWQgYXR0cnMgb2JqZWN0IHdoaWNoIGlzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIG5vcm1hbGl6ZWQgYXR0cmlidXRlcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG1heFByaW9yaXR5IE1heCBkaXJlY3RpdmUgcHJpb3JpdHkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29sbGVjdERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpIHtcbiAgICAgIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGUsXG4gICAgICAgICAgYXR0cnNNYXAgPSBhdHRycy4kYXR0cixcbiAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICBub2RlTmFtZSxcbiAgICAgICAgICBjbGFzc05hbWU7XG5cbiAgICAgIHN3aXRjaCAobm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfRUxFTUVOVDogLyogRWxlbWVudCAqL1xuXG4gICAgICAgICAgbm9kZU5hbWUgPSBub2RlTmFtZV8obm9kZSk7XG5cbiAgICAgICAgICAvLyB1c2UgdGhlIG5vZGUgbmFtZTogPGRpcmVjdGl2ZT5cbiAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcyxcbiAgICAgICAgICAgICAgZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lKSwgJ0UnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKTtcblxuICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciB0aGUgYXR0cmlidXRlc1xuICAgICAgICAgIGZvciAodmFyIGF0dHIsIG5hbWUsIG5OYW1lLCBuZ0F0dHJOYW1lLCB2YWx1ZSwgaXNOZ0F0dHIsIG5BdHRycyA9IG5vZGUuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgICBqID0gMCwgamogPSBuQXR0cnMgJiYgbkF0dHJzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBhdHRyU3RhcnROYW1lID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgYXR0ckVuZE5hbWUgPSBmYWxzZTtcblxuICAgICAgICAgICAgYXR0ciA9IG5BdHRyc1tqXTtcbiAgICAgICAgICAgIG5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgICAgICB2YWx1ZSA9IGF0dHIudmFsdWU7XG5cbiAgICAgICAgICAgIC8vIHN1cHBvcnQgbmdBdHRyIGF0dHJpYnV0ZSBiaW5kaW5nXG4gICAgICAgICAgICBuZ0F0dHJOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpO1xuICAgICAgICAgICAgaXNOZ0F0dHIgPSBOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKTtcbiAgICAgICAgICAgIGlmIChpc05nQXR0cikge1xuICAgICAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKVxuICAgICAgICAgICAgICAgIC5zdWJzdHIoOCkucmVwbGFjZSgvXyguKS9nLCBmdW5jdGlvbihtYXRjaCwgbGV0dGVyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtdWx0aUVsZW1lbnRNYXRjaCA9IG5nQXR0ck5hbWUubWF0Y2goTVVMVElfRUxFTUVOVF9ESVJfUkUpO1xuICAgICAgICAgICAgaWYgKG11bHRpRWxlbWVudE1hdGNoICYmIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG11bHRpRWxlbWVudE1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICBhdHRyU3RhcnROYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgYXR0ckVuZE5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDUpICsgJ2VuZCc7XG4gICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgYXR0cnNNYXBbbk5hbWVdID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChpc05nQXR0ciB8fCAhYXR0cnMuaGFzT3duUHJvcGVydHkobk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBuTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRydWU7IC8vIHByZXNlbmNlIG1lYW5zIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5OYW1lLCBpc05nQXR0cik7XG4gICAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdBJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgYXR0clN0YXJ0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ckVuZE5hbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBub2RlLmdldEF0dHJpYnV0ZSgndHlwZScpID09PSAnaGlkZGVuJykge1xuICAgICAgICAgICAgLy8gSGlkZGVuIGlucHV0IGVsZW1lbnRzIGNhbiBoYXZlIHN0cmFuZ2UgYmVoYXZpb3VyIHdoZW4gbmF2aWdhdGluZyBiYWNrIHRvIHRoZSBwYWdlXG4gICAgICAgICAgICAvLyBUaGlzIHRlbGxzIHRoZSBicm93c2VyIG5vdCB0byB0cnkgdG8gY2FjaGUgYW5kIHJlaW5zdGF0ZSBwcmV2aW91cyB2YWx1ZXNcbiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhdXRvY29tcGxldGUnLCAnb2ZmJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdXNlIGNsYXNzIGFzIGRpcmVjdGl2ZVxuICAgICAgICAgIGlmICghY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZCkgYnJlYWs7XG4gICAgICAgICAgY2xhc3NOYW1lID0gbm9kZS5jbGFzc05hbWU7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgLy8gTWF5YmUgU1ZHQW5pbWF0ZWRTdHJpbmdcbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLmFuaW1WYWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1N0cmluZyhjbGFzc05hbWUpICYmIGNsYXNzTmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMoY2xhc3NOYW1lKSkpIHtcbiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMl0pO1xuICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQycsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFszXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnN1YnN0cihtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9URVhUOiAvKiBUZXh0IE5vZGUgKi9cbiAgICAgICAgICBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgbm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9DT01NRU5UOiAvKiBDb21tZW50ICovXG4gICAgICAgICAgaWYgKCFjb21tZW50RGlyZWN0aXZlc0VuYWJsZWQpIGJyZWFrO1xuICAgICAgICAgIGNvbGxlY3RDb21tZW50RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRpcmVjdGl2ZXMuc29ydChieVByaW9yaXR5KTtcbiAgICAgIHJldHVybiBkaXJlY3RpdmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbGxlY3RDb21tZW50RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkge1xuICAgICAgLy8gZnVuY3Rpb24gY3JlYXRlZCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlLCB0cnkvY2F0Y2ggZGlzYWJsZXNcbiAgICAgIC8vIHRoZSBvcHRpbWl6YXRpb24gb2YgdGhlIHdob2xlIGZ1bmN0aW9uICMxNDg0OFxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG1hdGNoID0gQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMobm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICB2YXIgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMV0pO1xuICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdNJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbMl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyB0dXJucyBvdXQgdGhhdCB1bmRlciBzb21lIGNpcmN1bXN0YW5jZXMgSUU5IHRocm93cyBlcnJvcnMgd2hlbiBvbmUgYXR0ZW1wdHMgdG8gcmVhZFxuICAgICAgICAvLyBjb21tZW50J3Mgbm9kZSB2YWx1ZS5cbiAgICAgICAgLy8gSnVzdCBpZ25vcmUgaXQgYW5kIGNvbnRpbnVlLiAoQ2FuJ3Qgc2VlbSB0byByZXByb2R1Y2UgaW4gdGVzdCBjYXNlLilcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIG5vZGUgd2l0aCBhIGRpcmVjdGl2ZS1zdGFydCBpdCBjb2xsZWN0cyBhbGwgb2YgdGhlIHNpYmxpbmdzIHVudGlsIGl0IGZpbmRzXG4gICAgICogZGlyZWN0aXZlLWVuZC5cbiAgICAgKiBAcGFyYW0gbm9kZVxuICAgICAqIEBwYXJhbSBhdHRyU3RhcnRcbiAgICAgKiBAcGFyYW0gYXR0ckVuZFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdyb3VwU2Nhbihub2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgdmFyIGRlcHRoID0gMDtcbiAgICAgIGlmIChhdHRyU3RhcnQgJiYgbm9kZS5oYXNBdHRyaWJ1dGUgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndXRlcmRpcicsXG4gICAgICAgICAgICAgICAgICAgICAgJ1VudGVybWluYXRlZCBhdHRyaWJ1dGUsIGZvdW5kIFxcJ3swfVxcJyBidXQgbm8gbWF0Y2hpbmcgXFwnezF9XFwnIGZvdW5kLicsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkgZGVwdGgrKztcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyRW5kKSkgZGVwdGgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqcUxpdGUobm9kZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyYXBwZXIgZm9yIGxpbmtpbmcgZnVuY3Rpb24gd2hpY2ggY29udmVydHMgbm9ybWFsIGxpbmtpbmcgZnVuY3Rpb24gaW50byBhIGdyb3VwZWRcbiAgICAgKiBsaW5raW5nIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSBsaW5rRm5cbiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICogQHBhcmFtIGF0dHJFbmRcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIobGlua0ZuLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBncm91cGVkRWxlbWVudHNMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbikge1xuICAgICAgICBlbGVtZW50ID0gZ3JvdXBTY2FuKGVsZW1lbnRbMF0sIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgIHJldHVybiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiBnZW5lcmF0b3IgdGhhdCBpcyB1c2VkIHRvIHN1cHBvcnQgYm90aCBlYWdlciBhbmQgbGF6eSBjb21waWxhdGlvblxuICAgICAqIGxpbmtpbmcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIGVhZ2VyXG4gICAgICogQHBhcmFtICRjb21waWxlTm9kZXNcbiAgICAgKiBAcGFyYW0gdHJhbnNjbHVkZUZuXG4gICAgICogQHBhcmFtIG1heFByaW9yaXR5XG4gICAgICogQHBhcmFtIGlnbm9yZURpcmVjdGl2ZVxuICAgICAqIEBwYXJhbSBwcmV2aW91c0NvbXBpbGVDb250ZXh0XG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBpbGF0aW9uR2VuZXJhdG9yKGVhZ2VyLCAkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBjb21waWxlZDtcblxuICAgICAgaWYgKGVhZ2VyKSB7XG4gICAgICAgIHJldHVybiBjb21waWxlKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uIGxhenlDb21waWxhdGlvbigpIHtcbiAgICAgICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgICAgIGNvbXBpbGVkID0gY29tcGlsZSgkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuXG4gICAgICAgICAgLy8gTnVsbCBvdXQgYWxsIG9mIHRoZXNlIHJlZmVyZW5jZXMgaW4gb3JkZXIgdG8gbWFrZSB0aGVtIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICAgICAgICAvLyBzaW5jZSB0aGlzIGlzIGEgcG90ZW50aWFsbHkgbG9uZyBsaXZlZCBjbG9zdXJlXG4gICAgICAgICAgJGNvbXBpbGVOb2RlcyA9IHRyYW5zY2x1ZGVGbiA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21waWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbmNlIHRoZSBkaXJlY3RpdmVzIGhhdmUgYmVlbiBjb2xsZWN0ZWQsIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGFyZSBleGVjdXRlZC4gVGhpcyBtZXRob2RcbiAgICAgKiBpcyByZXNwb25zaWJsZSBmb3IgaW5saW5pbmcgZGlyZWN0aXZlIHRlbXBsYXRlcyBhcyB3ZWxsIGFzIHRlcm1pbmF0aW5nIHRoZSBhcHBsaWNhdGlvblxuICAgICAqIG9mIHRoZSBkaXJlY3RpdmVzIGlmIHRoZSB0ZXJtaW5hbCBkaXJlY3RpdmUgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRpcmVjdGl2ZXMgQXJyYXkgb2YgY29sbGVjdGVkIGRpcmVjdGl2ZXMgdG8gZXhlY3V0ZSB0aGVpciBjb21waWxlIGZ1bmN0aW9uLlxuICAgICAqICAgICAgICB0aGlzIG5lZWRzIHRvIGJlIHByZS1zb3J0ZWQgYnkgcHJpb3JpdHkgb3JkZXIuXG4gICAgICogQHBhcmFtIHtOb2RlfSBjb21waWxlTm9kZSBUaGUgcmF3IERPTSBub2RlIHRvIGFwcGx5IHRoZSBjb21waWxlIGZ1bmN0aW9ucyB0b1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZUF0dHJzIFRoZSBzaGFyZWQgYXR0cmlidXRlIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuXG4gICAgICogQHBhcmFtIHtKUUxpdGV9IGpxQ29sbGVjdGlvbiBJZiB3ZSBhcmUgd29ya2luZyBvbiB0aGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlIHRoZW4gdGhpc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQgaGFzIHRoZSByb290IGpxTGl0ZSBhcnJheSBzbyB0aGF0IHdlIGNhbiByZXBsYWNlIG5vZGVzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiBpdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSBBbiBvcHRpb25hbCBkaXJlY3RpdmUgdGhhdCB3aWxsIGJlIGlnbm9yZWQgd2hlblxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBpbGluZyB0aGUgdHJhbnNjbHVzaW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcHJlTGlua0Zuc1xuICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcG9zdExpbmtGbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJldmlvdXNDb21waWxlQ29udGV4dCBDb250ZXh0IHVzZWQgZm9yIHByZXZpb3VzIGNvbXBpbGF0aW9uIG9mIHRoZSBjdXJyZW50XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gbGlua0ZuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCB0cmFuc2NsdWRlRm4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpxQ29sbGVjdGlvbiwgb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgfHwge307XG5cbiAgICAgIHZhciB0ZXJtaW5hbFByaW9yaXR5ID0gLU51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5ld1Njb3BlRGlyZWN0aXZlLFxuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5jb250cm9sbGVyRGlyZWN0aXZlcyxcbiAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQudGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQubm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlID0gZmFsc2UsXG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSBmYWxzZSxcbiAgICAgICAgICBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPSBqcUxpdGUoY29tcGlsZU5vZGUpLFxuICAgICAgICAgIGRpcmVjdGl2ZSxcbiAgICAgICAgICBkaXJlY3RpdmVOYW1lLFxuICAgICAgICAgICR0ZW1wbGF0ZSxcbiAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLFxuICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gdHJhbnNjbHVkZUZuLFxuICAgICAgICAgIGxpbmtGbixcbiAgICAgICAgICBkaWRTY2FuRm9yTXVsdGlwbGVUcmFuc2NsdXNpb24gPSBmYWxzZSxcbiAgICAgICAgICBtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yID0gZmFsc2UsXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWU7XG5cbiAgICAgIC8vIGV4ZWN1dGVzIGFsbCBkaXJlY3RpdmVzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICB2YXIgYXR0clN0YXJ0ID0gZGlyZWN0aXZlLiQkc3RhcnQ7XG4gICAgICAgIHZhciBhdHRyRW5kID0gZGlyZWN0aXZlLiQkZW5kO1xuXG4gICAgICAgIC8vIGNvbGxlY3QgbXVsdGlibG9jayBzZWN0aW9uc1xuICAgICAgICBpZiAoYXR0clN0YXJ0KSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gZ3JvdXBTY2FuKGNvbXBpbGVOb2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICB9XG4gICAgICAgICR0ZW1wbGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodGVybWluYWxQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkge1xuICAgICAgICAgIGJyZWFrOyAvLyBwcmV2ZW50IGZ1cnRoZXIgcHJvY2Vzc2luZyBvZiBkaXJlY3RpdmVzXG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5zY29wZTtcblxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUpIHtcblxuICAgICAgICAgIC8vIHNraXAgdGhlIGNoZWNrIGZvciBkaXJlY3RpdmVzIHdpdGggYXN5bmMgdGVtcGxhdGVzLCB3ZSdsbCBjaGVjayB0aGUgZGVyaXZlZCBzeW5jXG4gICAgICAgICAgLy8gZGlyZWN0aXZlIHdoZW4gdGhlIHRlbXBsYXRlIGFycml2ZXNcbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGFuIGlzb2xhdGVkIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzIG5vIHNjb3BlIG9mIGFueSBraW5kIGFscmVhZHlcbiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGEgY2hpbGQgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgbm8gaXNvbGF0ZWQgc2NvcGUgYWxyZWFkeVxuICAgICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnbmV3L2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBkaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBuZXdTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlLm5hbWU7XG5cbiAgICAgICAgLy8gSWYgd2UgZW5jb3VudGVyIGEgY29uZGl0aW9uIHRoYXQgY2FuIHJlc3VsdCBpbiB0cmFuc2NsdXNpb24gb24gdGhlIGRpcmVjdGl2ZSxcbiAgICAgICAgLy8gdGhlbiBzY2FuIGFoZWFkIGluIHRoZSByZW1haW5pbmcgZGlyZWN0aXZlcyBmb3Igb3RoZXJzIHRoYXQgbWF5IGNhdXNlIGEgbXVsdGlwbGVcbiAgICAgICAgLy8gdHJhbnNjbHVzaW9uIGVycm9yIHRvIGJlIHRocm93biBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIHByb2Nlc3MuICBJZiBhIG1hdGNoaW5nIGRpcmVjdGl2ZVxuICAgICAgICAvLyBpcyBmb3VuZCwgdGhlbiB3ZSBrbm93IHRoYXQgd2hlbiB3ZSBlbmNvdW50ZXIgYSB0cmFuc2NsdWRlZCBkaXJlY3RpdmUsIHdlIG5lZWQgdG8gZWFnZXJseVxuICAgICAgICAvLyBjb21waWxlIHRoZSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gcmF0aGVyIHRoYW4gZG9pbmcgaXQgbGF6aWx5IGluIG9yZGVyIHRvIHRocm93XG4gICAgICAgIC8vIGV4Y2VwdGlvbnMgYXQgdGhlIGNvcnJlY3QgdGltZVxuICAgICAgICBpZiAoIWRpZFNjYW5Gb3JNdWx0aXBsZVRyYW5zY2x1c2lvbiAmJiAoKGRpcmVjdGl2ZS5yZXBsYWNlICYmIChkaXJlY3RpdmUudGVtcGxhdGVVcmwgfHwgZGlyZWN0aXZlLnRlbXBsYXRlKSlcbiAgICAgICAgICAgIHx8IChkaXJlY3RpdmUudHJhbnNjbHVkZSAmJiAhZGlyZWN0aXZlLiQkdGxiKSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FuZGlkYXRlRGlyZWN0aXZlO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2Nhbm5pbmdJbmRleCA9IGkgKyAxOyAoY2FuZGlkYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlc1tzY2FubmluZ0luZGV4KytdKTspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjYW5kaWRhdGVEaXJlY3RpdmUudHJhbnNjbHVkZSAmJiAhY2FuZGlkYXRlRGlyZWN0aXZlLiQkdGxiKVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgKGNhbmRpZGF0ZURpcmVjdGl2ZS5yZXBsYWNlICYmIChjYW5kaWRhdGVEaXJlY3RpdmUudGVtcGxhdGVVcmwgfHwgY2FuZGlkYXRlRGlyZWN0aXZlLnRlbXBsYXRlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pZ2h0SGF2ZU11bHRpcGxlVHJhbnNjbHVzaW9uRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkaWRTY2FuRm9yTXVsdGlwbGVUcmFuc2NsdXNpb24gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwgJiYgZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IGNvbnRyb2xsZXJEaXJlY3RpdmVzIHx8IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCdcXCcnICsgZGlyZWN0aXZlTmFtZSArICdcXCcgY29udHJvbGxlcicsXG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS50cmFuc2NsdWRlO1xuXG4gICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSkge1xuICAgICAgICAgIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIG5nSWYgYW5kIG5nUmVwZWF0IHNvIHRoYXQgd2UgZG9uJ3QgY29tcGxhaW4gYWJvdXQgZHVwbGljYXRlIHRyYW5zY2x1c2lvbi5cbiAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBzaG91bGQgb25seSBiZSB1c2VkIGJ5IGRpcmVjdGl2ZXMgdGhhdCBrbm93IGhvdyB0byBzYWZlbHkgaGFuZGxlIGVsZW1lbnQgdHJhbnNjbHVzaW9uLFxuICAgICAgICAgIC8vIHdoZXJlIHRoZSB0cmFuc2NsdWRlZCBub2RlcyBhcmUgYWRkZWQgb3IgcmVwbGFjZWQgYWZ0ZXIgbGlua2luZy5cbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS4kJHRsYikge1xuICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RyYW5zY2x1c2lvbicsIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID09PSAnZWxlbWVudCcpIHtcbiAgICAgICAgICAgIGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHk7XG4gICAgICAgICAgICAkdGVtcGxhdGUgPSAkY29tcGlsZU5vZGU7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUgPSB0ZW1wbGF0ZUF0dHJzLiQkZWxlbWVudCA9XG4gICAgICAgICAgICAgICAganFMaXRlKGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KGRpcmVjdGl2ZU5hbWUsIHRlbXBsYXRlQXR0cnNbZGlyZWN0aXZlTmFtZV0pKTtcbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdO1xuICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCBzbGljZUFyZ3MoJHRlbXBsYXRlKSwgY29tcGlsZU5vZGUpO1xuXG4gICAgICAgICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPCA1MFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTQwNDFcblxuICAgICAgICAgICAgLy8gSW4gdGhlIHZlcnNpb25zIG9mIFY4IHByaW9yIHRvIENocm9tZSA1MCwgdGhlIGRvY3VtZW50IGZyYWdtZW50IHRoYXQgaXMgY3JlYXRlZFxuICAgICAgICAgICAgLy8gaW4gdGhlIGByZXBsYWNlV2l0aGAgZnVuY3Rpb24gaXMgaW1wcm9wZXJseSBnYXJiYWdlIGNvbGxlY3RlZCBkZXNwaXRlIHN0aWxsXG4gICAgICAgICAgICAvLyBiZWluZyByZWZlcmVuY2VkIGJ5IHRoZSBgcGFyZW50Tm9kZWAgcHJvcGVydHkgb2YgYWxsIG9mIHRoZSBjaGlsZCBub2Rlcy4gIEJ5IGFkZGluZ1xuICAgICAgICAgICAgLy8gYSByZWZlcmVuY2UgdG8gdGhlIGZyYWdtZW50IHZpYSBhIGRpZmZlcmVudCBwcm9wZXJ0eSwgd2UgY2FuIGF2b2lkIHRoYXQgaW5jb3JyZWN0XG4gICAgICAgICAgICAvLyBiZWhhdmlvci5cbiAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIGxpbmUgYWZ0ZXIgQ2hyb21lIDUwIGhhcyBiZWVuIHJlbGVhc2VkXG4gICAgICAgICAgICAkdGVtcGxhdGVbMF0uJCRwYXJlbnROb2RlID0gJHRlbXBsYXRlWzBdLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsYXRpb25HZW5lcmF0b3IobWlnaHRIYXZlTXVsdGlwbGVUcmFuc2NsdXNpb25FcnJvciwgJHRlbXBsYXRlLCB0cmFuc2NsdWRlRm4sIHRlcm1pbmFsUHJpb3JpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSAmJiByZXBsYWNlRGlyZWN0aXZlLm5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHBhc3MgaW46XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIGNvbnRyb2xsZXJEaXJlY3RpdmVzIC0gb3RoZXJ3aXNlIHdlJ2xsIGNyZWF0ZSBkdXBsaWNhdGVzIGNvbnRyb2xsZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSBvciB0ZW1wbGF0ZURpcmVjdGl2ZSAtIGNvbWJpbmluZyB0ZW1wbGF0ZXMgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBlbGVtZW50IHRyYW5zY2x1c2lvbiBkb2Vzbid0IG1ha2Ugc2Vuc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCBvbmx5IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgc28gdGhhdCB3ZSBwcmV2ZW50IHB1dHRpbmcgdHJhbnNjbHVzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbiB0aGUgc2FtZSBlbGVtZW50IG1vcmUgdGhhbiBvbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZTogbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHZhciBzbG90cyA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoanFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpKS5jb250ZW50cygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRyYW5zY2x1c2lvbiBzbG90cyxcbiAgICAgICAgICAgICAgLy8gY29sbGVjdCB0aGVtIHVwLCBjb21waWxlIHRoZW0gYW5kIHN0b3JlIHRoZWlyIHRyYW5zY2x1c2lvbiBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107XG5cbiAgICAgICAgICAgICAgdmFyIHNsb3RNYXAgPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgICAgICAgdmFyIGZpbGxlZFNsb3RzID0gY3JlYXRlTWFwKCk7XG5cbiAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGVsZW1lbnQgc2VsZWN0b3JzXG4gICAgICAgICAgICAgIGZvckVhY2goZGlyZWN0aXZlVmFsdWUsIGZ1bmN0aW9uKGVsZW1lbnRTZWxlY3Rvciwgc2xvdE5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBhbiBlbGVtZW50IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIGEgPyB0aGVuIGl0IGlzIG9wdGlvbmFsXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsID0gKGVsZW1lbnRTZWxlY3Rvci5jaGFyQXQoMCkgPT09ICc/Jyk7XG4gICAgICAgICAgICAgICAgZWxlbWVudFNlbGVjdG9yID0gb3B0aW9uYWwgPyBlbGVtZW50U2VsZWN0b3Iuc3Vic3RyaW5nKDEpIDogZWxlbWVudFNlbGVjdG9yO1xuXG4gICAgICAgICAgICAgICAgc2xvdE1hcFtlbGVtZW50U2VsZWN0b3JdID0gc2xvdE5hbWU7XG5cbiAgICAgICAgICAgICAgICAvLyBXZSBleHBsaWNpdGx5IGFzc2lnbiBgbnVsbGAgc2luY2UgdGhpcyBpbXBsaWVzIHRoYXQgYSBzbG90IHdhcyBkZWZpbmVkIGJ1dCBub3QgZmlsbGVkLlxuICAgICAgICAgICAgICAgIC8vIExhdGVyIHdoZW4gY2FsbGluZyBib3VuZFRyYW5zY2x1c2lvbiBmdW5jdGlvbnMgd2l0aCBhIHNsb3QgbmFtZSB3ZSBvbmx5IGVycm9yIGlmIHRoZVxuICAgICAgICAgICAgICAgIC8vIHNsb3QgaXMgYHVuZGVmaW5lZGBcbiAgICAgICAgICAgICAgICBzbG90c1tzbG90TmFtZV0gPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gZmlsbGVkU2xvdHMgY29udGFpbnMgYHRydWVgIGZvciBhbGwgc2xvdHMgdGhhdCBhcmUgZWl0aGVyIG9wdGlvbmFsIG9yIGhhdmUgYmVlblxuICAgICAgICAgICAgICAgIC8vIGZpbGxlZC4gVGhpcyBpcyB1c2VkIHRvIGNoZWNrIHRoYXQgd2UgaGF2ZSBub3QgbWlzc2VkIGFueSByZXF1aXJlZCBzbG90c1xuICAgICAgICAgICAgICAgIGZpbGxlZFNsb3RzW3Nsb3ROYW1lXSA9IG9wdGlvbmFsO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAvLyBBZGQgdGhlIG1hdGNoaW5nIGVsZW1lbnRzIGludG8gdGhlaXIgc2xvdFxuICAgICAgICAgICAgICBmb3JFYWNoKCRjb21waWxlTm9kZS5jb250ZW50cygpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsb3ROYW1lID0gc2xvdE1hcFtkaXJlY3RpdmVOb3JtYWxpemUobm9kZU5hbWVfKG5vZGUpKV07XG4gICAgICAgICAgICAgICAgaWYgKHNsb3ROYW1lKSB7XG4gICAgICAgICAgICAgICAgICBmaWxsZWRTbG90c1tzbG90TmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdID0gc2xvdHNbc2xvdE5hbWVdIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICR0ZW1wbGF0ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHJlcXVpcmVkIHNsb3RzIHRoYXQgd2VyZSBub3QgZmlsbGVkXG4gICAgICAgICAgICAgIGZvckVhY2goZmlsbGVkU2xvdHMsIGZ1bmN0aW9uKGZpbGxlZCwgc2xvdE5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbGxlZCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3JlcXNsb3QnLCAnUmVxdWlyZWQgdHJhbnNjbHVzaW9uIHNsb3QgYHswfWAgd2FzIG5vdCBmaWxsZWQuJywgc2xvdE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgZm9yICh2YXIgc2xvdE5hbWUgaW4gc2xvdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xvdHNbc2xvdE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAvLyBPbmx5IGRlZmluZSBhIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiBpZiB0aGUgc2xvdCB3YXMgZmlsbGVkXG4gICAgICAgICAgICAgICAgICBzbG90c1tzbG90TmFtZV0gPSBjb21waWxhdGlvbkdlbmVyYXRvcihtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yLCBzbG90c1tzbG90TmFtZV0sIHRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpOyAvLyBjbGVhciBjb250ZW50c1xuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxhdGlvbkdlbmVyYXRvcihtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yLCAkdGVtcGxhdGUsIHRyYW5zY2x1ZGVGbiwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCwgeyBuZWVkc05ld1Njb3BlOiBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUgfHwgZGlyZWN0aXZlLiQkbmV3U2NvcGV9KTtcbiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuLiQkc2xvdHMgPSBzbG90cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlKSB7XG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IChpc0Z1bmN0aW9uKGRpcmVjdGl2ZS50ZW1wbGF0ZSkpXG4gICAgICAgICAgICAgID8gZGlyZWN0aXZlLnRlbXBsYXRlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycylcbiAgICAgICAgICAgICAgOiBkaXJlY3RpdmUudGVtcGxhdGU7XG5cbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRlbm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlVmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoZGlyZWN0aXZlVmFsdWUpKSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKGRpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZSwgdHJpbShkaXJlY3RpdmVWYWx1ZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdO1xuXG4gICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JyxcbiAgICAgICAgICAgICAgICAgICdUZW1wbGF0ZSBmb3IgZGlyZWN0aXZlIFxcJ3swfVxcJyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX0nLFxuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXBsYWNlV2l0aChqcUNvbGxlY3Rpb24sICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpO1xuXG4gICAgICAgICAgICB2YXIgbmV3VGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319O1xuXG4gICAgICAgICAgICAvLyBjb21iaW5lIGRpcmVjdGl2ZXMgZnJvbSB0aGUgb3JpZ2luYWwgbm9kZSBhbmQgZnJvbSB0aGUgdGVtcGxhdGU6XG4gICAgICAgICAgICAvLyAtIHRha2UgdGhlIGFycmF5IG9mIGRpcmVjdGl2ZXMgZm9yIHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgLy8gLSBzcGxpdCBpdCBpbnRvIHR3byBwYXJ0cywgdGhvc2UgdGhhdCBhbHJlYWR5IGFwcGxpZWQgKHByb2Nlc3NlZCkgYW5kIHRob3NlIHRoYXQgd2VyZW4ndCAodW5wcm9jZXNzZWQpXG4gICAgICAgICAgICAvLyAtIGNvbGxlY3QgZGlyZWN0aXZlcyBmcm9tIHRoZSB0ZW1wbGF0ZSBhbmQgc29ydCB0aGVtIGJ5IHByaW9yaXR5XG4gICAgICAgICAgICAvLyAtIGNvbWJpbmUgZGlyZWN0aXZlcyBhczogcHJvY2Vzc2VkICsgdGVtcGxhdGUgKyB1bnByb2Nlc3NlZFxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgbmV3VGVtcGxhdGVBdHRycyk7XG4gICAgICAgICAgICB2YXIgdW5wcm9jZXNzZWREaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5zcGxpY2UoaSArIDEsIGRpcmVjdGl2ZXMubGVuZ3RoIC0gKGkgKyAxKSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgbmV3U2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIGRpcmVjdGl2ZSBjYXVzZWQgdGhlIGN1cnJlbnQgZWxlbWVudCB0byBiZSByZXBsYWNlZCBidXQgdGhpcyBlbGVtZW50XG4gICAgICAgICAgICAgIC8vIGFsc28gbmVlZHMgdG8gaGF2ZSBhIG5ldyBzY29wZSwgc28gd2UgbmVlZCB0byB0ZWxsIHRoZSB0ZW1wbGF0ZSBkaXJlY3RpdmVzXG4gICAgICAgICAgICAgIC8vIHRoYXQgdGhleSB3b3VsZCBuZWVkIHRvIGdldCB0aGVpciBzY29wZSBmcm9tIGZ1cnRoZXIgdXAsIGlmIHRoZXkgcmVxdWlyZSB0cmFuc2NsdXNpb25cbiAgICAgICAgICAgICAgbWFya0RpcmVjdGl2ZVNjb3BlKHRlbXBsYXRlRGlyZWN0aXZlcywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBuZXdTY29wZURpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5jb25jYXQodGVtcGxhdGVEaXJlY3RpdmVzKS5jb25jYXQodW5wcm9jZXNzZWREaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRlbXBsYXRlQXR0cnMsIG5ld1RlbXBsYXRlQXR0cnMpO1xuXG4gICAgICAgICAgICBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChkaXJlY3RpdmVWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgIGhhc1RlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mdW5jLWFzc2lnblxuICAgICAgICAgIG5vZGVMaW5rRm4gPSBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcy5zcGxpY2UoaSwgZGlyZWN0aXZlcy5sZW5ndGggLSBpKSwgJGNvbXBpbGVOb2RlLFxuICAgICAgICAgICAgICB0ZW1wbGF0ZUF0dHJzLCBqcUNvbGxlY3Rpb24sIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgJiYgY2hpbGRUcmFuc2NsdWRlRm4sIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXM6IGNvbnRyb2xsZXJEaXJlY3RpdmVzLFxuICAgICAgICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlOiAobmV3U2NvcGVEaXJlY3RpdmUgIT09IGRpcmVjdGl2ZSkgJiYgbmV3U2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlOiBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmU6IHRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3RpdmUuY29tcGlsZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsaW5rRm4gPSBkaXJlY3RpdmUuY29tcGlsZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIGNoaWxkVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gZGlyZWN0aXZlLiQkb3JpZ2luYWxEaXJlY3RpdmUgfHwgZGlyZWN0aXZlO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlua0ZuKSkge1xuICAgICAgICAgICAgICBhZGRMaW5rRm5zKG51bGwsIGJpbmQoY29udGV4dCwgbGlua0ZuKSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlua0ZuKSB7XG4gICAgICAgICAgICAgIGFkZExpbmtGbnMoYmluZChjb250ZXh0LCBsaW5rRm4ucHJlKSwgYmluZChjb250ZXh0LCBsaW5rRm4ucG9zdCksIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSwgc3RhcnRpbmdUYWcoJGNvbXBpbGVOb2RlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZXJtaW5hbCkge1xuICAgICAgICAgIG5vZGVMaW5rRm4udGVybWluYWwgPSB0cnVlO1xuICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBNYXRoLm1heCh0ZXJtaW5hbFByaW9yaXR5LCBkaXJlY3RpdmUucHJpb3JpdHkpO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgbm9kZUxpbmtGbi5zY29wZSA9IG5ld1Njb3BlRGlyZWN0aXZlICYmIG5ld1Njb3BlRGlyZWN0aXZlLnNjb3BlID09PSB0cnVlO1xuICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCA9IGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmU7XG4gICAgICBub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudCA9IGhhc1RlbXBsYXRlO1xuICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlID0gY2hpbGRUcmFuc2NsdWRlRm47XG5cbiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZTtcblxuICAgICAgLy8gbWlnaHQgYmUgbm9ybWFsIG9yIGRlbGF5ZWQgbm9kZUxpbmtGbiBkZXBlbmRpbmcgb24gaWYgdGVtcGxhdGVVcmwgaXMgcHJlc2VudFxuICAgICAgcmV0dXJuIG5vZGVMaW5rRm47XG5cbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgIGZ1bmN0aW9uIGFkZExpbmtGbnMocHJlLCBwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgICAgaWYgKHByZSkge1xuICAgICAgICAgIGlmIChhdHRyU3RhcnQpIHByZSA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHByZSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICBwcmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlO1xuICAgICAgICAgIHByZS5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgICBwcmUgPSBjbG9uZUFuZEFubm90YXRlRm4ocHJlLCB7aXNvbGF0ZVNjb3BlOiB0cnVlfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZUxpbmtGbnMucHVzaChwcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3N0KSB7XG4gICAgICAgICAgaWYgKGF0dHJTdGFydCkgcG9zdCA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgcG9zdC5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7XG4gICAgICAgICAgcG9zdC5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgICBwb3N0ID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHBvc3QsIHtpc29sYXRlU2NvcGU6IHRydWV9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9zdExpbmtGbnMucHVzaChwb3N0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIGksIGlpLCBsaW5rRm4sIGlzb2xhdGVTY29wZSwgY29udHJvbGxlclNjb3BlLCBlbGVtZW50Q29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbiwgJGVsZW1lbnQsXG4gICAgICAgICAgICBhdHRycywgc2NvcGVCaW5kaW5nSW5mbztcblxuICAgICAgICBpZiAoY29tcGlsZU5vZGUgPT09IGxpbmtOb2RlKSB7XG4gICAgICAgICAgYXR0cnMgPSB0ZW1wbGF0ZUF0dHJzO1xuICAgICAgICAgICRlbGVtZW50ID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQgPSBqcUxpdGUobGlua05vZGUpO1xuICAgICAgICAgIGF0dHJzID0gbmV3IEF0dHJpYnV0ZXMoJGVsZW1lbnQsIHRlbXBsYXRlQXR0cnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udHJvbGxlclNjb3BlID0gc2NvcGU7XG4gICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICBpc29sYXRlU2NvcGUgPSBzY29wZS4kbmV3KHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKG5ld1Njb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgY29udHJvbGxlclNjb3BlID0gc2NvcGUuJHBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgIC8vIHRyYWNrIGBib3VuZFRyYW5zY2x1ZGVGbmAgc28gaXQgY2FuIGJlIHVud3JhcHBlZCBpZiBgdHJhbnNjbHVkZUZuYFxuICAgICAgICAgIC8vIGlzIGxhdGVyIHBhc3NlZCBhcyBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIGBwdWJsaWNMaW5rRm5gXG4gICAgICAgICAgdHJhbnNjbHVkZUZuID0gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGU7XG4gICAgICAgICAgdHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgICAgLy8gZXhwb3NlIHRoZSBzbG90cyBvbiB0aGUgYCR0cmFuc2NsdWRlYCBmdW5jdGlvblxuICAgICAgICAgIHRyYW5zY2x1ZGVGbi5pc1Nsb3RGaWxsZWQgPSBmdW5jdGlvbihzbG90TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuICEhYm91bmRUcmFuc2NsdWRlRm4uJCRzbG90c1tzbG90TmFtZV07XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250cm9sbGVyRGlyZWN0aXZlcykge1xuICAgICAgICAgIGVsZW1lbnRDb250cm9sbGVycyA9IHNldHVwQ29udHJvbGxlcnMoJGVsZW1lbnQsIGF0dHJzLCB0cmFuc2NsdWRlRm4sIGNvbnRyb2xsZXJEaXJlY3RpdmVzLCBpc29sYXRlU2NvcGUsIHNjb3BlLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICAgIC8vIEluaXRpYWxpemUgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBmb3IgbmV3IGlzb2xhdGUgc2NvcGUgZGlyZWN0aXZlLlxuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oJGVsZW1lbnQsIGlzb2xhdGVTY29wZSwgdHJ1ZSwgISh0ZW1wbGF0ZURpcmVjdGl2ZSAmJiAodGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fFxuICAgICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkb3JpZ2luYWxEaXJlY3RpdmUpKSk7XG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgIGlzb2xhdGVTY29wZS4kJGlzb2xhdGVCaW5kaW5ncyA9XG4gICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncztcbiAgICAgICAgICBzY29wZUJpbmRpbmdJbmZvID0gaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKHNjb3BlLCBhdHRycywgaXNvbGF0ZVNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGVTY29wZS4kJGlzb2xhdGVCaW5kaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICAgIGlmIChzY29wZUJpbmRpbmdJbmZvLnJlbW92ZVdhdGNoZXMpIHtcbiAgICAgICAgICAgIGlzb2xhdGVTY29wZS4kb24oJyRkZXN0cm95Jywgc2NvcGVCaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWFsaXplIGJpbmRUb0NvbnRyb2xsZXIgYmluZGluZ3NcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBlbGVtZW50Q29udHJvbGxlcnMpIHtcbiAgICAgICAgICB2YXIgY29udHJvbGxlckRpcmVjdGl2ZSA9IGNvbnRyb2xsZXJEaXJlY3RpdmVzW25hbWVdO1xuICAgICAgICAgIHZhciBjb250cm9sbGVyID0gZWxlbWVudENvbnRyb2xsZXJzW25hbWVdO1xuICAgICAgICAgIHZhciBiaW5kaW5ncyA9IGNvbnRyb2xsZXJEaXJlY3RpdmUuJCRiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyO1xuXG4gICAgICAgICAgaWYgKHByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCkge1xuICAgICAgICAgICAgaWYgKGJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuYmluZGluZ0luZm8gPVxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhjb250cm9sbGVyU2NvcGUsIGF0dHJzLCBjb250cm9sbGVyLmluc3RhbmNlLCBiaW5kaW5ncywgY29udHJvbGxlckRpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmJpbmRpbmdJbmZvID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb250cm9sbGVyUmVzdWx0ID0gY29udHJvbGxlcigpO1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXJSZXN1bHQgIT09IGNvbnRyb2xsZXIuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgaGFzIGEgcmV0dXJuIHZhbHVlLCBvdmVyd3JpdGUgdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgIC8vIGZyb20gc2V0dXBDb250cm9sbGVyc1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmluc3RhbmNlID0gY29udHJvbGxlclJlc3VsdDtcbiAgICAgICAgICAgICAgJGVsZW1lbnQuZGF0YSgnJCcgKyBjb250cm9sbGVyRGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJSZXN1bHQpO1xuICAgICAgICAgICAgICBpZiAoY29udHJvbGxlci5iaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5iaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udHJvbGxlci5iaW5kaW5nSW5mbyA9XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKGNvbnRyb2xsZXJTY29wZSwgYXR0cnMsIGNvbnRyb2xsZXIuaW5zdGFuY2UsIGJpbmRpbmdzLCBjb250cm9sbGVyRGlyZWN0aXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udHJvbGxlci5pbnN0YW5jZSA9IGNvbnRyb2xsZXIoKTtcbiAgICAgICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgY29udHJvbGxlckRpcmVjdGl2ZS5uYW1lICsgJ0NvbnRyb2xsZXInLCBjb250cm9sbGVyLmluc3RhbmNlKTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYmluZGluZ0luZm8gPVxuICAgICAgICAgICAgICBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MoY29udHJvbGxlclNjb3BlLCBhdHRycywgY29udHJvbGxlci5pbnN0YW5jZSwgYmluZGluZ3MsIGNvbnRyb2xsZXJEaXJlY3RpdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJpbmQgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXJzIHRvIHRoZSBjb250cm9sbGVyLCBpZiBgcmVxdWlyZWAgaXMgYW4gb2JqZWN0IGFuZCBgYmluZFRvQ29udHJvbGxlcmAgaXMgdHJ1dGh5XG4gICAgICAgIGZvckVhY2goY29udHJvbGxlckRpcmVjdGl2ZXMsIGZ1bmN0aW9uKGNvbnRyb2xsZXJEaXJlY3RpdmUsIG5hbWUpIHtcbiAgICAgICAgICB2YXIgcmVxdWlyZSA9IGNvbnRyb2xsZXJEaXJlY3RpdmUucmVxdWlyZTtcbiAgICAgICAgICBpZiAoY29udHJvbGxlckRpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyICYmICFpc0FycmF5KHJlcXVpcmUpICYmIGlzT2JqZWN0KHJlcXVpcmUpKSB7XG4gICAgICAgICAgICBleHRlbmQoZWxlbWVudENvbnRyb2xsZXJzW25hbWVdLmluc3RhbmNlLCBnZXRDb250cm9sbGVycyhuYW1lLCByZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIYW5kbGUgdGhlIGluaXQgYW5kIGRlc3Ryb3kgbGlmZWN5Y2xlIGhvb2tzIG9uIGFsbCBjb250cm9sbGVycyB0aGF0IGhhdmUgdGhlbVxuICAgICAgICBmb3JFYWNoKGVsZW1lbnRDb250cm9sbGVycywgZnVuY3Rpb24oY29udHJvbGxlcikge1xuICAgICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSBjb250cm9sbGVyLmluc3RhbmNlO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXJJbnN0YW5jZS4kb25DaGFuZ2VzKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlLiRvbkNoYW5nZXMoY29udHJvbGxlci5iaW5kaW5nSW5mby5pbml0aWFsQ2hhbmdlcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJG9uSW5pdCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJJbnN0YW5jZS4kb25Jbml0KCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJGRvQ2hlY2spKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyU2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgeyBjb250cm9sbGVySW5zdGFuY2UuJGRvQ2hlY2soKTsgfSk7XG4gICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJGRvQ2hlY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udHJvbGxlckluc3RhbmNlLiRvbkRlc3Ryb3kpKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uIGNhbGxPbkRlc3Ryb3lIb29rKCkge1xuICAgICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJG9uRGVzdHJveSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQUkVMSU5LSU5HXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcHJlTGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgbGlua0ZuID0gcHJlTGlua0Zuc1tpXTtcbiAgICAgICAgICBpbnZva2VMaW5rRm4obGlua0ZuLFxuICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSxcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJFQ1VSU0lPTlxuICAgICAgICAvLyBXZSBvbmx5IHBhc3MgdGhlIGlzb2xhdGUgc2NvcGUsIGlmIHRoZSBpc29sYXRlIGRpcmVjdGl2ZSBoYXMgYSB0ZW1wbGF0ZSxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBjaGlsZCBlbGVtZW50cyBkbyBub3QgYmVsb25nIHRvIHRoZSBpc29sYXRlIGRpcmVjdGl2ZS5cbiAgICAgICAgdmFyIHNjb3BlVG9DaGlsZCA9IHNjb3BlO1xuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlICYmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUudGVtcGxhdGUgfHwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlVXJsID09PSBudWxsKSkge1xuICAgICAgICAgIHNjb3BlVG9DaGlsZCA9IGlzb2xhdGVTY29wZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICBjaGlsZExpbmtGbihzY29wZVRvQ2hpbGQsIGxpbmtOb2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUE9TVExJTktJTkdcbiAgICAgICAgZm9yIChpID0gcG9zdExpbmtGbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBsaW5rRm4gPSBwb3N0TGlua0Zuc1tpXTtcbiAgICAgICAgICBpbnZva2VMaW5rRm4obGlua0ZuLFxuICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSxcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyaWdnZXIgJHBvc3RMaW5rIGxpZmVjeWNsZSBob29rc1xuICAgICAgICBmb3JFYWNoKGVsZW1lbnRDb250cm9sbGVycywgZnVuY3Rpb24oY29udHJvbGxlcikge1xuICAgICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSBjb250cm9sbGVyLmluc3RhbmNlO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXJJbnN0YW5jZS4kcG9zdExpbmspKSB7XG4gICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJHBvc3RMaW5rKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGluamVjdGVkIGFzIGAkdHJhbnNjbHVkZWAuXG4gICAgICAgIC8vIE5vdGU6IGFsbCBhcmd1bWVudHMgYXJlIG9wdGlvbmFsIVxuICAgICAgICBmdW5jdGlvbiBjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZShzY29wZSwgY2xvbmVBdHRhY2hGbiwgZnV0dXJlUGFyZW50RWxlbWVudCwgc2xvdE5hbWUpIHtcbiAgICAgICAgICB2YXIgdHJhbnNjbHVkZUNvbnRyb2xsZXJzO1xuICAgICAgICAgIC8vIE5vIHNjb3BlIHBhc3NlZCBpbjpcbiAgICAgICAgICBpZiAoIWlzU2NvcGUoc2NvcGUpKSB7XG4gICAgICAgICAgICBzbG90TmFtZSA9IGZ1dHVyZVBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gY2xvbmVBdHRhY2hGbjtcbiAgICAgICAgICAgIGNsb25lQXR0YWNoRm4gPSBzY29wZTtcbiAgICAgICAgICAgIHNjb3BlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSkge1xuICAgICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWZ1dHVyZVBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA/ICRlbGVtZW50LnBhcmVudCgpIDogJGVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzbG90TmFtZSkge1xuICAgICAgICAgICAgLy8gc2xvdFRyYW5zY2x1ZGVGbiBjYW4gYmUgb25lIG9mIHRocmVlIHRoaW5nczpcbiAgICAgICAgICAgIC8vICAqIGEgdHJhbnNjbHVkZSBmdW5jdGlvbiAtIGEgZmlsbGVkIHNsb3RcbiAgICAgICAgICAgIC8vICAqIGBudWxsYCAtIGFuIG9wdGlvbmFsIHNsb3QgdGhhdCB3YXMgbm90IGZpbGxlZFxuICAgICAgICAgICAgLy8gICogYHVuZGVmaW5lZGAgLSBhIHNsb3QgdGhhdCB3YXMgbm90IGRlY2xhcmVkIChpLmUuIGludmFsaWQpXG4gICAgICAgICAgICB2YXIgc2xvdFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdO1xuICAgICAgICAgICAgaWYgKHNsb3RUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNsb3RUcmFuc2NsdWRlRm4oc2NvcGUsIGNsb25lQXR0YWNoRm4sIHRyYW5zY2x1ZGVDb250cm9sbGVycywgZnV0dXJlUGFyZW50RWxlbWVudCwgc2NvcGVUb0NoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQoc2xvdFRyYW5zY2x1ZGVGbikpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vc2xvdCcsXG4gICAgICAgICAgICAgICAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIHdpdGggc2xvdCBuYW1lIFwiezB9XCIuICcgK1xuICAgICAgICAgICAgICAgJ0VsZW1lbnQ6IHsxfScsXG4gICAgICAgICAgICAgICBzbG90TmFtZSwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBjbG9uZUF0dGFjaEZuLCB0cmFuc2NsdWRlQ29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNjb3BlVG9DaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycykge1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBpZiAoaXNTdHJpbmcocmVxdWlyZSkpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmVxdWlyZS5tYXRjaChSRVFVSVJFX1BSRUZJWF9SRUdFWFApO1xuICAgICAgICB2YXIgbmFtZSA9IHJlcXVpcmUuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgIHZhciBpbmhlcml0VHlwZSA9IG1hdGNoWzFdIHx8IG1hdGNoWzNdO1xuICAgICAgICB2YXIgb3B0aW9uYWwgPSBtYXRjaFsyXSA9PT0gJz8nO1xuXG4gICAgICAgIC8vSWYgb25seSBwYXJlbnRzIHRoZW4gc3RhcnQgYXQgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICAgIGlmIChpbmhlcml0VHlwZSA9PT0gJ15eJykge1xuICAgICAgICAgICRlbGVtZW50ID0gJGVsZW1lbnQucGFyZW50KCk7XG4gICAgICAgIC8vT3RoZXJ3aXNlIGF0dGVtcHQgZ2V0dGluZyB0aGUgY29udHJvbGxlciBmcm9tIGVsZW1lbnRDb250cm9sbGVycyBpbiBjYXNlXG4gICAgICAgIC8vdGhlIGVsZW1lbnQgaXMgdHJhbnNjbHVkZWQgKGFuZCBoYXMgbm8gZGF0YSkgYW5kIHRvIGF2b2lkIC5kYXRhIGlmIHBvc3NpYmxlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBlbGVtZW50Q29udHJvbGxlcnMgJiYgZWxlbWVudENvbnRyb2xsZXJzW25hbWVdO1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUgJiYgdmFsdWUuaW5zdGFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgdmFyIGRhdGFOYW1lID0gJyQnICsgbmFtZSArICdDb250cm9sbGVyJztcbiAgICAgICAgICB2YWx1ZSA9IGluaGVyaXRUeXBlID8gJGVsZW1lbnQuaW5oZXJpdGVkRGF0YShkYXRhTmFtZSkgOiAkZWxlbWVudC5kYXRhKGRhdGFOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdmFsdWUgJiYgIW9wdGlvbmFsKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2N0cmVxJyxcbiAgICAgICAgICAgICAgJ0NvbnRyb2xsZXIgXFwnezB9XFwnLCByZXF1aXJlZCBieSBkaXJlY3RpdmUgXFwnezF9XFwnLCBjYW5cXCd0IGJlIGZvdW5kIScsXG4gICAgICAgICAgICAgIG5hbWUsIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXkocmVxdWlyZSkpIHtcbiAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVxdWlyZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFsdWVbaV0gPSBnZXRDb250cm9sbGVycyhkaXJlY3RpdmVOYW1lLCByZXF1aXJlW2ldLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChyZXF1aXJlKSkge1xuICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICBmb3JFYWNoKHJlcXVpcmUsIGZ1bmN0aW9uKGNvbnRyb2xsZXIsIHByb3BlcnR5KSB7XG4gICAgICAgICAgdmFsdWVbcHJvcGVydHldID0gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgY29udHJvbGxlciwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cENvbnRyb2xsZXJzKCRlbGVtZW50LCBhdHRycywgdHJhbnNjbHVkZUZuLCBjb250cm9sbGVyRGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBzY29wZSwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICB2YXIgZWxlbWVudENvbnRyb2xsZXJzID0gY3JlYXRlTWFwKCk7XG4gICAgICBmb3IgKHZhciBjb250cm9sbGVyS2V5IGluIGNvbnRyb2xsZXJEaXJlY3RpdmVzKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSBjb250cm9sbGVyRGlyZWN0aXZlc1tjb250cm9sbGVyS2V5XTtcbiAgICAgICAgdmFyIGxvY2FscyA9IHtcbiAgICAgICAgICAkc2NvcGU6IGRpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLFxuICAgICAgICAgICRlbGVtZW50OiAkZWxlbWVudCxcbiAgICAgICAgICAkYXR0cnM6IGF0dHJzLFxuICAgICAgICAgICR0cmFuc2NsdWRlOiB0cmFuc2NsdWRlRm5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY29udHJvbGxlciA9IGRpcmVjdGl2ZS5jb250cm9sbGVyO1xuICAgICAgICBpZiAoY29udHJvbGxlciA9PT0gJ0AnKSB7XG4gICAgICAgICAgY29udHJvbGxlciA9IGF0dHJzW2RpcmVjdGl2ZS5uYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSAkY29udHJvbGxlcihjb250cm9sbGVyLCBsb2NhbHMsIHRydWUsIGRpcmVjdGl2ZS5jb250cm9sbGVyQXMpO1xuXG4gICAgICAgIC8vIEZvciBkaXJlY3RpdmVzIHdpdGggZWxlbWVudCB0cmFuc2NsdXNpb24gdGhlIGVsZW1lbnQgaXMgYSBjb21tZW50LlxuICAgICAgICAvLyBJbiB0aGlzIGNhc2UgLmRhdGEgd2lsbCBub3QgYXR0YWNoIGFueSBkYXRhLlxuICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBzYXZlIHRoZSBjb250cm9sbGVycyBmb3IgdGhlIGVsZW1lbnQgaW4gYSBsb2NhbCBoYXNoIGFuZCBhdHRhY2ggdG8gLmRhdGFcbiAgICAgICAgLy8gbGF0ZXIsIG9uY2Ugd2UgaGF2ZSB0aGUgYWN0dWFsIGVsZW1lbnQuXG4gICAgICAgIGVsZW1lbnRDb250cm9sbGVyc1tkaXJlY3RpdmUubmFtZV0gPSBjb250cm9sbGVySW5zdGFuY2U7XG4gICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgZGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJJbnN0YW5jZS5pbnN0YW5jZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgIH1cblxuICAgIC8vIERlcGVuZGluZyB1cG9uIHRoZSBjb250ZXh0IGluIHdoaWNoIGEgZGlyZWN0aXZlIGZpbmRzIGl0c2VsZiBpdCBtaWdodCBuZWVkIHRvIGhhdmUgYSBuZXcgaXNvbGF0ZWRcbiAgICAvLyBvciBjaGlsZCBzY29wZSBjcmVhdGVkLiBGb3IgaW5zdGFuY2U6XG4gICAgLy8gKiBpZiB0aGUgZGlyZWN0aXZlIGhhcyBiZWVuIHB1bGxlZCBpbnRvIGEgdGVtcGxhdGUgYmVjYXVzZSBhbm90aGVyIGRpcmVjdGl2ZSB3aXRoIGEgaGlnaGVyIHByaW9yaXR5XG4gICAgLy8gYXNrZWQgZm9yIGVsZW1lbnQgdHJhbnNjbHVzaW9uXG4gICAgLy8gKiBpZiB0aGUgZGlyZWN0aXZlIGl0c2VsZiBhc2tzIGZvciB0cmFuc2NsdXNpb24gYnV0IGl0IGlzIGF0IHRoZSByb290IG9mIGEgdGVtcGxhdGUgYW5kIHRoZSBvcmlnaW5hbFxuICAgIC8vIGVsZW1lbnQgd2FzIHJlcGxhY2VkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTI5MzZcbiAgICBmdW5jdGlvbiBtYXJrRGlyZWN0aXZlU2NvcGUoZGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBuZXdTY29wZSkge1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0gZGlyZWN0aXZlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgIGRpcmVjdGl2ZXNbal0gPSBpbmhlcml0KGRpcmVjdGl2ZXNbal0sIHskJGlzb2xhdGVTY29wZTogaXNvbGF0ZVNjb3BlLCAkJG5ld1Njb3BlOiBuZXdTY29wZX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGxvb2tzIHVwIHRoZSBkaXJlY3RpdmUgYW5kIGRlY29yYXRlcyBpdCB3aXRoIGV4Y2VwdGlvbiBoYW5kbGluZyBhbmQgcHJvcGVyIHBhcmFtZXRlcnMuIFdlXG4gICAgICogY2FsbCB0aGlzIHRoZSBib3VuZERpcmVjdGl2ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBUaGUgZGlyZWN0aXZlIG11c3QgYmUgZm91bmQgaW4gc3BlY2lmaWMgZm9ybWF0LlxuICAgICAqICAgU3RyaW5nIGNvbnRhaW5pbmcgYW55IG9mIHRoZXNlcyBjaGFyYWN0ZXJzOlxuICAgICAqXG4gICAgICogICAqIGBFYDogZWxlbWVudCBuYW1lXG4gICAgICogICAqIGBBJzogYXR0cmlidXRlXG4gICAgICogICAqIGBDYDogY2xhc3NcbiAgICAgKiAgICogYE1gOiBjb21tZW50XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgZGlyZWN0aXZlIHdhcyBhZGRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGREaXJlY3RpdmUodERpcmVjdGl2ZXMsIG5hbWUsIGxvY2F0aW9uLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBzdGFydEF0dHJOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRBdHRyTmFtZSkge1xuICAgICAgaWYgKG5hbWUgPT09IGlnbm9yZURpcmVjdGl2ZSkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgbWF0Y2ggPSBudWxsO1xuICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcbiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgaWYgKChpc1VuZGVmaW5lZChtYXhQcmlvcml0eSkgfHwgbWF4UHJpb3JpdHkgPiBkaXJlY3RpdmUucHJpb3JpdHkpICYmXG4gICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QuaW5kZXhPZihsb2NhdGlvbikgIT09IC0xKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRBdHRyTmFtZSkge1xuICAgICAgICAgICAgICBkaXJlY3RpdmUgPSBpbmhlcml0KGRpcmVjdGl2ZSwgeyQkc3RhcnQ6IHN0YXJ0QXR0ck5hbWUsICQkZW5kOiBlbmRBdHRyTmFtZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXJlY3RpdmUuJCRiaW5kaW5ncykge1xuICAgICAgICAgICAgICB2YXIgYmluZGluZ3MgPSBkaXJlY3RpdmUuJCRiaW5kaW5ncyA9XG4gICAgICAgICAgICAgICAgICBwYXJzZURpcmVjdGl2ZUJpbmRpbmdzKGRpcmVjdGl2ZSwgZGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICBpZiAoaXNPYmplY3QoYmluZGluZ3MuaXNvbGF0ZVNjb3BlKSkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncyA9IGJpbmRpbmdzLmlzb2xhdGVTY29wZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdERpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpO1xuICAgICAgICAgICAgbWF0Y2ggPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCByZXR1cm5zIHRydWUgaWYgaXQgaXMgYSBtdWx0aS1lbGVtZW50IGRpcmVjdGl2ZSxcbiAgICAgKiBhbmQgdGhlcmVmb3JlIHJlcXVpcmVzIERPTSBub2RlcyBiZXR3ZWVuIC1zdGFydCBhbmQgLWVuZCBtYXJrZXJzIHRvIGJlIGdyb3VwZWRcbiAgICAgKiB0b2dldGhlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgZGlyZWN0aXZlIHdhcyByZWdpc3RlcmVkIGFzIG11bHRpLWVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQobmFtZSkge1xuICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcbiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5tdWx0aUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGVsZW1lbnQgaXMgcmVwbGFjZWQgd2l0aCBIVE1MIHRlbXBsYXRlIHRoZW4gdGhlIG5ldyBhdHRyaWJ1dGVzXG4gICAgICogb24gdGhlIHRlbXBsYXRlIG5lZWQgdG8gYmUgbWVyZ2VkIHdpdGggdGhlIGV4aXN0aW5nIGF0dHJpYnV0ZXMgaW4gdGhlIERPTS5cbiAgICAgKiBUaGUgZGVzaXJlZCBlZmZlY3QgaXMgdG8gaGF2ZSBib3RoIG9mIHRoZSBhdHRyaWJ1dGVzIHByZXNlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZHN0IGRlc3RpbmF0aW9uIGF0dHJpYnV0ZXMgKG9yaWdpbmFsIERPTSlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3JjIHNvdXJjZSBhdHRyaWJ1dGVzIChmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXMoZHN0LCBzcmMpIHtcbiAgICAgIHZhciBzcmNBdHRyID0gc3JjLiRhdHRyLFxuICAgICAgICAgIGRzdEF0dHIgPSBkc3QuJGF0dHI7XG5cbiAgICAgIC8vIHJlYXBwbHkgdGhlIG9sZCBhdHRyaWJ1dGVzIHRvIHRoZSBuZXcgZWxlbWVudFxuICAgICAgZm9yRWFjaChkc3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgIT09ICckJykge1xuICAgICAgICAgIGlmIChzcmNba2V5XSAmJiBzcmNba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFsdWUgKz0gKGtleSA9PT0gJ3N0eWxlJyA/ICc7JyA6ICcgJykgKyBzcmNba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gc3JjW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGRzdC4kc2V0KGtleSwgdmFsdWUsIHRydWUsIHNyY0F0dHJba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBjb3B5IHRoZSBuZXcgYXR0cmlidXRlcyBvbiB0aGUgb2xkIGF0dHJzIG9iamVjdFxuICAgICAgZm9yRWFjaChzcmMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBzZXQgdGhpcyBhdHRyaWJ1dGUgaW4gdGhlIGxvb3AgYWJvdmUuXG4gICAgICAgIC8vIGBkc3RgIHdpbGwgbmV2ZXIgY29udGFpbiBoYXNPd25Qcm9wZXJ0eSBhcyBET00gcGFyc2VyIHdvbid0IGxldCBpdC5cbiAgICAgICAgLy8gWW91IHdpbGwgZ2V0IGFuIFwiSW52YWxpZENoYXJhY3RlckVycm9yOiBET00gRXhjZXB0aW9uIDVcIiBlcnJvciBpZiB5b3VcbiAgICAgICAgLy8gaGF2ZSBhbiBhdHRyaWJ1dGUgbGlrZSBcImhhcy1vd24tcHJvcGVydHlcIiBvciBcImRhdGEtaGFzLW93bi1wcm9wZXJ0eVwiLCBldGMuXG4gICAgICAgIGlmICghZHN0Lmhhc093blByb3BlcnR5KGtleSkgJiYga2V5LmNoYXJBdCgwKSAhPT0gJyQnKSB7XG4gICAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAgIGlmIChrZXkgIT09ICdjbGFzcycgJiYga2V5ICE9PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICBkc3RBdHRyW2tleV0gPSBzcmNBdHRyW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLCAkY29tcGlsZU5vZGUsIHRBdHRycyxcbiAgICAgICAgJHJvb3RFbGVtZW50LCBjaGlsZFRyYW5zY2x1ZGVGbiwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBsaW5rUXVldWUgPSBbXSxcbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbixcbiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sXG4gICAgICAgICAgYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXSxcbiAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUgPSBkaXJlY3RpdmVzLnNoaWZ0KCksXG4gICAgICAgICAgZGVyaXZlZFN5bmNEaXJlY3RpdmUgPSBpbmhlcml0KG9yaWdBc3luY0RpcmVjdGl2ZSwge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IG51bGwsIHRyYW5zY2x1ZGU6IG51bGwsIHJlcGxhY2U6IG51bGwsICQkb3JpZ2luYWxEaXJlY3RpdmU6IG9yaWdBc3luY0RpcmVjdGl2ZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHRlbXBsYXRlVXJsID0gKGlzRnVuY3Rpb24ob3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKSlcbiAgICAgICAgICAgICAgPyBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwoJGNvbXBpbGVOb2RlLCB0QXR0cnMpXG4gICAgICAgICAgICAgIDogb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsLFxuICAgICAgICAgIHRlbXBsYXRlTmFtZXNwYWNlID0gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlO1xuXG4gICAgICAkY29tcGlsZU5vZGUuZW1wdHkoKTtcblxuICAgICAgJHRlbXBsYXRlUmVxdWVzdCh0ZW1wbGF0ZVVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgICAgIHZhciBjb21waWxlTm9kZSwgdGVtcFRlbXBsYXRlQXR0cnMsICR0ZW1wbGF0ZSwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbjtcblxuICAgICAgICAgIGNvbnRlbnQgPSBkZW5vcm1hbGl6ZVRlbXBsYXRlKGNvbnRlbnQpO1xuXG4gICAgICAgICAgaWYgKG9yaWdBc3luY0RpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICBpZiAoanFMaXRlSXNUZXh0Tm9kZShjb250ZW50KSkge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBbXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IHJlbW92ZUNvbW1lbnRzKHdyYXBUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWVzcGFjZSwgdHJpbShjb250ZW50KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkdGVtcGxhdGVbMF07XG5cbiAgICAgICAgICAgIGlmICgkdGVtcGxhdGUubGVuZ3RoICE9PSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLFxuICAgICAgICAgICAgICAgICAgJ1RlbXBsYXRlIGZvciBkaXJlY3RpdmUgXFwnezB9XFwnIG11c3QgaGF2ZSBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIHsxfScsXG4gICAgICAgICAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUubmFtZSwgdGVtcGxhdGVVcmwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0ZW1wVGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319O1xuICAgICAgICAgICAgcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZURpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhjb21waWxlTm9kZSwgW10sIHRlbXBUZW1wbGF0ZUF0dHJzKTtcblxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KG9yaWdBc3luY0RpcmVjdGl2ZS5zY29wZSkpIHtcbiAgICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIGRpcmVjdGl2ZSB0aGF0IGNhdXNlZCB0aGUgdGVtcGxhdGUgdG8gYmUgbG9hZGVkIGFzeW5jIHJlcXVpcmVkXG4gICAgICAgICAgICAgIC8vIGFuIGlzb2xhdGUgc2NvcGVcbiAgICAgICAgICAgICAgbWFya0RpcmVjdGl2ZVNjb3BlKHRlbXBsYXRlRGlyZWN0aXZlcywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3RpdmVzID0gdGVtcGxhdGVEaXJlY3RpdmVzLmNvbmNhdChkaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRBdHRycywgdGVtcFRlbXBsYXRlQXR0cnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9IGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGU7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChjb250ZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXJlY3RpdmVzLnVuc2hpZnQoZGVyaXZlZFN5bmNEaXJlY3RpdmUpO1xuXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4gPSBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgY29tcGlsZU5vZGUsIHRBdHRycyxcbiAgICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4sICRjb21waWxlTm9kZSwgb3JpZ0FzeW5jRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucyxcbiAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICAgICAgZm9yRWFjaCgkcm9vdEVsZW1lbnQsIGZ1bmN0aW9uKG5vZGUsIGkpIHtcbiAgICAgICAgICAgIGlmIChub2RlID09PSBjb21waWxlTm9kZSkge1xuICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbaV0gPSAkY29tcGlsZU5vZGVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZVswXS5jaGlsZE5vZGVzLCBjaGlsZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICB3aGlsZSAobGlua1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHNjb3BlID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGxpbmtSb290RWxlbWVudCA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGJvdW5kVHJhbnNjbHVkZUZuID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgbGlua05vZGUgPSAkY29tcGlsZU5vZGVbMF07XG5cbiAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlICE9PSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYmVmb3JlVGVtcGxhdGVMaW5rTm9kZS5jbGFzc05hbWU7XG5cbiAgICAgICAgICAgICAgaWYgKCEocHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gaXQgd2FzIGNsb25lZCB0aGVyZWZvcmUgd2UgaGF2ZSB0byBjbG9uZSBhcyB3ZWxsLlxuICAgICAgICAgICAgICAgIGxpbmtOb2RlID0ganFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlcGxhY2VXaXRoKGxpbmtSb290RWxlbWVudCwganFMaXRlKGJlZm9yZVRlbXBsYXRlTGlua05vZGUpLCBsaW5rTm9kZSk7XG5cbiAgICAgICAgICAgICAgLy8gQ29weSBpbiBDU1MgY2xhc3NlcyBmcm9tIG9yaWdpbmFsIG5vZGVcbiAgICAgICAgICAgICAgc2FmZUFkZENsYXNzKGpxTGl0ZShsaW5rTm9kZSksIG9sZENsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCxcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxpbmtRdWV1ZSA9IG51bGw7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGlzRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5ZWROb2RlTGlua0ZuKGlnbm9yZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAobGlua1F1ZXVlKSB7XG4gICAgICAgICAgbGlua1F1ZXVlLnB1c2goc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICByb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbihhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTb3J0aW5nIGZ1bmN0aW9uIGZvciBib3VuZCBkaXJlY3RpdmVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJ5UHJpb3JpdHkoYSwgYikge1xuICAgICAgdmFyIGRpZmYgPSBiLnByaW9yaXR5IC0gYS5wcmlvcml0eTtcbiAgICAgIGlmIChkaWZmICE9PSAwKSByZXR1cm4gZGlmZjtcbiAgICAgIGlmIChhLm5hbWUgIT09IGIubmFtZSkgcmV0dXJuIChhLm5hbWUgPCBiLm5hbWUpID8gLTEgOiAxO1xuICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2VydE5vRHVwbGljYXRlKHdoYXQsIHByZXZpb3VzRGlyZWN0aXZlLCBkaXJlY3RpdmUsIGVsZW1lbnQpIHtcblxuICAgICAgZnVuY3Rpb24gd3JhcE1vZHVsZU5hbWVJZkRlZmluZWQobW9kdWxlTmFtZSkge1xuICAgICAgICByZXR1cm4gbW9kdWxlTmFtZSA/XG4gICAgICAgICAgKCcgKG1vZHVsZTogJyArIG1vZHVsZU5hbWUgKyAnKScpIDpcbiAgICAgICAgICAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZpb3VzRGlyZWN0aXZlKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdtdWx0aWRpcicsICdNdWx0aXBsZSBkaXJlY3RpdmVzIFt7MH17MX0sIHsyfXszfV0gYXNraW5nIGZvciB7NH0gb246IHs1fScsXG4gICAgICAgICAgICBwcmV2aW91c0RpcmVjdGl2ZS5uYW1lLCB3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZChwcmV2aW91c0RpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLFxuICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUsIHdyYXBNb2R1bGVOYW1lSWZEZWZpbmVkKGRpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLCB3aGF0LCBzdGFydGluZ1RhZyhlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgdGV4dCkge1xuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodGV4dCwgdHJ1ZSk7XG4gICAgICBpZiAoaW50ZXJwb2xhdGVGbikge1xuICAgICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUNvbXBpbGVGbih0ZW1wbGF0ZU5vZGUpIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5vZGVQYXJlbnQgPSB0ZW1wbGF0ZU5vZGUucGFyZW50KCksXG4gICAgICAgICAgICAgICAgaGFzQ29tcGlsZVBhcmVudCA9ICEhdGVtcGxhdGVOb2RlUGFyZW50Lmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gV2hlbiB0cmFuc2NsdWRpbmcgYSB0ZW1wbGF0ZSB0aGF0IGhhcyBiaW5kaW5ncyBpbiB0aGUgcm9vdFxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhIHBhcmVudCBhbmQgdGh1cyBuZWVkIHRvIGFkZCB0aGUgY2xhc3MgZHVyaW5nIGxpbmtpbmcgZm4uXG4gICAgICAgICAgICBpZiAoaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZU5vZGVQYXJlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGV4dEludGVycG9sYXRlTGlua0ZuKHNjb3BlLCBub2RlKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCgpO1xuICAgICAgICAgICAgICBpZiAoIWhhc0NvbXBpbGVQYXJlbnQpIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MocGFyZW50KTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKHBhcmVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBub2RlWzBdLm5vZGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHdyYXBUZW1wbGF0ZSh0eXBlLCB0ZW1wbGF0ZSkge1xuICAgICAgdHlwZSA9IGxvd2VyY2FzZSh0eXBlIHx8ICdodG1sJyk7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N2Zyc6XG4gICAgICBjYXNlICdtYXRoJzpcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHdyYXBwZXIuaW5uZXJIVE1MID0gJzwnICsgdHlwZSArICc+JyArIHRlbXBsYXRlICsgJzwvJyArIHR5cGUgKyAnPic7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNoaWxkTm9kZXNbMF0uY2hpbGROb2RlcztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIGF0dHJOb3JtYWxpemVkTmFtZSkge1xuICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3NyY2RvYycpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuSFRNTDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBub2RlTmFtZV8obm9kZSk7XG4gICAgICAvLyBBbGwgdGFncyB3aXRoIHNyYyBhdHRyaWJ1dGVzIHJlcXVpcmUgYSBSRVNPVVJDRV9VUkwgdmFsdWUsIGV4Y2VwdCBmb3JcbiAgICAgIC8vIGltZyBhbmQgdmFyaW91cyBodG1sNSBtZWRpYSB0YWdzLlxuICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3NyYycgfHwgYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnbmdTcmMnKSB7XG4gICAgICAgIGlmIChbJ2ltZycsICd2aWRlbycsICdhdWRpbycsICdzb3VyY2UnLCAndHJhY2snXS5pbmRleE9mKHRhZykgPT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuICRzY2UuUkVTT1VSQ0VfVVJMO1xuICAgICAgICB9XG4gICAgICAvLyBtYWN0aW9uW3hsaW5rOmhyZWZdIGNhbiBzb3VyY2UgU1ZHLiAgSXQncyBub3QgbGltaXRlZCB0byA8bWFjdGlvbj4uXG4gICAgICB9IGVsc2UgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3hsaW5rSHJlZicgfHxcbiAgICAgICAgICAodGFnID09PSAnZm9ybScgJiYgYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnYWN0aW9uJykgfHxcbiAgICAgICAgICAvLyBsaW5rcyBjYW4gYmUgc3R5bGVzaGVldHMgb3IgaW1wb3J0cywgd2hpY2ggY2FuIHJ1biBzY3JpcHQgaW4gdGhlIGN1cnJlbnQgb3JpZ2luXG4gICAgICAgICAgKHRhZyA9PT0gJ2xpbmsnICYmIGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ2hyZWYnKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiAkc2NlLlJFU09VUkNFX1VSTDtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZShub2RlLCBkaXJlY3RpdmVzLCB2YWx1ZSwgbmFtZSwgaXNOZ0F0dHIpIHtcbiAgICAgIHZhciB0cnVzdGVkQ29udGV4dCA9IGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIG5hbWUpO1xuICAgICAgdmFyIG11c3RIYXZlRXhwcmVzc2lvbiA9ICFpc05nQXR0cjtcbiAgICAgIHZhciBhbGxPck5vdGhpbmcgPSBBTExfT1JfTk9USElOR19BVFRSU1tuYW1lXSB8fCBpc05nQXR0cjtcblxuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodmFsdWUsIG11c3RIYXZlRXhwcmVzc2lvbiwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZyk7XG5cbiAgICAgIC8vIG5vIGludGVycG9sYXRpb24gZm91bmQgLT4gaWdub3JlXG4gICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuICAgICAgaWYgKG5hbWUgPT09ICdtdWx0aXBsZScgJiYgbm9kZU5hbWVfKG5vZGUpID09PSAnc2VsZWN0Jykge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignc2VsbXVsdGknLFxuICAgICAgICAgICAgJ0JpbmRpbmcgdG8gdGhlIFxcJ211bHRpcGxlXFwnIGF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkLiBFbGVtZW50OiB7MH0nLFxuICAgICAgICAgICAgc3RhcnRpbmdUYWcobm9kZSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUC50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub2RvbWV2ZW50cycsXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbnMgZm9yIEhUTUwgRE9NIGV2ZW50IGF0dHJpYnV0ZXMgYXJlIGRpc2FsbG93ZWQuICBQbGVhc2UgdXNlIHRoZSAnICtcbiAgICAgICAgICAgICAgICAnbmctIHZlcnNpb25zIChzdWNoIGFzIG5nLWNsaWNrIGluc3RlYWQgb2Ygb25jbGljaykgaW5zdGVhZC4nKTtcbiAgICAgIH1cblxuICAgICAgZGlyZWN0aXZlcy5wdXNoKHtcbiAgICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZVByZUxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgICAgICAgIHZhciAkJG9ic2VydmVycyA9IChhdHRyLiQkb2JzZXJ2ZXJzIHx8IChhdHRyLiQkb2JzZXJ2ZXJzID0gY3JlYXRlTWFwKCkpKTtcblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCAkaW50ZXJwb2xhdGUoKWVkXG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gYXR0cltuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGludGVycG9sYXRlIGFnYWluIHNpbmNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICAgICAgICAgICAgLy8gKGUuZy4gYnkgYW5vdGhlciBkaXJlY3RpdmUncyBjb21waWxlIGZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHVuc2V0L2VtcHR5IHZhbHVlcyBtYWtlIGludGVycG9sYXRlRm4gZmFsc3lcbiAgICAgICAgICAgICAgICAgIGludGVycG9sYXRlRm4gPSBuZXdWYWx1ZSAmJiAkaW50ZXJwb2xhdGUobmV3VmFsdWUsIHRydWUsIHRydXN0ZWRDb250ZXh0LCBhbGxPck5vdGhpbmcpO1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBhdHRyaWJ1dGUgd2FzIHVwZGF0ZWQgc28gdGhhdCB0aGVyZSBpcyBubyBpbnRlcnBvbGF0aW9uIGdvaW5nIG9uIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhbnkgb2JzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIGF0dHIgb2JqZWN0IHNvIHRoYXQgaXQncyByZWFkeSBpbiBjYXNlIHdlIG5lZWQgdGhlIHZhbHVlIGZvciBpc29sYXRlXG4gICAgICAgICAgICAgICAgLy8gc2NvcGUgaW5pdGlhbGl6YXRpb24sIG90aGVyd2lzZSB0aGUgdmFsdWUgd291bGQgbm90IGJlIGF2YWlsYWJsZSBmcm9tIGlzb2xhdGVcbiAgICAgICAgICAgICAgICAvLyBkaXJlY3RpdmUncyBsaW5raW5nIGZuIGR1cmluZyBsaW5raW5nIHBoYXNlXG4gICAgICAgICAgICAgICAgYXR0cltuYW1lXSA9IGludGVycG9sYXRlRm4oc2NvcGUpO1xuXG4gICAgICAgICAgICAgICAgKCQkb2JzZXJ2ZXJzW25hbWVdIHx8ICgkJG9ic2VydmVyc1tuYW1lXSA9IFtdKSkuJCRpbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgKGF0dHIuJCRvYnNlcnZlcnMgJiYgYXR0ci4kJG9ic2VydmVyc1tuYW1lXS4kJHNjb3BlIHx8IHNjb3BlKS5cbiAgICAgICAgICAgICAgICAgICR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciBjbGFzcyBhdHRyaWJ1dGUgYWRkaXRpb24gKyByZW1vdmFsXG4gICAgICAgICAgICAgICAgICAgIC8vc28gdGhhdCBjbGFzcyBjaGFuZ2VzIGNhbiB0YXAgaW50byB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vaG9va3MgcHJvdmlkZWQgYnkgdGhlICRhbmltYXRlIHNlcnZpY2UuIEJlIHN1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgLy9za2lwIGFuaW1hdGlvbnMgd2hlbiB0aGUgZmlyc3QgZGlnZXN0IG9jY3VycyAod2hlblxuICAgICAgICAgICAgICAgICAgICAvL2JvdGggdGhlIG5ldyBhbmQgdGhlIG9sZCB2YWx1ZXMgYXJlIHRoZSBzYW1lKSBzaW5jZVxuICAgICAgICAgICAgICAgICAgICAvL3RoZSBDU1MgY2xhc3NlcyBhcmUgdGhlIG5vbi1pbnRlcnBvbGF0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnICYmIG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHIuJHVwZGF0ZUNsYXNzKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGEgc3BlY2lhbCBqcUxpdGUucmVwbGFjZVdpdGgsIHdoaWNoIGNhbiByZXBsYWNlIGl0ZW1zIHdoaWNoXG4gICAgICogaGF2ZSBubyBwYXJlbnRzLCBwcm92aWRlZCB0aGF0IHRoZSBjb250YWluaW5nIGpxTGl0ZSBjb2xsZWN0aW9uIGlzIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtKcUxpdGU9fSAkcm9vdEVsZW1lbnQgVGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGUgdHJlZS4gVXNlZCBzbyB0aGF0IHdlIGNhbiByZXBsYWNlIG5vZGVzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHJvb3Qgb2YgdGhlIHRyZWUuXG4gICAgICogQHBhcmFtIHtKcUxpdGV9IGVsZW1lbnRzVG9SZW1vdmUgVGhlIGpxTGl0ZSBlbGVtZW50IHdoaWNoIHdlIGFyZSBnb2luZyB0byByZXBsYWNlLiBXZSBrZWVwXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNoZWxsLCBidXQgcmVwbGFjZSBpdHMgRE9NIG5vZGUgcmVmZXJlbmNlLlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbmV3Tm9kZSBUaGUgbmV3IERPTSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgZWxlbWVudHNUb1JlbW92ZSwgbmV3Tm9kZSkge1xuICAgICAgdmFyIGZpcnN0RWxlbWVudFRvUmVtb3ZlID0gZWxlbWVudHNUb1JlbW92ZVswXSxcbiAgICAgICAgICByZW1vdmVDb3VudCA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoLFxuICAgICAgICAgIHBhcmVudCA9IGZpcnN0RWxlbWVudFRvUmVtb3ZlLnBhcmVudE5vZGUsXG4gICAgICAgICAgaSwgaWk7XG5cbiAgICAgIGlmICgkcm9vdEVsZW1lbnQpIHtcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSAkcm9vdEVsZW1lbnQubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnRbaV0gPT09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAkcm9vdEVsZW1lbnRbaSsrXSA9IG5ld05vZGU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gaSwgajIgPSBqICsgcmVtb3ZlQ291bnQgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgamogPSAkcm9vdEVsZW1lbnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICBqIDwgamo7IGorKywgajIrKykge1xuICAgICAgICAgICAgICBpZiAoajIgPCBqaikge1xuICAgICAgICAgICAgICAgICRyb290RWxlbWVudFtqXSA9ICRyb290RWxlbWVudFtqMl07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRyb290RWxlbWVudFtqXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHJvb3RFbGVtZW50Lmxlbmd0aCAtPSByZW1vdmVDb3VudCAtIDE7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSByZXBsYWNlZCBlbGVtZW50IGlzIGFsc28gdGhlIGpRdWVyeSAuY29udGV4dCB0aGVuIHJlcGxhY2UgaXRcbiAgICAgICAgICAgIC8vIC5jb250ZXh0IGlzIGEgZGVwcmVjYXRlZCBqUXVlcnkgYXBpLCBzbyB3ZSBzaG91bGQgc2V0IGl0IG9ubHkgd2hlbiBqUXVlcnkgc2V0IGl0XG4gICAgICAgICAgICAvLyBodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGV4dC9cbiAgICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnQuY29udGV4dCA9PT0gZmlyc3RFbGVtZW50VG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50LmNvbnRleHQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChuZXdOb2RlLCBmaXJzdEVsZW1lbnRUb1JlbW92ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFwcGVuZCBhbGwgdGhlIGBlbGVtZW50c1RvUmVtb3ZlYCB0byBhIGZyYWdtZW50LiBUaGlzIHdpbGwuLi5cbiAgICAgIC8vIC0gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgRE9NXG4gICAgICAvLyAtIGFsbG93IHRoZW0gdG8gc3RpbGwgYmUgdHJhdmVyc2VkIHdpdGggLm5leHRTaWJsaW5nXG4gICAgICAvLyAtIGFsbG93IGEgc2luZ2xlIGZyYWdtZW50LnFTQSB0byBmZXRjaCBhbGwgZWxlbWVudHMgYmVpbmcgcmVtb3ZlZFxuICAgICAgdmFyIGZyYWdtZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZW1vdmVDb3VudDsgaSsrKSB7XG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW1lbnRzVG9SZW1vdmVbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoanFMaXRlLmhhc0RhdGEoZmlyc3RFbGVtZW50VG9SZW1vdmUpKSB7XG4gICAgICAgIC8vIENvcHkgb3ZlciB1c2VyIGRhdGEgKHRoYXQgaW5jbHVkZXMgQW5ndWxhcidzICRzY29wZSBldGMuKS4gRG9uJ3QgY29weSBwcml2YXRlXG4gICAgICAgIC8vIGRhdGEgaGVyZSBiZWNhdXNlIHRoZXJlJ3Mgbm8gcHVibGljIGludGVyZmFjZSBpbiBqUXVlcnkgdG8gZG8gdGhhdCBhbmQgY29weWluZyBvdmVyXG4gICAgICAgIC8vIGV2ZW50IGxpc3RlbmVycyAod2hpY2ggaXMgdGhlIG1haW4gdXNlIG9mIHByaXZhdGUgZGF0YSkgd291bGRuJ3Qgd29yayBhbnl3YXkuXG4gICAgICAgIGpxTGl0ZS5kYXRhKG5ld05vZGUsIGpxTGl0ZS5kYXRhKGZpcnN0RWxlbWVudFRvUmVtb3ZlKSk7XG5cbiAgICAgICAgLy8gUmVtb3ZlICRkZXN0cm95IGV2ZW50IGxpc3RlbmVycyBmcm9tIGBmaXJzdEVsZW1lbnRUb1JlbW92ZWBcbiAgICAgICAganFMaXRlKGZpcnN0RWxlbWVudFRvUmVtb3ZlKS5vZmYoJyRkZXN0cm95Jyk7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFudXAgYW55IGRhdGEvbGlzdGVuZXJzIG9uIHRoZSBlbGVtZW50cyBhbmQgY2hpbGRyZW4uXG4gICAgICAvLyBUaGlzIGluY2x1ZGVzIGludm9raW5nIHRoZSAkZGVzdHJveSBldmVudCBvbiBhbnkgZWxlbWVudHMgd2l0aCBsaXN0ZW5lcnMuXG4gICAgICBqcUxpdGUuY2xlYW5EYXRhKGZyYWdtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUganFMaXRlIGNvbGxlY3Rpb24gdG8gb25seSBjb250YWluIHRoZSBgbmV3Tm9kZWBcbiAgICAgIGZvciAoaSA9IDE7IGkgPCByZW1vdmVDb3VudDsgaSsrKSB7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50c1RvUmVtb3ZlW2ldO1xuICAgICAgfVxuICAgICAgZWxlbWVudHNUb1JlbW92ZVswXSA9IG5ld05vZGU7XG4gICAgICBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCA9IDE7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjbG9uZUFuZEFubm90YXRlRm4oZm4sIGFubm90YXRpb24pIHtcbiAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oKSB7IHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9LCBmbiwgYW5ub3RhdGlvbik7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbnZva2VMaW5rRm4obGlua0ZuLCBzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsaW5rRm4oc2NvcGUsICRlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RyaWN0QmluZGluZ3NDaGVjayhhdHRyTmFtZSwgZGlyZWN0aXZlTmFtZSkge1xuICAgICAgaWYgKHN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCkge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbWlzc2luZ2F0dHInLFxuICAgICAgICAgICdBdHRyaWJ1dGUgXFwnezB9XFwnIG9mIFxcJ3sxfVxcJyBpcyBub24tb3B0aW9uYWwgYW5kIG11c3QgYmUgc2V0IScsXG4gICAgICAgICAgYXR0ck5hbWUsIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCB1cCAkd2F0Y2hlcyBmb3IgaXNvbGF0ZSBzY29wZSBhbmQgY29udHJvbGxlciBiaW5kaW5ncy5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3Moc2NvcGUsIGF0dHJzLCBkZXN0aW5hdGlvbiwgYmluZGluZ3MsIGRpcmVjdGl2ZSkge1xuICAgICAgdmFyIHJlbW92ZVdhdGNoQ29sbGVjdGlvbiA9IFtdO1xuICAgICAgdmFyIGluaXRpYWxDaGFuZ2VzID0ge307XG4gICAgICB2YXIgY2hhbmdlcztcblxuICAgICAgZm9yRWFjaChiaW5kaW5ncywgZnVuY3Rpb24gaW5pdGlhbGl6ZUJpbmRpbmcoZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7XG4gICAgICAgIHZhciBhdHRyTmFtZSA9IGRlZmluaXRpb24uYXR0ck5hbWUsXG4gICAgICAgIG9wdGlvbmFsID0gZGVmaW5pdGlvbi5vcHRpb25hbCxcbiAgICAgICAgbW9kZSA9IGRlZmluaXRpb24ubW9kZSwgLy8gQCwgPSwgPCwgb3IgJlxuICAgICAgICBsYXN0VmFsdWUsXG4gICAgICAgIHBhcmVudEdldCwgcGFyZW50U2V0LCBjb21wYXJlLCByZW1vdmVXYXRjaDtcblxuICAgICAgICBzd2l0Y2ggKG1vZGUpIHtcblxuICAgICAgICAgIGNhc2UgJ0AnOlxuICAgICAgICAgICAgaWYgKCFvcHRpb25hbCAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChhdHRycywgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgIHN0cmljdEJpbmRpbmdzQ2hlY2soYXR0ck5hbWUsIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBhdHRycy4kb2JzZXJ2ZShhdHRyTmFtZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fCBpc0Jvb2xlYW4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXTtcbiAgICAgICAgICAgICAgICByZWNvcmRDaGFuZ2VzKHNjb3BlTmFtZSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXR0cnMuJCRvYnNlcnZlcnNbYXR0ck5hbWVdLiQkc2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGJlZW4gcHJvdmlkZWQgdGhlbiB3ZSB0cmlnZ2VyIGFuIGludGVycG9sYXRpb24gdG8gZW5zdXJlXG4gICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSBpcyB0aGVyZSBmb3IgdXNlIGluIHRoZSBsaW5rIGZuXG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSAkaW50ZXJwb2xhdGUobGFzdFZhbHVlKShzY29wZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQm9vbGVhbihsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGVzIGlzIG9uZSBvZiB0aGUgQk9PTEVBTl9BVFRSIHRoZW4gQW5ndWxhciB3aWxsIGhhdmUgY29udmVydGVkXG4gICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSB0byBib29sZWFuIHJhdGhlciB0aGFuIGEgc3RyaW5nLCBzbyB3ZSBzcGVjaWFsIGNhc2UgdGhpcyBzaXR1YXRpb25cbiAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXRpYWxDaGFuZ2VzW3Njb3BlTmFtZV0gPSBuZXcgU2ltcGxlQ2hhbmdlKF9VTklOSVRJQUxJWkVEX1ZBTFVFLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKTtcbiAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5wdXNoKHJlbW92ZVdhdGNoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnPSc6XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwoYXR0cnMsIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIGJyZWFrO1xuICAgICAgICAgICAgICBzdHJpY3RCaW5kaW5nc0NoZWNrKGF0dHJOYW1lLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25hbCAmJiAhYXR0cnNbYXR0ck5hbWVdKSBicmVhaztcblxuICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICAgICAgICBpZiAocGFyZW50R2V0LmxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgY29tcGFyZSA9IGVxdWFscztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbXBhcmUgPSBzaW1wbGVDb21wYXJlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50U2V0ID0gcGFyZW50R2V0LmFzc2lnbiB8fCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGNoYW5nZSwgb3Igd2Ugd2lsbCB0aHJvdyB0aGlzIGV4Y2VwdGlvbiBvbiBldmVyeSAkZGlnZXN0XG4gICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpO1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9uYXNzaWduJyxcbiAgICAgICAgICAgICAgICAgICdFeHByZXNzaW9uIFxcJ3swfVxcJyBpbiBhdHRyaWJ1dGUgXFwnezF9XFwnIHVzZWQgd2l0aCBkaXJlY3RpdmUgXFwnezJ9XFwnIGlzIG5vbi1hc3NpZ25hYmxlIScsXG4gICAgICAgICAgICAgICAgICBhdHRyc1thdHRyTmFtZV0sIGF0dHJOYW1lLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGFzdFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7XG4gICAgICAgICAgICB2YXIgcGFyZW50VmFsdWVXYXRjaCA9IGZ1bmN0aW9uIHBhcmVudFZhbHVlV2F0Y2gocGFyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKSkge1xuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBvdXQgb2Ygc3luYyBhbmQgbmVlZCB0byBjb3B5XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBwYXJlbnQgY2hhbmdlZCBhbmQgaXQgaGFzIHByZWNlZGVuY2VcbiAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHBhcmVudCBjYW4gYmUgYXNzaWduZWQgdGhlbiBkbyBzb1xuICAgICAgICAgICAgICAgICAgcGFyZW50U2V0KHNjb3BlLCBwYXJlbnRWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwYXJlbnRWYWx1ZVdhdGNoLiRzdGF0ZWZ1bCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZGVmaW5pdGlvbi5jb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHJlbW92ZVdhdGNoID0gc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihhdHRyc1thdHRyTmFtZV0sIHBhcmVudFZhbHVlV2F0Y2gpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBzY29wZS4kd2F0Y2goJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSwgcGFyZW50VmFsdWVXYXRjaCksIG51bGwsIHBhcmVudEdldC5saXRlcmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5wdXNoKHJlbW92ZVdhdGNoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwoYXR0cnMsIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIGJyZWFrO1xuICAgICAgICAgICAgICBzdHJpY3RCaW5kaW5nc0NoZWNrKGF0dHJOYW1lLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25hbCAmJiAhYXR0cnNbYXR0ck5hbWVdKSBicmVhaztcblxuICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICAgICAgICB2YXIgZGVlcFdhdGNoID0gcGFyZW50R2V0LmxpdGVyYWw7XG5cbiAgICAgICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gcGFyZW50R2V0KHNjb3BlKTtcbiAgICAgICAgICAgIGluaXRpYWxDaGFuZ2VzW3Njb3BlTmFtZV0gPSBuZXcgU2ltcGxlQ2hhbmdlKF9VTklOSVRJQUxJWkVEX1ZBTFVFLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKTtcblxuICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBzY29wZS4kd2F0Y2gocGFyZW50R2V0LCBmdW5jdGlvbiBwYXJlbnRWYWx1ZVdhdGNoQWN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09PSBpbml0aWFsVmFsdWUgfHwgKGRlZXBXYXRjaCAmJiBlcXVhbHMob2xkVmFsdWUsIGluaXRpYWxWYWx1ZSkpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlY29yZENoYW5nZXMoc2NvcGVOYW1lLCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9LCBkZWVwV2F0Y2gpO1xuXG4gICAgICAgICAgICByZW1vdmVXYXRjaENvbGxlY3Rpb24ucHVzaChyZW1vdmVXYXRjaCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgaWYgKCFvcHRpb25hbCAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChhdHRycywgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgIHN0cmljdEJpbmRpbmdzQ2hlY2soYXR0ck5hbWUsIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERvbid0IGFzc2lnbiBPYmplY3QucHJvdG90eXBlIG1ldGhvZCB0byBzY29wZVxuICAgICAgICAgICAgcGFyZW50R2V0ID0gYXR0cnMuaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpID8gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSkgOiBub29wO1xuXG4gICAgICAgICAgICAvLyBEb24ndCBhc3NpZ24gbm9vcCB0byBkZXN0aW5hdGlvbiBpZiBleHByZXNzaW9uIGlzIG5vdCB2YWxpZFxuICAgICAgICAgICAgaWYgKHBhcmVudEdldCA9PT0gbm9vcCAmJiBvcHRpb25hbCkgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEdldChzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlY29yZENoYW5nZXMoa2V5LCBjdXJyZW50VmFsdWUsIHByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGVzdGluYXRpb24uJG9uQ2hhbmdlcykgJiYgIXNpbXBsZUNvbXBhcmUoY3VycmVudFZhbHVlLCBwcmV2aW91c1ZhbHVlKSkge1xuICAgICAgICAgIC8vIElmIHdlIGhhdmUgbm90IGFscmVhZHkgc2NoZWR1bGVkIHRoZSB0b3AgbGV2ZWwgb25DaGFuZ2VzUXVldWUgaGFuZGxlciB0aGVuIGRvIHNvIG5vd1xuICAgICAgICAgIGlmICghb25DaGFuZ2VzUXVldWUpIHtcbiAgICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmbHVzaE9uQ2hhbmdlc1F1ZXVlKTtcbiAgICAgICAgICAgIG9uQ2hhbmdlc1F1ZXVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElmIHdlIGhhdmUgbm90IGFscmVhZHkgcXVldWVkIGEgdHJpZ2dlciBvZiBvbkNoYW5nZXMgZm9yIHRoaXMgY29udHJvbGxlciB0aGVuIGRvIHNvIG5vd1xuICAgICAgICAgIGlmICghY2hhbmdlcykge1xuICAgICAgICAgICAgY2hhbmdlcyA9IHt9O1xuICAgICAgICAgICAgb25DaGFuZ2VzUXVldWUucHVzaCh0cmlnZ2VyT25DaGFuZ2VzSG9vayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElmIHRoZSBoYXMgYmVlbiBhIGNoYW5nZSBvbiB0aGlzIHByb3BlcnR5IGFscmVhZHkgdGhlbiB3ZSBuZWVkIHRvIHJldXNlIHRoZSBwcmV2aW91cyB2YWx1ZVxuICAgICAgICAgIGlmIChjaGFuZ2VzW2tleV0pIHtcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBjaGFuZ2VzW2tleV0ucHJldmlvdXNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gU3RvcmUgdGhpcyBjaGFuZ2VcbiAgICAgICAgICBjaGFuZ2VzW2tleV0gPSBuZXcgU2ltcGxlQ2hhbmdlKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJpZ2dlck9uQ2hhbmdlc0hvb2soKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uLiRvbkNoYW5nZXMoY2hhbmdlcyk7XG4gICAgICAgIC8vIE5vdyBjbGVhciB0aGUgY2hhbmdlcyBzbyB0aGF0IHdlIHNjaGVkdWxlIG9uQ2hhbmdlcyB3aGVuIG1vcmUgY2hhbmdlcyBhcnJpdmVcbiAgICAgICAgY2hhbmdlcyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdGlhbENoYW5nZXM6IGluaXRpYWxDaGFuZ2VzLFxuICAgICAgICByZW1vdmVXYXRjaGVzOiByZW1vdmVXYXRjaENvbGxlY3Rpb24ubGVuZ3RoICYmIGZ1bmN0aW9uIHJlbW92ZVdhdGNoZXMoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVtb3ZlV2F0Y2hDb2xsZWN0aW9uLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbltpXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1dO1xufVxuXG5mdW5jdGlvbiBTaW1wbGVDaGFuZ2UocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgdGhpcy5wcmV2aW91c1ZhbHVlID0gcHJldmlvdXM7XG4gIHRoaXMuY3VycmVudFZhbHVlID0gY3VycmVudDtcbn1cblNpbXBsZUNoYW5nZS5wcm90b3R5cGUuaXNGaXJzdENoYW5nZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5wcmV2aW91c1ZhbHVlID09PSBfVU5JTklUSUFMSVpFRF9WQUxVRTsgfTtcblxuXG52YXIgUFJFRklYX1JFR0VYUCA9IC9eKCg/Onh8ZGF0YSlbOlxcLV9dKS9pO1xudmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gL1s6XFwtX10rKC4pL2c7XG5cbi8qKlxuICogQ29udmVydHMgYWxsIGFjY2VwdGVkIGRpcmVjdGl2ZXMgZm9ybWF0IGludG8gcHJvcGVyIGRpcmVjdGl2ZSBuYW1lLlxuICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAqL1xuZnVuY3Rpb24gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVcbiAgICAucmVwbGFjZShQUkVGSVhfUkVHRVhQLCAnJylcbiAgICAucmVwbGFjZShTUEVDSUFMX0NIQVJTX1JFR0VYUCwgZm5DYW1lbENhc2VSZXBsYWNlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgc2hhcmVkIG9iamVjdCBiZXR3ZWVuIGRpcmVjdGl2ZSBjb21waWxlIC8gbGlua2luZyBmdW5jdGlvbnMgd2hpY2ggY29udGFpbnMgbm9ybWFsaXplZCBET01cbiAqIGVsZW1lbnQgYXR0cmlidXRlcy4gVGhlIHZhbHVlcyByZWZsZWN0IGN1cnJlbnQgYmluZGluZyBzdGF0ZSBge3sgfX1gLiBUaGUgbm9ybWFsaXphdGlvbiBpc1xuICogbmVlZGVkIHNpbmNlIGFsbCBvZiB0aGVzZSBhcmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IGluIEFuZ3VsYXI6XG4gKlxuICogYGBgXG4gKiAgICA8c3BhbiBuZzpiaW5kPVwiYVwiIG5nLWJpbmQ9XCJhXCIgZGF0YS1uZy1iaW5kPVwiYVwiIHgtbmctYmluZD1cImFcIj5cbiAqIGBgYFxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3BlcnR5XG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0clxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBtYXAgb2YgRE9NIGVsZW1lbnQgYXR0cmlidXRlIG5hbWVzIHRvIHRoZSBub3JtYWxpemVkIG5hbWUuIFRoaXMgaXNcbiAqIG5lZWRlZCB0byBkbyByZXZlcnNlIGxvb2t1cCBmcm9tIG5vcm1hbGl6ZWQgbmFtZSBiYWNrIHRvIGFjdHVhbCBuYW1lLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkc2V0XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2V0IERPTSBlbGVtZW50IGF0dHJpYnV0ZSB2YWx1ZS5cbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9ybWFsaXplZCBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBtb2RpZnkuIFRoZSBuYW1lIGlzXG4gKiAgICAgICAgICByZXZlcnNlLXRyYW5zbGF0ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0ciAkYXR0cn1cbiAqICAgICAgICAgIHByb3BlcnR5IHRvIHRoZSBvcmlnaW5hbCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHNldCB0aGUgYXR0cmlidXRlIHRvLiBUaGUgdmFsdWUgY2FuIGJlIGFuIGludGVycG9sYXRlZCBzdHJpbmcuXG4gKi9cblxuXG5cbi8qKlxuICogQ2xvc3VyZSBjb21waWxlciB0eXBlIGluZm9ybWF0aW9uXG4gKi9cblxuZnVuY3Rpb24gbm9kZXNldExpbmtpbmdGbihcbiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSxcbiAgLyogTm9kZUxpc3QgKi8gbm9kZUxpc3QsXG4gIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsXG4gIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGblxuKSB7fVxuXG5mdW5jdGlvbiBkaXJlY3RpdmVMaW5raW5nRm4oXG4gIC8qIG5vZGVzZXRMaW5raW5nRm4gKi8gbm9kZXNldExpbmtpbmdGbixcbiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSxcbiAgLyogTm9kZSAqLyBub2RlLFxuICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LFxuICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm5cbikge31cblxuZnVuY3Rpb24gdG9rZW5EaWZmZXJlbmNlKHN0cjEsIHN0cjIpIHtcbiAgdmFyIHZhbHVlcyA9ICcnLFxuICAgICAgdG9rZW5zMSA9IHN0cjEuc3BsaXQoL1xccysvKSxcbiAgICAgIHRva2VuczIgPSBzdHIyLnNwbGl0KC9cXHMrLyk7XG5cbiAgb3V0ZXI6XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zMS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2VuczFbaV07XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAodG9rZW4gPT09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyO1xuICAgIH1cbiAgICB2YWx1ZXMgKz0gKHZhbHVlcy5sZW5ndGggPiAwID8gJyAnIDogJycpICsgdG9rZW47XG4gIH1cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ29tbWVudHMoanFOb2Rlcykge1xuICBqcU5vZGVzID0ganFMaXRlKGpxTm9kZXMpO1xuICB2YXIgaSA9IGpxTm9kZXMubGVuZ3RoO1xuXG4gIGlmIChpIDw9IDEpIHtcbiAgICByZXR1cm4ganFOb2RlcztcbiAgfVxuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgbm9kZSA9IGpxTm9kZXNbaV07XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UIHx8XG4gICAgICAgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gJycpKSB7XG4gICAgICAgICBzcGxpY2UuY2FsbChqcU5vZGVzLCBpLCAxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGpxTm9kZXM7XG59XG5cbnZhciAkY29udHJvbGxlck1pbkVyciA9IG1pbkVycignJGNvbnRyb2xsZXInKTtcblxuXG52YXIgQ05UUkxfUkVHID0gL14oXFxTKykoXFxzK2FzXFxzKyhbXFx3JF0rKSk/JC87XG5mdW5jdGlvbiBpZGVudGlmaWVyRm9yQ29udHJvbGxlcihjb250cm9sbGVyLCBpZGVudCkge1xuICBpZiAoaWRlbnQgJiYgaXNTdHJpbmcoaWRlbnQpKSByZXR1cm4gaWRlbnQ7XG4gIGlmIChpc1N0cmluZyhjb250cm9sbGVyKSkge1xuICAgIHZhciBtYXRjaCA9IENOVFJMX1JFRy5leGVjKGNvbnRyb2xsZXIpO1xuICAgIGlmIChtYXRjaCkgcmV0dXJuIG1hdGNoWzNdO1xuICB9XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUge0BsaW5rIG5nLiRjb250cm9sbGVyICRjb250cm9sbGVyIHNlcnZpY2V9IGlzIHVzZWQgYnkgQW5ndWxhciB0byBjcmVhdGUgbmV3XG4gKiBjb250cm9sbGVycy5cbiAqXG4gKiBUaGlzIHByb3ZpZGVyIGFsbG93cyBjb250cm9sbGVyIHJlZ2lzdHJhdGlvbiB2aWEgdGhlXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciByZWdpc3Rlcn0gbWV0aG9kLlxuICovXG5mdW5jdGlvbiAkQ29udHJvbGxlclByb3ZpZGVyKCkge1xuICB2YXIgY29udHJvbGxlcnMgPSB7fSxcbiAgICAgIGdsb2JhbHMgPSBmYWxzZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI2hhc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDb250cm9sbGVyIG5hbWUgdG8gY2hlY2suXG4gICAqL1xuICB0aGlzLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gY29udHJvbGxlcnMuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlclxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgQ29udHJvbGxlciBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGNvbnRyb2xsZXJzIHdoZXJlIHRoZSBrZXlzIGFyZVxuICAgKiAgICB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZm4gKG9wdGlvbmFsbHkgZGVjb3JhdGVkIHdpdGggRElcbiAgICogICAgYW5ub3RhdGlvbnMgaW4gdGhlIGFycmF5IG5vdGF0aW9uKS5cbiAgICovXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBjb25zdHJ1Y3Rvcikge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb250cm9sbGVyJyk7XG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICBleHRlbmQoY29udHJvbGxlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250cm9sbGVyc1tuYW1lXSA9IGNvbnN0cnVjdG9yO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFsc1xuICAgKiBAZGVzY3JpcHRpb24gSWYgY2FsbGVkLCBhbGxvd3MgYCRjb250cm9sbGVyYCB0byBmaW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3JzIG9uIGB3aW5kb3dgXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIHNpbmNlVmVyc2lvbj1cInYxLjMuMFwiXG4gICAqIHJlbW92ZVZlcnNpb249XCJ2MS43LjBcIlxuICAgKiBUaGlzIG1ldGhvZCBvZiBmaW5kaW5nIGNvbnRyb2xsZXJzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuXG4gICAqL1xuICB0aGlzLmFsbG93R2xvYmFscyA9IGZ1bmN0aW9uKCkge1xuICAgIGdsb2JhbHMgPSB0cnVlO1xuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRpbmplY3RvciwgJHdpbmRvdykge1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkY29udHJvbGxlclxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBjb25zdHJ1Y3RvciBJZiBjYWxsZWQgd2l0aCBhIGZ1bmN0aW9uIHRoZW4gaXQncyBjb25zaWRlcmVkIHRvIGJlIHRoZVxuICAgICAqICAgIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIE90aGVyd2lzZSBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgYSBzdHJpbmcgd2hpY2ggaXMgdXNlZFxuICAgICAqICAgIHRvIHJldHJpZXZlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6XG4gICAgICpcbiAgICAgKiAgICAqIGNoZWNrIGlmIGEgY29udHJvbGxlciB3aXRoIGdpdmVuIG5hbWUgaXMgcmVnaXN0ZXJlZCB2aWEgYCRjb250cm9sbGVyUHJvdmlkZXJgXG4gICAgICogICAgKiBjaGVjayBpZiBldmFsdWF0aW5nIHRoZSBzdHJpbmcgb24gdGhlIGN1cnJlbnQgc2NvcGUgcmV0dXJucyBhIGNvbnN0cnVjdG9yXG4gICAgICogICAgKiBpZiAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscywgY2hlY2sgYHdpbmRvd1tjb25zdHJ1Y3Rvcl1gIG9uIHRoZSBnbG9iYWxcbiAgICAgKiAgICAgIGB3aW5kb3dgIG9iamVjdCAoZGVwcmVjYXRlZCwgbm90IHJlY29tbWVuZGVkKVxuICAgICAqXG4gICAgICogICAgVGhlIHN0cmluZyBjYW4gdXNlIHRoZSBgY29udHJvbGxlciBhcyBwcm9wZXJ0eWAgc3ludGF4LCB3aGVyZSB0aGUgY29udHJvbGxlciBpbnN0YW5jZSBpcyBwdWJsaXNoZWRcbiAgICAgKiAgICBhcyB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IG9uIHRoZSBgc2NvcGVgOyB0aGUgYHNjb3BlYCBtdXN0IGJlIGluamVjdGVkIGludG8gYGxvY2Fsc2AgcGFyYW0gZm9yIHRoaXNcbiAgICAgKiAgICB0byB3b3JrIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgSW5qZWN0aW9uIGxvY2FscyBmb3IgQ29udHJvbGxlci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEluc3RhbmNlIG9mIGdpdmVuIGNvbnRyb2xsZXIuXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBgJGNvbnRyb2xsZXJgIHNlcnZpY2UgaXMgcmVzcG9uc2libGUgZm9yIGluc3RhbnRpYXRpbmcgY29udHJvbGxlcnMuXG4gICAgICpcbiAgICAgKiBJdCdzIGp1c3QgYSBzaW1wbGUgY2FsbCB0byB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgYnV0IGV4dHJhY3RlZCBpbnRvXG4gICAgICogYSBzZXJ2aWNlLCBzbyB0aGF0IG9uZSBjYW4gb3ZlcnJpZGUgdGhpcyBzZXJ2aWNlIHdpdGggW0JDIHZlcnNpb25dKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzE2NDk3ODgpLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiAkY29udHJvbGxlcihleHByZXNzaW9uLCBsb2NhbHMsIGxhdGVyLCBpZGVudCkge1xuICAgICAgLy8gUFJJVkFURSBBUEk6XG4gICAgICAvLyAgIHBhcmFtIGBsYXRlcmAgLS0tIGluZGljYXRlcyB0aGF0IHRoZSBjb250cm9sbGVyJ3MgY29uc3RydWN0b3IgaXMgaW52b2tlZCBhdCBhIGxhdGVyIHRpbWUuXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIElmIHRydWUsICRjb250cm9sbGVyIHdpbGwgYWxsb2NhdGUgdGhlIG9iamVjdCB3aXRoIHRoZSBjb3JyZWN0XG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHByb3RvdHlwZSBjaGFpbiwgYnV0IHdpbGwgbm90IGludm9rZSB0aGUgY29udHJvbGxlciB1bnRpbCBhIHJldHVybmVkXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAgICAvLyAgIHBhcmFtIGBpZGVudGAgLS0tIEFuIG9wdGlvbmFsIGxhYmVsIHdoaWNoIG92ZXJyaWRlcyB0aGUgbGFiZWwgcGFyc2VkIGZyb20gdGhlIGNvbnRyb2xsZXJcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbiwgaWYgYW55LlxuICAgICAgdmFyIGluc3RhbmNlLCBtYXRjaCwgY29uc3RydWN0b3IsIGlkZW50aWZpZXI7XG4gICAgICBsYXRlciA9IGxhdGVyID09PSB0cnVlO1xuICAgICAgaWYgKGlkZW50ICYmIGlzU3RyaW5nKGlkZW50KSkge1xuICAgICAgICBpZGVudGlmaWVyID0gaWRlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZyhleHByZXNzaW9uKSkge1xuICAgICAgICBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goQ05UUkxfUkVHKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgIHRocm93ICRjb250cm9sbGVyTWluRXJyKCdjdHJsZm10JyxcbiAgICAgICAgICAgICdCYWRseSBmb3JtZWQgY29udHJvbGxlciBzdHJpbmcgXFwnezB9XFwnLiAnICtcbiAgICAgICAgICAgICdNdXN0IG1hdGNoIGBfX25hbWVfXyBhcyBfX2lkX19gIG9yIGBfX25hbWVfX2AuJywgZXhwcmVzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3RydWN0b3IgPSBtYXRjaFsxXTtcbiAgICAgICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIgfHwgbWF0Y2hbM107XG4gICAgICAgIGV4cHJlc3Npb24gPSBjb250cm9sbGVycy5oYXNPd25Qcm9wZXJ0eShjb25zdHJ1Y3RvcilcbiAgICAgICAgICAgID8gY29udHJvbGxlcnNbY29uc3RydWN0b3JdXG4gICAgICAgICAgICA6IGdldHRlcihsb2NhbHMuJHNjb3BlLCBjb25zdHJ1Y3RvciwgdHJ1ZSkgfHxcbiAgICAgICAgICAgICAgICAoZ2xvYmFscyA/IGdldHRlcigkd2luZG93LCBjb25zdHJ1Y3RvciwgdHJ1ZSkgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgIGlmICghZXhwcmVzc2lvbikge1xuICAgICAgICAgIHRocm93ICRjb250cm9sbGVyTWluRXJyKCdjdHJscmVnJyxcbiAgICAgICAgICAgICdUaGUgY29udHJvbGxlciB3aXRoIHRoZSBuYW1lIFxcJ3swfVxcJyBpcyBub3QgcmVnaXN0ZXJlZC4nLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBhc3NlcnRBcmdGbihleHByZXNzaW9uLCBjb25zdHJ1Y3RvciwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsYXRlcikge1xuICAgICAgICAvLyBJbnN0YW50aWF0ZSBjb250cm9sbGVyIGxhdGVyOlxuICAgICAgICAvLyBUaGlzIG1hY2hpbmVyeSBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgb2JqZWN0IGJlZm9yZSBjYWxsaW5nIHRoZVxuICAgICAgICAvLyBjb250cm9sbGVyJ3MgY29uc3RydWN0b3IgaXRzZWxmLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGFsbG93cyBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIHRoZSBjb250cm9sbGVyIGJlZm9yZSB0aGUgY29uc3RydWN0b3IgaXNcbiAgICAgICAgLy8gaW52b2tlZC4gUHJpbWFyaWx5LCB0aGlzIGlzIHVzZWQgZm9yIGlzb2xhdGUgc2NvcGUgYmluZGluZ3MgaW4gJGNvbXBpbGUuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoaXMgZmVhdHVyZSBpcyBub3QgaW50ZW5kZWQgZm9yIHVzZSBieSBhcHBsaWNhdGlvbnMsIGFuZCBpcyB0aHVzIG5vdCBkb2N1bWVudGVkXG4gICAgICAgIC8vIHB1YmxpY2x5LlxuICAgICAgICAvLyBPYmplY3QgY3JlYXRpb246IGh0dHA6Ly9qc3BlcmYuY29tL2NyZWF0ZS1jb25zdHJ1Y3Rvci8yXG4gICAgICAgIHZhciBjb250cm9sbGVyUHJvdG90eXBlID0gKGlzQXJyYXkoZXhwcmVzc2lvbikgP1xuICAgICAgICAgIGV4cHJlc3Npb25bZXhwcmVzc2lvbi5sZW5ndGggLSAxXSA6IGV4cHJlc3Npb24pLnByb3RvdHlwZTtcbiAgICAgICAgaW5zdGFuY2UgPSBPYmplY3QuY3JlYXRlKGNvbnRyb2xsZXJQcm90b3R5cGUgfHwgbnVsbCk7XG5cbiAgICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRjb250cm9sbGVySW5pdCgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gJGluamVjdG9yLmludm9rZShleHByZXNzaW9uLCBpbnN0YW5jZSwgbG9jYWxzLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gaW5zdGFuY2UgJiYgKGlzT2JqZWN0KHJlc3VsdCkgfHwgaXNGdW5jdGlvbihyZXN1bHQpKSkge1xuICAgICAgICAgICAgaW5zdGFuY2UgPSByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAvLyBJZiByZXN1bHQgY2hhbmdlZCwgcmUtYXNzaWduIGNvbnRyb2xsZXJBcyB2YWx1ZSB0byBzY29wZS5cbiAgICAgICAgICAgICAgYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBjb25zdHJ1Y3RvciB8fCBleHByZXNzaW9uLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UgPSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoZXhwcmVzc2lvbiwgbG9jYWxzLCBjb25zdHJ1Y3Rvcik7XG5cbiAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIG5hbWUpIHtcbiAgICAgIGlmICghKGxvY2FscyAmJiBpc09iamVjdChsb2NhbHMuJHNjb3BlKSkpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCckY29udHJvbGxlcicpKCdub3NjcCcsXG4gICAgICAgICAgJ0Nhbm5vdCBleHBvcnQgY29udHJvbGxlciBcXCd7MH1cXCcgYXMgXFwnezF9XFwnISBObyAkc2NvcGUgb2JqZWN0IHByb3ZpZGVkIHZpYSBgbG9jYWxzYC4nLFxuICAgICAgICAgIG5hbWUsIGlkZW50aWZpZXIpO1xuICAgICAgfVxuXG4gICAgICBsb2NhbHMuJHNjb3BlW2lkZW50aWZpZXJdID0gaW5zdGFuY2U7XG4gICAgfVxuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGRvY3VtZW50XG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEge0BsaW5rIGFuZ3VsYXIuZWxlbWVudCBqUXVlcnkgb3IganFMaXRlfSB3cmFwcGVyIGZvciB0aGUgYnJvd3NlcidzIGB3aW5kb3cuZG9jdW1lbnRgIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiZG9jdW1lbnRFeGFtcGxlXCIgbmFtZT1cImRvY3VtZW50XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPiRkb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cInRpdGxlXCI+PC9iPjwvcD5cbiAgICAgICAgIDxwPndpbmRvdy5kb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cIndpbmRvd1RpdGxlXCI+PC9iPjwvcD5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2RvY3VtZW50RXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJGRvY3VtZW50WzBdLnRpdGxlO1xuICAgICAgICAgICAkc2NvcGUud2luZG93VGl0bGUgPSBhbmd1bGFyLmVsZW1lbnQod2luZG93LmRvY3VtZW50KVswXS50aXRsZTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkRG9jdW1lbnRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24od2luZG93KSB7XG4gICAgcmV0dXJuIGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQpO1xuICB9XTtcbn1cblxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAdGhpc1xuICogTGlzdGVucyBmb3IgZG9jdW1lbnQgdmlzaWJpbGl0eSBjaGFuZ2UgYW5kIG1ha2VzIHRoZSBjdXJyZW50IHN0YXR1cyBhY2Nlc3NpYmxlLlxuICovXG5mdW5jdGlvbiAkJElzRG9jdW1lbnRIaWRkZW5Qcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckZG9jdW1lbnQnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRkb2N1bWVudCwgJHJvb3RTY29wZSkge1xuICAgIHZhciBkb2MgPSAkZG9jdW1lbnRbMF07XG4gICAgdmFyIGhpZGRlbiA9IGRvYyAmJiBkb2MuaGlkZGVuO1xuXG4gICAgJGRvY3VtZW50Lm9uKCd2aXNpYmlsaXR5Y2hhbmdlJywgY2hhbmdlTGlzdGVuZXIpO1xuXG4gICAgJHJvb3RTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAkZG9jdW1lbnQub2ZmKCd2aXNpYmlsaXR5Y2hhbmdlJywgY2hhbmdlTGlzdGVuZXIpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gY2hhbmdlTGlzdGVuZXIoKSB7XG4gICAgICBoaWRkZW4gPSBkb2MuaGlkZGVuO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBoaWRkZW47XG4gICAgfTtcbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRleGNlcHRpb25IYW5kbGVyXG4gKiBAcmVxdWlyZXMgbmcuJGxvZ1xuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFueSB1bmNhdWdodCBleGNlcHRpb24gaW4gYW5ndWxhciBleHByZXNzaW9ucyBpcyBkZWxlZ2F0ZWQgdG8gdGhpcyBzZXJ2aWNlLlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2ltcGx5IGRlbGVnYXRlcyB0byBgJGxvZy5lcnJvcmAgd2hpY2ggbG9ncyBpdCBpbnRvXG4gKiB0aGUgYnJvd3NlciBjb25zb2xlLlxuICpcbiAqIEluIHVuaXQgdGVzdHMsIGlmIGBhbmd1bGFyLW1vY2tzLmpzYCBpcyBsb2FkZWQsIHRoaXMgc2VydmljZSBpcyBvdmVycmlkZGVuIGJ5XG4gKiB7QGxpbmsgbmdNb2NrLiRleGNlcHRpb25IYW5kbGVyIG1vY2sgJGV4Y2VwdGlvbkhhbmRsZXJ9IHdoaWNoIGFpZHMgaW4gdGVzdGluZy5cbiAqXG4gKiAjIyBFeGFtcGxlOlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IHdpbGwgb3ZlcndyaXRlIHRoZSBkZWZhdWx0IGAkZXhjZXB0aW9uSGFuZGxlcmAgaW4gb3JkZXIgdG8gKGEpIGxvZyB1bmNhdWdodFxuICogZXJyb3JzIHRvIHRoZSBiYWNrZW5kIGZvciBsYXRlciBpbnNwZWN0aW9uIGJ5IHRoZSBkZXZlbG9wZXJzIGFuZCAoYikgdG8gdXNlIGAkbG9nLndhcm4oKWAgaW5zdGVhZFxuICogb2YgYCRsb2cuZXJyb3IoKWAuXG4gKlxuICogYGBganNcbiAqICAgYW5ndWxhci5cbiAqICAgICBtb2R1bGUoJ2V4Y2VwdGlvbk92ZXJ3cml0ZScsIFtdKS5cbiAqICAgICBmYWN0b3J5KCckZXhjZXB0aW9uSGFuZGxlcicsIFsnJGxvZycsICdsb2dFcnJvcnNUb0JhY2tlbmQnLCBmdW5jdGlvbigkbG9nLCBsb2dFcnJvcnNUb0JhY2tlbmQpIHtcbiAqICAgICAgIHJldHVybiBmdW5jdGlvbiBteUV4Y2VwdGlvbkhhbmRsZXIoZXhjZXB0aW9uLCBjYXVzZSkge1xuICogICAgICAgICBsb2dFcnJvcnNUb0JhY2tlbmQoZXhjZXB0aW9uLCBjYXVzZSk7XG4gKiAgICAgICAgICRsb2cud2FybihleGNlcHRpb24sIGNhdXNlKTtcbiAqICAgICAgIH07XG4gKiAgICAgfV0pO1xuICogYGBgXG4gKlxuICogPGhyIC8+XG4gKiBOb3RlLCB0aGF0IGNvZGUgZXhlY3V0ZWQgaW4gZXZlbnQtbGlzdGVuZXJzIChldmVuIHRob3NlIHJlZ2lzdGVyZWQgdXNpbmcganFMaXRlJ3MgYG9uYC9gYmluZGBcbiAqIG1ldGhvZHMpIGRvZXMgbm90IGRlbGVnYXRlIGV4Y2VwdGlvbnMgdG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn1cbiAqICh1bmxlc3MgZXhlY3V0ZWQgZHVyaW5nIGEgZGlnZXN0KS5cbiAqXG4gKiBJZiB5b3Ugd2lzaCwgeW91IGNhbiBtYW51YWxseSBkZWxlZ2F0ZSBleGNlcHRpb25zLCBlLmcuXG4gKiBgdHJ5IHsgLi4uIH0gY2F0Y2goZSkgeyAkZXhjZXB0aW9uSGFuZGxlcihlKTsgfWBcbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBleGNlcHRpb24gRXhjZXB0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXJyb3IuXG4gKiBAcGFyYW0ge3N0cmluZz19IGNhdXNlIE9wdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb250ZXh0IGluIHdoaWNoXG4gKiAgICAgICB0aGUgZXJyb3Igd2FzIHRocm93bi5cbiAqXG4gKi9cbmZ1bmN0aW9uICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGxvZycsIGZ1bmN0aW9uKCRsb2cpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICAgICAgJGxvZy5lcnJvci5hcHBseSgkbG9nLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1dO1xufVxuXG52YXIgJCRGb3JjZVJlZmxvd1Byb3ZpZGVyID0gLyoqIEB0aGlzICovIGZ1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBbJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRkb2N1bWVudCkge1xuICAgIHJldHVybiBmdW5jdGlvbihkb21Ob2RlKSB7XG4gICAgICAvL3RoZSBsaW5lIGJlbG93IHdpbGwgZm9yY2UgdGhlIGJyb3dzZXIgdG8gcGVyZm9ybSBhIHJlcGFpbnQgc29cbiAgICAgIC8vdGhhdCBhbGwgdGhlIGFuaW1hdGVkIGVsZW1lbnRzIHdpdGhpbiB0aGUgYW5pbWF0aW9uIGZyYW1lIHdpbGxcbiAgICAgIC8vYmUgcHJvcGVybHkgdXBkYXRlZCBhbmQgZHJhd24gb24gc2NyZWVuLiBUaGlzIGlzIHJlcXVpcmVkIHRvXG4gICAgICAvL2Vuc3VyZSB0aGF0IHRoZSBwcmVwYXJhdGlvbiBhbmltYXRpb24gaXMgcHJvcGVybHkgZmx1c2hlZCBzbyB0aGF0XG4gICAgICAvL3RoZSBhY3RpdmUgc3RhdGUgcGlja3MgdXAgZnJvbSB0aGVyZS4gRE8gTk9UIFJFTU9WRSBUSElTIExJTkUuXG4gICAgICAvL0RPIE5PVCBPUFRJTUlaRSBUSElTIExJTkUuIFRIRSBNSU5JRklFUiBXSUxMIFJFTU9WRSBJVCBPVEhFUldJU0UgV0hJQ0hcbiAgICAgIC8vV0lMTCBSRVNVTFQgSU4gQU4gVU5QUkVESUNUQUJMRSBCVUcgVEhBVCBJUyBWRVJZIEhBUkQgVE8gVFJBQ0sgRE9XTiBBTkRcbiAgICAgIC8vV0lMTCBUQUtFIFlFQVJTIEFXQVkgRlJPTSBZT1VSIExJRkUuXG4gICAgICBpZiAoZG9tTm9kZSkge1xuICAgICAgICBpZiAoIWRvbU5vZGUubm9kZVR5cGUgJiYgZG9tTm9kZSBpbnN0YW5jZW9mIGpxTGl0ZSkge1xuICAgICAgICAgIGRvbU5vZGUgPSBkb21Ob2RlWzBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb21Ob2RlID0gJGRvY3VtZW50WzBdLmJvZHk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZG9tTm9kZS5vZmZzZXRXaWR0aCArIDE7XG4gICAgfTtcbiAgfV07XG59O1xuXG52YXIgQVBQTElDQVRJT05fSlNPTiA9ICdhcHBsaWNhdGlvbi9qc29uJztcbnZhciBDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiA9IHsnQ29udGVudC1UeXBlJzogQVBQTElDQVRJT05fSlNPTiArICc7Y2hhcnNldD11dGYtOCd9O1xudmFyIEpTT05fU1RBUlQgPSAvXlxcW3xeXFx7KD8hXFx7KS87XG52YXIgSlNPTl9FTkRTID0ge1xuICAnWyc6IC9dJC8sXG4gICd7JzogL30kL1xufTtcbnZhciBKU09OX1BST1RFQ1RJT05fUFJFRklYID0gL15cXCldXFx9Jyw/XFxuLztcbnZhciAkaHR0cE1pbkVyciA9IG1pbkVycignJGh0dHAnKTtcblxuZnVuY3Rpb24gc2VyaWFsaXplVmFsdWUodikge1xuICBpZiAoaXNPYmplY3QodikpIHtcbiAgICByZXR1cm4gaXNEYXRlKHYpID8gdi50b0lTT1N0cmluZygpIDogdG9Kc29uKHYpO1xuICB9XG4gIHJldHVybiB2O1xufVxuXG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcigpIHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRodHRwUGFyYW1TZXJpYWxpemVyXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZhdWx0IHtAbGluayAkaHR0cCBgJGh0dHBgfSBwYXJhbXMgc2VyaWFsaXplciB0aGF0IGNvbnZlcnRzIG9iamVjdHMgdG8gc3RyaW5nc1xuICAgKiBhY2NvcmRpbmcgdG8gdGhlIGZvbGxvd2luZyBydWxlczpcbiAgICpcbiAgICogKiBgeydmb28nOiAnYmFyJ31gIHJlc3VsdHMgaW4gYGZvbz1iYXJgXG4gICAqICogYHsnZm9vJzogRGF0ZS5ub3coKX1gIHJlc3VsdHMgaW4gYGZvbz0yMDE1LTA0LTAxVDA5JTNBNTAlM0E0OS4yNjJaYCAoYHRvSVNPU3RyaW5nKClgIGFuZCBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGEgRGF0ZSBvYmplY3QpXG4gICAqICogYHsnZm9vJzogWydiYXInLCAnYmF6J119YCByZXN1bHRzIGluIGBmb289YmFyJmZvbz1iYXpgIChyZXBlYXRlZCBrZXkgZm9yIGVhY2ggYXJyYXkgZWxlbWVudClcbiAgICogKiBgeydmb28nOiB7J2Jhcic6J2Jheid9fWAgcmVzdWx0cyBpbiBgZm9vPSU3QiUyMmJhciUyMiUzQSUyMmJheiUyMiU3RGAgKHN0cmluZ2lmaWVkIGFuZCBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdClcbiAgICpcbiAgICogTm90ZSB0aGF0IHNlcmlhbGl6ZXIgd2lsbCBzb3J0IHRoZSByZXF1ZXN0IHBhcmFtZXRlcnMgYWxwaGFiZXRpY2FsbHkuXG4gICAqICovXG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5nUGFyYW1TZXJpYWxpemVyKHBhcmFtcykge1xuICAgICAgaWYgKCFwYXJhbXMpIHJldHVybiAnJztcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgZm9yRWFjaFNvcnRlZChwYXJhbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHZhbHVlKSB8fCBpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSkgICsgJz0nICsgZW5jb2RlVXJpUXVlcnkoc2VyaWFsaXplVmFsdWUodikpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSkgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh2YWx1ZSkpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcmJyk7XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqIEB0aGlzICovXG5mdW5jdGlvbiAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyKCkge1xuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEFsdGVybmF0aXZlIHtAbGluayAkaHR0cCBgJGh0dHBgfSBwYXJhbXMgc2VyaWFsaXplciB0aGF0IGZvbGxvd3NcbiAgICogalF1ZXJ5J3MgW2BwYXJhbSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pxdWVyeS5wYXJhbS8pIG1ldGhvZCBsb2dpYy5cbiAgICogVGhlIHNlcmlhbGl6ZXIgd2lsbCBhbHNvIHNvcnQgdGhlIHBhcmFtcyBhbHBoYWJldGljYWxseS5cbiAgICpcbiAgICogVG8gdXNlIGl0IGZvciBzZXJpYWxpemluZyBgJGh0dHBgIHJlcXVlc3QgcGFyYW1ldGVycywgc2V0IGl0IGFzIHRoZSBgcGFyYW1TZXJpYWxpemVyYCBwcm9wZXJ0eTpcbiAgICpcbiAgICogYGBganNcbiAgICogJGh0dHAoe1xuICAgKiAgIHVybDogbXlVcmwsXG4gICAqICAgbWV0aG9kOiAnR0VUJyxcbiAgICogICBwYXJhbXM6IG15UGFyYW1zLFxuICAgKiAgIHBhcmFtU2VyaWFsaXplcjogJyRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlJ1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gc2V0IGl0IGFzIHRoZSBkZWZhdWx0IGBwYXJhbVNlcmlhbGl6ZXJgIGluIHRoZVxuICAgKiB7QGxpbmsgJGh0dHBQcm92aWRlciNkZWZhdWx0cyBgJGh0dHBQcm92aWRlcmB9LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gaW5qZWN0IHRoZSBzZXJpYWxpemVyIGFuZCB1c2UgaXQgZXhwbGljaXRseSwgZm9yIGV4YW1wbGUgdG8gc2VyaWFsaXplXG4gICAqIGZvcm0gZGF0YSBmb3Igc3VibWlzc2lvbjpcbiAgICpcbiAgICogYGBganNcbiAgICogLmNvbnRyb2xsZXIoZnVuY3Rpb24oJGh0dHAsICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlKSB7XG4gICAqICAgLy8uLi5cbiAgICpcbiAgICogICAkaHR0cCh7XG4gICAqICAgICB1cmw6IG15VXJsLFxuICAgKiAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAqICAgICBkYXRhOiAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZShteURhdGEpLFxuICAgKiAgICAgaGVhZGVyczoge1xuICAgKiAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiAqL1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24galF1ZXJ5TGlrZVBhcmFtU2VyaWFsaXplcihwYXJhbXMpIHtcbiAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gJyc7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgIHNlcmlhbGl6ZShwYXJhbXMsICcnLCB0cnVlKTtcbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcmJyk7XG5cbiAgICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZSh0b1NlcmlhbGl6ZSwgcHJlZml4LCB0b3BMZXZlbCkge1xuICAgICAgICBpZiAodG9TZXJpYWxpemUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodG9TZXJpYWxpemUpKSByZXR1cm47XG4gICAgICAgIGlmIChpc0FycmF5KHRvU2VyaWFsaXplKSkge1xuICAgICAgICAgIGZvckVhY2godG9TZXJpYWxpemUsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgc2VyaWFsaXplKHZhbHVlLCBwcmVmaXggKyAnWycgKyAoaXNPYmplY3QodmFsdWUpID8gaW5kZXggOiAnJykgKyAnXScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRvU2VyaWFsaXplKSAmJiAhaXNEYXRlKHRvU2VyaWFsaXplKSkge1xuICAgICAgICAgIGZvckVhY2hTb3J0ZWQodG9TZXJpYWxpemUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZSh2YWx1ZSwgcHJlZml4ICtcbiAgICAgICAgICAgICAgICAodG9wTGV2ZWwgPyAnJyA6ICdbJykgK1xuICAgICAgICAgICAgICAgIGtleSArXG4gICAgICAgICAgICAgICAgKHRvcExldmVsID8gJycgOiAnXScpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KHByZWZpeCkgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh0b1NlcmlhbGl6ZSkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0oZGF0YSwgaGVhZGVycykge1xuICBpZiAoaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAvLyBTdHJpcCBqc29uIHZ1bG5lcmFiaWxpdHkgcHJvdGVjdGlvbiBwcmVmaXggYW5kIHRyaW0gd2hpdGVzcGFjZVxuICAgIHZhciB0ZW1wRGF0YSA9IGRhdGEucmVwbGFjZShKU09OX1BST1RFQ1RJT05fUFJFRklYLCAnJykudHJpbSgpO1xuXG4gICAgaWYgKHRlbXBEYXRhKSB7XG4gICAgICB2YXIgY29udGVudFR5cGUgPSBoZWFkZXJzKCdDb250ZW50LVR5cGUnKTtcbiAgICAgIHZhciBoYXNKc29uQ29udGVudFR5cGUgPSBjb250ZW50VHlwZSAmJiAoY29udGVudFR5cGUuaW5kZXhPZihBUFBMSUNBVElPTl9KU09OKSA9PT0gMCk7XG5cbiAgICAgIGlmIChoYXNKc29uQ29udGVudFR5cGUgfHwgaXNKc29uTGlrZSh0ZW1wRGF0YSkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkYXRhID0gZnJvbUpzb24odGVtcERhdGEpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaWYgKCFoYXNKc29uQ29udGVudFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAkaHR0cE1pbkVycignYmFkZGF0YScsICdEYXRhIG11c3QgYmUgYSB2YWxpZCBKU09OIG9iamVjdC4gUmVjZWl2ZWQ6IFwiezB9XCIuICcgK1xuICAgICAgICAgICdQYXJzZSBlcnJvcjogXCJ7MX1cIicsIGRhdGEsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGlzSnNvbkxpa2Uoc3RyKSB7XG4gICAgdmFyIGpzb25TdGFydCA9IHN0ci5tYXRjaChKU09OX1NUQVJUKTtcbiAgICByZXR1cm4ganNvblN0YXJ0ICYmIEpTT05fRU5EU1tqc29uU3RhcnRbMF1dLnRlc3Qoc3RyKTtcbn1cblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8ga2V5IHZhbHVlIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBoZWFkZXJzIFJhdyBoZWFkZXJzIGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBQYXJzZWQgaGVhZGVycyBhcyBrZXkgdmFsdWUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSBjcmVhdGVNYXAoKSwgaTtcblxuICBmdW5jdGlvbiBmaWxsSW5QYXJzZWQoa2V5LCB2YWwpIHtcbiAgICBpZiAoa2V5KSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc1N0cmluZyhoZWFkZXJzKSkge1xuICAgIGZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICAgIGZpbGxJblBhcnNlZChsb3dlcmNhc2UodHJpbShsaW5lLnN1YnN0cigwLCBpKSkpLCB0cmltKGxpbmUuc3Vic3RyKGkgKyAxKSkpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhlYWRlcnMpKSB7XG4gICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbihoZWFkZXJWYWwsIGhlYWRlcktleSkge1xuICAgICAgZmlsbEluUGFyc2VkKGxvd2VyY2FzZShoZWFkZXJLZXkpLCB0cmltKGhlYWRlclZhbCkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byBwYXJzZWQgaGVhZGVycy5cbiAqXG4gKiBIZWFkZXJzIGFyZSBsYXp5IHBhcnNlZCB3aGVuIGZpcnN0IHJlcXVlc3RlZC5cbiAqIEBzZWUgcGFyc2VIZWFkZXJzXG4gKlxuICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCl9IGhlYWRlcnMgSGVhZGVycyB0byBwcm92aWRlIGFjY2VzcyB0by5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmc9KX0gUmV0dXJucyBhIGdldHRlciBmdW5jdGlvbiB3aGljaCBpZiBjYWxsZWQgd2l0aDpcbiAqXG4gKiAgIC0gaWYgY2FsbGVkIHdpdGggYW4gYXJndW1lbnQgcmV0dXJucyBhIHNpbmdsZSBoZWFkZXIgdmFsdWUgb3IgbnVsbFxuICogICAtIGlmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCBoZWFkZXJzLlxuICovXG5mdW5jdGlvbiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnNPYmo7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoIWhlYWRlcnNPYmopIGhlYWRlcnNPYmogPSAgcGFyc2VIZWFkZXJzKGhlYWRlcnMpO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGhlYWRlcnNPYmpbbG93ZXJjYXNlKG5hbWUpXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGVhZGVyc09iajtcbiAgfTtcbn1cblxuXG4vKipcbiAqIENoYWluIGFsbCBnaXZlbiBmdW5jdGlvbnNcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIGJvdGggcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtaW5nXG4gKlxuICogQHBhcmFtIHsqfSBkYXRhIERhdGEgdG8gdHJhbnNmb3JtLlxuICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmc9KX0gaGVhZGVycyBIVFRQIGhlYWRlcnMgZ2V0dGVyIGZuLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1cyBIVFRQIHN0YXR1cyBjb2RlIG9mIHRoZSByZXNwb25zZS5cbiAqIEBwYXJhbSB7KEZ1bmN0aW9ufEFycmF5LjxGdW5jdGlvbj4pfSBmbnMgRnVuY3Rpb24gb3IgYW4gYXJyYXkgb2YgZnVuY3Rpb25zLlxuICogQHJldHVybnMgeyp9IFRyYW5zZm9ybWVkIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgc3RhdHVzLCBmbnMpIHtcbiAgaWYgKGlzRnVuY3Rpb24oZm5zKSkge1xuICAgIHJldHVybiBmbnMoZGF0YSwgaGVhZGVycywgc3RhdHVzKTtcbiAgfVxuXG4gIGZvckVhY2goZm5zLCBmdW5jdGlvbihmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzLCBzdGF0dXMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuXG5mdW5jdGlvbiBpc1N1Y2Nlc3Moc3RhdHVzKSB7XG4gIHJldHVybiAyMDAgPD0gc3RhdHVzICYmIHN0YXR1cyA8IDMwMDtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGh0dHBQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGh0dHBQcm92aWRlcmAgdG8gY2hhbmdlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHNlcnZpY2UuXG4gKiAqL1xuZnVuY3Rpb24gJEh0dHBQcm92aWRlcigpIHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI2RlZmF1bHRzXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmplY3QgY29udGFpbmluZyBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gcmVxdWVzdHMuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMuY2FjaGVgKiogLSB7Ym9vbGVhbnxPYmplY3R9IC0gQSBib29sZWFuIHZhbHVlIG9yIG9iamVjdCBjcmVhdGVkIHdpdGhcbiAgICoge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgYCRjYWNoZUZhY3RvcnlgfSB0byBlbmFibGUgb3IgZGlzYWJsZSBjYWNoaW5nIG9mIEhUVFAgcmVzcG9uc2VzXG4gICAqIGJ5IGRlZmF1bHQuIFNlZSB7QGxpbmsgJGh0dHAjY2FjaGluZyAkaHR0cCBDYWNoaW5nfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5oZWFkZXJzYCoqIC0ge09iamVjdH0gLSBEZWZhdWx0IGhlYWRlcnMgZm9yIGFsbCAkaHR0cCByZXF1ZXN0cy5cbiAgICogUmVmZXIgdG8ge0BsaW5rIG5nLiRodHRwI3NldHRpbmctaHR0cC1oZWFkZXJzICRodHRwfSBmb3IgZG9jdW1lbnRhdGlvbiBvblxuICAgKiBzZXR0aW5nIGRlZmF1bHQgaGVhZGVycy5cbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5jb21tb25gKipcbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wb3N0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucHV0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucGF0Y2hgKipcbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5qc29ucENhbGxiYWNrUGFyYW1gKiogLSBge3N0cmluZ31gIC0gdGhlIG5hbWUgb2YgdGhlIHF1ZXJ5IHBhcmFtZXRlciB0aGF0IHBhc3NlcyB0aGUgbmFtZSBvZiB0aGVcbiAgICogY2FsbGJhY2sgaW4gYSBKU09OUCByZXF1ZXN0LiBUaGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSBleHByZXNzaW9uIGdlbmVyYXRlZCBieSB0aGVcbiAgICoge0BsaW5rICRqc29ucENhbGxiYWNrc30gc2VydmljZS4gRGVmYXVsdHMgdG8gYCdjYWxsYmFjaydgLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcmAqKiAtIGB7c3RyaW5nfGZ1bmN0aW9uKE9iamVjdDxzdHJpbmcsc3RyaW5nPik6c3RyaW5nfWAgLSBBIGZ1bmN0aW9uXG4gICAqICB1c2VkIHRvIHRoZSBwcmVwYXJlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiByZXF1ZXN0IHBhcmFtZXRlcnMgKHNwZWNpZmllZCBhcyBhbiBvYmplY3QpLlxuICAgKiAgSWYgc3BlY2lmaWVkIGFzIHN0cmluZywgaXQgaXMgaW50ZXJwcmV0ZWQgYXMgYSBmdW5jdGlvbiByZWdpc3RlcmVkIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICAgKiAgRGVmYXVsdHMgdG8ge0BsaW5rIG5nLiRodHRwUGFyYW1TZXJpYWxpemVyICRodHRwUGFyYW1TZXJpYWxpemVyfS5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCoqIC1cbiAgICogYHtBcnJheTxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT58ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil9YCAtXG4gICAqIEFuIGFycmF5IG9mIGZ1bmN0aW9ucyAob3IgYSBzaW5nbGUgZnVuY3Rpb24pIHdoaWNoIGFyZSBhcHBsaWVkIHRvIHRoZSByZXF1ZXN0IGRhdGEuXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaXMgYW4gYXJyYXkgd2l0aCBvbmUgcmVxdWVzdCB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbjpcbiAgICpcbiAgICogICAtIElmIHRoZSBgZGF0YWAgcHJvcGVydHkgb2YgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbnMgYW4gb2JqZWN0LCBzZXJpYWxpemUgaXRcbiAgICogICAgIGludG8gSlNPTiBmb3JtYXQuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgKiogLVxuICAgKiBge0FycmF5PGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyk+fGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyl9YCAtXG4gICAqIEFuIGFycmF5IG9mIGZ1bmN0aW9ucyAob3IgYSBzaW5nbGUgZnVuY3Rpb24pIHdoaWNoIGFyZSBhcHBsaWVkIHRvIHRoZSByZXNwb25zZSBkYXRhLiBCeSBkZWZhdWx0LFxuICAgKiB0aGlzIGlzIGFuIGFycmF5IHdoaWNoIGFwcGxpZXMgb25lIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIHRoYXQgZG9lcyB0d28gdGhpbmdzOlxuICAgKlxuICAgKiAgLSBJZiBYU1JGIHByZWZpeCBpcyBkZXRlY3RlZCwgc3RyaXAgaXRcbiAgICogICAgKHNlZSB7QGxpbmsgbmcuJGh0dHAjc2VjdXJpdHktY29uc2lkZXJhdGlvbnMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgaW4gdGhlICRodHRwIGRvY3N9KS5cbiAgICogIC0gSWYgdGhlIGBDb250ZW50LVR5cGVgIGlzIGBhcHBsaWNhdGlvbi9qc29uYCBvciB0aGUgcmVzcG9uc2UgbG9va3MgbGlrZSBKU09OLFxuICAgKiAgICBkZXNlcmlhbGl6ZSBpdCB1c2luZyBhIEpTT04gcGFyc2VyLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLnhzcmZDb29raWVOYW1lYCoqIC0ge3N0cmluZ30gLSBOYW1lIG9mIGNvb2tpZSBjb250YWluaW5nIHRoZSBYU1JGIHRva2VuLlxuICAgKiBEZWZhdWx0cyB2YWx1ZSBpcyBgJ1hTUkYtVE9LRU4nYC5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZWAqKiAtIHtzdHJpbmd9IC0gTmFtZSBvZiBIVFRQIGhlYWRlciB0byBwb3B1bGF0ZSB3aXRoIHRoZVxuICAgKiBYU1JGIHRva2VuLiBEZWZhdWx0cyB2YWx1ZSBpcyBgJ1gtWFNSRi1UT0tFTidgLlxuICAgKlxuICAgKiovXG4gIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgLy8gdHJhbnNmb3JtIGluY29taW5nIHJlc3BvbnNlIGRhdGFcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogW2RlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm1dLFxuXG4gICAgLy8gdHJhbnNmb3JtIG91dGdvaW5nIHJlcXVlc3QgZGF0YVxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QoZCkgJiYgIWlzRmlsZShkKSAmJiAhaXNCbG9iKGQpICYmICFpc0Zvcm1EYXRhKGQpID8gdG9Kc29uKGQpIDogZDtcbiAgICB9XSxcblxuICAgIC8vIGRlZmF1bHQgaGVhZGVyc1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIGNvbW1vbjoge1xuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICAgIH0sXG4gICAgICBwb3N0OiAgIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSxcbiAgICAgIHB1dDogICAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pLFxuICAgICAgcGF0Y2g6ICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTilcbiAgICB9LFxuXG4gICAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgICBwYXJhbVNlcmlhbGl6ZXI6ICckaHR0cFBhcmFtU2VyaWFsaXplcicsXG5cbiAgICBqc29ucENhbGxiYWNrUGFyYW06ICdjYWxsYmFjaydcbiAgfTtcblxuICB2YXIgdXNlQXBwbHlBc3luYyA9IGZhbHNlO1xuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI3VzZUFwcGx5QXN5bmNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIENvbmZpZ3VyZSAkaHR0cCBzZXJ2aWNlIHRvIGNvbWJpbmUgcHJvY2Vzc2luZyBvZiBtdWx0aXBsZSBodHRwIHJlc3BvbnNlcyByZWNlaXZlZCBhdCBhcm91bmRcbiAgICogdGhlIHNhbWUgdGltZSB2aWEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5QXN5bmMgJHJvb3RTY29wZS4kYXBwbHlBc3luY30uIFRoaXMgY2FuIHJlc3VsdCBpblxuICAgKiBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudCBmb3IgYmlnZ2VyIGFwcGxpY2F0aW9ucyB0aGF0IG1ha2UgbWFueSBIVFRQIHJlcXVlc3RzXG4gICAqIGNvbmN1cnJlbnRseSAoY29tbW9uIGR1cmluZyBhcHBsaWNhdGlvbiBib290c3RyYXApLlxuICAgKlxuICAgKiBEZWZhdWx0cyB0byBmYWxzZS4gSWYgbm8gdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHRydWUsIHdoZW4gcmVxdWVzdHMgYXJlIGxvYWRlZCwgdGhleSB3aWxsIHNjaGVkdWxlIGEgZGVmZXJyZWRcbiAgICogICAgXCJhcHBseVwiIG9uIHRoZSBuZXh0IHRpY2ssIGdpdmluZyB0aW1lIGZvciBzdWJzZXF1ZW50IHJlcXVlc3RzIGluIGEgcm91Z2hseSB+MTBtcyB3aW5kb3dcbiAgICogICAgdG8gbG9hZCBhbmQgc2hhcmUgdGhlIHNhbWUgZGlnZXN0IGN5Y2xlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxPYmplY3R9IElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSAkaHR0cFByb3ZpZGVyIGZvciBjaGFpbmluZy5cbiAgICogICAgb3RoZXJ3aXNlLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqKi9cbiAgdGhpcy51c2VBcHBseUFzeW5jID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgdXNlQXBwbHlBc3luYyA9ICEhdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHVzZUFwcGx5QXN5bmM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI2ludGVyY2VwdG9yc1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQXJyYXkgY29udGFpbmluZyBzZXJ2aWNlIGZhY3RvcmllcyBmb3IgYWxsIHN5bmNocm9ub3VzIG9yIGFzeW5jaHJvbm91cyB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9XG4gICAqIHByZS1wcm9jZXNzaW5nIG9mIHJlcXVlc3Qgb3IgcG9zdHByb2Nlc3Npbmcgb2YgcmVzcG9uc2VzLlxuICAgKlxuICAgKiBUaGVzZSBzZXJ2aWNlIGZhY3RvcmllcyBhcmUgb3JkZXJlZCBieSByZXF1ZXN0LCBpLmUuIHRoZXkgYXJlIGFwcGxpZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4gICAqIGFycmF5LCBvbiByZXF1ZXN0LCBidXQgcmV2ZXJzZSBvcmRlciwgb24gcmVzcG9uc2UuXG4gICAqXG4gICAqIHtAbGluayBuZy4kaHR0cCNpbnRlcmNlcHRvcnMgSW50ZXJjZXB0b3JzIGRldGFpbGVkIGluZm99XG4gICAqKi9cbiAgdmFyIGludGVyY2VwdG9yRmFjdG9yaWVzID0gdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcblxuICB0aGlzLiRnZXQgPSBbJyRicm93c2VyJywgJyRodHRwQmFja2VuZCcsICckJGNvb2tpZVJlYWRlcicsICckY2FjaGVGYWN0b3J5JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGluamVjdG9yJywgJyRzY2UnLFxuICAgICAgZnVuY3Rpb24oJGJyb3dzZXIsICRodHRwQmFja2VuZCwgJCRjb29raWVSZWFkZXIsICRjYWNoZUZhY3RvcnksICRyb290U2NvcGUsICRxLCAkaW5qZWN0b3IsICRzY2UpIHtcblxuICAgIHZhciBkZWZhdWx0Q2FjaGUgPSAkY2FjaGVGYWN0b3J5KCckaHR0cCcpO1xuXG4gICAgLyoqXG4gICAgICogTWFrZSBzdXJlIHRoYXQgZGVmYXVsdCBwYXJhbSBzZXJpYWxpemVyIGlzIGV4cG9zZWQgYXMgYSBmdW5jdGlvblxuICAgICAqL1xuICAgIGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplciA9IGlzU3RyaW5nKGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcikgP1xuICAgICAgJGluamVjdG9yLmdldChkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXIpIDogZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJjZXB0b3JzIHN0b3JlZCBpbiByZXZlcnNlIG9yZGVyLiBJbm5lciBpbnRlcmNlcHRvcnMgYmVmb3JlIG91dGVyIGludGVyY2VwdG9ycy5cbiAgICAgKiBUaGUgcmV2ZXJzYWwgaXMgbmVlZGVkIHNvIHRoYXQgd2UgY2FuIGJ1aWxkIHVwIHRoZSBpbnRlcmNlcHRpb24gY2hhaW4gYXJvdW5kIHRoZVxuICAgICAqIHNlcnZlciByZXF1ZXN0LlxuICAgICAqL1xuICAgIHZhciByZXZlcnNlZEludGVyY2VwdG9ycyA9IFtdO1xuXG4gICAgZm9yRWFjaChpbnRlcmNlcHRvckZhY3RvcmllcywgZnVuY3Rpb24oaW50ZXJjZXB0b3JGYWN0b3J5KSB7XG4gICAgICByZXZlcnNlZEludGVyY2VwdG9ycy51bnNoaWZ0KGlzU3RyaW5nKGludGVyY2VwdG9yRmFjdG9yeSlcbiAgICAgICAgICA/ICRpbmplY3Rvci5nZXQoaW50ZXJjZXB0b3JGYWN0b3J5KSA6ICRpbmplY3Rvci5pbnZva2UoaW50ZXJjZXB0b3JGYWN0b3J5KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJGh0dHBcbiAgICAgKiBAcmVxdWlyZXMgbmcuJGh0dHBCYWNrZW5kXG4gICAgICogQHJlcXVpcmVzICRjYWNoZUZhY3RvcnlcbiAgICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgICAqIEByZXF1aXJlcyAkcVxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBjb3JlIEFuZ3VsYXIgc2VydmljZSB0aGF0IGZhY2lsaXRhdGVzIGNvbW11bmljYXRpb24gd2l0aCB0aGUgcmVtb3RlXG4gICAgICogSFRUUCBzZXJ2ZXJzIHZpYSB0aGUgYnJvd3NlcidzIFtYTUxIdHRwUmVxdWVzdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4veG1saHR0cHJlcXVlc3QpXG4gICAgICogb2JqZWN0IG9yIHZpYSBbSlNPTlBdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlApLlxuICAgICAqXG4gICAgICogRm9yIHVuaXQgdGVzdGluZyBhcHBsaWNhdGlvbnMgdGhhdCB1c2UgYCRodHRwYCBzZXJ2aWNlLCBzZWVcbiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCAkaHR0cEJhY2tlbmQgbW9ja30uXG4gICAgICpcbiAgICAgKiBGb3IgYSBoaWdoZXIgbGV2ZWwgb2YgYWJzdHJhY3Rpb24sIHBsZWFzZSBjaGVjayBvdXQgdGhlIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZVxuICAgICAqICRyZXNvdXJjZX0gc2VydmljZS5cbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBBUEkgaXMgYmFzZWQgb24gdGhlIHtAbGluayBuZy4kcSBkZWZlcnJlZC9wcm9taXNlIEFQSXN9IGV4cG9zZWQgYnlcbiAgICAgKiB0aGUgJHEgc2VydmljZS4gV2hpbGUgZm9yIHNpbXBsZSB1c2FnZSBwYXR0ZXJucyB0aGlzIGRvZXNuJ3QgbWF0dGVyIG11Y2gsIGZvciBhZHZhbmNlZCB1c2FnZVxuICAgICAqIGl0IGlzIGltcG9ydGFudCB0byBmYW1pbGlhcml6ZSB5b3Vyc2VsZiB3aXRoIHRoZXNlIEFQSXMgYW5kIHRoZSBndWFyYW50ZWVzIHRoZXkgcHJvdmlkZS5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgR2VuZXJhbCB1c2FnZVxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyBhIHNpbmdsZSBhcmd1bWVudCDigJQgYSB7QGxpbmsgJGh0dHAjdXNhZ2UgY29uZmlndXJhdGlvbiBvYmplY3R9IOKAlFxuICAgICAqIHRoYXQgaXMgdXNlZCB0byBnZW5lcmF0ZSBhbiBIVFRQIHJlcXVlc3QgYW5kIHJldHVybnMgIGEge0BsaW5rIG5nLiRxIHByb21pc2V9LlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIC8vIFNpbXBsZSBHRVQgcmVxdWVzdCBleGFtcGxlOlxuICAgICAqICAgJGh0dHAoe1xuICAgICAqICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAqICAgICB1cmw6ICcvc29tZVVybCdcbiAgICAgKiAgIH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgLy8gdGhpcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBhc3luY2hyb25vdXNseVxuICAgICAqICAgICAgIC8vIHdoZW4gdGhlIHJlc3BvbnNlIGlzIGF2YWlsYWJsZVxuICAgICAqICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgLy8gY2FsbGVkIGFzeW5jaHJvbm91c2x5IGlmIGFuIGVycm9yIG9jY3Vyc1xuICAgICAqICAgICAgIC8vIG9yIHNlcnZlciByZXR1cm5zIHJlc3BvbnNlIHdpdGggYW4gZXJyb3Igc3RhdHVzLlxuICAgICAqICAgICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZSByZXNwb25zZSBvYmplY3QgaGFzIHRoZXNlIHByb3BlcnRpZXM6XG4gICAgICpcbiAgICAgKiAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBUaGUgcmVzcG9uc2UgYm9keSB0cmFuc2Zvcm1lZCB3aXRoIHRoZSB0cmFuc2Zvcm1cbiAgICAgKiAgICAgZnVuY3Rpb25zLlxuICAgICAqICAgLSAqKnN0YXR1cyoqIOKAkyBge251bWJlcn1gIOKAkyBIVFRQIHN0YXR1cyBjb2RlIG9mIHRoZSByZXNwb25zZS5cbiAgICAgKiAgIC0gKipoZWFkZXJzKiog4oCTIGB7ZnVuY3Rpb24oW2hlYWRlck5hbWVdKX1gIOKAkyBIZWFkZXIgZ2V0dGVyIGZ1bmN0aW9uLlxuICAgICAqICAgLSAqKmNvbmZpZyoqIOKAkyBge09iamVjdH1gIOKAkyBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVxdWVzdC5cbiAgICAgKiAgIC0gKipzdGF0dXNUZXh0Kiog4oCTIGB7c3RyaW5nfWAg4oCTIEhUVFAgc3RhdHVzIHRleHQgb2YgdGhlIHJlc3BvbnNlLlxuICAgICAqICAgLSAqKnhoclN0YXR1cyoqIOKAkyBge3N0cmluZ31gIOKAkyBTdGF0dXMgb2YgdGhlIFhNTEh0dHBSZXF1ZXN0IChgY29tcGxldGVgLCBgZXJyb3JgLCBgdGltZW91dGAgb3IgYGFib3J0YCkuXG4gICAgICpcbiAgICAgKiBBIHJlc3BvbnNlIHN0YXR1cyBjb2RlIGJldHdlZW4gMjAwIGFuZCAyOTkgaXMgY29uc2lkZXJlZCBhIHN1Y2Nlc3Mgc3RhdHVzIGFuZCB3aWxsIHJlc3VsdCBpblxuICAgICAqIHRoZSBzdWNjZXNzIGNhbGxiYWNrIGJlaW5nIGNhbGxlZC4gQW55IHJlc3BvbnNlIHN0YXR1cyBjb2RlIG91dHNpZGUgb2YgdGhhdCByYW5nZSBpc1xuICAgICAqIGNvbnNpZGVyZWQgYW4gZXJyb3Igc3RhdHVzIGFuZCB3aWxsIHJlc3VsdCBpbiB0aGUgZXJyb3IgY2FsbGJhY2sgYmVpbmcgY2FsbGVkLlxuICAgICAqIEFsc28sIHN0YXR1cyBjb2RlcyBsZXNzIHRoYW4gLTEgYXJlIG5vcm1hbGl6ZWQgdG8gemVyby4gLTEgdXN1YWxseSBtZWFucyB0aGUgcmVxdWVzdCB3YXNcbiAgICAgKiBhYm9ydGVkLCBlLmcuIHVzaW5nIGEgYGNvbmZpZy50aW1lb3V0YC5cbiAgICAgKiBOb3RlIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsIFhNTEh0dHBSZXF1ZXN0IHdpbGwgdHJhbnNwYXJlbnRseSBmb2xsb3cgaXQsIG1lYW5pbmdcbiAgICAgKiB0aGF0IHRoZSBvdXRjb21lIChzdWNjZXNzIG9yIGVycm9yKSB3aWxsIGJlIGRldGVybWluZWQgYnkgdGhlIGZpbmFsIHJlc3BvbnNlIHN0YXR1cyBjb2RlLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBTaG9ydGN1dCBtZXRob2RzXG4gICAgICpcbiAgICAgKiBTaG9ydGN1dCBtZXRob2RzIGFyZSBhbHNvIGF2YWlsYWJsZS4gQWxsIHNob3J0Y3V0IG1ldGhvZHMgcmVxdWlyZSBwYXNzaW5nIGluIHRoZSBVUkwsIGFuZFxuICAgICAqIHJlcXVlc3QgZGF0YSBtdXN0IGJlIHBhc3NlZCBpbiBmb3IgUE9TVC9QVVQgcmVxdWVzdHMuIEFuIG9wdGlvbmFsIGNvbmZpZyBjYW4gYmUgcGFzc2VkIGFzIHRoZVxuICAgICAqIGxhc3QgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgJGh0dHAuZ2V0KCcvc29tZVVybCcsIGNvbmZpZykudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhLCBjb25maWcpLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIENvbXBsZXRlIGxpc3Qgb2Ygc2hvcnRjdXQgbWV0aG9kczpcbiAgICAgKlxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2dldCAkaHR0cC5nZXR9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjaGVhZCAkaHR0cC5oZWFkfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3Bvc3QgJGh0dHAucG9zdH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwdXQgJGh0dHAucHV0fVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2RlbGV0ZSAkaHR0cC5kZWxldGV9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjanNvbnAgJGh0dHAuanNvbnB9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcGF0Y2ggJGh0dHAucGF0Y2h9XG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIFdyaXRpbmcgVW5pdCBUZXN0cyB0aGF0IHVzZSAkaHR0cFxuICAgICAqIFdoZW4gdW5pdCB0ZXN0aW5nICh1c2luZyB7QGxpbmsgbmdNb2NrIG5nTW9ja30pLCBpdCBpcyBuZWNlc3NhcnkgdG8gY2FsbFxuICAgICAqIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kI2ZsdXNoICRodHRwQmFja2VuZC5mbHVzaCgpfSB0byBmbHVzaCBlYWNoIHBlbmRpbmdcbiAgICAgKiByZXF1ZXN0IHVzaW5nIHRyYWluZWQgcmVzcG9uc2VzLlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogJGh0dHBCYWNrZW5kLmV4cGVjdEdFVCguLi4pO1xuICAgICAqICRodHRwLmdldCguLi4pO1xuICAgICAqICRodHRwQmFja2VuZC5mbHVzaCgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgU2V0dGluZyBIVFRQIEhlYWRlcnNcbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBzZXJ2aWNlIHdpbGwgYXV0b21hdGljYWxseSBhZGQgY2VydGFpbiBIVFRQIGhlYWRlcnMgdG8gYWxsIHJlcXVlc3RzLiBUaGVzZSBkZWZhdWx0c1xuICAgICAqIGNhbiBiZSBmdWxseSBjb25maWd1cmVkIGJ5IGFjY2Vzc2luZyB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVyc2AgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdCwgd2hpY2ggY3VycmVudGx5IGNvbnRhaW5zIHRoaXMgZGVmYXVsdCBjb25maWd1cmF0aW9uOlxuICAgICAqXG4gICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbmAgKGhlYWRlcnMgdGhhdCBhcmUgY29tbW9uIGZvciBhbGwgcmVxdWVzdHMpOlxuICAgICAqICAgLSA8Y29kZT5BY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sIFxcKiYjNjUyNzk7LyYjNjUyNzk7XFwqPC9jb2RlPlxuICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cylcbiAgICAgKiAgIC0gYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbmBcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucHV0YCAoaGVhZGVyIGRlZmF1bHRzIGZvciBQVVQgcmVxdWVzdHMpXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICpcbiAgICAgKiBUbyBhZGQgb3Igb3ZlcndyaXRlIHRoZXNlIGRlZmF1bHRzLCBzaW1wbHkgYWRkIG9yIHJlbW92ZSBhIHByb3BlcnR5IGZyb20gdGhlc2UgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdFxuICAgICAqIHdpdGggdGhlIGxvd2VyY2FzZWQgSFRUUCBtZXRob2QgbmFtZSBhcyB0aGUga2V5LCBlLmcuXG4gICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQgPSB7ICdNeS1IZWFkZXInIDogJ3ZhbHVlJyB9YC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0cyBjYW4gYWxzbyBiZSBzZXQgYXQgcnVudGltZSB2aWEgdGhlIGAkaHR0cC5kZWZhdWx0c2Agb2JqZWN0IGluIHRoZSBzYW1lXG4gICAgICogZmFzaGlvbi4gRm9yIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBtb2R1bGUucnVuKGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgICogICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljIFltVmxjRHBpYjI5dyc7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiwgeW91IGNhbiBzdXBwbHkgYSBgaGVhZGVyc2AgcHJvcGVydHkgaW4gdGhlIGNvbmZpZyBvYmplY3QgcGFzc2VkIHdoZW5cbiAgICAgKiBjYWxsaW5nIGAkaHR0cChjb25maWcpYCwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBkZWZhdWx0cyB3aXRob3V0IGNoYW5naW5nIHRoZW0gZ2xvYmFsbHkuXG4gICAgICpcbiAgICAgKiBUbyBleHBsaWNpdGx5IHJlbW92ZSBhIGhlYWRlciBhdXRvbWF0aWNhbGx5IGFkZGVkIHZpYSAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMgb24gYSBwZXIgcmVxdWVzdCBiYXNpcyxcbiAgICAgKiBVc2UgdGhlIGBoZWFkZXJzYCBwcm9wZXJ0eSwgc2V0dGluZyB0aGUgZGVzaXJlZCBoZWFkZXIgdG8gYHVuZGVmaW5lZGAuIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiB2YXIgcmVxID0ge1xuICAgICAqICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgKiAgdXJsOiAnaHR0cDovL2V4YW1wbGUuY29tJyxcbiAgICAgKiAgaGVhZGVyczoge1xuICAgICAqICAgICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbiAgICAgKiAgfSxcbiAgICAgKiAgZGF0YTogeyB0ZXN0OiAndGVzdCcgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqICRodHRwKHJlcSkudGhlbihmdW5jdGlvbigpey4uLn0sIGZ1bmN0aW9uKCl7Li4ufSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyBUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1xuICAgICAqXG4gICAgICogQm90aCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIGNhbiBiZSB0cmFuc2Zvcm1lZCB1c2luZyB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnM6IGB0cmFuc2Zvcm1SZXF1ZXN0YFxuICAgICAqIGFuZCBgdHJhbnNmb3JtUmVzcG9uc2VgLiBUaGVzZSBwcm9wZXJ0aWVzIGNhbiBiZSBhIHNpbmdsZSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgKGBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpYCkgb3IgYW4gYXJyYXkgb2Ygc3VjaCB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnMsXG4gICAgICogd2hpY2ggYWxsb3dzIHlvdSB0byBgcHVzaGAgb3IgYHVuc2hpZnRgIGEgbmV3IHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIGludG8gdGhlIHRyYW5zZm9ybWF0aW9uIGNoYWluLlxuICAgICAqXG4gICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgKiAqKk5vdGU6KiogQW5ndWxhciBkb2VzIG5vdCBtYWtlIGEgY29weSBvZiB0aGUgYGRhdGFgIHBhcmFtZXRlciBiZWZvcmUgaXQgaXMgcGFzc2VkIGludG8gdGhlIGB0cmFuc2Zvcm1SZXF1ZXN0YCBwaXBlbGluZS5cbiAgICAgKiBUaGF0IG1lYW5zIGNoYW5nZXMgdG8gdGhlIHByb3BlcnRpZXMgb2YgYGRhdGFgIGFyZSBub3QgbG9jYWwgdG8gdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiAoc2luY2UgSmF2YXNjcmlwdCBwYXNzZXMgb2JqZWN0cyBieSByZWZlcmVuY2UpLlxuICAgICAqIEZvciBleGFtcGxlLCB3aGVuIGNhbGxpbmcgYCRodHRwLmdldCh1cmwsICRzY29wZS5teU9iamVjdClgLCBtb2RpZmljYXRpb25zIHRvIHRoZSBvYmplY3QncyBwcm9wZXJ0aWVzIGluIGEgdHJhbnNmb3JtUmVxdWVzdFxuICAgICAqIGZ1bmN0aW9uIHdpbGwgYmUgcmVmbGVjdGVkIG9uIHRoZSBzY29wZSBhbmQgaW4gYW55IHRlbXBsYXRlcyB3aGVyZSB0aGUgb2JqZWN0IGlzIGRhdGEtYm91bmQuXG4gICAgICogVG8gcHJldmVudCB0aGlzLCB0cmFuc2Zvcm0gZnVuY3Rpb25zIHNob3VsZCBoYXZlIG5vIHNpZGUtZWZmZWN0cy5cbiAgICAgKiBJZiB5b3UgbmVlZCB0byBtb2RpZnkgcHJvcGVydGllcywgaXQgaXMgcmVjb21tZW5kZWQgdG8gbWFrZSBhIGNvcHkgb2YgdGhlIGRhdGEsIG9yIGNyZWF0ZSBuZXcgb2JqZWN0IHRvIHJldHVybi5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKlxuICAgICAqICMjIyBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc1xuICAgICAqXG4gICAgICogVGhlIGAkaHR0cFByb3ZpZGVyYCBwcm92aWRlciBhbmQgYCRodHRwYCBzZXJ2aWNlIGV4cG9zZSBgZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGAgYW5kXG4gICAgICogYGRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzLiBJZiBhIHJlcXVlc3QgZG9lcyBub3QgcHJvdmlkZSBpdHMgb3duIHRyYW5zZm9ybWF0aW9uc1xuICAgICAqIHRoZW4gdGhlc2Ugd2lsbCBiZSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogWW91IGNhbiBhdWdtZW50IG9yIHJlcGxhY2UgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIGJ5IG1vZGlmeWluZyB0aGVzZSBwcm9wZXJ0aWVzIGJ5IGFkZGluZyB0byBvclxuICAgICAqIHJlcGxhY2luZyB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBBbmd1bGFyIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnM6XG4gICAgICpcbiAgICAgKiBSZXF1ZXN0IHRyYW5zZm9ybWF0aW9ucyAoYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGAgYW5kIGAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCkgaXNcbiAgICAgKiBhbiBhcnJheSB3aXRoIG9uZSBmdW5jdGlvbiB0aGF0IGRvZXMgdGhlIGZvbGxvd2luZzpcbiAgICAgKlxuICAgICAqIC0gSWYgdGhlIGBkYXRhYCBwcm9wZXJ0eSBvZiB0aGUgcmVxdWVzdCBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWlucyBhbiBvYmplY3QsIHNlcmlhbGl6ZSBpdFxuICAgICAqICAgaW50byBKU09OIGZvcm1hdC5cbiAgICAgKlxuICAgICAqIFJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucyAoYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgIGFuZCBgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgKSBpc1xuICAgICAqIGFuIGFycmF5IHdpdGggb25lIGZ1bmN0aW9uIHRoYXQgZG9lcyB0aGUgZm9sbG93aW5nOlxuICAgICAqXG4gICAgICogIC0gSWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykuXG4gICAgICogIC0gSWYgdGhlIGBDb250ZW50LVR5cGVgIGlzIGBhcHBsaWNhdGlvbi9qc29uYCBvciB0aGUgcmVzcG9uc2UgbG9va3MgbGlrZSBKU09OLFxuICAgKiAgICAgIGRlc2VyaWFsaXplIGl0IHVzaW5nIGEgSlNPTiBwYXJzZXIuXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIyBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9ucyBQZXIgUmVxdWVzdFxuICAgICAqXG4gICAgICogSWYgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIHJlcXVlc3QvcmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zIG9ubHkgZm9yIGEgc2luZ2xlIHJlcXVlc3QgdGhlbiBwcm92aWRlXG4gICAgICogYHRyYW5zZm9ybVJlcXVlc3RgIGFuZC9vciBgdHJhbnNmb3JtUmVzcG9uc2VgIHByb3BlcnRpZXMgb24gdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHBhc3NlZFxuICAgICAqIGludG8gYCRodHRwYC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBpZiB5b3UgcHJvdmlkZSB0aGVzZSBwcm9wZXJ0aWVzIG9uIHRoZSBjb25maWcgb2JqZWN0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyB3aWxsIGJlXG4gICAgICogb3ZlcndyaXR0ZW4uIElmIHlvdSB3aXNoIHRvIGF1Z21lbnQgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIHRoZW4geW91IG11c3QgaW5jbHVkZSB0aGVtIGluIHlvdXJcbiAgICAgKiBsb2NhbCB0cmFuc2Zvcm1hdGlvbiBhcnJheS5cbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgY29kZSBkZW1vbnN0cmF0ZXMgYWRkaW5nIGEgbmV3IHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9uIHRvIGJlIHJ1biBhZnRlciB0aGUgZGVmYXVsdCByZXNwb25zZVxuICAgICAqIHRyYW5zZm9ybWF0aW9ucyBoYXZlIGJlZW4gcnVuLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBmdW5jdGlvbiBhcHBlbmRUcmFuc2Zvcm0oZGVmYXVsdHMsIHRyYW5zZm9ybSkge1xuICAgICAqXG4gICAgICogICAvLyBXZSBjYW4ndCBndWFyYW50ZWUgdGhhdCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbiBpcyBhbiBhcnJheVxuICAgICAqICAgZGVmYXVsdHMgPSBhbmd1bGFyLmlzQXJyYXkoZGVmYXVsdHMpID8gZGVmYXVsdHMgOiBbZGVmYXVsdHNdO1xuICAgICAqXG4gICAgICogICAvLyBBcHBlbmQgdGhlIG5ldyB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgZGVmYXVsdHNcbiAgICAgKiAgIHJldHVybiBkZWZhdWx0cy5jb25jYXQodHJhbnNmb3JtKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiAkaHR0cCh7XG4gICAgICogICB1cmw6ICcuLi4nLFxuICAgICAqICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgKiAgIHRyYW5zZm9ybVJlc3BvbnNlOiBhcHBlbmRUcmFuc2Zvcm0oJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2UsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgIHJldHVybiBkb1RyYW5zZm9ybSh2YWx1ZSk7XG4gICAgICogICB9KVxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBDYWNoaW5nXG4gICAgICpcbiAgICAgKiB7QGxpbmsgbmcuJGh0dHAgYCRodHRwYH0gcmVzcG9uc2VzIGFyZSBub3QgY2FjaGVkIGJ5IGRlZmF1bHQuIFRvIGVuYWJsZSBjYWNoaW5nLCB5b3UgbXVzdFxuICAgICAqIHNldCB0aGUgY29uZmlnLmNhY2hlIHZhbHVlIG9yIHRoZSBkZWZhdWx0IGNhY2hlIHZhbHVlIHRvIFRSVUUgb3IgdG8gYSBjYWNoZSBvYmplY3QgKGNyZWF0ZWRcbiAgICAgKiB3aXRoIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pLiBJZiBkZWZpbmVkLCB0aGUgdmFsdWUgb2YgY29uZmlnLmNhY2hlIHRha2VzXG4gICAgICogcHJlY2VkZW5jZSBvdmVyIHRoZSBkZWZhdWx0IGNhY2hlIHZhbHVlLlxuICAgICAqXG4gICAgICogSW4gb3JkZXIgdG86XG4gICAgICogICAqIGNhY2hlIGFsbCByZXNwb25zZXMgLSBzZXQgdGhlIGRlZmF1bHQgY2FjaGUgdmFsdWUgdG8gVFJVRSBvciB0byBhIGNhY2hlIG9iamVjdFxuICAgICAqICAgKiBjYWNoZSBhIHNwZWNpZmljIHJlc3BvbnNlIC0gc2V0IGNvbmZpZy5jYWNoZSB2YWx1ZSB0byBUUlVFIG9yIHRvIGEgY2FjaGUgb2JqZWN0XG4gICAgICpcbiAgICAgKiBJZiBjYWNoaW5nIGlzIGVuYWJsZWQsIGJ1dCBuZWl0aGVyIHRoZSBkZWZhdWx0IGNhY2hlIG5vciBjb25maWcuY2FjaGUgYXJlIHNldCB0byBhIGNhY2hlIG9iamVjdCxcbiAgICAgKiB0aGVuIHRoZSBkZWZhdWx0IGAkY2FjaGVGYWN0b3J5KFwiJGh0dHBcIilgIG9iamVjdCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgY2FjaGUgdmFsdWUgY2FuIGJlIHNldCBieSB1cGRhdGluZyB0aGVcbiAgICAgKiB7QGxpbmsgbmcuJGh0dHAjZGVmYXVsdHMgYCRodHRwLmRlZmF1bHRzLmNhY2hlYH0gcHJvcGVydHkgb3IgdGhlXG4gICAgICoge0BsaW5rICRodHRwUHJvdmlkZXIjZGVmYXVsdHMgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuY2FjaGVgfSBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIFdoZW4gY2FjaGluZyBpcyBlbmFibGVkLCB7QGxpbmsgbmcuJGh0dHAgYCRodHRwYH0gc3RvcmVzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgdXNpbmdcbiAgICAgKiB0aGUgcmVsZXZhbnQgY2FjaGUgb2JqZWN0LiBUaGUgbmV4dCB0aW1lIHRoZSBzYW1lIHJlcXVlc3QgaXMgbWFkZSwgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAgICogZnJvbSB0aGUgY2FjaGUgd2l0aG91dCBzZW5kaW5nIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogVGFrZSBub3RlIHRoYXQ6XG4gICAgICpcbiAgICAgKiAgICogT25seSBHRVQgYW5kIEpTT05QIHJlcXVlc3RzIGFyZSBjYWNoZWQuXG4gICAgICogICAqIFRoZSBjYWNoZSBrZXkgaXMgdGhlIHJlcXVlc3QgVVJMIGluY2x1ZGluZyBzZWFyY2ggcGFyYW1ldGVyczsgaGVhZGVycyBhcmUgbm90IGNvbnNpZGVyZWQuXG4gICAgICogICAqIENhY2hlZCByZXNwb25zZXMgYXJlIHJldHVybmVkIGFzeW5jaHJvbm91c2x5LCBpbiB0aGUgc2FtZSB3YXkgYXMgcmVzcG9uc2VzIGZyb20gdGhlIHNlcnZlci5cbiAgICAgKiAgICogSWYgbXVsdGlwbGUgaWRlbnRpY2FsIHJlcXVlc3RzIGFyZSBtYWRlIHVzaW5nIHRoZSBzYW1lIGNhY2hlLCB3aGljaCBpcyBub3QgeWV0IHBvcHVsYXRlZCxcbiAgICAgKiAgICAgb25lIHJlcXVlc3Qgd2lsbCBiZSBtYWRlIHRvIHRoZSBzZXJ2ZXIgYW5kIHJlbWFpbmluZyByZXF1ZXN0cyB3aWxsIHJldHVybiB0aGUgc2FtZSByZXNwb25zZS5cbiAgICAgKiAgICogQSBjYWNoZS1jb250cm9sIGhlYWRlciBvbiB0aGUgcmVzcG9uc2UgZG9lcyBub3QgYWZmZWN0IGlmIG9yIGhvdyByZXNwb25zZXMgYXJlIGNhY2hlZC5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgSW50ZXJjZXB0b3JzXG4gICAgICpcbiAgICAgKiBCZWZvcmUgeW91IHN0YXJ0IGNyZWF0aW5nIGludGVyY2VwdG9ycywgYmUgc3VyZSB0byB1bmRlcnN0YW5kIHRoZVxuICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS5cbiAgICAgKlxuICAgICAqIEZvciBwdXJwb3NlcyBvZiBnbG9iYWwgZXJyb3IgaGFuZGxpbmcsIGF1dGhlbnRpY2F0aW9uLCBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvclxuICAgICAqIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZyBvZiByZXF1ZXN0IG9yIHBvc3Rwcm9jZXNzaW5nIG9mIHJlc3BvbnNlcywgaXQgaXMgZGVzaXJhYmxlIHRvIGJlXG4gICAgICogYWJsZSB0byBpbnRlcmNlcHQgcmVxdWVzdHMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCB0byB0aGUgc2VydmVyIGFuZFxuICAgICAqIHJlc3BvbnNlcyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdFxuICAgICAqIGluaXRpYXRlZCB0aGVzZSByZXF1ZXN0cy4gVGhlIGludGVyY2VwdG9ycyBsZXZlcmFnZSB0aGUge0BsaW5rIG5nLiRxXG4gICAgICogcHJvbWlzZSBBUElzfSB0byBmdWxmaWxsIHRoaXMgbmVlZCBmb3IgYm90aCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHByZS1wcm9jZXNzaW5nLlxuICAgICAqXG4gICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGh0dHBQcm92aWRlcmAgYnlcbiAgICAgKiBhZGRpbmcgdGhlbSB0byB0aGUgYCRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzYCBhcnJheS4gVGhlIGZhY3RvcnkgaXMgY2FsbGVkIGFuZFxuICAgICAqIGluamVjdGVkIHdpdGggZGVwZW5kZW5jaWVzIChpZiBzcGVjaWZpZWQpIGFuZCByZXR1cm5zIHRoZSBpbnRlcmNlcHRvci5cbiAgICAgKlxuICAgICAqIFRoZXJlIGFyZSB0d28ga2luZHMgb2YgaW50ZXJjZXB0b3JzIChhbmQgdHdvIGtpbmRzIG9mIHJlamVjdGlvbiBpbnRlcmNlcHRvcnMpOlxuICAgICAqXG4gICAgICogICAqIGByZXF1ZXN0YDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBhIGh0dHAge0BsaW5rICRodHRwI3VzYWdlIGNvbmZpZ30gb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGBjb25maWdgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgY29uZmlnYFxuICAgICAqICAgICBvYmplY3QgZGlyZWN0bHksIG9yIGEgcHJvbWlzZSBjb250YWluaW5nIHRoZSBgY29uZmlnYCBvciBhIG5ldyBgY29uZmlnYCBvYmplY3QuXG4gICAgICogICAqIGByZXF1ZXN0RXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKiAgICogYHJlc3BvbnNlYDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBodHRwIGByZXNwb25zZWAgb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGByZXNwb25zZWAgb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGByZXNwb25zZWBcbiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhcyBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYHJlc3BvbnNlYCBvciBhIG5ldyBgcmVzcG9uc2VgIG9iamVjdC5cbiAgICAgKiAgICogYHJlc3BvbnNlRXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIC8vIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciBhcyBhIHNlcnZpY2VcbiAgICAgKiAgICRwcm92aWRlLmZhY3RvcnkoJ215SHR0cEludGVyY2VwdG9yJywgZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2Vzc1xuICAgICAqICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVxdWVzdEVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3JcbiAgICAgKiAgICAgICAgIGlmIChjYW5SZWNvdmVyKHJlamVjdGlvbikpIHtcbiAgICAgKiAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlT3JOZXdQcm9taXNlXG4gICAgICogICAgICAgICB9XG4gICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqXG4gICAgICpcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcbiAgICAgKiAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVzcG9uc2VFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxuICAgICAqICAgICAgICAgfVxuICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqXG4gICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdteUh0dHBJbnRlcmNlcHRvcicpO1xuICAgICAqXG4gICAgICpcbiAgICAgKiAgIC8vIGFsdGVybmF0aXZlbHksIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciB2aWEgYW4gYW5vbnltb3VzIGZhY3RvcnlcbiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgJ3JlcXVlc3QnOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlXG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnNcbiAgICAgKlxuICAgICAqIFdoZW4gZGVzaWduaW5nIHdlYiBhcHBsaWNhdGlvbnMsIGNvbnNpZGVyIHNlY3VyaXR5IHRocmVhdHMgZnJvbTpcbiAgICAgKlxuICAgICAqIC0gW0pTT04gdnVsbmVyYWJpbGl0eV0oaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4KVxuICAgICAqIC0gW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpXG4gICAgICpcbiAgICAgKiBCb3RoIHNlcnZlciBhbmQgdGhlIGNsaWVudCBtdXN0IGNvb3BlcmF0ZSBpbiBvcmRlciB0byBlbGltaW5hdGUgdGhlc2UgdGhyZWF0cy4gQW5ndWxhciBjb21lc1xuICAgICAqIHByZS1jb25maWd1cmVkIHdpdGggc3RyYXRlZ2llcyB0aGF0IGFkZHJlc3MgdGhlc2UgaXNzdWVzLCBidXQgZm9yIHRoaXMgdG8gd29yayBiYWNrZW5kIHNlcnZlclxuICAgICAqIGNvb3BlcmF0aW9uIGlzIHJlcXVpcmVkLlxuICAgICAqXG4gICAgICogIyMjIEpTT04gVnVsbmVyYWJpbGl0eSBQcm90ZWN0aW9uXG4gICAgICpcbiAgICAgKiBBIFtKU09OIHZ1bG5lcmFiaWxpdHldKGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweClcbiAgICAgKiBhbGxvd3MgdGhpcmQgcGFydHkgd2Vic2l0ZSB0byB0dXJuIHlvdXIgSlNPTiByZXNvdXJjZSBVUkwgaW50b1xuICAgICAqIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkgcmVxdWVzdCB1bmRlciBzb21lIGNvbmRpdGlvbnMuIFRvXG4gICAgICogY291bnRlciB0aGlzIHlvdXIgc2VydmVyIGNhbiBwcmVmaXggYWxsIEpTT04gcmVxdWVzdHMgd2l0aCBmb2xsb3dpbmcgc3RyaW5nIGBcIildfScsXFxuXCJgLlxuICAgICAqIEFuZ3VsYXIgd2lsbCBhdXRvbWF0aWNhbGx5IHN0cmlwIHRoZSBwcmVmaXggYmVmb3JlIHByb2Nlc3NpbmcgaXQgYXMgSlNPTi5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlIGlmIHlvdXIgc2VydmVyIG5lZWRzIHRvIHJldHVybjpcbiAgICAgKiBgYGBqc1xuICAgICAqIFsnb25lJywndHdvJ11cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIHdoaWNoIGlzIHZ1bG5lcmFibGUgdG8gYXR0YWNrLCB5b3VyIHNlcnZlciBjYW4gcmV0dXJuOlxuICAgICAqIGBgYGpzXG4gICAgICogKV19JyxcbiAgICAgKiBbJ29uZScsJ3R3byddXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBBbmd1bGFyIHdpbGwgc3RyaXAgdGhlIHByZWZpeCwgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIEpTT04uXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIyBDcm9zcyBTaXRlIFJlcXVlc3QgRm9yZ2VyeSAoWFNSRikgUHJvdGVjdGlvblxuICAgICAqXG4gICAgICogW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpIGlzIGFuIGF0dGFjayB0ZWNobmlxdWUgYnlcbiAgICAgKiB3aGljaCB0aGUgYXR0YWNrZXIgY2FuIHRyaWNrIGFuIGF1dGhlbnRpY2F0ZWQgdXNlciBpbnRvIHVua25vd2luZ2x5IGV4ZWN1dGluZyBhY3Rpb25zIG9uIHlvdXJcbiAgICAgKiB3ZWJzaXRlLiBBbmd1bGFyIHByb3ZpZGVzIGEgbWVjaGFuaXNtIHRvIGNvdW50ZXIgWFNSRi4gV2hlbiBwZXJmb3JtaW5nIFhIUiByZXF1ZXN0cywgdGhlXG4gICAgICogJGh0dHAgc2VydmljZSByZWFkcyBhIHRva2VuIGZyb20gYSBjb29raWUgKGJ5IGRlZmF1bHQsIGBYU1JGLVRPS0VOYCkgYW5kIHNldHMgaXQgYXMgYW4gSFRUUFxuICAgICAqIGhlYWRlciAoYFgtWFNSRi1UT0tFTmApLiBTaW5jZSBvbmx5IEphdmFTY3JpcHQgdGhhdCBydW5zIG9uIHlvdXIgZG9tYWluIGNvdWxkIHJlYWQgdGhlXG4gICAgICogY29va2llLCB5b3VyIHNlcnZlciBjYW4gYmUgYXNzdXJlZCB0aGF0IHRoZSBYSFIgY2FtZSBmcm9tIEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbi5cbiAgICAgKiBUaGUgaGVhZGVyIHdpbGwgbm90IGJlIHNldCBmb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLlxuICAgICAqXG4gICAgICogVG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhpcywgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gc2V0IGEgdG9rZW4gaW4gYSBKYXZhU2NyaXB0IHJlYWRhYmxlIHNlc3Npb25cbiAgICAgKiBjb29raWUgY2FsbGVkIGBYU1JGLVRPS0VOYCBvbiB0aGUgZmlyc3QgSFRUUCBHRVQgcmVxdWVzdC4gT24gc3Vic2VxdWVudCBYSFIgcmVxdWVzdHMgdGhlXG4gICAgICogc2VydmVyIGNhbiB2ZXJpZnkgdGhhdCB0aGUgY29va2llIG1hdGNoZXMgYFgtWFNSRi1UT0tFTmAgSFRUUCBoZWFkZXIsIGFuZCB0aGVyZWZvcmUgYmUgc3VyZVxuICAgICAqIHRoYXQgb25seSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4gY291bGQgaGF2ZSBzZW50IHRoZSByZXF1ZXN0LiBUaGUgdG9rZW4gbXVzdCBiZVxuICAgICAqIHVuaXF1ZSBmb3IgZWFjaCB1c2VyIGFuZCBtdXN0IGJlIHZlcmlmaWFibGUgYnkgdGhlIHNlcnZlciAodG8gcHJldmVudCB0aGUgSmF2YVNjcmlwdCBmcm9tXG4gICAgICogbWFraW5nIHVwIGl0cyBvd24gdG9rZW5zKS4gV2UgcmVjb21tZW5kIHRoYXQgdGhlIHRva2VuIGlzIGEgZGlnZXN0IG9mIHlvdXIgc2l0ZSdzXG4gICAgICogYXV0aGVudGljYXRpb24gY29va2llIHdpdGggYSBbc2FsdF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FsdF8oY3J5cHRvZ3JhcGh5JiM0MTspXG4gICAgICogZm9yIGFkZGVkIHNlY3VyaXR5LlxuICAgICAqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGhlYWRlcnMgY2FuIGJlIHNwZWNpZmllZCB1c2luZyB0aGUgeHNyZkhlYWRlck5hbWUgYW5kIHhzcmZDb29raWVOYW1lXG4gICAgICogcHJvcGVydGllcyBvZiBlaXRoZXIgJGh0dHBQcm92aWRlci5kZWZhdWx0cyBhdCBjb25maWctdGltZSwgJGh0dHAuZGVmYXVsdHMgYXQgcnVuLXRpbWUsXG4gICAgICogb3IgdGhlIHBlci1yZXF1ZXN0IGNvbmZpZyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJbiBvcmRlciB0byBwcmV2ZW50IGNvbGxpc2lvbnMgaW4gZW52aXJvbm1lbnRzIHdoZXJlIG11bHRpcGxlIEFuZ3VsYXIgYXBwcyBzaGFyZSB0aGVcbiAgICAgKiBzYW1lIGRvbWFpbiBvciBzdWJkb21haW4sIHdlIHJlY29tbWVuZCB0aGF0IGVhY2ggYXBwbGljYXRpb24gdXNlcyB1bmlxdWUgY29va2llIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIE9iamVjdCBkZXNjcmliaW5nIHRoZSByZXF1ZXN0IHRvIGJlIG1hZGUgYW5kIGhvdyBpdCBzaG91bGQgYmVcbiAgICAgKiAgICBwcm9jZXNzZWQuIFRoZSBvYmplY3QgaGFzIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAqXG4gICAgICogICAgLSAqKm1ldGhvZCoqIOKAkyBge3N0cmluZ31gIOKAkyBIVFRQIG1ldGhvZCAoZS5nLiAnR0VUJywgJ1BPU1QnLCBldGMpXG4gICAgICogICAgLSAqKnVybCoqIOKAkyBge3N0cmluZ3xUcnVzdGVkT2JqZWN0fWAg4oCTIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQ7XG4gICAgICogICAgICBvciBhbiBvYmplY3QgY3JlYXRlZCBieSBhIGNhbGwgdG8gYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHVybClgLlxuICAgICAqICAgIC0gKipwYXJhbXMqKiDigJMgYHtPYmplY3QuPHN0cmluZ3xPYmplY3Q+fWAg4oCTIE1hcCBvZiBzdHJpbmdzIG9yIG9iamVjdHMgd2hpY2ggd2lsbCBiZSBzZXJpYWxpemVkXG4gICAgICogICAgICB3aXRoIHRoZSBgcGFyYW1TZXJpYWxpemVyYCBhbmQgYXBwZW5kZWQgYXMgR0VUIHBhcmFtZXRlcnMuXG4gICAgICogICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIERhdGEgdG8gYmUgc2VudCBhcyB0aGUgcmVxdWVzdCBtZXNzYWdlIGRhdGEuXG4gICAgICogICAgLSAqKmhlYWRlcnMqKiDigJMgYHtPYmplY3R9YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3IgZnVuY3Rpb25zIHdoaWNoIHJldHVybiBzdHJpbmdzIHJlcHJlc2VudGluZ1xuICAgICAqICAgICAgSFRUUCBoZWFkZXJzIHRvIHNlbmQgdG8gdGhlIHNlcnZlci4gSWYgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIGlzIG51bGwsIHRoZVxuICAgICAqICAgICAgaGVhZGVyIHdpbGwgbm90IGJlIHNlbnQuIEZ1bmN0aW9ucyBhY2NlcHQgYSBjb25maWcgb2JqZWN0IGFzIGFuIGFyZ3VtZW50LlxuICAgICAqICAgIC0gKipldmVudEhhbmRsZXJzKiogLSBge09iamVjdH1gIC0gRXZlbnQgbGlzdGVuZXJzIHRvIGJlIGJvdW5kIHRvIHRoZSBYTUxIdHRwUmVxdWVzdCBvYmplY3QuXG4gICAgICogICAgICBUbyBiaW5kIGV2ZW50cyB0byB0aGUgWE1MSHR0cFJlcXVlc3QgdXBsb2FkIG9iamVjdCwgdXNlIGB1cGxvYWRFdmVudEhhbmRsZXJzYC5cbiAgICAgKiAgICAgIFRoZSBoYW5kbGVyIHdpbGwgYmUgY2FsbGVkIGluIHRoZSBjb250ZXh0IG9mIGEgYCRhcHBseWAgYmxvY2suXG4gICAgICogICAgLSAqKnVwbG9hZEV2ZW50SGFuZGxlcnMqKiAtIGB7T2JqZWN0fWAgLSBFdmVudCBsaXN0ZW5lcnMgdG8gYmUgYm91bmQgdG8gdGhlIFhNTEh0dHBSZXF1ZXN0IHVwbG9hZFxuICAgICAqICAgICAgb2JqZWN0LiBUbyBiaW5kIGV2ZW50cyB0byB0aGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0LCB1c2UgYGV2ZW50SGFuZGxlcnNgLlxuICAgICAqICAgICAgVGhlIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBgJGFwcGx5YCBibG9jay5cbiAgICAgKiAgICAtICoqeHNyZkhlYWRlck5hbWUqKiDigJMgYHtzdHJpbmd9YCDigJMgTmFtZSBvZiBIVFRQIGhlYWRlciB0byBwb3B1bGF0ZSB3aXRoIHRoZSBYU1JGIHRva2VuLlxuICAgICAqICAgIC0gKip4c3JmQ29va2llTmFtZSoqIOKAkyBge3N0cmluZ31gIOKAkyBOYW1lIG9mIGNvb2tpZSBjb250YWluaW5nIHRoZSBYU1JGIHRva2VuLlxuICAgICAqICAgIC0gKip0cmFuc2Zvcm1SZXF1ZXN0Kiog4oCTXG4gICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJNcbiAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICAgICAqICAgICAgcmVxdWVzdCBib2R5IGFuZCBoZWFkZXJzIGFuZCByZXR1cm5zIGl0cyB0cmFuc2Zvcm1lZCAodHlwaWNhbGx5IHNlcmlhbGl6ZWQpIHZlcnNpb24uXG4gICAgICogICAgICBTZWUge0BsaW5rIG5nLiRodHRwI292ZXJyaWRpbmctdGhlLWRlZmF1bHQtdHJhbnNmb3JtYXRpb25zLXBlci1yZXF1ZXN0XG4gICAgICogICAgICBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc31cbiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVzcG9uc2UqKiDigJNcbiAgICAgKiAgICAgIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKXxBcnJheS48ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKT59YCDigJNcbiAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICAgICAqICAgICAgcmVzcG9uc2UgYm9keSwgaGVhZGVycyBhbmQgc3RhdHVzIGFuZCByZXR1cm5zIGl0cyB0cmFuc2Zvcm1lZCAodHlwaWNhbGx5IGRlc2VyaWFsaXplZCkgdmVyc2lvbi5cbiAgICAgKiAgICAgIFNlZSB7QGxpbmsgbmcuJGh0dHAjb3ZlcnJpZGluZy10aGUtZGVmYXVsdC10cmFuc2Zvcm1hdGlvbnMtcGVyLXJlcXVlc3RcbiAgICAgKiAgICAgIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zfVxuICAgICAqICAgIC0gKipwYXJhbVNlcmlhbGl6ZXIqKiAtIGB7c3RyaW5nfGZ1bmN0aW9uKE9iamVjdDxzdHJpbmcsc3RyaW5nPik6c3RyaW5nfWAgLSBBIGZ1bmN0aW9uIHVzZWQgdG9cbiAgICAgKiAgICAgIHByZXBhcmUgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiByZXF1ZXN0IHBhcmFtZXRlcnMgKHNwZWNpZmllZCBhcyBhbiBvYmplY3QpLlxuICAgICAqICAgICAgSWYgc3BlY2lmaWVkIGFzIHN0cmluZywgaXQgaXMgaW50ZXJwcmV0ZWQgYXMgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZVxuICAgICAqICAgICAge0BsaW5rICRpbmplY3RvciAkaW5qZWN0b3J9LCB3aGljaCBtZWFucyB5b3UgY2FuIGNyZWF0ZSB5b3VyIG93biBzZXJpYWxpemVyXG4gICAgICogICAgICBieSByZWdpc3RlcmluZyBpdCBhcyBhIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZX0uXG4gICAgICogICAgICBUaGUgZGVmYXVsdCBzZXJpYWxpemVyIGlzIHRoZSB7QGxpbmsgJGh0dHBQYXJhbVNlcmlhbGl6ZXIgJGh0dHBQYXJhbVNlcmlhbGl6ZXJ9O1xuICAgICAqICAgICAgYWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIHtAbGluayAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZX1cbiAgICAgKiAgICAtICoqY2FjaGUqKiDigJMgYHtib29sZWFufE9iamVjdH1gIOKAkyBBIGJvb2xlYW4gdmFsdWUgb3Igb2JqZWN0IGNyZWF0ZWQgd2l0aFxuICAgICAqICAgICAge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgYCRjYWNoZUZhY3RvcnlgfSB0byBlbmFibGUgb3IgZGlzYWJsZSBjYWNoaW5nIG9mIHRoZSBIVFRQIHJlc3BvbnNlLlxuICAgICAqICAgICAgU2VlIHtAbGluayAkaHR0cCNjYWNoaW5nICRodHRwIENhY2hpbmd9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqICAgIC0gKip0aW1lb3V0Kiog4oCTIGB7bnVtYmVyfFByb21pc2V9YCDigJMgdGltZW91dCBpbiBtaWxsaXNlY29uZHMsIG9yIHtAbGluayBuZy4kcSBwcm9taXNlfVxuICAgICAqICAgICAgdGhhdCBzaG91bGQgYWJvcnQgdGhlIHJlcXVlc3Qgd2hlbiByZXNvbHZlZC5cbiAgICAgKiAgICAtICoqd2l0aENyZWRlbnRpYWxzKiogLSBge2Jvb2xlYW59YCAtIHdoZXRoZXIgdG8gc2V0IHRoZSBgd2l0aENyZWRlbnRpYWxzYCBmbGFnIG9uIHRoZVxuICAgICAqICAgICAgWEhSIG9iamVjdC4gU2VlIFtyZXF1ZXN0cyB3aXRoIGNyZWRlbnRpYWxzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVFRQL0FjY2Vzc19jb250cm9sX0NPUlMjUmVxdWVzdHNfd2l0aF9jcmVkZW50aWFscylcbiAgICAgKiAgICAgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqICAgIC0gKipyZXNwb25zZVR5cGUqKiAtIGB7c3RyaW5nfWAgLSBzZWVcbiAgICAgKiAgICAgIFtYTUxIdHRwUmVxdWVzdC5yZXNwb25zZVR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9YTUxIdHRwUmVxdWVzdCN4bWxodHRwcmVxdWVzdC1yZXNwb25zZXR5cGUpLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBSZXR1cm5zIGEge0BsaW5rIG5nLiRxIGBQcm9taXNlfWAgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHRvIGEgcmVzcG9uc2Ugb2JqZWN0XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSByZXF1ZXN0IHN1Y2NlZWRzIG9yIGZhaWxzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge0FycmF5LjxPYmplY3Q+fSBwZW5kaW5nUmVxdWVzdHMgQXJyYXkgb2YgY29uZmlnIG9iamVjdHMgZm9yIGN1cnJlbnRseSBwZW5kaW5nXG4gICAgICogICByZXF1ZXN0cy4gVGhpcyBpcyBwcmltYXJpbHkgbWVhbnQgdG8gYmUgdXNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuPGV4YW1wbGUgbW9kdWxlPVwiaHR0cEV4YW1wbGVcIiBuYW1lPVwiaHR0cC1zZXJ2aWNlXCI+XG48ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJGZXRjaENvbnRyb2xsZXJcIj5cbiAgICA8c2VsZWN0IG5nLW1vZGVsPVwibWV0aG9kXCIgYXJpYS1sYWJlbD1cIlJlcXVlc3QgbWV0aG9kXCI+XG4gICAgICA8b3B0aW9uPkdFVDwvb3B0aW9uPlxuICAgICAgPG9wdGlvbj5KU09OUDwvb3B0aW9uPlxuICAgIDwvc2VsZWN0PlxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXJsXCIgc2l6ZT1cIjgwXCIgYXJpYS1sYWJlbD1cIlVSTFwiIC8+XG4gICAgPGJ1dHRvbiBpZD1cImZldGNoYnRuXCIgbmctY2xpY2s9XCJmZXRjaCgpXCI+ZmV0Y2g8L2J1dHRvbj48YnI+XG4gICAgPGJ1dHRvbiBpZD1cInNhbXBsZWdldGJ0blwiIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0dFVCcsICdodHRwLWhlbGxvLmh0bWwnKVwiPlNhbXBsZSBHRVQ8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGlkPVwic2FtcGxlanNvbnBidG5cIlxuICAgICAgbmctY2xpY2s9XCJ1cGRhdGVNb2RlbCgnSlNPTlAnLFxuICAgICAgICAgICAgICAgICAgICAnaHR0cHM6Ly9hbmd1bGFyanMub3JnL2dyZWV0LnBocD9uYW1lPVN1cGVyJTIwSGVybycpXCI+XG4gICAgICBTYW1wbGUgSlNPTlBcbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGlkPVwiaW52YWxpZGpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJywgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9kb2VzbnRleGlzdCcpXCI+XG4gICAgICAgIEludmFsaWQgSlNPTlBcbiAgICAgIDwvYnV0dG9uPlxuICAgIDxwcmU+aHR0cCBzdGF0dXMgY29kZToge3tzdGF0dXN9fTwvcHJlPlxuICAgIDxwcmU+aHR0cCByZXNwb25zZSBkYXRhOiB7e2RhdGF9fTwvcHJlPlxuICA8L2Rpdj5cbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgYW5ndWxhci5tb2R1bGUoJ2h0dHBFeGFtcGxlJywgW10pXG4gICAgLmNvbmZpZyhbJyRzY2VEZWxlZ2F0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJHNjZURlbGVnYXRlUHJvdmlkZXIpIHtcbiAgICAgIC8vIFdlIG11c3Qgd2hpdGVsaXN0IHRoZSBKU09OUCBlbmRwb2ludCB0aGF0IHdlIGFyZSB1c2luZyB0byBzaG93IHRoYXQgd2UgdHJ1c3QgaXRcbiAgICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFtcbiAgICAgICAgJ3NlbGYnLFxuICAgICAgICAnaHR0cHM6Ly9hbmd1bGFyanMub3JnLyoqJ1xuICAgICAgXSk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0ZldGNoQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJyxcbiAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICR0ZW1wbGF0ZUNhY2hlKSB7XG4gICAgICAgICRzY29wZS5tZXRob2QgPSAnR0VUJztcbiAgICAgICAgJHNjb3BlLnVybCA9ICdodHRwLWhlbGxvLmh0bWwnO1xuXG4gICAgICAgICRzY29wZS5mZXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5jb2RlID0gbnVsbDtcbiAgICAgICAgICAkc2NvcGUucmVzcG9uc2UgPSBudWxsO1xuXG4gICAgICAgICAgJGh0dHAoe21ldGhvZDogJHNjb3BlLm1ldGhvZCwgdXJsOiAkc2NvcGUudXJsLCBjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS5cbiAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSByZXNwb25zZS5kYXRhIHx8ICdSZXF1ZXN0IGZhaWxlZCc7XG4gICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnVwZGF0ZU1vZGVsID0gZnVuY3Rpb24obWV0aG9kLCB1cmwpIHtcbiAgICAgICAgICAkc2NvcGUubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICAgICRzY29wZS51cmwgPSB1cmw7XG4gICAgICAgIH07XG4gICAgICB9XSk7XG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwiaHR0cC1oZWxsby5odG1sXCI+XG4gIEhlbGxvLCAkaHR0cCFcbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgdmFyIHN0YXR1cyA9IGVsZW1lbnQoYnkuYmluZGluZygnc3RhdHVzJykpO1xuICB2YXIgZGF0YSA9IGVsZW1lbnQoYnkuYmluZGluZygnZGF0YScpKTtcbiAgdmFyIGZldGNoQnRuID0gZWxlbWVudChieS5pZCgnZmV0Y2hidG4nKSk7XG4gIHZhciBzYW1wbGVHZXRCdG4gPSBlbGVtZW50KGJ5LmlkKCdzYW1wbGVnZXRidG4nKSk7XG4gIHZhciBpbnZhbGlkSnNvbnBCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbnZhbGlkanNvbnBidG4nKSk7XG5cbiAgaXQoJ3Nob3VsZCBtYWtlIGFuIHhociBHRVQgcmVxdWVzdCcsIGZ1bmN0aW9uKCkge1xuICAgIHNhbXBsZUdldEJ0bi5jbGljaygpO1xuICAgIGZldGNoQnRuLmNsaWNrKCk7XG4gICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpO1xuICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvSGVsbG8sIFxcJGh0dHAhLyk7XG4gIH0pO1xuXG4vLyBDb21tZW50ZWQgb3V0IGR1ZSB0byBmbGFrZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTg1XG4vLyBpdCgnc2hvdWxkIG1ha2UgYSBKU09OUCByZXF1ZXN0IHRvIGFuZ3VsYXJqcy5vcmcnLCBmdW5jdGlvbigpIHtcbi8vICAgdmFyIHNhbXBsZUpzb25wQnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlanNvbnBidG4nKSk7XG4vLyAgIHNhbXBsZUpzb25wQnRuLmNsaWNrKCk7XG4vLyAgIGZldGNoQnRuLmNsaWNrKCk7XG4vLyAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcyMDAnKTtcbi8vICAgZXhwZWN0KGRhdGEuZ2V0VGV4dCgpKS50b01hdGNoKC9TdXBlciBIZXJvIS8pO1xuLy8gfSk7XG5cbiAgaXQoJ3Nob3VsZCBtYWtlIEpTT05QIHJlcXVlc3QgdG8gaW52YWxpZCBVUkwgYW5kIGludm9rZSB0aGUgZXJyb3IgaGFuZGxlcicsXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICBpbnZhbGlkSnNvbnBCdG4uY2xpY2soKTtcbiAgICBmZXRjaEJ0bi5jbGljaygpO1xuICAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcwJyk7XG4gICAgZXhwZWN0KGRhdGEuZ2V0VGV4dCgpKS50b01hdGNoKCdSZXF1ZXN0IGZhaWxlZCcpO1xuICB9KTtcbjwvZmlsZT5cbjwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAkaHR0cChyZXF1ZXN0Q29uZmlnKSB7XG5cbiAgICAgIGlmICghaXNPYmplY3QocmVxdWVzdENvbmZpZykpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCckaHR0cCcpKCdiYWRyZXEnLCAnSHR0cCByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gbXVzdCBiZSBhbiBvYmplY3QuICBSZWNlaXZlZDogezB9JywgcmVxdWVzdENvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNTdHJpbmcoJHNjZS52YWx1ZU9mKHJlcXVlc3RDb25maWcudXJsKSkpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCckaHR0cCcpKCdiYWRyZXEnLCAnSHR0cCByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gdXJsIG11c3QgYmUgYSBzdHJpbmcgb3IgYSAkc2NlIHRydXN0ZWQgb2JqZWN0LiAgUmVjZWl2ZWQ6IHswfScsIHJlcXVlc3RDb25maWcudXJsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbmZpZyA9IGV4dGVuZCh7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3QsXG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgcGFyYW1TZXJpYWxpemVyOiBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXIsXG4gICAgICAgIGpzb25wQ2FsbGJhY2tQYXJhbTogZGVmYXVsdHMuanNvbnBDYWxsYmFja1BhcmFtXG4gICAgICB9LCByZXF1ZXN0Q29uZmlnKTtcblxuICAgICAgY29uZmlnLmhlYWRlcnMgPSBtZXJnZUhlYWRlcnMocmVxdWVzdENvbmZpZyk7XG4gICAgICBjb25maWcubWV0aG9kID0gdXBwZXJjYXNlKGNvbmZpZy5tZXRob2QpO1xuICAgICAgY29uZmlnLnBhcmFtU2VyaWFsaXplciA9IGlzU3RyaW5nKGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIpID9cbiAgICAgICAgICAkaW5qZWN0b3IuZ2V0KGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIpIDogY29uZmlnLnBhcmFtU2VyaWFsaXplcjtcblxuICAgICAgJGJyb3dzZXIuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCgpO1xuXG4gICAgICB2YXIgcmVxdWVzdEludGVyY2VwdG9ycyA9IFtdO1xuICAgICAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JzID0gW107XG4gICAgICB2YXIgcHJvbWlzZSA9ICRxLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgLy8gYXBwbHkgaW50ZXJjZXB0b3JzXG4gICAgICBmb3JFYWNoKHJldmVyc2VkSW50ZXJjZXB0b3JzLCBmdW5jdGlvbihpbnRlcmNlcHRvcikge1xuICAgICAgICBpZiAoaW50ZXJjZXB0b3IucmVxdWVzdCB8fCBpbnRlcmNlcHRvci5yZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICByZXF1ZXN0SW50ZXJjZXB0b3JzLnVuc2hpZnQoaW50ZXJjZXB0b3IucmVxdWVzdCwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJjZXB0b3IucmVzcG9uc2UgfHwgaW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvcikge1xuICAgICAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JzLnB1c2goaW50ZXJjZXB0b3IucmVzcG9uc2UsIGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcHJvbWlzZSA9IGNoYWluSW50ZXJjZXB0b3JzKHByb21pc2UsIHJlcXVlc3RJbnRlcmNlcHRvcnMpO1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihzZXJ2ZXJSZXF1ZXN0KTtcbiAgICAgIHByb21pc2UgPSBjaGFpbkludGVyY2VwdG9ycyhwcm9taXNlLCByZXNwb25zZUludGVyY2VwdG9ycyk7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS5maW5hbGx5KGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG5cblxuICAgICAgZnVuY3Rpb24gY2hhaW5JbnRlcmNlcHRvcnMocHJvbWlzZSwgaW50ZXJjZXB0b3JzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGludGVyY2VwdG9ycy5sZW5ndGg7IGkgPCBpaTspIHtcbiAgICAgICAgICB2YXIgdGhlbkZuID0gaW50ZXJjZXB0b3JzW2krK107XG4gICAgICAgICAgdmFyIHJlamVjdEZuID0gaW50ZXJjZXB0b3JzW2krK107XG5cbiAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHRoZW5GbiwgcmVqZWN0Rm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaW50ZXJjZXB0b3JzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KCkge1xuICAgICAgICAkYnJvd3Nlci4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBleGVjdXRlSGVhZGVyRm5zKGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICB2YXIgaGVhZGVyQ29udGVudCwgcHJvY2Vzc2VkSGVhZGVycyA9IHt9O1xuXG4gICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24oaGVhZGVyRm4sIGhlYWRlcikge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhlYWRlckZuKSkge1xuICAgICAgICAgICAgaGVhZGVyQ29udGVudCA9IGhlYWRlckZuKGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoaGVhZGVyQ29udGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckZuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NlZEhlYWRlcnM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1lcmdlSGVhZGVycyhjb25maWcpIHtcbiAgICAgICAgdmFyIGRlZkhlYWRlcnMgPSBkZWZhdWx0cy5oZWFkZXJzLFxuICAgICAgICAgICAgcmVxSGVhZGVycyA9IGV4dGVuZCh7fSwgY29uZmlnLmhlYWRlcnMpLFxuICAgICAgICAgICAgZGVmSGVhZGVyTmFtZSwgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSwgcmVxSGVhZGVyTmFtZTtcblxuICAgICAgICBkZWZIZWFkZXJzID0gZXh0ZW5kKHt9LCBkZWZIZWFkZXJzLmNvbW1vbiwgZGVmSGVhZGVyc1tsb3dlcmNhc2UoY29uZmlnLm1ldGhvZCldKTtcblxuICAgICAgICAvLyB1c2luZyBmb3ItaW4gaW5zdGVhZCBvZiBmb3JFYWNoIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGl0ZXJhdGlvbiBhZnRlciBoZWFkZXIgaGFzIGJlZW4gZm91bmRcbiAgICAgICAgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb246XG4gICAgICAgIGZvciAoZGVmSGVhZGVyTmFtZSBpbiBkZWZIZWFkZXJzKSB7XG4gICAgICAgICAgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSA9IGxvd2VyY2FzZShkZWZIZWFkZXJOYW1lKTtcblxuICAgICAgICAgIGZvciAocmVxSGVhZGVyTmFtZSBpbiByZXFIZWFkZXJzKSB7XG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlKHJlcUhlYWRlck5hbWUpID09PSBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIGRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlcUhlYWRlcnNbZGVmSGVhZGVyTmFtZV0gPSBkZWZIZWFkZXJzW2RlZkhlYWRlck5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXhlY3V0ZSBpZiBoZWFkZXIgdmFsdWUgaXMgYSBmdW5jdGlvbiBmb3IgbWVyZ2VkIGhlYWRlcnNcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVIZWFkZXJGbnMocmVxSGVhZGVycywgc2hhbGxvd0NvcHkoY29uZmlnKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNlcnZlclJlcXVlc3QoY29uZmlnKSB7XG4gICAgICAgIHZhciBoZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgICAgIHZhciByZXFEYXRhID0gdHJhbnNmb3JtRGF0YShjb25maWcuZGF0YSwgaGVhZGVyc0dldHRlcihoZWFkZXJzKSwgdW5kZWZpbmVkLCBjb25maWcudHJhbnNmb3JtUmVxdWVzdCk7XG5cbiAgICAgICAgLy8gc3RyaXAgY29udGVudC10eXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChyZXFEYXRhKSkge1xuICAgICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGhlYWRlcikge1xuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZShoZWFkZXIpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1toZWFkZXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpICYmICFpc1VuZGVmaW5lZChkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscyA9IGRlZmF1bHRzLndpdGhDcmVkZW50aWFscztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNlbmQgcmVxdWVzdFxuICAgICAgICByZXR1cm4gc2VuZFJlcShjb25maWcsIHJlcURhdGEpLnRoZW4odHJhbnNmb3JtUmVzcG9uc2UsIHRyYW5zZm9ybVJlc3BvbnNlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgLy8gbWFrZSBhIGNvcHkgc2luY2UgdGhlIHJlc3BvbnNlIG11c3QgYmUgY2FjaGVhYmxlXG4gICAgICAgIHZhciByZXNwID0gZXh0ZW5kKHt9LCByZXNwb25zZSk7XG4gICAgICAgIHJlc3AuZGF0YSA9IHRyYW5zZm9ybURhdGEocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuaGVhZGVycywgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSk7XG4gICAgICAgIHJldHVybiAoaXNTdWNjZXNzKHJlc3BvbnNlLnN0YXR1cykpXG4gICAgICAgICAgPyByZXNwXG4gICAgICAgICAgOiAkcS5yZWplY3QocmVzcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjZ2V0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgR0VUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8VHJ1c3RlZE9iamVjdH0gdXJsIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQ7XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2FsbCB0byBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWAuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNkZWxldGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBERUxFVEVgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xUcnVzdGVkT2JqZWN0fSB1cmwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZDtcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgYSBjYWxsIHRvIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2hlYWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBIRUFEYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8VHJ1c3RlZE9iamVjdH0gdXJsIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQ7XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2FsbCB0byBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWAuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNqc29ucFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEpTT05QYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0LCBzaW5jZSBKU09OUCByZXF1ZXN0cyBhcmUgc2Vuc2l0aXZlIGJlY2F1c2UgdGhlIHJlc3BvbnNlIGlzIGdpdmVuIGZ1bGwgYWNjZXNzIHRvIHRoZSBicm93c2VyLFxuICAgICAqIHRoZSB1cmwgbXVzdCBiZSBkZWNsYXJlZCwgdmlhIHtAbGluayAkc2NlfSBhcyBhIHRydXN0ZWQgcmVzb3VyY2UgVVJMLlxuICAgICAqIFlvdSBjYW4gdHJ1c3QgYSBVUkwgYnkgYWRkaW5nIGl0IHRvIHRoZSB3aGl0ZWxpc3QgdmlhXG4gICAgICoge0BsaW5rICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0ICBgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3RgfSBvclxuICAgICAqIGJ5IGV4cGxpY2l0bHkgdHJ1c3RpbmcgdGhlIFVSTCB2aWEge0BsaW5rICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYH0uXG4gICAgICpcbiAgICAgKiBKU09OUCByZXF1ZXN0cyBtdXN0IHNwZWNpZnkgYSBjYWxsYmFjayB0byBiZSB1c2VkIGluIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuIFRoaXMgY2FsbGJhY2tcbiAgICAgKiBpcyBwYXNzZWQgYXMgYSBxdWVyeSBwYXJhbWV0ZXIgaW4gdGhlIHJlcXVlc3QuIFlvdSBtdXN0IHNwZWNpZnkgdGhlIG5hbWUgb2YgdGhpcyBwYXJhbWV0ZXIgYnlcbiAgICAgKiBzZXR0aW5nIHRoZSBganNvbnBDYWxsYmFja1BhcmFtYCBwcm9wZXJ0eSBvbiB0aGUgcmVxdWVzdCBjb25maWcgb2JqZWN0LlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogJGh0dHAuanNvbnAoJ3NvbWUvdHJ1c3RlZC91cmwnLCB7anNvbnBDYWxsYmFja1BhcmFtOiAnY2FsbGJhY2snfSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFlvdSBjYW4gYWxzbyBzcGVjaWZ5IGEgZGVmYXVsdCBjYWxsYmFjayBwYXJhbWV0ZXIgbmFtZSBpbiBgJGh0dHAuZGVmYXVsdHMuanNvbnBDYWxsYmFja1BhcmFtYC5cbiAgICAgKiBJbml0aWFsbHkgdGhpcyBpcyBzZXQgdG8gYCdjYWxsYmFjaydgLlxuICAgICAqXG4gICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICAgICAqIFlvdSBjYW4gbm8gbG9uZ2VyIHVzZSB0aGUgYEpTT05fQ0FMTEJBQ0tgIHN0cmluZyBhcyBhIHBsYWNlaG9sZGVyIGZvciBzcGVjaWZ5aW5nIHdoZXJlIHRoZSBjYWxsYmFja1xuICAgICAqIHBhcmFtZXRlciB2YWx1ZSBzaG91bGQgZ28uXG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd291bGQgbGlrZSB0byBjdXN0b21pc2Ugd2hlcmUgYW5kIGhvdyB0aGUgY2FsbGJhY2tzIGFyZSBzdG9yZWQgdGhlbiB0cnkgb3ZlcnJpZGluZ1xuICAgICAqIG9yIGRlY29yYXRpbmcgdGhlIHtAbGluayAkanNvbnBDYWxsYmFja3N9IHNlcnZpY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xUcnVzdGVkT2JqZWN0fSB1cmwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZDtcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgYSBjYWxsIHRvIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuICAgIGNyZWF0ZVNob3J0TWV0aG9kcygnZ2V0JywgJ2RlbGV0ZScsICdoZWFkJywgJ2pzb25wJyk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjcG9zdFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBPU1RgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI3B1dFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBVVGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICogQG5hbWUgJGh0dHAjcGF0Y2hcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQQVRDSGAgcmVxdWVzdC5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxuICAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgICovXG4gICAgY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEoJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgKiBAbmFtZSAkaHR0cCNkZWZhdWx0c1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUnVudGltZSBlcXVpdmFsZW50IG9mIHRoZSBgJGh0dHBQcm92aWRlci5kZWZhdWx0c2AgcHJvcGVydHkuIEFsbG93cyBjb25maWd1cmF0aW9uIG9mXG4gICAgICAgICAqIGRlZmF1bHQgaGVhZGVycywgd2l0aENyZWRlbnRpYWxzIGFzIHdlbGwgYXMgcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgXCJTZXR0aW5nIEhUVFAgSGVhZGVyc1wiIGFuZCBcIlRyYW5zZm9ybWluZyBSZXF1ZXN0cyBhbmQgUmVzcG9uc2VzXCIgc2VjdGlvbnMgYWJvdmUuXG4gICAgICAgICAqL1xuICAgICRodHRwLmRlZmF1bHRzID0gZGVmYXVsdHM7XG5cblxuICAgIHJldHVybiAkaHR0cDtcblxuXG4gICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzKG5hbWVzKSB7XG4gICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuICRodHRwKGV4dGVuZCh7fSwgY29uZmlnIHx8IHt9LCB7XG4gICAgICAgICAgICBtZXRob2Q6IG5hbWUsXG4gICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEobmFtZSkge1xuICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgJGh0dHBbbmFtZV0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoe30sIGNvbmZpZyB8fCB7fSwge1xuICAgICAgICAgICAgbWV0aG9kOiBuYW1lLFxuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyB0aGUgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqICEhISBBQ0NFU1NFUyBDTE9TVVJFIFZBUlM6XG4gICAgICogJGh0dHBCYWNrZW5kLCBkZWZhdWx0cywgJGxvZywgJHJvb3RTY29wZSwgZGVmYXVsdENhY2hlLCAkaHR0cC5wZW5kaW5nUmVxdWVzdHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZW5kUmVxKGNvbmZpZywgcmVxRGF0YSkge1xuICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKSxcbiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICBjYWNoZSxcbiAgICAgICAgICBjYWNoZWRSZXNwLFxuICAgICAgICAgIHJlcUhlYWRlcnMgPSBjb25maWcuaGVhZGVycyxcbiAgICAgICAgICBpc0pzb25wID0gbG93ZXJjYXNlKGNvbmZpZy5tZXRob2QpID09PSAnanNvbnAnLFxuICAgICAgICAgIHVybCA9IGNvbmZpZy51cmw7XG5cbiAgICAgIGlmIChpc0pzb25wKSB7XG4gICAgICAgIC8vIEpTT05QIGlzIGEgcHJldHR5IHNlbnNpdGl2ZSBvcGVyYXRpb24gd2hlcmUgd2UncmUgYWxsb3dpbmcgYSBzY3JpcHQgdG8gaGF2ZSBmdWxsIGFjY2VzcyB0b1xuICAgICAgICAvLyBvdXIgRE9NIGFuZCBKUyBzcGFjZS4gIFNvIHdlIHJlcXVpcmUgdGhhdCB0aGUgVVJMIHNhdGlzZmllcyBTQ0UuUkVTT1VSQ0VfVVJMLlxuICAgICAgICB1cmwgPSAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh1cmwpO1xuICAgICAgfSBlbHNlIGlmICghaXNTdHJpbmcodXJsKSkge1xuICAgICAgICAvLyBJZiBpdCBpcyBub3QgYSBzdHJpbmcgdGhlbiB0aGUgVVJMIG11c3QgYmUgYSAkc2NlIHRydXN0ZWQgb2JqZWN0XG4gICAgICAgIHVybCA9ICRzY2UudmFsdWVPZih1cmwpO1xuICAgICAgfVxuXG4gICAgICB1cmwgPSBidWlsZFVybCh1cmwsIGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIoY29uZmlnLnBhcmFtcykpO1xuXG4gICAgICBpZiAoaXNKc29ucCkge1xuICAgICAgICAvLyBDaGVjayB0aGUgdXJsIGFuZCBhZGQgdGhlIEpTT05QIGNhbGxiYWNrIHBsYWNlaG9sZGVyXG4gICAgICAgIHVybCA9IHNhbml0aXplSnNvbnBDYWxsYmFja1BhcmFtKHVybCwgY29uZmlnLmpzb25wQ2FsbGJhY2tQYXJhbSk7XG4gICAgICB9XG5cbiAgICAgICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5wdXNoKGNvbmZpZyk7XG4gICAgICBwcm9taXNlLnRoZW4ocmVtb3ZlUGVuZGluZ1JlcSwgcmVtb3ZlUGVuZGluZ1JlcSk7XG5cbiAgICAgIGlmICgoY29uZmlnLmNhY2hlIHx8IGRlZmF1bHRzLmNhY2hlKSAmJiBjb25maWcuY2FjaGUgIT09IGZhbHNlICYmXG4gICAgICAgICAgKGNvbmZpZy5tZXRob2QgPT09ICdHRVQnIHx8IGNvbmZpZy5tZXRob2QgPT09ICdKU09OUCcpKSB7XG4gICAgICAgIGNhY2hlID0gaXNPYmplY3QoY29uZmlnLmNhY2hlKSA/IGNvbmZpZy5jYWNoZVxuICAgICAgICAgICAgOiBpc09iamVjdCgvKiogQHR5cGUgez99ICovIChkZWZhdWx0cykuY2FjaGUpXG4gICAgICAgICAgICAgID8gLyoqIEB0eXBlIHs/fSAqLyAoZGVmYXVsdHMpLmNhY2hlXG4gICAgICAgICAgICAgIDogZGVmYXVsdENhY2hlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGVkUmVzcCA9IGNhY2hlLmdldCh1cmwpO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgaWYgKGlzUHJvbWlzZUxpa2UoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgICAgIC8vIGNhY2hlZCByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCwgYnV0IHRoZXJlIGlzIG5vIHJlc3BvbnNlIHlldFxuICAgICAgICAgICAgY2FjaGVkUmVzcC50aGVuKHJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCwgcmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2VydmluZyBmcm9tIGNhY2hlXG4gICAgICAgICAgICBpZiAoaXNBcnJheShjYWNoZWRSZXNwKSkge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwWzFdLCBjYWNoZWRSZXNwWzBdLCBzaGFsbG93Q29weShjYWNoZWRSZXNwWzJdKSwgY2FjaGVkUmVzcFszXSwgY2FjaGVkUmVzcFs0XSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwLCAyMDAsIHt9LCAnT0snLCAnY29tcGxldGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHV0IHRoZSBwcm9taXNlIGZvciB0aGUgbm9uLXRyYW5zZm9ybWVkIHJlc3BvbnNlIGludG8gY2FjaGUgYXMgYSBwbGFjZWhvbGRlclxuICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLy8gaWYgd2Ugd29uJ3QgaGF2ZSB0aGUgcmVzcG9uc2UgaW4gY2FjaGUsIHNldCB0aGUgeHNyZiBoZWFkZXJzIGFuZFxuICAgICAgLy8gc2VuZCB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZFxuICAgICAgaWYgKGlzVW5kZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgIHZhciB4c3JmVmFsdWUgPSB1cmxJc1NhbWVPcmlnaW4oY29uZmlnLnVybClcbiAgICAgICAgICAgID8gJCRjb29raWVSZWFkZXIoKVtjb25maWcueHNyZkNvb2tpZU5hbWUgfHwgZGVmYXVsdHMueHNyZkNvb2tpZU5hbWVdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICAgIHJlcUhlYWRlcnNbKGNvbmZpZy54c3JmSGVhZGVyTmFtZSB8fCBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZSldID0geHNyZlZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgJGh0dHBCYWNrZW5kKGNvbmZpZy5tZXRob2QsIHVybCwgcmVxRGF0YSwgZG9uZSwgcmVxSGVhZGVycywgY29uZmlnLnRpbWVvdXQsXG4gICAgICAgICAgICBjb25maWcud2l0aENyZWRlbnRpYWxzLCBjb25maWcucmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgY3JlYXRlQXBwbHlIYW5kbGVycyhjb25maWcuZXZlbnRIYW5kbGVycyksXG4gICAgICAgICAgICBjcmVhdGVBcHBseUhhbmRsZXJzKGNvbmZpZy51cGxvYWRFdmVudEhhbmRsZXJzKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgICBmdW5jdGlvbiBjcmVhdGVBcHBseUhhbmRsZXJzKGV2ZW50SGFuZGxlcnMpIHtcbiAgICAgICAgaWYgKGV2ZW50SGFuZGxlcnMpIHtcbiAgICAgICAgICB2YXIgYXBwbHlIYW5kbGVycyA9IHt9O1xuICAgICAgICAgIGZvckVhY2goZXZlbnRIYW5kbGVycywgZnVuY3Rpb24oZXZlbnRIYW5kbGVyLCBrZXkpIHtcbiAgICAgICAgICAgIGFwcGx5SGFuZGxlcnNba2V5XSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgIGlmICh1c2VBcHBseUFzeW5jKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHlBc3luYyhjYWxsRXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgICBjYWxsRXZlbnRIYW5kbGVyKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoY2FsbEV2ZW50SGFuZGxlcik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsRXZlbnRIYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlcihldmVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGFwcGx5SGFuZGxlcnM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGxiYWNrIHJlZ2lzdGVyZWQgdG8gJGh0dHBCYWNrZW5kKCk6XG4gICAgICAgKiAgLSBjYWNoZXMgdGhlIHJlc3BvbnNlIGlmIGRlc2lyZWRcbiAgICAgICAqICAtIHJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZVxuICAgICAgICogIC0gY2FsbHMgJGFwcGx5XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGRvbmUoc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCwgeGhyU3RhdHVzKSB7XG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgIGlmIChpc1N1Y2Nlc3Moc3RhdHVzKSkge1xuICAgICAgICAgICAgY2FjaGUucHV0KHVybCwgW3N0YXR1cywgcmVzcG9uc2UsIHBhcnNlSGVhZGVycyhoZWFkZXJzU3RyaW5nKSwgc3RhdHVzVGV4dCwgeGhyU3RhdHVzXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBwcm9taXNlIGZyb20gdGhlIGNhY2hlXG4gICAgICAgICAgICBjYWNoZS5yZW1vdmUodXJsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlSHR0cFByb21pc2UoKSB7XG4gICAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCwgeGhyU3RhdHVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VBcHBseUFzeW5jKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHlBc3luYyhyZXNvbHZlSHR0cFByb21pc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmVIdHRwUHJvbWlzZSgpO1xuICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2UuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIHN0YXR1c1RleHQsIHhoclN0YXR1cykge1xuICAgICAgICAvL3N0YXR1czogSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZSwgMCwgLTEgKGFib3J0ZWQgYnkgdGltZW91dCAvIHByb21pc2UpXG4gICAgICAgIHN0YXR1cyA9IHN0YXR1cyA+PSAtMSA/IHN0YXR1cyA6IDA7XG5cbiAgICAgICAgKGlzU3VjY2VzcyhzdGF0dXMpID8gZGVmZXJyZWQucmVzb2x2ZSA6IGRlZmVycmVkLnJlamVjdCkoe1xuICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLFxuICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNHZXR0ZXIoaGVhZGVycyksXG4gICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgc3RhdHVzVGV4dDogc3RhdHVzVGV4dCxcbiAgICAgICAgICB4aHJTdGF0dXM6IHhoclN0YXR1c1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0KHJlc3VsdCkge1xuICAgICAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQuZGF0YSwgcmVzdWx0LnN0YXR1cywgc2hhbGxvd0NvcHkocmVzdWx0LmhlYWRlcnMoKSksIHJlc3VsdC5zdGF0dXNUZXh0LCByZXN1bHQueGhyU3RhdHVzKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlUGVuZGluZ1JlcSgpIHtcbiAgICAgICAgdmFyIGlkeCA9ICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5pbmRleE9mKGNvbmZpZyk7XG4gICAgICAgIGlmIChpZHggIT09IC0xKSAkaHR0cC5wZW5kaW5nUmVxdWVzdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBidWlsZFVybCh1cmwsIHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICAgIGlmIChzZXJpYWxpemVkUGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXJsICs9ICgodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEpID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNhbml0aXplSnNvbnBDYWxsYmFja1BhcmFtKHVybCwga2V5KSB7XG4gICAgICBpZiAoL1smP11bXj1dKz1KU09OX0NBTExCQUNLLy50ZXN0KHVybCkpIHtcbiAgICAgICAgLy8gVGhyb3cgaWYgdGhlIHVybCBhbHJlYWR5IGNvbnRhaW5zIGEgcmVmZXJlbmNlIHRvIEpTT05fQ0FMTEJBQ0tcbiAgICAgICAgdGhyb3cgJGh0dHBNaW5FcnIoJ2JhZGpzb25wJywgJ0lsbGVnYWwgdXNlIG9mIEpTT05fQ0FMTEJBQ0sgaW4gdXJsLCBcInswfVwiJywgdXJsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGxiYWNrUGFyYW1SZWdleCA9IG5ldyBSZWdFeHAoJ1smP10nICsga2V5ICsgJz0nKTtcbiAgICAgIGlmIChjYWxsYmFja1BhcmFtUmVnZXgudGVzdCh1cmwpKSB7XG4gICAgICAgIC8vIFRocm93IGlmIHRoZSBjYWxsYmFjayBwYXJhbSB3YXMgYWxyZWFkeSBwcm92aWRlZFxuICAgICAgICB0aHJvdyAkaHR0cE1pbkVycignYmFkanNvbnAnLCAnSWxsZWdhbCB1c2Ugb2YgY2FsbGJhY2sgcGFyYW0sIFwiezB9XCIsIGluIHVybCwgXCJ7MX1cIicsIGtleSwgdXJsKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIGluIHRoZSBKU09OX0NBTExCQUNLIGNhbGxiYWNrIHBhcmFtIHZhbHVlXG4gICAgICB1cmwgKz0gKCh1cmwuaW5kZXhPZignPycpID09PSAtMSkgPyAnPycgOiAnJicpICsga2V5ICsgJz1KU09OX0NBTExCQUNLJztcblxuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkeGhyRmFjdG9yeVxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZhY3RvcnkgZnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0cy5cbiAqXG4gKiBSZXBsYWNlIG9yIGRlY29yYXRlIHRoaXMgc2VydmljZSB0byBjcmVhdGUgeW91ciBvd24gY3VzdG9tIFhNTEh0dHBSZXF1ZXN0IG9iamVjdHMuXG4gKlxuICogYGBgXG4gKiBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSlcbiAqIC5mYWN0b3J5KCckeGhyRmFjdG9yeScsIGZ1bmN0aW9uKCkge1xuICogICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlWGhyKG1ldGhvZCwgdXJsKSB7XG4gKiAgICAgcmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3Qoe21velN5c3RlbTogdHJ1ZX0pO1xuICogICB9O1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIEhUVFAgbWV0aG9kIG9mIHRoZSByZXF1ZXN0IChHRVQsIFBPU1QsIFBVVCwgLi4pXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCBvZiB0aGUgcmVxdWVzdC5cbiAqL1xuZnVuY3Rpb24gJHhockZhY3RvcnlQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVhocigpIHtcbiAgICAgIHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGh0dHBCYWNrZW5kXG4gKiBAcmVxdWlyZXMgJGpzb25wQ2FsbGJhY2tzXG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKiBAcmVxdWlyZXMgJHhockZhY3RvcnlcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVFRQIGJhY2tlbmQgdXNlZCBieSB0aGUge0BsaW5rIG5nLiRodHRwIHNlcnZpY2V9IHRoYXQgZGVsZWdhdGVzIHRvXG4gKiBYTUxIdHRwUmVxdWVzdCBvYmplY3Qgb3IgSlNPTlAgYW5kIGRlYWxzIHdpdGggYnJvd3NlciBpbmNvbXBhdGliaWxpdGllcy5cbiAqXG4gKiBZb3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gdXNlIHRoaXMgc2VydmljZSBkaXJlY3RseSwgaW5zdGVhZCB1c2UgdGhlIGhpZ2hlci1sZXZlbCBhYnN0cmFjdGlvbnM6XG4gKiB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IG9yIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZSAkcmVzb3VyY2V9LlxuICpcbiAqIER1cmluZyB0ZXN0aW5nIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgc3dhcHBlZCB3aXRoIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kIG1vY2tcbiAqICRodHRwQmFja2VuZH0gd2hpY2ggY2FuIGJlIHRyYWluZWQgd2l0aCByZXNwb25zZXMuXG4gKi9cbmZ1bmN0aW9uICRIdHRwQmFja2VuZFByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRicm93c2VyJywgJyRqc29ucENhbGxiYWNrcycsICckZG9jdW1lbnQnLCAnJHhockZhY3RvcnknLCBmdW5jdGlvbigkYnJvd3NlciwgJGpzb25wQ2FsbGJhY2tzLCAkZG9jdW1lbnQsICR4aHJGYWN0b3J5KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCAkeGhyRmFjdG9yeSwgJGJyb3dzZXIuZGVmZXIsICRqc29ucENhbGxiYWNrcywgJGRvY3VtZW50WzBdKTtcbiAgfV07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCBjcmVhdGVYaHIsICRicm93c2VyRGVmZXIsIGNhbGxiYWNrcywgcmF3RG9jdW1lbnQpIHtcbiAgLy8gVE9ETyh2b2p0YSk6IGZpeCB0aGUgc2lnbmF0dXJlXG4gIHJldHVybiBmdW5jdGlvbihtZXRob2QsIHVybCwgcG9zdCwgY2FsbGJhY2ssIGhlYWRlcnMsIHRpbWVvdXQsIHdpdGhDcmVkZW50aWFscywgcmVzcG9uc2VUeXBlLCBldmVudEhhbmRsZXJzLCB1cGxvYWRFdmVudEhhbmRsZXJzKSB7XG4gICAgdXJsID0gdXJsIHx8ICRicm93c2VyLnVybCgpO1xuXG4gICAgaWYgKGxvd2VyY2FzZShtZXRob2QpID09PSAnanNvbnAnKSB7XG4gICAgICB2YXIgY2FsbGJhY2tQYXRoID0gY2FsbGJhY2tzLmNyZWF0ZUNhbGxiYWNrKHVybCk7XG4gICAgICB2YXIganNvbnBEb25lID0ganNvbnBSZXEodXJsLCBjYWxsYmFja1BhdGgsIGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuICAgICAgICAvLyBqc29ucFJlcSBvbmx5IGV2ZXIgc2V0cyBzdGF0dXMgdG8gMjAwIChPSyksIDQwNCAoRVJST1IpIG9yIC0xIChXQUlUSU5HKVxuICAgICAgICB2YXIgcmVzcG9uc2UgPSAoc3RhdHVzID09PSAyMDApICYmIGNhbGxiYWNrcy5nZXRSZXNwb25zZShjYWxsYmFja1BhdGgpO1xuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsICcnLCB0ZXh0LCAnY29tcGxldGUnKTtcbiAgICAgICAgY2FsbGJhY2tzLnJlbW92ZUNhbGxiYWNrKGNhbGxiYWNrUGF0aCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgeGhyID0gY3JlYXRlWGhyKG1ldGhvZCwgdXJsKTtcblxuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiByZXF1ZXN0TG9hZGVkKCkge1xuICAgICAgICB2YXIgc3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0IHx8ICcnO1xuXG4gICAgICAgIC8vIHJlc3BvbnNlVGV4dCBpcyB0aGUgb2xkLXNjaG9vbCB3YXkgb2YgcmV0cmlldmluZyByZXNwb25zZSAoc3VwcG9ydGVkIGJ5IElFOSlcbiAgICAgICAgLy8gcmVzcG9uc2UvcmVzcG9uc2VUeXBlIHByb3BlcnRpZXMgd2VyZSBpbnRyb2R1Y2VkIGluIFhIUiBMZXZlbDIgc3BlYyAoc3VwcG9ydGVkIGJ5IElFMTApXG4gICAgICAgIHZhciByZXNwb25zZSA9ICgncmVzcG9uc2UnIGluIHhocikgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0O1xuXG4gICAgICAgIC8vIG5vcm1hbGl6ZSBJRTkgYnVnIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwKVxuICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXM7XG5cbiAgICAgICAgLy8gZml4IHN0YXR1cyBjb2RlIHdoZW4gaXQgaXMgMCAoMCBzdGF0dXMgaXMgdW5kb2N1bWVudGVkKS5cbiAgICAgICAgLy8gT2NjdXJzIHdoZW4gYWNjZXNzaW5nIGZpbGUgcmVzb3VyY2VzIG9yIG9uIEFuZHJvaWQgNC4xIHN0b2NrIGJyb3dzZXJcbiAgICAgICAgLy8gd2hpbGUgcmV0cmlldmluZyBmaWxlcyBmcm9tIGFwcGxpY2F0aW9uIGNhY2hlLlxuICAgICAgICBpZiAoc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgc3RhdHVzID0gcmVzcG9uc2UgPyAyMDAgOiB1cmxSZXNvbHZlKHVybCkucHJvdG9jb2wgPT09ICdmaWxlJyA/IDQwNCA6IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSxcbiAgICAgICAgICAgIHN0YXR1c1RleHQsXG4gICAgICAgICAgICAnY29tcGxldGUnKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZXF1ZXN0RXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGlzIGFsd2F5cyBlbXB0eVxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWVycm9yLXN0ZXBzIGFuZCBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1uZXR3b3JrLWVycm9yXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTEsIG51bGwsIG51bGwsICcnLCAnZXJyb3InKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZXF1ZXN0QWJvcnRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIC0xLCBudWxsLCBudWxsLCAnJywgJ2Fib3J0Jyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGlzIGFsd2F5cyBlbXB0eVxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWVycm9yLXN0ZXBzIGFuZCBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1uZXR3b3JrLWVycm9yXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTEsIG51bGwsIG51bGwsICcnLCAndGltZW91dCcpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9uZXJyb3IgPSByZXF1ZXN0RXJyb3I7XG4gICAgICB4aHIub25hYm9ydCA9IHJlcXVlc3RBYm9ydGVkO1xuICAgICAgeGhyLm9udGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xuXG4gICAgICBmb3JFYWNoKGV2ZW50SGFuZGxlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBmb3JFYWNoKHVwbG9hZEV2ZW50SGFuZGxlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgeGhyLnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gV2ViS2l0IGFkZGVkIHN1cHBvcnQgZm9yIHRoZSBqc29uIHJlc3BvbnNlVHlwZSB2YWx1ZSBvbiAwOS8wMy8yMDEzXG4gICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTczNjQ4LiBWZXJzaW9ucyBvZiBTYWZhcmkgcHJpb3IgdG8gNyBhcmVcbiAgICAgICAgICAvLyBrbm93biB0byB0aHJvdyB3aGVuIHNldHRpbmcgdGhlIHZhbHVlIFwianNvblwiIGFzIHRoZSByZXNwb25zZSB0eXBlLiBPdGhlciBvbGRlclxuICAgICAgICAgIC8vIGJyb3dzZXJzIGltcGxlbWVudGluZyB0aGUgcmVzcG9uc2VUeXBlXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUaGUganNvbiByZXNwb25zZSB0eXBlIGNhbiBiZSBpZ25vcmVkIGlmIG5vdCBzdXBwb3J0ZWQsIGJlY2F1c2UgSlNPTiBwYXlsb2FkcyBhcmVcbiAgICAgICAgICAvLyBwYXJzZWQgb24gdGhlIGNsaWVudC1zaWRlIHJlZ2FyZGxlc3MuXG4gICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZChpc1VuZGVmaW5lZChwb3N0KSA/IG51bGwgOiBwb3N0KTtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgIHZhciB0aW1lb3V0SWQgPSAkYnJvd3NlckRlZmVyKHRpbWVvdXRSZXF1ZXN0LCB0aW1lb3V0KTtcbiAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZUxpa2UodGltZW91dCkpIHtcbiAgICAgIHRpbWVvdXQudGhlbih0aW1lb3V0UmVxdWVzdCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiB0aW1lb3V0UmVxdWVzdCgpIHtcbiAgICAgIGlmIChqc29ucERvbmUpIHtcbiAgICAgICAganNvbnBEb25lKCk7XG4gICAgICB9XG4gICAgICBpZiAoeGhyKSB7XG4gICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCwgeGhyU3RhdHVzKSB7XG4gICAgICAvLyBjYW5jZWwgdGltZW91dCBhbmQgc3Vic2VxdWVudCB0aW1lb3V0IHByb21pc2UgcmVzb2x1dGlvblxuICAgICAgaWYgKGlzRGVmaW5lZCh0aW1lb3V0SWQpKSB7XG4gICAgICAgICRicm93c2VyRGVmZXIuY2FuY2VsKHRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICBqc29ucERvbmUgPSB4aHIgPSBudWxsO1xuXG4gICAgICBjYWxsYmFjayhzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0LCB4aHJTdGF0dXMpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBqc29ucFJlcSh1cmwsIGNhbGxiYWNrUGF0aCwgZG9uZSkge1xuICAgIHVybCA9IHVybC5yZXBsYWNlKCdKU09OX0NBTExCQUNLJywgY2FsbGJhY2tQYXRoKTtcbiAgICAvLyB3ZSBjYW4ndCB1c2UgalF1ZXJ5L2pxTGl0ZSBoZXJlIGJlY2F1c2UgalF1ZXJ5IGRvZXMgY3Jhenkgc3R1ZmYgd2l0aCBzY3JpcHQgZWxlbWVudHMsIGUuZy46XG4gICAgLy8gLSBmZXRjaGVzIGxvY2FsIHNjcmlwdHMgdmlhIFhIUiBhbmQgZXZhbHMgdGhlbVxuICAgIC8vIC0gYWRkcyBhbmQgaW1tZWRpYXRlbHkgcmVtb3ZlcyBzY3JpcHQgZWxlbWVudHMgZnJvbSB0aGUgZG9jdW1lbnRcbiAgICB2YXIgc2NyaXB0ID0gcmF3RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksIGNhbGxiYWNrID0gbnVsbDtcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIHNjcmlwdC5zcmMgPSB1cmw7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHNjcmlwdC5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgY2FsbGJhY2spO1xuICAgICAgc2NyaXB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgY2FsbGJhY2spO1xuICAgICAgcmF3RG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgIHZhciBzdGF0dXMgPSAtMTtcbiAgICAgIHZhciB0ZXh0ID0gJ3Vua25vd24nO1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyAmJiAhY2FsbGJhY2tzLndhc0NhbGxlZChjYWxsYmFja1BhdGgpKSB7XG4gICAgICAgICAgZXZlbnQgPSB7IHR5cGU6ICdlcnJvcicgfTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gZXZlbnQudHlwZTtcbiAgICAgICAgc3RhdHVzID0gZXZlbnQudHlwZSA9PT0gJ2Vycm9yJyA/IDQwNCA6IDIwMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgZG9uZShzdGF0dXMsIHRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGNhbGxiYWNrKTtcbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBjYWxsYmFjayk7XG4gICAgcmF3RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfVxufVxuXG52YXIgJGludGVycG9sYXRlTWluRXJyID0gYW5ndWxhci4kaW50ZXJwb2xhdGVNaW5FcnIgPSBtaW5FcnIoJyRpbnRlcnBvbGF0ZScpO1xuJGludGVycG9sYXRlTWluRXJyLnRocm93Tm9jb25jYXQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHRocm93ICRpbnRlcnBvbGF0ZU1pbkVycignbm9jb25jYXQnLFxuICAgICAgJ0Vycm9yIHdoaWxlIGludGVycG9sYXRpbmc6IHswfVxcblN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRpc2FsbG93cyAnICtcbiAgICAgICdpbnRlcnBvbGF0aW9ucyB0aGF0IGNvbmNhdGVuYXRlIG11bHRpcGxlIGV4cHJlc3Npb25zIHdoZW4gYSB0cnVzdGVkIHZhbHVlIGlzICcgK1xuICAgICAgJ3JlcXVpcmVkLiAgU2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRzY2UnLCB0ZXh0KTtcbn07XG5cbiRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIgPSBmdW5jdGlvbih0ZXh0LCBlcnIpIHtcbiAgcmV0dXJuICRpbnRlcnBvbGF0ZU1pbkVycignaW50ZXJyJywgJ0NhblxcJ3QgaW50ZXJwb2xhdGU6IHswfVxcbnsxfScsIHRleHQsIGVyci50b1N0cmluZygpKTtcbn07XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2VkIGZvciBjb25maWd1cmluZyB0aGUgaW50ZXJwb2xhdGlvbiBtYXJrdXAuIERlZmF1bHRzIHRvIGB7e2AgYW5kIGB9fWAuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogVGhpcyBmZWF0dXJlIGlzIHNvbWV0aW1lcyB1c2VkIHRvIG1peCBkaWZmZXJlbnQgbWFya3VwIGxhbmd1YWdlcywgZS5nLiB0byB3cmFwIGFuIEFuZ3VsYXJcbiAqIHRlbXBsYXRlIHdpdGhpbiBhIFB5dGhvbiBKaW5qYSB0ZW1wbGF0ZSAob3IgYW55IG90aGVyIHRlbXBsYXRlIGxhbmd1YWdlKS4gTWl4aW5nIHRlbXBsYXRpbmdcbiAqIGxhbmd1YWdlcyBpcyAqKnZlcnkgZGFuZ2Vyb3VzKiouIFRoZSBlbWJlZGRpbmcgdGVtcGxhdGUgbGFuZ3VhZ2Ugd2lsbCBub3Qgc2FmZWx5IGVzY2FwZSBBbmd1bGFyXG4gKiBleHByZXNzaW9ucywgc28gYW55IHVzZXItY29udHJvbGxlZCB2YWx1ZXMgaW4gdGhlIHRlbXBsYXRlIHdpbGwgY2F1c2UgQ3Jvc3MgU2l0ZSBTY3JpcHRpbmcgKFhTUylcbiAqIHNlY3VyaXR5IGJ1Z3MhXG4gKiA8L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZVxuPGV4YW1wbGUgbmFtZT1cImN1c3RvbS1pbnRlcnBvbGF0aW9uLW1hcmt1cFwiIG1vZHVsZT1cImN1c3RvbUludGVycG9sYXRpb25BcHBcIj5cbjxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG48c2NyaXB0PlxuICB2YXIgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCA9IGFuZ3VsYXIubW9kdWxlKCdjdXN0b21JbnRlcnBvbGF0aW9uQXBwJywgW10pO1xuXG4gIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29uZmlnKGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZVByb3ZpZGVyKSB7XG4gICAgJGludGVycG9sYXRlUHJvdmlkZXIuc3RhcnRTeW1ib2woJy8vJyk7XG4gICAgJGludGVycG9sYXRlUHJvdmlkZXIuZW5kU3ltYm9sKCcvLycpO1xuICB9KTtcblxuXG4gIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29udHJvbGxlcignRGVtb0NvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMubGFiZWwgPSBcIlRoaXMgYmluZGluZyBpcyBicm91Z2h0IHlvdSBieSAvLyBpbnRlcnBvbGF0aW9uIHN5bWJvbHMuXCI7XG4gIH0pO1xuPC9zY3JpcHQ+XG48ZGl2IG5nLWNvbnRyb2xsZXI9XCJEZW1vQ29udHJvbGxlciBhcyBkZW1vXCI+XG4gICAgLy9kZW1vLmxhYmVsLy9cbjwvZGl2PlxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICBpdCgnc2hvdWxkIGludGVycG9sYXRlIGJpbmRpbmcgd2l0aCBjdXN0b20gc3ltYm9scycsIGZ1bmN0aW9uKCkge1xuICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2RlbW8ubGFiZWwnKSkuZ2V0VGV4dCgpKS50b0JlKCdUaGlzIGJpbmRpbmcgaXMgYnJvdWdodCB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLicpO1xuICB9KTtcbjwvZmlsZT5cbjwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJEludGVycG9sYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBzdGFydFN5bWJvbCA9ICd7eyc7XG4gIHZhciBlbmRTeW1ib2wgPSAnfX0nO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTeW1ib2wgdG8gZGVub3RlIHN0YXJ0IG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB7e2AuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgc3RhcnRpbmcgc3ltYm9sIHRvLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHN5bWJvbCB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLlxuICAgKi9cbiAgdGhpcy5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBzdGFydFN5bWJvbCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdGFydFN5bWJvbDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBlbmQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYH19YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBuZXcgdmFsdWUgdG8gc2V0IHRoZSBlbmRpbmcgc3ltYm9sIHRvLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHN5bWJvbCB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLlxuICAgKi9cbiAgdGhpcy5lbmRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZW5kU3ltYm9sID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuZFN5bWJvbDtcbiAgICB9XG4gIH07XG5cblxuICB0aGlzLiRnZXQgPSBbJyRwYXJzZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckc2NlJywgZnVuY3Rpb24oJHBhcnNlLCAkZXhjZXB0aW9uSGFuZGxlciwgJHNjZSkge1xuICAgIHZhciBzdGFydFN5bWJvbExlbmd0aCA9IHN0YXJ0U3ltYm9sLmxlbmd0aCxcbiAgICAgICAgZW5kU3ltYm9sTGVuZ3RoID0gZW5kU3ltYm9sLmxlbmd0aCxcbiAgICAgICAgZXNjYXBlZFN0YXJ0UmVnZXhwID0gbmV3IFJlZ0V4cChzdGFydFN5bWJvbC5yZXBsYWNlKC8uL2csIGVzY2FwZSksICdnJyksXG4gICAgICAgIGVzY2FwZWRFbmRSZWdleHAgPSBuZXcgUmVnRXhwKGVuZFN5bWJvbC5yZXBsYWNlKC8uL2csIGVzY2FwZSksICdnJyk7XG5cbiAgICBmdW5jdGlvbiBlc2NhcGUoY2gpIHtcbiAgICAgIHJldHVybiAnXFxcXFxcXFxcXFxcJyArIGNoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlVGV4dCh0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKGVzY2FwZWRTdGFydFJlZ2V4cCwgc3RhcnRTeW1ib2wpLlxuICAgICAgICByZXBsYWNlKGVzY2FwZWRFbmRSZWdleHAsIGVuZFN5bWJvbCk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogdGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgY29uc3RhbnRXYXRjaERlbGVnYXRlIGluIHBhcnNlLmpzXG4gICAgZnVuY3Rpb24gY29uc3RhbnRXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIGNvbnN0YW50SW50ZXJwKSB7XG4gICAgICB2YXIgdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBjb25zdGFudEludGVycG9sYXRlV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgdW53YXRjaCgpO1xuICAgICAgICByZXR1cm4gY29uc3RhbnRJbnRlcnAoc2NvcGUpO1xuICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KTtcbiAgICAgIHJldHVybiB1bndhdGNoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXF1aXJlcyAkcGFyc2VcbiAgICAgKiBAcmVxdWlyZXMgJHNjZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBDb21waWxlcyBhIHN0cmluZyB3aXRoIG1hcmt1cCBpbnRvIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFRoaXMgc2VydmljZSBpcyB1c2VkIGJ5IHRoZVxuICAgICAqIEhUTUwge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSBzZXJ2aWNlIGZvciBkYXRhIGJpbmRpbmcuIFNlZVxuICAgICAqIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciAkaW50ZXJwb2xhdGVQcm92aWRlcn0gZm9yIGNvbmZpZ3VyaW5nIHRoZVxuICAgICAqIGludGVycG9sYXRpb24gbWFya3VwLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgdmFyICRpbnRlcnBvbGF0ZSA9IC4uLjsgLy8gaW5qZWN0ZWRcbiAgICAgKiAgIHZhciBleHAgPSAkaW50ZXJwb2xhdGUoJ0hlbGxvIHt7bmFtZSB8IHVwcGVyY2FzZX19IScpO1xuICAgICAqICAgZXhwZWN0KGV4cCh7bmFtZTonQW5ndWxhcid9KSkudG9FcXVhbCgnSGVsbG8gQU5HVUxBUiEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGAkaW50ZXJwb2xhdGVgIHRha2VzIGFuIG9wdGlvbmFsIGZvdXJ0aCBhcmd1bWVudCwgYGFsbE9yTm90aGluZ2AuIElmIGBhbGxPck5vdGhpbmdgIGlzXG4gICAgICogYHRydWVgLCB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zXG4gICAgICogZXZhbHVhdGUgdG8gYSB2YWx1ZSBvdGhlciB0aGFuIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHZhciAkaW50ZXJwb2xhdGUgPSAuLi47IC8vIGluamVjdGVkXG4gICAgICogICB2YXIgY29udGV4dCA9IHtncmVldGluZzogJ0hlbGxvJywgbmFtZTogdW5kZWZpbmVkIH07XG4gICAgICpcbiAgICAgKiAgIC8vIGRlZmF1bHQgXCJmb3JnaXZpbmdcIiBtb2RlXG4gICAgICogICB2YXIgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJyk7XG4gICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0VxdWFsKCdIZWxsbyAhJyk7XG4gICAgICpcbiAgICAgKiAgIC8vIFwiYWxsT3JOb3RoaW5nXCIgbW9kZVxuICAgICAqICAgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJywgZmFsc2UsIG51bGwsIHRydWUpO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAqICAgY29udGV4dC5uYW1lID0gJ0FuZ3VsYXInO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9FcXVhbCgnSGVsbG8gQW5ndWxhciEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBhbGxPck5vdGhpbmdgIGlzIHVzZWZ1bCBmb3IgaW50ZXJwb2xhdGluZyBVUkxzLiBgbmdTcmNgIGFuZCBgbmdTcmNzZXRgIHVzZSB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogIyMjIyBFc2NhcGVkIEludGVycG9sYXRpb25cbiAgICAgKiAkaW50ZXJwb2xhdGUgcHJvdmlkZXMgYSBtZWNoYW5pc20gZm9yIGVzY2FwaW5nIGludGVycG9sYXRpb24gbWFya2Vycy4gU3RhcnQgYW5kIGVuZCBtYXJrZXJzXG4gICAgICogY2FuIGJlIGVzY2FwZWQgYnkgcHJlY2VkaW5nIGVhY2ggb2YgdGhlaXIgY2hhcmFjdGVycyB3aXRoIGEgUkVWRVJTRSBTT0xJRFVTIFUrMDA1QyAoYmFja3NsYXNoKS5cbiAgICAgKiBJdCB3aWxsIGJlIHJlbmRlcmVkIGFzIGEgcmVndWxhciBzdGFydC9lbmQgbWFya2VyLCBhbmQgd2lsbCBub3QgYmUgaW50ZXJwcmV0ZWQgYXMgYW4gZXhwcmVzc2lvblxuICAgICAqIG9yIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIGVuYWJsZXMgd2ViLXNlcnZlcnMgdG8gcHJldmVudCBzY3JpcHQgaW5qZWN0aW9uIGF0dGFja3MgYW5kIGRlZmFjaW5nIGF0dGFja3MsIHRvIHNvbWVcbiAgICAgKiBkZWdyZWUsIHdoaWxlIGFsc28gZW5hYmxpbmcgY29kZSBleGFtcGxlcyB0byB3b3JrIHdpdGhvdXQgcmVseWluZyBvbiB0aGVcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTm9uQmluZGFibGUgbmdOb25CaW5kYWJsZX0gZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogKipGb3Igc2VjdXJpdHkgcHVycG9zZXMsIGl0IGlzIHN0cm9uZ2x5IGVuY291cmFnZWQgdGhhdCB3ZWIgc2VydmVycyBlc2NhcGUgdXNlci1zdXBwbGllZCBkYXRhLFxuICAgICAqIHJlcGxhY2luZyBhbmdsZSBicmFja2V0cyAoJmx0OywgJmd0Oykgd2l0aCAmYW1wO2x0OyBhbmQgJmFtcDtndDsgcmVzcGVjdGl2ZWx5LCBhbmQgcmVwbGFjaW5nIGFsbFxuICAgICAqIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCB0aGVpciBlc2NhcGVkIGNvdW50ZXJwYXJ0cy4qKlxuICAgICAqXG4gICAgICogRXNjYXBlZCBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgYXJlIG9ubHkgcmVwbGFjZWQgd2l0aCB0aGUgYWN0dWFsIGludGVycG9sYXRpb24gbWFya2VycyBpbiByZW5kZXJlZFxuICAgICAqIG91dHB1dCB3aGVuIHRoZSAkaW50ZXJwb2xhdGUgc2VydmljZSBwcm9jZXNzZXMgdGhlIHRleHQuIFNvLCBmb3IgSFRNTCBlbGVtZW50cyBpbnRlcnBvbGF0ZWRcbiAgICAgKiBieSB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9LCBvciBvdGhlcndpc2UgaW50ZXJwb2xhdGVkIHdpdGggdGhlIGBtdXN0SGF2ZUV4cHJlc3Npb25gIHBhcmFtZXRlclxuICAgICAqIHNldCB0byBgdHJ1ZWAsIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dCBtdXN0IGNvbnRhaW4gYW4gdW5lc2NhcGVkIGludGVycG9sYXRpb24gZXhwcmVzc2lvbi4gQXMgc3VjaCxcbiAgICAgKiB0aGlzIGlzIHR5cGljYWxseSB1c2VmdWwgb25seSB3aGVuIHVzZXItZGF0YSBpcyB1c2VkIGluIHJlbmRlcmluZyBhIHRlbXBsYXRlIGZyb20gdGhlIHNlcnZlciwgb3JcbiAgICAgKiB3aGVuIG90aGVyd2lzZSB1bnRydXN0ZWQgZGF0YSBpcyB1c2VkIGJ5IGEgZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogPGV4YW1wbGUgbmFtZT1cImludGVycG9sYXRpb25cIj5cbiAgICAgKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgKiAgICA8ZGl2IG5nLWluaXQ9XCJ1c2VybmFtZT0nQSB1c2VyJ1wiPlxuICAgICAqICAgICAgPHAgbmctaW5pdD1cImFwcHRpdGxlPSdFc2NhcGluZyBkZW1vJ1wiPnt7YXBwdGl0bGV9fTogXFx7XFx7IHVzZXJuYW1lID0gXCJkZWZhY2VkIHZhbHVlXCI7IFxcfVxcfVxuICAgICAqICAgICAgICA8L3A+XG4gICAgICogICAgICA8cD48c3Ryb25nPnt7dXNlcm5hbWV9fTwvc3Ryb25nPiBhdHRlbXB0cyB0byBpbmplY3QgY29kZSB3aGljaCB3aWxsIGRlZmFjZSB0aGVcbiAgICAgKiAgICAgICAgYXBwbGljYXRpb24sIGJ1dCBmYWlscyB0byBhY2NvbXBsaXNoIHRoZWlyIHRhc2ssIGJlY2F1c2UgdGhlIHNlcnZlciBoYXMgY29ycmVjdGx5XG4gICAgICogICAgICAgIGVzY2FwZWQgdGhlIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCBSRVZFUlNFIFNPTElEVVMgVSswMDVDIChiYWNrc2xhc2gpXG4gICAgICogICAgICAgIGNoYXJhY3RlcnMuPC9wPlxuICAgICAqICAgICAgPHA+SW5zdGVhZCwgdGhlIHJlc3VsdCBvZiB0aGUgYXR0ZW1wdGVkIHNjcmlwdCBpbmplY3Rpb24gaXMgdmlzaWJsZSwgYW5kIGNhbiBiZSByZW1vdmVkXG4gICAgICogICAgICAgIGZyb20gdGhlIGRhdGFiYXNlIGJ5IGFuIGFkbWluaXN0cmF0b3IuPC9wPlxuICAgICAqICAgIDwvZGl2PlxuICAgICAqICA8L2ZpbGU+XG4gICAgICogPC9leGFtcGxlPlxuICAgICAqXG4gICAgICogQGtub3duSXNzdWVcbiAgICAgKiBJdCBpcyBjdXJyZW50bHkgbm90IHBvc3NpYmxlIGZvciBhbiBpbnRlcnBvbGF0ZWQgZXhwcmVzc2lvbiB0byBjb250YWluIHRoZSBpbnRlcnBvbGF0aW9uIGVuZFxuICAgICAqIHN5bWJvbC4gRm9yIGV4YW1wbGUsIGB7eyAnfX0nIH19YCB3aWxsIGJlIGluY29ycmVjdGx5IGludGVycHJldGVkIGFzIGB7eyAnIH19YCArIGAnIH19YCwgaS5lLlxuICAgICAqIGFuIGludGVycG9sYXRlZCBleHByZXNzaW9uIGNvbnNpc3Rpbmcgb2YgYSBzaW5nbGUtcXVvdGUgKGAnYCkgYW5kIHRoZSBgJyB9fWAgc3RyaW5nLlxuICAgICAqXG4gICAgICogQGtub3duSXNzdWVcbiAgICAgKiBBbGwgZGlyZWN0aXZlcyBhbmQgY29tcG9uZW50cyBtdXN0IHVzZSB0aGUgc3RhbmRhcmQgYHt7YCBgfX1gIGludGVycG9sYXRpb24gc3ltYm9sc1xuICAgICAqIGluIHRoZWlyIHRlbXBsYXRlcy4gSWYgeW91IGNoYW5nZSB0aGUgYXBwbGljYXRpb24gaW50ZXJwb2xhdGlvbiBzeW1ib2xzIHRoZSB7QGxpbmsgJGNvbXBpbGV9XG4gICAgICogc2VydmljZSB3aWxsIGF0dGVtcHQgdG8gZGVub3JtYWxpemUgdGhlIHN0YW5kYXJkIHN5bWJvbHMgdG8gdGhlIGN1c3RvbSBzeW1ib2xzLlxuICAgICAqIFRoZSBkZW5vcm1hbGl6YXRpb24gcHJvY2VzcyBpcyBub3QgY2xldmVyIGVub3VnaCB0byBrbm93IG5vdCB0byByZXBsYWNlIGluc3RhbmNlcyBvZiB0aGUgc3RhbmRhcmRcbiAgICAgKiBzeW1ib2xzIHdoZXJlIHRoZXkgd291bGQgbm90IG5vcm1hbGx5IGJlIHRyZWF0ZWQgYXMgaW50ZXJwb2xhdGlvbiBzeW1ib2xzLiBGb3IgZXhhbXBsZSBpbiB0aGUgZm9sbG93aW5nXG4gICAgICogY29kZSBzbmlwcGV0IHRoZSBjbG9zaW5nIGJyYWNlcyBvZiB0aGUgbGl0ZXJhbCBvYmplY3Qgd2lsbCBnZXQgaW5jb3JyZWN0bHkgZGVub3JtYWxpemVkOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogPGRpdiBkYXRhLWNvbnRleHQ9J3tcImNvbnRleHRcIjp7XCJpZFwiOjMsXCJ0eXBlXCI6XCJwYWdlXCJ9fVwiPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIHdvcmthcm91bmQgaXMgdG8gZW5zdXJlIHRoYXQgc3VjaCBpbnN0YW5jZXMgYXJlIHNlcGFyYXRlZCBieSB3aGl0ZXNwYWNlOlxuICAgICAqIGBgYFxuICAgICAqIDxkaXYgZGF0YS1jb250ZXh0PSd7XCJjb250ZXh0XCI6e1wiaWRcIjozLFwidHlwZVwiOlwicGFnZVwifSB9XCI+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE0NjEwI2lzc3VlY29tbWVudC0yMTk0MDEwOTkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB3aXRoIG1hcmt1cCB0byBpbnRlcnBvbGF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBtdXN0SGF2ZUV4cHJlc3Npb24gaWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgaW50ZXJwb2xhdGlvbiBzdHJpbmcgbXVzdCBoYXZlXG4gICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiBpbiBvcmRlciB0byByZXR1cm4gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4gU3RyaW5ncyB3aXRoIG5vXG4gICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiB3aWxsIHJldHVybiBudWxsIGZvciB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHRydXN0ZWRDb250ZXh0IHdoZW4gcHJvdmlkZWQsIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBwYXNzZXMgdGhlIGludGVycG9sYXRlZFxuICAgICAqICAgIHJlc3VsdCB0aHJvdWdoIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkKGludGVycG9sYXRlZFJlc3VsdCxcbiAgICAgKiAgICB0cnVzdGVkQ29udGV4dCl9IGJlZm9yZSByZXR1cm5pbmcgaXQuICBSZWZlciB0byB0aGUge0BsaW5rIG5nLiRzY2UgJHNjZX0gc2VydmljZSB0aGF0XG4gICAgICogICAgcHJvdmlkZXMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgZm9yIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gYWxsT3JOb3RoaW5nIGlmIGB0cnVlYCwgdGhlbiB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gcmV0dXJucyB1bmRlZmluZWRcbiAgICAgKiAgICB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCl9IGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBjb21wdXRlIHRoZVxuICAgICAqICAgIGludGVycG9sYXRlZCBzdHJpbmcuIFRoZSBmdW5jdGlvbiBoYXMgdGhlc2UgcGFyYW1ldGVyczpcbiAgICAgKlxuICAgICAqIC0gYGNvbnRleHRgOiBldmFsdWF0aW9uIGNvbnRleHQgZm9yIGFsbCBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgaW50ZXJwb2xhdGVkIHRleHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiAkaW50ZXJwb2xhdGUodGV4dCwgbXVzdEhhdmVFeHByZXNzaW9uLCB0cnVzdGVkQ29udGV4dCwgYWxsT3JOb3RoaW5nKSB7XG4gICAgICAvLyBQcm92aWRlIGEgcXVpY2sgZXhpdCBhbmQgc2ltcGxpZmllZCByZXN1bHQgZnVuY3Rpb24gZm9yIHRleHQgd2l0aCBubyBpbnRlcnBvbGF0aW9uXG4gICAgICBpZiAoIXRleHQubGVuZ3RoIHx8IHRleHQuaW5kZXhPZihzdGFydFN5bWJvbCkgPT09IC0xKSB7XG4gICAgICAgIHZhciBjb25zdGFudEludGVycDtcbiAgICAgICAgaWYgKCFtdXN0SGF2ZUV4cHJlc3Npb24pIHtcbiAgICAgICAgICB2YXIgdW5lc2NhcGVkVGV4dCA9IHVuZXNjYXBlVGV4dCh0ZXh0KTtcbiAgICAgICAgICBjb25zdGFudEludGVycCA9IHZhbHVlRm4odW5lc2NhcGVkVGV4dCk7XG4gICAgICAgICAgY29uc3RhbnRJbnRlcnAuZXhwID0gdGV4dDtcbiAgICAgICAgICBjb25zdGFudEludGVycC5leHByZXNzaW9ucyA9IFtdO1xuICAgICAgICAgIGNvbnN0YW50SW50ZXJwLiQkd2F0Y2hEZWxlZ2F0ZSA9IGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uc3RhbnRJbnRlcnA7XG4gICAgICB9XG5cbiAgICAgIGFsbE9yTm90aGluZyA9ICEhYWxsT3JOb3RoaW5nO1xuICAgICAgdmFyIHN0YXJ0SW5kZXgsXG4gICAgICAgICAgZW5kSW5kZXgsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGV4cHJlc3Npb25zID0gW10sXG4gICAgICAgICAgcGFyc2VGbnMgPSBbXSxcbiAgICAgICAgICB0ZXh0TGVuZ3RoID0gdGV4dC5sZW5ndGgsXG4gICAgICAgICAgZXhwLFxuICAgICAgICAgIGNvbmNhdCA9IFtdLFxuICAgICAgICAgIGV4cHJlc3Npb25Qb3NpdGlvbnMgPSBbXTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgdGV4dExlbmd0aCkge1xuICAgICAgICBpZiAoKChzdGFydEluZGV4ID0gdGV4dC5pbmRleE9mKHN0YXJ0U3ltYm9sLCBpbmRleCkpICE9PSAtMSkgJiZcbiAgICAgICAgICAgICAoKGVuZEluZGV4ID0gdGV4dC5pbmRleE9mKGVuZFN5bWJvbCwgc3RhcnRJbmRleCArIHN0YXJ0U3ltYm9sTGVuZ3RoKSkgIT09IC0xKSkge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4LCBzdGFydEluZGV4KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHAgPSB0ZXh0LnN1YnN0cmluZyhzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgsIGVuZEluZGV4KTtcbiAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGV4cCk7XG4gICAgICAgICAgcGFyc2VGbnMucHVzaCgkcGFyc2UoZXhwLCBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKSk7XG4gICAgICAgICAgaW5kZXggPSBlbmRJbmRleCArIGVuZFN5bWJvbExlbmd0aDtcbiAgICAgICAgICBleHByZXNzaW9uUG9zaXRpb25zLnB1c2goY29uY2F0Lmxlbmd0aCk7XG4gICAgICAgICAgY29uY2F0LnB1c2goJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdlIGRpZCBub3QgZmluZCBhbiBpbnRlcnBvbGF0aW9uLCBzbyB3ZSBoYXZlIHRvIGFkZCB0aGUgcmVtYWluZGVyIHRvIHRoZSBzZXBhcmF0b3JzIGFycmF5XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25jYXQucHVzaCh1bmVzY2FwZVRleHQodGV4dC5zdWJzdHJpbmcoaW5kZXgpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENvbmNhdGVuYXRpbmcgZXhwcmVzc2lvbnMgbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXQgd2hldGhlciBzb21lIGNvbWJpbmF0aW9uIG9mXG4gICAgICAvLyBjb25jYXRlbmF0ZWQgdmFsdWVzIGFyZSB1bnNhZmUgdG8gdXNlIGFuZCBjb3VsZCBlYXNpbHkgbGVhZCB0byBYU1MuICBCeSByZXF1aXJpbmcgdGhhdCBhXG4gICAgICAvLyBzaW5nbGUgZXhwcmVzc2lvbiBiZSB1c2VkIGZvciBpZnJhbWVbc3JjXSwgb2JqZWN0W3NyY10sIGV0Yy4sIHdlIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZVxuICAgICAgLy8gdGhhdCdzIHVzZWQgaXMgYXNzaWduZWQgb3IgY29uc3RydWN0ZWQgYnkgc29tZSBKUyBjb2RlIHNvbWV3aGVyZSB0aGF0IGlzIG1vcmUgdGVzdGFibGUgb3JcbiAgICAgIC8vIG1ha2UgaXQgb2J2aW91cyB0aGF0IHlvdSBib3VuZCB0aGUgdmFsdWUgdG8gc29tZSB1c2VyIGNvbnRyb2xsZWQgdmFsdWUuICBUaGlzIGhlbHBzIHJlZHVjZVxuICAgICAgLy8gdGhlIGxvYWQgd2hlbiBhdWRpdGluZyBmb3IgWFNTIGlzc3Vlcy5cbiAgICAgIGlmICh0cnVzdGVkQ29udGV4dCAmJiBjb25jYXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICRpbnRlcnBvbGF0ZU1pbkVyci50aHJvd05vY29uY2F0KHRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW11c3RIYXZlRXhwcmVzc2lvbiB8fCBleHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGNvbXB1dGUgPSBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYWxsT3JOb3RoaW5nICYmIGlzVW5kZWZpbmVkKHZhbHVlc1tpXSkpIHJldHVybjtcbiAgICAgICAgICAgIGNvbmNhdFtleHByZXNzaW9uUG9zaXRpb25zW2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbmNhdC5qb2luKCcnKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB0cnVzdGVkQ29udGV4dCA/XG4gICAgICAgICAgICAkc2NlLmdldFRydXN0ZWQodHJ1c3RlZENvbnRleHQsIHZhbHVlKSA6XG4gICAgICAgICAgICAkc2NlLnZhbHVlT2YodmFsdWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gaW50ZXJwb2xhdGlvbkZuKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHZhciBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkoaWkpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSBwYXJzZUZuc1tpXShjb250ZXh0KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBjb21wdXRlKHZhbHVlcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoJGludGVycG9sYXRlTWluRXJyLmludGVycih0ZXh0LCBlcnIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAvLyBhbGwgb2YgdGhlc2UgcHJvcGVydGllcyBhcmUgdW5kb2N1bWVudGVkIGZvciBub3dcbiAgICAgICAgICBleHA6IHRleHQsIC8vanVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHJlZ3VsYXIgd2F0Y2hlcnMgY3JlYXRlZCB2aWEgJHdhdGNoXG4gICAgICAgICAgZXhwcmVzc2lvbnM6IGV4cHJlc3Npb25zLFxuICAgICAgICAgICQkd2F0Y2hEZWxlZ2F0ZTogZnVuY3Rpb24oc2NvcGUsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaEdyb3VwKHBhcnNlRm5zLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24gaW50ZXJwb2xhdGVGbldhdGNoZXIodmFsdWVzLCBvbGRWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgdmFyIGN1cnJWYWx1ZSA9IGNvbXB1dGUodmFsdWVzKTtcbiAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBjdXJyVmFsdWUsIHZhbHVlcyAhPT0gb2xkVmFsdWVzID8gbGFzdFZhbHVlIDogY3VyclZhbHVlLCBzY29wZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gY3VyclZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvcih2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgIHJldHVybiBhbGxPck5vdGhpbmcgJiYgIWlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IHN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKCRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIodGV4dCwgZXJyKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjc3RhcnRTeW1ib2xcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLlxuICAgICAqXG4gICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuc3RhcnRTeW1ib2xgfSB0byBjaGFuZ2VcbiAgICAgKiB0aGUgc3ltYm9sLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gc3RhcnQgc3ltYm9sLlxuICAgICAqL1xuICAgICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjZW5kU3ltYm9sXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXG4gICAgICpcbiAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuZW5kU3ltYm9sYH0gdG8gY2hhbmdlXG4gICAgICogdGhlIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGVuZCBzeW1ib2wuXG4gICAgICovXG4gICAgJGludGVycG9sYXRlLmVuZFN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVuZFN5bWJvbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuICRpbnRlcnBvbGF0ZTtcbiAgfV07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJEludGVydmFsUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckd2luZG93JywgJyRxJywgJyQkcScsICckYnJvd3NlcicsXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkd2luZG93LCAgICRxLCAgICQkcSwgICAkYnJvd3Nlcikge1xuICAgIHZhciBpbnRlcnZhbHMgPSB7fTtcblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgKiBAbmFtZSAkaW50ZXJ2YWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldEludGVydmFsYC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZXZlcnkgYGRlbGF5YFxuICAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICAqXG4gICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYW4gaW50ZXJ2YWwgZnVuY3Rpb24gaXMgYSBwcm9taXNlLiBUaGlzIHByb21pc2Ugd2lsbCBiZVxuICAgICAgKiBub3RpZmllZCB1cG9uIGVhY2ggdGljayBvZiB0aGUgaW50ZXJ2YWwsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIGBjb3VudGAgaXRlcmF0aW9ucywgb3JcbiAgICAgICogcnVuIGluZGVmaW5pdGVseSBpZiBgY291bnRgIGlzIG5vdCBkZWZpbmVkLiBUaGUgdmFsdWUgb2YgdGhlIG5vdGlmaWNhdGlvbiB3aWxsIGJlIHRoZVxuICAgICAgKiBudW1iZXIgb2YgaXRlcmF0aW9ucyB0aGF0IGhhdmUgcnVuLlxuICAgICAgKiBUbyBjYW5jZWwgYW4gaW50ZXJ2YWwsIGNhbGwgYCRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSlgLlxuICAgICAgKlxuICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiRpbnRlcnZhbCNmbHVzaCBgJGludGVydmFsLmZsdXNoKG1pbGxpcylgfSB0b1xuICAgICAgKiBtb3ZlIGZvcndhcmQgYnkgYG1pbGxpc2AgbWlsbGlzZWNvbmRzIGFuZCB0cmlnZ2VyIGFueSBmdW5jdGlvbnMgc2NoZWR1bGVkIHRvIHJ1biBpbiB0aGF0XG4gICAgICAqIHRpbWUuXG4gICAgICAqXG4gICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAqICoqTm90ZSoqOiBJbnRlcnZhbHMgY3JlYXRlZCBieSB0aGlzIHNlcnZpY2UgbXVzdCBiZSBleHBsaWNpdGx5IGRlc3Ryb3llZCB3aGVuIHlvdSBhcmUgZmluaXNoZWRcbiAgICAgICogd2l0aCB0aGVtLiAgSW4gcGFydGljdWxhciB0aGV5IGFyZSBub3QgYXV0b21hdGljYWxseSBkZXN0cm95ZWQgd2hlbiBhIGNvbnRyb2xsZXIncyBzY29wZSBvciBhXG4gICAgICAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQgYXJlIGRlc3Ryb3llZC5cbiAgICAgICogWW91IHNob3VsZCB0YWtlIHRoaXMgaW50byBjb25zaWRlcmF0aW9uIGFuZCBtYWtlIHN1cmUgdG8gYWx3YXlzIGNhbmNlbCB0aGUgaW50ZXJ2YWwgYXQgdGhlXG4gICAgICAqIGFwcHJvcHJpYXRlIG1vbWVudC4gIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyBhbmQgd2hlbiB0byBkbyB0aGlzLlxuICAgICAgKiA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCByZXBlYXRlZGx5LiBJZiBubyBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAgKiAgIGFyZSBwYXNzZWQgKHNlZSBiZWxvdyksIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCBpdGVyYXRpb24gY291bnQuXG4gICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gZWFjaCBmdW5jdGlvbiBjYWxsLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtjb3VudD0wXSBOdW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0LiBJZiBub3Qgc2V0LCBvciAwLCB3aWxsIHJlcGVhdFxuICAgICAgKiAgIGluZGVmaW5pdGVseS5cbiAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBgZmFsc2VgIHNraXBzIG1vZGVsIGRpcnR5IGNoZWNraW5nLCBvdGhlcndpc2VcbiAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseX0gYmxvY2suXG4gICAgICAqIEBwYXJhbSB7Li4uKj19IFBhc3MgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIHRvIHRoZSBleGVjdXRlZCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSB3aGljaCB3aWxsIGJlIG5vdGlmaWVkIG9uIGVhY2ggaXRlcmF0aW9uLiBJdCB3aWxsIHJlc29sdmUgb25jZSBhbGwgaXRlcmF0aW9ucyBvZiB0aGUgaW50ZXJ2YWwgY29tcGxldGUuXG4gICAgICAqXG4gICAgICAqIEBleGFtcGxlXG4gICAgICAqIDxleGFtcGxlIG1vZHVsZT1cImludGVydmFsRXhhbXBsZVwiIG5hbWU9XCJpbnRlcnZhbC1zZXJ2aWNlXCI+XG4gICAgICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAqICAgPHNjcmlwdD5cbiAgICAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdpbnRlcnZhbEV4YW1wbGUnLCBbXSlcbiAgICAgICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGludGVydmFsJyxcbiAgICAgICogICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRpbnRlcnZhbCkge1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmZvcm1hdCA9ICdNL2QveXkgaDptbTpzcyBhJztcbiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwO1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAxMjA7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICB2YXIgc3RvcDtcbiAgICAgICogICAgICAgICAgICRzY29wZS5maWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAvLyBEb24ndCBzdGFydCBhIG5ldyBmaWdodCBpZiB3ZSBhcmUgYWxyZWFkeSBmaWdodGluZ1xuICAgICAgKiAgICAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApICkgcmV0dXJuO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICBzdG9wID0gJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYmxvb2RfMSA+IDAgJiYgJHNjb3BlLmJsb29kXzIgPiAwKSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9ICRzY29wZS5ibG9vZF8xIC0gMztcbiAgICAgICogICAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gJHNjb3BlLmJsb29kXzIgLSA0O1xuICAgICAgKiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7XG4gICAgICAqICAgICAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wKTtcbiAgICAgICogICAgICAgICAgICAgICBzdG9wID0gdW5kZWZpbmVkO1xuICAgICAgKiAgICAgICAgICAgICB9XG4gICAgICAqICAgICAgICAgICB9O1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgJHNjb3BlLnJlc2V0RmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAxMDA7XG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBpbnRlcnZhbCBpcyBkZXN0cm95ZWQgdG9vXG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQoKTtcbiAgICAgICogICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgIH1dKVxuICAgICAgKiAgICAgICAvLyBSZWdpc3RlciB0aGUgJ215Q3VycmVudFRpbWUnIGRpcmVjdGl2ZSBmYWN0b3J5IG1ldGhvZC5cbiAgICAgICogICAgICAgLy8gV2UgaW5qZWN0ICRpbnRlcnZhbCBhbmQgZGF0ZUZpbHRlciBzZXJ2aWNlIHNpbmNlIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBESS5cbiAgICAgICogICAgICAgLmRpcmVjdGl2ZSgnbXlDdXJyZW50VGltZScsIFsnJGludGVydmFsJywgJ2RhdGVGaWx0ZXInLFxuICAgICAgKiAgICAgICAgIGZ1bmN0aW9uKCRpbnRlcnZhbCwgZGF0ZUZpbHRlcikge1xuICAgICAgKiAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi4gKGNvbXBpbGUgZnVuY3Rpb24gbm90IG5lZWRlZClcbiAgICAgICogICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICogICAgICAgICAgICAgdmFyIGZvcm1hdCwgIC8vIGRhdGUgZm9ybWF0XG4gICAgICAqICAgICAgICAgICAgICAgICBzdG9wVGltZTsgLy8gc28gdGhhdCB3ZSBjYW4gY2FuY2VsIHRoZSB0aW1lIHVwZGF0ZXNcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gdXNlZCB0byB1cGRhdGUgdGhlIFVJXG4gICAgICAqICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZWxlbWVudC50ZXh0KGRhdGVGaWx0ZXIobmV3IERhdGUoKSwgZm9ybWF0KSk7XG4gICAgICAqICAgICAgICAgICAgIH1cbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gd2F0Y2ggdGhlIGV4cHJlc3Npb24sIGFuZCB1cGRhdGUgdGhlIFVJIG9uIGNoYW5nZS5cbiAgICAgICogICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLm15Q3VycmVudFRpbWUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZm9ybWF0ID0gdmFsdWU7XG4gICAgICAqICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpO1xuICAgICAgKiAgICAgICAgICAgICB9KTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgc3RvcFRpbWUgPSAkaW50ZXJ2YWwodXBkYXRlVGltZSwgMTAwMCk7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIGxpc3RlbiBvbiBET00gZGVzdHJveSAocmVtb3ZhbCkgZXZlbnQsIGFuZCBjYW5jZWwgdGhlIG5leHQgVUkgdXBkYXRlXG4gICAgICAqICAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdXBkYXRpbmcgdGltZSBhZnRlciB0aGUgRE9NIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gICAgICAqICAgICAgICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wVGltZSk7XG4gICAgICAqICAgICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgIH1dKTtcbiAgICAgICogICA8L3NjcmlwdD5cbiAgICAgICpcbiAgICAgICogICA8ZGl2PlxuICAgICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICogICAgICAgPGxhYmVsPkRhdGUgZm9ybWF0OiA8aW5wdXQgbmctbW9kZWw9XCJmb3JtYXRcIj48L2xhYmVsPiA8aHIvPlxuICAgICAgKiAgICAgICBDdXJyZW50IHRpbWUgaXM6IDxzcGFuIG15LWN1cnJlbnQtdGltZT1cImZvcm1hdFwiPjwvc3Bhbj5cbiAgICAgICogICAgICAgPGhyLz5cbiAgICAgICogICAgICAgQmxvb2QgMSA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMX19PC9mb250PlxuICAgICAgKiAgICAgICBCbG9vZCAyIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8yfX08L2ZvbnQ+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJmaWdodCgpXCI+RmlnaHQ8L2J1dHRvbj5cbiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1uZy1jbGljaz1cInN0b3BGaWdodCgpXCI+U3RvcEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJyZXNldEZpZ2h0KClcIj5yZXNldEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICA8L2Rpdj5cbiAgICAgICogICA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogPC9maWxlPlxuICAgICAgKiA8L2V4YW1wbGU+XG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIGludGVydmFsKGZuLCBkZWxheSwgY291bnQsIGludm9rZUFwcGx5KSB7XG4gICAgICB2YXIgaGFzUGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQsXG4gICAgICAgICAgYXJncyA9IGhhc1BhcmFtcyA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDQpIDogW10sXG4gICAgICAgICAgc2V0SW50ZXJ2YWwgPSAkd2luZG93LnNldEludGVydmFsLFxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwgPSAkd2luZG93LmNsZWFySW50ZXJ2YWwsXG4gICAgICAgICAgaXRlcmF0aW9uID0gMCxcbiAgICAgICAgICBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLFxuICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICBjb3VudCA9IGlzRGVmaW5lZChjb3VudCkgPyBjb3VudCA6IDA7XG5cbiAgICAgIHByb21pc2UuJCRpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgaWYgKHNraXBBcHBseSkge1xuICAgICAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGRlZmVycmVkLm5vdGlmeShpdGVyYXRpb24rKyk7XG5cbiAgICAgICAgaWYgKGNvdW50ID4gMCAmJiBpdGVyYXRpb24gPj0gY291bnQpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGl0ZXJhdGlvbik7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcblxuICAgICAgfSwgZGVsYXkpO1xuXG4gICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgICBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgaWYgKCFoYXNQYXJhbXMpIHtcbiAgICAgICAgICBmbihpdGVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICogQG5hbWUgJGludGVydmFsI2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7UHJvbWlzZT19IHByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkaW50ZXJ2YWxgIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgd2FzIHN1Y2Nlc3NmdWxseSBjYW5jZWxlZC5cbiAgICAgICovXG4gICAgaW50ZXJ2YWwuY2FuY2VsID0gZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS4kJGludGVydmFsSWQgaW4gaW50ZXJ2YWxzKSB7XG4gICAgICAgIC8vIEludGVydmFsIGNhbmNlbHMgc2hvdWxkIG5vdCByZXBvcnQgYXMgdW5oYW5kbGVkIHByb21pc2UuXG4gICAgICAgIG1hcmtRRXhjZXB0aW9uSGFuZGxlZChpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdLnByb21pc2UpO1xuICAgICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdLnJlamVjdCgnY2FuY2VsZWQnKTtcbiAgICAgICAgJHdpbmRvdy5jbGVhckludGVydmFsKHByb21pc2UuJCRpbnRlcnZhbElkKTtcbiAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gaW50ZXJ2YWw7XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkanNvbnBDYWxsYmFja3NcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgc2VydmljZSBoYW5kbGVzIHRoZSBsaWZlY3ljbGUgb2YgY2FsbGJhY2tzIHRvIGhhbmRsZSBKU09OUCByZXF1ZXN0cy5cbiAqIE92ZXJyaWRlIHRoaXMgc2VydmljZSBpZiB5b3Ugd2lzaCB0byBjdXN0b21pc2Ugd2hlcmUgdGhlIGNhbGxiYWNrcyBhcmUgc3RvcmVkIGFuZFxuICogaG93IHRoZXkgdmFyeSBjb21wYXJlZCB0byB0aGUgcmVxdWVzdGVkIHVybC5cbiAqL1xudmFyICRqc29ucENhbGxiYWNrc1Byb3ZpZGVyID0gLyoqIEB0aGlzICovIGZ1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2FsbGJhY2tzID0gYW5ndWxhci5jYWxsYmFja3M7XG4gICAgdmFyIGNhbGxiYWNrTWFwID0ge307XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDYWxsYmFjayhjYWxsYmFja0lkKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGNhbGxiYWNrLmRhdGEgPSBkYXRhO1xuICAgICAgICBjYWxsYmFjay5jYWxsZWQgPSB0cnVlO1xuICAgICAgfTtcbiAgICAgIGNhbGxiYWNrLmlkID0gY2FsbGJhY2tJZDtcbiAgICAgIHJldHVybiBjYWxsYmFjaztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkanNvbnBDYWxsYmFja3MjY3JlYXRlQ2FsbGJhY2tcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgdGhlIHVybCBvZiB0aGUgSlNPTlAgcmVxdWVzdFxuICAgICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGNhbGxiYWNrIHBhdGggdG8gc2VuZCB0byB0aGUgc2VydmVyIGFzIHBhcnQgb2YgdGhlIEpTT05QIHJlcXVlc3RcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICoge0BsaW5rICRodHRwQmFja2VuZH0gY2FsbHMgdGhpcyBtZXRob2QgdG8gY3JlYXRlIGEgY2FsbGJhY2sgYW5kIGdldCBob2xkIG9mIHRoZSBwYXRoIHRvIHRoZSBjYWxsYmFja1xuICAgICAgICogdG8gcGFzcyB0byB0aGUgc2VydmVyLCB3aGljaCB3aWxsIGJlIHVzZWQgdG8gY2FsbCB0aGUgY2FsbGJhY2sgd2l0aCBpdHMgcGF5bG9hZCBpbiB0aGUgSlNPTlAgcmVzcG9uc2UuXG4gICAgICAgKi9cbiAgICAgIGNyZWF0ZUNhbGxiYWNrOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrSWQgPSAnXycgKyAoY2FsbGJhY2tzLiQkY291bnRlcisrKS50b1N0cmluZygzNik7XG4gICAgICAgIHZhciBjYWxsYmFja1BhdGggPSAnYW5ndWxhci5jYWxsYmFja3MuJyArIGNhbGxiYWNrSWQ7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrSWQpO1xuICAgICAgICBjYWxsYmFja01hcFtjYWxsYmFja1BhdGhdID0gY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gY2FsbGJhY2s7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1BhdGg7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkanNvbnBDYWxsYmFja3Mjd2FzQ2FsbGVkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbGJhY2tQYXRoIHRoZSBwYXRoIHRvIHRoZSBjYWxsYmFjayB0aGF0IHdhcyBzZW50IGluIHRoZSBKU09OUCByZXF1ZXN0XG4gICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciB0aGUgY2FsbGJhY2sgaGFzIGJlZW4gY2FsbGVkLCBhcyBhIHJlc3VsdCBvZiB0aGUgSlNPTlAgcmVzcG9uc2VcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICoge0BsaW5rICRodHRwQmFja2VuZH0gY2FsbHMgdGhpcyBtZXRob2QgdG8gZmluZCBvdXQgd2hldGhlciB0aGUgSlNPTlAgcmVzcG9uc2UgYWN0dWFsbHkgY2FsbGVkIHRoZVxuICAgICAgICogY2FsbGJhY2sgdGhhdCB3YXMgcGFzc2VkIGluIHRoZSByZXF1ZXN0LlxuICAgICAgICovXG4gICAgICB3YXNDYWxsZWQ6IGZ1bmN0aW9uKGNhbGxiYWNrUGF0aCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2tNYXBbY2FsbGJhY2tQYXRoXS5jYWxsZWQ7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkanNvbnBDYWxsYmFja3MjZ2V0UmVzcG9uc2VcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsYmFja1BhdGggdGhlIHBhdGggdG8gdGhlIGNhbGxiYWNrIHRoYXQgd2FzIHNlbnQgaW4gdGhlIEpTT05QIHJlcXVlc3RcbiAgICAgICAqIEByZXR1cm5zIHsqfSB0aGUgZGF0YSByZWNlaXZlZCBmcm9tIHRoZSByZXNwb25zZSB2aWEgdGhlIHJlZ2lzdGVyZWQgY2FsbGJhY2tcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICoge0BsaW5rICRodHRwQmFja2VuZH0gY2FsbHMgdGhpcyBtZXRob2QgdG8gZ2V0IGhvbGQgb2YgdGhlIGRhdGEgdGhhdCB3YXMgcHJvdmlkZWQgdG8gdGhlIGNhbGxiYWNrXG4gICAgICAgKiBpbiB0aGUgSlNPTlAgcmVzcG9uc2UuXG4gICAgICAgKi9cbiAgICAgIGdldFJlc3BvbnNlOiBmdW5jdGlvbihjYWxsYmFja1BhdGgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrTWFwW2NhbGxiYWNrUGF0aF0uZGF0YTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRqc29ucENhbGxiYWNrcyNyZW1vdmVDYWxsYmFja1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhbGxiYWNrUGF0aCB0aGUgcGF0aCB0byB0aGUgY2FsbGJhY2sgdGhhdCB3YXMgc2VudCBpbiB0aGUgSlNPTlAgcmVxdWVzdFxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiB7QGxpbmsgJGh0dHBCYWNrZW5kfSBjYWxscyB0aGlzIG1ldGhvZCB0byByZW1vdmUgdGhlIGNhbGxiYWNrIGFmdGVyIHRoZSBKU09OUCByZXF1ZXN0IGhhc1xuICAgICAgICogY29tcGxldGVkIG9yIHRpbWVkLW91dC5cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlQ2FsbGJhY2s6IGZ1bmN0aW9uKGNhbGxiYWNrUGF0aCkge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja01hcFtjYWxsYmFja1BhdGhdO1xuICAgICAgICBkZWxldGUgY2FsbGJhY2tzW2NhbGxiYWNrLmlkXTtcbiAgICAgICAgZGVsZXRlIGNhbGxiYWNrTWFwW2NhbGxiYWNrUGF0aF07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn07XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2NhbGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICRsb2NhbGUgc2VydmljZSBwcm92aWRlcyBsb2NhbGl6YXRpb24gcnVsZXMgZm9yIHZhcmlvdXMgQW5ndWxhciBjb21wb25lbnRzLiBBcyBvZiByaWdodCBub3cgdGhlXG4gKiBvbmx5IHB1YmxpYyBhcGkgaXM6XG4gKlxuICogKiBgaWRgIOKAkyBge3N0cmluZ31gIOKAkyBsb2NhbGUgaWQgZm9ybWF0dGVkIGFzIGBsYW5ndWFnZUlkLWNvdW50cnlJZGAgKGUuZy4gYGVuLXVzYClcbiAqL1xuXG52YXIgUEFUSF9NQVRDSCA9IC9eKFtePyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyxcbiAgICBERUZBVUxUX1BPUlRTID0geydodHRwJzogODAsICdodHRwcyc6IDQ0MywgJ2Z0cCc6IDIxfTtcbnZhciAkbG9jYXRpb25NaW5FcnIgPSBtaW5FcnIoJyRsb2NhdGlvbicpO1xuXG5cbi8qKlxuICogRW5jb2RlIHBhdGggdXNpbmcgZW5jb2RlVXJpU2VnbWVudCwgaWdub3JpbmcgZm9yd2FyZCBzbGFzaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBlbmNvZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcvJyksXG4gICAgICBpID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBzZWdtZW50c1tpXSA9IGVuY29kZVVyaVNlZ21lbnQoc2VnbWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJy8nKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBYnNvbHV0ZVVybChhYnNvbHV0ZVVybCwgbG9jYXRpb25PYmopIHtcbiAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUoYWJzb2x1dGVVcmwpO1xuXG4gIGxvY2F0aW9uT2JqLiQkcHJvdG9jb2wgPSBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIGxvY2F0aW9uT2JqLiQkaG9zdCA9IHBhcnNlZFVybC5ob3N0bmFtZTtcbiAgbG9jYXRpb25PYmouJCRwb3J0ID0gdG9JbnQocGFyc2VkVXJsLnBvcnQpIHx8IERFRkFVTFRfUE9SVFNbcGFyc2VkVXJsLnByb3RvY29sXSB8fCBudWxsO1xufVxuXG52YXIgRE9VQkxFX1NMQVNIX1JFR0VYID0gL15cXHMqW1xcXFwvXXsyLH0vO1xuZnVuY3Rpb24gcGFyc2VBcHBVcmwodXJsLCBsb2NhdGlvbk9iaikge1xuXG4gIGlmIChET1VCTEVfU0xBU0hfUkVHRVgudGVzdCh1cmwpKSB7XG4gICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdiYWRwYXRoJywgJ0ludmFsaWQgdXJsIFwiezB9XCIuJywgdXJsKTtcbiAgfVxuXG4gIHZhciBwcmVmaXhlZCA9ICh1cmwuY2hhckF0KDApICE9PSAnLycpO1xuICBpZiAocHJlZml4ZWQpIHtcbiAgICB1cmwgPSAnLycgKyB1cmw7XG4gIH1cbiAgdmFyIG1hdGNoID0gdXJsUmVzb2x2ZSh1cmwpO1xuICBsb2NhdGlvbk9iai4kJHBhdGggPSBkZWNvZGVVUklDb21wb25lbnQocHJlZml4ZWQgJiYgbWF0Y2gucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgP1xuICAgICAgbWF0Y2gucGF0aG5hbWUuc3Vic3RyaW5nKDEpIDogbWF0Y2gucGF0aG5hbWUpO1xuICBsb2NhdGlvbk9iai4kJHNlYXJjaCA9IHBhcnNlS2V5VmFsdWUobWF0Y2guc2VhcmNoKTtcbiAgbG9jYXRpb25PYmouJCRoYXNoID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoLmhhc2gpO1xuXG4gIC8vIG1ha2Ugc3VyZSBwYXRoIHN0YXJ0cyB3aXRoICcvJztcbiAgaWYgKGxvY2F0aW9uT2JqLiQkcGF0aCAmJiBsb2NhdGlvbk9iai4kJHBhdGguY2hhckF0KDApICE9PSAnLycpIHtcbiAgICBsb2NhdGlvbk9iai4kJHBhdGggPSAnLycgKyBsb2NhdGlvbk9iai4kJHBhdGg7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRzV2l0aChzdHIsIHNlYXJjaCkge1xuICByZXR1cm4gc3RyLnNsaWNlKDAsIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZXR1cm5zIHRleHQgZnJvbSBgdXJsYCBhZnRlciBgYmFzZWAgb3IgYHVuZGVmaW5lZGAgaWYgaXQgZG9lcyBub3QgYmVnaW4gd2l0aFxuICogICAgICAgICAgICAgICAgICAgdGhlIGV4cGVjdGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gc3RyaXBCYXNlVXJsKGJhc2UsIHVybCkge1xuICBpZiAoc3RhcnRzV2l0aCh1cmwsIGJhc2UpKSB7XG4gICAgcmV0dXJuIHVybC5zdWJzdHIoYmFzZS5sZW5ndGgpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaW5kZXggPT09IC0xID8gdXJsIDogdXJsLnN1YnN0cigwLCBpbmRleCk7XG59XG5cbmZ1bmN0aW9uIHRyaW1FbXB0eUhhc2godXJsKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZSgvKCMuKyl8IyQvLCAnJDEnKTtcbn1cblxuXG5mdW5jdGlvbiBzdHJpcEZpbGUodXJsKSB7XG4gIHJldHVybiB1cmwuc3Vic3RyKDAsIHN0cmlwSGFzaCh1cmwpLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbn1cblxuLyogcmV0dXJuIHRoZSBzZXJ2ZXIgb25seSAoc2NoZW1lOi8vaG9zdDpwb3J0KSAqL1xuZnVuY3Rpb24gc2VydmVyQmFzZSh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoJy8nLCB1cmwuaW5kZXhPZignLy8nKSArIDIpKTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSHRtbDVVcmwgcmVwcmVzZW50cyBhIFVSTFxuICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIEhUTUw1IG1vZGUgaXMgZW5hYmxlZCBhbmQgc3VwcG9ydGVkXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2VOb0ZpbGUgYXBwbGljYXRpb24gYmFzZSBVUkwgc3RyaXBwZWQgb2YgYW55IGZpbGVuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVByZWZpeCBVUkwgcGF0aCBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gTG9jYXRpb25IdG1sNVVybChhcHBCYXNlLCBhcHBCYXNlTm9GaWxlLCBiYXNlUHJlZml4KSB7XG4gIHRoaXMuJCRodG1sNSA9IHRydWU7XG4gIGJhc2VQcmVmaXggPSBiYXNlUHJlZml4IHx8ICcnO1xuICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMpO1xuXG5cbiAgLyoqXG4gICAqIFBhcnNlIGdpdmVuIEhUTUw1IChyZWd1bGFyKSBVUkwgc3RyaW5nIGludG8gcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEhUTUw1IFVSTFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7XG4gICAgdmFyIHBhdGhVcmwgPSBzdHJpcEJhc2VVcmwoYXBwQmFzZU5vRmlsZSwgdXJsKTtcbiAgICBpZiAoIWlzU3RyaW5nKHBhdGhVcmwpKSB7XG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lwdGhwcmZ4JywgJ0ludmFsaWQgdXJsIFwiezB9XCIsIG1pc3NpbmcgcGF0aCBwcmVmaXggXCJ7MX1cIi4nLCB1cmwsXG4gICAgICAgICAgYXBwQmFzZU5vRmlsZSk7XG4gICAgfVxuXG4gICAgcGFyc2VBcHBVcmwocGF0aFVybCwgdGhpcyk7XG5cbiAgICBpZiAoIXRoaXMuJCRwYXRoKSB7XG4gICAgICB0aGlzLiQkcGF0aCA9ICcvJztcbiAgICB9XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wb3NlIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2VOb0ZpbGUgKyB0aGlzLiQkdXJsLnN1YnN0cigxKTsgLy8gZmlyc3QgY2hhciBpcyBhbHdheXMgJy8nXG5cbiAgICB0aGlzLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24gPSB0cnVlO1xuICB9O1xuXG4gIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHtcbiAgICBpZiAocmVsSHJlZiAmJiByZWxIcmVmWzBdID09PSAnIycpIHtcbiAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgbGlua3MgdG8gaGFzaCBmcmFnbWVudHM6XG4gICAgICAvLyBrZWVwIHRoZSBvbGQgdXJsIGFuZCBvbmx5IHJlcGxhY2UgdGhlIGhhc2ggZnJhZ21lbnRcbiAgICAgIHRoaXMuaGFzaChyZWxIcmVmLnNsaWNlKDEpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgYXBwVXJsLCBwcmV2QXBwVXJsO1xuICAgIHZhciByZXdyaXR0ZW5Vcmw7XG5cblxuICAgIGlmIChpc0RlZmluZWQoYXBwVXJsID0gc3RyaXBCYXNlVXJsKGFwcEJhc2UsIHVybCkpKSB7XG4gICAgICBwcmV2QXBwVXJsID0gYXBwVXJsO1xuICAgICAgaWYgKGJhc2VQcmVmaXggJiYgaXNEZWZpbmVkKGFwcFVybCA9IHN0cmlwQmFzZVVybChiYXNlUHJlZml4LCBhcHBVcmwpKSkge1xuICAgICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlICsgKHN0cmlwQmFzZVVybCgnLycsIGFwcFVybCkgfHwgYXBwVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2UgKyBwcmV2QXBwVXJsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKGFwcFVybCA9IHN0cmlwQmFzZVVybChhcHBCYXNlTm9GaWxlLCB1cmwpKSkge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZSArIGFwcFVybDtcbiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT09IHVybCArICcvJykge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICB9XG4gICAgaWYgKHJld3JpdHRlblVybCkge1xuICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgfVxuICAgIHJldHVybiAhIXJld3JpdHRlblVybDtcbiAgfTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyBVUkxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBkZXZlbG9wZXIgZG9lc24ndCBvcHQgaW50byBodG1sNSBtb2RlLlxuICogSXQgYWxzbyBzZXJ2ZXMgYXMgdGhlIGJhc2UgY2xhc3MgZm9yIGh0bWw1IG1vZGUgZmFsbGJhY2sgb24gbGVnYWN5IGJyb3dzZXJzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlTm9GaWxlIGFwcGxpY2F0aW9uIGJhc2UgVVJMIHN0cmlwcGVkIG9mIGFueSBmaWxlbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4XG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdVcmwoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgaGFzaFByZWZpeCkge1xuXG4gIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcyk7XG5cblxuICAvKipcbiAgICogUGFyc2UgZ2l2ZW4gaGFzaGJhbmcgVVJMIGludG8gcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEhhc2hiYW5nIFVSTFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7XG4gICAgdmFyIHdpdGhvdXRCYXNlVXJsID0gc3RyaXBCYXNlVXJsKGFwcEJhc2UsIHVybCkgfHwgc3RyaXBCYXNlVXJsKGFwcEJhc2VOb0ZpbGUsIHVybCk7XG4gICAgdmFyIHdpdGhvdXRIYXNoVXJsO1xuXG4gICAgaWYgKCFpc1VuZGVmaW5lZCh3aXRob3V0QmFzZVVybCkgJiYgd2l0aG91dEJhc2VVcmwuY2hhckF0KDApID09PSAnIycpIHtcblxuICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIFVSTCBzdGFydHMgd2l0aCBhIGhhc2ggc28gd2UgaGF2ZVxuICAgICAgLy8gZ290IGVpdGhlciBhIGhhc2hiYW5nIHBhdGggb3IgYSBwbGFpbiBoYXNoIGZyYWdtZW50XG4gICAgICB3aXRob3V0SGFzaFVybCA9IHN0cmlwQmFzZVVybChoYXNoUHJlZml4LCB3aXRob3V0QmFzZVVybCk7XG4gICAgICBpZiAoaXNVbmRlZmluZWQod2l0aG91dEhhc2hVcmwpKSB7XG4gICAgICAgIC8vIFRoZXJlIHdhcyBubyBoYXNoYmFuZyBwcmVmaXggc28gd2UganVzdCBoYXZlIGEgaGFzaCBmcmFnbWVudFxuICAgICAgICB3aXRob3V0SGFzaFVybCA9IHdpdGhvdXRCYXNlVXJsO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZXJlIHdhcyBubyBoYXNoYmFuZyBwYXRoIG5vciBoYXNoIGZyYWdtZW50OlxuICAgICAgLy8gSWYgd2UgYXJlIGluIEhUTUw1IG1vZGUgd2UgdXNlIHdoYXQgaXMgbGVmdCBhcyB0aGUgcGF0aDtcbiAgICAgIC8vIE90aGVyd2lzZSB3ZSBpZ25vcmUgd2hhdCBpcyBsZWZ0XG4gICAgICBpZiAodGhpcy4kJGh0bWw1KSB7XG4gICAgICAgIHdpdGhvdXRIYXNoVXJsID0gd2l0aG91dEJhc2VVcmw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aXRob3V0SGFzaFVybCA9ICcnO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQod2l0aG91dEJhc2VVcmwpKSB7XG4gICAgICAgICAgYXBwQmFzZSA9IHVybDtcbiAgICAgICAgICAvKiogQHR5cGUgez99ICovICh0aGlzKS5yZXBsYWNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZUFwcFVybCh3aXRob3V0SGFzaFVybCwgdGhpcyk7XG5cbiAgICB0aGlzLiQkcGF0aCA9IHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUodGhpcy4kJHBhdGgsIHdpdGhvdXRIYXNoVXJsLCBhcHBCYXNlKTtcblxuICAgIHRoaXMuJCRjb21wb3NlKCk7XG5cbiAgICAvKlxuICAgICAqIEluIFdpbmRvd3MsIG9uIGFuIGFuY2hvciBub2RlIG9uIGRvY3VtZW50cyBsb2FkZWQgZnJvbVxuICAgICAqIHRoZSBmaWxlc3lzdGVtLCB0aGUgYnJvd3NlciB3aWxsIHJldHVybiBhIHBhdGhuYW1lXG4gICAgICogcHJlZml4ZWQgd2l0aCB0aGUgZHJpdmUgbmFtZSAoJy9DOi9wYXRoJykgd2hlbiBhXG4gICAgICogcGF0aG5hbWUgd2l0aG91dCBhIGRyaXZlIGlzIHNldDpcbiAgICAgKiAgKiBhLnNldEF0dHJpYnV0ZSgnaHJlZicsICcvZm9vJylcbiAgICAgKiAgICogYS5wYXRobmFtZSA9PT0gJy9DOi9mb28nIC8vdHJ1ZVxuICAgICAqXG4gICAgICogSW5zaWRlIG9mIEFuZ3VsYXIsIHdlJ3JlIGFsd2F5cyB1c2luZyBwYXRobmFtZXMgdGhhdFxuICAgICAqIGRvIG5vdCBpbmNsdWRlIGRyaXZlIG5hbWVzIGZvciByb3V0aW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUocGF0aCwgdXJsLCBiYXNlKSB7XG4gICAgICAvKlxuICAgICAgTWF0Y2hlcyBwYXRocyBmb3IgZmlsZSBwcm90b2NvbCBvbiB3aW5kb3dzLFxuICAgICAgc3VjaCBhcyAvQzovZm9vL2JhciwgYW5kIGNhcHR1cmVzIG9ubHkgL2Zvby9iYXIuXG4gICAgICAqL1xuICAgICAgdmFyIHdpbmRvd3NGaWxlUGF0aEV4cCA9IC9eXFwvW0EtWl06KFxcLy4qKS87XG5cbiAgICAgIHZhciBmaXJzdFBhdGhTZWdtZW50TWF0Y2g7XG5cbiAgICAgIC8vR2V0IHRoZSByZWxhdGl2ZSBwYXRoIGZyb20gdGhlIGlucHV0IFVSTC5cbiAgICAgIGlmIChzdGFydHNXaXRoKHVybCwgYmFzZSkpIHtcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoYmFzZSwgJycpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgaW5wdXQgVVJMIGludGVudGlvbmFsbHkgY29udGFpbnMgYSBmaXJzdCBwYXRoIHNlZ21lbnQgdGhhdCBlbmRzIHdpdGggYSBjb2xvbi5cbiAgICAgIGlmICh3aW5kb3dzRmlsZVBhdGhFeHAuZXhlYyh1cmwpKSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfVxuXG4gICAgICBmaXJzdFBhdGhTZWdtZW50TWF0Y2ggPSB3aW5kb3dzRmlsZVBhdGhFeHAuZXhlYyhwYXRoKTtcbiAgICAgIHJldHVybiBmaXJzdFBhdGhTZWdtZW50TWF0Y2ggPyBmaXJzdFBhdGhTZWdtZW50TWF0Y2hbMV0gOiBwYXRoO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ29tcG9zZSBoYXNoYmFuZyBVUkwgYW5kIHVwZGF0ZSBgYWJzVXJsYCBwcm9wZXJ0eVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJGNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSxcbiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcblxuICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoO1xuICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlICsgKHRoaXMuJCR1cmwgPyBoYXNoUHJlZml4ICsgdGhpcy4kJHVybCA6ICcnKTtcblxuICAgIHRoaXMuJCR1cmxVcGRhdGVkQnlMb2NhdGlvbiA9IHRydWU7XG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChzdHJpcEhhc2goYXBwQmFzZSkgPT09IHN0cmlwSGFzaCh1cmwpKSB7XG4gICAgICB0aGlzLiQkcGFyc2UodXJsKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgVVJMXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gaHRtbDUgaGlzdG9yeSBhcGkgaXMgZW5hYmxlZCBidXQgdGhlIGJyb3dzZXJcbiAqIGRvZXMgbm90IHN1cHBvcnQgaXQuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2VOb0ZpbGUgYXBwbGljYXRpb24gYmFzZSBVUkwgc3RyaXBwZWQgb2YgYW55IGZpbGVuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgaGFzaFByZWZpeCkge1xuICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xuICBMb2NhdGlvbkhhc2hiYW5nVXJsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBsaW5rcyB0byBoYXNoIGZyYWdtZW50czpcbiAgICAgIC8vIGtlZXAgdGhlIG9sZCB1cmwgYW5kIG9ubHkgcmVwbGFjZSB0aGUgaGFzaCBmcmFnbWVudFxuICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJld3JpdHRlblVybDtcbiAgICB2YXIgYXBwVXJsO1xuXG4gICAgaWYgKGFwcEJhc2UgPT09IHN0cmlwSGFzaCh1cmwpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSB1cmw7XG4gICAgfSBlbHNlIGlmICgoYXBwVXJsID0gc3RyaXBCYXNlVXJsKGFwcEJhc2VOb0ZpbGUsIHVybCkpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIGFwcFVybDtcbiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT09IHVybCArICcvJykge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICB9XG4gICAgaWYgKHJld3JpdHRlblVybCkge1xuICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgfVxuICAgIHJldHVybiAhIXJld3JpdHRlblVybDtcbiAgfTtcblxuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgLy8gaW5jbHVkZSBoYXNoUHJlZml4IGluICQkYWJzVXJsIHdoZW4gJCR1cmwgaXMgZW1wdHkgc28gSUU5IGRvZXMgbm90IHJlbG9hZCBwYWdlIGJlY2F1c2Ugb2YgcmVtb3ZhbCBvZiAnIydcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArIGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsO1xuXG4gICAgdGhpcy4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uID0gdHJ1ZTtcbiAgfTtcblxufVxuXG5cbnZhciBsb2NhdGlvblByb3RvdHlwZSA9IHtcblxuICAvKipcbiAgICogRW5zdXJlIGFic29sdXRlIFVSTCBpcyBpbml0aWFsaXplZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkYWJzVXJsOicnLFxuXG4gIC8qKlxuICAgKiBBcmUgd2UgaW4gaHRtbDUgbW9kZT9cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkaHRtbDU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBIYXMgYW55IGNoYW5nZSBiZWVuIHJlcGxhY2luZz9cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkcmVwbGFjZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI2Fic1VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBmdWxsIFVSTCByZXByZXNlbnRhdGlvbiB3aXRoIGFsbCBzZWdtZW50cyBlbmNvZGVkIGFjY29yZGluZyB0byBydWxlcyBzcGVjaWZpZWQgaW5cbiAgICogW1JGQyAzOTg2XShodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCkuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgYWJzVXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgKiAvLyA9PiBcImh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gZnVsbCBVUkxcbiAgICovXG4gIGFic1VybDogbG9jYXRpb25HZXR0ZXIoJyQkYWJzVXJsJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gVVJMIChlLmcuIGAvcGF0aD9hPWIjaGFzaGApIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHBhdGgsIHNlYXJjaCBhbmQgaGFzaCwgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciB1cmwgPSAkbG9jYXRpb24udXJsKCk7XG4gICAqIC8vID0+IFwiL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdXJsIE5ldyBVUkwgd2l0aG91dCBiYXNlIHByZWZpeCAoZS5nLiBgL3BhdGg/YT1iI2hhc2hgKVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgdXJsOiBmdW5jdGlvbih1cmwpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodXJsKSkge1xuICAgICAgcmV0dXJuIHRoaXMuJCR1cmw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoID0gUEFUSF9NQVRDSC5leGVjKHVybCk7XG4gICAgaWYgKG1hdGNoWzFdIHx8IHVybCA9PT0gJycpIHRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pKTtcbiAgICBpZiAobWF0Y2hbMl0gfHwgbWF0Y2hbMV0gfHwgdXJsID09PSAnJykgdGhpcy5zZWFyY2gobWF0Y2hbM10gfHwgJycpO1xuICAgIHRoaXMuaGFzaChtYXRjaFs1XSB8fCAnJyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcHJvdG9jb2xcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gcHJvdG9jb2wgb2YgY3VycmVudCBVUkwuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgcHJvdG9jb2wgPSAkbG9jYXRpb24ucHJvdG9jb2woKTtcbiAgICogLy8gPT4gXCJodHRwXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcHJvdG9jb2wgb2YgY3VycmVudCBVUkxcbiAgICovXG4gIHByb3RvY29sOiBsb2NhdGlvbkdldHRlcignJCRwcm90b2NvbCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNob3N0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIGhvc3Qgb2YgY3VycmVudCBVUkwuXG4gICAqXG4gICAqIE5vdGU6IGNvbXBhcmVkIHRvIHRoZSBub24tYW5ndWxhciB2ZXJzaW9uIGBsb2NhdGlvbi5ob3N0YCB3aGljaCByZXR1cm5zIGBob3N0bmFtZTpwb3J0YCwgdGhpcyByZXR1cm5zIHRoZSBgaG9zdG5hbWVgIHBvcnRpb24gb25seS5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBob3N0ID0gJGxvY2F0aW9uLmhvc3QoKTtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbVwiXG4gICAqXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vdXNlcjpwYXNzd29yZEBleGFtcGxlLmNvbTo4MDgwLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogaG9zdCA9ICRsb2NhdGlvbi5ob3N0KCk7XG4gICAqIC8vID0+IFwiZXhhbXBsZS5jb21cIlxuICAgKiBob3N0ID0gbG9jYXRpb24uaG9zdDtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbTo4MDgwXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gaG9zdCBvZiBjdXJyZW50IFVSTC5cbiAgICovXG4gIGhvc3Q6IGxvY2F0aW9uR2V0dGVyKCckJGhvc3QnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcG9ydFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBwb3J0IG9mIGN1cnJlbnQgVVJMLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHBvcnQgPSAkbG9jYXRpb24ucG9ydCgpO1xuICAgKiAvLyA9PiA4MFxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBwb3J0XG4gICAqL1xuICBwb3J0OiBsb2NhdGlvbkdldHRlcignJCRwb3J0JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3BhdGhcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHBhdGggb2YgY3VycmVudCBVUkwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgcGF0aCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKiBOb3RlOiBQYXRoIHNob3VsZCBhbHdheXMgYmVnaW4gd2l0aCBmb3J3YXJkIHNsYXNoICgvKSwgdGhpcyBtZXRob2Qgd2lsbCBhZGQgdGhlIGZvcndhcmQgc2xhc2hcbiAgICogaWYgaXQgaXMgbWlzc2luZy5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBwYXRoID0gJGxvY2F0aW9uLnBhdGgoKTtcbiAgICogLy8gPT4gXCIvc29tZS9wYXRoXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gcGF0aCBOZXcgcGF0aFxuICAgKiBAcmV0dXJuIHsoc3RyaW5nfG9iamVjdCl9IHBhdGggaWYgY2FsbGVkIHdpdGggbm8gcGFyYW1ldGVycywgb3IgYCRsb2NhdGlvbmAgaWYgY2FsbGVkIHdpdGggYSBwYXJhbWV0ZXJcbiAgICovXG4gIHBhdGg6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJHBhdGgnLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgcGF0aCA9IHBhdGggIT09IG51bGwgPyBwYXRoLnRvU3RyaW5nKCkgOiAnJztcbiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xuICB9KSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jc2VhcmNoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBzZWFyY2ggcGFydCAoYXMgb2JqZWN0KSBvZiBjdXJyZW50IFVSTCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSBzZWFyY2ggcGFydCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHNlYXJjaE9iamVjdCA9ICRsb2NhdGlvbi5zZWFyY2goKTtcbiAgICogLy8gPT4ge2ZvbzogJ2JhcicsIGJhejogJ3hveG8nfVxuICAgKlxuICAgKiAvLyBzZXQgZm9vIHRvICd5aXBlZSdcbiAgICogJGxvY2F0aW9uLnNlYXJjaCgnZm9vJywgJ3lpcGVlJyk7XG4gICAqIC8vICRsb2NhdGlvbi5zZWFyY2goKSA9PiB7Zm9vOiAneWlwZWUnLCBiYXo6ICd4b3hvJ31cbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdC48c3RyaW5nPnxPYmplY3QuPEFycmF5LjxzdHJpbmc+Pn0gc2VhcmNoIE5ldyBzZWFyY2ggcGFyYW1zIC0gc3RyaW5nIG9yXG4gICAqIGhhc2ggb2JqZWN0LlxuICAgKlxuICAgKiBXaGVuIGNhbGxlZCB3aXRoIGEgc2luZ2xlIGFyZ3VtZW50IHRoZSBtZXRob2QgYWN0cyBhcyBhIHNldHRlciwgc2V0dGluZyB0aGUgYHNlYXJjaGAgY29tcG9uZW50XG4gICAqIG9mIGAkbG9jYXRpb25gIHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG4gICAqXG4gICAqIElmIHRoZSBhcmd1bWVudCBpcyBhIGhhc2ggb2JqZWN0IGNvbnRhaW5pbmcgYW4gYXJyYXkgb2YgdmFsdWVzLCB0aGVzZSB2YWx1ZXMgd2lsbCBiZSBlbmNvZGVkXG4gICAqIGFzIGR1cGxpY2F0ZSBzZWFyY2ggcGFyYW1ldGVycyBpbiB0aGUgVVJMLlxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8TnVtYmVyfEFycmF5PHN0cmluZz58Ym9vbGVhbik9fSBwYXJhbVZhbHVlIElmIGBzZWFyY2hgIGlzIGEgc3RyaW5nIG9yIG51bWJlciwgdGhlbiBgcGFyYW1WYWx1ZWBcbiAgICogd2lsbCBvdmVycmlkZSBvbmx5IGEgc2luZ2xlIHNlYXJjaCBwcm9wZXJ0eS5cbiAgICpcbiAgICogSWYgYHBhcmFtVmFsdWVgIGlzIGFuIGFycmF5LCBpdCB3aWxsIG92ZXJyaWRlIHRoZSBwcm9wZXJ0eSBvZiB0aGUgYHNlYXJjaGAgY29tcG9uZW50IG9mXG4gICAqIGAkbG9jYXRpb25gIHNwZWNpZmllZCB2aWEgdGhlIGZpcnN0IGFyZ3VtZW50LlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYG51bGxgLCB0aGUgcHJvcGVydHkgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQgd2lsbCBiZSBkZWxldGVkLlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYHRydWVgLCB0aGUgcHJvcGVydHkgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQgd2lsbCBiZSBhZGRlZCB3aXRoIG5vXG4gICAqIHZhbHVlIG5vciB0cmFpbGluZyBlcXVhbCBzaWduLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IElmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIHRoZSBwYXJzZWQgYHNlYXJjaGAgb2JqZWN0LiBJZiBjYWxsZWQgd2l0aFxuICAgKiBvbmUgb3IgbW9yZSBhcmd1bWVudHMgcmV0dXJucyBgJGxvY2F0aW9uYCBvYmplY3QgaXRzZWxmLlxuICAgKi9cbiAgc2VhcmNoOiBmdW5jdGlvbihzZWFyY2gsIHBhcmFtVmFsdWUpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIHRoaXMuJCRzZWFyY2g7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChpc1N0cmluZyhzZWFyY2gpIHx8IGlzTnVtYmVyKHNlYXJjaCkpIHtcbiAgICAgICAgICBzZWFyY2ggPSBzZWFyY2gudG9TdHJpbmcoKTtcbiAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShzZWFyY2gpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNlYXJjaCkpIHtcbiAgICAgICAgICBzZWFyY2ggPSBjb3B5KHNlYXJjaCwge30pO1xuICAgICAgICAgIC8vIHJlbW92ZSBvYmplY3QgdW5kZWZpbmVkIG9yIG51bGwgcHJvcGVydGllc1xuICAgICAgICAgIGZvckVhY2goc2VhcmNoLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIHNlYXJjaFtrZXldO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGhpcy4kJHNlYXJjaCA9IHNlYXJjaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lzcmNoYXJnJyxcbiAgICAgICAgICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgYCRsb2NhdGlvbiNzZWFyY2goKWAgY2FsbCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChwYXJhbVZhbHVlKSB8fCBwYXJhbVZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuJCRzZWFyY2hbc2VhcmNoXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiQkc2VhcmNoW3NlYXJjaF0gPSBwYXJhbVZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jaGFzaFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm5zIHRoZSBoYXNoIGZyYWdtZW50IHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIENoYW5nZXMgdGhlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aCBhIHBhcmFtZXRlciBhbmQgcmV0dXJucyBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvI2hhc2hWYWx1ZVxuICAgKiB2YXIgaGFzaCA9ICRsb2NhdGlvbi5oYXNoKCk7XG4gICAqIC8vID0+IFwiaGFzaFZhbHVlXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gaGFzaCBOZXcgaGFzaCBmcmFnbWVudFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhhc2hcbiAgICovXG4gIGhhc2g6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJGhhc2gnLCBmdW5jdGlvbihoYXNoKSB7XG4gICAgcmV0dXJuIGhhc2ggIT09IG51bGwgPyBoYXNoLnRvU3RyaW5nKCkgOiAnJztcbiAgfSksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3JlcGxhY2VcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElmIGNhbGxlZCwgYWxsIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGR1cmluZyB0aGUgY3VycmVudCBgJGRpZ2VzdGAgd2lsbCByZXBsYWNlIHRoZSBjdXJyZW50IGhpc3RvcnlcbiAgICogcmVjb3JkLCBpbnN0ZWFkIG9mIGFkZGluZyBhIG5ldyBvbmUuXG4gICAqL1xuICByZXBsYWNlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkcmVwbGFjZSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbmZvckVhY2goW0xvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsLCBMb2NhdGlvbkhhc2hiYW5nVXJsLCBMb2NhdGlvbkh0bWw1VXJsXSwgZnVuY3Rpb24oTG9jYXRpb24pIHtcbiAgTG9jYXRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShsb2NhdGlvblByb3RvdHlwZSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3N0YXRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiB0aGUgaGlzdG9yeSBzdGF0ZSBvYmplY3Qgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgdGhlIGhpc3Rvcnkgc3RhdGUgb2JqZWN0IHdoZW4gY2FsbGVkIHdpdGggb25lIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKiBUaGUgc3RhdGUgb2JqZWN0IGlzIGxhdGVyIHBhc3NlZCB0byBgcHVzaFN0YXRlYCBvciBgcmVwbGFjZVN0YXRlYC5cbiAgICpcbiAgICogTk9URTogVGhpcyBtZXRob2QgaXMgc3VwcG9ydGVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgb25seSBpbiBicm93c2VycyBzdXBwb3J0aW5nXG4gICAqIHRoZSBIVE1MNSBIaXN0b3J5IEFQSSAoaS5lLiBtZXRob2RzIGBwdXNoU3RhdGVgIGFuZCBgcmVwbGFjZVN0YXRlYCkuIElmIHlvdSBuZWVkIHRvIHN1cHBvcnRcbiAgICogb2xkZXIgYnJvd3NlcnMgKGxpa2UgSUU5IG9yIEFuZHJvaWQgPCA0LjApLCBkb24ndCB1c2UgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gc3RhdGUgU3RhdGUgb2JqZWN0IGZvciBwdXNoU3RhdGUgb3IgcmVwbGFjZVN0YXRlXG4gICAqIEByZXR1cm4ge29iamVjdH0gc3RhdGVcbiAgICovXG4gIExvY2F0aW9uLnByb3RvdHlwZS5zdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kJHN0YXRlO1xuICAgIH1cblxuICAgIGlmIChMb2NhdGlvbiAhPT0gTG9jYXRpb25IdG1sNVVybCB8fCAhdGhpcy4kJGh0bWw1KSB7XG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ25vc3RhdGUnLCAnSGlzdG9yeSBBUEkgc3RhdGUgc3VwcG9ydCBpcyBhdmFpbGFibGUgb25seSAnICtcbiAgICAgICAgJ2luIEhUTUw1IG1vZGUgYW5kIG9ubHkgaW4gYnJvd3NlcnMgc3VwcG9ydGluZyBIVE1MNSBIaXN0b3J5IEFQSScpO1xuICAgIH1cbiAgICAvLyBUaGUgdXNlciBtaWdodCBtb2RpZnkgYHN0YXRlT2JqZWN0YCBhZnRlciBpbnZva2luZyBgJGxvY2F0aW9uLnN0YXRlKHN0YXRlT2JqZWN0KWBcbiAgICAvLyBidXQgd2UncmUgY2hhbmdpbmcgdGhlICQkc3RhdGUgcmVmZXJlbmNlIHRvICRicm93c2VyLnN0YXRlKCkgZHVyaW5nIHRoZSAkZGlnZXN0XG4gICAgLy8gc28gdGhlIG1vZGlmaWNhdGlvbiB3aW5kb3cgaXMgbmFycm93LlxuICAgIHRoaXMuJCRzdGF0ZSA9IGlzVW5kZWZpbmVkKHN0YXRlKSA/IG51bGwgOiBzdGF0ZTtcbiAgICB0aGlzLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24gPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuXG5mdW5jdGlvbiBsb2NhdGlvbkdldHRlcihwcm9wZXJ0eSkge1xuICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTtcbiAgfTtcbn1cblxuXG5mdW5jdGlvbiBsb2NhdGlvbkdldHRlclNldHRlcihwcm9wZXJ0eSwgcHJlcHJvY2Vzcykge1xuICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICAgIH1cblxuICAgIHRoaXNbcHJvcGVydHldID0gcHJlcHJvY2Vzcyh2YWx1ZSk7XG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2NhdGlvblxuICpcbiAqIEByZXF1aXJlcyAkcm9vdEVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSAkbG9jYXRpb24gc2VydmljZSBwYXJzZXMgdGhlIFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciAoYmFzZWQgb24gdGhlXG4gKiBbd2luZG93LmxvY2F0aW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi93aW5kb3cubG9jYXRpb24pKSBhbmQgbWFrZXMgdGhlIFVSTFxuICogYXZhaWxhYmxlIHRvIHlvdXIgYXBwbGljYXRpb24uIENoYW5nZXMgdG8gdGhlIFVSTCBpbiB0aGUgYWRkcmVzcyBiYXIgYXJlIHJlZmxlY3RlZCBpbnRvXG4gKiAkbG9jYXRpb24gc2VydmljZSBhbmQgY2hhbmdlcyB0byAkbG9jYXRpb24gYXJlIHJlZmxlY3RlZCBpbnRvIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLlxuICpcbiAqICoqVGhlICRsb2NhdGlvbiBzZXJ2aWNlOioqXG4gKlxuICogLSBFeHBvc2VzIHRoZSBjdXJyZW50IFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciwgc28geW91IGNhblxuICogICAtIFdhdGNoIGFuZCBvYnNlcnZlIHRoZSBVUkwuXG4gKiAgIC0gQ2hhbmdlIHRoZSBVUkwuXG4gKiAtIFN5bmNocm9uaXplcyB0aGUgVVJMIHdpdGggdGhlIGJyb3dzZXIgd2hlbiB0aGUgdXNlclxuICogICAtIENoYW5nZXMgdGhlIGFkZHJlc3MgYmFyLlxuICogICAtIENsaWNrcyB0aGUgYmFjayBvciBmb3J3YXJkIGJ1dHRvbiAob3IgY2xpY2tzIGEgSGlzdG9yeSBsaW5rKS5cbiAqICAgLSBDbGlja3Mgb24gYSBsaW5rLlxuICogLSBSZXByZXNlbnRzIHRoZSBVUkwgb2JqZWN0IGFzIGEgc2V0IG9mIG1ldGhvZHMgKHByb3RvY29sLCBob3N0LCBwb3J0LCBwYXRoLCBzZWFyY2gsIGhhc2gpLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uIERldmVsb3BlciBHdWlkZTogVXNpbmcgJGxvY2F0aW9ufVxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGUgYCRsb2NhdGlvblByb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBkZWVwIGxpbmtpbmcgcGF0aHMgYXJlIHN0b3JlZC5cbiAqL1xuZnVuY3Rpb24gJExvY2F0aW9uUHJvdmlkZXIoKSB7XG4gIHZhciBoYXNoUHJlZml4ID0gJyEnLFxuICAgICAgaHRtbDVNb2RlID0ge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgcmVxdWlyZUJhc2U6IHRydWUsXG4gICAgICAgIHJld3JpdGVMaW5rczogdHJ1ZVxuICAgICAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNoYXNoUHJlZml4XG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIHByZWZpeCBpcyBgJyEnYC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwcmVmaXggUHJlZml4IGZvciBoYXNoIHBhcnQgKGNvbnRhaW5pbmcgcGF0aCBhbmQgc2VhcmNoKVxuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKi9cbiAgdGhpcy5oYXNoUHJlZml4ID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgaWYgKGlzRGVmaW5lZChwcmVmaXgpKSB7XG4gICAgICBoYXNoUHJlZml4ID0gcHJlZml4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBoYXNoUHJlZml4O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNodG1sNU1vZGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7KGJvb2xlYW58T2JqZWN0KT19IG1vZGUgSWYgYm9vbGVhbiwgc2V0cyBgaHRtbDVNb2RlLmVuYWJsZWRgIHRvIHZhbHVlLlxuICAgKiAgIElmIG9iamVjdCwgc2V0cyBgZW5hYmxlZGAsIGByZXF1aXJlQmFzZWAgYW5kIGByZXdyaXRlTGlua3NgIHRvIHJlc3BlY3RpdmUgdmFsdWVzLiBTdXBwb3J0ZWRcbiAgICogICBwcm9wZXJ0aWVzOlxuICAgKiAgIC0gKiplbmFibGVkKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyAoZGVmYXVsdDogZmFsc2UpIElmIHRydWUsIHdpbGwgcmVseSBvbiBgaGlzdG9yeS5wdXNoU3RhdGVgIHRvXG4gICAqICAgICBjaGFuZ2UgdXJscyB3aGVyZSBzdXBwb3J0ZWQuIFdpbGwgZmFsbCBiYWNrIHRvIGhhc2gtcHJlZml4ZWQgcGF0aHMgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3RcbiAgICogICAgIHN1cHBvcnQgYHB1c2hTdGF0ZWAuXG4gICAqICAgLSAqKnJlcXVpcmVCYXNlKiogLSBge2Jvb2xlYW59YCAtIChkZWZhdWx0OiBgdHJ1ZWApIFdoZW4gaHRtbDVNb2RlIGlzIGVuYWJsZWQsIHNwZWNpZmllc1xuICAgKiAgICAgd2hldGhlciBvciBub3QgYSA8YmFzZT4gdGFnIGlzIHJlcXVpcmVkIHRvIGJlIHByZXNlbnQuIElmIGBlbmFibGVkYCBhbmQgYHJlcXVpcmVCYXNlYCBhcmVcbiAgICogICAgIHRydWUsIGFuZCBhIGJhc2UgdGFnIGlzIG5vdCBwcmVzZW50LCBhbiBlcnJvciB3aWxsIGJlIHRocm93biB3aGVuIGAkbG9jYXRpb25gIGlzIGluamVjdGVkLlxuICAgKiAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uICRsb2NhdGlvbiBndWlkZSBmb3IgbW9yZSBpbmZvcm1hdGlvbn1cbiAgICogICAtICoqcmV3cml0ZUxpbmtzKiogLSBge2Jvb2xlYW58c3RyaW5nfWAgLSAoZGVmYXVsdDogYHRydWVgKSBXaGVuIGh0bWw1TW9kZSBpcyBlbmFibGVkLFxuICAgKiAgICAgZW5hYmxlcy9kaXNhYmxlcyBVUkwgcmV3cml0aW5nIGZvciByZWxhdGl2ZSBsaW5rcy4gSWYgc2V0IHRvIGEgc3RyaW5nLCBVUkwgcmV3cml0aW5nIHdpbGxcbiAgICogICAgIG9ubHkgaGFwcGVuIG9uIGxpbmtzIHdpdGggYW4gYXR0cmlidXRlIHRoYXQgbWF0Y2hlcyB0aGUgZ2l2ZW4gc3RyaW5nLiBGb3IgZXhhbXBsZSwgaWYgc2V0XG4gICAqICAgICB0byBgJ2ludGVybmFsLWxpbmsnYCwgdGhlbiB0aGUgVVJMIHdpbGwgb25seSBiZSByZXdyaXR0ZW4gZm9yIGA8YSBpbnRlcm5hbC1saW5rPmAgbGlua3MuXG4gICAqICAgICBOb3RlIHRoYXQgW2F0dHJpYnV0ZSBuYW1lIG5vcm1hbGl6YXRpb25dKGd1aWRlL2RpcmVjdGl2ZSNub3JtYWxpemF0aW9uKSBkb2VzIG5vdCBhcHBseVxuICAgKiAgICAgaGVyZSwgc28gYCdpbnRlcm5hbExpbmsnYCB3aWxsICoqbm90KiogbWF0Y2ggYCdpbnRlcm5hbC1saW5rJ2AuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGh0bWw1TW9kZSBvYmplY3QgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuaHRtbDVNb2RlID0gZnVuY3Rpb24obW9kZSkge1xuICAgIGlmIChpc0Jvb2xlYW4obW9kZSkpIHtcbiAgICAgIGh0bWw1TW9kZS5lbmFibGVkID0gbW9kZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobW9kZSkpIHtcblxuICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLmVuYWJsZWQpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5lbmFibGVkID0gbW9kZS5lbmFibGVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNCb29sZWFuKG1vZGUucmVxdWlyZUJhc2UpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5yZXF1aXJlQmFzZSA9IG1vZGUucmVxdWlyZUJhc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5yZXdyaXRlTGlua3MpIHx8IGlzU3RyaW5nKG1vZGUucmV3cml0ZUxpbmtzKSkge1xuICAgICAgICBodG1sNU1vZGUucmV3cml0ZUxpbmtzID0gbW9kZS5yZXdyaXRlTGlua3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaHRtbDVNb2RlO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGV2ZW50XG4gICAqIEBuYW1lICRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdGFydFxuICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCcm9hZGNhc3RlZCBiZWZvcmUgYSBVUkwgd2lsbCBjaGFuZ2UuXG4gICAqXG4gICAqIFRoaXMgY2hhbmdlIGNhbiBiZSBwcmV2ZW50ZWQgYnkgY2FsbGluZ1xuICAgKiBgcHJldmVudERlZmF1bHRgIG1ldGhvZCBvZiB0aGUgZXZlbnQuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGZvciBtb3JlXG4gICAqIGRldGFpbHMgYWJvdXQgZXZlbnQgb2JqZWN0LiBVcG9uIHN1Y2Nlc3NmdWwgY2hhbmdlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcyAkbG9jYXRpb25DaGFuZ2VTdWNjZXNzfSBpcyBmaXJlZC5cbiAgICpcbiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBldmVudFxuICAgKiBAbmFtZSAkbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc1xuICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCcm9hZGNhc3RlZCBhZnRlciBhIFVSTCB3YXMgY2hhbmdlZC5cbiAgICpcbiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICovXG5cbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRzbmlmZmVyJywgJyRyb290RWxlbWVudCcsICckd2luZG93JyxcbiAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRicm93c2VyLCAkc25pZmZlciwgJHJvb3RFbGVtZW50LCAkd2luZG93KSB7XG4gICAgdmFyICRsb2NhdGlvbixcbiAgICAgICAgTG9jYXRpb25Nb2RlLFxuICAgICAgICBiYXNlSHJlZiA9ICRicm93c2VyLmJhc2VIcmVmKCksIC8vIGlmIGJhc2VbaHJlZl0gaXMgdW5kZWZpbmVkLCBpdCBkZWZhdWx0cyB0byAnJ1xuICAgICAgICBpbml0aWFsVXJsID0gJGJyb3dzZXIudXJsKCksXG4gICAgICAgIGFwcEJhc2U7XG5cbiAgICBpZiAoaHRtbDVNb2RlLmVuYWJsZWQpIHtcbiAgICAgIGlmICghYmFzZUhyZWYgJiYgaHRtbDVNb2RlLnJlcXVpcmVCYXNlKSB7XG4gICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignbm9iYXNlJyxcbiAgICAgICAgICAnJGxvY2F0aW9uIGluIEhUTUw1IG1vZGUgcmVxdWlyZXMgYSA8YmFzZT4gdGFnIHRvIGJlIHByZXNlbnQhJyk7XG4gICAgICB9XG4gICAgICBhcHBCYXNlID0gc2VydmVyQmFzZShpbml0aWFsVXJsKSArIChiYXNlSHJlZiB8fCAnLycpO1xuICAgICAgTG9jYXRpb25Nb2RlID0gJHNuaWZmZXIuaGlzdG9yeSA/IExvY2F0aW9uSHRtbDVVcmwgOiBMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwQmFzZSA9IHN0cmlwSGFzaChpbml0aWFsVXJsKTtcbiAgICAgIExvY2F0aW9uTW9kZSA9IExvY2F0aW9uSGFzaGJhbmdVcmw7XG4gICAgfVxuICAgIHZhciBhcHBCYXNlTm9GaWxlID0gc3RyaXBGaWxlKGFwcEJhc2UpO1xuXG4gICAgJGxvY2F0aW9uID0gbmV3IExvY2F0aW9uTW9kZShhcHBCYXNlLCBhcHBCYXNlTm9GaWxlLCAnIycgKyBoYXNoUHJlZml4KTtcbiAgICAkbG9jYXRpb24uJCRwYXJzZUxpbmtVcmwoaW5pdGlhbFVybCwgaW5pdGlhbFVybCk7XG5cbiAgICAkbG9jYXRpb24uJCRzdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG5cbiAgICB2YXIgSUdOT1JFX1VSSV9SRUdFWFAgPSAvXlxccyooamF2YXNjcmlwdHxtYWlsdG8pOi9pO1xuXG4gICAgZnVuY3Rpb24gc2V0QnJvd3NlclVybFdpdGhGYWxsYmFjayh1cmwsIHJlcGxhY2UsIHN0YXRlKSB7XG4gICAgICB2YXIgb2xkVXJsID0gJGxvY2F0aW9uLnVybCgpO1xuICAgICAgdmFyIG9sZFN0YXRlID0gJGxvY2F0aW9uLiQkc3RhdGU7XG4gICAgICB0cnkge1xuICAgICAgICAkYnJvd3Nlci51cmwodXJsLCByZXBsYWNlLCBzdGF0ZSk7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlICRsb2NhdGlvbi5zdGF0ZSgpIHJldHVybnMgcmVmZXJlbnRpYWxseSBpZGVudGljYWwgKG5vdCBqdXN0IGRlZXBseSBlcXVhbClcbiAgICAgICAgLy8gc3RhdGUgb2JqZWN0OyB0aGlzIG1ha2VzIHBvc3NpYmxlIHF1aWNrIGNoZWNraW5nIGlmIHRoZSBzdGF0ZSBjaGFuZ2VkIGluIHRoZSBkaWdlc3RcbiAgICAgICAgLy8gbG9vcC4gQ2hlY2tpbmcgZGVlcCBlcXVhbGl0eSB3b3VsZCBiZSB0b28gZXhwZW5zaXZlLlxuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFJlc3RvcmUgb2xkIHZhbHVlcyBpZiBwdXNoU3RhdGUgZmFpbHNcbiAgICAgICAgJGxvY2F0aW9uLnVybChvbGRVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuXG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHJvb3RFbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgcmV3cml0ZUxpbmtzID0gaHRtbDVNb2RlLnJld3JpdGVMaW5rcztcbiAgICAgIC8vIFRPRE8odm9qdGEpOiByZXdyaXRlIGxpbmsgd2hlbiBvcGVuaW5nIGluIG5ldyB0YWIvd2luZG93IChpbiBsZWdhY3kgYnJvd3NlcilcbiAgICAgIC8vIGN1cnJlbnRseSB3ZSBvcGVuIG5pY2UgdXJsIGxpbmsgYW5kIHJlZGlyZWN0IHRoZW5cblxuICAgICAgaWYgKCFyZXdyaXRlTGlua3MgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LndoaWNoID09PSAyIHx8IGV2ZW50LmJ1dHRvbiA9PT0gMikgcmV0dXJuO1xuXG4gICAgICB2YXIgZWxtID0ganFMaXRlKGV2ZW50LnRhcmdldCk7XG5cbiAgICAgIC8vIHRyYXZlcnNlIHRoZSBET00gdXAgdG8gZmluZCBmaXJzdCBBIHRhZ1xuICAgICAgd2hpbGUgKG5vZGVOYW1lXyhlbG1bMF0pICE9PSAnYScpIHtcbiAgICAgICAgLy8gaWdub3JlIHJld3JpdGluZyBpZiBubyBBIHRhZyAocmVhY2hlZCByb290IGVsZW1lbnQsIG9yIG5vIHBhcmVudCAtIHJlbW92ZWQgZnJvbSBkb2N1bWVudClcbiAgICAgICAgaWYgKGVsbVswXSA9PT0gJHJvb3RFbGVtZW50WzBdIHx8ICEoZWxtID0gZWxtLnBhcmVudCgpKVswXSkgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTdHJpbmcocmV3cml0ZUxpbmtzKSAmJiBpc1VuZGVmaW5lZChlbG0uYXR0cihyZXdyaXRlTGlua3MpKSkgcmV0dXJuO1xuXG4gICAgICB2YXIgYWJzSHJlZiA9IGVsbS5wcm9wKCdocmVmJyk7XG4gICAgICAvLyBnZXQgdGhlIGFjdHVhbCBocmVmIGF0dHJpYnV0ZSAtIHNlZVxuICAgICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2RkMzQ3MTQ4KHY9dnMuODUpLmFzcHhcbiAgICAgIHZhciByZWxIcmVmID0gZWxtLmF0dHIoJ2hyZWYnKSB8fCBlbG0uYXR0cigneGxpbms6aHJlZicpO1xuXG4gICAgICBpZiAoaXNPYmplY3QoYWJzSHJlZikgJiYgYWJzSHJlZi50b1N0cmluZygpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nKSB7XG4gICAgICAgIC8vIFNWR0FuaW1hdGVkU3RyaW5nLmFuaW1WYWwgc2hvdWxkIGJlIGlkZW50aWNhbCB0byBTVkdBbmltYXRlZFN0cmluZy5iYXNlVmFsLCB1bmxlc3MgZHVyaW5nXG4gICAgICAgIC8vIGFuIGFuaW1hdGlvbi5cbiAgICAgICAgYWJzSHJlZiA9IHVybFJlc29sdmUoYWJzSHJlZi5hbmltVmFsKS5ocmVmO1xuICAgICAgfVxuXG4gICAgICAvLyBJZ25vcmUgd2hlbiB1cmwgaXMgc3RhcnRlZCB3aXRoIGphdmFzY3JpcHQ6IG9yIG1haWx0bzpcbiAgICAgIGlmIChJR05PUkVfVVJJX1JFR0VYUC50ZXN0KGFic0hyZWYpKSByZXR1cm47XG5cbiAgICAgIGlmIChhYnNIcmVmICYmICFlbG0uYXR0cigndGFyZ2V0JykgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIGlmICgkbG9jYXRpb24uJCRwYXJzZUxpbmtVcmwoYWJzSHJlZiwgcmVsSHJlZikpIHtcbiAgICAgICAgICAvLyBXZSBkbyBhIHByZXZlbnREZWZhdWx0IGZvciBhbGwgdXJscyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBhbmd1bGFyIGFwcGxpY2F0aW9uLFxuICAgICAgICAgIC8vIGluIGh0bWw1bW9kZSBhbmQgYWxzbyB3aXRob3V0LCBzbyB0aGF0IHdlIGFyZSBhYmxlIHRvIGFib3J0IG5hdmlnYXRpb24gd2l0aG91dFxuICAgICAgICAgIC8vIGdldHRpbmcgZG91YmxlIGVudHJpZXMgaW4gdGhlIGxvY2F0aW9uIGhpc3RvcnkuXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAvLyB1cGRhdGUgbG9jYXRpb24gbWFudWFsbHlcbiAgICAgICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9PSAkYnJvd3Nlci51cmwoKSkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgIC8vIGhhY2sgdG8gd29yayBhcm91bmQgRkY2IGJ1ZyA2ODQyMDggd2hlbiBzY2VuYXJpbyBydW5uZXIgY2xpY2tzIG9uIGxpbmtzXG4gICAgICAgICAgICAkd2luZG93LmFuZ3VsYXJbJ2ZmLTY4NDIwOC1wcmV2ZW50RGVmYXVsdCddID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgLy8gcmV3cml0ZSBoYXNoYmFuZyB1cmwgPD4gaHRtbDUgdXJsXG4gICAgaWYgKHRyaW1FbXB0eUhhc2goJGxvY2F0aW9uLmFic1VybCgpKSAhPT0gdHJpbUVtcHR5SGFzaChpbml0aWFsVXJsKSkge1xuICAgICAgJGJyb3dzZXIudXJsKCRsb2NhdGlvbi5hYnNVcmwoKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgICAvLyB1cGRhdGUgJGxvY2F0aW9uIHdoZW4gJGJyb3dzZXIgdXJsIGNoYW5nZXNcbiAgICAkYnJvd3Nlci5vblVybENoYW5nZShmdW5jdGlvbihuZXdVcmwsIG5ld1N0YXRlKSB7XG5cbiAgICAgIGlmICghc3RhcnRzV2l0aChuZXdVcmwsIGFwcEJhc2VOb0ZpbGUpKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBuYXZpZ2F0aW5nIG91dHNpZGUgb2YgdGhlIGFwcCB0aGVuIGZvcmNlIGEgcmVsb2FkXG4gICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IG5ld1VybDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAgICAgIHZhciBvbGRTdGF0ZSA9ICRsb2NhdGlvbi4kJHN0YXRlO1xuICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgbmV3VXJsID0gdHJpbUVtcHR5SGFzaChuZXdVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShuZXdVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG5ld1N0YXRlO1xuXG4gICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLCBvbGRVcmwsXG4gICAgICAgICAgICBuZXdTdGF0ZSwgb2xkU3RhdGUpLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgLy8gaWYgdGhlIGxvY2F0aW9uIHdhcyBjaGFuZ2VkIGJ5IGEgYCRsb2NhdGlvbkNoYW5nZVN0YXJ0YCBoYW5kbGVyIHRoZW4gc3RvcFxuICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT09IG5ld1VybCkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sob2xkVXJsLCBmYWxzZSwgb2xkU3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIGJyb3dzZXJcbiAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiAkbG9jYXRpb25XYXRjaCgpIHtcbiAgICAgIGlmIChpbml0aWFsaXppbmcgfHwgJGxvY2F0aW9uLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24pIHtcbiAgICAgICAgJGxvY2F0aW9uLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24gPSBmYWxzZTtcblxuICAgICAgICB2YXIgb2xkVXJsID0gdHJpbUVtcHR5SGFzaCgkYnJvd3Nlci51cmwoKSk7XG4gICAgICAgIHZhciBuZXdVcmwgPSB0cmltRW1wdHlIYXNoKCRsb2NhdGlvbi5hYnNVcmwoKSk7XG4gICAgICAgIHZhciBvbGRTdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG4gICAgICAgIHZhciBjdXJyZW50UmVwbGFjZSA9ICRsb2NhdGlvbi4kJHJlcGxhY2U7XG4gICAgICAgIHZhciB1cmxPclN0YXRlQ2hhbmdlZCA9IG9sZFVybCAhPT0gbmV3VXJsIHx8XG4gICAgICAgICAgKCRsb2NhdGlvbi4kJGh0bWw1ICYmICRzbmlmZmVyLmhpc3RvcnkgJiYgb2xkU3RhdGUgIT09ICRsb2NhdGlvbi4kJHN0YXRlKTtcblxuICAgICAgICBpZiAoaW5pdGlhbGl6aW5nIHx8IHVybE9yU3RhdGVDaGFuZ2VkKSB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbmV3VXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLCBvbGRVcmwsXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUsIG9sZFN0YXRlKS5kZWZhdWx0UHJldmVudGVkO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGUgbG9jYXRpb24gd2FzIGNoYW5nZWQgYnkgYSBgJGxvY2F0aW9uQ2hhbmdlU3RhcnRgIGhhbmRsZXIgdGhlbiBzdG9wXG4gICAgICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9PSBuZXdVcmwpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICh1cmxPclN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sobmV3VXJsLCBjdXJyZW50UmVwbGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSAkbG9jYXRpb24uJCRzdGF0ZSA/IG51bGwgOiAkbG9jYXRpb24uJCRzdGF0ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkbG9jYXRpb24uJCRyZXBsYWNlID0gZmFsc2U7XG5cbiAgICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gcmV0dXJuIGFueXRoaW5nIGJlY2F1c2UgJGV2YWxBc3luYyB3aWxsIG1ha2UgdGhlIGRpZ2VzdCBsb29wIGRpcnR5IHdoZW5cbiAgICAgIC8vIHRoZXJlIGlzIGEgY2hhbmdlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gJGxvY2F0aW9uO1xuXG4gICAgZnVuY3Rpb24gYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKSB7XG4gICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCAkbG9jYXRpb24uYWJzVXJsKCksIG9sZFVybCxcbiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUsIG9sZFN0YXRlKTtcbiAgICB9XG59XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGxvZ1xuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNpbXBsZSBzZXJ2aWNlIGZvciBsb2dnaW5nLiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIHNhZmVseSB3cml0ZXMgdGhlIG1lc3NhZ2VcbiAqIGludG8gdGhlIGJyb3dzZXIncyBjb25zb2xlIChpZiBwcmVzZW50KS5cbiAqXG4gKiBUaGUgbWFpbiBwdXJwb3NlIG9mIHRoaXMgc2VydmljZSBpcyB0byBzaW1wbGlmeSBkZWJ1Z2dpbmcgYW5kIHRyb3VibGVzaG9vdGluZy5cbiAqXG4gKiBUbyByZXZlYWwgdGhlIGxvY2F0aW9uIG9mIHRoZSBjYWxscyB0byBgJGxvZ2AgaW4gdGhlIEphdmFTY3JpcHQgY29uc29sZSxcbiAqIHlvdSBjYW4gXCJibGFja2JveFwiIHRoZSBBbmd1bGFySlMgc291cmNlIGluIHlvdXIgYnJvd3NlcjpcbiAqXG4gKiBbTW96aWxsYSBkZXNjcmlwdGlvbiBvZiBibGFja2JveGluZ10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9EZWJ1Z2dlci9Ib3dfdG8vQmxhY2tfYm94X2Ffc291cmNlKS5cbiAqIFtDaHJvbWUgZGVzY3JpcHRpb24gb2YgYmxhY2tib3hpbmddKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9ibGFja2JveGluZykuXG4gKlxuICogTm90ZTogTm90IGFsbCBicm93c2VycyBzdXBwb3J0IGJsYWNrYm94aW5nLlxuICpcbiAqIFRoZSBkZWZhdWx0IGlzIHRvIGxvZyBgZGVidWdgIG1lc3NhZ2VzLiBZb3UgY2FuIHVzZVxuICoge0BsaW5rIG5nLiRsb2dQcm92aWRlciBuZy4kbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkfSB0byBjaGFuZ2UgdGhpcy5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibG9nRXhhbXBsZVwiIG5hbWU9XCJsb2ctc2VydmljZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2xvZ0V4YW1wbGUnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdMb2dDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvZycsIGZ1bmN0aW9uKCRzY29wZSwgJGxvZykge1xuICAgICAgICAgICAkc2NvcGUuJGxvZyA9ICRsb2c7XG4gICAgICAgICAgICRzY29wZS5tZXNzYWdlID0gJ0hlbGxvIFdvcmxkISc7XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJMb2dDb250cm9sbGVyXCI+XG4gICAgICAgICA8cD5SZWxvYWQgdGhpcyBwYWdlIHdpdGggb3BlbiBjb25zb2xlLCBlbnRlciB0ZXh0IGFuZCBoaXQgdGhlIGxvZyBidXR0b24uLi48L3A+XG4gICAgICAgICA8bGFiZWw+TWVzc2FnZTpcbiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibWVzc2FnZVwiIC8+PC9sYWJlbD5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmxvZyhtZXNzYWdlKVwiPmxvZzwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cud2FybihtZXNzYWdlKVwiPndhcm48L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmluZm8obWVzc2FnZSlcIj5pbmZvPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5lcnJvcihtZXNzYWdlKVwiPmVycm9yPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5kZWJ1ZyhtZXNzYWdlKVwiPmRlYnVnPC9idXR0b24+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGxvZ1Byb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvZ1Byb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBsb2dzIG1lc3NhZ2VzXG4gKi9cbmZ1bmN0aW9uICRMb2dQcm92aWRlcigpIHtcbiAgdmFyIGRlYnVnID0gdHJ1ZSxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZsYWcgZW5hYmxlIG9yIGRpc2FibGUgZGVidWcgbGV2ZWwgbWVzc2FnZXNcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykge1xuICAgIGlmIChpc0RlZmluZWQoZmxhZykpIHtcbiAgICAgIGRlYnVnID0gZmxhZztcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVidWc7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICAvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlIDEyLTE0K1xuICAgIC8vIElFL0VkZ2UgZGlzcGxheSBlcnJvcnMgaW4gc3VjaCBhIHdheSB0aGF0IGl0IHJlcXVpcmVzIHRoZSB1c2VyIHRvIGNsaWNrIGluIDQgcGxhY2VzXG4gICAgLy8gdG8gc2VlIHRoZSBzdGFjayB0cmFjZS4gVGhlcmUgaXMgbm8gd2F5IHRvIGZlYXR1cmUtZGV0ZWN0IGl0IHNvIHRoZXJlJ3MgYSBjaGFuY2VcbiAgICAvLyBvZiB0aGUgdXNlciBhZ2VudCBzbmlmZmluZyB0byBnbyB3cm9uZyBidXQgc2luY2UgaXQncyBvbmx5IGFib3V0IGxvZ2dpbmcsIHRoaXMgc2hvdWxkbid0XG4gICAgLy8gYnJlYWsgYXBwcy4gT3RoZXIgYnJvd3NlcnMgZGlzcGxheSBlcnJvcnMgaW4gYSBzZW5zaWJsZSB3YXkgYW5kIHNvbWUgb2YgdGhlbSBtYXAgc3RhY2tcbiAgICAvLyB0cmFjZXMgYWxvbmcgc291cmNlIG1hcHMgaWYgYXZhaWxhYmxlIHNvIGl0IG1ha2VzIHNlbnNlIHRvIGxldCBicm93c2VycyBkaXNwbGF5IGl0XG4gICAgLy8gYXMgdGhleSB3YW50LlxuICAgIHZhciBmb3JtYXRTdGFja1RyYWNlID0gbXNpZSB8fCAvXFxiRWRnZVxcLy8udGVzdCgkd2luZG93Lm5hdmlnYXRvciAmJiAkd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNsb2dcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGEgbG9nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgbG9nOiBjb25zb2xlTG9nKCdsb2cnKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2luZm9cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgaW5mbzogY29uc29sZUxvZygnaW5mbycpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjd2FyblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgd2FybjogY29uc29sZUxvZygnd2FybicpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjZXJyb3JcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgZXJyb3I6IGNvbnNvbGVMb2coJ2Vycm9yJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNkZWJ1Z1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlXG4gICAgICAgKi9cbiAgICAgIGRlYnVnOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmbiA9IGNvbnNvbGVMb2coJ2RlYnVnJyk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSgpXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdEVycm9yKGFyZykge1xuICAgICAgaWYgKGlzRXJyb3IoYXJnKSkge1xuICAgICAgICBpZiAoYXJnLnN0YWNrICYmIGZvcm1hdFN0YWNrVHJhY2UpIHtcbiAgICAgICAgICBhcmcgPSAoYXJnLm1lc3NhZ2UgJiYgYXJnLnN0YWNrLmluZGV4T2YoYXJnLm1lc3NhZ2UpID09PSAtMSlcbiAgICAgICAgICAgICAgPyAnRXJyb3I6ICcgKyBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnN0YWNrXG4gICAgICAgICAgICAgIDogYXJnLnN0YWNrO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZy5zb3VyY2VVUkwpIHtcbiAgICAgICAgICBhcmcgPSBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnNvdXJjZVVSTCArICc6JyArIGFyZy5saW5lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnNvbGVMb2codHlwZSkge1xuICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sXG4gICAgICAgICAgbG9nRm4gPSBjb25zb2xlW3R5cGVdIHx8IGNvbnNvbGUubG9nIHx8IG5vb3A7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgb25seVxuICAgICAgICAvLyBjb25zb2xlIG1ldGhvZHMgZG9uJ3QgaW5oZXJpdCBmcm9tIEZ1bmN0aW9uLnByb3RvdHlwZSBpbiBJRSA5IHNvIHdlIGNhbid0XG4gICAgICAgIC8vIGNhbGwgYGxvZ0ZuLmFwcGx5KGNvbnNvbGUsIGFyZ3MpYCBkaXJlY3RseS5cbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGxvZ0ZuLCBjb25zb2xlLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuICB9XTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxudmFyICRwYXJzZU1pbkVyciA9IG1pbkVycignJHBhcnNlJyk7XG5cbnZhciBvYmplY3RWYWx1ZU9mID0ge30uY29uc3RydWN0b3IucHJvdG90eXBlLnZhbHVlT2Y7XG5cbi8vIFNhbmRib3hpbmcgQW5ndWxhciBFeHByZXNzaW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBbmd1bGFyIGV4cHJlc3Npb25zIGFyZSBubyBsb25nZXIgc2FuZGJveGVkLiBTbyBpdCBpcyBub3cgZXZlbiBlYXNpZXIgdG8gYWNjZXNzIGFyYml0cmFyeSBKUyBjb2RlIGJ5XG4vLyB2YXJpb3VzIG1lYW5zIHN1Y2ggYXMgb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIG5hdGl2ZSBKUyBmdW5jdGlvbnMgbGlrZSB0aGUgRnVuY3Rpb24gY29uc3RydWN0b3IuXG4vL1xuLy8gQXMgYW4gZXhhbXBsZSwgY29uc2lkZXIgdGhlIGZvbGxvd2luZyBBbmd1bGFyIGV4cHJlc3Npb246XG4vL1xuLy8gICB7fS50b1N0cmluZy5jb25zdHJ1Y3RvcignYWxlcnQoXCJldmlsIEpTIGNvZGVcIiknKVxuLy9cbi8vIEl0IGlzIGltcG9ydGFudCB0byByZWFsaXplIHRoYXQgaWYgeW91IGNyZWF0ZSBhbiBleHByZXNzaW9uIGZyb20gYSBzdHJpbmcgdGhhdCBjb250YWlucyB1c2VyIHByb3ZpZGVkXG4vLyBjb250ZW50IHRoZW4gaXQgaXMgcG9zc2libGUgdGhhdCB5b3VyIGFwcGxpY2F0aW9uIGNvbnRhaW5zIGEgc2VjdXJpdHkgdnVsbmVyYWJpbGl0eSB0byBhbiBYU1Mgc3R5bGUgYXR0YWNrLlxuLy9cbi8vIFNlZSBodHRwczovL2RvY3MuYW5ndWxhcmpzLm9yZy9ndWlkZS9zZWN1cml0eVxuXG5cbmZ1bmN0aW9uIGdldFN0cmluZ1ZhbHVlKG5hbWUpIHtcbiAgLy8gUHJvcGVydHkgbmFtZXMgbXVzdCBiZSBzdHJpbmdzLiBUaGlzIG1lYW5zIHRoYXQgbm9uLXN0cmluZyBvYmplY3RzIGNhbm5vdCBiZSB1c2VkXG4gIC8vIGFzIGtleXMgaW4gYW4gb2JqZWN0LiBBbnkgbm9uLXN0cmluZyBvYmplY3QsIGluY2x1ZGluZyBhIG51bWJlciwgaXMgdHlwZWNhc3RlZFxuICAvLyBpbnRvIGEgc3RyaW5nIHZpYSB0aGUgdG9TdHJpbmcgbWV0aG9kLlxuICAvLyAtLSBNRE4sIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9Qcm9wZXJ0eV9hY2Nlc3NvcnMjUHJvcGVydHlfbmFtZXNcbiAgLy9cbiAgLy8gU28sIHRvIGVuc3VyZSB0aGF0IHdlIGFyZSBjaGVja2luZyB0aGUgc2FtZSBgbmFtZWAgdGhhdCBKYXZhU2NyaXB0IHdvdWxkIHVzZSwgd2UgY2FzdCBpdFxuICAvLyB0byBhIHN0cmluZy4gSXQncyBub3QgYWx3YXlzIHBvc3NpYmxlLiBJZiBgbmFtZWAgaXMgYW4gb2JqZWN0IGFuZCBpdHMgYHRvU3RyaW5nYCBtZXRob2QgaXNcbiAgLy8gJ2Jyb2tlbicgKGRvZXNuJ3QgcmV0dXJuIGEgc3RyaW5nLCBpc24ndCBhIGZ1bmN0aW9uLCBldGMuKSwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd246XG4gIC8vXG4gIC8vIFR5cGVFcnJvcjogQ2Fubm90IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVxuICAvL1xuICAvLyBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgZG9uJ3QgY2F0Y2ggdGhpcyBlcnJvciBoZXJlIGFuZCBhbGxvdyBpdCB0byBwcm9wYWdhdGUgdXAgdGhlIGNhbGxcbiAgLy8gc3RhY2suIE5vdGUgdGhhdCB5b3UnbGwgZ2V0IHRoZSBzYW1lIGVycm9yIGluIEphdmFTY3JpcHQgaWYgeW91IHRyeSB0byBhY2Nlc3MgYSBwcm9wZXJ0eSB1c2luZ1xuICAvLyBzdWNoIGEgJ2Jyb2tlbicgb2JqZWN0IGFzIGEga2V5LlxuICByZXR1cm4gbmFtZSArICcnO1xufVxuXG5cbnZhciBPUEVSQVRPUlMgPSBjcmVhdGVNYXAoKTtcbmZvckVhY2goJysgLSAqIC8gJSA9PT0gIT09ID09ICE9IDwgPiA8PSA+PSAmJiB8fCAhID0gfCcuc3BsaXQoJyAnKSwgZnVuY3Rpb24ob3BlcmF0b3IpIHsgT1BFUkFUT1JTW29wZXJhdG9yXSA9IHRydWU7IH0pO1xudmFyIEVTQ0FQRSA9IHsnbic6J1xcbicsICdmJzonXFxmJywgJ3InOidcXHInLCAndCc6J1xcdCcsICd2JzonXFx2JywgJ1xcJyc6J1xcJycsICdcIic6J1wiJ307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTGV4ZXIgPSBmdW5jdGlvbiBMZXhlcihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5MZXhlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMZXhlcixcblxuICBsZXg6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIHRoaXMudG9rZW5zID0gW107XG5cbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICBpZiAoY2ggPT09ICdcIicgfHwgY2ggPT09ICdcXCcnKSB7XG4gICAgICAgIHRoaXMucmVhZFN0cmluZyhjaCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNOdW1iZXIoY2gpIHx8IGNoID09PSAnLicgJiYgdGhpcy5pc051bWJlcih0aGlzLnBlZWsoKSkpIHtcbiAgICAgICAgdGhpcy5yZWFkTnVtYmVyKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJZGVudGlmaWVyU3RhcnQodGhpcy5wZWVrTXVsdGljaGFyKCkpKSB7XG4gICAgICAgIHRoaXMucmVhZElkZW50KCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXMoY2gsICcoKXt9W10uLDs6PycpKSB7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe2luZGV4OiB0aGlzLmluZGV4LCB0ZXh0OiBjaH0pO1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNXaGl0ZXNwYWNlKGNoKSkge1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY2gyID0gY2ggKyB0aGlzLnBlZWsoKTtcbiAgICAgICAgdmFyIGNoMyA9IGNoMiArIHRoaXMucGVlaygyKTtcbiAgICAgICAgdmFyIG9wMSA9IE9QRVJBVE9SU1tjaF07XG4gICAgICAgIHZhciBvcDIgPSBPUEVSQVRPUlNbY2gyXTtcbiAgICAgICAgdmFyIG9wMyA9IE9QRVJBVE9SU1tjaDNdO1xuICAgICAgICBpZiAob3AxIHx8IG9wMiB8fCBvcDMpIHtcbiAgICAgICAgICB2YXIgdG9rZW4gPSBvcDMgPyBjaDMgOiAob3AyID8gY2gyIDogY2gpO1xuICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2goe2luZGV4OiB0aGlzLmluZGV4LCB0ZXh0OiB0b2tlbiwgb3BlcmF0b3I6IHRydWV9KTtcbiAgICAgICAgICB0aGlzLmluZGV4ICs9IHRva2VuLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ1VuZXhwZWN0ZWQgbmV4dCBjaGFyYWN0ZXIgJywgdGhpcy5pbmRleCwgdGhpcy5pbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRva2VucztcbiAgfSxcblxuICBpczogZnVuY3Rpb24oY2gsIGNoYXJzKSB7XG4gICAgcmV0dXJuIGNoYXJzLmluZGV4T2YoY2gpICE9PSAtMTtcbiAgfSxcblxuICBwZWVrOiBmdW5jdGlvbihpKSB7XG4gICAgdmFyIG51bSA9IGkgfHwgMTtcbiAgICByZXR1cm4gKHRoaXMuaW5kZXggKyBudW0gPCB0aGlzLnRleHQubGVuZ3RoKSA/IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCArIG51bSkgOiBmYWxzZTtcbiAgfSxcblxuICBpc051bWJlcjogZnVuY3Rpb24oY2gpIHtcbiAgICByZXR1cm4gKCcwJyA8PSBjaCAmJiBjaCA8PSAnOScpICYmIHR5cGVvZiBjaCA9PT0gJ3N0cmluZyc7XG4gIH0sXG5cbiAgaXNXaGl0ZXNwYWNlOiBmdW5jdGlvbihjaCkge1xuICAgIC8vIElFIHRyZWF0cyBub24tYnJlYWtpbmcgc3BhY2UgYXMgXFx1MDBBMFxuICAgIHJldHVybiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXHQnIHx8XG4gICAgICAgICAgICBjaCA9PT0gJ1xcbicgfHwgY2ggPT09ICdcXHYnIHx8IGNoID09PSAnXFx1MDBBMCcpO1xuICB9LFxuXG4gIGlzSWRlbnRpZmllclN0YXJ0OiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaXNJZGVudGlmaWVyU3RhcnQgP1xuICAgICAgICB0aGlzLm9wdGlvbnMuaXNJZGVudGlmaWVyU3RhcnQoY2gsIHRoaXMuY29kZVBvaW50QXQoY2gpKSA6XG4gICAgICAgIHRoaXMuaXNWYWxpZElkZW50aWZpZXJTdGFydChjaCk7XG4gIH0sXG5cbiAgaXNWYWxpZElkZW50aWZpZXJTdGFydDogZnVuY3Rpb24oY2gpIHtcbiAgICByZXR1cm4gKCdhJyA8PSBjaCAmJiBjaCA8PSAneicgfHxcbiAgICAgICAgICAgICdBJyA8PSBjaCAmJiBjaCA8PSAnWicgfHxcbiAgICAgICAgICAgICdfJyA9PT0gY2ggfHwgY2ggPT09ICckJyk7XG4gIH0sXG5cbiAgaXNJZGVudGlmaWVyQ29udGludWU6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pc0lkZW50aWZpZXJDb250aW51ZSA/XG4gICAgICAgIHRoaXMub3B0aW9ucy5pc0lkZW50aWZpZXJDb250aW51ZShjaCwgdGhpcy5jb2RlUG9pbnRBdChjaCkpIDpcbiAgICAgICAgdGhpcy5pc1ZhbGlkSWRlbnRpZmllckNvbnRpbnVlKGNoKTtcbiAgfSxcblxuICBpc1ZhbGlkSWRlbnRpZmllckNvbnRpbnVlOiBmdW5jdGlvbihjaCwgY3ApIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkSWRlbnRpZmllclN0YXJ0KGNoLCBjcCkgfHwgdGhpcy5pc051bWJlcihjaCk7XG4gIH0sXG5cbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uKGNoKSB7XG4gICAgaWYgKGNoLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGNoLmNoYXJDb2RlQXQoMCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICByZXR1cm4gKGNoLmNoYXJDb2RlQXQoMCkgPDwgMTApICsgY2guY2hhckNvZGVBdCgxKSAtIDB4MzVGREMwMDtcbiAgfSxcblxuICBwZWVrTXVsdGljaGFyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2ggPSB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpO1xuICAgIHZhciBwZWVrID0gdGhpcy5wZWVrKCk7XG4gICAgaWYgKCFwZWVrKSB7XG4gICAgICByZXR1cm4gY2g7XG4gICAgfVxuICAgIHZhciBjcDEgPSBjaC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBjcDIgPSBwZWVrLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKGNwMSA+PSAweEQ4MDAgJiYgY3AxIDw9IDB4REJGRiAmJiBjcDIgPj0gMHhEQzAwICYmIGNwMiA8PSAweERGRkYpIHtcbiAgICAgIHJldHVybiBjaCArIHBlZWs7XG4gICAgfVxuICAgIHJldHVybiBjaDtcbiAgfSxcblxuICBpc0V4cE9wZXJhdG9yOiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnIHx8IHRoaXMuaXNOdW1iZXIoY2gpKTtcbiAgfSxcblxuICB0aHJvd0Vycm9yOiBmdW5jdGlvbihlcnJvciwgc3RhcnQsIGVuZCkge1xuICAgIGVuZCA9IGVuZCB8fCB0aGlzLmluZGV4O1xuICAgIHZhciBjb2xTdHIgPSAoaXNEZWZpbmVkKHN0YXJ0KVxuICAgICAgICAgICAgPyAncyAnICsgc3RhcnQgKyAgJy0nICsgdGhpcy5pbmRleCArICcgWycgKyB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpICsgJ10nXG4gICAgICAgICAgICA6ICcgJyArIGVuZCk7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdsZXhlcnInLCAnTGV4ZXIgRXJyb3I6IHswfSBhdCBjb2x1bW57MX0gaW4gZXhwcmVzc2lvbiBbezJ9XS4nLFxuICAgICAgICBlcnJvciwgY29sU3RyLCB0aGlzLnRleHQpO1xuICB9LFxuXG4gIHJlYWROdW1iZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBudW1iZXIgPSAnJztcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gbG93ZXJjYXNlKHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCkpO1xuICAgICAgaWYgKGNoID09PSAnLicgfHwgdGhpcy5pc051bWJlcihjaCkpIHtcbiAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBlZWtDaCA9IHRoaXMucGVlaygpO1xuICAgICAgICBpZiAoY2ggPT09ICdlJyAmJiB0aGlzLmlzRXhwT3BlcmF0b3IocGVla0NoKSkge1xuICAgICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRXhwT3BlcmF0b3IoY2gpICYmXG4gICAgICAgICAgICBwZWVrQ2ggJiYgdGhpcy5pc051bWJlcihwZWVrQ2gpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PT0gJ2UnKSB7XG4gICAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiZcbiAgICAgICAgICAgICghcGVla0NoIHx8ICF0aGlzLmlzTnVtYmVyKHBlZWtDaCkpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PT0gJ2UnKSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIGV4cG9uZW50Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICB9XG4gICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICBpbmRleDogc3RhcnQsXG4gICAgICB0ZXh0OiBudW1iZXIsXG4gICAgICBjb25zdGFudDogdHJ1ZSxcbiAgICAgIHZhbHVlOiBOdW1iZXIobnVtYmVyKVxuICAgIH0pO1xuICB9LFxuXG4gIHJlYWRJZGVudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICB0aGlzLmluZGV4ICs9IHRoaXMucGVla011bHRpY2hhcigpLmxlbmd0aDtcbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMucGVla011bHRpY2hhcigpO1xuICAgICAgaWYgKCF0aGlzLmlzSWRlbnRpZmllckNvbnRpbnVlKGNoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXggKz0gY2gubGVuZ3RoO1xuICAgIH1cbiAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgIHRleHQ6IHRoaXMudGV4dC5zbGljZShzdGFydCwgdGhpcy5pbmRleCksXG4gICAgICBpZGVudGlmaWVyOiB0cnVlXG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZFN0cmluZzogZnVuY3Rpb24ocXVvdGUpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHRoaXMuaW5kZXgrKztcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgdmFyIHJhd1N0cmluZyA9IHF1b3RlO1xuICAgIHZhciBlc2NhcGUgPSBmYWxzZTtcbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICByYXdTdHJpbmcgKz0gY2g7XG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIGlmIChjaCA9PT0gJ3UnKSB7XG4gICAgICAgICAgdmFyIGhleCA9IHRoaXMudGV4dC5zdWJzdHJpbmcodGhpcy5pbmRleCArIDEsIHRoaXMuaW5kZXggKyA1KTtcbiAgICAgICAgICBpZiAoIWhleC5tYXRjaCgvW1xcZGEtZl17NH0vaSkpIHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCB1bmljb2RlIGVzY2FwZSBbXFxcXHUnICsgaGV4ICsgJ10nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbmRleCArPSA0O1xuICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwgMTYpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVwID0gRVNDQVBFW2NoXTtcbiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAocmVwIHx8IGNoKTtcbiAgICAgICAgfVxuICAgICAgICBlc2NhcGUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgICBlc2NhcGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gcXVvdGUpIHtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICBpbmRleDogc3RhcnQsXG4gICAgICAgICAgdGV4dDogcmF3U3RyaW5nLFxuICAgICAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiBzdHJpbmdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZyArPSBjaDtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICB9XG4gICAgdGhpcy50aHJvd0Vycm9yKCdVbnRlcm1pbmF0ZWQgcXVvdGUnLCBzdGFydCk7XG4gIH1cbn07XG5cbnZhciBBU1QgPSBmdW5jdGlvbiBBU1QobGV4ZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy5sZXhlciA9IGxleGVyO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xufTtcblxuQVNULlByb2dyYW0gPSAnUHJvZ3JhbSc7XG5BU1QuRXhwcmVzc2lvblN0YXRlbWVudCA9ICdFeHByZXNzaW9uU3RhdGVtZW50JztcbkFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbiA9ICdBc3NpZ25tZW50RXhwcmVzc2lvbic7XG5BU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uID0gJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbic7XG5BU1QuTG9naWNhbEV4cHJlc3Npb24gPSAnTG9naWNhbEV4cHJlc3Npb24nO1xuQVNULkJpbmFyeUV4cHJlc3Npb24gPSAnQmluYXJ5RXhwcmVzc2lvbic7XG5BU1QuVW5hcnlFeHByZXNzaW9uID0gJ1VuYXJ5RXhwcmVzc2lvbic7XG5BU1QuQ2FsbEV4cHJlc3Npb24gPSAnQ2FsbEV4cHJlc3Npb24nO1xuQVNULk1lbWJlckV4cHJlc3Npb24gPSAnTWVtYmVyRXhwcmVzc2lvbic7XG5BU1QuSWRlbnRpZmllciA9ICdJZGVudGlmaWVyJztcbkFTVC5MaXRlcmFsID0gJ0xpdGVyYWwnO1xuQVNULkFycmF5RXhwcmVzc2lvbiA9ICdBcnJheUV4cHJlc3Npb24nO1xuQVNULlByb3BlcnR5ID0gJ1Byb3BlcnR5JztcbkFTVC5PYmplY3RFeHByZXNzaW9uID0gJ09iamVjdEV4cHJlc3Npb24nO1xuQVNULlRoaXNFeHByZXNzaW9uID0gJ1RoaXNFeHByZXNzaW9uJztcbkFTVC5Mb2NhbHNFeHByZXNzaW9uID0gJ0xvY2Fsc0V4cHJlc3Npb24nO1xuXG4vLyBJbnRlcm5hbCB1c2Ugb25seVxuQVNULk5HVmFsdWVQYXJhbWV0ZXIgPSAnTkdWYWx1ZVBhcmFtZXRlcic7XG5cbkFTVC5wcm90b3R5cGUgPSB7XG4gIGFzdDogZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy50b2tlbnMgPSB0aGlzLmxleGVyLmxleCh0ZXh0KTtcblxuICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvZ3JhbSgpO1xuXG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBhbiB1bmV4cGVjdGVkIHRva2VuJywgdGhpcy50b2tlbnNbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICBwcm9ncmFtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm9keSA9IFtdO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID4gMCAmJiAhdGhpcy5wZWVrKCd9JywgJyknLCAnOycsICddJykpXG4gICAgICAgIGJvZHkucHVzaCh0aGlzLmV4cHJlc3Npb25TdGF0ZW1lbnQoKSk7XG4gICAgICBpZiAoIXRoaXMuZXhwZWN0KCc7JykpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogQVNULlByb2dyYW0sIGJvZHk6IGJvZHl9O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBleHByZXNzaW9uU3RhdGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geyB0eXBlOiBBU1QuRXhwcmVzc2lvblN0YXRlbWVudCwgZXhwcmVzc2lvbjogdGhpcy5maWx0ZXJDaGFpbigpIH07XG4gIH0sXG5cbiAgZmlsdGVyQ2hhaW46IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgd2hpbGUgKHRoaXMuZXhwZWN0KCd8JykpIHtcbiAgICAgIGxlZnQgPSB0aGlzLmZpbHRlcihsZWZ0KTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgZXhwcmVzc2lvbjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXNzaWdubWVudCgpO1xuICB9LFxuXG4gIGFzc2lnbm1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLnRlcm5hcnkoKTtcbiAgICBpZiAodGhpcy5leHBlY3QoJz0nKSkge1xuICAgICAgaWYgKCFpc0Fzc2lnbmFibGUocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2x2YWwnLCAnVHJ5aW5nIHRvIGFzc2lnbiBhIHZhbHVlIHRvIGEgbm9uIGwtdmFsdWUnKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0geyB0eXBlOiBBU1QuQXNzaWdubWVudEV4cHJlc3Npb24sIGxlZnQ6IHJlc3VsdCwgcmlnaHQ6IHRoaXMuYXNzaWdubWVudCgpLCBvcGVyYXRvcjogJz0nfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICB0ZXJuYXJ5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGVzdCA9IHRoaXMubG9naWNhbE9SKCk7XG4gICAgdmFyIGFsdGVybmF0ZTtcbiAgICB2YXIgY29uc2VxdWVudDtcbiAgICBpZiAodGhpcy5leHBlY3QoJz8nKSkge1xuICAgICAgYWx0ZXJuYXRlID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICBpZiAodGhpcy5jb25zdW1lKCc6JykpIHtcbiAgICAgICAgY29uc2VxdWVudCA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICByZXR1cm4geyB0eXBlOiBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uLCB0ZXN0OiB0ZXN0LCBhbHRlcm5hdGU6IGFsdGVybmF0ZSwgY29uc2VxdWVudDogY29uc2VxdWVudH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXN0O1xuICB9LFxuXG4gIGxvZ2ljYWxPUjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmxvZ2ljYWxBTkQoKTtcbiAgICB3aGlsZSAodGhpcy5leHBlY3QoJ3x8JykpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5Mb2dpY2FsRXhwcmVzc2lvbiwgb3BlcmF0b3I6ICd8fCcsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLmxvZ2ljYWxBTkQoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBsb2dpY2FsQU5EOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMuZXF1YWxpdHkoKTtcbiAgICB3aGlsZSAodGhpcy5leHBlY3QoJyYmJykpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5Mb2dpY2FsRXhwcmVzc2lvbiwgb3BlcmF0b3I6ICcmJicsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLmVxdWFsaXR5KCl9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBlcXVhbGl0eTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLnJlbGF0aW9uYWwoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc9PScsJyE9JywnPT09JywnIT09JykpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLnJlbGF0aW9uYWwoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICByZWxhdGlvbmFsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMuYWRkaXRpdmUoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc8JywgJz4nLCAnPD0nLCAnPj0nKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMuYWRkaXRpdmUoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBhZGRpdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLm11bHRpcGxpY2F0aXZlKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKycsJy0nKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMubXVsdGlwbGljYXRpdmUoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBtdWx0aXBsaWNhdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLnVuYXJ5KCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKicsJy8nLCclJykpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLnVuYXJ5KCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgdW5hcnk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0b2tlbjtcbiAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJysnLCAnLScsICchJykpKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBBU1QuVW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgcHJlZml4OiB0cnVlLCBhcmd1bWVudDogdGhpcy51bmFyeSgpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnByaW1hcnkoKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJpbWFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByaW1hcnk7XG4gICAgaWYgKHRoaXMuZXhwZWN0KCcoJykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmZpbHRlckNoYWluKCk7XG4gICAgICB0aGlzLmNvbnN1bWUoJyknKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCdbJykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmFycmF5RGVjbGFyYXRpb24oKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCd7JykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLm9iamVjdCgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxmUmVmZXJlbnRpYWwuaGFzT3duUHJvcGVydHkodGhpcy5wZWVrKCkudGV4dCkpIHtcbiAgICAgIHByaW1hcnkgPSBjb3B5KHRoaXMuc2VsZlJlZmVyZW50aWFsW3RoaXMuY29uc3VtZSgpLnRleHRdKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5saXRlcmFscy5oYXNPd25Qcm9wZXJ0eSh0aGlzLnBlZWsoKS50ZXh0KSkge1xuICAgICAgcHJpbWFyeSA9IHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB0aGlzLm9wdGlvbnMubGl0ZXJhbHNbdGhpcy5jb25zdW1lKCkudGV4dF19O1xuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuaWRlbnRpZmllcikge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuaWRlbnRpZmllcigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuY29uc3RhbnQpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmNvbnN0YW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignbm90IGEgcHJpbWFyeSBleHByZXNzaW9uJywgdGhpcy5wZWVrKCkpO1xuICAgIH1cblxuICAgIHZhciBuZXh0O1xuICAgIHdoaWxlICgobmV4dCA9IHRoaXMuZXhwZWN0KCcoJywgJ1snLCAnLicpKSkge1xuICAgICAgaWYgKG5leHQudGV4dCA9PT0gJygnKSB7XG4gICAgICAgIHByaW1hcnkgPSB7dHlwZTogQVNULkNhbGxFeHByZXNzaW9uLCBjYWxsZWU6IHByaW1hcnksIGFyZ3VtZW50czogdGhpcy5wYXJzZUFyZ3VtZW50cygpIH07XG4gICAgICAgIHRoaXMuY29uc3VtZSgnKScpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICdbJykge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5leHByZXNzaW9uKCksIGNvbXB1dGVkOiB0cnVlIH07XG4gICAgICAgIHRoaXMuY29uc3VtZSgnXScpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICcuJykge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5pZGVudGlmaWVyKCksIGNvbXB1dGVkOiBmYWxzZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJTVBPU1NJQkxFJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmltYXJ5O1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24oYmFzZUV4cHJlc3Npb24pIHtcbiAgICB2YXIgYXJncyA9IFtiYXNlRXhwcmVzc2lvbl07XG4gICAgdmFyIHJlc3VsdCA9IHt0eXBlOiBBU1QuQ2FsbEV4cHJlc3Npb24sIGNhbGxlZTogdGhpcy5pZGVudGlmaWVyKCksIGFyZ3VtZW50czogYXJncywgZmlsdGVyOiB0cnVlfTtcblxuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnOicpKSB7XG4gICAgICBhcmdzLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgcGFyc2VBcmd1bWVudHM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJyknKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGFyZ3MucHVzaCh0aGlzLmZpbHRlckNoYWluKCkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHJldHVybiBhcmdzO1xuICB9LFxuXG4gIGlkZW50aWZpZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuY29uc3VtZSgpO1xuICAgIGlmICghdG9rZW4uaWRlbnRpZmllcikge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBub3QgYSB2YWxpZCBpZGVudGlmaWVyJywgdG9rZW4pO1xuICAgIH1cbiAgICByZXR1cm4geyB0eXBlOiBBU1QuSWRlbnRpZmllciwgbmFtZTogdG9rZW4udGV4dCB9O1xuICB9LFxuXG4gIGNvbnN0YW50OiBmdW5jdGlvbigpIHtcbiAgICAvLyBUT0RPIGNoZWNrIHRoYXQgaXQgaXMgYSBjb25zdGFudFxuICAgIHJldHVybiB7IHR5cGU6IEFTVC5MaXRlcmFsLCB2YWx1ZTogdGhpcy5jb25zdW1lKCkudmFsdWUgfTtcbiAgfSxcblxuICBhcnJheURlY2xhcmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnXScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHRoaXMucGVlaygnXScpKSB7XG4gICAgICAgICAgLy8gU3VwcG9ydCB0cmFpbGluZyBjb21tYXMgcGVyIEVTNS4xLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnRzLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHRoaXMuY29uc3VtZSgnXScpO1xuXG4gICAgcmV0dXJuIHsgdHlwZTogQVNULkFycmF5RXhwcmVzc2lvbiwgZWxlbWVudHM6IGVsZW1lbnRzIH07XG4gIH0sXG5cbiAgb2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IFtdLCBwcm9wZXJ0eTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnfScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHRoaXMucGVlaygnfScpKSB7XG4gICAgICAgICAgLy8gU3VwcG9ydCB0cmFpbGluZyBjb21tYXMgcGVyIEVTNS4xLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHByb3BlcnR5ID0ge3R5cGU6IEFTVC5Qcm9wZXJ0eSwga2luZDogJ2luaXQnfTtcbiAgICAgICAgaWYgKHRoaXMucGVlaygpLmNvbnN0YW50KSB7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5jb25zdGFudCgpO1xuICAgICAgICAgIHByb3BlcnR5LmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCc6Jyk7XG4gICAgICAgICAgcHJvcGVydHkudmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5pZGVudGlmaWVyKCk7XG4gICAgICAgICAgcHJvcGVydHkuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICBpZiAodGhpcy5wZWVrKCc6JykpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3VtZSgnOicpO1xuICAgICAgICAgICAgcHJvcGVydHkudmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcGVydHkudmFsdWUgPSBwcm9wZXJ0eS5rZXk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGVlaygnWycpKSB7XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCdbJyk7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCddJyk7XG4gICAgICAgICAgcHJvcGVydHkuY29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuY29uc3VtZSgnOicpO1xuICAgICAgICAgIHByb3BlcnR5LnZhbHVlID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdpbnZhbGlkIGtleScsIHRoaXMucGVlaygpKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wZXJ0aWVzLnB1c2gocHJvcGVydHkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHRoaXMuY29uc3VtZSgnfScpO1xuXG4gICAgcmV0dXJuIHt0eXBlOiBBU1QuT2JqZWN0RXhwcmVzc2lvbiwgcHJvcGVydGllczogcHJvcGVydGllcyB9O1xuICB9LFxuXG4gIHRocm93RXJyb3I6IGZ1bmN0aW9uKG1zZywgdG9rZW4pIHtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3N5bnRheCcsXG4gICAgICAgICdTeW50YXggRXJyb3I6IFRva2VuIFxcJ3swfVxcJyB7MX0gYXQgY29sdW1uIHsyfSBvZiB0aGUgZXhwcmVzc2lvbiBbezN9XSBzdGFydGluZyBhdCBbezR9XS4nLFxuICAgICAgICAgIHRva2VuLnRleHQsIG1zZywgKHRva2VuLmluZGV4ICsgMSksIHRoaXMudGV4dCwgdGhpcy50ZXh0LnN1YnN0cmluZyh0b2tlbi5pbmRleCkpO1xuICB9LFxuXG4gIGNvbnN1bWU6IGZ1bmN0aW9uKGUxKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoZTEpO1xuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgdW5leHBlY3RlZCwgZXhwZWN0aW5nIFsnICsgZTEgKyAnXScsIHRoaXMucGVlaygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuO1xuICB9LFxuXG4gIHBlZWtUb2tlbjogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRva2Vuc1swXTtcbiAgfSxcblxuICBwZWVrOiBmdW5jdGlvbihlMSwgZTIsIGUzLCBlNCkge1xuICAgIHJldHVybiB0aGlzLnBlZWtBaGVhZCgwLCBlMSwgZTIsIGUzLCBlNCk7XG4gIH0sXG5cbiAgcGVla0FoZWFkOiBmdW5jdGlvbihpLCBlMSwgZTIsIGUzLCBlNCkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiBpKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2Vuc1tpXTtcbiAgICAgIHZhciB0ID0gdG9rZW4udGV4dDtcbiAgICAgIGlmICh0ID09PSBlMSB8fCB0ID09PSBlMiB8fCB0ID09PSBlMyB8fCB0ID09PSBlNCB8fFxuICAgICAgICAgICghZTEgJiYgIWUyICYmICFlMyAmJiAhZTQpKSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGV4cGVjdDogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLnBlZWsoZTEsIGUyLCBlMywgZTQpO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgdGhpcy50b2tlbnMuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIHNlbGZSZWZlcmVudGlhbDoge1xuICAgICd0aGlzJzoge3R5cGU6IEFTVC5UaGlzRXhwcmVzc2lvbiB9LFxuICAgICckbG9jYWxzJzoge3R5cGU6IEFTVC5Mb2NhbHNFeHByZXNzaW9uIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gaWZEZWZpbmVkKHYsIGQpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ICE9PSAndW5kZWZpbmVkJyA/IHYgOiBkO1xufVxuXG5mdW5jdGlvbiBwbHVzRm4obCwgcikge1xuICBpZiAodHlwZW9mIGwgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gcjtcbiAgaWYgKHR5cGVvZiByID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGw7XG4gIHJldHVybiBsICsgcjtcbn1cblxuZnVuY3Rpb24gaXNTdGF0ZWxlc3MoJGZpbHRlciwgZmlsdGVyTmFtZSkge1xuICB2YXIgZm4gPSAkZmlsdGVyKGZpbHRlck5hbWUpO1xuICByZXR1cm4gIWZuLiRzdGF0ZWZ1bDtcbn1cblxudmFyIFBVUklUWV9BQlNPTFVURSA9IDE7XG52YXIgUFVSSVRZX1JFTEFUSVZFID0gMjtcblxuLy8gRGV0ZWN0IG5vZGVzIHdoaWNoIGNvdWxkIGRlcGVuZCBvbiBub24tc2hhbGxvdyBzdGF0ZSBvZiBvYmplY3RzXG5mdW5jdGlvbiBpc1B1cmUobm9kZSwgcGFyZW50SXNQdXJlKSB7XG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgLy8gQ29tcHV0ZWQgbWVtYmVycyBtaWdodCBpbnZva2UgYSBzdGF0ZWZ1bCB0b1N0cmluZygpXG4gICAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICAgIGlmIChub2RlLmNvbXB1dGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgLy8gVW5hcnkgYWx3YXlzIGNvbnZlcnQgdG8gcHJpbWF0aXZlXG4gICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIFBVUklUWV9BQlNPTFVURTtcblxuICAgIC8vIFRoZSBiaW5hcnkgKyBvcGVyYXRvciBjYW4gaW52b2tlIGEgc3RhdGVmdWwgdG9TdHJpbmcoKS5cbiAgICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIG5vZGUub3BlcmF0b3IgIT09ICcrJyA/IFBVUklUWV9BQlNPTFVURSA6IGZhbHNlO1xuXG4gICAgLy8gRnVuY3Rpb25zIC8gZmlsdGVycyBwcm9iYWJseSByZWFkIHN0YXRlIGZyb20gd2l0aGluIG9iamVjdHNcbiAgICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiAodW5kZWZpbmVkID09PSBwYXJlbnRJc1B1cmUpID8gUFVSSVRZX1JFTEFUSVZFIDogcGFyZW50SXNQdXJlO1xufVxuXG5mdW5jdGlvbiBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdCwgJGZpbHRlciwgcGFyZW50SXNQdXJlKSB7XG4gIHZhciBhbGxDb25zdGFudHM7XG4gIHZhciBhcmdzVG9XYXRjaDtcbiAgdmFyIGlzU3RhdGVsZXNzRmlsdGVyO1xuXG4gIHZhciBhc3RJc1B1cmUgPSBhc3QuaXNQdXJlID0gaXNQdXJlKGFzdCwgcGFyZW50SXNQdXJlKTtcblxuICBzd2l0Y2ggKGFzdC50eXBlKSB7XG4gIGNhc2UgQVNULlByb2dyYW06XG4gICAgYWxsQ29uc3RhbnRzID0gdHJ1ZTtcbiAgICBmb3JFYWNoKGFzdC5ib2R5LCBmdW5jdGlvbihleHByKSB7XG4gICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGV4cHIuZXhwcmVzc2lvbiwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmV4cHJlc3Npb24uY29uc3RhbnQ7XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgIGFzdC5jb25zdGFudCA9IHRydWU7XG4gICAgYXN0LnRvV2F0Y2ggPSBbXTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFyZ3VtZW50LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC5hcmd1bWVudC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5hcmd1bWVudC50b1dhdGNoO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QucmlnaHQsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmxlZnQudG9XYXRjaC5jb25jYXQoYXN0LnJpZ2h0LnRvV2F0Y2gpO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Mb2dpY2FsRXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5sZWZ0LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC5sZWZ0LmNvbnN0YW50ICYmIGFzdC5yaWdodC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5jb25zdGFudCA/IFtdIDogW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkNvbmRpdGlvbmFsRXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC50ZXN0LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFsdGVybmF0ZSwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5jb25zZXF1ZW50LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC50ZXN0LmNvbnN0YW50ICYmIGFzdC5hbHRlcm5hdGUuY29uc3RhbnQgJiYgYXN0LmNvbnNlcXVlbnQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QuY29uc3RhbnQgPyBbXSA6IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5JZGVudGlmaWVyOlxuICAgIGFzdC5jb25zdGFudCA9IGZhbHNlO1xuICAgIGFzdC50b1dhdGNoID0gW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULk1lbWJlckV4cHJlc3Npb246XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3Qub2JqZWN0LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGlmIChhc3QuY29tcHV0ZWQpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnByb3BlcnR5LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIH1cbiAgICBhc3QuY29uc3RhbnQgPSBhc3Qub2JqZWN0LmNvbnN0YW50ICYmICghYXN0LmNvbXB1dGVkIHx8IGFzdC5wcm9wZXJ0eS5jb25zdGFudCk7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QuY29uc3RhbnQgPyBbXSA6IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICBpc1N0YXRlbGVzc0ZpbHRlciA9IGFzdC5maWx0ZXIgPyBpc1N0YXRlbGVzcygkZmlsdGVyLCBhc3QuY2FsbGVlLm5hbWUpIDogZmFsc2U7XG4gICAgYWxsQ29uc3RhbnRzID0gaXNTdGF0ZWxlc3NGaWx0ZXI7XG4gICAgYXJnc1RvV2F0Y2ggPSBbXTtcbiAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwciwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgZXhwci50b1dhdGNoKTtcbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYXN0LnRvV2F0Y2ggPSBpc1N0YXRlbGVzc0ZpbHRlciA/IGFyZ3NUb1dhdGNoIDogW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QucmlnaHQsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgIGFyZ3NUb1dhdGNoID0gW107XG4gICAgZm9yRWFjaChhc3QuZWxlbWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwciwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgZXhwci50b1dhdGNoKTtcbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYXN0LnRvV2F0Y2ggPSBhcmdzVG9XYXRjaDtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgIGFyZ3NUb1dhdGNoID0gW107XG4gICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMocHJvcGVydHkudmFsdWUsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgICBhbGxDb25zdGFudHMgPSBhbGxDb25zdGFudHMgJiYgcHJvcGVydHkudmFsdWUuY29uc3RhbnQ7XG4gICAgICBhcmdzVG9XYXRjaC5wdXNoLmFwcGx5KGFyZ3NUb1dhdGNoLCBwcm9wZXJ0eS52YWx1ZS50b1dhdGNoKTtcbiAgICAgIGlmIChwcm9wZXJ0eS5jb21wdXRlZCkge1xuICAgICAgICAvL2B7W2tleV06IHZhbHVlfWAgaW1wbGljaXRseSBkb2VzIGBrZXkudG9TdHJpbmcoKWAgd2hpY2ggbWF5IGJlIG5vbi1wdXJlXG4gICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMocHJvcGVydHkua2V5LCAkZmlsdGVyLCAvKnBhcmVudElzUHVyZT0qL2ZhbHNlKTtcbiAgICAgICAgYWxsQ29uc3RhbnRzID0gYWxsQ29uc3RhbnRzICYmIHByb3BlcnR5LmtleS5jb25zdGFudDtcbiAgICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgcHJvcGVydHkua2V5LnRvV2F0Y2gpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFzdC5jb25zdGFudCA9IGFsbENvbnN0YW50cztcbiAgICBhc3QudG9XYXRjaCA9IGFyZ3NUb1dhdGNoO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICBhc3QuY29uc3RhbnQgPSBmYWxzZTtcbiAgICBhc3QudG9XYXRjaCA9IFtdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Mb2NhbHNFeHByZXNzaW9uOlxuICAgIGFzdC5jb25zdGFudCA9IGZhbHNlO1xuICAgIGFzdC50b1dhdGNoID0gW107XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRzKGJvZHkpIHtcbiAgaWYgKGJvZHkubGVuZ3RoICE9PSAxKSByZXR1cm47XG4gIHZhciBsYXN0RXhwcmVzc2lvbiA9IGJvZHlbMF0uZXhwcmVzc2lvbjtcbiAgdmFyIGNhbmRpZGF0ZSA9IGxhc3RFeHByZXNzaW9uLnRvV2F0Y2g7XG4gIGlmIChjYW5kaWRhdGUubGVuZ3RoICE9PSAxKSByZXR1cm4gY2FuZGlkYXRlO1xuICByZXR1cm4gY2FuZGlkYXRlWzBdICE9PSBsYXN0RXhwcmVzc2lvbiA/IGNhbmRpZGF0ZSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNBc3NpZ25hYmxlKGFzdCkge1xuICByZXR1cm4gYXN0LnR5cGUgPT09IEFTVC5JZGVudGlmaWVyIHx8IGFzdC50eXBlID09PSBBU1QuTWVtYmVyRXhwcmVzc2lvbjtcbn1cblxuZnVuY3Rpb24gYXNzaWduYWJsZUFTVChhc3QpIHtcbiAgaWYgKGFzdC5ib2R5Lmxlbmd0aCA9PT0gMSAmJiBpc0Fzc2lnbmFibGUoYXN0LmJvZHlbMF0uZXhwcmVzc2lvbikpIHtcbiAgICByZXR1cm4ge3R5cGU6IEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbiwgbGVmdDogYXN0LmJvZHlbMF0uZXhwcmVzc2lvbiwgcmlnaHQ6IHt0eXBlOiBBU1QuTkdWYWx1ZVBhcmFtZXRlcn0sIG9wZXJhdG9yOiAnPSd9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzTGl0ZXJhbChhc3QpIHtcbiAgcmV0dXJuIGFzdC5ib2R5Lmxlbmd0aCA9PT0gMCB8fFxuICAgICAgYXN0LmJvZHkubGVuZ3RoID09PSAxICYmIChcbiAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSA9PT0gQVNULkxpdGVyYWwgfHxcbiAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSA9PT0gQVNULkFycmF5RXhwcmVzc2lvbiB8fFxuICAgICAgYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlID09PSBBU1QuT2JqZWN0RXhwcmVzc2lvbik7XG59XG5cbmZ1bmN0aW9uIGlzQ29uc3RhbnQoYXN0KSB7XG4gIHJldHVybiBhc3QuY29uc3RhbnQ7XG59XG5cbmZ1bmN0aW9uIEFTVENvbXBpbGVyKCRmaWx0ZXIpIHtcbiAgdGhpcy4kZmlsdGVyID0gJGZpbHRlcjtcbn1cblxuQVNUQ29tcGlsZXIucHJvdG90eXBlID0ge1xuICBjb21waWxlOiBmdW5jdGlvbihhc3QpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5leHRJZDogMCxcbiAgICAgIGZpbHRlcnM6IHt9LFxuICAgICAgZm46IHt2YXJzOiBbXSwgYm9keTogW10sIG93bjoge319LFxuICAgICAgYXNzaWduOiB7dmFyczogW10sIGJvZHk6IFtdLCBvd246IHt9fSxcbiAgICAgIGlucHV0czogW11cbiAgICB9O1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgIHZhciBleHRyYSA9ICcnO1xuICAgIHZhciBhc3NpZ25hYmxlO1xuICAgIHRoaXMuc3RhZ2UgPSAnYXNzaWduJztcbiAgICBpZiAoKGFzc2lnbmFibGUgPSBhc3NpZ25hYmxlQVNUKGFzdCkpKSB7XG4gICAgICB0aGlzLnN0YXRlLmNvbXB1dGluZyA9ICdhc3NpZ24nO1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMubmV4dElkKCk7XG4gICAgICB0aGlzLnJlY3Vyc2UoYXNzaWduYWJsZSwgcmVzdWx0KTtcbiAgICAgIHRoaXMucmV0dXJuXyhyZXN1bHQpO1xuICAgICAgZXh0cmEgPSAnZm4uYXNzaWduPScgKyB0aGlzLmdlbmVyYXRlRnVuY3Rpb24oJ2Fzc2lnbicsICdzLHYsbCcpO1xuICAgIH1cbiAgICB2YXIgdG9XYXRjaCA9IGdldElucHV0cyhhc3QuYm9keSk7XG4gICAgc2VsZi5zdGFnZSA9ICdpbnB1dHMnO1xuICAgIGZvckVhY2godG9XYXRjaCwgZnVuY3Rpb24od2F0Y2gsIGtleSkge1xuICAgICAgdmFyIGZuS2V5ID0gJ2ZuJyArIGtleTtcbiAgICAgIHNlbGYuc3RhdGVbZm5LZXldID0ge3ZhcnM6IFtdLCBib2R5OiBbXSwgb3duOiB7fX07XG4gICAgICBzZWxmLnN0YXRlLmNvbXB1dGluZyA9IGZuS2V5O1xuICAgICAgdmFyIGludG9JZCA9IHNlbGYubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2Uod2F0Y2gsIGludG9JZCk7XG4gICAgICBzZWxmLnJldHVybl8oaW50b0lkKTtcbiAgICAgIHNlbGYuc3RhdGUuaW5wdXRzLnB1c2goe25hbWU6IGZuS2V5LCBpc1B1cmU6IHdhdGNoLmlzUHVyZX0pO1xuICAgICAgd2F0Y2gud2F0Y2hJZCA9IGtleTtcbiAgICB9KTtcbiAgICB0aGlzLnN0YXRlLmNvbXB1dGluZyA9ICdmbic7XG4gICAgdGhpcy5zdGFnZSA9ICdtYWluJztcbiAgICB0aGlzLnJlY3Vyc2UoYXN0KTtcbiAgICB2YXIgZm5TdHJpbmcgPVxuICAgICAgLy8gVGhlIGJ1aWxkIGFuZCBtaW5pZmljYXRpb24gc3RlcHMgcmVtb3ZlIHRoZSBzdHJpbmcgXCJ1c2Ugc3RyaWN0XCIgZnJvbSB0aGUgY29kZSwgYnV0IHRoaXMgaXMgZG9uZSB1c2luZyBhIHJlZ2V4LlxuICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIHRoaXMgdW50aWwgd2UgZG8gYSBiZXR0ZXIgam9iIGF0IG9ubHkgcmVtb3ZpbmcgdGhlIHByZWZpeCBvbmx5IHdoZW4gd2Ugc2hvdWxkLlxuICAgICAgJ1wiJyArIHRoaXMuVVNFICsgJyAnICsgdGhpcy5TVFJJQ1QgKyAnXCI7XFxuJyArXG4gICAgICB0aGlzLmZpbHRlclByZWZpeCgpICtcbiAgICAgICd2YXIgZm49JyArIHRoaXMuZ2VuZXJhdGVGdW5jdGlvbignZm4nLCAncyxsLGEsaScpICtcbiAgICAgIGV4dHJhICtcbiAgICAgIHRoaXMud2F0Y2hGbnMoKSArXG4gICAgICAncmV0dXJuIGZuOyc7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICB2YXIgZm4gPSAobmV3IEZ1bmN0aW9uKCckZmlsdGVyJyxcbiAgICAgICAgJ2dldFN0cmluZ1ZhbHVlJyxcbiAgICAgICAgJ2lmRGVmaW5lZCcsXG4gICAgICAgICdwbHVzJyxcbiAgICAgICAgZm5TdHJpbmcpKShcbiAgICAgICAgICB0aGlzLiRmaWx0ZXIsXG4gICAgICAgICAgZ2V0U3RyaW5nVmFsdWUsXG4gICAgICAgICAgaWZEZWZpbmVkLFxuICAgICAgICAgIHBsdXNGbik7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuc3RhZ2UgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGZuO1xuICB9LFxuXG4gIFVTRTogJ3VzZScsXG5cbiAgU1RSSUNUOiAnc3RyaWN0JyxcblxuICB3YXRjaEZuczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpbnB1dHMgPSB0aGlzLnN0YXRlLmlucHV0cztcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaChpbnB1dHMsIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICByZXN1bHQucHVzaCgndmFyICcgKyBpbnB1dC5uYW1lICsgJz0nICsgc2VsZi5nZW5lcmF0ZUZ1bmN0aW9uKGlucHV0Lm5hbWUsICdzJykpO1xuICAgICAgaWYgKGlucHV0LmlzUHVyZSkge1xuICAgICAgICByZXN1bHQucHVzaChpbnB1dC5uYW1lLCAnLmlzUHVyZT0nICsgSlNPTi5zdHJpbmdpZnkoaW5wdXQuaXNQdXJlKSArICc7Jyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGlucHV0cy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCdmbi5pbnB1dHM9WycgKyBpbnB1dHMubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGkubmFtZTsgfSkuam9pbignLCcpICsgJ107Jyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH0sXG5cbiAgZ2VuZXJhdGVGdW5jdGlvbjogZnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbignICsgcGFyYW1zICsgJyl7JyArXG4gICAgICAgIHRoaXMudmFyc1ByZWZpeChuYW1lKSArXG4gICAgICAgIHRoaXMuYm9keShuYW1lKSArXG4gICAgICAgICd9Oyc7XG4gIH0sXG5cbiAgZmlsdGVyUHJlZml4OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaCh0aGlzLnN0YXRlLmZpbHRlcnMsIGZ1bmN0aW9uKGlkLCBmaWx0ZXIpIHtcbiAgICAgIHBhcnRzLnB1c2goaWQgKyAnPSRmaWx0ZXIoJyArIHNlbGYuZXNjYXBlKGZpbHRlcikgKyAnKScpO1xuICAgIH0pO1xuICAgIGlmIChwYXJ0cy5sZW5ndGgpIHJldHVybiAndmFyICcgKyBwYXJ0cy5qb2luKCcsJykgKyAnOyc7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIHZhcnNQcmVmaXg6IGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVtzZWN0aW9uXS52YXJzLmxlbmd0aCA/ICd2YXIgJyArIHRoaXMuc3RhdGVbc2VjdGlvbl0udmFycy5qb2luKCcsJykgKyAnOycgOiAnJztcbiAgfSxcblxuICBib2R5OiBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVbc2VjdGlvbl0uYm9keS5qb2luKCcnKTtcbiAgfSxcblxuICByZWN1cnNlOiBmdW5jdGlvbihhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgdmFyIGxlZnQsIHJpZ2h0LCBzZWxmID0gdGhpcywgYXJncywgZXhwcmVzc2lvbiwgY29tcHV0ZWQ7XG4gICAgcmVjdXJzaW9uRm4gPSByZWN1cnNpb25GbiB8fCBub29wO1xuICAgIGlmICghc2tpcFdhdGNoSWRDaGVjayAmJiBpc0RlZmluZWQoYXN0LndhdGNoSWQpKSB7XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHRoaXMuaWZfKCdpJyxcbiAgICAgICAgdGhpcy5sYXp5QXNzaWduKGludG9JZCwgdGhpcy5jb21wdXRlZE1lbWJlcignaScsIGFzdC53YXRjaElkKSksXG4gICAgICAgIHRoaXMubGF6eVJlY3Vyc2UoYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgdHJ1ZSlcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAoYXN0LnR5cGUpIHtcbiAgICBjYXNlIEFTVC5Qcm9ncmFtOlxuICAgICAgZm9yRWFjaChhc3QuYm9keSwgZnVuY3Rpb24oZXhwcmVzc2lvbiwgcG9zKSB7XG4gICAgICAgIHNlbGYucmVjdXJzZShleHByZXNzaW9uLmV4cHJlc3Npb24sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbihleHByKSB7IHJpZ2h0ID0gZXhwcjsgfSk7XG4gICAgICAgIGlmIChwb3MgIT09IGFzdC5ib2R5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBzZWxmLmN1cnJlbnQoKS5ib2R5LnB1c2gocmlnaHQsICc7Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5yZXR1cm5fKHJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgICAgZXhwcmVzc2lvbiA9IHRoaXMuZXNjYXBlKGFzdC52YWx1ZSk7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8IGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5hcmd1bWVudCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgIGV4cHJlc3Npb24gPSBhc3Qub3BlcmF0b3IgKyAnKCcgKyB0aGlzLmlmRGVmaW5lZChyaWdodCwgMCkgKyAnKSc7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oZXhwcmVzc2lvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5sZWZ0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikgeyBsZWZ0ID0gZXhwcjsgfSk7XG4gICAgICB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikgeyByaWdodCA9IGV4cHI7IH0pO1xuICAgICAgaWYgKGFzdC5vcGVyYXRvciA9PT0gJysnKSB7XG4gICAgICAgIGV4cHJlc3Npb24gPSB0aGlzLnBsdXMobGVmdCwgcmlnaHQpO1xuICAgICAgfSBlbHNlIGlmIChhc3Qub3BlcmF0b3IgPT09ICctJykge1xuICAgICAgICBleHByZXNzaW9uID0gdGhpcy5pZkRlZmluZWQobGVmdCwgMCkgKyBhc3Qub3BlcmF0b3IgKyB0aGlzLmlmRGVmaW5lZChyaWdodCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHByZXNzaW9uID0gJygnICsgbGVmdCArICcpJyArIGFzdC5vcGVyYXRvciArICcoJyArIHJpZ2h0ICsgJyknO1xuICAgICAgfVxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuTG9naWNhbEV4cHJlc3Npb246XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QubGVmdCwgaW50b0lkKTtcbiAgICAgIHNlbGYuaWZfKGFzdC5vcGVyYXRvciA9PT0gJyYmJyA/IGludG9JZCA6IHNlbGYubm90KGludG9JZCksIHNlbGYubGF6eVJlY3Vyc2UoYXN0LnJpZ2h0LCBpbnRvSWQpKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QudGVzdCwgaW50b0lkKTtcbiAgICAgIHNlbGYuaWZfKGludG9JZCwgc2VsZi5sYXp5UmVjdXJzZShhc3QuYWx0ZXJuYXRlLCBpbnRvSWQpLCBzZWxmLmxhenlSZWN1cnNlKGFzdC5jb25zZXF1ZW50LCBpbnRvSWQpKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5JZGVudGlmaWVyOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBpZiAobmFtZUlkKSB7XG4gICAgICAgIG5hbWVJZC5jb250ZXh0ID0gc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgPyAncycgOiB0aGlzLmFzc2lnbih0aGlzLm5leHRJZCgpLCB0aGlzLmdldEhhc093blByb3BlcnR5KCdsJywgYXN0Lm5hbWUpICsgJz9sOnMnKTtcbiAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgIG5hbWVJZC5uYW1lID0gYXN0Lm5hbWU7XG4gICAgICB9XG4gICAgICBzZWxmLmlmXyhzZWxmLnN0YWdlID09PSAnaW5wdXRzJyB8fCBzZWxmLm5vdChzZWxmLmdldEhhc093blByb3BlcnR5KCdsJywgYXN0Lm5hbWUpKSxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5pZl8oc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgfHwgJ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgIHNlbGYuaWZfKFxuICAgICAgICAgICAgICAgIHNlbGYuaXNOdWxsKHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ3MnLCBhc3QubmFtZSkpLFxuICAgICAgICAgICAgICAgIHNlbGYubGF6eUFzc2lnbihzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpLCAne30nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ3MnLCBhc3QubmFtZSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBpbnRvSWQgJiYgc2VsZi5sYXp5QXNzaWduKGludG9JZCwgc2VsZi5ub25Db21wdXRlZE1lbWJlcignbCcsIGFzdC5uYW1lKSlcbiAgICAgICAgKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IG5hbWVJZCAmJiAobmFtZUlkLmNvbnRleHQgPSB0aGlzLm5leHRJZCgpKSB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0Lm9iamVjdCwgbGVmdCwgdW5kZWZpbmVkLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5pZl8oc2VsZi5ub3ROdWxsKGxlZnQpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoYXN0LmNvbXB1dGVkKSB7XG4gICAgICAgICAgICByaWdodCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LnByb3BlcnR5LCByaWdodCk7XG4gICAgICAgICAgICBzZWxmLmdldFN0cmluZ1ZhbHVlKHJpZ2h0KTtcbiAgICAgICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90KHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpKSwgc2VsZi5sYXp5QXNzaWduKHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpLCAne30nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5jb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCk7XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICAgICAgICBuYW1lSWQuY29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBuYW1lSWQubmFtZSA9IHJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhzZWxmLmlzTnVsbChzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKSksIHNlbGYubGF6eUFzc2lnbihzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgYXN0LnByb3BlcnR5Lm5hbWUpO1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICAgIGlmIChuYW1lSWQpIHtcbiAgICAgICAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIG5hbWVJZC5uYW1lID0gYXN0LnByb3BlcnR5Lm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsICd1bmRlZmluZWQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICB9LCAhIWNyZWF0ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaWYgKGFzdC5maWx0ZXIpIHtcbiAgICAgICAgcmlnaHQgPSBzZWxmLmZpbHRlcihhc3QuY2FsbGVlLm5hbWUpO1xuICAgICAgICBhcmdzID0gW107XG4gICAgICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgIHZhciBhcmd1bWVudCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHIsIGFyZ3VtZW50KTtcbiAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHJpZ2h0ICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByaWdodCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgIGxlZnQgPSB7fTtcbiAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LmNhbGxlZSwgcmlnaHQsIGxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90TnVsbChyaWdodCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgICAgICAgIHNlbGYucmVjdXJzZShleHByLCBhc3QuY29uc3RhbnQgPyB1bmRlZmluZWQgOiBzZWxmLm5leHRJZCgpLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChsZWZ0Lm5hbWUpIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubWVtYmVyKGxlZnQuY29udGV4dCwgbGVmdC5uYW1lLCBsZWZ0LmNvbXB1dGVkKSArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHJpZ2h0ICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCAndW5kZWZpbmVkJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbjpcbiAgICAgIHJpZ2h0ID0gdGhpcy5uZXh0SWQoKTtcbiAgICAgIGxlZnQgPSB7fTtcbiAgICAgIHRoaXMucmVjdXJzZShhc3QubGVmdCwgdW5kZWZpbmVkLCBsZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5pZl8oc2VsZi5ub3ROdWxsKGxlZnQuY29udGV4dCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYucmVjdXJzZShhc3QucmlnaHQsIHJpZ2h0KTtcbiAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5tZW1iZXIobGVmdC5jb250ZXh0LCBsZWZ0Lm5hbWUsIGxlZnQuY29tcHV0ZWQpICsgYXN0Lm9wZXJhdG9yICsgcmlnaHQ7XG4gICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICByZWN1cnNpb25GbihpbnRvSWQgfHwgZXhwcmVzc2lvbik7XG4gICAgICAgIH0pO1xuICAgICAgfSwgMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5BcnJheUV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5lbGVtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICBzZWxmLnJlY3Vyc2UoZXhwciwgYXN0LmNvbnN0YW50ID8gdW5kZWZpbmVkIDogc2VsZi5uZXh0SWQoKSwgdW5kZWZpbmVkLCBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBleHByZXNzaW9uID0gJ1snICsgYXJncy5qb2luKCcsJykgKyAnXSc7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8IGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGNvbXB1dGVkID0gZmFsc2U7XG4gICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICBpZiAocHJvcGVydHkuY29tcHV0ZWQpIHtcbiAgICAgICAgICBjb21wdXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgICB0aGlzLmFzc2lnbihpbnRvSWQsICd7fScpO1xuICAgICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eS5jb21wdXRlZCkge1xuICAgICAgICAgICAgbGVmdCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkua2V5LCBsZWZ0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGVmdCA9IHByb3BlcnR5LmtleS50eXBlID09PSBBU1QuSWRlbnRpZmllciA/XG4gICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LmtleS5uYW1lIDpcbiAgICAgICAgICAgICAgICAgICAgICAgKCcnICsgcHJvcGVydHkua2V5LnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmlnaHQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICAgIHNlbGYucmVjdXJzZShwcm9wZXJ0eS52YWx1ZSwgcmlnaHQpO1xuICAgICAgICAgIHNlbGYuYXNzaWduKHNlbGYubWVtYmVyKGludG9JZCwgbGVmdCwgcHJvcGVydHkuY29tcHV0ZWQpLCByaWdodCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkudmFsdWUsIGFzdC5jb25zdGFudCA/IHVuZGVmaW5lZCA6IHNlbGYubmV4dElkKCksIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgICAgYXJncy5wdXNoKHNlbGYuZXNjYXBlKFxuICAgICAgICAgICAgICAgIHByb3BlcnR5LmtleS50eXBlID09PSBBU1QuSWRlbnRpZmllciA/IHByb3BlcnR5LmtleS5uYW1lIDpcbiAgICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSkpICtcbiAgICAgICAgICAgICAgICAnOicgKyBleHByKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGV4cHJlc3Npb24gPSAneycgKyBhcmdzLmpvaW4oJywnKSArICd9JztcbiAgICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIH1cbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCBleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAncycpO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8ICdzJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Mb2NhbHNFeHByZXNzaW9uOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAnbCcpO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8ICdsJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5OR1ZhbHVlUGFyYW1ldGVyOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAndicpO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8ICd2Jyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0sXG5cbiAgZ2V0SGFzT3duUHJvcGVydHk6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gICAgdmFyIGtleSA9IGVsZW1lbnQgKyAnLicgKyBwcm9wZXJ0eTtcbiAgICB2YXIgb3duID0gdGhpcy5jdXJyZW50KCkub3duO1xuICAgIGlmICghb3duLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIG93bltrZXldID0gdGhpcy5uZXh0SWQoZmFsc2UsIGVsZW1lbnQgKyAnJiYoJyArIHRoaXMuZXNjYXBlKHByb3BlcnR5KSArICcgaW4gJyArIGVsZW1lbnQgKyAnKScpO1xuICAgIH1cbiAgICByZXR1cm4gb3duW2tleV07XG4gIH0sXG5cbiAgYXNzaWduOiBmdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgICBpZiAoIWlkKSByZXR1cm47XG4gICAgdGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKGlkLCAnPScsIHZhbHVlLCAnOycpO1xuICAgIHJldHVybiBpZDtcbiAgfSxcblxuICBmaWx0ZXI6IGZ1bmN0aW9uKGZpbHRlck5hbWUpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuZmlsdGVycy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXJOYW1lKSkge1xuICAgICAgdGhpcy5zdGF0ZS5maWx0ZXJzW2ZpbHRlck5hbWVdID0gdGhpcy5uZXh0SWQodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0YXRlLmZpbHRlcnNbZmlsdGVyTmFtZV07XG4gIH0sXG5cbiAgaWZEZWZpbmVkOiBmdW5jdGlvbihpZCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuICdpZkRlZmluZWQoJyArIGlkICsgJywnICsgdGhpcy5lc2NhcGUoZGVmYXVsdFZhbHVlKSArICcpJztcbiAgfSxcblxuICBwbHVzOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiAncGx1cygnICsgbGVmdCArICcsJyArIHJpZ2h0ICsgJyknO1xuICB9LFxuXG4gIHJldHVybl86IGZ1bmN0aW9uKGlkKSB7XG4gICAgdGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKCdyZXR1cm4gJywgaWQsICc7Jyk7XG4gIH0sXG5cbiAgaWZfOiBmdW5jdGlvbih0ZXN0LCBhbHRlcm5hdGUsIGNvbnNlcXVlbnQpIHtcbiAgICBpZiAodGVzdCA9PT0gdHJ1ZSkge1xuICAgICAgYWx0ZXJuYXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBib2R5ID0gdGhpcy5jdXJyZW50KCkuYm9keTtcbiAgICAgIGJvZHkucHVzaCgnaWYoJywgdGVzdCwgJyl7Jyk7XG4gICAgICBhbHRlcm5hdGUoKTtcbiAgICAgIGJvZHkucHVzaCgnfScpO1xuICAgICAgaWYgKGNvbnNlcXVlbnQpIHtcbiAgICAgICAgYm9keS5wdXNoKCdlbHNleycpO1xuICAgICAgICBjb25zZXF1ZW50KCk7XG4gICAgICAgIGJvZHkucHVzaCgnfScpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBub3Q6IGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gJyEoJyArIGV4cHJlc3Npb24gKyAnKSc7XG4gIH0sXG5cbiAgaXNOdWxsOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24gKyAnPT1udWxsJztcbiAgfSxcblxuICBub3ROdWxsOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24gKyAnIT1udWxsJztcbiAgfSxcblxuICBub25Db21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICB2YXIgU0FGRV9JREVOVElGSUVSID0gL15bJF9hLXpBLVpdWyRfYS16QS1aMC05XSokLztcbiAgICB2YXIgVU5TQUZFX0NIQVJBQ1RFUlMgPSAvW14kX2EtekEtWjAtOV0vZztcbiAgICBpZiAoU0FGRV9JREVOVElGSUVSLnRlc3QocmlnaHQpKSB7XG4gICAgICByZXR1cm4gbGVmdCArICcuJyArIHJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbGVmdCAgKyAnW1wiJyArIHJpZ2h0LnJlcGxhY2UoVU5TQUZFX0NIQVJBQ1RFUlMsIHRoaXMuc3RyaW5nRXNjYXBlRm4pICsgJ1wiXSc7XG4gICAgfVxuICB9LFxuXG4gIGNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBsZWZ0ICsgJ1snICsgcmlnaHQgKyAnXSc7XG4gIH0sXG5cbiAgbWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29tcHV0ZWQpIHtcbiAgICBpZiAoY29tcHV0ZWQpIHJldHVybiB0aGlzLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KTtcbiAgICByZXR1cm4gdGhpcy5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCk7XG4gIH0sXG5cbiAgZ2V0U3RyaW5nVmFsdWU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmFzc2lnbihpdGVtLCAnZ2V0U3RyaW5nVmFsdWUoJyArIGl0ZW0gKyAnKScpO1xuICB9LFxuXG4gIGxhenlSZWN1cnNlOiBmdW5jdGlvbihhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKTtcbiAgICB9O1xuICB9LFxuXG4gIGxhenlBc3NpZ246IGZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmFzc2lnbihpZCwgdmFsdWUpO1xuICAgIH07XG4gIH0sXG5cbiAgc3RyaW5nRXNjYXBlUmVnZXg6IC9bXiBhLXpBLVowLTldL2csXG5cbiAgc3RyaW5nRXNjYXBlRm46IGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArICgnMDAwMCcgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XG4gIH0sXG5cbiAgZXNjYXBlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHJldHVybiAnXFwnJyArIHZhbHVlLnJlcGxhY2UodGhpcy5zdHJpbmdFc2NhcGVSZWdleCwgdGhpcy5zdHJpbmdFc2NhcGVGbikgKyAnXFwnJztcbiAgICBpZiAoaXNOdW1iZXIodmFsdWUpKSByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICBpZiAodmFsdWUgPT09IHRydWUpIHJldHVybiAndHJ1ZSc7XG4gICAgaWYgKHZhbHVlID09PSBmYWxzZSkgcmV0dXJuICdmYWxzZSc7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG5cbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2VzYycsICdJTVBPU1NJQkxFJyk7XG4gIH0sXG5cbiAgbmV4dElkOiBmdW5jdGlvbihza2lwLCBpbml0KSB7XG4gICAgdmFyIGlkID0gJ3YnICsgKHRoaXMuc3RhdGUubmV4dElkKyspO1xuICAgIGlmICghc2tpcCkge1xuICAgICAgdGhpcy5jdXJyZW50KCkudmFycy5wdXNoKGlkICsgKGluaXQgPyAnPScgKyBpbml0IDogJycpKTtcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xuICB9LFxuXG4gIGN1cnJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlW3RoaXMuc3RhdGUuY29tcHV0aW5nXTtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBBU1RJbnRlcnByZXRlcigkZmlsdGVyKSB7XG4gIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG59XG5cbkFTVEludGVycHJldGVyLnByb3RvdHlwZSA9IHtcbiAgY29tcGlsZTogZnVuY3Rpb24oYXN0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgIHZhciBhc3NpZ25hYmxlO1xuICAgIHZhciBhc3NpZ247XG4gICAgaWYgKChhc3NpZ25hYmxlID0gYXNzaWduYWJsZUFTVChhc3QpKSkge1xuICAgICAgYXNzaWduID0gdGhpcy5yZWN1cnNlKGFzc2lnbmFibGUpO1xuICAgIH1cbiAgICB2YXIgdG9XYXRjaCA9IGdldElucHV0cyhhc3QuYm9keSk7XG4gICAgdmFyIGlucHV0cztcbiAgICBpZiAodG9XYXRjaCkge1xuICAgICAgaW5wdXRzID0gW107XG4gICAgICBmb3JFYWNoKHRvV2F0Y2gsIGZ1bmN0aW9uKHdhdGNoLCBrZXkpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gc2VsZi5yZWN1cnNlKHdhdGNoKTtcbiAgICAgICAgaW5wdXQuaXNQdXJlID0gd2F0Y2guaXNQdXJlO1xuICAgICAgICB3YXRjaC5pbnB1dCA9IGlucHV0O1xuICAgICAgICBpbnB1dHMucHVzaChpbnB1dCk7XG4gICAgICAgIHdhdGNoLndhdGNoSWQgPSBrZXk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGV4cHJlc3Npb25zID0gW107XG4gICAgZm9yRWFjaChhc3QuYm9keSwgZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgICAgZXhwcmVzc2lvbnMucHVzaChzZWxmLnJlY3Vyc2UoZXhwcmVzc2lvbi5leHByZXNzaW9uKSk7XG4gICAgfSk7XG4gICAgdmFyIGZuID0gYXN0LmJvZHkubGVuZ3RoID09PSAwID8gbm9vcCA6XG4gICAgICAgICAgICAgYXN0LmJvZHkubGVuZ3RoID09PSAxID8gZXhwcmVzc2lvbnNbMF0gOlxuICAgICAgICAgICAgIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMpIHtcbiAgICAgICAgICAgICAgIHZhciBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgICBmb3JFYWNoKGV4cHJlc3Npb25zLCBmdW5jdGlvbihleHApIHtcbiAgICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gZXhwKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICByZXR1cm4gbGFzdFZhbHVlO1xuICAgICAgICAgICAgIH07XG4gICAgaWYgKGFzc2lnbikge1xuICAgICAgZm4uYXNzaWduID0gZnVuY3Rpb24oc2NvcGUsIHZhbHVlLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuIGFzc2lnbihzY29wZSwgbG9jYWxzLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaW5wdXRzKSB7XG4gICAgICBmbi5pbnB1dHMgPSBpbnB1dHM7XG4gICAgfVxuICAgIHJldHVybiBmbjtcbiAgfSxcblxuICByZWN1cnNlOiBmdW5jdGlvbihhc3QsIGNvbnRleHQsIGNyZWF0ZSkge1xuICAgIHZhciBsZWZ0LCByaWdodCwgc2VsZiA9IHRoaXMsIGFyZ3M7XG4gICAgaWYgKGFzdC5pbnB1dCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzKGFzdC5pbnB1dCwgYXN0LndhdGNoSWQpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGFzdC50eXBlKSB7XG4gICAgY2FzZSBBU1QuTGl0ZXJhbDpcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlKGFzdC52YWx1ZSwgY29udGV4dCk7XG4gICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LmFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0aGlzWyd1bmFyeScgKyBhc3Qub3BlcmF0b3JdKHJpZ2h0LCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3QubGVmdCk7XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucmlnaHQpO1xuICAgICAgcmV0dXJuIHRoaXNbJ2JpbmFyeScgKyBhc3Qub3BlcmF0b3JdKGxlZnQsIHJpZ2h0LCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5Mb2dpY2FsRXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQpO1xuICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0KTtcbiAgICAgIHJldHVybiB0aGlzWydiaW5hcnknICsgYXN0Lm9wZXJhdG9yXShsZWZ0LCByaWdodCwgY29udGV4dCk7XG4gICAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIHRoaXNbJ3Rlcm5hcnk/OiddKFxuICAgICAgICB0aGlzLnJlY3Vyc2UoYXN0LnRlc3QpLFxuICAgICAgICB0aGlzLnJlY3Vyc2UoYXN0LmFsdGVybmF0ZSksXG4gICAgICAgIHRoaXMucmVjdXJzZShhc3QuY29uc2VxdWVudCksXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICAgIHJldHVybiBzZWxmLmlkZW50aWZpZXIoYXN0Lm5hbWUsIGNvbnRleHQsIGNyZWF0ZSk7XG4gICAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0Lm9iamVjdCwgZmFsc2UsICEhY3JlYXRlKTtcbiAgICAgIGlmICghYXN0LmNvbXB1dGVkKSB7XG4gICAgICAgIHJpZ2h0ID0gYXN0LnByb3BlcnR5Lm5hbWU7XG4gICAgICB9XG4gICAgICBpZiAoYXN0LmNvbXB1dGVkKSByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucHJvcGVydHkpO1xuICAgICAgcmV0dXJuIGFzdC5jb21wdXRlZCA/XG4gICAgICAgIHRoaXMuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQsIGNvbnRleHQsIGNyZWF0ZSkgOlxuICAgICAgICB0aGlzLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0LCBjb250ZXh0LCBjcmVhdGUpO1xuICAgIGNhc2UgQVNULkNhbGxFeHByZXNzaW9uOlxuICAgICAgYXJncyA9IFtdO1xuICAgICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIGFyZ3MucHVzaChzZWxmLnJlY3Vyc2UoZXhwcikpO1xuICAgICAgfSk7XG4gICAgICBpZiAoYXN0LmZpbHRlcikgcmlnaHQgPSB0aGlzLiRmaWx0ZXIoYXN0LmNhbGxlZS5uYW1lKTtcbiAgICAgIGlmICghYXN0LmZpbHRlcikgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LmNhbGxlZSwgdHJ1ZSk7XG4gICAgICByZXR1cm4gYXN0LmZpbHRlciA/XG4gICAgICAgIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goYXJnc1tpXShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdmFsdWUgPSByaWdodC5hcHBseSh1bmRlZmluZWQsIHZhbHVlcywgaW5wdXRzKTtcbiAgICAgICAgICByZXR1cm4gY29udGV4dCA/IHtjb250ZXh0OiB1bmRlZmluZWQsIG5hbWU6IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgICB9IDpcbiAgICAgICAgZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICBpZiAocmhzLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICB2YWx1ZXMucHVzaChhcmdzW2ldKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IHJocy52YWx1ZS5hcHBseShyaHMuY29udGV4dCwgdmFsdWVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgICB9O1xuICAgIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3QubGVmdCwgdHJ1ZSwgMSk7XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucmlnaHQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgbGhzLmNvbnRleHRbbGhzLm5hbWVdID0gcmhzO1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogcmhzfSA6IHJocztcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuQXJyYXlFeHByZXNzaW9uOlxuICAgICAgYXJncyA9IFtdO1xuICAgICAgZm9yRWFjaChhc3QuZWxlbWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgYXJncy5wdXNoKHNlbGYucmVjdXJzZShleHByKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgdmFsdWUucHVzaChhcmdzW2ldKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5PYmplY3RFeHByZXNzaW9uOlxuICAgICAgYXJncyA9IFtdO1xuICAgICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5LmNvbXB1dGVkKSB7XG4gICAgICAgICAgYXJncy5wdXNoKHtrZXk6IHNlbGYucmVjdXJzZShwcm9wZXJ0eS5rZXkpLFxuICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5yZWN1cnNlKHByb3BlcnR5LnZhbHVlKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFyZ3MucHVzaCh7a2V5OiBwcm9wZXJ0eS5rZXkudHlwZSA9PT0gQVNULklkZW50aWZpZXIgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS5rZXkubmFtZSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICBjb21wdXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5yZWN1cnNlKHByb3BlcnR5LnZhbHVlKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgaWYgKGFyZ3NbaV0uY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIHZhbHVlW2FyZ3NbaV0ua2V5KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKV0gPSBhcmdzW2ldLnZhbHVlKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWVbYXJnc1tpXS5rZXldID0gYXJnc1tpXS52YWx1ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTtcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuVGhpc0V4cHJlc3Npb246XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHNjb3BlfSA6IHNjb3BlO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5Mb2NhbHNFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGxvY2Fsc30gOiBsb2NhbHM7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULk5HVmFsdWVQYXJhbWV0ZXI6XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhc3NpZ259IDogYXNzaWduO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgJ3VuYXJ5Kyc6IGZ1bmN0aW9uKGFyZ3VtZW50LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gYXJndW1lbnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgaWYgKGlzRGVmaW5lZChhcmcpKSB7XG4gICAgICAgIGFyZyA9ICthcmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcmcgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ3VuYXJ5LSc6IGZ1bmN0aW9uKGFyZ3VtZW50LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gYXJndW1lbnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgaWYgKGlzRGVmaW5lZChhcmcpKSB7XG4gICAgICAgIGFyZyA9IC1hcmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcmcgPSAtMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd1bmFyeSEnOiBmdW5jdGlvbihhcmd1bWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9ICFhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Kyc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIGFyZyA9IHBsdXNGbihsaHMsIHJocyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5LSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIGFyZyA9IChpc0RlZmluZWQobGhzKSA/IGxocyA6IDApIC0gKGlzRGVmaW5lZChyaHMpID8gcmhzIDogMCk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Kic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgKiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Lyc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgLyByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5JSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgJSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PT09JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA9PT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSE9PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgIT09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk9PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSE9JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAhPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PCc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPCByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Pic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PD0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIDw9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk+PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPj0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSYmJzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAmJiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5fHwnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHx8IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd0ZXJuYXJ5PzonOiBmdW5jdGlvbih0ZXN0LCBhbHRlcm5hdGUsIGNvbnNlcXVlbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSB0ZXN0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA/IGFsdGVybmF0ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgOiBjb25zZXF1ZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gIHZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbnRleHQgPyB7Y29udGV4dDogdW5kZWZpbmVkLCBuYW1lOiB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTsgfTtcbiAgfSxcbiAgaWRlbnRpZmllcjogZnVuY3Rpb24obmFtZSwgY29udGV4dCwgY3JlYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYmFzZSA9IGxvY2FscyAmJiAobmFtZSBpbiBsb2NhbHMpID8gbG9jYWxzIDogc2NvcGU7XG4gICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSAmJiBiYXNlICYmIGJhc2VbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICBiYXNlW25hbWVdID0ge307XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBiYXNlID8gYmFzZVtuYW1lXSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB7Y29udGV4dDogYmFzZSwgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBjb21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQsIGNyZWF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIHJocztcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIGlmIChsaHMgIT0gbnVsbCkge1xuICAgICAgICByaHMgPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJocyA9IGdldFN0cmluZ1ZhbHVlKHJocyk7XG4gICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgaWYgKGxocyAmJiAhKGxoc1tyaHNdKSkge1xuICAgICAgICAgICAgbGhzW3Joc10gPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBsaHNbcmhzXTtcbiAgICAgIH1cbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB7Y29udGV4dDogbGhzLCBuYW1lOiByaHMsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgbm9uQ29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0LCBjcmVhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgIGlmIChsaHMgJiYgbGhzW3JpZ2h0XSA9PSBudWxsKSB7XG4gICAgICAgICAgbGhzW3JpZ2h0XSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBsaHMgIT0gbnVsbCA/IGxoc1tyaWdodF0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4ge2NvbnRleHQ6IGxocywgbmFtZTogcmlnaHQsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgaW5wdXRzOiBmdW5jdGlvbihpbnB1dCwgd2F0Y2hJZCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgdmFsdWUsIGxvY2FscywgaW5wdXRzKSB7XG4gICAgICBpZiAoaW5wdXRzKSByZXR1cm4gaW5wdXRzW3dhdGNoSWRdO1xuICAgICAgcmV0dXJuIGlucHV0KHNjb3BlLCB2YWx1ZSwgbG9jYWxzKTtcbiAgICB9O1xuICB9XG59O1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYXJzZXIobGV4ZXIsICRmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy5hc3QgPSBuZXcgQVNUKGxleGVyLCBvcHRpb25zKTtcbiAgdGhpcy5hc3RDb21waWxlciA9IG9wdGlvbnMuY3NwID8gbmV3IEFTVEludGVycHJldGVyKCRmaWx0ZXIpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEFTVENvbXBpbGVyKCRmaWx0ZXIpO1xufVxuXG5QYXJzZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGFyc2VyLFxuXG4gIHBhcnNlOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIGFzdCA9IHRoaXMuYXN0LmFzdCh0ZXh0KTtcbiAgICB2YXIgZm4gPSB0aGlzLmFzdENvbXBpbGVyLmNvbXBpbGUoYXN0KTtcbiAgICBmbi5saXRlcmFsID0gaXNMaXRlcmFsKGFzdCk7XG4gICAgZm4uY29uc3RhbnQgPSBpc0NvbnN0YW50KGFzdCk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRWYWx1ZU9mKHZhbHVlKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlLnZhbHVlT2YpID8gdmFsdWUudmFsdWVPZigpIDogb2JqZWN0VmFsdWVPZi5jYWxsKHZhbHVlKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHBhcnNlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbnZlcnRzIEFuZ3VsYXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW50byBhIGZ1bmN0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBnZXR0ZXIgPSAkcGFyc2UoJ3VzZXIubmFtZScpO1xuICogICB2YXIgc2V0dGVyID0gZ2V0dGVyLmFzc2lnbjtcbiAqICAgdmFyIGNvbnRleHQgPSB7dXNlcjp7bmFtZTonYW5ndWxhcid9fTtcbiAqICAgdmFyIGxvY2FscyA9IHt1c2VyOntuYW1lOidsb2NhbCd9fTtcbiAqXG4gKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCkpLnRvRXF1YWwoJ2FuZ3VsYXInKTtcbiAqICAgc2V0dGVyKGNvbnRleHQsICduZXdWYWx1ZScpO1xuICogICBleHBlY3QoY29udGV4dC51c2VyLm5hbWUpLnRvRXF1YWwoJ25ld1ZhbHVlJyk7XG4gKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCwgbG9jYWxzKSkudG9FcXVhbCgnbG9jYWwnKTtcbiAqIGBgYFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAqXG4gKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAqICAgICAgYGNvbnRleHRgLlxuICpcbiAqICAgIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBhbHNvIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiAgICAgICogYGxpdGVyYWxgIOKAkyBge2Jvb2xlYW59YCDigJMgd2hldGhlciB0aGUgZXhwcmVzc2lvbidzIHRvcC1sZXZlbCBub2RlIGlzIGEgSmF2YVNjcmlwdFxuICogICAgICAgIGxpdGVyYWwuXG4gKiAgICAgICogYGNvbnN0YW50YCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgbWFkZSBlbnRpcmVseSBvZiBKYXZhU2NyaXB0XG4gKiAgICAgICAgY29uc3RhbnQgbGl0ZXJhbHMuXG4gKiAgICAgICogYGFzc2lnbmAg4oCTIGB7P2Z1bmN0aW9uKGNvbnRleHQsIHZhbHVlKX1gIOKAkyBpZiB0aGUgZXhwcmVzc2lvbiBpcyBhc3NpZ25hYmxlLCB0aGlzIHdpbGwgYmVcbiAqICAgICAgICBzZXQgdG8gYSBmdW5jdGlvbiB0byBjaGFuZ2UgaXRzIHZhbHVlIG9uIHRoZSBnaXZlbiBjb250ZXh0LlxuICpcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkcGFyc2VQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGAkcGFyc2VQcm92aWRlcmAgY2FuIGJlIHVzZWQgZm9yIGNvbmZpZ3VyaW5nIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSB7QGxpbmsgbmcuJHBhcnNlICRwYXJzZX1cbiAqICBzZXJ2aWNlLlxuICovXG5mdW5jdGlvbiAkUGFyc2VQcm92aWRlcigpIHtcbiAgdmFyIGNhY2hlID0gY3JlYXRlTWFwKCk7XG4gIHZhciBsaXRlcmFscyA9IHtcbiAgICAndHJ1ZSc6IHRydWUsXG4gICAgJ2ZhbHNlJzogZmFsc2UsXG4gICAgJ251bGwnOiBudWxsLFxuICAgICd1bmRlZmluZWQnOiB1bmRlZmluZWRcbiAgfTtcbiAgdmFyIGlkZW50U3RhcnQsIGlkZW50Q29udGludWU7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHBhcnNlUHJvdmlkZXIjYWRkTGl0ZXJhbFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQ29uZmlndXJlICRwYXJzZSBzZXJ2aWNlIHRvIGFkZCBsaXRlcmFsIHZhbHVlcyB0aGF0IHdpbGwgYmUgcHJlc2VudCBhcyBsaXRlcmFsIGF0IGV4cHJlc3Npb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGl0ZXJhbE5hbWUgVG9rZW4gZm9yIHRoZSBsaXRlcmFsIHZhbHVlLiBUaGUgbGl0ZXJhbCBuYW1lIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBsaXRlcmFsIG5hbWUuXG4gICAqIEBwYXJhbSB7Kn0gbGl0ZXJhbFZhbHVlIFZhbHVlIGZvciB0aGlzIGxpdGVyYWwuIEFsbCBsaXRlcmFsIHZhbHVlcyBtdXN0IGJlIHByaW1pdGl2ZXMgb3IgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqKi9cbiAgdGhpcy5hZGRMaXRlcmFsID0gZnVuY3Rpb24obGl0ZXJhbE5hbWUsIGxpdGVyYWxWYWx1ZSkge1xuICAgIGxpdGVyYWxzW2xpdGVyYWxOYW1lXSA9IGxpdGVyYWxWYWx1ZTtcbiAgfTtcblxuIC8qKlxuICAqIEBuZ2RvYyBtZXRob2RcbiAgKiBAbmFtZSAkcGFyc2VQcm92aWRlciNzZXRJZGVudGlmaWVyRm5zXG4gICpcbiAgKiBAZGVzY3JpcHRpb25cbiAgKlxuICAqIEFsbG93cyBkZWZpbmluZyB0aGUgc2V0IG9mIGNoYXJhY3RlcnMgdGhhdCBhcmUgYWxsb3dlZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zLiBUaGUgZnVuY3Rpb25cbiAgKiBgaWRlbnRpZmllclN0YXJ0YCB3aWxsIGdldCBjYWxsZWQgdG8ga25vdyBpZiBhIGdpdmVuIGNoYXJhY3RlciBpcyBhIHZhbGlkIGNoYXJhY3RlciB0byBiZSB0aGVcbiAgKiBmaXJzdCBjaGFyYWN0ZXIgZm9yIGFuIGlkZW50aWZpZXIuIFRoZSBmdW5jdGlvbiBgaWRlbnRpZmllckNvbnRpbnVlYCB3aWxsIGdldCBjYWxsZWQgdG8ga25vdyBpZlxuICAqIGEgZ2l2ZW4gY2hhcmFjdGVyIGlzIGEgdmFsaWQgY2hhcmFjdGVyIHRvIGJlIGEgZm9sbG93LXVwIGlkZW50aWZpZXIgY2hhcmFjdGVyLiBUaGUgZnVuY3Rpb25zXG4gICogYGlkZW50aWZpZXJTdGFydGAgYW5kIGBpZGVudGlmaWVyQ29udGludWVgIHdpbGwgcmVjZWl2ZSBhcyBhcmd1bWVudHMgdGhlIHNpbmdsZSBjaGFyYWN0ZXIgdG8gYmVcbiAgKiBpZGVudGlmaWVyIGFuZCB0aGUgY2hhcmFjdGVyIGNvZGUgcG9pbnQuIFRoZXNlIGFyZ3VtZW50cyB3aWxsIGJlIGBzdHJpbmdgIGFuZCBgbnVtZXJpY2AuIEtlZXAgaW5cbiAgKiBtaW5kIHRoYXQgdGhlIGBzdHJpbmdgIHBhcmFtZXRlciBjYW4gYmUgdHdvIGNoYXJhY3RlcnMgbG9uZyBkZXBlbmRpbmcgb24gdGhlIGNoYXJhY3RlclxuICAqIHJlcHJlc2VudGF0aW9uLiBJdCBpcyBleHBlY3RlZCBmb3IgdGhlIGZ1bmN0aW9uIHRvIHJldHVybiBgdHJ1ZWAgb3IgYGZhbHNlYCwgd2hldGhlciB0aGF0XG4gICogY2hhcmFjdGVyIGlzIGFsbG93ZWQgb3Igbm90LlxuICAqXG4gICogU2luY2UgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBleHRlbnNpdmVseSwga2VlcCB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhlc2UgZnVuY3Rpb25zIGZhc3QsXG4gICogYXMgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZXNlIGZ1bmN0aW9ucyBoYXZlIGEgZGlyZWN0IGltcGFjdCBvbiB0aGUgZXhwcmVzc2lvbnMgcGFyc2luZyBzcGVlZC5cbiAgKlxuICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBpZGVudGlmaWVyU3RhcnQgVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBkZWNpZGUgd2hldGhlciB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGlzXG4gICogICBhIHZhbGlkIGlkZW50aWZpZXIgc3RhcnQgY2hhcmFjdGVyLlxuICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBpZGVudGlmaWVyQ29udGludWUgVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBkZWNpZGUgd2hldGhlciB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGlzXG4gICogICBhIHZhbGlkIGlkZW50aWZpZXIgY29udGludWUgY2hhcmFjdGVyLlxuICAqL1xuICB0aGlzLnNldElkZW50aWZpZXJGbnMgPSBmdW5jdGlvbihpZGVudGlmaWVyU3RhcnQsIGlkZW50aWZpZXJDb250aW51ZSkge1xuICAgIGlkZW50U3RhcnQgPSBpZGVudGlmaWVyU3RhcnQ7XG4gICAgaWRlbnRDb250aW51ZSA9IGlkZW50aWZpZXJDb250aW51ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyRmaWx0ZXInLCBmdW5jdGlvbigkZmlsdGVyKSB7XG4gICAgdmFyIG5vVW5zYWZlRXZhbCA9IGNzcCgpLm5vVW5zYWZlRXZhbDtcbiAgICB2YXIgJHBhcnNlT3B0aW9ucyA9IHtcbiAgICAgICAgICBjc3A6IG5vVW5zYWZlRXZhbCxcbiAgICAgICAgICBsaXRlcmFsczogY29weShsaXRlcmFscyksXG4gICAgICAgICAgaXNJZGVudGlmaWVyU3RhcnQ6IGlzRnVuY3Rpb24oaWRlbnRTdGFydCkgJiYgaWRlbnRTdGFydCxcbiAgICAgICAgICBpc0lkZW50aWZpZXJDb250aW51ZTogaXNGdW5jdGlvbihpZGVudENvbnRpbnVlKSAmJiBpZGVudENvbnRpbnVlXG4gICAgICAgIH07XG4gICAgcmV0dXJuICRwYXJzZTtcblxuICAgIGZ1bmN0aW9uICRwYXJzZShleHAsIGludGVyY2VwdG9yRm4pIHtcbiAgICAgIHZhciBwYXJzZWRFeHByZXNzaW9uLCBvbmVUaW1lLCBjYWNoZUtleTtcblxuICAgICAgc3dpdGNoICh0eXBlb2YgZXhwKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgZXhwID0gZXhwLnRyaW0oKTtcbiAgICAgICAgICBjYWNoZUtleSA9IGV4cDtcblxuICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24gPSBjYWNoZVtjYWNoZUtleV07XG5cbiAgICAgICAgICBpZiAoIXBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGlmIChleHAuY2hhckF0KDApID09PSAnOicgJiYgZXhwLmNoYXJBdCgxKSA9PT0gJzonKSB7XG4gICAgICAgICAgICAgIG9uZVRpbWUgPSB0cnVlO1xuICAgICAgICAgICAgICBleHAgPSBleHAuc3Vic3RyaW5nKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGxleGVyID0gbmV3IExleGVyKCRwYXJzZU9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIobGV4ZXIsICRmaWx0ZXIsICRwYXJzZU9wdGlvbnMpO1xuICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbiA9IHBhcnNlci5wYXJzZShleHApO1xuICAgICAgICAgICAgaWYgKHBhcnNlZEV4cHJlc3Npb24uY29uc3RhbnQpIHtcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBjb25zdGFudFdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9uZVRpbWUpIHtcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBwYXJzZWRFeHByZXNzaW9uLmxpdGVyYWwgP1xuICAgICAgICAgICAgICAgICAgb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlIDogb25lVGltZVdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzKSB7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IHBhcnNlZEV4cHJlc3Npb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKTtcblxuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKGV4cCwgaW50ZXJjZXB0b3JGbik7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3Iobm9vcCwgaW50ZXJjZXB0b3JGbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdWYWx1ZSwgb2xkVmFsdWVPZlZhbHVlLCBjb21wYXJlT2JqZWN0SWRlbnRpdHkpIHtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09IG51bGwgfHwgb2xkVmFsdWVPZlZhbHVlID09IG51bGwpIHsgLy8gbnVsbC91bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBvbGRWYWx1ZU9mVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnKSB7XG5cbiAgICAgICAgLy8gYXR0ZW1wdCB0byBjb252ZXJ0IHRoZSB2YWx1ZSB0byBhIHByaW1pdGl2ZSB0eXBlXG4gICAgICAgIC8vIFRPRE8oZG9jcyk6IGFkZCBhIG5vdGUgdG8gZG9jcyB0aGF0IGJ5IGltcGxlbWVudGluZyB2YWx1ZU9mIGV2ZW4gb2JqZWN0cyBhbmQgYXJyYXlzIGNhblxuICAgICAgICAvLyAgICAgICAgICAgICBiZSBjaGVhcGx5IGRpcnR5LWNoZWNrZWRcbiAgICAgICAgbmV3VmFsdWUgPSBnZXRWYWx1ZU9mKG5ld1ZhbHVlKTtcblxuICAgICAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0JyAmJiAhY29tcGFyZU9iamVjdElkZW50aXR5KSB7XG4gICAgICAgICAgLy8gb2JqZWN0cy9hcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQgLSBkZWVwLXdhdGNoaW5nIHRoZW0gd291bGQgYmUgdG9vIGV4cGVuc2l2ZVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhbGwtdGhyb3VnaCB0byB0aGUgcHJpbWl0aXZlIGVxdWFsaXR5IGNoZWNrXG4gICAgICB9XG5cbiAgICAgIC8vUHJpbWl0aXZlIG9yIE5hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBvbGRWYWx1ZU9mVmFsdWUgfHwgKG5ld1ZhbHVlICE9PSBuZXdWYWx1ZSAmJiBvbGRWYWx1ZU9mVmFsdWUgIT09IG9sZFZhbHVlT2ZWYWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5wdXRzV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uLCBwcmV0dHlQcmludEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBpbnB1dEV4cHJlc3Npb25zID0gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHM7XG4gICAgICB2YXIgbGFzdFJlc3VsdDtcblxuICAgICAgaWYgKGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBvbGRJbnB1dFZhbHVlT2YgPSBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrOyAvLyBpbml0IHRvIHNvbWV0aGluZyB1bmlxdWUgc28gdGhhdCBlcXVhbHMgY2hlY2sgZmFpbHNcbiAgICAgICAgaW5wdXRFeHByZXNzaW9ucyA9IGlucHV0RXhwcmVzc2lvbnNbMF07XG4gICAgICAgIHJldHVybiBzY29wZS4kd2F0Y2goZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0V2F0Y2goc2NvcGUpIHtcbiAgICAgICAgICB2YXIgbmV3SW5wdXRWYWx1ZSA9IGlucHV0RXhwcmVzc2lvbnMoc2NvcGUpO1xuICAgICAgICAgIGlmICghZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdJbnB1dFZhbHVlLCBvbGRJbnB1dFZhbHVlT2YsIGlucHV0RXhwcmVzc2lvbnMuaXNQdXJlKSkge1xuICAgICAgICAgICAgbGFzdFJlc3VsdCA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBbbmV3SW5wdXRWYWx1ZV0pO1xuICAgICAgICAgICAgb2xkSW5wdXRWYWx1ZU9mID0gbmV3SW5wdXRWYWx1ZSAmJiBnZXRWYWx1ZU9mKG5ld0lucHV0VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwcmV0dHlQcmludEV4cHJlc3Npb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzID0gW107XG4gICAgICB2YXIgb2xkSW5wdXRWYWx1ZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0gPSBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrOyAvLyBpbml0IHRvIHNvbWV0aGluZyB1bmlxdWUgc28gdGhhdCBlcXVhbHMgY2hlY2sgZmFpbHNcbiAgICAgICAgb2xkSW5wdXRWYWx1ZXNbaV0gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dHNXYXRjaChzY29wZSkge1xuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhciBuZXdJbnB1dFZhbHVlID0gaW5wdXRFeHByZXNzaW9uc1tpXShzY29wZSk7XG4gICAgICAgICAgaWYgKGNoYW5nZWQgfHwgKGNoYW5nZWQgPSAhZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdJbnB1dFZhbHVlLCBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0sIGlucHV0RXhwcmVzc2lvbnNbaV0uaXNQdXJlKSkpIHtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVzW2ldID0gbmV3SW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSA9IG5ld0lucHV0VmFsdWUgJiYgZ2V0VmFsdWVPZihuZXdJbnB1dFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgIGxhc3RSZXN1bHQgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb2xkSW5wdXRWYWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICB9LCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lVGltZVdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbiwgcHJldHR5UHJpbnRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaCwgbGFzdFZhbHVlO1xuICAgICAgaWYgKHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzKSB7XG4gICAgICAgIHVud2F0Y2ggPSBpbnB1dHNXYXRjaERlbGVnYXRlKHNjb3BlLCBvbmVUaW1lTGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uLCBwcmV0dHlQcmludEV4cHJlc3Npb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW53YXRjaCA9IHNjb3BlLiR3YXRjaChvbmVUaW1lV2F0Y2gsIG9uZVRpbWVMaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVud2F0Y2g7XG5cbiAgICAgIGZ1bmN0aW9uIG9uZVRpbWVXYXRjaChzY29wZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBvbmVUaW1lTGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpIHtcbiAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIGxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQobGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgICB1bndhdGNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgdmFyIHVud2F0Y2gsIGxhc3RWYWx1ZTtcbiAgICAgIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gb25lVGltZVdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTtcbiAgICAgIH0sIGZ1bmN0aW9uIG9uZVRpbWVMaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSkge1xuICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgbGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FsbERlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzQWxsRGVmaW5lZChsYXN0VmFsdWUpKSB1bndhdGNoKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIG9iamVjdEVxdWFsaXR5KTtcblxuICAgICAgcmV0dXJuIHVud2F0Y2g7XG5cbiAgICAgIGZ1bmN0aW9uIGlzQWxsRGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICB2YXIgYWxsRGVmaW5lZCA9IHRydWU7XG4gICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIGlmICghaXNEZWZpbmVkKHZhbCkpIGFsbERlZmluZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhbGxEZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBjb25zdGFudFdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHVud2F0Y2goKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KTtcbiAgICAgIHJldHVybiB1bndhdGNoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEludGVyY2VwdG9yKHBhcnNlZEV4cHJlc3Npb24sIGludGVyY2VwdG9yRm4pIHtcbiAgICAgIGlmICghaW50ZXJjZXB0b3JGbikgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb247XG4gICAgICB2YXIgd2F0Y2hEZWxlZ2F0ZSA9IHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlO1xuICAgICAgdmFyIHVzZUlucHV0cyA9IGZhbHNlO1xuXG4gICAgICB2YXIgcmVndWxhcldhdGNoID1cbiAgICAgICAgICB3YXRjaERlbGVnYXRlICE9PSBvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUgJiZcbiAgICAgICAgICB3YXRjaERlbGVnYXRlICE9PSBvbmVUaW1lV2F0Y2hEZWxlZ2F0ZTtcblxuICAgICAgdmFyIGZuID0gcmVndWxhcldhdGNoID8gZnVuY3Rpb24gcmVndWxhckludGVyY2VwdGVkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSB1c2VJbnB1dHMgJiYgaW5wdXRzID8gaW5wdXRzWzBdIDogcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJldHVybiBpbnRlcmNlcHRvckZuKHZhbHVlLCBzY29wZSwgbG9jYWxzKTtcbiAgICAgIH0gOiBmdW5jdGlvbiBvbmVUaW1lSW50ZXJjZXB0ZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJjZXB0b3JGbih2YWx1ZSwgc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgIC8vIHdlIG9ubHkgcmV0dXJuIHRoZSBpbnRlcmNlcHRvcidzIHJlc3VsdCBpZiB0aGVcbiAgICAgICAgLy8gaW5pdGlhbCB2YWx1ZSBpcyBkZWZpbmVkIChmb3IgYmluZC1vbmNlKVxuICAgICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbHVlKSA/IHJlc3VsdCA6IHZhbHVlO1xuICAgICAgfTtcblxuICAgICAgLy8gUHJvcGFnYXRlICQkd2F0Y2hEZWxlZ2F0ZXMgb3RoZXIgdGhlbiBpbnB1dHNXYXRjaERlbGVnYXRlXG4gICAgICB1c2VJbnB1dHMgPSAhcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHM7XG4gICAgICBpZiAod2F0Y2hEZWxlZ2F0ZSAmJiB3YXRjaERlbGVnYXRlICE9PSBpbnB1dHNXYXRjaERlbGVnYXRlKSB7XG4gICAgICAgIGZuLiQkd2F0Y2hEZWxlZ2F0ZSA9IHdhdGNoRGVsZWdhdGU7XG4gICAgICAgIGZuLmlucHV0cyA9IHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzO1xuICAgICAgfSBlbHNlIGlmICghaW50ZXJjZXB0b3JGbi4kc3RhdGVmdWwpIHtcbiAgICAgICAgLy8gVHJlYXQgaW50ZXJjZXB0b3IgbGlrZSBmaWx0ZXJzIC0gYXNzdW1lIG5vbi1zdGF0ZWZ1bCBieSBkZWZhdWx0IGFuZCB1c2UgdGhlIGlucHV0c1dhdGNoRGVsZWdhdGVcbiAgICAgICAgZm4uJCR3YXRjaERlbGVnYXRlID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgZm4uaW5wdXRzID0gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMgPyBwYXJzZWRFeHByZXNzaW9uLmlucHV0cyA6IFtwYXJzZWRFeHByZXNzaW9uXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZuLmlucHV0cykge1xuICAgICAgICBmbi5pbnB1dHMgPSBmbi5pbnB1dHMubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBpc1B1cmUgZmxhZyBvZiBpbnB1dHMgd2hlbiBpdCBpcyBub3QgYWJzb2x1dGUgYmVjYXVzZSB0aGV5IGFyZSBub3cgd3JhcHBlZCBpbiBhXG4gICAgICAgICAgICAgIC8vIHBvdGVudGlhbGx5IG5vbi1wdXJlIGludGVyY2VwdG9yIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICBpZiAoZS5pc1B1cmUgPT09IFBVUklUWV9SRUxBVElWRSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXB1cmlmaWVyKHMpIHsgcmV0dXJuIGUocyk7IH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRxXG4gKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBzZXJ2aWNlIHRoYXQgaGVscHMgeW91IHJ1biBmdW5jdGlvbnMgYXN5bmNocm9ub3VzbHksIGFuZCB1c2UgdGhlaXIgcmV0dXJuIHZhbHVlcyAob3IgZXhjZXB0aW9ucylcbiAqIHdoZW4gdGhleSBhcmUgZG9uZSBwcm9jZXNzaW5nLlxuICpcbiAqIFRoaXMgaXMgYSBbUHJvbWlzZXMvQStdKGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vKS1jb21wbGlhbnQgaW1wbGVtZW50YXRpb24gb2YgcHJvbWlzZXMvZGVmZXJyZWRcbiAqIG9iamVjdHMgaW5zcGlyZWQgYnkgW0tyaXMgS293YWwncyBRXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpLlxuICpcbiAqICRxIGNhbiBiZSB1c2VkIGluIHR3byBmYXNoaW9ucyAtLS0gb25lIHdoaWNoIGlzIG1vcmUgc2ltaWxhciB0byBLcmlzIEtvd2FsJ3MgUSBvciBqUXVlcnkncyBEZWZlcnJlZFxuICogaW1wbGVtZW50YXRpb25zLCBhbmQgdGhlIG90aGVyIHdoaWNoIHJlc2VtYmxlcyBFUzYgKEVTMjAxNSkgcHJvbWlzZXMgdG8gc29tZSBkZWdyZWUuXG4gKlxuICogIyAkcSBjb25zdHJ1Y3RvclxuICpcbiAqIFRoZSBzdHJlYW1saW5lZCBFUzYgc3R5bGUgcHJvbWlzZSBpcyBlc3NlbnRpYWxseSBqdXN0IHVzaW5nICRxIGFzIGEgY29uc3RydWN0b3Igd2hpY2ggdGFrZXMgYSBgcmVzb2x2ZXJgXG4gKiBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQuIFRoaXMgaXMgc2ltaWxhciB0byB0aGUgbmF0aXZlIFByb21pc2UgaW1wbGVtZW50YXRpb24gZnJvbSBFUzYsXG4gKiBzZWUgW01ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZSkuXG4gKlxuICogV2hpbGUgdGhlIGNvbnN0cnVjdG9yLXN0eWxlIHVzZSBpcyBzdXBwb3J0ZWQsIG5vdCBhbGwgb2YgdGhlIHN1cHBvcnRpbmcgbWV0aG9kcyBmcm9tIEVTNiBwcm9taXNlcyBhcmVcbiAqIGF2YWlsYWJsZSB5ZXQuXG4gKlxuICogSXQgY2FuIGJlIHVzZWQgbGlrZSBzbzpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgb2tUb0dyZWV0YFxuICogICAvLyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuXG4gKlxuICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHtcbiAqICAgICAvLyBwZXJmb3JtIHNvbWUgYXN5bmNocm9ub3VzIG9wZXJhdGlvbiwgcmVzb2x2ZSBvciByZWplY3QgdGhlIHByb21pc2Ugd2hlbiBhcHByb3ByaWF0ZS5cbiAqICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gKiAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gKiAgICAgICAgICAgcmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAqICAgICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgICByZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAqICAgICAgICAgfVxuICogICAgICAgfSwgMTAwMCk7XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpO1xuICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogTm90ZTogcHJvZ3Jlc3Mvbm90aWZ5IGNhbGxiYWNrcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgdmlhIHRoZSBFUzYtc3R5bGUgaW50ZXJmYWNlLlxuICpcbiAqIE5vdGU6IHVubGlrZSBFUzYgYmVoYXZpb3IsIGFuIGV4Y2VwdGlvbiB0aHJvd24gaW4gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpbGwgTk9UIGltcGxpY2l0bHkgcmVqZWN0IHRoZSBwcm9taXNlLlxuICpcbiAqIEhvd2V2ZXIsIHRoZSBtb3JlIHRyYWRpdGlvbmFsIENvbW1vbkpTLXN0eWxlIHVzYWdlIGlzIHN0aWxsIGF2YWlsYWJsZSwgYW5kIGRvY3VtZW50ZWQgYmVsb3cuXG4gKlxuICogW1RoZSBDb21tb25KUyBQcm9taXNlIHByb3Bvc2FsXShodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Qcm9taXNlcykgZGVzY3JpYmVzIGEgcHJvbWlzZSBhcyBhblxuICogaW50ZXJmYWNlIGZvciBpbnRlcmFjdGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHJlc3VsdCBvZiBhbiBhY3Rpb24gdGhhdCBpc1xuICogcGVyZm9ybWVkIGFzeW5jaHJvbm91c2x5LCBhbmQgbWF5IG9yIG1heSBub3QgYmUgZmluaXNoZWQgYXQgYW55IGdpdmVuIHBvaW50IGluIHRpbWUuXG4gKlxuICogRnJvbSB0aGUgcGVyc3BlY3RpdmUgb2YgZGVhbGluZyB3aXRoIGVycm9yIGhhbmRsaW5nLCBkZWZlcnJlZCBhbmQgcHJvbWlzZSBBUElzIGFyZSB0b1xuICogYXN5bmNocm9ub3VzIHByb2dyYW1taW5nIHdoYXQgYHRyeWAsIGBjYXRjaGAgYW5kIGB0aHJvd2Aga2V5d29yZHMgYXJlIHRvIHN5bmNocm9ub3VzIHByb2dyYW1taW5nLlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGV4YW1wbGUgbGV0J3MgYXNzdW1lIHRoYXQgdmFyaWFibGVzIGAkcWAgYW5kIGBva1RvR3JlZXRgXG4gKiAgIC8vIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZSAodGhleSBjb3VsZCBoYXZlIGJlZW4gaW5qZWN0ZWQgb3IgcGFzc2VkIGluKS5cbiAqXG4gKiAgIGZ1bmN0aW9uIGFzeW5jR3JlZXQobmFtZSkge1xuICogICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKlxuICogICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICBkZWZlcnJlZC5ub3RpZnkoJ0Fib3V0IHRvIGdyZWV0ICcgKyBuYW1lICsgJy4nKTtcbiAqXG4gKiAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gKiAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJ0hlbGxvLCAnICsgbmFtZSArICchJyk7XG4gKiAgICAgICB9IGVsc2Uge1xuICogICAgICAgICBkZWZlcnJlZC5yZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAqICAgICAgIH1cbiAqICAgICB9LCAxMDAwKTtcbiAqXG4gKiAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpO1xuICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gKiAgIH0sIGZ1bmN0aW9uKHVwZGF0ZSkge1xuICogICAgIGFsZXJ0KCdHb3Qgbm90aWZpY2F0aW9uOiAnICsgdXBkYXRlKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBBdCBmaXJzdCBpdCBtaWdodCBub3QgYmUgb2J2aW91cyB3aHkgdGhpcyBleHRyYSBjb21wbGV4aXR5IGlzIHdvcnRoIHRoZSB0cm91YmxlLiBUaGUgcGF5b2ZmXG4gKiBjb21lcyBpbiB0aGUgd2F5IG9mIGd1YXJhbnRlZXMgdGhhdCBwcm9taXNlIGFuZCBkZWZlcnJlZCBBUElzIG1ha2UsIHNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC91bmNvbW1vbmpzL2Jsb2IvbWFzdGVyL3Byb21pc2VzL3NwZWNpZmljYXRpb24ubWQuXG4gKlxuICogQWRkaXRpb25hbGx5IHRoZSBwcm9taXNlIGFwaSBhbGxvd3MgZm9yIGNvbXBvc2l0aW9uIHRoYXQgaXMgdmVyeSBoYXJkIHRvIGRvIHdpdGggdGhlXG4gKiB0cmFkaXRpb25hbCBjYWxsYmFjayAoW0NQU10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db250aW51YXRpb24tcGFzc2luZ19zdHlsZSkpIGFwcHJvYWNoLlxuICogRm9yIG1vcmUgb24gdGhpcyBwbGVhc2Ugc2VlIHRoZSBbUSBkb2N1bWVudGF0aW9uXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpIGVzcGVjaWFsbHkgdGhlXG4gKiBzZWN0aW9uIG9uIHNlcmlhbCBvciBwYXJhbGxlbCBqb2luaW5nIG9mIHByb21pc2VzLlxuICpcbiAqICMgVGhlIERlZmVycmVkIEFQSVxuICpcbiAqIEEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkIGlzIGNvbnN0cnVjdGVkIGJ5IGNhbGxpbmcgYCRxLmRlZmVyKClgLlxuICpcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBkZWZlcnJlZCBvYmplY3QgaXMgdG8gZXhwb3NlIHRoZSBhc3NvY2lhdGVkIFByb21pc2UgaW5zdGFuY2UgYXMgd2VsbCBhcyBBUElzXG4gKiB0aGF0IGNhbiBiZSB1c2VkIGZvciBzaWduYWxpbmcgdGhlIHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVsIGNvbXBsZXRpb24sIGFzIHdlbGwgYXMgdGhlIHN0YXR1c1xuICogb2YgdGhlIHRhc2suXG4gKlxuICogKipNZXRob2RzKipcbiAqXG4gKiAtIGByZXNvbHZlKHZhbHVlKWAg4oCTIHJlc29sdmVzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHZhbHVlYC4gSWYgdGhlIHZhbHVlIGlzIGEgcmVqZWN0aW9uXG4gKiAgIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YCwgdGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCBpbnN0ZWFkLlxuICogLSBgcmVqZWN0KHJlYXNvbilgIOKAkyByZWplY3RzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHJlYXNvbmAuIFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICogICByZXNvbHZpbmcgaXQgd2l0aCBhIHJlamVjdGlvbiBjb25zdHJ1Y3RlZCB2aWEgYCRxLnJlamVjdGAuXG4gKiAtIGBub3RpZnkodmFsdWUpYCAtIHByb3ZpZGVzIHVwZGF0ZXMgb24gdGhlIHN0YXR1cyBvZiB0aGUgcHJvbWlzZSdzIGV4ZWN1dGlvbi4gVGhpcyBtYXkgYmUgY2FsbGVkXG4gKiAgIG11bHRpcGxlIHRpbWVzIGJlZm9yZSB0aGUgcHJvbWlzZSBpcyBlaXRoZXIgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gKlxuICogKipQcm9wZXJ0aWVzKipcbiAqXG4gKiAtIHByb21pc2Ug4oCTIGB7UHJvbWlzZX1gIOKAkyBwcm9taXNlIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZWZlcnJlZC5cbiAqXG4gKlxuICogIyBUaGUgUHJvbWlzZSBBUElcbiAqXG4gKiBBIG5ldyBwcm9taXNlIGluc3RhbmNlIGlzIGNyZWF0ZWQgd2hlbiBhIGRlZmVycmVkIGluc3RhbmNlIGlzIGNyZWF0ZWQgYW5kIGNhbiBiZSByZXRyaWV2ZWQgYnlcbiAqIGNhbGxpbmcgYGRlZmVycmVkLnByb21pc2VgLlxuICpcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBwcm9taXNlIG9iamVjdCBpcyB0byBhbGxvdyBmb3IgaW50ZXJlc3RlZCBwYXJ0aWVzIHRvIGdldCBhY2Nlc3MgdG8gdGhlIHJlc3VsdFxuICogb2YgdGhlIGRlZmVycmVkIHRhc2sgd2hlbiBpdCBjb21wbGV0ZXMuXG4gKlxuICogKipNZXRob2RzKipcbiAqXG4gKiAtIGB0aGVuKHN1Y2Nlc3NDYWxsYmFjaywgW2Vycm9yQ2FsbGJhY2tdLCBbbm90aWZ5Q2FsbGJhY2tdKWAg4oCTIHJlZ2FyZGxlc3Mgb2Ygd2hlbiB0aGUgcHJvbWlzZSB3YXMgb3JcbiAqICAgd2lsbCBiZSByZXNvbHZlZCBvciByZWplY3RlZCwgYHRoZW5gIGNhbGxzIG9uZSBvZiB0aGUgc3VjY2VzcyBvciBlcnJvciBjYWxsYmFja3MgYXN5bmNocm9ub3VzbHlcbiAqICAgYXMgc29vbiBhcyB0aGUgcmVzdWx0IGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQ6IHRoZSByZXN1bHRcbiAqICAgb3IgcmVqZWN0aW9uIHJlYXNvbi4gQWRkaXRpb25hbGx5LCB0aGUgbm90aWZ5IGNhbGxiYWNrIG1heSBiZSBjYWxsZWQgemVybyBvciBtb3JlIHRpbWVzIHRvXG4gKiAgIHByb3ZpZGUgYSBwcm9ncmVzcyBpbmRpY2F0aW9uLCBiZWZvcmUgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gKlxuICogICBUaGlzIG1ldGhvZCAqcmV0dXJucyBhIG5ldyBwcm9taXNlKiB3aGljaCBpcyByZXNvbHZlZCBvciByZWplY3RlZCB2aWEgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGVcbiAqICAgYHN1Y2Nlc3NDYWxsYmFja2AsIGBlcnJvckNhbGxiYWNrYCAodW5sZXNzIHRoYXQgdmFsdWUgaXMgYSBwcm9taXNlLCBpbiB3aGljaCBjYXNlIGl0IGlzIHJlc29sdmVkXG4gKiAgIHdpdGggdGhlIHZhbHVlIHdoaWNoIGlzIHJlc29sdmVkIGluIHRoYXQgcHJvbWlzZSB1c2luZ1xuICogICBbcHJvbWlzZSBjaGFpbmluZ10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZXM2L3Byb21pc2VzLyN0b2MtcHJvbWlzZXMtcXVldWVzKSkuXG4gKiAgIEl0IGFsc28gbm90aWZpZXMgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBub3RpZnlDYWxsYmFja2AgbWV0aG9kLiBUaGUgcHJvbWlzZSBjYW5ub3QgYmVcbiAqICAgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgZnJvbSB0aGUgbm90aWZ5Q2FsbGJhY2sgbWV0aG9kLiBUaGUgZXJyb3JDYWxsYmFjayBhbmQgbm90aWZ5Q2FsbGJhY2tcbiAqICAgYXJndW1lbnRzIGFyZSBvcHRpb25hbC5cbiAqXG4gKiAtIGBjYXRjaChlcnJvckNhbGxiYWNrKWAg4oCTIHNob3J0aGFuZCBmb3IgYHByb21pc2UudGhlbihudWxsLCBlcnJvckNhbGxiYWNrKWBcbiAqXG4gKiAtIGBmaW5hbGx5KGNhbGxiYWNrLCBub3RpZnlDYWxsYmFjaylgIOKAkyBhbGxvd3MgeW91IHRvIG9ic2VydmUgZWl0aGVyIHRoZSBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gb2YgYSBwcm9taXNlLFxuICogICBidXQgdG8gZG8gc28gd2l0aG91dCBtb2RpZnlpbmcgdGhlIGZpbmFsIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCB0byByZWxlYXNlIHJlc291cmNlcyBvciBkbyBzb21lXG4gKiAgIGNsZWFuLXVwIHRoYXQgbmVlZHMgdG8gYmUgZG9uZSB3aGV0aGVyIHRoZSBwcm9taXNlIHdhcyByZWplY3RlZCBvciByZXNvbHZlZC4gU2VlIHRoZSBbZnVsbFxuICogICBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3Evd2lraS9BUEktUmVmZXJlbmNlI3Byb21pc2VmaW5hbGx5Y2FsbGJhY2spIGZvclxuICogICBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqICMgQ2hhaW5pbmcgcHJvbWlzZXNcbiAqXG4gKiBCZWNhdXNlIGNhbGxpbmcgdGhlIGB0aGVuYCBtZXRob2Qgb2YgYSBwcm9taXNlIHJldHVybnMgYSBuZXcgZGVyaXZlZCBwcm9taXNlLCBpdCBpcyBlYXNpbHlcbiAqIHBvc3NpYmxlIHRvIGNyZWF0ZSBhIGNoYWluIG9mIHByb21pc2VzOlxuICpcbiAqIGBgYGpzXG4gKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAqICAgICByZXR1cm4gcmVzdWx0ICsgMTtcbiAqICAgfSk7XG4gKlxuICogICAvLyBwcm9taXNlQiB3aWxsIGJlIHJlc29sdmVkIGltbWVkaWF0ZWx5IGFmdGVyIHByb21pc2VBIGlzIHJlc29sdmVkIGFuZCBpdHMgdmFsdWVcbiAqICAgLy8gd2lsbCBiZSB0aGUgcmVzdWx0IG9mIHByb21pc2VBIGluY3JlbWVudGVkIGJ5IDFcbiAqIGBgYFxuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGNyZWF0ZSBjaGFpbnMgb2YgYW55IGxlbmd0aCBhbmQgc2luY2UgYSBwcm9taXNlIGNhbiBiZSByZXNvbHZlZCB3aXRoIGFub3RoZXJcbiAqIHByb21pc2UgKHdoaWNoIHdpbGwgZGVmZXIgaXRzIHJlc29sdXRpb24gZnVydGhlciksIGl0IGlzIHBvc3NpYmxlIHRvIHBhdXNlL2RlZmVyIHJlc29sdXRpb24gb2ZcbiAqIHRoZSBwcm9taXNlcyBhdCBhbnkgcG9pbnQgaW4gdGhlIGNoYWluLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGltcGxlbWVudCBwb3dlcmZ1bCBBUElzIGxpa2VcbiAqICRodHRwJ3MgcmVzcG9uc2UgaW50ZXJjZXB0b3JzLlxuICpcbiAqXG4gKiAjIERpZmZlcmVuY2VzIGJldHdlZW4gS3JpcyBLb3dhbCdzIFEgYW5kICRxXG4gKlxuICogIFRoZXJlIGFyZSB0d28gbWFpbiBkaWZmZXJlbmNlczpcbiAqXG4gKiAtICRxIGlzIGludGVncmF0ZWQgd2l0aCB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGV9IFNjb3BlIG1vZGVsIG9ic2VydmF0aW9uXG4gKiAgIG1lY2hhbmlzbSBpbiBhbmd1bGFyLCB3aGljaCBtZWFucyBmYXN0ZXIgcHJvcGFnYXRpb24gb2YgcmVzb2x1dGlvbiBvciByZWplY3Rpb24gaW50byB5b3VyXG4gKiAgIG1vZGVscyBhbmQgYXZvaWRpbmcgdW5uZWNlc3NhcnkgYnJvd3NlciByZXBhaW50cywgd2hpY2ggd291bGQgcmVzdWx0IGluIGZsaWNrZXJpbmcgVUkuXG4gKiAtIFEgaGFzIG1hbnkgbW9yZSBmZWF0dXJlcyB0aGFuICRxLCBidXQgdGhhdCBjb21lcyBhdCBhIGNvc3Qgb2YgYnl0ZXMuICRxIGlzIHRpbnksIGJ1dCBjb250YWluc1xuICogICBhbGwgdGhlIGltcG9ydGFudCBmdW5jdGlvbmFsaXR5IG5lZWRlZCBmb3IgY29tbW9uIGFzeW5jIHRhc2tzLlxuICpcbiAqICMgVGVzdGluZ1xuICpcbiAqICBgYGBqc1xuICogICAgaXQoJ3Nob3VsZCBzaW11bGF0ZSBwcm9taXNlJywgaW5qZWN0KGZ1bmN0aW9uKCRxLCAkcm9vdFNjb3BlKSB7XG4gKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKiAgICAgIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcbiAqICAgICAgdmFyIHJlc29sdmVkVmFsdWU7XG4gKlxuICogICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsgcmVzb2x2ZWRWYWx1ZSA9IHZhbHVlOyB9KTtcbiAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvQmVVbmRlZmluZWQoKTtcbiAqXG4gKiAgICAgIC8vIFNpbXVsYXRlIHJlc29sdmluZyBvZiBwcm9taXNlXG4gKiAgICAgIGRlZmVycmVkLnJlc29sdmUoMTIzKTtcbiAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LlxuICogICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2Ugd2FudCB0aGUgcHJvbWlzZSBBUEkgdG8gYWx3YXlzIGJlIGFzeW5jLCB3aGV0aGVyIG9yIG5vdFxuICogICAgICAvLyBpdCBnb3QgY2FsbGVkIHN5bmNocm9ub3VzbHkgb3IgYXN5bmNocm9ub3VzbHkuXG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gKlxuICogICAgICAvLyBQcm9wYWdhdGUgcHJvbWlzZSByZXNvbHV0aW9uIHRvICd0aGVuJyBmdW5jdGlvbnMgdXNpbmcgJGFwcGx5KCkuXG4gKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0VxdWFsKDEyMyk7XG4gKiAgICB9KSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbiwgZnVuY3Rpb24pfSByZXNvbHZlciBGdW5jdGlvbiB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgcmVzb2x2aW5nIG9yXG4gKiAgIHJlamVjdGluZyB0aGUgbmV3bHkgY3JlYXRlZCBwcm9taXNlLiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgdGhlXG4gKiAgIHByb21pc2UsIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS5cbiAqL1xuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRxUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKi9cbmZ1bmN0aW9uICRRUHJvdmlkZXIoKSB7XG4gIHZhciBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHRydWU7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRleGNlcHRpb25IYW5kbGVyKSB7XG4gICAgcmV0dXJuIHFGYWN0b3J5KGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgIH0sICRleGNlcHRpb25IYW5kbGVyLCBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyk7XG4gIH1dO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxUHJvdmlkZXIjZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnNcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgd2hldGhlciB0byBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGEgcmVqZWN0ZWQgcHJvbWlzZSBpcyBub3QgaGFuZGxlZC5cbiAgICogVGhpcyBmZWF0dXJlIGlzIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgV2hldGhlciB0byBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGEgcmVqZWN0ZWQgcHJvbWlzZSBpcyBub3QgaGFuZGxlZC5cbiAgICogQHJldHVybnMge2Jvb2xlYW58bmcuJHFQcm92aWRlcn0gQ3VycmVudCB2YWx1ZSB3aGVuIGNhbGxlZCB3aXRob3V0IGEgbmV3IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucztcbiAgICB9XG4gIH07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRRUHJvdmlkZXIoKSB7XG4gIHZhciBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHRydWU7XG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkYnJvd3NlciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTtcbiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlciwgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMpO1xuICB9XTtcblxuICB0aGlzLmVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnM7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBwcm9taXNlIG1hbmFnZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbil9IG5leHRUaWNrIEZ1bmN0aW9uIGZvciBleGVjdXRpbmcgZnVuY3Rpb25zIGluIHRoZSBuZXh0IHR1cm4uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLiopfSBleGNlcHRpb25IYW5kbGVyIEZ1bmN0aW9uIGludG8gd2hpY2ggdW5leHBlY3RlZCBleGNlcHRpb25zIGFyZSBwYXNzZWQgZm9yXG4gKiAgICAgZGVidWdnaW5nIHB1cnBvc2VzLlxuICogQHBhcmFtIHtib29sZWFuPX0gZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgV2hldGhlciBhbiBlcnJvciBzaG91bGQgYmUgZ2VuZXJhdGVkIG9uIHVuaGFuZGxlZFxuICogICAgIHByb21pc2VzIHJlamVjdGlvbnMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9taXNlIG1hbmFnZXIuXG4gKi9cbmZ1bmN0aW9uIHFGYWN0b3J5KG5leHRUaWNrLCBleGNlcHRpb25IYW5kbGVyLCBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucykge1xuICB2YXIgJHFNaW5FcnIgPSBtaW5FcnIoJyRxJywgVHlwZUVycm9yKTtcbiAgdmFyIHF1ZXVlU2l6ZSA9IDA7XG4gIHZhciBjaGVja1F1ZXVlID0gW107XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmcuJHEjZGVmZXJcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQuXG4gICAqL1xuICBmdW5jdGlvbiBkZWZlcigpIHtcbiAgICByZXR1cm4gbmV3IERlZmVycmVkKCk7XG4gIH1cblxuICBmdW5jdGlvbiBEZWZlcnJlZCgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKCk7XG4gICAgLy9Ob24gcHJvdG90eXBlIG1ldGhvZHMgbmVjZXNzYXJ5IHRvIHN1cHBvcnQgdW5ib3VuZCBleGVjdXRpb24gOi9cbiAgICB0aGlzLnJlc29sdmUgPSBmdW5jdGlvbih2YWwpIHsgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsKTsgfTtcbiAgICB0aGlzLnJlamVjdCA9IGZ1bmN0aW9uKHJlYXNvbikgeyByZWplY3RQcm9taXNlKHByb21pc2UsIHJlYXNvbik7IH07XG4gICAgdGhpcy5ub3RpZnkgPSBmdW5jdGlvbihwcm9ncmVzcykgeyBub3RpZnlQcm9taXNlKHByb21pc2UsIHByb2dyZXNzKTsgfTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gUHJvbWlzZSgpIHtcbiAgICB0aGlzLiQkc3RhdGUgPSB7IHN0YXR1czogMCB9O1xuICB9XG5cbiAgZXh0ZW5kKFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgdGhlbjogZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFjaykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKG9uRnVsZmlsbGVkKSAmJiBpc1VuZGVmaW5lZChvblJlamVjdGVkKSAmJiBpc1VuZGVmaW5lZChwcm9ncmVzc0JhY2spKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBQcm9taXNlKCk7XG5cbiAgICAgIHRoaXMuJCRzdGF0ZS5wZW5kaW5nID0gdGhpcy4kJHN0YXRlLnBlbmRpbmcgfHwgW107XG4gICAgICB0aGlzLiQkc3RhdGUucGVuZGluZy5wdXNoKFtyZXN1bHQsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9ncmVzc0JhY2tdKTtcbiAgICAgIGlmICh0aGlzLiQkc3RhdGUuc3RhdHVzID4gMCkgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy4kJHN0YXRlKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAnZmluYWxseSc6IGZ1bmN0aW9uKGNhbGxiYWNrLCBwcm9ncmVzc0JhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKHZhbHVlLCByZXNvbHZlLCBjYWxsYmFjayk7XG4gICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soZXJyb3IsIHJlamVjdCwgY2FsbGJhY2spO1xuICAgICAgfSwgcHJvZ3Jlc3NCYWNrKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIHZhciBmbiwgcHJvbWlzZSwgcGVuZGluZztcblxuICAgIHBlbmRpbmcgPSBzdGF0ZS5wZW5kaW5nO1xuICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBzdGF0ZS5wZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBwZW5kaW5nLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgbWFya1FTdGF0ZUV4Y2VwdGlvbkhhbmRsZWQoc3RhdGUpO1xuICAgICAgICBwcm9taXNlID0gcGVuZGluZ1tpXVswXTtcbiAgICAgICAgZm4gPSBwZW5kaW5nW2ldW3N0YXRlLnN0YXR1c107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAgICAgICByZXNvbHZlUHJvbWlzZShwcm9taXNlLCBmbihzdGF0ZS52YWx1ZSkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUuc3RhdHVzID09PSAxKSB7XG4gICAgICAgICAgICByZXNvbHZlUHJvbWlzZShwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdFByb21pc2UocHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJlamVjdFByb21pc2UocHJvbWlzZSwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgLS1xdWV1ZVNpemU7XG4gICAgICBpZiAoZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgJiYgcXVldWVTaXplID09PSAwKSB7XG4gICAgICAgIG5leHRUaWNrKHByb2Nlc3NDaGVja3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NDaGVja3MoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVubW9kaWZpZWQtbG9vcC1jb25kaXRpb25cbiAgICB3aGlsZSAoIXF1ZXVlU2l6ZSAmJiBjaGVja1F1ZXVlLmxlbmd0aCkge1xuICAgICAgdmFyIHRvQ2hlY2sgPSBjaGVja1F1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAoIWlzU3RhdGVFeGNlcHRpb25IYW5kbGVkKHRvQ2hlY2spKSB7XG4gICAgICAgIG1hcmtRU3RhdGVFeGNlcHRpb25IYW5kbGVkKHRvQ2hlY2spO1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gJ1Bvc3NpYmx5IHVuaGFuZGxlZCByZWplY3Rpb246ICcgKyB0b0RlYnVnU3RyaW5nKHRvQ2hlY2sudmFsdWUpO1xuICAgICAgICBpZiAoaXNFcnJvcih0b0NoZWNrLnZhbHVlKSkge1xuICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIodG9DaGVjay52YWx1ZSwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIGlmIChlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyAmJiAhc3RhdGUucGVuZGluZyAmJiBzdGF0ZS5zdGF0dXMgPT09IDIgJiYgIWlzU3RhdGVFeGNlcHRpb25IYW5kbGVkKHN0YXRlKSkge1xuICAgICAgaWYgKHF1ZXVlU2l6ZSA9PT0gMCAmJiBjaGVja1F1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuZXh0VGljayhwcm9jZXNzQ2hlY2tzKTtcbiAgICAgIH1cbiAgICAgIGNoZWNrUXVldWUucHVzaChzdGF0ZSk7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkIHx8ICFzdGF0ZS5wZW5kaW5nKSByZXR1cm47XG4gICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IHRydWU7XG4gICAgKytxdWV1ZVNpemU7XG4gICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7IHByb2Nlc3NRdWV1ZShzdGF0ZSk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsKSB7XG4gICAgaWYgKHByb21pc2UuJCRzdGF0ZS5zdGF0dXMpIHJldHVybjtcbiAgICBpZiAodmFsID09PSBwcm9taXNlKSB7XG4gICAgICAkJHJlamVjdChwcm9taXNlLCAkcU1pbkVycihcbiAgICAgICAgJ3FjeWNsZScsXG4gICAgICAgICdFeHBlY3RlZCBwcm9taXNlIHRvIGJlIHJlc29sdmVkIHdpdGggdmFsdWUgb3RoZXIgdGhhbiBpdHNlbGYgXFwnezB9XFwnJyxcbiAgICAgICAgdmFsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQkcmVzb2x2ZShwcm9taXNlLCB2YWwpO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gJCRyZXNvbHZlKHByb21pc2UsIHZhbCkge1xuICAgIHZhciB0aGVuO1xuICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc09iamVjdCh2YWwpIHx8IGlzRnVuY3Rpb24odmFsKSkgdGhlbiA9IHZhbC50aGVuO1xuICAgICAgaWYgKGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgcHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IC0xO1xuICAgICAgICB0aGVuLmNhbGwodmFsLCBkb1Jlc29sdmUsIGRvUmVqZWN0LCBkb05vdGlmeSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlLiQkc3RhdGUudmFsdWUgPSB2YWw7XG4gICAgICAgIHByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAxO1xuICAgICAgICBzY2hlZHVsZVByb2Nlc3NRdWV1ZShwcm9taXNlLiQkc3RhdGUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRvUmVqZWN0KGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvUmVzb2x2ZSh2YWwpIHtcbiAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICQkcmVzb2x2ZShwcm9taXNlLCB2YWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkb1JlamVjdCh2YWwpIHtcbiAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICQkcmVqZWN0KHByb21pc2UsIHZhbCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRvTm90aWZ5KHByb2dyZXNzKSB7XG4gICAgICBub3RpZnlQcm9taXNlKHByb21pc2UsIHByb2dyZXNzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWplY3RQcm9taXNlKHByb21pc2UsIHJlYXNvbikge1xuICAgIGlmIChwcm9taXNlLiQkc3RhdGUuc3RhdHVzKSByZXR1cm47XG4gICAgJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uICQkcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICAgIHByb21pc2UuJCRzdGF0ZS52YWx1ZSA9IHJlYXNvbjtcbiAgICBwcm9taXNlLiQkc3RhdGUuc3RhdHVzID0gMjtcbiAgICBzY2hlZHVsZVByb2Nlc3NRdWV1ZShwcm9taXNlLiQkc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5UHJvbWlzZShwcm9taXNlLCBwcm9ncmVzcykge1xuICAgIHZhciBjYWxsYmFja3MgPSBwcm9taXNlLiQkc3RhdGUucGVuZGluZztcblxuICAgIGlmICgocHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA8PSAwKSAmJiBjYWxsYmFja3MgJiYgY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjYWxsYmFjaywgcmVzdWx0O1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrc1tpXVswXTtcbiAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXVszXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbm90aWZ5UHJvbWlzZShyZXN1bHQsIGlzRnVuY3Rpb24oY2FsbGJhY2spID8gY2FsbGJhY2socHJvZ3Jlc3MpIDogcHJvZ3Jlc3MpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSNyZWplY3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGByZWFzb25gLiBUaGlzIGFwaSBzaG91bGQgYmVcbiAgICogdXNlZCB0byBmb3J3YXJkIHJlamVjdGlvbiBpbiBhIGNoYWluIG9mIHByb21pc2VzLiBJZiB5b3UgYXJlIGRlYWxpbmcgd2l0aCB0aGUgbGFzdCBwcm9taXNlIGluXG4gICAqIGEgcHJvbWlzZSBjaGFpbiwgeW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgaXQuXG4gICAqXG4gICAqIFdoZW4gY29tcGFyaW5nIGRlZmVycmVkcy9wcm9taXNlcyB0byB0aGUgZmFtaWxpYXIgYmVoYXZpb3Igb2YgdHJ5L2NhdGNoL3Rocm93LCB0aGluayBvZlxuICAgKiBgcmVqZWN0YCBhcyB0aGUgYHRocm93YCBrZXl3b3JkIGluIEphdmFTY3JpcHQuIFRoaXMgYWxzbyBtZWFucyB0aGF0IGlmIHlvdSBcImNhdGNoXCIgYW4gZXJyb3IgdmlhXG4gICAqIGEgcHJvbWlzZSBlcnJvciBjYWxsYmFjayBhbmQgeW91IHdhbnQgdG8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHByb21pc2UgZGVyaXZlZCBmcm9tIHRoZVxuICAgKiBjdXJyZW50IHByb21pc2UsIHlvdSBoYXZlIHRvIFwicmV0aHJvd1wiIHRoZSBlcnJvciBieSByZXR1cm5pbmcgYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhXG4gICAqIGByZWplY3RgLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICogICAgIC8vIHN1Y2Nlc3M6IGRvIHNvbWV0aGluZyBhbmQgcmVzb2x2ZSBwcm9taXNlQlxuICAgKiAgICAgLy8gICAgICAgICAgd2l0aCB0aGUgb2xkIG9yIGEgbmV3IHJlc3VsdFxuICAgKiAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICogICAgIC8vIGVycm9yOiBoYW5kbGUgdGhlIGVycm9yIGlmIHBvc3NpYmxlIGFuZFxuICAgKiAgICAgLy8gICAgICAgIHJlc29sdmUgcHJvbWlzZUIgd2l0aCBuZXdQcm9taXNlT3JWYWx1ZSxcbiAgICogICAgIC8vICAgICAgICBvdGhlcndpc2UgZm9yd2FyZCB0aGUgcmVqZWN0aW9uIHRvIHByb21pc2VCXG4gICAqICAgICBpZiAoY2FuSGFuZGxlKHJlYXNvbikpIHtcbiAgICogICAgICAvLyBoYW5kbGUgdGhlIGVycm9yIGFuZCByZWNvdmVyXG4gICAqICAgICAgcmV0dXJuIG5ld1Byb21pc2VPclZhbHVlO1xuICAgKiAgICAgfVxuICAgKiAgICAgcmV0dXJuICRxLnJlamVjdChyZWFzb24pO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsqfSByZWFzb24gQ29uc3RhbnQsIG1lc3NhZ2UsIGV4Y2VwdGlvbiBvciBhbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByZWplY3Rpb24gcmVhc29uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2UgdGhhdCB3YXMgYWxyZWFkeSByZXNvbHZlZCBhcyByZWplY3RlZCB3aXRoIHRoZSBgcmVhc29uYC5cbiAgICovXG4gIGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKTtcbiAgICByZWplY3RQcm9taXNlKHJlc3VsdCwgcmVhc29uKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIHJlc29sdmVyLCBjYWxsYmFjaykge1xuICAgIHZhciBjYWxsYmFja091dHB1dCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkgY2FsbGJhY2tPdXRwdXQgPSBjYWxsYmFjaygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiByZWplY3QoZSk7XG4gICAgfVxuICAgIGlmIChpc1Byb21pc2VMaWtlKGNhbGxiYWNrT3V0cHV0KSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrT3V0cHV0LnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlcih2YWx1ZSk7XG4gICAgICB9LCByZWplY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZXIodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3doZW5cbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdyYXBzIGFuIG9iamVjdCB0aGF0IG1pZ2h0IGJlIGEgdmFsdWUgb3IgYSAoM3JkIHBhcnR5KSB0aGVuLWFibGUgcHJvbWlzZSBpbnRvIGEgJHEgcHJvbWlzZS5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3UgYXJlIGRlYWxpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCBtaWdodCBvciBtaWdodCBub3QgYmUgYSBwcm9taXNlLCBvciBpZlxuICAgKiB0aGUgcHJvbWlzZSBjb21lcyBmcm9tIGEgc291cmNlIHRoYXQgY2FuJ3QgYmUgdHJ1c3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHN1Y2Nlc3NDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXJyb3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gcHJvZ3Jlc3NDYWxsYmFja1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2Ugb2YgdGhlIHBhc3NlZCB2YWx1ZSBvciBwcm9taXNlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gd2hlbih2YWx1ZSwgY2FsbGJhY2ssIGVycmJhY2ssIHByb2dyZXNzQmFjaykge1xuICAgIHZhciByZXN1bHQgPSBuZXcgUHJvbWlzZSgpO1xuICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdCwgdmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQudGhlbihjYWxsYmFjaywgZXJyYmFjaywgcHJvZ3Jlc3NCYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3Jlc29sdmVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFsaWFzIG9mIHtAbGluayBuZy4kcSN3aGVuIHdoZW59IHRvIG1haW50YWluIG5hbWluZyBjb25zaXN0ZW5jeSB3aXRoIEVTNi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHN1Y2Nlc3NDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXJyb3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gcHJvZ3Jlc3NDYWxsYmFja1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2Ugb2YgdGhlIHBhc3NlZCB2YWx1ZSBvciBwcm9taXNlXG4gICAqL1xuICB2YXIgcmVzb2x2ZSA9IHdoZW47XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjYWxsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21iaW5lcyBtdWx0aXBsZSBwcm9taXNlcyBpbnRvIGEgc2luZ2xlIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGFsbCBvZiB0aGUgaW5wdXRcbiAgICogcHJvbWlzZXMgYXJlIHJlc29sdmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LjxQcm9taXNlPnxPYmplY3QuPFByb21pc2U+fSBwcm9taXNlcyBBbiBhcnJheSBvciBoYXNoIG9mIHByb21pc2VzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHNpbmdsZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5L2hhc2ggb2YgdmFsdWVzLFxuICAgKiAgIGVhY2ggdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbWlzZSBhdCB0aGUgc2FtZSBpbmRleC9rZXkgaW4gdGhlIGBwcm9taXNlc2AgYXJyYXkvaGFzaC5cbiAgICogICBJZiBhbnkgb2YgdGhlIHByb21pc2VzIGlzIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24sIHRoaXMgcmVzdWx0aW5nIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZFxuICAgKiAgIHdpdGggdGhlIHNhbWUgcmVqZWN0aW9uIHZhbHVlLlxuICAgKi9cblxuICBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKSxcbiAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgIHJlc3VsdHMgPSBpc0FycmF5KHByb21pc2VzKSA/IFtdIDoge307XG5cbiAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbihwcm9taXNlLCBrZXkpIHtcbiAgICAgIGNvdW50ZXIrKztcbiAgICAgIHdoZW4ocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKCEoLS1jb3VudGVyKSkgcmVzb2x2ZVByb21pc2UocmVzdWx0LCByZXN1bHRzKTtcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICByZWplY3RQcm9taXNlKHJlc3VsdCwgcmVhc29uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaWYgKGNvdW50ZXIgPT09IDApIHtcbiAgICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdCwgcmVzdWx0cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3JhY2VcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb3IgcmVqZWN0cyBhcyBzb29uIGFzIG9uZSBvZiB0aG9zZSBwcm9taXNlc1xuICAgKiByZXNvbHZlcyBvciByZWplY3RzLCB3aXRoIHRoZSB2YWx1ZSBvciByZWFzb24gZnJvbSB0aGF0IHByb21pc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXkuPFByb21pc2U+fE9iamVjdC48UHJvbWlzZT59IHByb21pc2VzIEFuIGFycmF5IG9yIGhhc2ggb2YgcHJvbWlzZXMuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBvciByZWplY3RzIGFzIHNvb24gYXMgb25lIG9mIHRoZSBgcHJvbWlzZXNgXG4gICAqIHJlc29sdmVzIG9yIHJlamVjdHMsIHdpdGggdGhlIHZhbHVlIG9yIHJlYXNvbiBmcm9tIHRoYXQgcHJvbWlzZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gcmFjZShwcm9taXNlcykge1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG5cbiAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICB3aGVuKHByb21pc2UpLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSwgZGVmZXJyZWQucmVqZWN0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgZnVuY3Rpb24gJFEocmVzb2x2ZXIpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocmVzb2x2ZXIpKSB7XG4gICAgICB0aHJvdyAkcU1pbkVycignbm9yc2x2cicsICdFeHBlY3RlZCByZXNvbHZlckZuLCBnb3QgXFwnezB9XFwnJywgcmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKTtcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVGbih2YWx1ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlamVjdEZuKHJlYXNvbikge1xuICAgICAgcmVqZWN0UHJvbWlzZShwcm9taXNlLCByZWFzb24pO1xuICAgIH1cblxuICAgIHJlc29sdmVyKHJlc29sdmVGbiwgcmVqZWN0Rm4pO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICAvLyBMZXQncyBtYWtlIHRoZSBpbnN0YW5jZW9mIG9wZXJhdG9yIHdvcmsgZm9yIHByb21pc2VzLCBzbyB0aGF0XG4gIC8vIGBuZXcgJHEoZm4pIGluc3RhbmNlb2YgJHFgIHdvdWxkIGV2YWx1YXRlIHRvIHRydWUuXG4gICRRLnByb3RvdHlwZSA9IFByb21pc2UucHJvdG90eXBlO1xuXG4gICRRLmRlZmVyID0gZGVmZXI7XG4gICRRLnJlamVjdCA9IHJlamVjdDtcbiAgJFEud2hlbiA9IHdoZW47XG4gICRRLnJlc29sdmUgPSByZXNvbHZlO1xuICAkUS5hbGwgPSBhbGw7XG4gICRRLnJhY2UgPSByYWNlO1xuXG4gIHJldHVybiAkUTtcbn1cblxuZnVuY3Rpb24gaXNTdGF0ZUV4Y2VwdGlvbkhhbmRsZWQoc3RhdGUpIHtcbiAgcmV0dXJuICEhc3RhdGUucHVyO1xufVxuZnVuY3Rpb24gbWFya1FTdGF0ZUV4Y2VwdGlvbkhhbmRsZWQoc3RhdGUpIHtcbiAgc3RhdGUucHVyID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG1hcmtRRXhjZXB0aW9uSGFuZGxlZChxKSB7XG4gIG1hcmtRU3RhdGVFeGNlcHRpb25IYW5kbGVkKHEuJCRzdGF0ZSk7XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRSQUZQcm92aWRlcigpIHsgLy9yQUZcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJHdpbmRvdywgJHRpbWVvdXQpIHtcbiAgICB2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gJHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICB2YXIgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgdmFyIHJhZlN1cHBvcnRlZCA9ICEhcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgIHZhciByYWYgPSByYWZTdXBwb3J0ZWRcbiAgICAgID8gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICB2YXIgaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgdmFyIHRpbWVyID0gJHRpbWVvdXQoZm4sIDE2LjY2LCBmYWxzZSk7IC8vIDEwMDAgLyA2MCA9IDE2LjY2NlxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lcik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgIHJhZi5zdXBwb3J0ZWQgPSByYWZTdXBwb3J0ZWQ7XG5cbiAgICByZXR1cm4gcmFmO1xuICB9XTtcbn1cblxuLyoqXG4gKiBERVNJR04gTk9URVNcbiAqXG4gKiBUaGUgZGVzaWduIGRlY2lzaW9ucyBiZWhpbmQgdGhlIHNjb3BlIGFyZSBoZWF2aWx5IGZhdm9yZWQgZm9yIHNwZWVkIGFuZCBtZW1vcnkgY29uc3VtcHRpb24uXG4gKlxuICogVGhlIHR5cGljYWwgdXNlIG9mIHNjb3BlIGlzIHRvIHdhdGNoIHRoZSBleHByZXNzaW9ucywgd2hpY2ggbW9zdCBvZiB0aGUgdGltZSByZXR1cm4gdGhlIHNhbWVcbiAqIHZhbHVlIGFzIGxhc3QgdGltZSBzbyB3ZSBvcHRpbWl6ZSB0aGUgb3BlcmF0aW9uLlxuICpcbiAqIENsb3N1cmVzIGNvbnN0cnVjdGlvbiBpcyBleHBlbnNpdmUgaW4gdGVybXMgb2Ygc3BlZWQgYXMgd2VsbCBhcyBtZW1vcnk6XG4gKiAgIC0gTm8gY2xvc3VyZXMsIGluc3RlYWQgdXNlIHByb3RvdHlwaWNhbCBpbmhlcml0YW5jZSBmb3IgQVBJXG4gKiAgIC0gSW50ZXJuYWwgc3RhdGUgbmVlZHMgdG8gYmUgc3RvcmVkIG9uIHNjb3BlIGRpcmVjdGx5LCB3aGljaCBtZWFucyB0aGF0IHByaXZhdGUgc3RhdGUgaXNcbiAqICAgICBleHBvc2VkIGFzICQkX19fXyBwcm9wZXJ0aWVzXG4gKlxuICogTG9vcCBvcGVyYXRpb25zIGFyZSBvcHRpbWl6ZWQgYnkgdXNpbmcgd2hpbGUoY291bnQtLSkgeyAuLi4gfVxuICogICAtIFRoaXMgbWVhbnMgdGhhdCBpbiBvcmRlciB0byBrZWVwIHRoZSBzYW1lIG9yZGVyIG9mIGV4ZWN1dGlvbiBhcyBhZGRpdGlvbiB3ZSBoYXZlIHRvIGFkZFxuICogICAgIGl0ZW1zIHRvIHRoZSBhcnJheSBhdCB0aGUgYmVnaW5uaW5nICh1bnNoaWZ0KSBpbnN0ZWFkIG9mIGF0IHRoZSBlbmQgKHB1c2gpXG4gKlxuICogQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIGFuZCByZW1vdmVkIG9mdGVuXG4gKiAgIC0gVXNpbmcgYW4gYXJyYXkgd291bGQgYmUgc2xvdyBzaW5jZSBpbnNlcnRzIGluIHRoZSBtaWRkbGUgYXJlIGV4cGVuc2l2ZTsgc28gd2UgdXNlIGxpbmtlZCBsaXN0c1xuICpcbiAqIFRoZXJlIGFyZSBmZXdlciB3YXRjaGVzIHRoYW4gb2JzZXJ2ZXJzLiBUaGlzIGlzIHdoeSB5b3UgZG9uJ3Qgd2FudCB0aGUgb2JzZXJ2ZXIgdG8gYmUgaW1wbGVtZW50ZWRcbiAqIGluIHRoZSBzYW1lIHdheSBhcyB3YXRjaC4gV2F0Y2ggcmVxdWlyZXMgcmV0dXJuIG9mIHRoZSBpbml0aWFsaXphdGlvbiBmdW5jdGlvbiB3aGljaCBpcyBleHBlbnNpdmVcbiAqIHRvIGNvbnN0cnVjdC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkcm9vdFNjb3BlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFByb3ZpZGVyIGZvciB0aGUgJHJvb3RTY29wZSBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHJvb3RTY29wZVByb3ZpZGVyI2RpZ2VzdFR0bFxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2V0cyB0aGUgbnVtYmVyIG9mIGAkZGlnZXN0YCBpdGVyYXRpb25zIHRoZSBzY29wZSBzaG91bGQgYXR0ZW1wdCB0byBleGVjdXRlIGJlZm9yZSBnaXZpbmcgdXAgYW5kXG4gKiBhc3N1bWluZyB0aGF0IHRoZSBtb2RlbCBpcyB1bnN0YWJsZS5cbiAqXG4gKiBUaGUgY3VycmVudCBkZWZhdWx0IGlzIDEwIGl0ZXJhdGlvbnMuXG4gKlxuICogSW4gY29tcGxleCBhcHBsaWNhdGlvbnMgaXQncyBwb3NzaWJsZSB0aGF0IHRoZSBkZXBlbmRlbmNpZXMgYmV0d2VlbiBgJHdhdGNoYHMgd2lsbCByZXN1bHQgaW5cbiAqIHNldmVyYWwgZGlnZXN0IGl0ZXJhdGlvbnMuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwIGRpZ2VzdFxuICogaXRlcmF0aW9ucyBmb3IgaXRzIG1vZGVsIHRvIHN0YWJpbGl6ZSB0aGVuIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgd2hhdCBpcyBjYXVzaW5nIHRoZSBtb2RlbCB0b1xuICogY29udGludW91c2x5IGNoYW5nZSBkdXJpbmcgdGhlIGRpZ2VzdC5cbiAqXG4gKiBJbmNyZWFzaW5nIHRoZSBUVEwgY291bGQgaGF2ZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMsIHNvIHlvdSBzaG91bGQgbm90IGNoYW5nZSBpdCB3aXRob3V0XG4gKiBwcm9wZXIganVzdGlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbGltaXQgVGhlIG51bWJlciBvZiBkaWdlc3QgaXRlcmF0aW9ucy5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRyb290U2NvcGVcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXZlcnkgYXBwbGljYXRpb24gaGFzIGEgc2luZ2xlIHJvb3Qge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LlxuICogQWxsIG90aGVyIHNjb3BlcyBhcmUgZGVzY2VuZGFudCBzY29wZXMgb2YgdGhlIHJvb3Qgc2NvcGUuIFNjb3BlcyBwcm92aWRlIHNlcGFyYXRpb25cbiAqIGJldHdlZW4gdGhlIG1vZGVsIGFuZCB0aGUgdmlldywgdmlhIGEgbWVjaGFuaXNtIGZvciB3YXRjaGluZyB0aGUgbW9kZWwgZm9yIGNoYW5nZXMuXG4gKiBUaGV5IGFsc28gcHJvdmlkZSBldmVudCBlbWlzc2lvbi9icm9hZGNhc3QgYW5kIHN1YnNjcmlwdGlvbiBmYWNpbGl0eS4gU2VlIHRoZVxuICoge0BsaW5rIGd1aWRlL3Njb3BlIGRldmVsb3BlciBndWlkZSBvbiBzY29wZXN9LlxuICovXG5mdW5jdGlvbiAkUm9vdFNjb3BlUHJvdmlkZXIoKSB7XG4gIHZhciBUVEwgPSAxMDtcbiAgdmFyICRyb290U2NvcGVNaW5FcnIgPSBtaW5FcnIoJyRyb290U2NvcGUnKTtcbiAgdmFyIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcbiAgdmFyIGFwcGx5QXN5bmNJZCA9IG51bGw7XG5cbiAgdGhpcy5kaWdlc3RUdGwgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBUVEwgPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIFRUTDtcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNjb3BlQ2xhc3MocGFyZW50KSB7XG4gICAgZnVuY3Rpb24gQ2hpbGRTY29wZSgpIHtcbiAgICAgIHRoaXMuJCR3YXRjaGVycyA9IHRoaXMuJCRuZXh0U2libGluZyA9XG4gICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xuICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9O1xuICAgICAgdGhpcy4kJGxpc3RlbmVyQ291bnQgPSB7fTtcbiAgICAgIHRoaXMuJCR3YXRjaGVyc0NvdW50ID0gMDtcbiAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpO1xuICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBudWxsO1xuICAgIH1cbiAgICBDaGlsZFNjb3BlLnByb3RvdHlwZSA9IHBhcmVudDtcbiAgICByZXR1cm4gQ2hpbGRTY29wZTtcbiAgfVxuXG4gIHRoaXMuJGdldCA9IFsnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHBhcnNlJywgJyRicm93c2VyJyxcbiAgICAgIGZ1bmN0aW9uKCRleGNlcHRpb25IYW5kbGVyLCAkcGFyc2UsICRicm93c2VyKSB7XG5cbiAgICBmdW5jdGlvbiBkZXN0cm95Q2hpbGRTY29wZSgkZXZlbnQpIHtcbiAgICAgICAgJGV2ZW50LmN1cnJlbnRTY29wZS4kJGRlc3Ryb3llZCA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW5VcFNjb3BlKCRzY29wZSkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBJRSA5IG9ubHlcbiAgICAgIGlmIChtc2llID09PSA5KSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIGEgbWVtb3J5IGxlYWsgaW4gSUU5IGlmIGFsbCBjaGlsZCBzY29wZXMgYXJlIG5vdCBkaXNjb25uZWN0ZWRcbiAgICAgICAgLy8gY29tcGxldGVseSB3aGVuIGEgc2NvcGUgaXMgZGVzdHJveWVkLiBTbyB0aGlzIGNvZGUgd2lsbCByZWN1cnNlIHVwIHRocm91Z2hcbiAgICAgICAgLy8gYWxsIHRoaXMgc2NvcGVzIGNoaWxkcmVuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNlZSBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMDcwNlxuICAgICAgICBpZiAoJHNjb3BlLiQkY2hpbGRIZWFkKSB7XG4gICAgICAgICAgY2xlYW5VcFNjb3BlKCRzY29wZS4kJGNoaWxkSGVhZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRzY29wZS4kJG5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgY2xlYW5VcFNjb3BlKCRzY29wZS4kJG5leHRTaWJsaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29kZSBiZWxvdyB3b3JrcyBhcm91bmQgSUU5IGFuZCBWOCdzIG1lbW9yeSBsZWFrc1xuICAgICAgLy9cbiAgICAgIC8vIFNlZTpcbiAgICAgIC8vIC0gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzMjYzI2XG4gICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzY3OTQjaXNzdWVjb21tZW50LTM4NjQ4OTA5XG4gICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzEzMTMjaXNzdWVjb21tZW50LTEwMzc4NDUxXG5cbiAgICAgICRzY29wZS4kcGFyZW50ID0gJHNjb3BlLiQkbmV4dFNpYmxpbmcgPSAkc2NvcGUuJCRwcmV2U2libGluZyA9ICRzY29wZS4kJGNoaWxkSGVhZCA9XG4gICAgICAgICAgJHNjb3BlLiQkY2hpbGRUYWlsID0gJHNjb3BlLiRyb290ID0gJHNjb3BlLiQkd2F0Y2hlcnMgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSByb290IHNjb3BlIGNhbiBiZSByZXRyaWV2ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlICRyb290U2NvcGV9IGtleSBmcm9tIHRoZVxuICAgICAqIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgdXNpbmcgdGhlXG4gICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlblxuICAgICAqIGNvbXBpbGVkIEhUTUwgdGVtcGxhdGUgaXMgZXhlY3V0ZWQuKSBTZWUgYWxzbyB0aGUge0BsaW5rIGd1aWRlL3Njb3BlIFNjb3BlcyBndWlkZX0gZm9yXG4gICAgICogYW4gaW4tZGVwdGggaW50cm9kdWN0aW9uIGFuZCB1c2FnZSBleGFtcGxlcy5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyBJbmhlcml0YW5jZVxuICAgICAqIEEgc2NvcGUgY2FuIGluaGVyaXQgZnJvbSBhIHBhcmVudCBzY29wZSwgYXMgaW4gdGhpcyBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICAgICB2YXIgcGFyZW50ID0gJHJvb3RTY29wZTtcbiAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KCk7XG5cbiAgICAgICAgIHBhcmVudC5zYWx1dGF0aW9uID0gXCJIZWxsb1wiO1xuICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG5cbiAgICAgICAgIGNoaWxkLnNhbHV0YXRpb24gPSBcIldlbGNvbWVcIjtcbiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdXZWxjb21lJyk7XG4gICAgICAgICBleHBlY3QocGFyZW50LnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBXaGVuIGludGVyYWN0aW5nIHdpdGggYFNjb3BlYCBpbiB0ZXN0cywgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyBhcmUgYXZhaWxhYmxlIG9uIHRoZVxuICAgICAqIGluc3RhbmNlcyBvZiBgU2NvcGVgIHR5cGUuIFNlZSB7QGxpbmsgbmdNb2NrLiRyb290U2NvcGUuU2NvcGUgbmdNb2NrIFNjb3BlfSBmb3IgYWRkaXRpb25hbFxuICAgICAqIGRldGFpbHMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKCk+PX0gcHJvdmlkZXJzIE1hcCBvZiBzZXJ2aWNlIGZhY3Rvcnkgd2hpY2ggbmVlZCB0byBiZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgZm9yIHRoZSBjdXJyZW50IHNjb3BlLiBEZWZhdWx0cyB0byB7QGxpbmsgbmd9LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsICo+PX0gaW5zdGFuY2VDYWNoZSBQcm92aWRlcyBwcmUtaW5zdGFudGlhdGVkIHNlcnZpY2VzIHdoaWNoIHNob3VsZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kL292ZXJyaWRlIHNlcnZpY2VzIHByb3ZpZGVkIGJ5IGBwcm92aWRlcnNgLiBUaGlzIGlzIGhhbmR5XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHVuaXQtdGVzdGluZyBhbmQgaGF2aW5nIHRoZSBuZWVkIHRvIG92ZXJyaWRlIGEgZGVmYXVsdFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBOZXdseSBjcmVhdGVkIHNjb3BlLlxuICAgICAqXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2NvcGUoKSB7XG4gICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTtcbiAgICAgIHRoaXMuJCRwaGFzZSA9IHRoaXMuJHBhcmVudCA9IHRoaXMuJCR3YXRjaGVycyA9XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPVxuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xuICAgICAgdGhpcy4kcm9vdCA9IHRoaXM7XG4gICAgICB0aGlzLiQkZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG4gICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9O1xuICAgICAgdGhpcy4kJHdhdGNoZXJzQ291bnQgPSAwO1xuICAgICAgdGhpcy4kJGlzb2xhdGVCaW5kaW5ncyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkaWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFVuaXF1ZSBzY29wZSBJRCAobW9ub3RvbmljYWxseSBpbmNyZWFzaW5nKSB1c2VmdWwgZm9yIGRlYnVnZ2luZy5cbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHBhcmVudFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogUmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgc2NvcGUuXG4gICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkcm9vdFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVmZXJlbmNlIHRvIHRoZSByb290IHNjb3BlLlxuICAgICAgICovXG5cbiAgICBTY29wZS5wcm90b3R5cGUgPSB7XG4gICAgICBjb25zdHJ1Y3RvcjogU2NvcGUsXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJG5ld1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIENyZWF0ZXMgYSBuZXcgY2hpbGQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LlxuICAgICAgICpcbiAgICAgICAqIFRoZSBwYXJlbnQgc2NvcGUgd2lsbCBwcm9wYWdhdGUgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBldmVudC5cbiAgICAgICAqIFRoZSBzY29wZSBjYW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBzY29wZSBoaWVyYXJjaHkgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0uXG4gICAgICAgKlxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0gbXVzdCBiZSBjYWxsZWQgb24gYSBzY29wZSB3aGVuIGl0IGlzXG4gICAgICAgKiBkZXNpcmVkIGZvciB0aGUgc2NvcGUgYW5kIGl0cyBjaGlsZCBzY29wZXMgdG8gYmUgcGVybWFuZW50bHkgZGV0YWNoZWQgZnJvbSB0aGUgcGFyZW50IGFuZFxuICAgICAgICogdGh1cyBzdG9wIHBhcnRpY2lwYXRpbmcgaW4gbW9kZWwgY2hhbmdlIGRldGVjdGlvbiBhbmQgbGlzdGVuZXIgbm90aWZpY2F0aW9uIGJ5IGludm9raW5nLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNvbGF0ZSBJZiB0cnVlLCB0aGVuIHRoZSBzY29wZSBkb2VzIG5vdCBwcm90b3R5cGljYWxseSBpbmhlcml0IGZyb20gdGhlXG4gICAgICAgKiAgICAgICAgIHBhcmVudCBzY29wZS4gVGhlIHNjb3BlIGlzIGlzb2xhdGVkLCBhcyBpdCBjYW4gbm90IHNlZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy5cbiAgICAgICAqICAgICAgICAgV2hlbiBjcmVhdGluZyB3aWRnZXRzLCBpdCBpcyB1c2VmdWwgZm9yIHRoZSB3aWRnZXQgdG8gbm90IGFjY2lkZW50YWxseSByZWFkIHBhcmVudFxuICAgICAgICogICAgICAgICBzdGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1Njb3BlfSBbcGFyZW50PXRoaXNdIFRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBgU2NvcGVgfSB0aGF0IHdpbGwgYmUgdGhlIGAkcGFyZW50YFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbmV3bHkgY3JlYXRlZCBzY29wZS4gRGVmYXVsdHMgdG8gYHRoaXNgIHNjb3BlIGlmIG5vdCBwcm92aWRlZC5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSB0cmFuc2NsdWRlIHNjb3BlIHRvIGNvcnJlY3RseSBwbGFjZSBpdFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2NvcGUgaGllcmFyY2h5IHdoaWxlIG1haW50YWluaW5nIHRoZSBjb3JyZWN0IHByb3RvdHlwaWNhbFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0YW5jZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbmV3bHkgY3JlYXRlZCBjaGlsZCBzY29wZS5cbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgICRuZXc6IGZ1bmN0aW9uKGlzb2xhdGUsIHBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGQ7XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IHRoaXM7XG5cbiAgICAgICAgaWYgKGlzb2xhdGUpIHtcbiAgICAgICAgICBjaGlsZCA9IG5ldyBTY29wZSgpO1xuICAgICAgICAgIGNoaWxkLiRyb290ID0gdGhpcy4kcm9vdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPbmx5IGNyZWF0ZSBhIGNoaWxkIHNjb3BlIGNsYXNzIGlmIHNvbWVib2R5IGFza3MgZm9yIG9uZSxcbiAgICAgICAgICAvLyBidXQgY2FjaGUgaXQgdG8gYWxsb3cgdGhlIFZNIHRvIG9wdGltaXplIGxvb2t1cHMuXG4gICAgICAgICAgaWYgKCF0aGlzLiQkQ2hpbGRTY29wZSkge1xuICAgICAgICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBjcmVhdGVDaGlsZFNjb3BlQ2xhc3ModGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkID0gbmV3IHRoaXMuJCRDaGlsZFNjb3BlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgY2hpbGQuJCRwcmV2U2libGluZyA9IHBhcmVudC4kJGNoaWxkVGFpbDtcbiAgICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCkge1xuICAgICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRIZWFkID0gcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHRoZSBuZXcgc2NvcGUgaXMgbm90IGlzb2xhdGVkIG9yIHdlIGluaGVyaXQgZnJvbSBgdGhpc2AsIGFuZFxuICAgICAgICAvLyB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZCwgdGhlIHByb3BlcnR5IGAkJGRlc3Ryb3llZGAgaXMgaW5oZXJpdGVkXG4gICAgICAgIC8vIHByb3RvdHlwaWNhbGx5LiBJbiBhbGwgb3RoZXIgY2FzZXMsIHRoaXMgcHJvcGVydHkgbmVlZHMgdG8gYmUgc2V0XG4gICAgICAgIC8vIHdoZW4gdGhlIHBhcmVudCBzY29wZSBpcyBkZXN0cm95ZWQuXG4gICAgICAgIC8vIFRoZSBsaXN0ZW5lciBuZWVkcyB0byBiZSBhZGRlZCBhZnRlciB0aGUgcGFyZW50IGlzIHNldFxuICAgICAgICBpZiAoaXNvbGF0ZSB8fCBwYXJlbnQgIT09IHRoaXMpIGNoaWxkLiRvbignJGRlc3Ryb3knLCBkZXN0cm95Q2hpbGRTY29wZSk7XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlZ2lzdGVycyBhIGBsaXN0ZW5lcmAgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWQgd2hlbmV2ZXIgdGhlIGB3YXRjaEV4cHJlc3Npb25gIGNoYW5nZXMuXG4gICAgICAgKlxuICAgICAgICogLSBUaGUgYHdhdGNoRXhwcmVzc2lvbmAgaXMgY2FsbGVkIG9uIGV2ZXJ5IGNhbGwgdG8ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdFxuICAgICAgICogICAkZGlnZXN0KCl9IGFuZCBzaG91bGQgcmV0dXJuIHRoZSB2YWx1ZSB0aGF0IHdpbGwgYmUgd2F0Y2hlZC4gKGB3YXRjaEV4cHJlc3Npb25gIHNob3VsZCBub3QgY2hhbmdlXG4gICAgICAgKiAgIGl0cyB2YWx1ZSB3aGVuIGV4ZWN1dGVkIG11bHRpcGxlIHRpbWVzIHdpdGggdGhlIHNhbWUgaW5wdXQgYmVjYXVzZSBpdCBtYXkgYmUgZXhlY3V0ZWQgbXVsdGlwbGVcbiAgICAgICAqICAgdGltZXMgYnkge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9LiBUaGF0IGlzLCBgd2F0Y2hFeHByZXNzaW9uYCBzaG91bGQgYmVcbiAgICAgICAqICAgW2lkZW1wb3RlbnRdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSWRlbXBvdGVuY2UpLilcbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIG9ubHkgd2hlbiB0aGUgdmFsdWUgZnJvbSB0aGUgY3VycmVudCBgd2F0Y2hFeHByZXNzaW9uYCBhbmQgdGhlXG4gICAgICAgKiAgIHByZXZpb3VzIGNhbGwgdG8gYHdhdGNoRXhwcmVzc2lvbmAgYXJlIG5vdCBlcXVhbCAod2l0aCB0aGUgZXhjZXB0aW9uIG9mIHRoZSBpbml0aWFsIHJ1bixcbiAgICAgICAqICAgc2VlIGJlbG93KS4gSW5lcXVhbGl0eSBpcyBkZXRlcm1pbmVkIGFjY29yZGluZyB0byByZWZlcmVuY2UgaW5lcXVhbGl0eSxcbiAgICAgICAqICAgW3N0cmljdCBjb21wYXJpc29uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvQ29tcGFyaXNvbl9PcGVyYXRvcnMpXG4gICAgICAgKiAgICB2aWEgdGhlIGAhPT1gIEphdmFzY3JpcHQgb3BlcmF0b3IsIHVubGVzcyBgb2JqZWN0RXF1YWxpdHkgPT0gdHJ1ZWBcbiAgICAgICAqICAgKHNlZSBuZXh0IHBvaW50KVxuICAgICAgICogLSBXaGVuIGBvYmplY3RFcXVhbGl0eSA9PSB0cnVlYCwgaW5lcXVhbGl0eSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgaXMgZGV0ZXJtaW5lZFxuICAgICAgICogICBhY2NvcmRpbmcgdG8gdGhlIHtAbGluayBhbmd1bGFyLmVxdWFsc30gZnVuY3Rpb24uIFRvIHNhdmUgdGhlIHZhbHVlIG9mIHRoZSBvYmplY3QgZm9yXG4gICAgICAgKiAgIGxhdGVyIGNvbXBhcmlzb24sIHRoZSB7QGxpbmsgYW5ndWxhci5jb3B5fSBmdW5jdGlvbiBpcyB1c2VkLiBUaGlzIHRoZXJlZm9yZSBtZWFucyB0aGF0XG4gICAgICAgKiAgIHdhdGNoaW5nIGNvbXBsZXggb2JqZWN0cyB3aWxsIGhhdmUgYWR2ZXJzZSBtZW1vcnkgYW5kIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucy5cbiAgICAgICAqIC0gVGhpcyBzaG91bGQgbm90IGJlIHVzZWQgdG8gd2F0Y2ggZm9yIGNoYW5nZXMgaW4gb2JqZWN0cyB0aGF0IGFyZVxuICAgICAgICogICBvciBjb250YWluIFtGaWxlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvRmlsZSkgb2JqZWN0cyBkdWUgdG8gbGltaXRhdGlvbnMgd2l0aCB7QGxpbmsgYW5ndWxhci5jb3B5IGBhbmd1bGFyLmNvcHlgfS5cbiAgICAgICAqIC0gVGhlIHdhdGNoIGBsaXN0ZW5lcmAgbWF5IGNoYW5nZSB0aGUgbW9kZWwsIHdoaWNoIG1heSB0cmlnZ2VyIG90aGVyIGBsaXN0ZW5lcmBzIHRvIGZpcmUuXG4gICAgICAgKiAgIFRoaXMgaXMgYWNoaWV2ZWQgYnkgcmVydW5uaW5nIHRoZSB3YXRjaGVycyB1bnRpbCBubyBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gVGhlIHJlcnVuXG4gICAgICAgKiAgIGl0ZXJhdGlvbiBsaW1pdCBpcyAxMCB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3AgZGVhZGxvY2suXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gaXMgY2FsbGVkLFxuICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGggbm8gYGxpc3RlbmVyYC4gKEJlIHByZXBhcmVkIGZvclxuICAgICAgICogbXVsdGlwbGUgY2FsbHMgdG8geW91ciBgd2F0Y2hFeHByZXNzaW9uYCBiZWNhdXNlIGl0IHdpbGwgZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBpbiBhXG4gICAgICAgKiBzaW5nbGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZSBpZiBhIGNoYW5nZSBpcyBkZXRlY3RlZC4pXG4gICAgICAgKlxuICAgICAgICogQWZ0ZXIgYSB3YXRjaGVyIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc2NvcGUsIHRoZSBgbGlzdGVuZXJgIGZuIGlzIGNhbGxlZCBhc3luY2hyb25vdXNseVxuICAgICAgICogKHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jICRldmFsQXN5bmN9KSB0byBpbml0aWFsaXplIHRoZVxuICAgICAgICogd2F0Y2hlci4gSW4gcmFyZSBjYXNlcywgdGhpcyBpcyB1bmRlc2lyYWJsZSBiZWNhdXNlIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQgd2hlbiB0aGUgcmVzdWx0XG4gICAgICAgKiBvZiBgd2F0Y2hFeHByZXNzaW9uYCBkaWRuJ3QgY2hhbmdlLiBUbyBkZXRlY3QgdGhpcyBzY2VuYXJpbyB3aXRoaW4gdGhlIGBsaXN0ZW5lcmAgZm4sIHlvdVxuICAgICAgICogY2FuIGNvbXBhcmUgdGhlIGBuZXdWYWxgIGFuZCBgb2xkVmFsYC4gSWYgdGhlc2UgdHdvIHZhbHVlcyBhcmUgaWRlbnRpY2FsIChgPT09YCkgdGhlbiB0aGVcbiAgICAgICAqIGxpc3RlbmVyIHdhcyBjYWxsZWQgZHVlIHRvIGluaXRpYWxpemF0aW9uLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICAvLyBsZXQncyBhc3N1bWUgdGhhdCBzY29wZSB3YXMgZGVwZW5kZW5jeSBpbmplY3RlZCBhcyB0aGUgJHJvb3RTY29wZVxuICAgICAgICAgICB2YXIgc2NvcGUgPSAkcm9vdFNjb3BlO1xuICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJztcbiAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG5cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSBzY29wZS5jb3VudGVyICsgMTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyBidXQgbm93IGl0IHdpbGwgbm90IGJlIGNhbGxlZCB1bmxlc3MgdGhlIHZhbHVlIGNoYW5nZXNcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJztcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTtcblxuXG5cbiAgICAgICAgICAgLy8gVXNpbmcgYSBmdW5jdGlvbiBhcyBhIHdhdGNoRXhwcmVzc2lvblxuICAgICAgICAgICB2YXIgZm9vZDtcbiAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSAwO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHZhbHVlIGJlaW5nIHdhdGNoZWQuIEl0IGlzIGNhbGxlZCBmb3IgZWFjaCB0dXJuIG9mIHRoZSAkZGlnZXN0IGxvb3BcbiAgICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIGZvb2Q7IH0sXG4gICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2hhbmdlIGxpc3RlbmVyLCBjYWxsZWQgd2hlbiB0aGUgdmFsdWUgcmV0dXJuZWQgZnJvbSB0aGUgYWJvdmUgZnVuY3Rpb24gY2hhbmdlc1xuICAgICAgICAgICAgIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgaWYgKCBuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgKSB7XG4gICAgICAgICAgICAgICAgIC8vIE9ubHkgaW5jcmVtZW50IHRoZSBjb3VudGVyIGlmIHRoZSB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgIHNjb3BlLmZvb2RDb3VudGVyID0gc2NvcGUuZm9vZENvdW50ZXIgKyAxO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgKTtcbiAgICAgICAgICAgLy8gTm8gZGlnZXN0IGhhcyBiZWVuIHJ1biBzbyB0aGUgY291bnRlciB3aWxsIGJlIHplcm9cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIC8vIFJ1biB0aGUgZGlnZXN0IGJ1dCBzaW5jZSBmb29kIGhhcyBub3QgY2hhbmdlZCBjb3VudCB3aWxsIHN0aWxsIGJlIHplcm9cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgLy8gVXBkYXRlIGZvb2QgYW5kIHJ1biBkaWdlc3QuICBOb3cgdGhlIGNvdW50ZXIgd2lsbCBpbmNyZW1lbnRcbiAgICAgICAgICAgZm9vZCA9ICdjaGVlc2VidXJnZXInO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhmdW5jdGlvbigpfHN0cmluZyl9IHdhdGNoRXhwcmVzc2lvbiBFeHByZXNzaW9uIHRoYXQgaXMgZXZhbHVhdGVkIG9uIGVhY2hcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEEgY2hhbmdlIGluIHRoZSByZXR1cm4gdmFsdWUgdHJpZ2dlcnNcbiAgICAgICAqICAgIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn1cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGNhbGxlZCB3aXRoIGN1cnJlbnQgYHNjb3BlYCBhcyBhIHBhcmFtZXRlci5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSB2YWx1ZVxuICAgICAgICogICAgb2YgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBuZXdWYWxgIGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgLSBgb2xkVmFsYCBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICAtIGBzY29wZWAgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbb2JqZWN0RXF1YWxpdHk9ZmFsc2VdIENvbXBhcmUgZm9yIG9iamVjdCBlcXVhbGl0eSB1c2luZyB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGluc3RlYWQgb2ZcbiAgICAgICAqICAgICBjb21wYXJpbmcgZm9yIHJlZmVyZW5jZSBlcXVhbGl0eS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaDogZnVuY3Rpb24od2F0Y2hFeHAsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcHJldHR5UHJpbnRFeHByZXNzaW9uKSB7XG4gICAgICAgIHZhciBnZXQgPSAkcGFyc2Uod2F0Y2hFeHApO1xuXG4gICAgICAgIGlmIChnZXQuJCR3YXRjaERlbGVnYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGdldC4kJHdhdGNoRGVsZWdhdGUodGhpcywgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBnZXQsIHdhdGNoRXhwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLFxuICAgICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzLFxuICAgICAgICAgICAgd2F0Y2hlciA9IHtcbiAgICAgICAgICAgICAgZm46IGxpc3RlbmVyLFxuICAgICAgICAgICAgICBsYXN0OiBpbml0V2F0Y2hWYWwsXG4gICAgICAgICAgICAgIGdldDogZ2V0LFxuICAgICAgICAgICAgICBleHA6IHByZXR0eVByaW50RXhwcmVzc2lvbiB8fCB3YXRjaEV4cCxcbiAgICAgICAgICAgICAgZXE6ICEhb2JqZWN0RXF1YWxpdHlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuXG4gICAgICAgIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICB3YXRjaGVyLmZuID0gbm9vcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYXJyYXkpIHtcbiAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMgPSBbXTtcbiAgICAgICAgICBhcnJheS4kJGRpZ2VzdFdhdGNoSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSB1c2UgdW5zaGlmdCBzaW5jZSB3ZSB1c2UgYSB3aGlsZSBsb29wIGluICRkaWdlc3QgZm9yIHNwZWVkLlxuICAgICAgICAvLyB0aGUgd2hpbGUgbG9vcCByZWFkcyBpbiByZXZlcnNlIG9yZGVyLlxuICAgICAgICBhcnJheS51bnNoaWZ0KHdhdGNoZXIpO1xuICAgICAgICBhcnJheS4kJGRpZ2VzdFdhdGNoSW5kZXgrKztcbiAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudCh0aGlzLCAxKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGVyZWdpc3RlcldhdGNoKCkge1xuICAgICAgICAgIHZhciBpbmRleCA9IGFycmF5UmVtb3ZlKGFycmF5LCB3YXRjaGVyKTtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudChzY29wZSwgLTEpO1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYXJyYXkuJCRkaWdlc3RXYXRjaEluZGV4KSB7XG4gICAgICAgICAgICAgIGFycmF5LiQkZGlnZXN0V2F0Y2hJbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoR3JvdXBcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIHZhcmlhbnQgb2Yge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aGVyZSBpdCB3YXRjaGVzIGFuIGFycmF5IG9mIGB3YXRjaEV4cHJlc3Npb25zYC5cbiAgICAgICAqIElmIGFueSBvbmUgZXhwcmVzc2lvbiBpbiB0aGUgY29sbGVjdGlvbiBjaGFuZ2VzIHRoZSBgbGlzdGVuZXJgIGlzIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGl0ZW1zIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgYXJlIG9ic2VydmVkIHZpYSB0aGUgc3RhbmRhcmQgYCR3YXRjaGAgb3BlcmF0aW9uLiBUaGVpciByZXR1cm5cbiAgICAgICAqICAgdmFsdWVzIGFyZSBleGFtaW5lZCBmb3IgY2hhbmdlcyBvbiBldmVyeSBjYWxsIHRvIGAkZGlnZXN0YC5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueSBleHByZXNzaW9uIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBgJHdhdGNoR3JvdXBgIGlzIG1vcmUgcGVyZm9ybWFudCB0aGFuIHdhdGNoaW5nIGVhY2ggZXhwcmVzc2lvbiBpbmRpdmlkdWFsbHksIGFuZCBzaG91bGQgYmVcbiAgICAgICAqIHVzZWQgd2hlbiB0aGUgbGlzdGVuZXIgZG9lcyBub3QgbmVlZCB0byBrbm93IHdoaWNoIGV4cHJlc3Npb24gaGFzIGNoYW5nZWQuXG4gICAgICAgKiBJZiB0aGUgbGlzdGVuZXIgbmVlZHMgdG8ga25vdyB3aGljaCBleHByZXNzaW9uIGhhcyBjaGFuZ2VkLFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSBvclxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvbiAkd2F0Y2hDb2xsZWN0aW9uKCl9IHNob3VsZCBiZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xGdW5jdGlvbihzY29wZSk+fSB3YXRjaEV4cHJlc3Npb25zIEFycmF5IG9mIGV4cHJlc3Npb25zIHRoYXQgd2lsbCBiZSBpbmRpdmlkdWFsbHlcbiAgICAgICAqIHdhdGNoZWQgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YgYW55XG4gICAgICAgKiAgICBleHByZXNzaW9uIGluIGB3YXRjaEV4cHJlc3Npb25zYCBjaGFuZ2VzXG4gICAgICAgKiAgICBUaGUgYG5ld1ZhbHVlc2AgYXJyYXkgY29udGFpbnMgdGhlIGN1cnJlbnQgdmFsdWVzIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AsIHdpdGggdGhlIGluZGV4ZXMgbWF0Y2hpbmdcbiAgICAgICAqICAgIHRob3NlIG9mIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICBhbmQgdGhlIGBvbGRWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZ1xuICAgICAgICogICAgdGhvc2Ugb2YgYHdhdGNoRXhwcmVzc2lvbmAuXG4gICAgICAgKlxuICAgICAgICogICAgTm90ZSB0aGF0IGBuZXdWYWx1ZXNgIGFuZCBgb2xkVmFsdWVzYCByZWZsZWN0IHRoZSBkaWZmZXJlbmNlcyBpbiBlYWNoICoqaW5kaXZpZHVhbCoqXG4gICAgICAgKiAgICBleHByZXNzaW9uLCBhbmQgbm90IHRoZSBkaWZmZXJlbmNlIG9mIHRoZSB2YWx1ZXMgYmV0d2VlbiBlYWNoIGNhbGwgb2YgdGhlIGxpc3RlbmVyLlxuICAgICAgICogICAgVGhhdCBtZWFucyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGBuZXdWYWx1ZXNgIGFuZCBgb2xkVmFsdWVzYCBjYW5ub3QgYmUgdXNlZCB0byBkZXRlcm1pbmVcbiAgICAgICAqICAgIHdoaWNoIGV4cHJlc3Npb24gaGFzIGNoYW5nZWQgLyByZW1haW5lZCBzdGFibGU6XG4gICAgICAgKlxuICAgICAgICogICAgYGBganNcbiAgICAgICAqXG4gICAgICAgKiAgICAkc2NvcGUuJHdhdGNoR3JvdXAoWyd2MScsICd2MiddLCBmdW5jdGlvbihuZXdWYWx1ZXMsIG9sZFZhbHVlcykge1xuICAgICAgICogICAgICBjb25zb2xlLmxvZyhuZXdWYWx1ZXMsIG9sZFZhbHVlcyk7XG4gICAgICAgKiAgICB9KTtcbiAgICAgICAqXG4gICAgICAgKiAgICAvLyBuZXdWYWx1ZXMsIG9sZFZhbHVlcyBpbml0aWFsbHlcbiAgICAgICAqICAgIC8vIFt1bmRlZmluZWQsIHVuZGVmaW5lZF0sIFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgICAqXG4gICAgICAgKiAgICAkc2NvcGUudjEgPSAnYSc7XG4gICAgICAgKiAgICAkc2NvcGUudjIgPSAnYSc7XG4gICAgICAgKlxuICAgICAgICogICAgLy8gWydhJywgJ2EnXSwgW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAgICpcbiAgICAgICAqICAgICRzY29wZS52MiA9ICdiJ1xuICAgICAgICpcbiAgICAgICAqICAgIC8vIHYxIGhhc24ndCBjaGFuZ2VkIHNpbmNlIGl0IGJlY2FtZSBgJ2EnYCwgdGhlcmVmb3JlIGl0cyBvbGRWYWx1ZSBpcyBzdGlsbCBgdW5kZWZpbmVkYFxuICAgICAgICogICAgLy8gWydhJywgJ2InXSwgW3VuZGVmaW5lZCwgJ2EnXVxuICAgICAgICpcbiAgICAgICAqICAgIGBgYFxuICAgICAgICpcbiAgICAgICAqICAgIFRoZSBgc2NvcGVgIHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciBhbGwgbGlzdGVuZXJzLlxuICAgICAgICovXG4gICAgICAkd2F0Y2hHcm91cDogZnVuY3Rpb24od2F0Y2hFeHByZXNzaW9ucywgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7XG4gICAgICAgIHZhciBuZXdWYWx1ZXMgPSBuZXcgQXJyYXkod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpO1xuICAgICAgICB2YXIgZGVyZWdpc3RlckZucyA9IFtdO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZmlyc3RSdW4gPSB0cnVlO1xuXG4gICAgICAgIGlmICghd2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBObyBleHByZXNzaW9ucyBtZWFucyB3ZSBjYWxsIHRoZSBsaXN0ZW5lciBBU0FQXG4gICAgICAgICAgdmFyIHNob3VsZENhbGwgPSB0cnVlO1xuICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzaG91bGRDYWxsKSBsaXN0ZW5lcihuZXdWYWx1ZXMsIG5ld1ZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgICAgc2hvdWxkQ2FsbCA9IGZhbHNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugc2l6ZSBvZiBvbmVcbiAgICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2god2F0Y2hFeHByZXNzaW9uc1swXSwgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbih2YWx1ZSwgb2xkVmFsdWUsIHNjb3BlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbMF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1swXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCAodmFsdWUgPT09IG9sZFZhbHVlKSA/IG5ld1ZhbHVlcyA6IG9sZFZhbHVlcywgc2NvcGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaCh3YXRjaEV4cHJlc3Npb25zLCBmdW5jdGlvbihleHByLCBpKSB7XG4gICAgICAgICAgdmFyIHVud2F0Y2hGbiA9IHNlbGYuJHdhdGNoKGV4cHIsIGZ1bmN0aW9uIHdhdGNoR3JvdXBTdWJBY3Rpb24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1tpXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyh3YXRjaEdyb3VwQWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkZXJlZ2lzdGVyRm5zLnB1c2godW53YXRjaEZuKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbigpIHtcbiAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGZpcnN0UnVuKSB7XG4gICAgICAgICAgICBmaXJzdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZXMsIG9sZFZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgIHdoaWxlIChkZXJlZ2lzdGVyRm5zLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVyZWdpc3RlckZucy5zaGlmdCgpKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNoYWxsb3cgd2F0Y2hlcyB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kIGZpcmVzIHdoZW5ldmVyIGFueSBvZiB0aGUgcHJvcGVydGllcyBjaGFuZ2VcbiAgICAgICAqIChmb3IgYXJyYXlzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmcgdGhlIGFycmF5IGl0ZW1zOyBmb3Igb2JqZWN0IG1hcHMsIHRoaXMgaW1wbGllcyB3YXRjaGluZ1xuICAgICAgICogdGhlIHByb3BlcnRpZXMpLiBJZiBhIGNoYW5nZSBpcyBkZXRlY3RlZCwgdGhlIGBsaXN0ZW5lcmAgY2FsbGJhY2sgaXMgZmlyZWQuXG4gICAgICAgKlxuICAgICAgICogLSBUaGUgYG9iamAgY29sbGVjdGlvbiBpcyBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgaXMgZXhhbWluZWQgb24gZXZlcnlcbiAgICAgICAqICAgY2FsbCB0byAkZGlnZXN0KCkgdG8gc2VlIGlmIGFueSBpdGVtcyBoYXZlIGJlZW4gYWRkZWQsIHJlbW92ZWQsIG9yIG1vdmVkLlxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55dGhpbmcgd2l0aGluIHRoZSBgb2JqYCBoYXMgY2hhbmdlZC4gRXhhbXBsZXMgaW5jbHVkZVxuICAgICAgICogICBhZGRpbmcsIHJlbW92aW5nLCBhbmQgbW92aW5nIGl0ZW1zIGJlbG9uZ2luZyB0byBhbiBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ2lnb3InLCAnbWF0aWFzJywgJ21pc2tvJywgJ2phbWVzJ107XG4gICAgICAgICAgJHNjb3BlLmRhdGFDb3VudCA9IDQ7XG5cbiAgICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignbmFtZXMnLCBmdW5jdGlvbihuZXdOYW1lcywgb2xkTmFtZXMpIHtcbiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSBuZXdOYW1lcy5sZW5ndGg7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTtcbiAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpO1xuXG4gICAgICAgICAgLy9zdGlsbCBhdCA0IC4uLiBubyBjaGFuZ2VzXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG5cbiAgICAgICAgICAkc2NvcGUubmFtZXMucG9wKCk7XG4gICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcblxuICAgICAgICAgIC8vbm93IHRoZXJlJ3MgYmVlbiBhIGNoYW5nZVxuICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKHNjb3BlKX0gb2JqIEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS4gVGhlXG4gICAgICAgKiAgICBleHByZXNzaW9uIHZhbHVlIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgd2hpY2ggaXMgb2JzZXJ2ZWQgb24gZWFjaFxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQW55IHNoYWxsb3cgY2hhbmdlIHdpdGhpbiB0aGVcbiAgICAgICAqICAgIGNvbGxlY3Rpb24gd2lsbCB0cmlnZ2VyIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld0NvbGxlY3Rpb24sIG9sZENvbGxlY3Rpb24sIHNjb3BlKX0gbGlzdGVuZXIgYSBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWRcbiAgICAgICAqICAgIHdoZW4gYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQuXG4gICAgICAgKiAgICAtIFRoZSBgbmV3Q29sbGVjdGlvbmAgb2JqZWN0IGlzIHRoZSBuZXdseSBtb2RpZmllZCBkYXRhIG9idGFpbmVkIGZyb20gdGhlIGBvYmpgIGV4cHJlc3Npb25cbiAgICAgICAqICAgIC0gVGhlIGBvbGRDb2xsZWN0aW9uYCBvYmplY3QgaXMgYSBjb3B5IG9mIHRoZSBmb3JtZXIgY29sbGVjdGlvbiBkYXRhLlxuICAgICAgICogICAgICBEdWUgdG8gcGVyZm9ybWFuY2UgY29uc2lkZXJhdGlvbnMsIHRoZWBvbGRDb2xsZWN0aW9uYCB2YWx1ZSBpcyBjb21wdXRlZCBvbmx5IGlmIHRoZVxuICAgICAgICogICAgICBgbGlzdGVuZXJgIGZ1bmN0aW9uIGRlY2xhcmVzIHR3byBvciBtb3JlIGFyZ3VtZW50cy5cbiAgICAgICAqICAgIC0gVGhlIGBzY29wZWAgYXJndW1lbnQgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLiBXaGVuIHRoZVxuICAgICAgICogICAgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLCB0aGUgaW50ZXJuYWwgd2F0Y2ggb3BlcmF0aW9uIGlzIHRlcm1pbmF0ZWQuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaENvbGxlY3Rpb246IGZ1bmN0aW9uKG9iaiwgbGlzdGVuZXIpIHtcbiAgICAgICAgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yLiRzdGF0ZWZ1bCA9IHRydWU7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvLyB0aGUgY3VycmVudCB2YWx1ZSwgdXBkYXRlZCBvbiBlYWNoIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICB2YXIgbmV3VmFsdWU7XG4gICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHRoZSBsYXN0IGRpcnR5LWNoZWNrIHJ1bixcbiAgICAgICAgLy8gdXBkYXRlZCB0byBtYXRjaCBuZXdWYWx1ZSBkdXJpbmcgZGlydHktY2hlY2sgcnVuXG4gICAgICAgIHZhciBvbGRWYWx1ZTtcbiAgICAgICAgLy8gYSBzaGFsbG93IGNvcHkgb2YgdGhlIG5ld1ZhbHVlIGZyb20gd2hlbiB0aGUgbGFzdCBjaGFuZ2UgaGFwcGVuZWRcbiAgICAgICAgdmFyIHZlcnlPbGRWYWx1ZTtcbiAgICAgICAgLy8gb25seSB0cmFjayB2ZXJ5T2xkVmFsdWUgaWYgdGhlIGxpc3RlbmVyIGlzIGFza2luZyBmb3IgaXRcbiAgICAgICAgdmFyIHRyYWNrVmVyeU9sZFZhbHVlID0gKGxpc3RlbmVyLmxlbmd0aCA+IDEpO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0ZWQgPSAwO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0b3IgPSAkcGFyc2Uob2JqLCAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IpO1xuICAgICAgICB2YXIgaW50ZXJuYWxBcnJheSA9IFtdO1xuICAgICAgICB2YXIgaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgdmFyIGluaXRSdW4gPSB0cnVlO1xuICAgICAgICB2YXIgb2xkTGVuZ3RoID0gMDtcblxuICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IoX3ZhbHVlKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBfdmFsdWU7XG4gICAgICAgICAgdmFyIG5ld0xlbmd0aCwga2V5LCBib3RoTmFOLCBuZXdJdGVtLCBvbGRJdGVtO1xuXG4gICAgICAgICAgLy8gSWYgdGhlIG5ldyB2YWx1ZSBpcyB1bmRlZmluZWQsIHRoZW4gcmV0dXJuIHVuZGVmaW5lZCBhcyB0aGUgd2F0Y2ggbWF5IGJlIGEgb25lLXRpbWUgd2F0Y2hcbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQobmV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkgeyAvLyBpZiBwcmltaXRpdmVcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbEFycmF5KSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gYXJyYXkgaW50byBhcnJheS5cbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbnRlcm5hbEFycmF5O1xuICAgICAgICAgICAgICBvbGRMZW5ndGggPSBvbGRWYWx1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdMZW5ndGggPSBuZXdWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggIT09IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBpZiBsZW5ndGhzIGRvIG5vdCBtYXRjaCB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICBvbGRWYWx1ZS5sZW5ndGggPSBvbGRMZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2ldO1xuICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3VmFsdWVbaV07XG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgICAgICAgICBib3RoTmFOID0gKG9sZEl0ZW0gIT09IG9sZEl0ZW0pICYmIChuZXdJdGVtICE9PSBuZXdJdGVtKTtcbiAgICAgICAgICAgICAgaWYgKCFib3RoTmFOICYmIChvbGRJdGVtICE9PSBuZXdJdGVtKSkge1xuICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWVbaV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gaW50ZXJuYWxPYmplY3QpIHtcbiAgICAgICAgICAgICAgLy8gd2UgYXJlIHRyYW5zaXRpb25pbmcgZnJvbSBzb21ldGhpbmcgd2hpY2ggd2FzIG5vdCBhbiBvYmplY3QgaW50byBvYmplY3QuXG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgb2xkTGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvcHkgdGhlIGl0ZW1zIHRvIG9sZFZhbHVlIGFuZCBsb29rIGZvciBjaGFuZ2VzLlxuICAgICAgICAgICAgbmV3TGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG5ld1ZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgbmV3TGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld1ZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICAgICAgICAgICAgICBib3RoTmFOID0gKG9sZEl0ZW0gIT09IG9sZEl0ZW0pICYmIChuZXdJdGVtICE9PSBuZXdJdGVtKTtcbiAgICAgICAgICAgICAgICAgIGlmICghYm90aE5hTiAmJiAob2xkSXRlbSAhPT0gbmV3SXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWVba2V5XSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG9sZExlbmd0aCsrO1xuICAgICAgICAgICAgICAgICAgb2xkVmFsdWVba2V5XSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAvLyB3ZSB1c2VkIHRvIGhhdmUgbW9yZSBrZXlzLCBuZWVkIHRvIGZpbmQgdGhlbSBhbmQgZGVzdHJveSB0aGVtLlxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICBkZWxldGUgb2xkVmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNoYW5nZURldGVjdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkFjdGlvbigpIHtcbiAgICAgICAgICBpZiAoaW5pdFJ1bikge1xuICAgICAgICAgICAgaW5pdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUsIG5ld1ZhbHVlLCBzZWxmKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUsIHZlcnlPbGRWYWx1ZSwgc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbWFrZSBhIGNvcHkgZm9yIHRoZSBuZXh0IHRpbWUgYSBjb2xsZWN0aW9uIGlzIGNoYW5nZWRcbiAgICAgICAgICBpZiAodHJhY2tWZXJ5T2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghaXNPYmplY3QobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vcHJpbWl0aXZlXG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZShuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0gbmV3IEFycmF5KG5ld1ZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3VmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWVbaV0gPSBuZXdWYWx1ZVtpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgb2JqZWN0XG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2tleV0gPSBuZXdWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLiR3YXRjaChjaGFuZ2VEZXRlY3RvciwgJHdhdGNoQ29sbGVjdGlvbkFjdGlvbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFByb2Nlc3NlcyBhbGwgb2YgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyc30gb2YgdGhlIGN1cnJlbnQgc2NvcGUgYW5kXG4gICAgICAgKiBpdHMgY2hpbGRyZW4uIEJlY2F1c2UgYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcn0ncyBsaXN0ZW5lciBjYW4gY2hhbmdlXG4gICAgICAgKiB0aGUgbW9kZWwsIHRoZSBgJGRpZ2VzdCgpYCBrZWVwcyBjYWxsaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9XG4gICAgICAgKiB1bnRpbCBubyBtb3JlIGxpc3RlbmVycyBhcmUgZmlyaW5nLiBUaGlzIG1lYW5zIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gZ2V0IGludG8gYW4gaW5maW5pdGVcbiAgICAgICAqIGxvb3AuIFRoaXMgZnVuY3Rpb24gd2lsbCB0aHJvdyBgJ01heGltdW0gaXRlcmF0aW9uIGxpbWl0IGV4Y2VlZGVkLidgIGlmIHRoZSBudW1iZXIgb2ZcbiAgICAgICAqIGl0ZXJhdGlvbnMgZXhjZWVkcyAxMC5cbiAgICAgICAqXG4gICAgICAgKiBVc3VhbGx5LCB5b3UgZG9uJ3QgY2FsbCBgJGRpZ2VzdCgpYCBkaXJlY3RseSBpblxuICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NvbnRyb2xsZXIgY29udHJvbGxlcnN9IG9yIGluXG4gICAgICAgKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30uXG4gICAgICAgKiBJbnN0ZWFkLCB5b3Ugc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseSgpfSAodHlwaWNhbGx5IGZyb20gd2l0aGluXG4gICAgICAgKiBhIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmV9KSwgd2hpY2ggd2lsbCBmb3JjZSBhIGAkZGlnZXN0KClgLlxuICAgICAgICpcbiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIGAkZGlnZXN0KClgIGlzIGNhbGxlZCxcbiAgICAgICAqIHlvdSBjYW4gcmVnaXN0ZXIgYSBgd2F0Y2hFeHByZXNzaW9uYCBmdW5jdGlvbiB3aXRoXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggJHdhdGNoKCl9IHdpdGggbm8gYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBJbiB1bml0IHRlc3RzLCB5b3UgbWF5IG5lZWQgdG8gY2FsbCBgJGRpZ2VzdCgpYCB0byBzaW11bGF0ZSB0aGUgc2NvcGUgbGlmZSBjeWNsZS5cbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIHZhciBzY29wZSA9IC4uLjtcbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdtaXNrbyc7XG4gICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICBzY29wZS5jb3VudGVyID0gc2NvcGUuY291bnRlciArIDE7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIHRoZSBsaXN0ZW5lciBpcyBhbHdheXMgY2FsbGVkIGR1cmluZyB0aGUgZmlyc3QgJGRpZ2VzdCBsb29wIGFmdGVyIGl0IHdhcyByZWdpc3RlcmVkXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gYnV0IG5vdyBpdCB3aWxsIG5vdCBiZSBjYWxsZWQgdW5sZXNzIHRoZSB2YWx1ZSBjaGFuZ2VzXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnYWRhbSc7XG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMik7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgICRkaWdlc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgd2F0Y2gsIHZhbHVlLCBsYXN0LCBmbiwgZ2V0LFxuICAgICAgICAgICAgd2F0Y2hlcnMsXG4gICAgICAgICAgICBkaXJ0eSwgdHRsID0gVFRMLFxuICAgICAgICAgICAgbmV4dCwgY3VycmVudCwgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgICAgIHdhdGNoTG9nID0gW10sXG4gICAgICAgICAgICBsb2dJZHgsIGFzeW5jVGFzaztcblxuICAgICAgICBiZWdpblBoYXNlKCckZGlnZXN0Jyk7XG4gICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIHRvIGJyb3dzZXIgdXJsIHRoYXQgaGFwcGVuZWQgaW4gc3luYyBiZWZvcmUgdGhlIGNhbGwgdG8gJGRpZ2VzdFxuICAgICAgICAkYnJvd3Nlci4kJGNoZWNrVXJsQ2hhbmdlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMgPT09ICRyb290U2NvcGUgJiYgYXBwbHlBc3luY0lkICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBzY29wZSwgYW5kICRhcHBseUFzeW5jIGhhcyBzY2hlZHVsZWQgYSBkZWZlcnJlZCAkYXBwbHkoKSwgdGhlblxuICAgICAgICAgIC8vIGNhbmNlbCB0aGUgc2NoZWR1bGVkICRhcHBseSBhbmQgZmx1c2ggdGhlIHF1ZXVlIG9mIGV4cHJlc3Npb25zIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAgICAkYnJvd3Nlci5kZWZlci5jYW5jZWwoYXBwbHlBc3luY0lkKTtcbiAgICAgICAgICBmbHVzaEFwcGx5QXN5bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcblxuICAgICAgICBkbyB7IC8vIFwid2hpbGUgZGlydHlcIiBsb29wXG4gICAgICAgICAgZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgLy8gSXQncyBzYWZlIGZvciBhc3luY1F1ZXVlUG9zaXRpb24gdG8gYmUgYSBsb2NhbCB2YXJpYWJsZSBoZXJlIGJlY2F1c2UgdGhpcyBsb29wIGNhbid0XG4gICAgICAgICAgLy8gYmUgcmVlbnRlcmVkIHJlY3Vyc2l2ZWx5LiBDYWxsaW5nICRkaWdlc3QgZnJvbSBhIGZ1bmN0aW9uIHBhc3NlZCB0byAkZXZhbEFzeW5jIHdvdWxkXG4gICAgICAgICAgLy8gbGVhZCB0byBhICckZGlnZXN0IGFscmVhZHkgaW4gcHJvZ3Jlc3MnIGVycm9yLlxuICAgICAgICAgIGZvciAodmFyIGFzeW5jUXVldWVQb3NpdGlvbiA9IDA7IGFzeW5jUXVldWVQb3NpdGlvbiA8IGFzeW5jUXVldWUubGVuZ3RoOyBhc3luY1F1ZXVlUG9zaXRpb24rKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXN5bmNUYXNrID0gYXN5bmNRdWV1ZVthc3luY1F1ZXVlUG9zaXRpb25dO1xuICAgICAgICAgICAgICBmbiA9IGFzeW5jVGFzay5mbjtcbiAgICAgICAgICAgICAgZm4oYXN5bmNUYXNrLnNjb3BlLCBhc3luY1Rhc2subG9jYWxzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzeW5jUXVldWUubGVuZ3RoID0gMDtcblxuICAgICAgICAgIHRyYXZlcnNlU2NvcGVzTG9vcDpcbiAgICAgICAgICBkbyB7IC8vIFwidHJhdmVyc2UgdGhlIHNjb3Blc1wiIGxvb3BcbiAgICAgICAgICAgIGlmICgod2F0Y2hlcnMgPSBjdXJyZW50LiQkd2F0Y2hlcnMpKSB7XG4gICAgICAgICAgICAgIC8vIHByb2Nlc3Mgb3VyIHdhdGNoZXNcbiAgICAgICAgICAgICAgd2F0Y2hlcnMuJCRkaWdlc3RXYXRjaEluZGV4ID0gd2F0Y2hlcnMubGVuZ3RoO1xuICAgICAgICAgICAgICB3aGlsZSAod2F0Y2hlcnMuJCRkaWdlc3RXYXRjaEluZGV4LS0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgd2F0Y2ggPSB3YXRjaGVyc1t3YXRjaGVycy4kJGRpZ2VzdFdhdGNoSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgLy8gTW9zdCBjb21tb24gd2F0Y2hlcyBhcmUgb24gcHJpbWl0aXZlcywgaW4gd2hpY2ggY2FzZSB3ZSBjYW4gc2hvcnRcbiAgICAgICAgICAgICAgICAgIC8vIGNpcmN1aXQgaXQgd2l0aCA9PT0gb3BlcmF0b3IsIG9ubHkgd2hlbiA9PT0gZmFpbHMgZG8gd2UgdXNlIC5lcXVhbHNcbiAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBnZXQgPSB3YXRjaC5nZXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgPSBnZXQoY3VycmVudCkpICE9PSAobGFzdCA9IHdhdGNoLmxhc3QpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhKHdhdGNoLmVxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlcXVhbHModmFsdWUsIGxhc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoaXNOdW1iZXJOYU4odmFsdWUpICYmIGlzTnVtYmVyTmFOKGxhc3QpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSB3YXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICB3YXRjaC5sYXN0ID0gd2F0Y2guZXEgPyBjb3B5KHZhbHVlLCBudWxsKSA6IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgIGZuID0gd2F0Y2guZm47XG4gICAgICAgICAgICAgICAgICAgICAgZm4odmFsdWUsICgobGFzdCA9PT0gaW5pdFdhdGNoVmFsKSA/IHZhbHVlIDogbGFzdCksIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh0dGwgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dJZHggPSA0IC0gdHRsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXRjaExvZ1tsb2dJZHhdKSB3YXRjaExvZ1tsb2dJZHhdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXRjaExvZ1tsb2dJZHhdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c6IGlzRnVuY3Rpb24od2F0Y2guZXhwKSA/ICdmbjogJyArICh3YXRjaC5leHAubmFtZSB8fCB3YXRjaC5leHAudG9TdHJpbmcoKSkgOiB3YXRjaC5leHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbDogbGFzdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdhdGNoID09PSBsYXN0RGlydHlXYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBtb3N0IHJlY2VudGx5IGRpcnR5IHdhdGNoZXIgaXMgbm93IGNsZWFuLCBzaG9ydCBjaXJjdWl0IHNpbmNlIHRoZSByZW1haW5pbmcgd2F0Y2hlcnNcbiAgICAgICAgICAgICAgICAgICAgICAvLyBoYXZlIGFscmVhZHkgYmVlbiB0ZXN0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhayB0cmF2ZXJzZVNjb3Blc0xvb3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5zYW5pdHkgV2FybmluZzogc2NvcGUgZGVwdGgtZmlyc3QgdHJhdmVyc2FsXG4gICAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IVxuICAgICAgICAgICAgLy8gdGhpcyBwaWVjZSBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHRyYXZlcnNhbCBpbiAkYnJvYWRjYXN0XG4gICAgICAgICAgICBpZiAoIShuZXh0ID0gKChjdXJyZW50LiQkd2F0Y2hlcnNDb3VudCAmJiBjdXJyZW50LiQkY2hpbGRIZWFkKSB8fFxuICAgICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XG4gICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgIShuZXh0ID0gY3VycmVudC4kJG5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IG5leHQpKTtcblxuICAgICAgICAgIC8vIGBicmVhayB0cmF2ZXJzZVNjb3Blc0xvb3A7YCB0YWtlcyB1cyB0byBoZXJlXG5cbiAgICAgICAgICBpZiAoKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKSAmJiAhKHR0bC0tKSkge1xuICAgICAgICAgICAgY2xlYXJQaGFzZSgpO1xuICAgICAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5mZGlnJyxcbiAgICAgICAgICAgICAgICAnezB9ICRkaWdlc3QoKSBpdGVyYXRpb25zIHJlYWNoZWQuIEFib3J0aW5nIVxcbicgK1xuICAgICAgICAgICAgICAgICdXYXRjaGVycyBmaXJlZCBpbiB0aGUgbGFzdCA1IGl0ZXJhdGlvbnM6IHsxfScsXG4gICAgICAgICAgICAgICAgVFRMLCB3YXRjaExvZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gd2hpbGUgKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKTtcblxuICAgICAgICBjbGVhclBoYXNlKCk7XG5cbiAgICAgICAgLy8gcG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24gaXNuJ3QgbG9jYWwgaGVyZSBiZWNhdXNlIHRoaXMgbG9vcCBjYW4gYmUgcmVlbnRlcmVkIHJlY3Vyc2l2ZWx5LlxuICAgICAgICB3aGlsZSAocG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24gPCBwb3N0RGlnZXN0UXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZVtwb3N0RGlnZXN0UXVldWVQb3NpdGlvbisrXSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3N0RGlnZXN0UXVldWUubGVuZ3RoID0gcG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24gPSAwO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIHRvIGJyb3dzZXIgdXJsIHRoYXQgaGFwcGVuZWQgZHVyaW5nIHRoZSAkZGlnZXN0XG4gICAgICAgIC8vIChmb3Igd2hpY2ggbm8gZXZlbnQgaXMgZmlyZWQ7IGUuZy4gdmlhIGBoaXN0b3J5LnB1c2hTdGF0ZSgpYClcbiAgICAgICAgJGJyb3dzZXIuJCRjaGVja1VybENoYW5nZSgpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveVxuICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gc2NvcGUgYmVpbmcgZGVzdHJveWVkXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBCcm9hZGNhc3RlZCB3aGVuIGEgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbiBhcmUgYmVpbmcgZGVzdHJveWVkLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVtb3ZlcyB0aGUgY3VycmVudCBzY29wZSAoYW5kIGFsbCBvZiBpdHMgY2hpbGRyZW4pIGZyb20gdGhlIHBhcmVudCBzY29wZS4gUmVtb3ZhbCBpbXBsaWVzXG4gICAgICAgKiB0aGF0IGNhbGxzIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSB3aWxsIG5vIGxvbmdlclxuICAgICAgICogcHJvcGFnYXRlIHRvIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4uIFJlbW92YWwgYWxzbyBpbXBsaWVzIHRoYXQgdGhlIGN1cnJlbnRcbiAgICAgICAqIHNjb3BlIGlzIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZGVzdHJveSgpYCBpcyB1c3VhbGx5IHVzZWQgYnkgZGlyZWN0aXZlcyBzdWNoIGFzXG4gICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fSBmb3IgbWFuYWdpbmcgdGhlXG4gICAgICAgKiB1bnJvbGxpbmcgb2YgdGhlIGxvb3AuXG4gICAgICAgKlxuICAgICAgICogSnVzdCBiZWZvcmUgYSBzY29wZSBpcyBkZXN0cm95ZWQsIGEgYCRkZXN0cm95YCBldmVudCBpcyBicm9hZGNhc3RlZCBvbiB0aGlzIHNjb3BlLlxuICAgICAgICogQXBwbGljYXRpb24gY29kZSBjYW4gcmVnaXN0ZXIgYSBgJGRlc3Ryb3lgIGV2ZW50IGhhbmRsZXIgdGhhdCB3aWxsIGdpdmUgaXQgYSBjaGFuY2UgdG9cbiAgICAgICAqIHBlcmZvcm0gYW55IG5lY2Vzc2FyeSBjbGVhbnVwLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cbiAgICAgICRkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3QgZGVzdHJveSBhIHNjb3BlIHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWQuXG4gICAgICAgIGlmICh0aGlzLiQkZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7XG5cbiAgICAgICAgdGhpcy4kYnJvYWRjYXN0KCckZGVzdHJveScpO1xuICAgICAgICB0aGlzLiQkZGVzdHJveWVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSkge1xuICAgICAgICAgIC8vUmVtb3ZlIGhhbmRsZXJzIGF0dGFjaGVkIHRvIHdpbmRvdyB3aGVuICRyb290U2NvcGUgaXMgcmVtb3ZlZFxuICAgICAgICAgICRicm93c2VyLiQkYXBwbGljYXRpb25EZXN0cm95ZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluY3JlbWVudFdhdGNoZXJzQ291bnQodGhpcywgLXRoaXMuJCR3YXRjaGVyc0NvdW50KTtcbiAgICAgICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHRoaXMuJCRsaXN0ZW5lckNvdW50KSB7XG4gICAgICAgICAgZGVjcmVtZW50TGlzdGVuZXJDb3VudCh0aGlzLCB0aGlzLiQkbGlzdGVuZXJDb3VudFtldmVudE5hbWVdLCBldmVudE5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V2ZXIgYWxsIHRoZSByZWZlcmVuY2VzIHRvIHBhcmVudCBzY29wZXMgKGFmdGVyIHRoaXMgY2xlYW51cCwgdGhlIGN1cnJlbnQgc2NvcGUgc2hvdWxkXG4gICAgICAgIC8vIG5vdCBiZSByZXRhaW5lZCBieSBhbnkgb2Ygb3VyIHJlZmVyZW5jZXMgYW5kIHNob3VsZCBiZSBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uKVxuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC4kJGNoaWxkSGVhZCA9PT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nO1xuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC4kJGNoaWxkVGFpbCA9PT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nO1xuICAgICAgICBpZiAodGhpcy4kJHByZXZTaWJsaW5nKSB0aGlzLiQkcHJldlNpYmxpbmcuJCRuZXh0U2libGluZyA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHRoaXMuJCRuZXh0U2libGluZykgdGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmc7XG5cbiAgICAgICAgLy8gRGlzYWJsZSBsaXN0ZW5lcnMsIHdhdGNoZXJzIGFuZCBhcHBseS9kaWdlc3QgbWV0aG9kc1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gdGhpcy4kZGlnZXN0ID0gdGhpcy4kYXBwbHkgPSB0aGlzLiRldmFsQXN5bmMgPSB0aGlzLiRhcHBseUFzeW5jID0gbm9vcDtcbiAgICAgICAgdGhpcy4kb24gPSB0aGlzLiR3YXRjaCA9IHRoaXMuJHdhdGNoR3JvdXAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5vb3A7IH07XG4gICAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcblxuICAgICAgICAvLyBEaXNjb25uZWN0IHRoZSBuZXh0IHNpYmxpbmcgdG8gcHJldmVudCBgY2xlYW5VcFNjb3BlYCBkZXN0cm95aW5nIHRob3NlIHRvb1xuICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSBudWxsO1xuICAgICAgICBjbGVhblVwU2NvcGUodGhpcyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGV2YWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgYGV4cHJlc3Npb25gIG9uIHRoZSBjdXJyZW50IHNjb3BlIGFuZCByZXR1cm5zIHRoZSByZXN1bHQuIEFueSBleGNlcHRpb25zIGluXG4gICAgICAgKiB0aGUgZXhwcmVzc2lvbiBhcmUgcHJvcGFnYXRlZCAodW5jYXVnaHQpLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGV2YWx1YXRpbmcgQW5ndWxhclxuICAgICAgICogZXhwcmVzc2lvbnMuXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICB2YXIgc2NvcGUgPSBuZy4kcm9vdFNjb3BlLlNjb3BlKCk7XG4gICAgICAgICAgIHNjb3BlLmEgPSAxO1xuICAgICAgICAgICBzY29wZS5iID0gMjtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoJ2ErYicpKS50b0VxdWFsKDMpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoZnVuY3Rpb24oc2NvcGUpeyByZXR1cm4gc2NvcGUuYSArIHNjb3BlLmI7IH0pKS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KG9iamVjdCk9fSBsb2NhbHMgTG9jYWwgdmFyaWFibGVzIG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbiBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgICRldmFsOiBmdW5jdGlvbihleHByLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByKSh0aGlzLCBsb2NhbHMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmNcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZXZhbEFzeW5jYCBtYWtlcyBubyBndWFyYW50ZWVzIGFzIHRvIHdoZW4gdGhlIGBleHByZXNzaW9uYCB3aWxsIGJlIGV4ZWN1dGVkLCBvbmx5XG4gICAgICAgKiB0aGF0OlxuICAgICAgICpcbiAgICAgICAqICAgLSBpdCB3aWxsIGV4ZWN1dGUgYWZ0ZXIgdGhlIGZ1bmN0aW9uIHRoYXQgc2NoZWR1bGVkIHRoZSBldmFsdWF0aW9uIChwcmVmZXJhYmx5IGJlZm9yZSBET01cbiAgICAgICAqICAgICByZW5kZXJpbmcpLlxuICAgICAgICogICAtIGF0IGxlYXN0IG9uZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QgY3ljbGV9IHdpbGwgYmUgcGVyZm9ybWVkIGFmdGVyXG4gICAgICAgKiAgICAgYGV4cHJlc3Npb25gIGV4ZWN1dGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGVcbiAgICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBfX05vdGU6X18gaWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGAkZGlnZXN0YCBjeWNsZSwgYSBuZXcgYCRkaWdlc3RgIGN5Y2xlXG4gICAgICAgKiB3aWxsIGJlIHNjaGVkdWxlZC4gSG93ZXZlciwgaXQgaXMgZW5jb3VyYWdlZCB0byBhbHdheXMgY2FsbCBjb2RlIHRoYXQgY2hhbmdlcyB0aGUgbW9kZWxcbiAgICAgICAqIGZyb20gd2l0aGluIGFuIGAkYXBwbHlgIGNhbGwuIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhvYmplY3QpPX0gbG9jYWxzIExvY2FsIHZhcmlhYmxlcyBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gc2NvcGUuXG4gICAgICAgKi9cbiAgICAgICRldmFsQXN5bmM6IGZ1bmN0aW9uKGV4cHIsIGxvY2Fscykge1xuICAgICAgICAvLyBpZiB3ZSBhcmUgb3V0c2lkZSBvZiBhbiAkZGlnZXN0IGxvb3AgYW5kIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgd2UgYXJlIHNjaGVkdWxpbmcgYXN5bmNcbiAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2hcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UgJiYgIWFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3luY1F1ZXVlLnB1c2goe3Njb3BlOiB0aGlzLCBmbjogJHBhcnNlKGV4cHIpLCBsb2NhbHM6IGxvY2Fsc30pO1xuICAgICAgfSxcblxuICAgICAgJCRwb3N0RGlnZXN0OiBmdW5jdGlvbihmbikge1xuICAgICAgICBwb3N0RGlnZXN0UXVldWUucHVzaChmbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGFwcGx5XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogYCRhcHBseSgpYCBpcyB1c2VkIHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiBhbmd1bGFyIGZyb20gb3V0c2lkZSBvZiB0aGUgYW5ndWxhclxuICAgICAgICogZnJhbWV3b3JrLiAoRm9yIGV4YW1wbGUgZnJvbSBicm93c2VyIERPTSBldmVudHMsIHNldFRpbWVvdXQsIFhIUiBvciB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMpLlxuICAgICAgICogQmVjYXVzZSB3ZSBhcmUgY2FsbGluZyBpbnRvIHRoZSBhbmd1bGFyIGZyYW1ld29yayB3ZSBuZWVkIHRvIHBlcmZvcm0gcHJvcGVyIHNjb3BlIGxpZmVcbiAgICAgICAqIGN5Y2xlIG9mIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciBleGNlcHRpb24gaGFuZGxpbmd9LFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCBleGVjdXRpbmcgd2F0Y2hlc30uXG4gICAgICAgKlxuICAgICAgICogIyMgTGlmZSBjeWNsZVxuICAgICAgICpcbiAgICAgICAqICMgUHNldWRvLUNvZGUgb2YgYCRhcHBseSgpYFxuICAgICAgICogYGBganNcbiAgICAgICAgICAgZnVuY3Rpb24gJGFwcGx5KGV4cHIpIHtcbiAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgcmV0dXJuICRldmFsKGV4cHIpO1xuICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAkcm9vdC4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogU2NvcGUncyBgJGFwcGx5KClgIG1ldGhvZCB0cmFuc2l0aW9ucyB0aHJvdWdoIHRoZSBmb2xsb3dpbmcgc3RhZ2VzOlxuICAgICAgICpcbiAgICAgICAqIDEuIFRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBleGVjdXRlZCB1c2luZyB0aGVcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsICRldmFsKCl9IG1ldGhvZC5cbiAgICAgICAqIDIuIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgICogICAge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICogMy4gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaH0gbGlzdGVuZXJzIGFyZSBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGVcbiAgICAgICAqICAgIGV4cHJlc3Npb24gd2FzIGV4ZWN1dGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5OiBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYmVnaW5QaGFzZSgnJGFwcGx5Jyk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRldmFsKGV4cHIpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBjbGVhclBoYXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuc2FmZS1maW5hbGx5XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2NoZWR1bGUgdGhlIGludm9jYXRpb24gb2YgJGFwcGx5IHRvIG9jY3VyIGF0IGEgbGF0ZXIgdGltZS4gVGhlIGFjdHVhbCB0aW1lIGRpZmZlcmVuY2VcbiAgICAgICAqIHZhcmllcyBhY3Jvc3MgYnJvd3NlcnMsIGJ1dCBpcyB0eXBpY2FsbHkgYXJvdW5kIH4xMCBtaWxsaXNlY29uZHMuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBxdWV1ZSB1cCBtdWx0aXBsZSBleHByZXNzaW9ucyB3aGljaCBuZWVkIHRvIGJlIGV2YWx1YXRlZCBpbiB0aGUgc2FtZVxuICAgICAgICogZGlnZXN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cCBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5QXN5bmM6IGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcztcbiAgICAgICAgaWYgKGV4cHIpIHtcbiAgICAgICAgICBhcHBseUFzeW5jUXVldWUucHVzaCgkYXBwbHlBc3luY0V4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIGV4cHIgPSAkcGFyc2UoZXhwcik7XG4gICAgICAgIHNjaGVkdWxlQXBwbHlBc3luYygpO1xuXG4gICAgICAgIGZ1bmN0aW9uICRhcHBseUFzeW5jRXhwcmVzc2lvbigpIHtcbiAgICAgICAgICBzY29wZS4kZXZhbChleHByKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIExpc3RlbnMgb24gZXZlbnRzIG9mIGEgZ2l2ZW4gdHlwZS4gU2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRlbWl0ICRlbWl0fSBmb3JcbiAgICAgICAqIGRpc2N1c3Npb24gb2YgZXZlbnQgbGlmZSBjeWNsZS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gZm9ybWF0IGlzOiBgZnVuY3Rpb24oZXZlbnQsIGFyZ3MuLi4pYC4gVGhlIGBldmVudGAgb2JqZWN0XG4gICAgICAgKiBwYXNzZWQgaW50byB0aGUgbGlzdGVuZXIgaGFzIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gYHRhcmdldFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIG9uIHdoaWNoIHRoZSBldmVudCB3YXMgYCRlbWl0YC1lZCBvclxuICAgICAgICogICAgIGAkYnJvYWRjYXN0YC1lZC5cbiAgICAgICAqICAgLSBgY3VycmVudFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIHRoYXQgaXMgY3VycmVudGx5IGhhbmRsaW5nIHRoZSBldmVudC4gT25jZSB0aGVcbiAgICAgICAqICAgICBldmVudCBwcm9wYWdhdGVzIHRocm91Z2ggdGhlIHNjb3BlIGhpZXJhcmNoeSwgdGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gbnVsbC5cbiAgICAgICAqICAgLSBgbmFtZWAgLSBge3N0cmluZ31gOiBuYW1lIG9mIHRoZSBldmVudC5cbiAgICAgICAqICAgLSBgc3RvcFByb3BhZ2F0aW9uYCAtIGB7ZnVuY3Rpb249fWA6IGNhbGxpbmcgYHN0b3BQcm9wYWdhdGlvbmAgZnVuY3Rpb24gd2lsbCBjYW5jZWxcbiAgICAgICAqICAgICBmdXJ0aGVyIGV2ZW50IHByb3BhZ2F0aW9uIChhdmFpbGFibGUgb25seSBmb3IgZXZlbnRzIHRoYXQgd2VyZSBgJGVtaXRgLWVkKS5cbiAgICAgICAqICAgLSBgcHJldmVudERlZmF1bHRgIC0gYHtmdW5jdGlvbn1gOiBjYWxsaW5nIGBwcmV2ZW50RGVmYXVsdGAgc2V0cyBgZGVmYXVsdFByZXZlbnRlZGAgZmxhZ1xuICAgICAgICogICAgIHRvIHRydWUuXG4gICAgICAgKiAgIC0gYGRlZmF1bHRQcmV2ZW50ZWRgIC0gYHtib29sZWFufWA6IHRydWUgaWYgYHByZXZlbnREZWZhdWx0YCB3YXMgY2FsbGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gbGlzdGVuIG9uLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudCwgLi4uYXJncyl9IGxpc3RlbmVyIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZC5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgKi9cbiAgICAgICRvbjogZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG5hbWVkTGlzdGVuZXJzID0gdGhpcy4kJGxpc3RlbmVyc1tuYW1lXTtcbiAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVycykge1xuICAgICAgICAgIHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV0gPSBuYW1lZExpc3RlbmVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG5hbWVkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcztcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICghY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0pIHtcbiAgICAgICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0rKztcbiAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaW5kZXhPZkxpc3RlbmVyID0gbmFtZWRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgICAgaWYgKGluZGV4T2ZMaXN0ZW5lciAhPT0gLTEpIHtcbiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzW2luZGV4T2ZMaXN0ZW5lcl0gPSBudWxsO1xuICAgICAgICAgICAgZGVjcmVtZW50TGlzdGVuZXJDb3VudChzZWxmLCAxLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZW1pdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIHVwd2FyZHMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5IG5vdGlmeWluZyB0aGVcbiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuXG4gICAgICAgKlxuICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGVtaXRgIHdhcyBjYWxsZWQuIEFsbFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXRcbiAgICAgICAqIG5vdGlmaWVkLiBBZnRlcndhcmRzLCB0aGUgZXZlbnQgdHJhdmVyc2VzIHVwd2FyZHMgdG93YXJkIHRoZSByb290IHNjb3BlIGFuZCBjYWxscyBhbGxcbiAgICAgICAqIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCB3aWxsIHN0b3AgcHJvcGFnYXRpbmcgaWYgb25lIG9mIHRoZSBsaXN0ZW5lcnNcbiAgICAgICAqIGNhbmNlbHMgaXQuXG4gICAgICAgKlxuICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkXG4gICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBlbWl0LlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIG9uZSBvciBtb3JlIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50IG9iamVjdCAoc2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0pLlxuICAgICAgICovXG4gICAgICAkZW1pdDogZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgICB2YXIgZW1wdHkgPSBbXSxcbiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLFxuICAgICAgICAgICAgc2NvcGUgPSB0aGlzLFxuICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2UsXG4gICAgICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHNjb3BlLFxuICAgICAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge3N0b3BQcm9wYWdhdGlvbiA9IHRydWU7fSxcbiAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpc3RlbmVyQXJncyA9IGNvbmNhdChbZXZlbnRdLCBhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgaSwgbGVuZ3RoO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBuYW1lZExpc3RlbmVycyA9IHNjb3BlLiQkbGlzdGVuZXJzW25hbWVdIHx8IGVtcHR5O1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IHNjb3BlO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG5hbWVkTGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyB3ZXJlIGRlcmVnaXN0ZXJlZCwgZGVmcmFnbWVudCB0aGUgYXJyYXlcbiAgICAgICAgICAgIGlmICghbmFtZWRMaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vYWxsb3cgYWxsIGxpc3RlbmVycyBhdHRhY2hlZCB0byB0aGUgY3VycmVudCBzY29wZSB0byBydW5cbiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaV0uYXBwbHkobnVsbCwgbGlzdGVuZXJBcmdzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vaWYgYW55IGxpc3RlbmVyIG9uIHRoZSBjdXJyZW50IHNjb3BlIHN0b3BzIHByb3BhZ2F0aW9uLCBwcmV2ZW50IGJ1YmJsaW5nXG4gICAgICAgICAgaWYgKHN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy90cmF2ZXJzZSB1cHdhcmRzXG4gICAgICAgICAgc2NvcGUgPSBzY29wZS4kcGFyZW50O1xuICAgICAgICB9IHdoaWxlIChzY29wZSk7XG5cbiAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcblxuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYnJvYWRjYXN0XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRGlzcGF0Y2hlcyBhbiBldmVudCBgbmFtZWAgZG93bndhcmRzIHRvIGFsbCBjaGlsZCBzY29wZXMgKGFuZCB0aGVpciBjaGlsZHJlbikgbm90aWZ5aW5nIHRoZVxuICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlmZSBjeWNsZSBzdGFydHMgYXQgdGhlIHNjb3BlIG9uIHdoaWNoIGAkYnJvYWRjYXN0YCB3YXMgY2FsbGVkLiBBbGxcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IGxpc3RlbmluZyBmb3IgYG5hbWVgIGV2ZW50IG9uIHRoaXMgc2NvcGUgZ2V0XG4gICAgICAgKiBub3RpZmllZC4gQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHByb3BhZ2F0ZXMgdG8gYWxsIGRpcmVjdCBhbmQgaW5kaXJlY3Qgc2NvcGVzIG9mIHRoZSBjdXJyZW50XG4gICAgICAgKiBzY29wZSBhbmQgY2FsbHMgYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCBjYW5ub3QgYmUgY2FuY2VsZWQuXG4gICAgICAgKlxuICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkXG4gICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBicm9hZGNhc3QuXG4gICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgb25lIG9yIG1vcmUgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0LCBzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufVxuICAgICAgICovXG4gICAgICAkYnJvYWRjYXN0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLFxuICAgICAgICAgICAgY3VycmVudCA9IHRhcmdldCxcbiAgICAgICAgICAgIG5leHQgPSB0YXJnZXQsXG4gICAgICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHRhcmdldCxcbiAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBpZiAoIXRhcmdldC4kJGxpc3RlbmVyQ291bnRbbmFtZV0pIHJldHVybiBldmVudDtcblxuICAgICAgICB2YXIgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsaXN0ZW5lcnMsIGksIGxlbmd0aDtcblxuICAgICAgICAvL2Rvd24gd2hpbGUgeW91IGNhbiwgdGhlbiB1cCBhbmQgbmV4dCBzaWJsaW5nIG9yIHVwIGFuZCBuZXh0IHNpYmxpbmcgdW50aWwgYmFjayBhdCByb290XG4gICAgICAgIHdoaWxlICgoY3VycmVudCA9IG5leHQpKSB7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gY3VycmVudDtcbiAgICAgICAgICBsaXN0ZW5lcnMgPSBjdXJyZW50LiQkbGlzdGVuZXJzW25hbWVdIHx8IFtdO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheVxuICAgICAgICAgICAgaWYgKCFsaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJbnNhbml0eSBXYXJuaW5nOiBzY29wZSBkZXB0aC1maXJzdCB0cmF2ZXJzYWxcbiAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IVxuICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGRpZ2VzdFxuICAgICAgICAgIC8vICh0aG91Z2ggaXQgZGlmZmVycyBkdWUgdG8gaGF2aW5nIHRoZSBleHRyYSBjaGVjayBmb3IgJCRsaXN0ZW5lckNvdW50KVxuICAgICAgICAgIGlmICghKG5leHQgPSAoKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdICYmIGN1cnJlbnQuJCRjaGlsZEhlYWQpIHx8XG4gICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciAkcm9vdFNjb3BlID0gbmV3IFNjb3BlKCk7XG5cbiAgICAvL1RoZSBpbnRlcm5hbCBxdWV1ZXMuIEV4cG9zZSB0aGVtIG9uIHRoZSAkcm9vdFNjb3BlIGZvciBkZWJ1Z2dpbmcvdGVzdGluZyBwdXJwb3Nlcy5cbiAgICB2YXIgYXN5bmNRdWV1ZSA9ICRyb290U2NvcGUuJCRhc3luY1F1ZXVlID0gW107XG4gICAgdmFyIHBvc3REaWdlc3RRdWV1ZSA9ICRyb290U2NvcGUuJCRwb3N0RGlnZXN0UXVldWUgPSBbXTtcbiAgICB2YXIgYXBwbHlBc3luY1F1ZXVlID0gJHJvb3RTY29wZS4kJGFwcGx5QXN5bmNRdWV1ZSA9IFtdO1xuXG4gICAgdmFyIHBvc3REaWdlc3RRdWV1ZVBvc2l0aW9uID0gMDtcblxuICAgIHJldHVybiAkcm9vdFNjb3BlO1xuXG5cbiAgICBmdW5jdGlvbiBiZWdpblBoYXNlKHBoYXNlKSB7XG4gICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2lucHJvZycsICd7MH0gYWxyZWFkeSBpbiBwcm9ncmVzcycsICRyb290U2NvcGUuJCRwaGFzZSk7XG4gICAgICB9XG5cbiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IHBoYXNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFyUGhhc2UoKSB7XG4gICAgICAkcm9vdFNjb3BlLiQkcGhhc2UgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluY3JlbWVudFdhdGNoZXJzQ291bnQoY3VycmVudCwgY291bnQpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC4kJHdhdGNoZXJzQ291bnQgKz0gY291bnQ7XG4gICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlY3JlbWVudExpc3RlbmVyQ291bnQoY3VycmVudCwgY291bnQsIG5hbWUpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gLT0gY291bnQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdID09PSAwKSB7XG4gICAgICAgICAgZGVsZXRlIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHVzZWQgYXMgYW4gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMuXG4gICAgICogYmVjYXVzZSBpdCdzIHVuaXF1ZSB3ZSBjYW4gZWFzaWx5IHRlbGwgaXQgYXBhcnQgZnJvbSBvdGhlciB2YWx1ZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0V2F0Y2hWYWwoKSB7fVxuXG4gICAgZnVuY3Rpb24gZmx1c2hBcHBseUFzeW5jKCkge1xuICAgICAgd2hpbGUgKGFwcGx5QXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhcHBseUFzeW5jUXVldWUuc2hpZnQoKSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGx5QXN5bmNJZCA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NoZWR1bGVBcHBseUFzeW5jKCkge1xuICAgICAgaWYgKGFwcGx5QXN5bmNJZCA9PT0gbnVsbCkge1xuICAgICAgICBhcHBseUFzeW5jSWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmbHVzaEFwcGx5QXN5bmMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcm9vdEVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSByb290IGVsZW1lbnQgb2YgQW5ndWxhciBhcHBsaWNhdGlvbi4gVGhpcyBpcyBlaXRoZXIgdGhlIGVsZW1lbnQgd2hlcmUge0BsaW5rXG4gKiBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9IHdhcyBkZWNsYXJlZCBvciB0aGUgZWxlbWVudCBwYXNzZWQgaW50b1xuICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfS4gVGhlIGVsZW1lbnQgcmVwcmVzZW50cyB0aGUgcm9vdCBlbGVtZW50IG9mIGFwcGxpY2F0aW9uLiBJdCBpcyBhbHNvIHRoZVxuICogbG9jYXRpb24gd2hlcmUgdGhlIGFwcGxpY2F0aW9uJ3Mge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0gc2VydmljZSBnZXRzXG4gKiBwdWJsaXNoZWQsIGFuZCBjYW4gYmUgcmV0cmlldmVkIHVzaW5nIGAkcm9vdEVsZW1lbnQuaW5qZWN0b3IoKWAuXG4gKi9cblxuXG4vLyB0aGUgaW1wbGVtZW50YXRpb24gaXMgaW4gYW5ndWxhci5ib290c3RyYXBcblxuLyoqXG4gKiBAdGhpc1xuICogQGRlc2NyaXB0aW9uXG4gKiBQcml2YXRlIHNlcnZpY2UgdG8gc2FuaXRpemUgdXJpcyBmb3IgbGlua3MgYW5kIGltYWdlcy4gVXNlZCBieSAkY29tcGlsZSBhbmQgJHNhbml0aXplLlxuICovXG5mdW5jdGlvbiAkJFNhbml0aXplVXJpUHJvdmlkZXIoKSB7XG4gIHZhciBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXFxzKihodHRwcz98ZnRwfG1haWx0b3x0ZWx8ZmlsZSk6LyxcbiAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSAvXlxccyooKGh0dHBzP3xmdHB8ZmlsZXxibG9iKTp8ZGF0YTppbWFnZVxcLykvO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gcmVnZXhwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNhbml0aXplVXJpKHVyaSwgaXNJbWFnZSkge1xuICAgICAgdmFyIHJlZ2V4ID0gaXNJbWFnZSA/IGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA6IGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICAgICAgdmFyIG5vcm1hbGl6ZWRWYWw7XG4gICAgICBub3JtYWxpemVkVmFsID0gdXJsUmVzb2x2ZSh1cmkpLmhyZWY7XG4gICAgICBpZiAobm9ybWFsaXplZFZhbCAhPT0gJycgJiYgIW5vcm1hbGl6ZWRWYWwubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgIHJldHVybiAndW5zYWZlOicgKyBub3JtYWxpemVkVmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVyaTtcbiAgICB9O1xuICB9O1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiBleHBvcnRlZCAkU2NlUHJvdmlkZXIsICRTY2VEZWxlZ2F0ZVByb3ZpZGVyICovXG5cbnZhciAkc2NlTWluRXJyID0gbWluRXJyKCckc2NlJyk7XG5cbnZhciBTQ0VfQ09OVEVYVFMgPSB7XG4gIC8vIEhUTUwgaXMgdXNlZCB3aGVuIHRoZXJlJ3MgSFRNTCByZW5kZXJlZCAoZS5nLiBuZy1iaW5kLWh0bWwsIGlmcmFtZSBzcmNkb2MgYmluZGluZykuXG4gIEhUTUw6ICdodG1sJyxcblxuICAvLyBTdHlsZSBzdGF0ZW1lbnRzIG9yIHN0eWxlc2hlZXRzLiBDdXJyZW50bHkgdW51c2VkIGluIEFuZ3VsYXJKUy5cbiAgQ1NTOiAnY3NzJyxcblxuICAvLyBBbiBVUkwgdXNlZCBpbiBhIGNvbnRleHQgd2hlcmUgaXQgZG9lcyBub3QgcmVmZXIgdG8gYSByZXNvdXJjZSB0aGF0IGxvYWRzIGNvZGUuIEN1cnJlbnRseVxuICAvLyB1bnVzZWQgaW4gQW5ndWxhckpTLlxuICBVUkw6ICd1cmwnLFxuXG4gIC8vIFJFU09VUkNFX1VSTCBpcyBhIHN1YnR5cGUgb2YgVVJMIHVzZWQgd2hlcmUgdGhlIHJlZmVycmVkLXRvIHJlc291cmNlIGNvdWxkIGJlIGludGVycHJldGVkIGFzXG4gIC8vIGNvZGUuIChlLmcuIG5nLWluY2x1ZGUsIHNjcmlwdCBzcmMgYmluZGluZywgdGVtcGxhdGVVcmwpXG4gIFJFU09VUkNFX1VSTDogJ3Jlc291cmNlVXJsJyxcblxuICAvLyBTY3JpcHQuIEN1cnJlbnRseSB1bnVzZWQgaW4gQW5ndWxhckpTLlxuICBKUzogJ2pzJ1xufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb2xsb3cuXG5cbnZhciBVTkRFUlNDT1JFX0xPV0VSQ0FTRV9SRUdFWFAgPSAvXyhbYS16XSkvZztcblxuZnVuY3Rpb24gc25ha2VUb0NhbWVsKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVcbiAgICAucmVwbGFjZShVTkRFUlNDT1JFX0xPV0VSQ0FTRV9SRUdFWFAsIGZuQ2FtZWxDYXNlUmVwbGFjZSk7XG59XG5cbmZ1bmN0aW9uIGFkanVzdE1hdGNoZXIobWF0Y2hlcikge1xuICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgcmV0dXJuIG1hdGNoZXI7XG4gIH0gZWxzZSBpZiAoaXNTdHJpbmcobWF0Y2hlcikpIHtcbiAgICAvLyBTdHJpbmdzIG1hdGNoIGV4YWN0bHkgZXhjZXB0IGZvciAyIHdpbGRjYXJkcyAtICcqJyBhbmQgJyoqJy5cbiAgICAvLyAnKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIGV4Y2VwdCB0aG9zZSBmcm9tIHRoZSBzZXQgJzovLj8mJy5cbiAgICAvLyAnKionIG1hdGNoZXMgYW55IGNoYXJhY3RlciAobGlrZSAuKiBpbiBhIFJlZ0V4cCkuXG4gICAgLy8gTW9yZSB0aGFuIDIgKidzIHJhaXNlcyBhbiBlcnJvciBhcyBpdCdzIGlsbCBkZWZpbmVkLlxuICAgIGlmIChtYXRjaGVyLmluZGV4T2YoJyoqKicpID4gLTEpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2l3Y2FyZCcsXG4gICAgICAgICAgJ0lsbGVnYWwgc2VxdWVuY2UgKioqIGluIHN0cmluZyBtYXRjaGVyLiAgU3RyaW5nOiB7MH0nLCBtYXRjaGVyKTtcbiAgICB9XG4gICAgbWF0Y2hlciA9IGVzY2FwZUZvclJlZ2V4cChtYXRjaGVyKS5cbiAgICAgICAgICAgICAgICAgIHJlcGxhY2UoL1xcXFxcXCpcXFxcXFwqL2csICcuKicpLlxuICAgICAgICAgICAgICAgICAgcmVwbGFjZSgvXFxcXFxcKi9nLCAnW146Ly4/JjtdKicpO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIG1hdGNoZXIgKyAnJCcpO1xuICB9IGVsc2UgaWYgKGlzUmVnRXhwKG1hdGNoZXIpKSB7XG4gICAgLy8gVGhlIG9ubHkgb3RoZXIgdHlwZSBvZiBtYXRjaGVyIGFsbG93ZWQgaXMgYSBSZWdleHAuXG4gICAgLy8gTWF0Y2ggZW50aXJlIFVSTCAvIGRpc2FsbG93IHBhcnRpYWwgbWF0Y2hlcy5cbiAgICAvLyBGbGFncyBhcmUgcmVzZXQgKGkuZS4gbm8gZ2xvYmFsLCBpZ25vcmVDYXNlIG9yIG11bHRpbGluZSlcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyLnNvdXJjZSArICckJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgJHNjZU1pbkVycignaW1hdGNoZXInLFxuICAgICAgICAnTWF0Y2hlcnMgbWF5IG9ubHkgYmUgXCJzZWxmXCIsIHN0cmluZyBwYXR0ZXJucyBvciBSZWdFeHAgb2JqZWN0cycpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcnMobWF0Y2hlcnMpIHtcbiAgdmFyIGFkanVzdGVkTWF0Y2hlcnMgPSBbXTtcbiAgaWYgKGlzRGVmaW5lZChtYXRjaGVycykpIHtcbiAgICBmb3JFYWNoKG1hdGNoZXJzLCBmdW5jdGlvbihtYXRjaGVyKSB7XG4gICAgICBhZGp1c3RlZE1hdGNoZXJzLnB1c2goYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGFkanVzdGVkTWF0Y2hlcnM7XG59XG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHNjZURlbGVnYXRlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGAkc2NlRGVsZWdhdGVgIGlzIGEgc2VydmljZSB0aGF0IGlzIHVzZWQgYnkgdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIHByb3ZpZGUge0BsaW5rIG5nLiRzY2UgU3RyaWN0XG4gKiBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfSBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gKlxuICogRm9yIGFuIG92ZXJ2aWV3IG9mIHRoaXMgc2VydmljZSBhbmQgdGhlIGZ1bmN0aW9ubmFsaXR5IGl0IHByb3ZpZGVzIGluIEFuZ3VsYXJKUywgc2VlIHRoZSBtYWluXG4gKiBwYWdlIGZvciB7QGxpbmsgbmcuJHNjZSBTQ0V9LiBUaGUgY3VycmVudCBwYWdlIGlzIHRhcmdldGVkIGZvciBkZXZlbG9wZXJzIHdobyBuZWVkIHRvIGFsdGVyIGhvd1xuICogU0NFIHdvcmtzIGluIHRoZWlyIGFwcGxpY2F0aW9uLCB3aGljaCBzaG91bGRuJ3QgYmUgbmVlZGVkIGluIG1vc3QgY2FzZXMuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogQW5ndWxhckpTIHN0cm9uZ2x5IHJlbGllcyBvbiBjb250ZXh0dWFsIGVzY2FwaW5nIGZvciB0aGUgc2VjdXJpdHkgb2YgYmluZGluZ3M6IGRpc2FibGluZyBvclxuICogbW9kaWZ5aW5nIHRoaXMgbWlnaHQgY2F1c2UgY3Jvc3Mgc2l0ZSBzY3JpcHRpbmcgKFhTUykgdnVsbmVyYWJpbGl0aWVzLiBGb3IgbGlicmFyaWVzIG93bmVycyxcbiAqIGNoYW5nZXMgdG8gdGhpcyBzZXJ2aWNlIHdpbGwgYWxzbyBpbmZsdWVuY2UgdXNlcnMsIHNvIGJlIGV4dHJhIGNhcmVmdWwgYW5kIGRvY3VtZW50IHlvdXIgY2hhbmdlcy5cbiAqIDwvZGl2PlxuICpcbiAqIFR5cGljYWxseSwgeW91IHdvdWxkIGNvbmZpZ3VyZSBvciBvdmVycmlkZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGluc3RlYWQgb2ZcbiAqIHRoZSBgJHNjZWAgc2VydmljZSB0byBjdXN0b21pemUgdGhlIHdheSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyB3b3JrcyBpbiBBbmd1bGFySlMuICBUaGlzIGlzXG4gKiBiZWNhdXNlLCB3aGlsZSB0aGUgYCRzY2VgIHByb3ZpZGVzIG51bWVyb3VzIHNob3J0aGFuZCBtZXRob2RzLCBldGMuLCB5b3UgcmVhbGx5IG9ubHkgbmVlZCB0b1xuICogb3ZlcnJpZGUgMyBjb3JlIGZ1bmN0aW9ucyAoYHRydXN0QXNgLCBgZ2V0VHJ1c3RlZGAgYW5kIGB2YWx1ZU9mYCkgdG8gcmVwbGFjZSB0aGUgd2F5IHRoaW5nc1xuICogd29yayBiZWNhdXNlIGAkc2NlYCBkZWxlZ2F0ZXMgdG8gYCRzY2VEZWxlZ2F0ZWAgZm9yIHRoZXNlIG9wZXJhdGlvbnMuXG4gKlxuICogUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSB0byBjb25maWd1cmUgdGhpcyBzZXJ2aWNlLlxuICpcbiAqIFRoZSBkZWZhdWx0IGluc3RhbmNlIG9mIGAkc2NlRGVsZWdhdGVgIHNob3VsZCB3b3JrIG91dCBvZiB0aGUgYm94IHdpdGggbGl0dGxlIHBhaW4uICBXaGlsZSB5b3VcbiAqIGNhbiBvdmVycmlkZSBpdCBjb21wbGV0ZWx5IHRvIGNoYW5nZSB0aGUgYmVoYXZpb3Igb2YgYCRzY2VgLCB0aGUgY29tbW9uIGNhc2Ugd291bGRcbiAqIGludm9sdmUgY29uZmlndXJpbmcgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gaW5zdGVhZCBieSBzZXR0aW5nXG4gKiB5b3VyIG93biB3aGl0ZWxpc3RzIGFuZCBibGFja2xpc3RzIGZvciB0cnVzdGluZyBVUkxzIHVzZWQgZm9yIGxvYWRpbmcgQW5ndWxhckpTIHJlc291cmNlcyBzdWNoIGFzXG4gKiB0ZW1wbGF0ZXMuICBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3RcbiAqICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmQge0BsaW5rXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH1cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGAkc2NlRGVsZWdhdGVQcm92aWRlcmAgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlXG4gKiAkc2NlRGVsZWdhdGUgc2VydmljZX0sIHVzZWQgYXMgYSBkZWxlZ2F0ZSBmb3Ige0BsaW5rIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LlxuICpcbiAqIFRoZSBgJHNjZURlbGVnYXRlUHJvdmlkZXJgIGFsbG93cyBvbmUgdG8gZ2V0L3NldCB0aGUgd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyB1c2VkIHRvIGVuc3VyZVxuICogdGhhdCB0aGUgVVJMcyB1c2VkIGZvciBzb3VyY2luZyBBbmd1bGFySlMgdGVtcGxhdGVzIGFuZCBvdGhlciBzY3JpcHQtcnVubmluZyBVUkxzIGFyZSBzYWZlIChhbGxcbiAqIHBsYWNlcyB0aGF0IHVzZSB0aGUgYCRzY2UuUkVTT1VSQ0VfVVJMYCBjb250ZXh0KS4gU2VlXG4gKiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9XG4gKiBhbmRcbiAqIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH0sXG4gKlxuICogRm9yIHRoZSBnZW5lcmFsIGRldGFpbHMgYWJvdXQgdGhpcyBzZXJ2aWNlIGluIEFuZ3VsYXIsIHJlYWQgdGhlIG1haW4gcGFnZSBmb3Ige0BsaW5rIG5nLiRzY2VcbiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqXG4gKiAqKkV4YW1wbGUqKjogIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgY2FzZS4gPGEgbmFtZT1cImV4YW1wbGVcIj48L2E+XG4gKlxuICogLSB5b3VyIGFwcCBpcyBob3N0ZWQgYXQgdXJsIGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vYFxuICogLSBidXQgc29tZSBvZiB5b3VyIHRlbXBsYXRlcyBhcmUgaG9zdGVkIG9uIG90aGVyIGRvbWFpbnMgeW91IGNvbnRyb2wgc3VjaCBhc1xuICogICBgaHR0cDovL3NydjAxLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBgaHR0cDovL3NydjAyLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBldGMuXG4gKiAtIGFuZCB5b3UgaGF2ZSBhbiBvcGVuIHJlZGlyZWN0IGF0IGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1Py4uLmAuXG4gKlxuICogSGVyZSBpcyB3aGF0IGEgc2VjdXJlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgc2NlbmFyaW8gbWlnaHQgbG9vayBsaWtlOlxuICpcbiAqIGBgYFxuICogIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZURlbGVnYXRlUHJvdmlkZXIpIHtcbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFtcbiAqICAgICAgLy8gQWxsb3cgc2FtZSBvcmlnaW4gcmVzb3VyY2UgbG9hZHMuXG4gKiAgICAgICdzZWxmJyxcbiAqICAgICAgLy8gQWxsb3cgbG9hZGluZyBmcm9tIG91ciBhc3NldHMgZG9tYWluLiAgTm90aWNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gKiBhbmQgKiouXG4gKiAgICAgICdodHRwOi8vc3J2Ki5hc3NldHMuZXhhbXBsZS5jb20vKionXG4gKiAgICBdKTtcbiAqXG4gKiAgICAvLyBUaGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0IHNvIHRoZSBvcGVuIHJlZGlyZWN0IGhlcmUgaXMgYmxvY2tlZC5cbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0KFtcbiAqICAgICAgJ2h0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnUqKidcbiAqICAgIF0pO1xuICogIH0pO1xuICogYGBgXG4gKiBOb3RlIHRoYXQgYW4gZW1wdHkgd2hpdGVsaXN0IHdpbGwgYmxvY2sgZXZlcnkgcmVzb3VyY2UgVVJMIGZyb20gYmVpbmcgbG9hZGVkLCBhbmQgd2lsbCByZXF1aXJlXG4gKiB5b3UgdG8gbWFudWFsbHkgbWFyayBlYWNoIG9uZSBhcyB0cnVzdGVkIHdpdGggYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsYC4gSG93ZXZlciwgdGVtcGxhdGVzXG4gKiByZXF1ZXN0ZWQgYnkge0BsaW5rIG5nLiR0ZW1wbGF0ZVJlcXVlc3QgJHRlbXBsYXRlUmVxdWVzdH0gdGhhdCBhcmUgcHJlc2VudCBpblxuICoge0BsaW5rIG5nLiR0ZW1wbGF0ZUNhY2hlICR0ZW1wbGF0ZUNhY2hlfSB3aWxsIG5vdCBnbyB0aHJvdWdoIHRoaXMgY2hlY2suIElmIHlvdSBoYXZlIGEgbWVjaGFuaXNtXG4gKiB0byBwb3B1bGF0ZSB5b3VyIHRlbXBsYXRlcyBpbiB0aGF0IGNhY2hlIGF0IGNvbmZpZyB0aW1lLCB0aGVuIGl0IGlzIGEgZ29vZCBpZGVhIHRvIHJlbW92ZSAnc2VsZidcbiAqIGZyb20gdGhhdCB3aGl0ZWxpc3QuIFRoaXMgaGVscHMgdG8gbWl0aWdhdGUgdGhlIHNlY3VyaXR5IGltcGFjdCBvZiBjZXJ0YWluIHR5cGVzIG9mIGlzc3VlcywgbGlrZVxuICogZm9yIGluc3RhbmNlIGF0dGFja2VyLWNvbnRyb2xsZWQgYG5nLWluY2x1ZGVzYC5cbiAqL1xuXG5mdW5jdGlvbiAkU2NlRGVsZWdhdGVQcm92aWRlcigpIHtcbiAgdGhpcy5TQ0VfQ09OVEVYVFMgPSBTQ0VfQ09OVEVYVFM7XG5cbiAgLy8gUmVzb3VyY2UgVVJMcyBjYW4gYWxzbyBiZSB0cnVzdGVkIGJ5IHBvbGljeS5cbiAgdmFyIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gWydzZWxmJ10sXG4gICAgICByZXNvdXJjZVVybEJsYWNrbGlzdCA9IFtdO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk9fSB3aGl0ZWxpc3QgV2hlbiBwcm92aWRlZCwgcmVwbGFjZXMgdGhlIHJlc291cmNlVXJsV2hpdGVsaXN0IHdpdGggdGhlIHZhbHVlXG4gICAqICAgICBwcm92aWRlZC4gIFRoaXMgbXVzdCBiZSBhbiBhcnJheSBvciBudWxsLiAgQSBzbmFwc2hvdCBvZiB0aGlzIGFycmF5IGlzIHVzZWQgc28gZnVydGhlclxuICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuXG4gICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX0gVGhlIGN1cnJlbnRseSBzZXQgd2hpdGVsaXN0IGFycmF5LlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cy9HZXRzIHRoZSB3aGl0ZWxpc3Qgb2YgdHJ1c3RlZCByZXNvdXJjZSBVUkxzLlxuICAgKlxuICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgYFsnc2VsZiddYCBhbGxvd2luZyBvbmx5XG4gICAqIHNhbWUgb3JpZ2luIHJlc291cmNlIHJlcXVlc3RzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogdGhlIGRlZmF1bHQgd2hpdGVsaXN0IG9mICdzZWxmJyBpcyBub3QgcmVjb21tZW5kZWQgaWYgeW91ciBhcHAgc2hhcmVzIGl0cyBvcmlnaW5cbiAgICogd2l0aCBvdGhlciBhcHBzISBJdCBpcyBhIGdvb2QgaWRlYSB0byBsaW1pdCBpdCB0byBvbmx5IHlvdXIgYXBwbGljYXRpb24ncyBkaXJlY3RvcnkuXG4gICAqIDwvZGl2PlxuICAgKi9cbiAgdGhpcy5yZXNvdXJjZVVybFdoaXRlbGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gYWRqdXN0TWF0Y2hlcnModmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb3VyY2VVcmxXaGl0ZWxpc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheT19IGJsYWNrbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxCbGFja2xpc3Qgd2l0aCB0aGUgdmFsdWVcbiAgICogICAgIHByb3ZpZGVkLiAgVGhpcyBtdXN0IGJlIGFuIGFycmF5IG9yIG51bGwuICBBIHNuYXBzaG90IG9mIHRoaXMgYXJyYXkgaXMgdXNlZCBzbyBmdXJ0aGVyXG4gICAqICAgICBjaGFuZ2VzIHRvIHRoZSBhcnJheSBhcmUgaWdub3JlZC48L3A+PHA+XG4gICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LjwvcD48cD5cbiAgICogICAgIFRoZSB0eXBpY2FsIHVzYWdlIGZvciB0aGUgYmxhY2tsaXN0IGlzIHRvICoqYmxvY2tcbiAgICogICAgIFtvcGVuIHJlZGlyZWN0c10oaHR0cDovL2N3ZS5taXRyZS5vcmcvZGF0YS9kZWZpbml0aW9ucy82MDEuaHRtbCkqKiBzZXJ2ZWQgYnkgeW91ciBkb21haW4gYXNcbiAgICogICAgIHRoZXNlIHdvdWxkIG90aGVyd2lzZSBiZSB0cnVzdGVkIGJ1dCBhY3R1YWxseSByZXR1cm4gY29udGVudCBmcm9tIHRoZSByZWRpcmVjdGVkIGRvbWFpbi5cbiAgICogICAgIDwvcD48cD5cbiAgICogICAgIEZpbmFsbHksICoqdGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCoqIGFuZCBoYXMgdGhlIGZpbmFsIHNheS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9IFRoZSBjdXJyZW50bHkgc2V0IGJsYWNrbGlzdCBhcnJheS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMvR2V0cyB0aGUgYmxhY2tsaXN0IG9mIHRydXN0ZWQgcmVzb3VyY2UgVVJMcy5cbiAgICpcbiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIHRoZSBlbXB0eSBhcnJheSAoaS5lLiB0aGVyZVxuICAgKiBpcyBubyBibGFja2xpc3QuKVxuICAgKi9cblxuICB0aGlzLnJlc291cmNlVXJsQmxhY2tsaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBhZGp1c3RNYXRjaGVycyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZVVybEJsYWNrbGlzdDtcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuXG4gICAgdmFyIGh0bWxTYW5pdGl6ZXIgPSBmdW5jdGlvbiBodG1sU2FuaXRpemVyKGh0bWwpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7XG4gICAgfTtcblxuICAgIGlmICgkaW5qZWN0b3IuaGFzKCckc2FuaXRpemUnKSkge1xuICAgICAgaHRtbFNhbml0aXplciA9ICRpbmplY3Rvci5nZXQoJyRzYW5pdGl6ZScpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gbWF0Y2hVcmwobWF0Y2hlciwgcGFyc2VkVXJsKSB7XG4gICAgICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgICAgIHJldHVybiB1cmxJc1NhbWVPcmlnaW4ocGFyc2VkVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmluaXRlbHkgYSByZWdleC4gIFNlZSBhZGp1c3RNYXRjaGVycygpXG4gICAgICAgIHJldHVybiAhIW1hdGNoZXIuZXhlYyhwYXJzZWRVcmwuaHJlZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeSh1cmwpIHtcbiAgICAgIHZhciBwYXJzZWRVcmwgPSB1cmxSZXNvbHZlKHVybC50b1N0cmluZygpKTtcbiAgICAgIHZhciBpLCBuLCBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBhdCBsZWFzdCBvbmUgaXRlbSBmcm9tIHRoZSB3aGl0ZWxpc3QgYWxsb3dzIHRoaXMgdXJsLlxuICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsV2hpdGVsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAobWF0Y2hVcmwocmVzb3VyY2VVcmxXaGl0ZWxpc3RbaV0sIHBhcnNlZFVybCkpIHtcbiAgICAgICAgICBhbGxvd2VkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFsbG93ZWQpIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgbm8gaXRlbSBmcm9tIHRoZSBibGFja2xpc3QgYmxvY2tlZCB0aGlzIHVybC5cbiAgICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsQmxhY2tsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybEJsYWNrbGlzdFtpXSwgcGFyc2VkVXJsKSkge1xuICAgICAgICAgICAgYWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxsb3dlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhvbGRlclR5cGUoQmFzZSkge1xuICAgICAgdmFyIGhvbGRlclR5cGUgPSBmdW5jdGlvbiBUcnVzdGVkVmFsdWVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZSkge1xuICAgICAgICB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRydXN0ZWRWYWx1ZTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICBpZiAoQmFzZSkge1xuICAgICAgICBob2xkZXJUeXBlLnByb3RvdHlwZSA9IG5ldyBCYXNlKCk7XG4gICAgICB9XG4gICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24gc2NlVmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH07XG4gICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHNjZVRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpLnRvU3RyaW5nKCk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGhvbGRlclR5cGU7XG4gICAgfVxuXG4gICAgdmFyIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UgPSBnZW5lcmF0ZUhvbGRlclR5cGUoKSxcbiAgICAgICAgYnlUeXBlID0ge307XG5cbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkhUTUxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuQ1NTXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlVSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5KU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5SRVNPVVJDRV9VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKGJ5VHlwZVtTQ0VfQ09OVEVYVFMuVVJMXSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYSB0cnVzdGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwYXJhbWV0ZXIgZm9yIHRoZSBzcGVjaWZpZWQgY29udGV4dC4gVGhpcyB0cnVzdGVkXG4gICAgICogb2JqZWN0IHdpbGwgbGF0ZXIgb24gYmUgdXNlZCBhcy1pcywgd2l0aG91dCBhbnkgc2VjdXJpdHkgY2hlY2ssIGJ5IGJpbmRpbmdzIG9yIGRpcmVjdGl2ZXNcbiAgICAgKiB0aGF0IHJlcXVpcmUgdGhpcyBzZWN1cml0eSBjb250ZXh0LlxuICAgICAqIEZvciBpbnN0YW5jZSwgbWFya2luZyBhIHN0cmluZyBhcyB0cnVzdGVkIGZvciB0aGUgYCRzY2UuSFRNTGAgY29udGV4dCB3aWxsIGVudGlyZWx5IGJ5cGFzc1xuICAgICAqIHRoZSBwb3RlbnRpYWwgYCRzYW5pdGl6ZWAgY2FsbCBpbiBjb3JyZXNwb25kaW5nIGAkc2NlLkhUTUxgIGJpbmRpbmdzIG9yIGRpcmVjdGl2ZXMsIHN1Y2ggYXNcbiAgICAgKiBgbmctYmluZC1odG1sYC4gTm90ZSB0aGF0IGluIG1vc3QgY2FzZXMgeW91IHdvbid0IG5lZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uOiBpZiB5b3UgaGF2ZSB0aGVcbiAgICAgKiBzYW5pdGl6ZXIgbG9hZGVkLCBwYXNzaW5nIHRoZSB2YWx1ZSBpdHNlbGYgd2lsbCByZW5kZXIgYWxsIHRoZSBIVE1MIHRoYXQgZG9lcyBub3QgcG9zZSBhXG4gICAgICogc2VjdXJpdHkgcmlzay5cbiAgICAgKlxuICAgICAqIFNlZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgZ2V0VHJ1c3RlZH0gZm9yIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgY29uc3VtZSB0aG9zZVxuICAgICAqIHRydXN0ZWQgdmFsdWVzLCBhbmQge0BsaW5rIG5nLiRzY2UgJHNjZX0gZm9yIGdlbmVyYWwgZG9jdW1lbnRhdGlvbiBhYm91dCBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UsIGUuZy4gYCRzY2UuVVJMYCxcbiAgICAgKiAgICAgYCRzY2UuUkVTT1VSQ0VfVVJMYCwgYCRzY2UuSFRNTGAsIGAkc2NlLkpTYCBvciBgJHNjZS5DU1NgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCB0cnVzdGVkLlxuICAgICAqIEByZXR1cm4geyp9IEEgdHJ1c3RlZCByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZSwgdGhhdCBjYW4gYmUgdXNlZCBpbiB0aGUgZ2l2ZW4gY29udGV4dC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVzdEFzKHR5cGUsIHRydXN0ZWRWYWx1ZSkge1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgaWYgKCFDb25zdHJ1Y3Rvcikge1xuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpY29udGV4dCcsXG4gICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgdmFsdWUgaW4gaW52YWxpZCBjb250ZXh0LiBDb250ZXh0OiB7MH07IFZhbHVlOiB7MX0nLFxuICAgICAgICAgICAgdHlwZSwgdHJ1c3RlZFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cnVzdGVkVmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodHJ1c3RlZFZhbHVlKSB8fCB0cnVzdGVkVmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB0cnVzdGVkVmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBBbGwgdGhlIGN1cnJlbnQgY29udGV4dHMgaW4gU0NFX0NPTlRFWFRTIGhhcHBlbiB0byBiZSBzdHJpbmdzLiAgSW4gb3JkZXIgdG8gYXZvaWQgdHJ1c3RpbmdcbiAgICAgIC8vIG11dGFibGUgb2JqZWN0cywgd2UgZW5zdXJlIGhlcmUgdGhhdCB0aGUgdmFsdWUgcGFzc2VkIGluIGlzIGFjdHVhbGx5IGEgc3RyaW5nLlxuICAgICAgaWYgKHR5cGVvZiB0cnVzdGVkVmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2l0eXBlJyxcbiAgICAgICAgICAgICdBdHRlbXB0ZWQgdG8gdHJ1c3QgYSBub24tc3RyaW5nIHZhbHVlIGluIGEgY29udGVudCByZXF1aXJpbmcgYSBzdHJpbmc6IENvbnRleHQ6IHswfScsXG4gICAgICAgICAgICB0eXBlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IodHJ1c3RlZFZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3ZhbHVlT2ZcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGhhZCBiZWVuIHJldHVybmVkIGJ5IGEgcHJpb3IgY2FsbCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgcmV0dXJucyB0aGUgdmFsdWUgdGhhdCBoYWQgYmVlbiBwYXNzZWQgdG8ge0BsaW5rXG4gICAgICogbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0uXG4gICAgICpcbiAgICAgKiBJZiB0aGUgcGFzc2VkIHBhcmFtZXRlciBpcyBub3QgYSB2YWx1ZSB0aGF0IGhhZCBiZWVuIHJldHVybmVkIGJ5IHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LCBpdCBtdXN0IGJlIHJldHVybmVkIGFzLWlzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9XG4gICAgICogICAgIGNhbGwgb3IgYW55dGhpbmcgZWxzZS5cbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgYHZhbHVlYCB0aGF0IHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBpZiBgdmFsdWVgIGlzIHRoZSByZXN1bHQgb2Ygc3VjaCBhIGNhbGwuICBPdGhlcndpc2UsIHJldHVybnNcbiAgICAgKiAgICAgYHZhbHVlYCB1bmNoYW5nZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVPZihtYXliZVRydXN0ZWQpIHtcbiAgICAgIGlmIChtYXliZVRydXN0ZWQgaW5zdGFuY2VvZiB0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUYWtlcyBhbnkgaW5wdXQsIGFuZCBlaXRoZXIgcmV0dXJucyBhIHZhbHVlIHRoYXQncyBzYWZlIHRvIHVzZSBpbiB0aGUgc3BlY2lmaWVkIGNvbnRleHQsIG9yXG4gICAgICogdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgKlxuICAgICAqIEluIHByYWN0aWNlLCB0aGVyZSBhcmUgc2V2ZXJhbCBjYXNlcy4gV2hlbiBnaXZlbiBhIHN0cmluZywgdGhpcyBmdW5jdGlvbiBydW5zIGNoZWNrc1xuICAgICAqIGFuZCBzYW5pdGl6YXRpb24gdG8gbWFrZSBpdCBzYWZlIHdpdGhvdXQgcHJpb3IgYXNzdW1wdGlvbnMuIFdoZW4gZ2l2ZW4gdGhlIHJlc3VsdCBvZiBhIHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwsIGl0IHJldHVybnMgdGhlIG9yaWdpbmFsbHkgc3VwcGxpZWRcbiAgICAgKiB2YWx1ZSBpZiB0aGF0IHZhbHVlJ3MgY29udGV4dCBpcyB2YWxpZCBmb3IgdGhpcyBjYWxsJ3MgY29udGV4dC4gRmluYWxseSwgdGhpcyBmdW5jdGlvbiBjYW5cbiAgICAgKiBhbHNvIHRocm93IHdoZW4gdGhlcmUgaXMgbm8gd2F5IHRvIHR1cm4gYG1heWJlVHJ1c3RlZGAgaW4gYSBzYWZlIHZhbHVlIChlLmcuLCBubyBzYW5pdGl6YXRpb25cbiAgICAgKiBpcyBhdmFpbGFibGUgb3IgcG9zc2libGUuKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkIChzdWNoIGFzIGAkc2NlLkhUTUxgKS5cbiAgICAgKiBAcGFyYW0geyp9IG1heWJlVHJ1c3RlZCBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICogICAgIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwsIG9yIGFueXRoaW5nIGVsc2UgKHdoaWNoIHdpbGwgbm90IGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC4pXG4gICAgICogQHJldHVybiB7Kn0gQSB2ZXJzaW9uIG9mIHRoZSB2YWx1ZSB0aGF0J3Mgc2FmZSB0byB1c2UgaW4gdGhlIGdpdmVuIGNvbnRleHQsIG9yIHRocm93cyBhblxuICAgICAqICAgICBleGNlcHRpb24gaWYgdGhpcyBpcyBpbXBvc3NpYmxlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRydXN0ZWQodHlwZSwgbWF5YmVUcnVzdGVkKSB7XG4gICAgICBpZiAobWF5YmVUcnVzdGVkID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKG1heWJlVHJ1c3RlZCkgfHwgbWF5YmVUcnVzdGVkID09PSAnJykge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgLy8gSWYgbWF5YmVUcnVzdGVkIGlzIGEgdHJ1c3RlZCBjbGFzcyBpbnN0YW5jZSBvciBzdWJjbGFzcyBpbnN0YW5jZSwgdGhlbiB1bndyYXAgYW5kIHJldHVyblxuICAgICAgLy8gYXMtaXMuXG4gICAgICBpZiAoY29uc3RydWN0b3IgJiYgbWF5YmVUcnVzdGVkIGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpO1xuICAgICAgfVxuICAgICAgLy8gT3RoZXJ3aXNlLCBpZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBtYXkgZWl0aGVyIG1ha2UgaXQgc2FmZSwgb3IgdGhyb3cgYW4gZXhjZXB0aW9uLiBUaGlzXG4gICAgICAvLyBkZXBlbmRzIG9uIHRoZSBjb250ZXh0OiBzb21lIGFyZSBzYW5pdGl6YXRpYmxlIChIVE1MKSwgc29tZSB1c2Ugd2hpdGVsaXN0cyAoUkVTT1VSQ0VfVVJMKSxcbiAgICAgIC8vIHNvbWUgYXJlIGltcG9zc2libGUgdG8gZG8gKEpTKS4gVGhpcyBzdGVwIGlzbid0IGltcGxlbWVudGVkIGZvciBDU1MgYW5kIFVSTCwgYXMgQW5ndWxhckpTXG4gICAgICAvLyBoYXMgbm8gY29ycmVzcG9uZGluZyBzaW5rcy5cbiAgICAgIGlmICh0eXBlID09PSBTQ0VfQ09OVEVYVFMuUkVTT1VSQ0VfVVJMKSB7XG4gICAgICAgIC8vIFJFU09VUkNFX1VSTCB1c2VzIGEgd2hpdGVsaXN0LlxuICAgICAgICBpZiAoaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeShtYXliZVRydXN0ZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpbnNlY3VybCcsXG4gICAgICAgICAgICAgICdCbG9ja2VkIGxvYWRpbmcgcmVzb3VyY2UgZnJvbSB1cmwgbm90IGFsbG93ZWQgYnkgJHNjZURlbGVnYXRlIHBvbGljeS4gIFVSTDogezB9JyxcbiAgICAgICAgICAgICAgbWF5YmVUcnVzdGVkLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNDRV9DT05URVhUUy5IVE1MKSB7XG4gICAgICAgIC8vIGh0bWxTYW5pdGl6ZXIgdGhyb3dzIGl0cyBvd24gZXJyb3Igd2hlbiBubyBzYW5pdGl6ZXIgaXMgYXZhaWxhYmxlLlxuICAgICAgICByZXR1cm4gaHRtbFNhbml0aXplcihtYXliZVRydXN0ZWQpO1xuICAgICAgfVxuICAgICAgLy8gRGVmYXVsdCBlcnJvciB3aGVuIHRoZSAkc2NlIHNlcnZpY2UgaGFzIG5vIHdheSB0byBtYWtlIHRoZSBpbnB1dCBzYWZlLlxuICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyB0cnVzdEFzOiB0cnVzdEFzLFxuICAgICAgICAgICAgIGdldFRydXN0ZWQ6IGdldFRydXN0ZWQsXG4gICAgICAgICAgICAgdmFsdWVPZjogdmFsdWVPZiB9O1xuICB9XTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHNjZVByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSAkc2NlUHJvdmlkZXIgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlLlxuICogLSAgIGVuYWJsZS9kaXNhYmxlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGluIGEgbW9kdWxlXG4gKiAtICAgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2l0aCBhIGN1c3RvbSBkZWxlZ2F0ZVxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKi9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHNjZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJHNjZWAgaXMgYSBzZXJ2aWNlIHRoYXQgcHJvdmlkZXMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgc2VydmljZXMgdG8gQW5ndWxhckpTLlxuICpcbiAqICMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmdcbiAqXG4gKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKSBpcyBhIG1vZGUgaW4gd2hpY2ggQW5ndWxhckpTIGNvbnN0cmFpbnMgYmluZGluZ3MgdG8gb25seSByZW5kZXJcbiAqIHRydXN0ZWQgdmFsdWVzLiBJdHMgZ29hbCBpcyB0byBhc3Npc3QgaW4gd3JpdGluZyBjb2RlIGluIGEgd2F5IHRoYXQgKGEpIGlzIHNlY3VyZSBieSBkZWZhdWx0LCBhbmRcbiAqIChiKSBtYWtlcyBhdWRpdGluZyBmb3Igc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIHN1Y2ggYXMgWFNTLCBjbGlja2phY2tpbmcsIGV0Yy4gYSBsb3QgZWFzaWVyLlxuICpcbiAqICMjIE92ZXJ2aWV3XG4gKlxuICogVG8gc3lzdGVtYXRpY2FsbHkgYmxvY2sgWFNTIHNlY3VyaXR5IGJ1Z3MsIEFuZ3VsYXJKUyB0cmVhdHMgYWxsIHZhbHVlcyBhcyB1bnRydXN0ZWQgYnkgZGVmYXVsdCBpblxuICogSFRNTCBvciBzZW5zaXRpdmUgVVJMIGJpbmRpbmdzLiBXaGVuIGJpbmRpbmcgdW50cnVzdGVkIHZhbHVlcywgQW5ndWxhckpTIHdpbGwgYXV0b21hdGljYWxseVxuICogcnVuIHNlY3VyaXR5IGNoZWNrcyBvbiB0aGVtIChzYW5pdGl6YXRpb25zLCB3aGl0ZWxpc3RzLCBkZXBlbmRpbmcgb24gY29udGV4dCksIG9yIHRocm93IHdoZW4gaXRcbiAqIGNhbm5vdCBndWFyYW50ZWUgdGhlIHNlY3VyaXR5IG9mIHRoZSByZXN1bHQuIFRoYXQgYmVoYXZpb3IgZGVwZW5kcyBzdHJvbmdseSBvbiBjb250ZXh0czogSFRNTFxuICogY2FuIGJlIHNhbml0aXplZCwgYnV0IHRlbXBsYXRlIFVSTHMgY2Fubm90LCBmb3IgaW5zdGFuY2UuXG4gKlxuICogVG8gaWxsdXN0cmF0ZSB0aGlzLCBjb25zaWRlciB0aGUgYG5nLWJpbmQtaHRtbGAgZGlyZWN0aXZlLiBJdCByZW5kZXJzIGl0cyB2YWx1ZSBkaXJlY3RseSBhcyBIVE1MOlxuICogd2UgY2FsbCB0aGF0IHRoZSAqY29udGV4dCouIFdoZW4gZ2l2ZW4gYW4gdW50cnVzdGVkIGlucHV0LCBBbmd1bGFySlMgd2lsbCBhdHRlbXB0IHRvIHNhbml0aXplIGl0XG4gKiBiZWZvcmUgcmVuZGVyaW5nIGlmIGEgc2FuaXRpemVyIGlzIGF2YWlsYWJsZSwgYW5kIHRocm93IG90aGVyd2lzZS4gVG8gYnlwYXNzIHNhbml0aXphdGlvbiBhbmRcbiAqIHJlbmRlciB0aGUgaW5wdXQgYXMtaXMsIHlvdSB3aWxsIG5lZWQgdG8gbWFyayBpdCBhcyB0cnVzdGVkIGZvciB0aGF0IGNvbnRleHQgYmVmb3JlIGF0dGVtcHRpbmdcbiAqIHRvIGJpbmQgaXQuXG4gKlxuICogQXMgb2YgdmVyc2lvbiAxLjIsIEFuZ3VsYXJKUyBzaGlwcyB3aXRoIFNDRSBlbmFibGVkIGJ5IGRlZmF1bHQuXG4gKlxuICogIyMgSW4gcHJhY3RpY2VcbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBhIGJpbmRpbmcgaW4gYSBwcml2aWxlZ2VkIGNvbnRleHQ6XG4gKlxuICogYGBgXG4gKiA8aW5wdXQgbmctbW9kZWw9XCJ1c2VySHRtbFwiIGFyaWEtbGFiZWw9XCJVc2VyIGlucHV0XCI+XG4gKiA8ZGl2IG5nLWJpbmQtaHRtbD1cInVzZXJIdG1sXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCBgbmctYmluZC1odG1sYCBpcyBib3VuZCB0byBgdXNlckh0bWxgIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIuICBXaXRoIFNDRVxuICogZGlzYWJsZWQsIHRoaXMgYXBwbGljYXRpb24gYWxsb3dzIHRoZSB1c2VyIHRvIHJlbmRlciBhcmJpdHJhcnkgSFRNTCBpbnRvIHRoZSBESVYsIHdoaWNoIHdvdWxkXG4gKiBiZSBhbiBYU1Mgc2VjdXJpdHkgYnVnLiBJbiBhIG1vcmUgcmVhbGlzdGljIGV4YW1wbGUsIG9uZSBtYXkgYmUgcmVuZGVyaW5nIHVzZXIgY29tbWVudHMsIGJsb2dcbiAqIGFydGljbGVzLCBldGMuIHZpYSBiaW5kaW5ncy4gKEhUTUwgaXMganVzdCBvbmUgZXhhbXBsZSBvZiBhIGNvbnRleHQgd2hlcmUgcmVuZGVyaW5nIHVzZXJcbiAqIGNvbnRyb2xsZWQgaW5wdXQgY3JlYXRlcyBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuKVxuICpcbiAqIEZvciB0aGUgY2FzZSBvZiBIVE1MLCB5b3UgbWlnaHQgdXNlIGEgbGlicmFyeSwgZWl0aGVyIG9uIHRoZSBjbGllbnQgc2lkZSwgb3Igb24gdGhlIHNlcnZlciBzaWRlLFxuICogdG8gc2FuaXRpemUgdW5zYWZlIEhUTUwgYmVmb3JlIGJpbmRpbmcgdG8gdGhlIHZhbHVlIGFuZCByZW5kZXJpbmcgaXQgaW4gdGhlIGRvY3VtZW50LlxuICpcbiAqIEhvdyB3b3VsZCB5b3UgZW5zdXJlIHRoYXQgZXZlcnkgcGxhY2UgdGhhdCB1c2VkIHRoZXNlIHR5cGVzIG9mIGJpbmRpbmdzIHdhcyBib3VuZCB0byBhIHZhbHVlIHRoYXRcbiAqIHdhcyBzYW5pdGl6ZWQgYnkgeW91ciBsaWJyYXJ5IChvciByZXR1cm5lZCBhcyBzYWZlIGZvciByZW5kZXJpbmcgYnkgeW91ciBzZXJ2ZXI/KSAgSG93IGNhbiB5b3VcbiAqIGVuc3VyZSB0aGF0IHlvdSBkaWRuJ3QgYWNjaWRlbnRhbGx5IGRlbGV0ZSB0aGUgbGluZSB0aGF0IHNhbml0aXplZCB0aGUgdmFsdWUsIG9yIHJlbmFtZWQgc29tZVxuICogcHJvcGVydGllcy9maWVsZHMgYW5kIGZvcmdvdCB0byB1cGRhdGUgdGhlIGJpbmRpbmcgdG8gdGhlIHNhbml0aXplZCB2YWx1ZT9cbiAqXG4gKiBUbyBiZSBzZWN1cmUgYnkgZGVmYXVsdCwgQW5ndWxhckpTIG1ha2VzIHN1cmUgYmluZGluZ3MgZ28gdGhyb3VnaCB0aGF0IHNhbml0aXphdGlvbiwgb3JcbiAqIGFueSBzaW1pbGFyIHZhbGlkYXRpb24gcHJvY2VzcywgdW5sZXNzIHRoZXJlJ3MgYSBnb29kIHJlYXNvbiB0byB0cnVzdCB0aGUgZ2l2ZW4gdmFsdWUgaW4gdGhpc1xuICogY29udGV4dC4gIFRoYXQgdHJ1c3QgaXMgZm9ybWFsaXplZCB3aXRoIGEgZnVuY3Rpb24gY2FsbC4gVGhpcyBtZWFucyB0aGF0IGFzIGEgZGV2ZWxvcGVyLCB5b3VcbiAqIGNhbiBhc3N1bWUgYWxsIHVudHJ1c3RlZCBiaW5kaW5ncyBhcmUgc2FmZS4gVGhlbiwgdG8gYXVkaXQgeW91ciBjb2RlIGZvciBiaW5kaW5nIHNlY3VyaXR5IGlzc3VlcyxcbiAqIHlvdSBqdXN0IG5lZWQgdG8gZW5zdXJlIHRoZSB2YWx1ZXMgeW91IG1hcmsgYXMgdHJ1c3RlZCBpbmRlZWQgYXJlIHNhZmUgLSBiZWNhdXNlIHRoZXkgd2VyZVxuICogcmVjZWl2ZWQgZnJvbSB5b3VyIHNlcnZlciwgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSwgZXRjLiBZb3UgY2FuIG9yZ2FuaXplIHlvdXIgY29kZWJhc2UgdG9cbiAqIGhlbHAgd2l0aCB0aGlzIC0gcGVyaGFwcyBhbGxvd2luZyBvbmx5IHRoZSBmaWxlcyBpbiBhIHNwZWNpZmljIGRpcmVjdG9yeSB0byBkbyB0aGlzLlxuICogRW5zdXJpbmcgdGhhdCB0aGUgaW50ZXJuYWwgQVBJIGV4cG9zZWQgYnkgdGhhdCBjb2RlIGRvZXNuJ3QgbWFya3VwIGFyYml0cmFyeSB2YWx1ZXMgYXMgc2FmZSB0aGVuXG4gKiBiZWNvbWVzIGEgbW9yZSBtYW5hZ2VhYmxlIHRhc2suXG4gKlxuICogSW4gdGhlIGNhc2Ugb2YgQW5ndWxhckpTJyBTQ0Ugc2VydmljZSwgb25lIHVzZXMge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9XG4gKiAoYW5kIHNob3J0aGFuZCBtZXRob2RzIHN1Y2ggYXMge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0sIGV0Yy4pIHRvXG4gKiBidWlsZCB0aGUgdHJ1c3RlZCB2ZXJzaW9ucyBvZiB5b3VyIHZhbHVlcy5cbiAqXG4gKiAjIyBIb3cgZG9lcyBpdCB3b3JrP1xuICpcbiAqIEluIHByaXZpbGVnZWQgY29udGV4dHMsIGRpcmVjdGl2ZXMgYW5kIGNvZGUgd2lsbCBiaW5kIHRvIHRoZSByZXN1bHQgb2Yge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFxuICogJHNjZS5nZXRUcnVzdGVkKGNvbnRleHQsIHZhbHVlKX0gcmF0aGVyIHRoYW4gdG8gdGhlIHZhbHVlIGRpcmVjdGx5LiAgVGhpbmsgb2YgdGhpcyBmdW5jdGlvbiBhc1xuICogYSB3YXkgdG8gZW5mb3JjZSB0aGUgcmVxdWlyZWQgc2VjdXJpdHkgY29udGV4dCBpbiB5b3VyIGRhdGEgc2luay4gRGlyZWN0aXZlcyB1c2Uge0BsaW5rXG4gKiBuZy4kc2NlI3BhcnNlQXMgJHNjZS5wYXJzZUFzfSByYXRoZXIgdGhhbiBgJHBhcnNlYCB0byB3YXRjaCBhdHRyaWJ1dGUgYmluZGluZ3MsIHdoaWNoIHBlcmZvcm1zXG4gKiB0aGUge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWR9IGJlaGluZCB0aGUgc2NlbmVzIG9uIG5vbi1jb25zdGFudCBsaXRlcmFscy4gQWxzbyxcbiAqIHdoZW4gYmluZGluZyB3aXRob3V0IGRpcmVjdGl2ZXMsIEFuZ3VsYXJKUyB3aWxsIHVuZGVyc3RhbmQgdGhlIGNvbnRleHQgb2YgeW91ciBiaW5kaW5nc1xuICogYXV0b21hdGljYWxseS5cbiAqXG4gKiBBcyBhbiBleGFtcGxlLCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gdXNlcyB7QGxpbmtcbiAqIG5nLiRzY2UjcGFyc2VBc0h0bWwgJHNjZS5wYXJzZUFzSHRtbChiaW5kaW5nIGV4cHJlc3Npb24pfS4gIEhlcmUncyB0aGUgYWN0dWFsIGNvZGUgKHNsaWdodGx5XG4gKiBzaW1wbGlmaWVkKTpcbiAqXG4gKiBgYGBcbiAqIHZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgZnVuY3Rpb24oJHNjZSkge1xuICogICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAqICAgICBzY29wZS4kd2F0Y2goJHNjZS5wYXJzZUFzSHRtbChhdHRyLm5nQmluZEh0bWwpLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgICAgZWxlbWVudC5odG1sKHZhbHVlIHx8ICcnKTtcbiAqICAgICB9KTtcbiAqICAgfTtcbiAqIH1dO1xuICogYGBgXG4gKlxuICogIyMgSW1wYWN0IG9uIGxvYWRpbmcgdGVtcGxhdGVzXG4gKlxuICogVGhpcyBhcHBsaWVzIGJvdGggdG8gdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIGBuZy1pbmNsdWRlYH0gZGlyZWN0aXZlIGFzIHdlbGwgYXNcbiAqIGB0ZW1wbGF0ZVVybGAncyBzcGVjaWZpZWQgYnkge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAqXG4gKiBCeSBkZWZhdWx0LCBBbmd1bGFyIG9ubHkgbG9hZHMgdGVtcGxhdGVzIGZyb20gdGhlIHNhbWUgZG9tYWluIGFuZCBwcm90b2NvbCBhcyB0aGUgYXBwbGljYXRpb25cbiAqIGRvY3VtZW50LiAgVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXG4gKiAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0gb24gdGhlIHRlbXBsYXRlIFVSTC4gIFRvIGxvYWQgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBhbmQvb3JcbiAqIHByb3RvY29scywgeW91IG1heSBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdFxuICogdGhlbX0gb3Ige0BsaW5rIG5nLiRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgaXR9IGludG8gYSB0cnVzdGVkIHZhbHVlLlxuICpcbiAqICpQbGVhc2Ugbm90ZSo6XG4gKiBUaGUgYnJvd3NlcidzXG4gKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICogcG9saWN5IGFwcGx5IGluIGFkZGl0aW9uIHRvIHRoaXMgYW5kIG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseVxuICogbG9hZGVkLiAgVGhpcyBtZWFucyB0aGF0IHdpdGhvdXQgdGhlIHJpZ2h0IENPUlMgcG9saWN5LCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGEgZGlmZmVyZW50IGRvbWFpblxuICogd29uJ3Qgd29yayBvbiBhbGwgYnJvd3NlcnMuICBBbHNvLCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGBmaWxlOi8vYCBVUkwgZG9lcyBub3Qgd29yayBvbiBzb21lXG4gKiBicm93c2Vycy5cbiAqXG4gKiAjIyBUaGlzIGZlZWxzIGxpa2UgdG9vIG11Y2ggb3ZlcmhlYWRcbiAqXG4gKiBJdCdzIGltcG9ydGFudCB0byByZW1lbWJlciB0aGF0IFNDRSBvbmx5IGFwcGxpZXMgdG8gaW50ZXJwb2xhdGlvbiBleHByZXNzaW9ucy5cbiAqXG4gKiBJZiB5b3VyIGV4cHJlc3Npb25zIGFyZSBjb25zdGFudCBsaXRlcmFscywgdGhleSdyZSBhdXRvbWF0aWNhbGx5IHRydXN0ZWQgYW5kIHlvdSBkb24ndCBuZWVkIHRvXG4gKiBjYWxsIGAkc2NlLnRydXN0QXNgIG9uIHRoZW0gKGUuZy5cbiAqIGA8ZGl2IG5nLWJpbmQtaHRtbD1cIic8Yj5pbXBsaWNpdGx5IHRydXN0ZWQ8L2I+J1wiPjwvZGl2PmApIGp1c3Qgd29ya3MuIFRoZSBgJHNjZURlbGVnYXRlYCB3aWxsXG4gKiBhbHNvIHVzZSB0aGUgYCRzYW5pdGl6ZWAgc2VydmljZSBpZiBpdCBpcyBhdmFpbGFibGUgd2hlbiBiaW5kaW5nIHVudHJ1c3RlZCB2YWx1ZXMgdG9cbiAqIGAkc2NlLkhUTUxgIGNvbnRleHQuIEFuZ3VsYXJKUyBwcm92aWRlcyBhbiBpbXBsZW1lbnRhdGlvbiBpbiBgYW5ndWxhci1zYW5pdGl6ZS5qc2AsIGFuZCBpZiB5b3VcbiAqIHdpc2ggdG8gdXNlIGl0LCB5b3Ugd2lsbCBhbHNvIG5lZWQgdG8gZGVwZW5kIG9uIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSBgbmdTYW5pdGl6ZWB9IG1vZHVsZSBpblxuICogeW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBUaGUgaW5jbHVkZWQge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGNvbWVzIHdpdGggc2FuZSBkZWZhdWx0cyB0byBhbGxvdyB5b3UgdG8gbG9hZFxuICogdGVtcGxhdGVzIGluIGBuZy1pbmNsdWRlYCBmcm9tIHlvdXIgYXBwbGljYXRpb24ncyBkb21haW4gd2l0aG91dCBoYXZpbmcgdG8gZXZlbiBrbm93IGFib3V0IFNDRS5cbiAqIEl0IGJsb2NrcyBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgbG9hZGluZyB0ZW1wbGF0ZXMgb3ZlciBodHRwIGZyb20gYW4gaHR0cHNcbiAqIHNlcnZlZCBkb2N1bWVudC4gIFlvdSBjYW4gY2hhbmdlIHRoZXNlIGJ5IHNldHRpbmcgeW91ciBvd24gY3VzdG9tIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0c30gYW5kIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgYmxhY2tsaXN0c30gZm9yIG1hdGNoaW5nIHN1Y2ggVVJMcy5cbiAqXG4gKiBUaGlzIHNpZ25pZmljYW50bHkgcmVkdWNlcyB0aGUgb3ZlcmhlYWQuICBJdCBpcyBmYXIgZWFzaWVyIHRvIHBheSB0aGUgc21hbGwgb3ZlcmhlYWQgYW5kIGhhdmUgYW5cbiAqIGFwcGxpY2F0aW9uIHRoYXQncyBzZWN1cmUgYW5kIGNhbiBiZSBhdWRpdGVkIHRvIHZlcmlmeSB0aGF0IHdpdGggbXVjaCBtb3JlIGVhc2UgdGhhbiBib2x0aW5nXG4gKiBzZWN1cml0eSBvbnRvIGFuIGFwcGxpY2F0aW9uIGxhdGVyLlxuICpcbiAqIDxhIG5hbWU9XCJjb250ZXh0c1wiPjwvYT5cbiAqICMjIFdoYXQgdHJ1c3RlZCBjb250ZXh0IHR5cGVzIGFyZSBzdXBwb3J0ZWQ/XG4gKlxuICogfCBDb250ZXh0ICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfFxuICogfCBgJHNjZS5IVE1MYCAgICAgICAgIHwgRm9yIEhUTUwgdGhhdCdzIHNhZmUgdG8gc291cmNlIGludG8gdGhlIGFwcGxpY2F0aW9uLiAgVGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSBkaXJlY3RpdmUgdXNlcyB0aGlzIGNvbnRleHQgZm9yIGJpbmRpbmdzLiBJZiBhbiB1bnNhZmUgdmFsdWUgaXMgZW5jb3VudGVyZWQsIGFuZCB0aGUge0BsaW5rIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gc2VydmljZSBpcyBhdmFpbGFibGUgKGltcGxlbWVudGVkIGJ5IHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSBuZ1Nhbml0aXplfSBtb2R1bGUpIHRoaXMgd2lsbCBzYW5pdGl6ZSB0aGUgdmFsdWUgaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBlcnJvci4gfFxuICogfCBgJHNjZS5DU1NgICAgICAgICAgIHwgRm9yIENTUyB0aGF0J3Mgc2FmZSB0byBzb3VyY2UgaW50byB0aGUgYXBwbGljYXRpb24uICBDdXJyZW50bHksIG5vIGJpbmRpbmdzIHJlcXVpcmUgdGhpcyBjb250ZXh0LiBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHxcbiAqIHwgYCRzY2UuVVJMYCAgICAgICAgICB8IEZvciBVUkxzIHRoYXQgYXJlIHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLiAgQ3VycmVudGx5IHVudXNlZCAoYDxhIGhyZWY9YCwgYDxpbWcgc3JjPWAsIGFuZCBzb21lIG90aGVycyBzYW5pdGl6ZSB0aGVpciB1cmxzIGFuZCBkb24ndCBjb25zdGl0dXRlIGFuIFNDRSBjb250ZXh0LikgfFxuICogfCBgJHNjZS5SRVNPVVJDRV9VUkxgIHwgRm9yIFVSTHMgdGhhdCBhcmUgbm90IG9ubHkgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MsIGJ1dCB3aG9zZSBjb250ZW50cyBhcmUgYWxzbyBzYWZlIHRvIGluY2x1ZGUgaW4geW91ciBhcHBsaWNhdGlvbi4gIEV4YW1wbGVzIGluY2x1ZGUgYG5nLWluY2x1ZGVgLCBgc3JjYCAvIGBuZ1NyY2AgYmluZGluZ3MgZm9yIHRhZ3Mgb3RoZXIgdGhhbiBgSU1HYCwgYFZJREVPYCwgYEFVRElPYCwgYFNPVVJDRWAsIGFuZCBgVFJBQ0tgIChlLmcuIGBJRlJBTUVgLCBgT0JKRUNUYCwgZXRjLikgIDxicj48YnI+Tm90ZSB0aGF0IGAkc2NlLlJFU09VUkNFX1VSTGAgbWFrZXMgYSBzdHJvbmdlciBzdGF0ZW1lbnQgYWJvdXQgdGhlIFVSTCB0aGFuIGAkc2NlLlVSTGAgZG9lcyAoaXQncyBub3QganVzdCB0aGUgVVJMIHRoYXQgbWF0dGVycywgYnV0IGFsc28gd2hhdCBpcyBhdCB0aGUgZW5kIG9mIGl0KSwgYW5kIHRoZXJlZm9yZSBjb250ZXh0cyByZXF1aXJpbmcgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlJFU09VUkNFX1VSTGAgY2FuIGJlIHVzZWQgYW55d2hlcmUgdGhhdCB2YWx1ZXMgdHJ1c3RlZCBmb3IgYCRzY2UuVVJMYCBhcmUgcmVxdWlyZWQuIHxcbiAqIHwgYCRzY2UuSlNgICAgICAgICAgICB8IEZvciBKYXZhU2NyaXB0IHRoYXQgaXMgc2FmZSB0byBleGVjdXRlIGluIHlvdXIgYXBwbGljYXRpb24ncyBjb250ZXh0LiAgQ3VycmVudGx5LCBubyBiaW5kaW5ncyByZXF1aXJlIHRoaXMgY29udGV4dC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfFxuICpcbiAqXG4gKiBCZSBhd2FyZSB0aGF0IGBhW2hyZWZdYCBhbmQgYGltZ1tzcmNdYCBhdXRvbWF0aWNhbGx5IHNhbml0aXplIHRoZWlyIFVSTHMgYW5kIGRvIG5vdCBwYXNzIHRoZW1cbiAqIHRocm91Z2gge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWR9LiBUaGVyZSdzIG5vIENTUy0sIFVSTC0sIG9yIEpTLWNvbnRleHQgYmluZGluZ3NcbiAqIGluIEFuZ3VsYXJKUyBjdXJyZW50bHksIHNvIHRoZWlyIGNvcnJlc3BvbmRpbmcgYCRzY2UudHJ1c3RBc2AgZnVuY3Rpb25zIGFyZW4ndCB1c2VmdWwgeWV0LiBUaGlzXG4gKiBtaWdodCBldm9sdmUuXG4gKlxuICogIyMgRm9ybWF0IG9mIGl0ZW1zIGluIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCByZXNvdXJjZVVybFdoaXRlbGlzdH0ve0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IEJsYWNrbGlzdH0gPGEgbmFtZT1cInJlc291cmNlVXJsUGF0dGVybkl0ZW1cIj48L2E+XG4gKlxuICogIEVhY2ggZWxlbWVudCBpbiB0aGVzZSBhcnJheXMgbXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAgLSAqKidzZWxmJyoqXG4gKiAgICAtIFRoZSBzcGVjaWFsICoqc3RyaW5nKiosIGAnc2VsZidgLCBjYW4gYmUgdXNlZCB0byBtYXRjaCBhZ2FpbnN0IGFsbCBVUkxzIG9mIHRoZSAqKnNhbWVcbiAqICAgICAgZG9tYWluKiogYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50IHVzaW5nIHRoZSAqKnNhbWUgcHJvdG9jb2wqKi5cbiAqICAtICoqU3RyaW5nKiogKGV4Y2VwdCB0aGUgc3BlY2lhbCB2YWx1ZSBgJ3NlbGYnYClcbiAqICAgIC0gVGhlIHN0cmluZyBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGZ1bGwgKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZVxuICogICAgICBiZWluZyB0ZXN0ZWQgKHN1YnN0cmluZyBtYXRjaGVzIGFyZSBub3QgZ29vZCBlbm91Z2guKVxuICogICAgLSBUaGVyZSBhcmUgZXhhY3RseSAqKnR3byB3aWxkY2FyZCBzZXF1ZW5jZXMqKiAtIGAqYCBhbmQgYCoqYC4gIEFsbCBvdGhlciBjaGFyYWN0ZXJzXG4gKiAgICAgIG1hdGNoIHRoZW1zZWx2ZXMuXG4gKiAgICAtIGAqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgYW55IGNoYXJhY3RlciBvdGhlciB0aGFuIG9uZSBvZiB0aGUgZm9sbG93aW5nIDZcbiAqICAgICAgY2hhcmFjdGVyczogJ2A6YCcsICdgL2AnLCAnYC5gJywgJ2A/YCcsICdgJmAnIGFuZCAnYDtgJy4gIEl0J3MgYSB1c2VmdWwgd2lsZGNhcmQgZm9yIHVzZVxuICogICAgICBpbiBhIHdoaXRlbGlzdC5cbiAqICAgIC0gYCoqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgKmFueSogY2hhcmFjdGVyLiAgQXMgc3VjaCwgaXQncyBub3RcbiAqICAgICAgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBhIHNjaGVtZSwgZG9tYWluLCBldGMuIGFzIGl0IHdvdWxkIG1hdGNoIHRvbyBtdWNoLiAgKGUuZy5cbiAqICAgICAgaHR0cDovLyoqLmV4YW1wbGUuY29tLyB3b3VsZCBtYXRjaCBodHRwOi8vZXZpbC5jb20vP2lnbm9yZT0uZXhhbXBsZS5jb20vIGFuZCB0aGF0IG1pZ2h0XG4gKiAgICAgIG5vdCBoYXZlIGJlZW4gdGhlIGludGVudGlvbi4pICBJdHMgdXNhZ2UgYXQgdGhlIHZlcnkgZW5kIG9mIHRoZSBwYXRoIGlzIG9rLiAgKGUuZy5cbiAqICAgICAgaHR0cDovL2Zvby5leGFtcGxlLmNvbS90ZW1wbGF0ZXMvKiopLlxuICogIC0gKipSZWdFeHAqKiAoKnNlZSBjYXZlYXQgYmVsb3cqKVxuICogICAgLSAqQ2F2ZWF0KjogIFdoaWxlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIHBvd2VyZnVsIGFuZCBvZmZlciBncmVhdCBmbGV4aWJpbGl0eSwgIHRoZWlyIHN5bnRheFxuICogICAgICAoYW5kIGFsbCB0aGUgaW5ldml0YWJsZSBlc2NhcGluZykgbWFrZXMgdGhlbSAqaGFyZGVyIHRvIG1haW50YWluKi4gIEl0J3MgZWFzeSB0b1xuICogICAgICBhY2NpZGVudGFsbHkgaW50cm9kdWNlIGEgYnVnIHdoZW4gb25lIHVwZGF0ZXMgYSBjb21wbGV4IGV4cHJlc3Npb24gKGltaG8sIGFsbCByZWdleGVzIHNob3VsZFxuICogICAgICBoYXZlIGdvb2QgdGVzdCBjb3ZlcmFnZSkuICBGb3IgaW5zdGFuY2UsIHRoZSB1c2Ugb2YgYC5gIGluIHRoZSByZWdleCBpcyBjb3JyZWN0IG9ubHkgaW4gYVxuICogICAgICBzbWFsbCBudW1iZXIgb2YgY2FzZXMuICBBIGAuYCBjaGFyYWN0ZXIgaW4gdGhlIHJlZ2V4IHVzZWQgd2hlbiBtYXRjaGluZyB0aGUgc2NoZW1lIG9yIGFcbiAqICAgICAgc3ViZG9tYWluIGNvdWxkIGJlIG1hdGNoZWQgYWdhaW5zdCBhIGA6YCBvciBsaXRlcmFsIGAuYCB0aGF0IHdhcyBsaWtlbHkgbm90IGludGVuZGVkLiAgIEl0XG4gKiAgICAgIGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgdGhlIHN0cmluZyBwYXR0ZXJucyBhbmQgb25seSBmYWxsIGJhY2sgdG8gcmVndWxhciBleHByZXNzaW9uc1xuICogICAgICBhcyBhIGxhc3QgcmVzb3J0LlxuICogICAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwIChpLmUuIG5vdCBhIHN0cmluZy4pICBJdCBpc1xuICogICAgICBtYXRjaGVkIGFnYWluc3QgdGhlICoqZW50aXJlKiogKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZSBiZWluZyB0ZXN0ZWRcbiAqICAgICAgKGV2ZW4gd2hlbiB0aGUgUmVnRXhwIGRpZCBub3QgaGF2ZSB0aGUgYF5gIGFuZCBgJGAgY29kZXMuKSAgSW4gYWRkaXRpb24sIGFueSBmbGFnc1xuICogICAgICBwcmVzZW50IG9uIHRoZSBSZWdFeHAgKHN1Y2ggYXMgbXVsdGlsaW5lLCBnbG9iYWwsIGlnbm9yZUNhc2UpIGFyZSBpZ25vcmVkLlxuICogICAgLSBJZiB5b3UgYXJlIGdlbmVyYXRpbmcgeW91ciBKYXZhU2NyaXB0IGZyb20gc29tZSBvdGhlciB0ZW1wbGF0aW5nIGVuZ2luZSAobm90XG4gKiAgICAgIHJlY29tbWVuZGVkLCBlLmcuIGluIGlzc3VlIFsjNDAwNl0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNDAwNikpLFxuICogICAgICByZW1lbWJlciB0byBlc2NhcGUgeW91ciByZWd1bGFyIGV4cHJlc3Npb24gKGFuZCBiZSBhd2FyZSB0aGF0IHlvdSBtaWdodCBuZWVkIG1vcmUgdGhhblxuICogICAgICBvbmUgbGV2ZWwgb2YgZXNjYXBpbmcgZGVwZW5kaW5nIG9uIHlvdXIgdGVtcGxhdGluZyBlbmdpbmUgYW5kIHRoZSB3YXkgeW91IGludGVycG9sYXRlZFxuICogICAgICB0aGUgdmFsdWUuKSAgRG8gbWFrZSB1c2Ugb2YgeW91ciBwbGF0Zm9ybSdzIGVzY2FwaW5nIG1lY2hhbmlzbSBhcyBpdCBtaWdodCBiZSBnb29kXG4gKiAgICAgIGVub3VnaCBiZWZvcmUgY29kaW5nIHlvdXIgb3duLiAgRS5nLiBSdWJ5IGhhc1xuICogICAgICBbUmVnZXhwLmVzY2FwZShzdHIpXShodHRwOi8vd3d3LnJ1YnktZG9jLm9yZy9jb3JlLTIuMC4wL1JlZ2V4cC5odG1sI21ldGhvZC1jLWVzY2FwZSlcbiAqICAgICAgYW5kIFB5dGhvbiBoYXMgW3JlLmVzY2FwZV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3JlLmh0bWwjcmUuZXNjYXBlKS5cbiAqICAgICAgSmF2YXNjcmlwdCBsYWNrcyBhIHNpbWlsYXIgYnVpbHQgaW4gZnVuY3Rpb24gZm9yIGVzY2FwaW5nLiAgVGFrZSBhIGxvb2sgYXQgR29vZ2xlXG4gKiAgICAgIENsb3N1cmUgbGlicmFyeSdzIFtnb29nLnN0cmluZy5yZWdFeHBFc2NhcGUocyldKFxuICogICAgICBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmU5NjIpLlxuICpcbiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gZm9yIGFuIGV4YW1wbGUuXG4gKlxuICogIyMgU2hvdyBtZSBhbiBleGFtcGxlIHVzaW5nIFNDRS5cbiAqXG4gKiA8ZXhhbXBsZSBtb2R1bGU9XCJteVNjZUFwcFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCIgbmFtZT1cInNjZS1zZXJ2aWNlXCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJBcHBDb250cm9sbGVyIGFzIG15Q3RybFwiPlxuICogICAgIDxpIG5nLWJpbmQtaHRtbD1cIm15Q3RybC5leHBsaWNpdGx5VHJ1c3RlZEh0bWxcIiBpZD1cImV4cGxpY2l0bHlUcnVzdGVkSHRtbFwiPjwvaT48YnI+PGJyPlxuICogICAgIDxiPlVzZXIgY29tbWVudHM8L2I+PGJyPlxuICogICAgIEJ5IGRlZmF1bHQsIEhUTUwgdGhhdCBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQgKGUuZy4gQWxpY2UncyBjb21tZW50KSBpcyBzYW5pdGl6ZWQgd2hlblxuICogICAgICRzYW5pdGl6ZSBpcyBhdmFpbGFibGUuICBJZiAkc2FuaXRpemUgaXNuJ3QgYXZhaWxhYmxlLCB0aGlzIHJlc3VsdHMgaW4gYW4gZXJyb3IgaW5zdGVhZCBvZiBhblxuICogICAgIGV4cGxvaXQuXG4gKiAgICAgPGRpdiBjbGFzcz1cIndlbGxcIj5cbiAqICAgICAgIDxkaXYgbmctcmVwZWF0PVwidXNlckNvbW1lbnQgaW4gbXlDdHJsLnVzZXJDb21tZW50c1wiPlxuICogICAgICAgICA8Yj57e3VzZXJDb21tZW50Lm5hbWV9fTwvYj46XG4gKiAgICAgICAgIDxzcGFuIG5nLWJpbmQtaHRtbD1cInVzZXJDb21tZW50Lmh0bWxDb21tZW50XCIgY2xhc3M9XCJodG1sQ29tbWVudFwiPjwvc3Bhbj5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgPC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAqICAgYW5ndWxhci5tb2R1bGUoJ215U2NlQXBwJywgWyduZ1Nhbml0aXplJ10pXG4gKiAgICAgLmNvbnRyb2xsZXIoJ0FwcENvbnRyb2xsZXInLCBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRzY2UnLFxuICogICAgICAgZnVuY3Rpb24gQXBwQ29udHJvbGxlcigkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRzY2UpIHtcbiAqICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICogICAgICAgICAkaHR0cC5nZXQoJ3Rlc3RfZGF0YS5qc29uJywge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAqICAgICAgICAgICBzZWxmLnVzZXJDb21tZW50cyA9IHJlc3BvbnNlLmRhdGE7XG4gKiAgICAgICAgIH0pO1xuICogICAgICAgICBzZWxmLmV4cGxpY2l0bHlUcnVzdGVkSHRtbCA9ICRzY2UudHJ1c3RBc0h0bWwoXG4gKiAgICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDtcIj5Ib3ZlciBvdmVyIHRoaXMgdGV4dC48L3NwYW4+Jyk7XG4gKiAgICAgICB9XSk7XG4gKiA8L2ZpbGU+XG4gKlxuICogPGZpbGUgbmFtZT1cInRlc3RfZGF0YS5qc29uXCI+XG4gKiBbXG4gKiAgIHsgXCJuYW1lXCI6IFwiQWxpY2VcIixcbiAqICAgICBcImh0bWxDb21tZW50XCI6XG4gKiAgICAgICAgIFwiPHNwYW4gb25tb3VzZW92ZXI9J3RoaXMudGV4dENvbnRlbnQ9XFxcIlBXTjNEIVxcXCInPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj5cIlxuICogICB9LFxuICogICB7IFwibmFtZVwiOiBcIkJvYlwiLFxuICogICAgIFwiaHRtbENvbW1lbnRcIjogXCI8aT5ZZXMhPC9pPiAgQW0gSSB0aGUgb25seSBvdGhlciBvbmU/XCJcbiAqICAgfVxuICogXVxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgZGVzY3JpYmUoJ1NDRSBkb2MgZGVtbycsIGZ1bmN0aW9uKCkge1xuICogICAgIGl0KCdzaG91bGQgc2FuaXRpemUgdW50cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnLmh0bWxDb21tZW50JykpLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdpbm5lckhUTUwnKSlcbiAqICAgICAgICAgICAudG9CZSgnPHNwYW4+SXMgPGk+YW55b25lPC9pPiByZWFkaW5nIHRoaXM/PC9zcGFuPicpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIE5PVCBzYW5pdGl6ZSBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZXhwbGljaXRseVRydXN0ZWRIdG1sJykpLmdldEF0dHJpYnV0ZSgnaW5uZXJIVE1MJykpLnRvQmUoXG4gKiAgICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPVwidGhpcy50ZXh0Q29udGVudD0mcXVvdDtFeHBsaWNpdGx5IHRydXN0ZWQgSFRNTCBieXBhc3NlcyAnICtcbiAqICAgICAgICAgICAnc2FuaXRpemF0aW9uLiZxdW90O1wiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTtcbiAqICAgICB9KTtcbiAqICAgfSk7XG4gKiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICpcbiAqXG4gKiAjIyBDYW4gSSBkaXNhYmxlIFNDRSBjb21wbGV0ZWx5P1xuICpcbiAqIFllcywgeW91IGNhbi4gIEhvd2V2ZXIsIHRoaXMgaXMgc3Ryb25nbHkgZGlzY291cmFnZWQuICBTQ0UgZ2l2ZXMgeW91IGEgbG90IG9mIHNlY3VyaXR5IGJlbmVmaXRzXG4gKiBmb3IgbGl0dGxlIGNvZGluZyBvdmVyaGVhZC4gIEl0IHdpbGwgYmUgbXVjaCBoYXJkZXIgdG8gdGFrZSBhbiBTQ0UgZGlzYWJsZWQgYXBwbGljYXRpb24gYW5kXG4gKiBlaXRoZXIgc2VjdXJlIGl0IG9uIHlvdXIgb3duIG9yIGVuYWJsZSBTQ0UgYXQgYSBsYXRlciBzdGFnZS4gIEl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gZGlzYWJsZSBTQ0VcbiAqIGZvciBjYXNlcyB3aGVyZSB5b3UgaGF2ZSBhIGxvdCBvZiBleGlzdGluZyBjb2RlIHRoYXQgd2FzIHdyaXR0ZW4gYmVmb3JlIFNDRSB3YXMgaW50cm9kdWNlZCBhbmRcbiAqIHlvdSdyZSBtaWdyYXRpbmcgdGhlbSBhIG1vZHVsZSBhdCBhIHRpbWUuIEFsc28gZG8gbm90ZSB0aGF0IHRoaXMgaXMgYW4gYXBwLXdpZGUgc2V0dGluZywgc28gaWZcbiAqIHlvdSBhcmUgd3JpdGluZyBhIGxpYnJhcnksIHlvdSB3aWxsIGNhdXNlIHNlY3VyaXR5IGJ1Z3MgYXBwbGljYXRpb25zIHVzaW5nIGl0LlxuICpcbiAqIFRoYXQgc2FpZCwgaGVyZSdzIGhvdyB5b3UgY2FuIGNvbXBsZXRlbHkgZGlzYWJsZSBTQ0U6XG4gKlxuICogYGBgXG4gKiBhbmd1bGFyLm1vZHVsZSgnbXlBcHBXaXRoU2NlRGlzYWJsZWRteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZVByb3ZpZGVyKSB7XG4gKiAgIC8vIENvbXBsZXRlbHkgZGlzYWJsZSBTQ0UuICBGb3IgZGVtb25zdHJhdGlvbiBwdXJwb3NlcyBvbmx5IVxuICogICAvLyBEbyBub3QgdXNlIGluIG5ldyBwcm9qZWN0cyBvciBsaWJyYXJpZXMuXG4gKiAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG5cbmZ1bmN0aW9uICRTY2VQcm92aWRlcigpIHtcbiAgdmFyIGVuYWJsZWQgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VQcm92aWRlciNlbmFibGVkXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHByb3ZpZGVkLCB0aGVuIGVuYWJsZXMvZGlzYWJsZXMgU0NFIGFwcGxpY2F0aW9uLXdpZGUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEVuYWJsZXMvZGlzYWJsZXMgU0NFIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgKi9cbiAgdGhpcy5lbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgZW5hYmxlZCA9ICEhdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBlbmFibGVkO1xuICB9O1xuXG5cbiAgLyogRGVzaWduIG5vdGVzIG9uIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciBTQ0UuXG4gICAqXG4gICAqIFRoZSBBUEkgY29udHJhY3QgZm9yIHRoZSBTQ0UgZGVsZWdhdGVcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBUaGUgU0NFIGRlbGVnYXRlIG9iamVjdCBtdXN0IHByb3ZpZGUgdGhlIGZvbGxvd2luZyAzIG1ldGhvZHM6XG4gICAqXG4gICAqIC0gdHJ1c3RBcyhjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHRlbGwgdGhlIFNDRSBzZXJ2aWNlIHRoYXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIE9LIHRvIHVzZSBpbiB0aGVcbiAgICogICAgIGNvbnRleHRzIHNwZWNpZmllZCBieSBjb250ZXh0RW51bS4gIEl0IG11c3QgcmV0dXJuIGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnlcbiAgICogICAgIGdldFRydXN0ZWQoKSBmb3IgYSBjb21wYXRpYmxlIGNvbnRleHRFbnVtIGFuZCByZXR1cm4gdGhpcyB2YWx1ZS5cbiAgICpcbiAgICogLSB2YWx1ZU9mKHZhbHVlKVxuICAgKiAgICAgRm9yIHZhbHVlcyB0aGF0IHdlcmUgbm90IHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZW0gYXMgaXMuICBGb3IgdmFsdWVzIHRoYXQgd2VyZVxuICAgKiAgICAgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgaW5wdXQgdmFsdWUgdG8gdHJ1c3RBcy4gIEJhc2ljYWxseSwgaWZcbiAgICogICAgIHRydXN0QXMgaXMgd3JhcHBpbmcgdGhlIGdpdmVuIHZhbHVlcyBpbnRvIHNvbWUgdHlwZSwgdGhpcyBvcGVyYXRpb24gdW53cmFwcyBpdCB3aGVuIGdpdmVuXG4gICAqICAgICBzdWNoIGEgdmFsdWUuXG4gICAqXG4gICAqIC0gZ2V0VHJ1c3RlZChjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdGhlIGEgdmFsdWUgdGhhdCBpcyBzYWZlIHRvIHVzZSBpbiB0aGUgY29udGV4dCBzcGVjaWZpZWQgYnlcbiAgICogICAgIGNvbnRleHRFbnVtIG9yIHRocm93IGFuZCBleGNlcHRpb24gb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIGNvbnRyYWN0IGRlbGliZXJhdGVseSBkb2VzIE5PVCBzdGF0ZSB0aGF0IHZhbHVlcyByZXR1cm5lZCBieSB0cnVzdEFzKCkgbXVzdCBiZVxuICAgKiBvcGFxdWUgb3Igd3JhcHBlZCBpbiBzb21lIGhvbGRlciBvYmplY3QuICBUaGF0IGhhcHBlbnMgdG8gYmUgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLiAgRm9yXG4gICAqIGluc3RhbmNlLCBhbiBpbXBsZW1lbnRhdGlvbiBjb3VsZCBtYWludGFpbiBhIHJlZ2lzdHJ5IG9mIGFsbCB0cnVzdGVkIG9iamVjdHMgYnkgY29udGV4dC4gIEluXG4gICAqIHN1Y2ggYSBjYXNlLCB0cnVzdEFzKCkgd291bGQgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgaW4uICBnZXRUcnVzdGVkKCkgd291bGRcbiAgICogcmV0dXJuIHRoZSBzYW1lIG9iamVjdCBwYXNzZWQgaW4gaWYgaXQgd2FzIGZvdW5kIGluIHRoZSByZWdpc3RyeSB1bmRlciBhIGNvbXBhdGlibGUgY29udGV4dCBvclxuICAgKiB0aHJvdyBhbiBleGNlcHRpb24gb3RoZXJ3aXNlLiAgQW4gaW1wbGVtZW50YXRpb24gbWlnaHQgb25seSB3cmFwIHZhbHVlcyBzb21lIG9mIHRoZSB0aW1lIGJhc2VkXG4gICAqIG9uIHNvbWUgY3JpdGVyaWEuICBnZXRUcnVzdGVkKCkgbWlnaHQgcmV0dXJuIGEgdmFsdWUgYW5kIG5vdCB0aHJvdyBhbiBleGNlcHRpb24gZm9yIHNwZWNpYWxcbiAgICogY29uc3RhbnRzIG9yIG9iamVjdHMgZXZlbiBpZiBub3Qgd3JhcHBlZC4gIEFsbCBzdWNoIGltcGxlbWVudGF0aW9ucyBmdWxmaWxsIHRoaXMgY29udHJhY3QuXG4gICAqXG4gICAqXG4gICAqIEEgbm90ZSBvbiB0aGUgaW5oZXJpdGFuY2UgbW9kZWwgZm9yIFNDRSBjb250ZXh0c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogSSd2ZSB1c2VkIGluaGVyaXRhbmNlIGFuZCBtYWRlIFJFU09VUkNFX1VSTCB3cmFwcGVkIHR5cGVzIGEgc3VidHlwZSBvZiBVUkwgd3JhcHBlZCB0eXBlcy4gIFRoaXNcbiAgICogaXMgcHVyZWx5IGFuIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXG4gICAqXG4gICAqIFRoZSBjb250cmFjdCBpcyBzaW1wbHkgdGhpczpcbiAgICpcbiAgICogICAgIGdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKSBzdWNjZWVkaW5nIGltcGxpZXMgdGhhdCBnZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlcbiAgICogICAgIHdpbGwgYWxzbyBzdWNjZWVkLlxuICAgKlxuICAgKiBJbmhlcml0YW5jZSBoYXBwZW5zIHRvIGNhcHR1cmUgdGhpcyBpbiBhIG5hdHVyYWwgd2F5LiBJbiBzb21lIGZ1dHVyZSwgd2UgbWF5IG5vdCB1c2VcbiAgICogaW5oZXJpdGFuY2UgYW55bW9yZS4gVGhhdCBpcyBPSyBiZWNhdXNlIG5vIGNvZGUgb3V0c2lkZSBvZiBzY2UuanMgYW5kIHNjZVNwZWNzLmpzIHdvdWxkIG5lZWQgdG9cbiAgICogYmUgYXdhcmUgb2YgdGhpcyBkZXRhaWwuXG4gICAqL1xuXG4gIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgJyRzY2VEZWxlZ2F0ZScsIGZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgICRwYXJzZSwgICAkc2NlRGVsZWdhdGUpIHtcbiAgICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbiAgICAvLyBQcmVyZXE6IEVuc3VyZSB0aGF0IHdlJ3JlIG5vdCBydW5uaW5nIGluIElFPDExIHF1aXJrcyBtb2RlLiAgSW4gdGhhdCBtb2RlLCBJRSA8IDExIGFsbG93XG4gICAgLy8gdGhlIFwiZXhwcmVzc2lvbihqYXZhc2NyaXB0IGV4cHJlc3Npb24pXCIgc3ludGF4IHdoaWNoIGlzIGluc2VjdXJlLlxuICAgIGlmIChlbmFibGVkICYmIG1zaWUgPCA4KSB7XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCdpZXF1aXJrcycsXG4gICAgICAgICdTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkb2VzIG5vdCBzdXBwb3J0IEludGVybmV0IEV4cGxvcmVyIHZlcnNpb24gPCAxMSBpbiBxdWlya3MgJyArXG4gICAgICAgICdtb2RlLiAgWW91IGNhbiBmaXggdGhpcyBieSBhZGRpbmcgdGhlIHRleHQgPCFkb2N0eXBlIGh0bWw+IHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MICcgK1xuICAgICAgICAnZG9jdW1lbnQuICBTZWUgaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJHNjZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgc2NlID0gc2hhbGxvd0NvcHkoU0NFX0NPTlRFWFRTKTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2lzRW5hYmxlZFxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIFNDRSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuICBJZiB5b3Ugd2FudCB0byBzZXQgdGhlIHZhbHVlLCB5b3VcbiAgICAgKiAgICAgaGF2ZSB0byBkbyBpdCBhdCBtb2R1bGUgY29uZmlnIHRpbWUgb24ge0BsaW5rIG5nLiRzY2VQcm92aWRlciAkc2NlUHJvdmlkZXJ9LlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBTQ0UgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBzY2UuaXNFbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZW5hYmxlZDtcbiAgICB9O1xuICAgIHNjZS50cnVzdEFzID0gJHNjZURlbGVnYXRlLnRydXN0QXM7XG4gICAgc2NlLmdldFRydXN0ZWQgPSAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZDtcbiAgICBzY2UudmFsdWVPZiA9ICRzY2VEZWxlZ2F0ZS52YWx1ZU9mO1xuXG4gICAgaWYgKCFlbmFibGVkKSB7XG4gICAgICBzY2UudHJ1c3RBcyA9IHNjZS5nZXRUcnVzdGVkID0gZnVuY3Rpb24odHlwZSwgdmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuICAgICAgc2NlLnZhbHVlT2YgPSBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi4gIFRoaXMgaXMgbGlrZSB7QGxpbmtcbiAgICAgKiBuZy4kcGFyc2UgJHBhcnNlfSBhbmQgaXMgaWRlbnRpY2FsIHdoZW4gdGhlIGV4cHJlc3Npb24gaXMgYSBsaXRlcmFsIGNvbnN0YW50LiAgT3RoZXJ3aXNlLCBpdFxuICAgICAqIHdyYXBzIHRoZSBleHByZXNzaW9uIGluIGEgY2FsbCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZCgqdHlwZSosXG4gICAgICogKnJlc3VsdCopfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIFNDRSBjb250ZXh0IGluIHdoaWNoIHRoaXMgcmVzdWx0IHdpbGwgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG4gICAgc2NlLnBhcnNlQXMgPSBmdW5jdGlvbiBzY2VQYXJzZUFzKHR5cGUsIGV4cHIpIHtcbiAgICAgIHZhciBwYXJzZWQgPSAkcGFyc2UoZXhwcik7XG4gICAgICBpZiAocGFyc2VkLmxpdGVyYWwgJiYgcGFyc2VkLmNvbnN0YW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJHBhcnNlKGV4cHIsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNjZS5nZXRUcnVzdGVkKHR5cGUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIERlbGVnYXRlcyB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0uIEFzIHN1Y2gsIHJldHVybnMgYVxuICAgICAqIHdyYXBwZWQgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB5b3VyIHZhbHVlLCBhbmQgdGhlIHRydXN0IHlvdSBoYXZlIGluIGl0cyBzYWZldHkgZm9yIHRoZSBnaXZlblxuICAgICAqIGNvbnRleHQuIEFuZ3VsYXJKUyBjYW4gdGhlbiB1c2UgdGhhdCB2YWx1ZSBhcy1pcyBpbiBiaW5kaW5ncyBvZiB0aGUgc3BlY2lmaWVkIHNlY3VyZSBjb250ZXh0LlxuICAgICAqIFRoaXMgaXMgdXNlZCBpbiBiaW5kaW5ncyBmb3IgYG5nLWJpbmQtaHRtbGAsIGBuZy1pbmNsdWRlYCwgYW5kIG1vc3QgYHNyY2AgYXR0cmlidXRlXG4gICAgICogaW50ZXJwb2xhdGlvbnMuIFNlZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBmb3Igc3RyaWN0IGNvbnRleHR1YWwgZXNjYXBpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZSwgZS5nLiBgJHNjZS5VUkxgLFxuICAgICAqICAgICBgJHNjZS5SRVNPVVJDRV9VUkxgLCBgJHNjZS5IVE1MYCwgYCRzY2UuSlNgIG9yIGAkc2NlLkNTU2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiB0aGUgY29udGV4dCB5b3Ugc3BlY2lmaWVkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0h0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSHRtbCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuSFRNTGAgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiBgJHNjZS5IVE1MYCBjb250ZXh0IChsaWtlIGBuZy1iaW5kLWh0bWxgKS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBtYXJrIGFzIHRydXN0ZWQgZm9yIGAkc2NlLkNTU2AgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50XG4gICAgICogICAgIG9mIHlvdXIgYHZhbHVlYCBpbiBgJHNjZS5DU1NgIGNvbnRleHQuIFRoaXMgY29udGV4dCBpcyBjdXJyZW50bHkgdW51c2VkLCBzbyB0aGVyZSBhcmVcbiAgICAgKiAgICAgYWxtb3N0IG5vIHJlYXNvbnMgdG8gdXNlIHRoaXMgZnVuY3Rpb24gc28gZmFyLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1VybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuVVJMYCBjb250ZXh0LlxuICAgICAqIEByZXR1cm4geyp9IEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgYSB0cnVzdGVkIHZhcmlhbnQgb2YgeW91ciBgdmFsdWVgXG4gICAgICogICAgIGluIGAkc2NlLlVSTGAgY29udGV4dC4gVGhhdCBjb250ZXh0IGlzIGN1cnJlbnRseSB1bnVzZWQsIHNvIHRoZXJlIGFyZSBhbG1vc3Qgbm8gcmVhc29uc1xuICAgICAqICAgICB0byB1c2UgdGhpcyBmdW5jdGlvbiBzbyBmYXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuUkVTT1VSQ0VfVVJMYCBjb250ZXh0LlxuICAgICAqIEByZXR1cm4geyp9IEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgYSB0cnVzdGVkIHZhcmlhbnQgb2YgeW91ciBgdmFsdWVgXG4gICAgICogICAgIGluIGAkc2NlLlJFU09VUkNFX1VSTGAgY29udGV4dCAodGVtcGxhdGUgVVJMcyBpbiBgbmctaW5jbHVkZWAsIG1vc3QgYHNyY2AgYXR0cmlidXRlXG4gICAgICogICAgIGJpbmRpbmdzLCAuLi4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gbWFyayBhcyB0cnVzdGVkIGZvciBgJHNjZS5KU2AgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiBgJHNjZS5KU2AgY29udGV4dC4gVGhhdCBjb250ZXh0IGlzIGN1cnJlbnRseSB1bnVzZWQsIHNvIHRoZXJlIGFyZSBhbG1vc3Qgbm8gcmVhc29ucyB0b1xuICAgICAqICAgICB1c2UgdGhpcyBmdW5jdGlvbiBzbyBmYXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGB9LiAgQXMgc3VjaCxcbiAgICAgKiB0YWtlcyBhbnkgaW5wdXQsIGFuZCBlaXRoZXIgcmV0dXJucyBhIHZhbHVlIHRoYXQncyBzYWZlIHRvIHVzZSBpbiB0aGUgc3BlY2lmaWVkIGNvbnRleHQsXG4gICAgICogb3IgdGhyb3dzIGFuIGV4Y2VwdGlvbi4gVGhpcyBmdW5jdGlvbiBpcyBhd2FyZSBvZiB0cnVzdGVkIHZhbHVlcyBjcmVhdGVkIGJ5IHRoZSBgdHJ1c3RBc2BcbiAgICAgKiBmdW5jdGlvbiBhbmQgaXRzIHNob3J0aGFuZHMsIGFuZCB3aGVuIGNvbnRleHRzIGFyZSBhcHByb3ByaWF0ZSwgcmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlXG4gICAgICogYXMtaXMuIEZpbmFsbHksIHRoaXMgZnVuY3Rpb24gY2FuIGFsc28gdGhyb3cgd2hlbiB0aGVyZSBpcyBubyB3YXkgdG8gdHVybiBgbWF5YmVUcnVzdGVkYCBpbiBhXG4gICAgICogc2FmZSB2YWx1ZSAoZS5nLiwgbm8gc2FuaXRpemF0aW9uIGlzIGF2YWlsYWJsZSBvciBwb3NzaWJsZS4pXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHRvIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlI3RydXN0QXNcbiAgICAgKiAgICAgYCRzY2UudHJ1c3RBc2B9IGNhbGwsIG9yIGFueXRoaW5nIGVsc2UgKHdoaWNoIHdpbGwgbm90IGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC4pXG4gICAgICogQHJldHVybiB7Kn0gQSB2ZXJzaW9uIG9mIHRoZSB2YWx1ZSB0aGF0J3Mgc2FmZSB0byB1c2UgaW4gdGhlIGdpdmVuIGNvbnRleHQsIG9yIHRocm93cyBhblxuICAgICAqICAgICBleGNlcHRpb24gaWYgdGhpcyBpcyBpbXBvc3NpYmxlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEh0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSHRtbCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZENzc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRDc3ModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZFVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm4geyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEpzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5KUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0h0bWwoZXhwcmVzc2lvbiBzdHJpbmcpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gQSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgKiAgICAgIHN0cmluZ3MgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gQSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgKiAgICAgIHN0cmluZ3MgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gQSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgKiAgICAgIHN0cmluZ3MgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSlMsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvLyBTaG9ydGhhbmQgZGVsZWdhdGlvbnMuXG4gICAgdmFyIHBhcnNlID0gc2NlLnBhcnNlQXMsXG4gICAgICAgIGdldFRydXN0ZWQgPSBzY2UuZ2V0VHJ1c3RlZCxcbiAgICAgICAgdHJ1c3RBcyA9IHNjZS50cnVzdEFzO1xuXG4gICAgZm9yRWFjaChTQ0VfQ09OVEVYVFMsIGZ1bmN0aW9uKGVudW1WYWx1ZSwgbmFtZSkge1xuICAgICAgdmFyIGxOYW1lID0gbG93ZXJjYXNlKG5hbWUpO1xuICAgICAgc2NlW3NuYWtlVG9DYW1lbCgncGFyc2VfYXNfJyArIGxOYW1lKV0gPSBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHJldHVybiBwYXJzZShlbnVtVmFsdWUsIGV4cHIpO1xuICAgICAgfTtcbiAgICAgIHNjZVtzbmFrZVRvQ2FtZWwoJ2dldF90cnVzdGVkXycgKyBsTmFtZSldID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGdldFRydXN0ZWQoZW51bVZhbHVlLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgc2NlW3NuYWtlVG9DYW1lbCgndHJ1c3RfYXNfJyArIGxOYW1lKV0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1c3RBcyhlbnVtVmFsdWUsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2NlO1xuICB9XTtcbn1cblxuLyogZXhwb3J0ZWQgJFNuaWZmZXJQcm92aWRlciAqL1xuXG4vKipcbiAqICEhISBUaGlzIGlzIGFuIHVuZG9jdW1lbnRlZCBcInByaXZhdGVcIiBzZXJ2aWNlICEhIVxuICpcbiAqIEBuYW1lICRzbmlmZmVyXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICogQHJlcXVpcmVzICRkb2N1bWVudFxuICogQHRoaXNcbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGhpc3RvcnkgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IGh0bWw1IGhpc3RvcnkgYXBpID9cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdHJhbnNpdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyB0cmFuc2l0aW9uIGV2ZW50cyA/XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGFuaW1hdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyBhbmltYXRpb24gZXZlbnRzID9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgaXMgdmVyeSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgdGVzdGluZyBicm93c2VyJ3MgZmVhdHVyZXMuXG4gKi9cbmZ1bmN0aW9uICRTbmlmZmVyUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQpIHtcbiAgICB2YXIgZXZlbnRTdXBwb3J0ID0ge30sXG4gICAgICAgIC8vIENocm9tZSBQYWNrYWdlZCBBcHBzIGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgYGhpc3RvcnkucHVzaFN0YXRlYC5cbiAgICAgICAgLy8gSWYgbm90IHNhbmRib3hlZCwgdGhleSBjYW4gYmUgZGV0ZWN0ZWQgYnkgdGhlIHByZXNlbmNlIG9mIGBjaHJvbWUuYXBwLnJ1bnRpbWVgXG4gICAgICAgIC8vIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9hcHBzL2FwaV9pbmRleCkuIElmIHNhbmRib3hlZCwgdGhleSBjYW4gYmUgZGV0ZWN0ZWQgYnlcbiAgICAgICAgLy8gdGhlIHByZXNlbmNlIG9mIGFuIGV4dGVuc2lvbiBydW50aW1lIElEIGFuZCB0aGUgYWJzZW5jZSBvZiBvdGhlciBDaHJvbWUgcnVudGltZSBBUElzXG4gICAgICAgIC8vIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9hcHBzL21hbmlmZXN0L3NhbmRib3gpLlxuICAgICAgICAvLyAoTlcuanMgYXBwcyBoYXZlIGFjY2VzcyB0byBDaHJvbWUgQVBJcywgYnV0IGRvIHN1cHBvcnQgYGhpc3RvcnlgLilcbiAgICAgICAgaXNOdyA9ICR3aW5kb3cubncgJiYgJHdpbmRvdy5udy5wcm9jZXNzLFxuICAgICAgICBpc0Nocm9tZVBhY2thZ2VkQXBwID1cbiAgICAgICAgICAgICFpc053ICYmXG4gICAgICAgICAgICAkd2luZG93LmNocm9tZSAmJlxuICAgICAgICAgICAgKCR3aW5kb3cuY2hyb21lLmFwcCAmJiAkd2luZG93LmNocm9tZS5hcHAucnVudGltZSB8fFxuICAgICAgICAgICAgICAgICEkd2luZG93LmNocm9tZS5hcHAgJiYgJHdpbmRvdy5jaHJvbWUucnVudGltZSAmJiAkd2luZG93LmNocm9tZS5ydW50aW1lLmlkKSxcbiAgICAgICAgaGFzSGlzdG9yeVB1c2hTdGF0ZSA9ICFpc0Nocm9tZVBhY2thZ2VkQXBwICYmICR3aW5kb3cuaGlzdG9yeSAmJiAkd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlLFxuICAgICAgICBhbmRyb2lkID1cbiAgICAgICAgICB0b0ludCgoL2FuZHJvaWQgKFxcZCspLy5leGVjKGxvd2VyY2FzZSgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCkpIHx8IFtdKVsxXSksXG4gICAgICAgIGJveGVlID0gL0JveGVlL2kudGVzdCgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCksXG4gICAgICAgIGRvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9LFxuICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuc3R5bGUsXG4gICAgICAgIHRyYW5zaXRpb25zID0gZmFsc2UsXG4gICAgICAgIGFuaW1hdGlvbnMgPSBmYWxzZTtcblxuICAgIGlmIChib2R5U3R5bGUpIHtcbiAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQgPDUsIEJsYWNrYmVycnkgQnJvd3NlciAxMCwgZGVmYXVsdCBDaHJvbWUgaW4gQW5kcm9pZCA0LjQueFxuICAgICAgLy8gTWVudGlvbmVkIGJyb3dzZXJzIG5lZWQgYSAtd2Via2l0LSBwcmVmaXggZm9yIHRyYW5zaXRpb25zICYgYW5pbWF0aW9ucy5cbiAgICAgIHRyYW5zaXRpb25zID0gISEoJ3RyYW5zaXRpb24nIGluIGJvZHlTdHlsZSB8fCAnd2Via2l0VHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKTtcbiAgICAgIGFuaW1hdGlvbnMgPSAhISgnYW5pbWF0aW9uJyBpbiBib2R5U3R5bGUgfHwgJ3dlYmtpdEFuaW1hdGlvbicgaW4gYm9keVN0eWxlKTtcbiAgICB9XG5cblxuICAgIHJldHVybiB7XG4gICAgICAvLyBBbmRyb2lkIGhhcyBoaXN0b3J5LnB1c2hTdGF0ZSwgYnV0IGl0IGRvZXMgbm90IHVwZGF0ZSBsb2NhdGlvbiBjb3JyZWN0bHlcbiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGF0IGFsbC5cbiAgICAgIC8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9kZXRhaWw/aWQ9MTc0NzFcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkwNFxuXG4gICAgICAvLyBvbGRlciB3ZWJraXQgYnJvd3NlciAoNTMzLjkpIG9uIEJveGVlIGJveCBoYXMgZXhhY3RseSB0aGUgc2FtZSBwcm9ibGVtIGFzIEFuZHJvaWQgaGFzXG4gICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhbHNvXG4gICAgICAvLyBXZSBhcmUgcHVycG9zZWZ1bGx5IHVzaW5nIGAhKGFuZHJvaWQgPCA0KWAgdG8gY292ZXIgdGhlIGNhc2Ugd2hlbiBgYW5kcm9pZGAgaXMgdW5kZWZpbmVkXG4gICAgICBoaXN0b3J5OiAhIShoYXNIaXN0b3J5UHVzaFN0YXRlICYmICEoYW5kcm9pZCA8IDQpICYmICFib3hlZSksXG4gICAgICBoYXNFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gICAgICAgIC8vIElFOSBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgaXQncyBzbyBmdWJhcmVkIHRoYXQgd2UgcmF0aGVyIHByZXRlbmQgdGhhdCBpdCBkb2Vzbid0IGhhdmVcbiAgICAgICAgLy8gaXQuIEluIHBhcnRpY3VsYXIgdGhlIGV2ZW50IGlzIG5vdCBmaXJlZCB3aGVuIGJhY2tzcGFjZSBvciBkZWxldGUga2V5IGFyZSBwcmVzc2VkIG9yXG4gICAgICAgIC8vIHdoZW4gY3V0IG9wZXJhdGlvbiBpcyBwZXJmb3JtZWQuXG4gICAgICAgIC8vIElFMTArIGltcGxlbWVudHMgJ2lucHV0JyBldmVudCBidXQgaXQgZXJyb25lb3VzbHkgZmlyZXMgdW5kZXIgdmFyaW91cyBzaXR1YXRpb25zLFxuICAgICAgICAvLyBlLmcuIHdoZW4gcGxhY2Vob2xkZXIgY2hhbmdlcywgb3IgYSBmb3JtIGlzIGZvY3VzZWQuXG4gICAgICAgIGlmIChldmVudCA9PT0gJ2lucHV0JyAmJiBtc2llKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50U3VwcG9ydFtldmVudF0pKSB7XG4gICAgICAgICAgdmFyIGRpdkVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGV2ZW50U3VwcG9ydFtldmVudF0gPSAnb24nICsgZXZlbnQgaW4gZGl2RWxtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50U3VwcG9ydFtldmVudF07XG4gICAgICB9LFxuICAgICAgY3NwOiBjc3AoKSxcbiAgICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9ucyxcbiAgICAgIGFuaW1hdGlvbnM6IGFuaW1hdGlvbnMsXG4gICAgICBhbmRyb2lkOiBhbmRyb2lkXG4gICAgfTtcbiAgfV07XG59XG5cbnZhciAkdGVtcGxhdGVSZXF1ZXN0TWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlZCB0byBjb25maWd1cmUgdGhlIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSB7QGxpbmsgJGh0dHB9IHNlcnZpY2Ugd2hlbiBtYWtpbmcgYSB0ZW1wbGF0ZSByZXF1ZXN0LlxuICpcbiAqIEZvciBleGFtcGxlLCBpdCBjYW4gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGUgXCJBY2NlcHRcIiBoZWFkZXIgdGhhdCBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIsIHdoZW5cbiAqIHJlcXVlc3RpbmcgYSB0ZW1wbGF0ZS5cbiAqL1xuZnVuY3Rpb24gJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyKCkge1xuXG4gIHZhciBodHRwT3B0aW9ucztcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkdGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIjaHR0cE9wdGlvbnNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byB0aGUge0BsaW5rICRodHRwfSBzZXJ2aWNlIHdoZW4gbWFraW5nIHRoZSByZXF1ZXN0LlxuICAgKiBZb3UgY2FuIHVzZSB0aGlzIHRvIG92ZXJyaWRlIG9wdGlvbnMgc3VjaCBhcyB0aGUgXCJBY2NlcHRcIiBoZWFkZXIgZm9yIHRlbXBsYXRlIHJlcXVlc3RzLlxuICAgKlxuICAgKiBUaGUge0BsaW5rICR0ZW1wbGF0ZVJlcXVlc3R9IHdpbGwgc2V0IHRoZSBgY2FjaGVgIGFuZCB0aGUgYHRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzIG9mIHRoZVxuICAgKiBvcHRpb25zIGlmIG5vdCBvdmVycmlkZGVuIGhlcmUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIGZvciB0aGUge0BsaW5rICRodHRwfSBvcHRpb25zLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHtAbGluayAkaHR0cH0gb3B0aW9ucyB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLlxuICAgKi9cbiAgdGhpcy5odHRwT3B0aW9ucyA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIGh0dHBPcHRpb25zID0gdmFsO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBodHRwT3B0aW9ucztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJHRlbXBsYXRlUmVxdWVzdFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGAkdGVtcGxhdGVSZXF1ZXN0YCBzZXJ2aWNlIHJ1bnMgc2VjdXJpdHkgY2hlY2tzIHRoZW4gZG93bmxvYWRzIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZSB1c2luZ1xuICAgKiBgJGh0dHBgIGFuZCwgdXBvbiBzdWNjZXNzLCBzdG9yZXMgdGhlIGNvbnRlbnRzIGluc2lkZSBvZiBgJHRlbXBsYXRlQ2FjaGVgLiBJZiB0aGUgSFRUUCByZXF1ZXN0XG4gICAqIGZhaWxzIG9yIHRoZSByZXNwb25zZSBkYXRhIG9mIHRoZSBIVFRQIHJlcXVlc3QgaXMgZW1wdHksIGEgYCRjb21waWxlYCBlcnJvciB3aWxsIGJlIHRocm93biAodGhlXG4gICAqIGV4Y2VwdGlvbiBjYW4gYmUgdGh3YXJ0ZWQgYnkgc2V0dGluZyB0aGUgMm5kIHBhcmFtZXRlciBvZiB0aGUgZnVuY3Rpb24gdG8gdHJ1ZSkuIE5vdGUgdGhhdCB0aGVcbiAgICogY29udGVudHMgb2YgYCR0ZW1wbGF0ZUNhY2hlYCBhcmUgdHJ1c3RlZCwgc28gdGhlIGNhbGwgdG8gYCRzY2UuZ2V0VHJ1c3RlZFVybCh0cGwpYCBpcyBvbWl0dGVkXG4gICAqIHdoZW4gYHRwbGAgaXMgb2YgdHlwZSBzdHJpbmcgYW5kIGAkdGVtcGxhdGVDYWNoZWAgaGFzIHRoZSBtYXRjaGluZyBlbnRyeS5cbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gcGFzcyBjdXN0b20gb3B0aW9ucyB0byB0aGUgYCRodHRwYCBzZXJ2aWNlLCBzdWNoIGFzIHNldHRpbmcgdGhlIEFjY2VwdCBoZWFkZXIgeW91XG4gICAqIGNhbiBjb25maWd1cmUgdGhpcyB2aWEge0BsaW5rICR0ZW1wbGF0ZVJlcXVlc3RQcm92aWRlciNodHRwT3B0aW9uc30uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfFRydXN0ZWRSZXNvdXJjZVVybH0gdHBsIFRoZSBIVFRQIHJlcXVlc3QgdGVtcGxhdGUgVVJMXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGlnbm9yZVJlcXVlc3RFcnJvciBXaGV0aGVyIG9yIG5vdCB0byBpZ25vcmUgdGhlIGV4Y2VwdGlvbiB3aGVuIHRoZSByZXF1ZXN0IGZhaWxzIG9yIHRoZSB0ZW1wbGF0ZSBpcyBlbXB0eVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgZm9yIHRoZSBIVFRQIHJlc3BvbnNlIGRhdGEgb2YgdGhlIGdpdmVuIFVSTC5cbiAgICpcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRvdGFsUGVuZGluZ1JlcXVlc3RzIHRvdGFsIGFtb3VudCBvZiBwZW5kaW5nIHRlbXBsYXRlIHJlcXVlc3RzIGJlaW5nIGRvd25sb2FkZWQuXG4gICAqL1xuICB0aGlzLiRnZXQgPSBbJyRleGNlcHRpb25IYW5kbGVyJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRodHRwJywgJyRxJywgJyRzY2UnLFxuICAgIGZ1bmN0aW9uKCRleGNlcHRpb25IYW5kbGVyLCAkdGVtcGxhdGVDYWNoZSwgJGh0dHAsICRxLCAkc2NlKSB7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RGbih0cGwsIGlnbm9yZVJlcXVlc3RFcnJvcikge1xuICAgICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMrKztcblxuICAgICAgICAvLyBXZSBjb25zaWRlciB0aGUgdGVtcGxhdGUgY2FjaGUgaG9sZHMgb25seSB0cnVzdGVkIHRlbXBsYXRlcywgc29cbiAgICAgICAgLy8gdGhlcmUncyBubyBuZWVkIHRvIGdvIHRocm91Z2ggd2hpdGVsaXN0aW5nIGFnYWluIGZvciBrZXlzIHRoYXQgYWxyZWFkeVxuICAgICAgICAvLyBhcmUgaW5jbHVkZWQgaW4gdGhlcmUuIFRoaXMgYWxzbyBtYWtlcyBBbmd1bGFyIGFjY2VwdCBhbnkgc2NyaXB0XG4gICAgICAgIC8vIGRpcmVjdGl2ZSwgbm8gbWF0dGVyIGl0cyBuYW1lLiBIb3dldmVyLCB3ZSBzdGlsbCBuZWVkIHRvIHVud3JhcCB0cnVzdGVkXG4gICAgICAgIC8vIHR5cGVzLlxuICAgICAgICBpZiAoIWlzU3RyaW5nKHRwbCkgfHwgaXNVbmRlZmluZWQoJHRlbXBsYXRlQ2FjaGUuZ2V0KHRwbCkpKSB7XG4gICAgICAgICAgdHBsID0gJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodHBsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFuc2Zvcm1SZXNwb25zZSA9ICRodHRwLmRlZmF1bHRzICYmICRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlO1xuXG4gICAgICAgIGlmIChpc0FycmF5KHRyYW5zZm9ybVJlc3BvbnNlKSkge1xuICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gdHJhbnNmb3JtUmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtZXIgIT09IGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNmb3JtUmVzcG9uc2UgPT09IGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0pIHtcbiAgICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHRwbCwgZXh0ZW5kKHtcbiAgICAgICAgICAgIGNhY2hlOiAkdGVtcGxhdGVDYWNoZSxcbiAgICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiB0cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICAgIH0sIGh0dHBPcHRpb25zKSlcbiAgICAgICAgICAuZmluYWxseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cy0tO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0cGwsIHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgfSwgaGFuZGxlRXJyb3IpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKHJlc3ApIHtcbiAgICAgICAgICBpZiAoIWlnbm9yZVJlcXVlc3RFcnJvcikge1xuICAgICAgICAgICAgcmVzcCA9ICR0ZW1wbGF0ZVJlcXVlc3RNaW5FcnIoJ3RwbG9hZCcsXG4gICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBsb2FkIHRlbXBsYXRlOiB7MH0gKEhUVFAgc3RhdHVzOiB7MX0gezJ9KScsXG4gICAgICAgICAgICAgICAgdHBsLCByZXNwLnN0YXR1cywgcmVzcC5zdGF0dXNUZXh0KTtcblxuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIocmVzcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZXNwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMgPSAwO1xuXG4gICAgICByZXR1cm4gaGFuZGxlUmVxdWVzdEZuO1xuICAgIH1cbiAgXTtcbn1cblxuLyoqIEB0aGlzICovXG5mdW5jdGlvbiAkJFRlc3RhYmlsaXR5UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckbG9jYXRpb24nLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJGxvY2F0aW9uKSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkdGVzdGFiaWxpdHlcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBwcml2YXRlICQkdGVzdGFiaWxpdHkgc2VydmljZSBwcm92aWRlcyBhIGNvbGxlY3Rpb24gb2YgbWV0aG9kcyBmb3IgdXNlIHdoZW4gZGVidWdnaW5nXG4gICAgICogb3IgYnkgYXV0b21hdGVkIHRlc3QgYW5kIGRlYnVnZ2luZyB0b29scy5cbiAgICAgKi9cbiAgICB2YXIgdGVzdGFiaWxpdHkgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZEJpbmRpbmdzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIGJvdW5kICh2aWEgbmctYmluZCBvciB7e319KVxuICAgICAqIHRvIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBiaW5kaW5nIGV4cHJlc3Npb24gdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcHRfZXhhY3RNYXRjaCBJZiB0cnVlLCBvbmx5IHJldHVybnMgZXhhY3QgbWF0Y2hlc1xuICAgICAqICAgICBmb3IgdGhlIGV4cHJlc3Npb24uIEZpbHRlcnMgYW5kIHdoaXRlc3BhY2UgYXJlIGlnbm9yZWQuXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkuZmluZEJpbmRpbmdzID0gZnVuY3Rpb24oZWxlbWVudCwgZXhwcmVzc2lvbiwgb3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgIHZhciBiaW5kaW5ncyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmctYmluZGluZycpO1xuICAgICAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgICAgIGZvckVhY2goYmluZGluZ3MsIGZ1bmN0aW9uKGJpbmRpbmcpIHtcbiAgICAgICAgdmFyIGRhdGFCaW5kaW5nID0gYW5ndWxhci5lbGVtZW50KGJpbmRpbmcpLmRhdGEoJyRiaW5kaW5nJyk7XG4gICAgICAgIGlmIChkYXRhQmluZGluZykge1xuICAgICAgICAgIGZvckVhY2goZGF0YUJpbmRpbmcsIGZ1bmN0aW9uKGJpbmRpbmdOYW1lKSB7XG4gICAgICAgICAgICBpZiAob3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgZXNjYXBlRm9yUmVnZXhwKGV4cHJlc3Npb24pICsgJyhcXFxcc3xcXFxcfHwkKScpO1xuICAgICAgICAgICAgICBpZiAobWF0Y2hlci50ZXN0KGJpbmRpbmdOYW1lKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChiaW5kaW5nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGJpbmRpbmdOYW1lLmluZGV4T2YoZXhwcmVzc2lvbikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGJpbmRpbmcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZE1vZGVsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB0d28td2F5IGZvdW5kIHZpYSBuZy1tb2RlbCB0b1xuICAgICAqIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBtb2RlbCBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRNb2RlbHMgPSBmdW5jdGlvbihlbGVtZW50LCBleHByZXNzaW9uLCBvcHRfZXhhY3RNYXRjaCkge1xuICAgICAgdmFyIHByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmdcXFxcOiddO1xuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwcmVmaXhlcy5sZW5ndGg7ICsrcCkge1xuICAgICAgICB2YXIgYXR0cmlidXRlRXF1YWxzID0gb3B0X2V4YWN0TWF0Y2ggPyAnPScgOiAnKj0nO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnWycgKyBwcmVmaXhlc1twXSArICdtb2RlbCcgKyBhdHRyaWJ1dGVFcXVhbHMgKyAnXCInICsgZXhwcmVzc2lvbiArICdcIl0nO1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZ2V0TG9jYXRpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IGZvciBnZXR0aW5nIHRoZSBsb2NhdGlvbiBpbiBhIGJyb3dzZXIgYWdub3N0aWMgd2F5LiBSZXR1cm5zXG4gICAgICogICAgIHRoZSBwYXRoLCBzZWFyY2gsIGFuZCBoYXNoLiAoZS5nLiAvcGF0aD9hPWIjaGFzaClcbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5nZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRsb2NhdGlvbi51cmwoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNzZXRMb2NhdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgZm9yIG5hdmlnYXRpbmcgdG8gYSBsb2NhdGlvbiB3aXRob3V0IGRvaW5nIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGxvY2F0aW9uIHVybCAocGF0aCwgc2VhcmNoIGFuZCBoYXNoLFxuICAgICAqICAgICBlLmcuIC9wYXRoP2E9YiNoYXNoKSB0byBnbyB0by5cbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgaWYgKHVybCAhPT0gJGxvY2F0aW9uLnVybCgpKSB7XG4gICAgICAgICRsb2NhdGlvbi51cmwodXJsKTtcbiAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjd2hlblN0YWJsZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2FsbHMgdGhlIGNhbGxiYWNrIHdoZW4gJHRpbWVvdXQgYW5kICRodHRwIHJlcXVlc3RzIGFyZSBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LndoZW5TdGFibGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyhjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIHJldHVybiB0ZXN0YWJpbGl0eTtcbiAgfV07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJFRpbWVvdXRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRxJywgJyQkcScsICckZXhjZXB0aW9uSGFuZGxlcicsXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkYnJvd3NlciwgICAkcSwgICAkJHEsICAgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcblxuICAgIHZhciBkZWZlcnJlZHMgPSB7fTtcblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgKiBAbmFtZSAkdGltZW91dFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQW5ndWxhcidzIHdyYXBwZXIgZm9yIGB3aW5kb3cuc2V0VGltZW91dGAuIFRoZSBgZm5gIGZ1bmN0aW9uIGlzIHdyYXBwZWQgaW50byBhIHRyeS9jYXRjaFxuICAgICAgKiBibG9jayBhbmQgZGVsZWdhdGVzIGFueSBleGNlcHRpb25zIHRvXG4gICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICpcbiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBvZiBjYWxsaW5nIGAkdGltZW91dGAgaXMgYSBwcm9taXNlLCB3aGljaCB3aWxsIGJlIHJlc29sdmVkIHdoZW5cbiAgICAgICogdGhlIGRlbGF5IGhhcyBwYXNzZWQgYW5kIHRoZSB0aW1lb3V0IGZ1bmN0aW9uLCBpZiBwcm92aWRlZCwgaXMgZXhlY3V0ZWQuXG4gICAgICAqXG4gICAgICAqIFRvIGNhbmNlbCBhIHRpbWVvdXQgcmVxdWVzdCwgY2FsbCBgJHRpbWVvdXQuY2FuY2VsKHByb21pc2UpYC5cbiAgICAgICpcbiAgICAgICogSW4gdGVzdHMgeW91IGNhbiB1c2Uge0BsaW5rIG5nTW9jay4kdGltZW91dCBgJHRpbWVvdXQuZmx1c2goKWB9IHRvXG4gICAgICAqIHN5bmNocm9ub3VzbHkgZmx1c2ggdGhlIHF1ZXVlIG9mIGRlZmVycmVkIGZ1bmN0aW9ucy5cbiAgICAgICpcbiAgICAgICogSWYgeW91IG9ubHkgd2FudCBhIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIHNvbWUgc3BlY2lmaWVkIGRlbGF5XG4gICAgICAqIHRoZW4geW91IGNhbiBjYWxsIGAkdGltZW91dGAgd2l0aG91dCB0aGUgYGZuYCBmdW5jdGlvbi5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpPX0gZm4gQSBmdW5jdGlvbiwgd2hvc2UgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWxheWVkLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBEZWxheSBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbnZva2VBcHBseT10cnVlXSBJZiBzZXQgdG8gYGZhbHNlYCBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlXG4gICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxuICAgICAgKiBAcGFyYW0gey4uLio9fSBQYXNzIGFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24uXG4gICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aGVuIHRoZSB0aW1lb3V0IGlzIHJlYWNoZWQuIFRoZSBwcm9taXNlXG4gICAgICAqICAgd2lsbCBiZSByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAqXG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVvdXQoZm4sIGRlbGF5LCBpbnZva2VBcHBseSkge1xuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICBpbnZva2VBcHBseSA9IGRlbGF5O1xuICAgICAgICBkZWxheSA9IGZuO1xuICAgICAgICBmbiA9IG5vb3A7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcmdzID0gc2xpY2VBcmdzKGFyZ3VtZW50cywgMyksXG4gICAgICAgICAgc2tpcEFwcGx5ID0gKGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5KSxcbiAgICAgICAgICBkZWZlcnJlZCA9IChza2lwQXBwbHkgPyAkJHEgOiAkcSkuZGVmZXIoKSxcbiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICB0aW1lb3V0SWQ7XG5cbiAgICAgIHRpbWVvdXRJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZm4uYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpO1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgIH0sIGRlbGF5KTtcblxuICAgICAgcHJvbWlzZS4kJHRpbWVvdXRJZCA9IHRpbWVvdXRJZDtcbiAgICAgIGRlZmVycmVkc1t0aW1lb3V0SWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICR0aW1lb3V0I2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuIEFzIGEgcmVzdWx0IG9mIHRoaXMsIHRoZSBwcm9taXNlIHdpbGwgYmVcbiAgICAgICogcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtQcm9taXNlPX0gcHJvbWlzZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJHRpbWVvdXRgIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgICAgKiAgIGNhbmNlbGVkLlxuICAgICAgKi9cbiAgICB0aW1lb3V0LmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7XG4gICAgICAgIC8vIFRpbWVvdXQgY2FuY2VscyBzaG91bGQgbm90IHJlcG9ydCBhbiB1bmhhbmRsZWQgcHJvbWlzZS5cbiAgICAgICAgbWFya1FFeGNlcHRpb25IYW5kbGVkKGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXS5wcm9taXNlKTtcbiAgICAgICAgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdLnJlamVjdCgnY2FuY2VsZWQnKTtcbiAgICAgICAgZGVsZXRlIGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXTtcbiAgICAgICAgcmV0dXJuICRicm93c2VyLmRlZmVyLmNhbmNlbChwcm9taXNlLiQkdGltZW91dElkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRpbWVvdXQ7XG4gIH1dO1xufVxuXG4vLyBOT1RFOiAgVGhlIHVzYWdlIG9mIHdpbmRvdyBhbmQgZG9jdW1lbnQgaW5zdGVhZCBvZiAkd2luZG93IGFuZCAkZG9jdW1lbnQgaGVyZSBpc1xuLy8gZGVsaWJlcmF0ZS4gIFRoaXMgc2VydmljZSBkZXBlbmRzIG9uIHRoZSBzcGVjaWZpYyBiZWhhdmlvciBvZiBhbmNob3Igbm9kZXMgY3JlYXRlZCBieSB0aGVcbi8vIGJyb3dzZXIgKHJlc29sdmluZyBhbmQgcGFyc2luZyBVUkxzKSB0aGF0IGlzIHVubGlrZWx5IHRvIGJlIHByb3ZpZGVkIGJ5IG1vY2sgb2JqZWN0cyBhbmRcbi8vIGNhdXNlIHVzIHRvIGJyZWFrIHRlc3RzLiAgSW4gYWRkaXRpb24sIHdoZW4gdGhlIGJyb3dzZXIgcmVzb2x2ZXMgYSBVUkwgZm9yIFhIUiwgaXRcbi8vIGRvZXNuJ3Qga25vdyBhYm91dCBtb2NrZWQgbG9jYXRpb25zIGFuZCByZXNvbHZlcyBVUkxzIHRvIHRoZSByZWFsIGRvY3VtZW50IC0gd2hpY2ggaXNcbi8vIGV4YWN0bHkgdGhlIGJlaGF2aW9yIG5lZWRlZCBoZXJlLiAgVGhlcmUgaXMgbGl0dGxlIHZhbHVlIGlzIG1vY2tpbmcgdGhlc2Ugb3V0IGZvciB0aGlzXG4vLyBzZXJ2aWNlLlxudmFyIHVybFBhcnNpbmdOb2RlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbnZhciBvcmlnaW5VcmwgPSB1cmxSZXNvbHZlKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuXG4vKipcbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBOb3RlcyBmb3Igbm9uLUlFIGJyb3dzZXJzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBc3NpZ25pbmcgYSBVUkwgdG8gdGhlIGhyZWYgcHJvcGVydHkgb2YgYW4gYW5jaG9yIERPTSBub2RlLCBldmVuIG9uZSBhdHRhY2hlZCB0byB0aGUgRE9NLFxuICogcmVzdWx0cyBib3RoIGluIHRoZSBub3JtYWxpemluZyBhbmQgcGFyc2luZyBvZiB0aGUgVVJMLiAgTm9ybWFsaXppbmcgbWVhbnMgdGhhdCBhIHJlbGF0aXZlXG4gKiBVUkwgd2lsbCBiZSByZXNvbHZlZCBpbnRvIGFuIGFic29sdXRlIFVSTCBpbiB0aGUgY29udGV4dCBvZiB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKiBQYXJzaW5nIG1lYW5zIHRoYXQgdGhlIGFuY2hvciBub2RlJ3MgaG9zdCwgaG9zdG5hbWUsIHByb3RvY29sLCBwb3J0LCBwYXRobmFtZSBhbmQgcmVsYXRlZFxuICogcHJvcGVydGllcyBhcmUgYWxsIHBvcHVsYXRlZCB0byByZWZsZWN0IHRoZSBub3JtYWxpemVkIFVSTC4gIFRoaXMgYXBwcm9hY2ggaGFzIHdpZGVcbiAqIGNvbXBhdGliaWxpdHkgLSBTYWZhcmkgMSssIE1vemlsbGEgMSsgZXRjLiAgU2VlXG4gKiBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWxcbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBOb3RlcyBmb3IgSUVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogSUUgPD0gMTAgbm9ybWFsaXplcyB0aGUgVVJMIHdoZW4gYXNzaWduZWQgdG8gdGhlIGFuY2hvciBub2RlIHNpbWlsYXIgdG8gdGhlIG90aGVyXG4gKiBicm93c2Vycy4gIEhvd2V2ZXIsIHRoZSBwYXJzZWQgY29tcG9uZW50cyB3aWxsIG5vdCBiZSBzZXQgaWYgdGhlIFVSTCBhc3NpZ25lZCBkaWQgbm90IHNwZWNpZnlcbiAqIHRoZW0uICAoZS5nLiBpZiB5b3UgYXNzaWduIGEuaHJlZiA9IFwiZm9vXCIsIHRoZW4gYS5wcm90b2NvbCwgYS5ob3N0LCBldGMuIHdpbGwgYmUgZW1wdHkuKSAgV2VcbiAqIHdvcmsgYXJvdW5kIHRoYXQgYnkgcGVyZm9ybWluZyB0aGUgcGFyc2luZyBpbiBhIDJuZCBzdGVwIGJ5IHRha2luZyBhIHByZXZpb3VzbHkgbm9ybWFsaXplZFxuICogVVJMIChlLmcuIGJ5IGFzc2lnbmluZyB0byBhLmhyZWYpIGFuZCBhc3NpZ25pbmcgaXQgYS5ocmVmIGFnYWluLiAgVGhpcyBjb3JyZWN0bHkgcG9wdWxhdGVzIHRoZVxuICogcHJvcGVydGllcyBzdWNoIGFzIHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCwgZXRjLlxuICpcbiAqIFJlZmVyZW5jZXM6XG4gKiAgIGh0dHA6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxBbmNob3JFbGVtZW50XG4gKiAgIGh0dHA6Ly93d3cuYXB0YW5hLmNvbS9yZWZlcmVuY2UvaHRtbC9hcGkvSFRNTEFuY2hvckVsZW1lbnQuaHRtbFxuICogICBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzI5MDJcbiAqICAgaHR0cDovL2phbWVzLnBhZG9sc2V5LmNvbS9qYXZhc2NyaXB0L3BhcnNpbmctdXJscy13aXRoLXRoZS1kb20vXG4gKlxuICogQGtpbmQgZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWQuXG4gKiBAZGVzY3JpcHRpb24gTm9ybWFsaXplcyBhbmQgcGFyc2VzIGEgVVJMLlxuICogQHJldHVybnMge29iamVjdH0gUmV0dXJucyB0aGUgbm9ybWFsaXplZCBVUkwgYXMgYSBkaWN0aW9uYXJ5LlxuICpcbiAqICAgfCBtZW1iZXIgbmFtZSAgIHwgRGVzY3JpcHRpb24gICAgfFxuICogICB8LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18XG4gKiAgIHwgaHJlZiAgICAgICAgICB8IEEgbm9ybWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBwcm92aWRlZCBVUkwgaWYgaXQgd2FzIG5vdCBhbiBhYnNvbHV0ZSBVUkwgfFxuICogICB8IHByb3RvY29sICAgICAgfCBUaGUgcHJvdG9jb2wgaW5jbHVkaW5nIHRoZSB0cmFpbGluZyBjb2xvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgfCBob3N0ICAgICAgICAgIHwgVGhlIGhvc3QgYW5kIHBvcnQgKGlmIHRoZSBwb3J0IGlzIG5vbi1kZWZhdWx0KSBvZiB0aGUgbm9ybWFsaXplZFVybCAgICB8XG4gKiAgIHwgc2VhcmNoICAgICAgICB8IFRoZSBzZWFyY2ggcGFyYW1zLCBtaW51cyB0aGUgcXVlc3Rpb24gbWFyayAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICB8IGhhc2ggICAgICAgICAgfCBUaGUgaGFzaCBzdHJpbmcsIG1pbnVzIHRoZSBoYXNoIHN5bWJvbFxuICogICB8IGhvc3RuYW1lICAgICAgfCBUaGUgaG9zdG5hbWVcbiAqICAgfCBwb3J0ICAgICAgICAgIHwgVGhlIHBvcnQsIHdpdGhvdXQgXCI6XCJcbiAqICAgfCBwYXRobmFtZSAgICAgIHwgVGhlIHBhdGhuYW1lLCBiZWdpbm5pbmcgd2l0aCBcIi9cIlxuICpcbiAqL1xuZnVuY3Rpb24gdXJsUmVzb2x2ZSh1cmwpIHtcbiAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gIGlmIChtc2llKSB7XG4gICAgLy8gTm9ybWFsaXplIGJlZm9yZSBwYXJzZS4gIFJlZmVyIEltcGxlbWVudGF0aW9uIE5vdGVzIG9uIHdoeSB0aGlzIGlzXG4gICAgLy8gZG9uZSBpbiB0d28gc3RlcHMgb24gSUUuXG4gICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gIH1cblxuICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gIHJldHVybiB7XG4gICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJylcbiAgICAgID8gdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIDogJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgfTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIHJlcXVlc3QgVVJMIGFuZCBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgc2FtZS1vcmlnaW4gcmVxdWVzdCBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZXF1ZXN0VXJsIFRoZSB1cmwgb2YgdGhlIHJlcXVlc3QgYXMgYSBzdHJpbmcgdGhhdCB3aWxsIGJlIHJlc29sdmVkXG4gKiBvciBhIHBhcnNlZCBVUkwgb2JqZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgZm9yIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHVybElzU2FtZU9yaWdpbihyZXF1ZXN0VXJsKSB7XG4gIHZhciBwYXJzZWQgPSAoaXNTdHJpbmcocmVxdWVzdFVybCkpID8gdXJsUmVzb2x2ZShyZXF1ZXN0VXJsKSA6IHJlcXVlc3RVcmw7XG4gIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VcmwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVXJsLmhvc3QpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkd2luZG93XG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSByZWZlcmVuY2UgdG8gdGhlIGJyb3dzZXIncyBgd2luZG93YCBvYmplY3QuIFdoaWxlIGB3aW5kb3dgXG4gKiBpcyBnbG9iYWxseSBhdmFpbGFibGUgaW4gSmF2YVNjcmlwdCwgaXQgY2F1c2VzIHRlc3RhYmlsaXR5IHByb2JsZW1zLCBiZWNhdXNlXG4gKiBpdCBpcyBhIGdsb2JhbCB2YXJpYWJsZS4gSW4gYW5ndWxhciB3ZSBhbHdheXMgcmVmZXIgdG8gaXQgdGhyb3VnaCB0aGVcbiAqIGAkd2luZG93YCBzZXJ2aWNlLCBzbyBpdCBtYXkgYmUgb3ZlcnJpZGRlbiwgcmVtb3ZlZCBvciBtb2NrZWQgZm9yIHRlc3RpbmcuXG4gKlxuICogRXhwcmVzc2lvbnMsIGxpa2UgdGhlIG9uZSBkZWZpbmVkIGZvciB0aGUgYG5nQ2xpY2tgIGRpcmVjdGl2ZSBpbiB0aGUgZXhhbXBsZVxuICogYmVsb3csIGFyZSBldmFsdWF0ZWQgd2l0aCByZXNwZWN0IHRvIHRoZSBjdXJyZW50IHNjb3BlLiAgVGhlcmVmb3JlLCB0aGVyZSBpc1xuICogbm8gcmlzayBvZiBpbmFkdmVydGVudGx5IGNvZGluZyBpbiBhIGRlcGVuZGVuY3kgb24gYSBnbG9iYWwgdmFsdWUgaW4gc3VjaCBhblxuICogZXhwcmVzc2lvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwid2luZG93RXhhbXBsZVwiIG5hbWU9XCJ3aW5kb3ctc2VydmljZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnd2luZG93RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckd2luZG93JywgZnVuY3Rpb24oJHNjb3BlLCAkd2luZG93KSB7XG4gICAgICAgICAgICAgJHNjb3BlLmdyZWV0aW5nID0gJ0hlbGxvLCBXb3JsZCEnO1xuICAgICAgICAgICAgICRzY29wZS5kb0dyZWV0aW5nID0gZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZ3JlZXRpbmcpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJncmVldGluZ1wiIGFyaWEtbGFiZWw9XCJncmVldGluZ1wiIC8+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZG9HcmVldGluZyhncmVldGluZylcIj5BTEVSVDwvYnV0dG9uPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgZGlzcGxheSB0aGUgZ3JlZXRpbmcgaW4gdGhlIGlucHV0IGJveCcsIGZ1bmN0aW9uKCkge1xuICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2dyZWV0aW5nJykpLnNlbmRLZXlzKCdIZWxsbywgRTJFIFRlc3RzJyk7XG4gICAgICAgLy8gSWYgd2UgY2xpY2sgdGhlIGJ1dHRvbiBpdCB3aWxsIGJsb2NrIHRoZSB0ZXN0IHJ1bm5lclxuICAgICAgIC8vIGVsZW1lbnQoJzpidXR0b24nKS5jbGljaygpO1xuICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJFdpbmRvd1Byb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSB2YWx1ZUZuKHdpbmRvdyk7XG59XG5cbi8qKlxuICogQG5hbWUgJCRjb29raWVSZWFkZXJcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgaXMgYSBwcml2YXRlIHNlcnZpY2UgZm9yIHJlYWRpbmcgY29va2llcyB1c2VkIGJ5ICRodHRwIGFuZCBuZ0Nvb2tpZXNcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGEga2V5L3ZhbHVlIG1hcCBvZiB0aGUgY3VycmVudCBjb29raWVzXG4gKi9cbmZ1bmN0aW9uICQkQ29va2llUmVhZGVyKCRkb2N1bWVudCkge1xuICB2YXIgcmF3RG9jdW1lbnQgPSAkZG9jdW1lbnRbMF0gfHwge307XG4gIHZhciBsYXN0Q29va2llcyA9IHt9O1xuICB2YXIgbGFzdENvb2tpZVN0cmluZyA9ICcnO1xuXG4gIGZ1bmN0aW9uIHNhZmVHZXRDb29raWUocmF3RG9jdW1lbnQpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHJhd0RvY3VtZW50LmNvb2tpZSB8fCAnJztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2FmZURlY29kZVVSSUNvbXBvbmVudChzdHIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb29raWVBcnJheSwgY29va2llLCBpLCBpbmRleCwgbmFtZTtcbiAgICB2YXIgY3VycmVudENvb2tpZVN0cmluZyA9IHNhZmVHZXRDb29raWUocmF3RG9jdW1lbnQpO1xuXG4gICAgaWYgKGN1cnJlbnRDb29raWVTdHJpbmcgIT09IGxhc3RDb29raWVTdHJpbmcpIHtcbiAgICAgIGxhc3RDb29raWVTdHJpbmcgPSBjdXJyZW50Q29va2llU3RyaW5nO1xuICAgICAgY29va2llQXJyYXkgPSBsYXN0Q29va2llU3RyaW5nLnNwbGl0KCc7ICcpO1xuICAgICAgbGFzdENvb2tpZXMgPSB7fTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGNvb2tpZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvb2tpZSA9IGNvb2tpZUFycmF5W2ldO1xuICAgICAgICBpbmRleCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7XG4gICAgICAgIGlmIChpbmRleCA+IDApIHsgLy9pZ25vcmUgbmFtZWxlc3MgY29va2llc1xuICAgICAgICAgIG5hbWUgPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoMCwgaW5kZXgpKTtcbiAgICAgICAgICAvLyB0aGUgZmlyc3QgdmFsdWUgdGhhdCBpcyBzZWVuIGZvciBhIGNvb2tpZSBpcyB0aGUgbW9zdFxuICAgICAgICAgIC8vIHNwZWNpZmljIG9uZS4gIHZhbHVlcyBmb3IgdGhlIHNhbWUgY29va2llIG5hbWUgdGhhdFxuICAgICAgICAgIC8vIGZvbGxvdyBhcmUgZm9yIGxlc3Mgc3BlY2lmaWMgcGF0aHMuXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGxhc3RDb29raWVzW25hbWVdKSkge1xuICAgICAgICAgICAgbGFzdENvb2tpZXNbbmFtZV0gPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoaW5kZXggKyAxKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsYXN0Q29va2llcztcbiAgfTtcbn1cblxuJCRDb29raWVSZWFkZXIuJGluamVjdCA9IFsnJGRvY3VtZW50J107XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRDb29raWVSZWFkZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gJCRDb29raWVSZWFkZXI7XG59XG5cbi8qIGdsb2JhbCBjdXJyZW5jeUZpbHRlcjogdHJ1ZSxcbiBkYXRlRmlsdGVyOiB0cnVlLFxuIGZpbHRlckZpbHRlcjogdHJ1ZSxcbiBqc29uRmlsdGVyOiB0cnVlLFxuIGxpbWl0VG9GaWx0ZXI6IHRydWUsXG4gbG93ZXJjYXNlRmlsdGVyOiB0cnVlLFxuIG51bWJlckZpbHRlcjogdHJ1ZSxcbiBvcmRlckJ5RmlsdGVyOiB0cnVlLFxuIHVwcGVyY2FzZUZpbHRlcjogdHJ1ZSxcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGZpbHRlclByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBGaWx0ZXJzIGFyZSBqdXN0IGZ1bmN0aW9ucyB3aGljaCB0cmFuc2Zvcm0gaW5wdXQgdG8gYW4gb3V0cHV0LiBIb3dldmVyIGZpbHRlcnMgbmVlZCB0byBiZVxuICogRGVwZW5kZW5jeSBJbmplY3RlZC4gVG8gYWNoaWV2ZSB0aGlzIGEgZmlsdGVyIGRlZmluaXRpb24gY29uc2lzdHMgb2YgYSBmYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIGlzXG4gKiBhbm5vdGF0ZWQgd2l0aCBkZXBlbmRlbmNpZXMgYW5kIGlzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyBhIGZpbHRlciBmdW5jdGlvbi5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIEZpbHRlciBuYW1lcyBtdXN0IGJlIHZhbGlkIGFuZ3VsYXIge0BsaW5rIGV4cHJlc3Npb259IGlkZW50aWZpZXJzLCBzdWNoIGFzIGB1cHBlcmNhc2VgIG9yIGBvcmRlckJ5YC5cbiAqIE5hbWVzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzLCBzdWNoIGFzIGh5cGhlbnMgYW5kIGRvdHMsIGFyZSBub3QgYWxsb3dlZC4gSWYgeW91IHdpc2ggdG8gbmFtZXNwYWNlXG4gKiB5b3VyIGZpbHRlcnMsIHRoZW4geW91IGNhbiB1c2UgY2FwaXRhbGl6YXRpb24gKGBteWFwcFN1YnNlY3Rpb25GaWx0ZXJ4YCkgb3IgdW5kZXJzY29yZXNcbiAqIChgbXlhcHBfc3Vic2VjdGlvbl9maWx0ZXJ4YCkuXG4gKiA8L2Rpdj5cbiAqXG4gKiBgYGBqc1xuICogICAvLyBGaWx0ZXIgcmVnaXN0cmF0aW9uXG4gKiAgIGZ1bmN0aW9uIE15TW9kdWxlKCRwcm92aWRlLCAkZmlsdGVyUHJvdmlkZXIpIHtcbiAqICAgICAvLyBjcmVhdGUgYSBzZXJ2aWNlIHRvIGRlbW9uc3RyYXRlIGluamVjdGlvbiAobm90IGFsd2F5cyBuZWVkZWQpXG4gKiAgICAgJHByb3ZpZGUudmFsdWUoJ2dyZWV0JywgZnVuY3Rpb24obmFtZSl7XG4gKiAgICAgICByZXR1cm4gJ0hlbGxvICcgKyBuYW1lICsgJyEnO1xuICogICAgIH0pO1xuICpcbiAqICAgICAvLyByZWdpc3RlciBhIGZpbHRlciBmYWN0b3J5IHdoaWNoIHVzZXMgdGhlXG4gKiAgICAgLy8gZ3JlZXQgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBESS5cbiAqICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ2dyZWV0JywgZnVuY3Rpb24oZ3JlZXQpe1xuICogICAgICAgLy8gcmV0dXJuIHRoZSBmaWx0ZXIgZnVuY3Rpb24gd2hpY2ggdXNlcyB0aGUgZ3JlZXQgc2VydmljZVxuICogICAgICAgLy8gdG8gZ2VuZXJhdGUgc2FsdXRhdGlvblxuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHtcbiAqICAgICAgICAgLy8gZmlsdGVycyBuZWVkIHRvIGJlIGZvcmdpdmluZyBzbyBjaGVjayBpbnB1dCB2YWxpZGl0eVxuICogICAgICAgICByZXR1cm4gdGV4dCAmJiBncmVldCh0ZXh0KSB8fCB0ZXh0O1xuICogICAgICAgfTtcbiAqICAgICB9KTtcbiAqICAgfVxuICogYGBgXG4gKlxuICogVGhlIGZpbHRlciBmdW5jdGlvbiBpcyByZWdpc3RlcmVkIHdpdGggdGhlIGAkaW5qZWN0b3JgIHVuZGVyIHRoZSBmaWx0ZXIgbmFtZSBzdWZmaXggd2l0aFxuICogYEZpbHRlcmAuXG4gKlxuICogYGBganNcbiAqICAgaXQoJ3Nob3VsZCBiZSB0aGUgc2FtZSBpbnN0YW5jZScsIGluamVjdChcbiAqICAgICBmdW5jdGlvbigkZmlsdGVyUHJvdmlkZXIpIHtcbiAqICAgICAgICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcigncmV2ZXJzZScsIGZ1bmN0aW9uKCl7XG4gKiAgICAgICAgIHJldHVybiAuLi47XG4gKiAgICAgICB9KTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKCRmaWx0ZXIsIHJldmVyc2VGaWx0ZXIpIHtcbiAqICAgICAgIGV4cGVjdCgkZmlsdGVyKCdyZXZlcnNlJykpLnRvQmUocmV2ZXJzZUZpbHRlcik7XG4gKiAgICAgfSk7XG4gKiBgYGBcbiAqXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgaG93IGFuZ3VsYXIgZmlsdGVycyB3b3JrLCBhbmQgaG93IHRvIGNyZWF0ZSB5b3VyIG93biBmaWx0ZXJzLCBzZWVcbiAqIHtAbGluayBndWlkZS9maWx0ZXIgRmlsdGVyc30gaW4gdGhlIEFuZ3VsYXIgRGV2ZWxvcGVyIEd1aWRlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRmaWx0ZXJcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZpbHRlcnMgYXJlIHVzZWQgZm9yIGZvcm1hdHRpbmcgZGF0YSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIuXG4gKlxuICogVGhleSBjYW4gYmUgdXNlZCBpbiB2aWV3IHRlbXBsYXRlcywgY29udHJvbGxlcnMgb3Igc2VydmljZXMuQW5ndWxhciBjb21lc1xuICogd2l0aCBhIGNvbGxlY3Rpb24gb2YgW2J1aWx0LWluIGZpbHRlcnNdKGFwaS9uZy9maWx0ZXIpLCBidXQgaXQgaXMgZWFzeSB0b1xuICogZGVmaW5lIHlvdXIgb3duIGFzIHdlbGwuXG4gKlxuICogVGhlIGdlbmVyYWwgc3ludGF4IGluIHRlbXBsYXRlcyBpcyBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYGh0bWxcbiAqIHt7IGV4cHJlc3Npb24gW3wgZmlsdGVyX25hbWVbOnBhcmFtZXRlcl92YWx1ZV0gLi4uIF0gfX1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiB0byByZXRyaWV2ZVxuICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBmaWx0ZXIgZnVuY3Rpb25cbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwiJGZpbHRlclwiIG1vZHVsZT1cImZpbHRlckV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNYWluQ3RybFwiPlxuICAgICAgICA8aDM+e3sgb3JpZ2luYWxUZXh0IH19PC9oMz5cbiAgICAgICAgPGgzPnt7IGZpbHRlcmVkVGV4dCB9fTwvaDM+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnZmlsdGVyRXhhbXBsZScsIFtdKVxuICAgICAgLmNvbnRyb2xsZXIoJ01haW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkZmlsdGVyKSB7XG4gICAgICAgICRzY29wZS5vcmlnaW5hbFRleHQgPSAnaGVsbG8nO1xuICAgICAgICAkc2NvcGUuZmlsdGVyZWRUZXh0ID0gJGZpbHRlcigndXBwZXJjYXNlJykoJHNjb3BlLm9yaWdpbmFsVGV4dCk7XG4gICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAqL1xuJEZpbHRlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJ107XG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICRGaWx0ZXJQcm92aWRlcigkcHJvdmlkZSkge1xuICB2YXIgc3VmZml4ID0gJ0ZpbHRlcic7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24sIG9yIGFuIG9iamVjdCBtYXAgb2YgZmlsdGVycyB3aGVyZVxuICAgKiAgICB0aGUga2V5cyBhcmUgdGhlIGZpbHRlciBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZpbHRlciBmYWN0b3JpZXMuXG4gICAqXG4gICAqICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICAgICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gICAqICAgIE5hbWVzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzLCBzdWNoIGFzIGh5cGhlbnMgYW5kIGRvdHMsIGFyZSBub3QgYWxsb3dlZC4gSWYgeW91IHdpc2ggdG8gbmFtZXNwYWNlXG4gICAqICAgIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICAgKiAgICAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICAgKiAgICA8L2Rpdj5cbiAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBhIHN0cmluZywgYSBmYWN0b3J5IGZ1bmN0aW9uIGZvciB0aGUgZmlsdGVyIHRvIGJlIHJlZ2lzdGVyZWQuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJlZ2lzdGVyZWQgZmlsdGVyIGluc3RhbmNlLCBvciBpZiBhIG1hcCBvZiBmaWx0ZXJzIHdhcyBwcm92aWRlZCB0aGVuIGEgbWFwXG4gICAqICAgIG9mIHRoZSByZWdpc3RlcmVkIGZpbHRlciBpbnN0YW5jZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZWdpc3RlcihuYW1lLCBmYWN0b3J5KSB7XG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICB2YXIgZmlsdGVycyA9IHt9O1xuICAgICAgZm9yRWFjaChuYW1lLCBmdW5jdGlvbihmaWx0ZXIsIGtleSkge1xuICAgICAgICBmaWx0ZXJzW2tleV0gPSByZWdpc3RlcihrZXksIGZpbHRlcik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgc3VmZml4LCBmYWN0b3J5KTtcbiAgICB9XG4gIH1cbiAgdGhpcy5yZWdpc3RlciA9IHJlZ2lzdGVyO1xuXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBzdWZmaXgpO1xuICAgIH07XG4gIH1dO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAvKiBnbG9iYWxcbiAgICBjdXJyZW5jeUZpbHRlcjogZmFsc2UsXG4gICAgZGF0ZUZpbHRlcjogZmFsc2UsXG4gICAgZmlsdGVyRmlsdGVyOiBmYWxzZSxcbiAgICBqc29uRmlsdGVyOiBmYWxzZSxcbiAgICBsaW1pdFRvRmlsdGVyOiBmYWxzZSxcbiAgICBsb3dlcmNhc2VGaWx0ZXI6IGZhbHNlLFxuICAgIG51bWJlckZpbHRlcjogZmFsc2UsXG4gICAgb3JkZXJCeUZpbHRlcjogZmFsc2UsXG4gICAgdXBwZXJjYXNlRmlsdGVyOiBmYWxzZVxuICAqL1xuXG4gIHJlZ2lzdGVyKCdjdXJyZW5jeScsIGN1cnJlbmN5RmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2RhdGUnLCBkYXRlRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2ZpbHRlcicsIGZpbHRlckZpbHRlcik7XG4gIHJlZ2lzdGVyKCdqc29uJywganNvbkZpbHRlcik7XG4gIHJlZ2lzdGVyKCdsaW1pdFRvJywgbGltaXRUb0ZpbHRlcik7XG4gIHJlZ2lzdGVyKCdsb3dlcmNhc2UnLCBsb3dlcmNhc2VGaWx0ZXIpO1xuICByZWdpc3RlcignbnVtYmVyJywgbnVtYmVyRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ29yZGVyQnknLCBvcmRlckJ5RmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ3VwcGVyY2FzZScsIHVwcGVyY2FzZUZpbHRlcik7XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZmlsdGVyXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2VsZWN0cyBhIHN1YnNldCBvZiBpdGVtcyBmcm9tIGBhcnJheWAgYW5kIHJldHVybnMgaXQgYXMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvdXJjZSBhcnJheS5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAgICoqTm90ZSoqOiBJZiB0aGUgYXJyYXkgY29udGFpbnMgb2JqZWN0cyB0aGF0IHJlZmVyZW5jZSB0aGVtc2VsdmVzLCBmaWx0ZXJpbmcgaXMgbm90IHBvc3NpYmxlLlxuICogPC9kaXY+XG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R8ZnVuY3Rpb24oKX0gZXhwcmVzc2lvbiBUaGUgcHJlZGljYXRlIHRvIGJlIHVzZWQgZm9yIHNlbGVjdGluZyBpdGVtcyBmcm9tXG4gKiAgIGBhcnJheWAuXG4gKlxuICogICBDYW4gYmUgb25lIG9mOlxuICpcbiAqICAgLSBgc3RyaW5nYDogVGhlIHN0cmluZyBpcyB1c2VkIGZvciBtYXRjaGluZyBhZ2FpbnN0IHRoZSBjb250ZW50cyBvZiB0aGUgYGFycmF5YC4gQWxsIHN0cmluZ3Mgb3JcbiAqICAgICBvYmplY3RzIHdpdGggc3RyaW5nIHByb3BlcnRpZXMgaW4gYGFycmF5YCB0aGF0IG1hdGNoIHRoaXMgc3RyaW5nIHdpbGwgYmUgcmV0dXJuZWQuIFRoaXMgYWxzb1xuICogICAgIGFwcGxpZXMgdG8gbmVzdGVkIG9iamVjdCBwcm9wZXJ0aWVzLlxuICogICAgIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nIHRoZSBzdHJpbmcgd2l0aCBgIWAuXG4gKlxuICogICAtIGBPYmplY3RgOiBBIHBhdHRlcm4gb2JqZWN0IGNhbiBiZSB1c2VkIHRvIGZpbHRlciBzcGVjaWZpYyBwcm9wZXJ0aWVzIG9uIG9iamVjdHMgY29udGFpbmVkXG4gKiAgICAgYnkgYGFycmF5YC4gRm9yIGV4YW1wbGUgYHtuYW1lOlwiTVwiLCBwaG9uZTpcIjFcIn1gIHByZWRpY2F0ZSB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBpdGVtc1xuICogICAgIHdoaWNoIGhhdmUgcHJvcGVydHkgYG5hbWVgIGNvbnRhaW5pbmcgXCJNXCIgYW5kIHByb3BlcnR5IGBwaG9uZWAgY29udGFpbmluZyBcIjFcIi4gQSBzcGVjaWFsXG4gKiAgICAgcHJvcGVydHkgbmFtZSAoYCRgIGJ5IGRlZmF1bHQpIGNhbiBiZSB1c2VkIChlLmcuIGFzIGluIGB7JDogXCJ0ZXh0XCJ9YCkgdG8gYWNjZXB0IGEgbWF0Y2hcbiAqICAgICBhZ2FpbnN0IGFueSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IG9yIGl0cyBuZXN0ZWQgb2JqZWN0IHByb3BlcnRpZXMuIFRoYXQncyBlcXVpdmFsZW50IHRvIHRoZVxuICogICAgIHNpbXBsZSBzdWJzdHJpbmcgbWF0Y2ggd2l0aCBhIGBzdHJpbmdgIGFzIGRlc2NyaWJlZCBhYm92ZS4gVGhlIHNwZWNpYWwgcHJvcGVydHkgbmFtZSBjYW4gYmVcbiAqICAgICBvdmVyd3JpdHRlbiwgdXNpbmcgdGhlIGBhbnlQcm9wZXJ0eUtleWAgcGFyYW1ldGVyLlxuICogICAgIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nIHRoZSBzdHJpbmcgd2l0aCBgIWAuXG4gKiAgICAgRm9yIGV4YW1wbGUgYHtuYW1lOiBcIiFNXCJ9YCBwcmVkaWNhdGUgd2lsbCByZXR1cm4gYW4gYXJyYXkgb2YgaXRlbXMgd2hpY2ggaGF2ZSBwcm9wZXJ0eSBgbmFtZWBcbiAqICAgICBub3QgY29udGFpbmluZyBcIk1cIi5cbiAqXG4gKiAgICAgTm90ZSB0aGF0IGEgbmFtZWQgcHJvcGVydHkgd2lsbCBtYXRjaCBwcm9wZXJ0aWVzIG9uIHRoZSBzYW1lIGxldmVsIG9ubHksIHdoaWxlIHRoZSBzcGVjaWFsXG4gKiAgICAgYCRgIHByb3BlcnR5IHdpbGwgbWF0Y2ggcHJvcGVydGllcyBvbiB0aGUgc2FtZSBsZXZlbCBvciBkZWVwZXIuIEUuZy4gYW4gYXJyYXkgaXRlbSBsaWtlXG4gKiAgICAgYHtuYW1lOiB7Zmlyc3Q6ICdKb2huJywgbGFzdDogJ0RvZSd9fWAgd2lsbCAqKm5vdCoqIGJlIG1hdGNoZWQgYnkgYHtuYW1lOiAnSm9obid9YCwgYnV0XG4gKiAgICAgKip3aWxsKiogYmUgbWF0Y2hlZCBieSBgeyQ6ICdKb2huJ31gLlxuICpcbiAqICAgLSBgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBhcnJheSlgOiBBIHByZWRpY2F0ZSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byB3cml0ZSBhcmJpdHJhcnkgZmlsdGVycy5cbiAqICAgICBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIGZvciBlYWNoIGVsZW1lbnQgb2YgdGhlIGFycmF5LCB3aXRoIHRoZSBlbGVtZW50LCBpdHMgaW5kZXgsIGFuZFxuICogICAgIHRoZSBlbnRpcmUgYXJyYXkgaXRzZWxmIGFzIGFyZ3VtZW50cy5cbiAqXG4gKiAgICAgVGhlIGZpbmFsIHJlc3VsdCBpcyBhbiBhcnJheSBvZiB0aG9zZSBlbGVtZW50cyB0aGF0IHRoZSBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1ZSBmb3IuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKXx0cnVlfGZhbHNlfSBbY29tcGFyYXRvcl0gQ29tcGFyYXRvciB3aGljaCBpcyB1c2VkIGluXG4gKiAgICAgZGV0ZXJtaW5pbmcgaWYgdmFsdWVzIHJldHJpZXZlZCB1c2luZyBgZXhwcmVzc2lvbmAgKHdoZW4gaXQgaXMgbm90IGEgZnVuY3Rpb24pIHNob3VsZCBiZVxuICogICAgIGNvbnNpZGVyZWQgYSBtYXRjaCBiYXNlZCBvbiB0aGUgZXhwZWN0ZWQgdmFsdWUgKGZyb20gdGhlIGZpbHRlciBleHByZXNzaW9uKSBhbmQgYWN0dWFsXG4gKiAgICAgdmFsdWUgKGZyb20gdGhlIG9iamVjdCBpbiB0aGUgYXJyYXkpLlxuICpcbiAqICAgQ2FuIGJlIG9uZSBvZjpcbiAqXG4gKiAgIC0gYGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpYDpcbiAqICAgICBUaGUgZnVuY3Rpb24gd2lsbCBiZSBnaXZlbiB0aGUgb2JqZWN0IHZhbHVlIGFuZCB0aGUgcHJlZGljYXRlIHZhbHVlIHRvIGNvbXBhcmUgYW5kXG4gKiAgICAgc2hvdWxkIHJldHVybiB0cnVlIGlmIGJvdGggdmFsdWVzIHNob3VsZCBiZSBjb25zaWRlcmVkIGVxdWFsLlxuICpcbiAqICAgLSBgdHJ1ZWA6IEEgc2hvcnRoYW5kIGZvciBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCkgeyByZXR1cm4gYW5ndWxhci5lcXVhbHMoYWN0dWFsLCBleHBlY3RlZCl9YC5cbiAqICAgICBUaGlzIGlzIGVzc2VudGlhbGx5IHN0cmljdCBjb21wYXJpc29uIG9mIGV4cGVjdGVkIGFuZCBhY3R1YWwuXG4gKlxuICogICAtIGBmYWxzZWA6IEEgc2hvcnQgaGFuZCBmb3IgYSBmdW5jdGlvbiB3aGljaCB3aWxsIGxvb2sgZm9yIGEgc3Vic3RyaW5nIG1hdGNoIGluIGEgY2FzZVxuICogICAgIGluc2Vuc2l0aXZlIHdheS4gUHJpbWl0aXZlIHZhbHVlcyBhcmUgY29udmVydGVkIHRvIHN0cmluZ3MuIE9iamVjdHMgYXJlIG5vdCBjb21wYXJlZCBhZ2FpbnN0XG4gKiAgICAgcHJpbWl0aXZlcywgdW5sZXNzIHRoZXkgaGF2ZSBhIGN1c3RvbSBgdG9TdHJpbmdgIG1ldGhvZCAoZS5nLiBgRGF0ZWAgb2JqZWN0cykuXG4gKlxuICpcbiAqICAgRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FueVByb3BlcnR5S2V5XSBUaGUgc3BlY2lhbCBwcm9wZXJ0eSBuYW1lIHRoYXQgbWF0Y2hlcyBhZ2FpbnN0IGFueSBwcm9wZXJ0eS5cbiAqICAgICBCeSBkZWZhdWx0IGAkYC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cImZpbHRlci1maWx0ZXJcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWluaXQ9XCJmcmllbmRzID0gW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjc2J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzgwMC1CSUctTUFSWSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGlldHRlJywgcGhvbmU6JzU1NS01Njc4J31dXCI+PC9kaXY+XG5cbiAgICAgICA8bGFiZWw+U2VhcmNoOiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2hUZXh0XCI+PC9sYWJlbD5cbiAgICAgICA8dGFibGUgaWQ9XCJzZWFyY2hUZXh0UmVzdWx0c1wiPlxuICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+XG4gICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoVGV4dFwiPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICAgIDxocj5cbiAgICAgICA8bGFiZWw+QW55OiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2guJFwiPjwvbGFiZWw+IDxicj5cbiAgICAgICA8bGFiZWw+TmFtZSBvbmx5IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC5uYW1lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlBob25lIG9ubHkgPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLnBob25lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPkVxdWFsaXR5IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInN0cmljdFwiPjwvbGFiZWw+PGJyPlxuICAgICAgIDx0YWJsZSBpZD1cInNlYXJjaE9ialJlc3VsdHNcIj5cbiAgICAgICAgIDx0cj48dGg+TmFtZTwvdGg+PHRoPlBob25lPC90aD48L3RyPlxuICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZE9iaiBpbiBmcmllbmRzIHwgZmlsdGVyOnNlYXJjaDpzdHJpY3RcIj5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kT2JqLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZE9iai5waG9uZX19PC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgPC90YWJsZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIGV4cGVjdEZyaWVuZE5hbWVzID0gZnVuY3Rpb24oZXhwZWN0ZWROYW1lcywga2V5KSB7XG4gICAgICAgICBlbGVtZW50LmFsbChieS5yZXBlYXRlcihrZXkgKyAnIGluIGZyaWVuZHMnKS5jb2x1bW4oa2V5ICsgJy5uYW1lJykpLnRoZW4oZnVuY3Rpb24oYXJyKSB7XG4gICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKHdkLCBpKSB7XG4gICAgICAgICAgICAgZXhwZWN0KHdkLmdldFRleHQoKSkudG9NYXRjaChleHBlY3RlZE5hbWVzW2ldKTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICB9KTtcbiAgICAgICB9O1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggYWNyb3NzIGFsbCBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNlYXJjaFRleHQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2hUZXh0JykpO1xuICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoVGV4dC5zZW5kS2V5cygnbScpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydNYXJ5JywgJ01pa2UnLCAnQWRhbSddLCAnZnJpZW5kJyk7XG5cbiAgICAgICAgIHNlYXJjaFRleHQuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaFRleHQuc2VuZEtleXMoJzc2Jyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0pvaG4nLCAnSnVsaWUnXSwgJ2ZyaWVuZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggaW4gc3BlY2lmaWMgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBwcmVkaWNhdGUgb2JqZWN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoQW55ID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoLiQnKSk7XG4gICAgICAgICBzZWFyY2hBbnkuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaEFueS5zZW5kS2V5cygnaScpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydNYXJ5JywgJ01pa2UnLCAnSnVsaWUnLCAnSnVsaWV0dGUnXSwgJ2ZyaWVuZE9iaicpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgdXNlIGEgZXF1YWwgY29tcGFyaXNvbiB3aGVuIGNvbXBhcmF0b3IgaXMgdHJ1ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNlYXJjaE5hbWUgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2gubmFtZScpKTtcbiAgICAgICAgIHZhciBzdHJpY3QgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzdHJpY3QnKSk7XG4gICAgICAgICBzZWFyY2hOYW1lLmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hOYW1lLnNlbmRLZXlzKCdKdWxpZScpO1xuICAgICAgICAgc3RyaWN0LmNsaWNrKCk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0p1bGllJ10sICdmcmllbmRPYmonKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbmZ1bmN0aW9uIGZpbHRlckZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBleHByZXNzaW9uLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSkge1xuICAgIGlmICghaXNBcnJheUxpa2UoYXJyYXkpKSB7XG4gICAgICBpZiAoYXJyYXkgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJ2ZpbHRlcicpKCdub3RhcnJheScsICdFeHBlY3RlZCBhcnJheSBidXQgcmVjZWl2ZWQ6IHswfScsIGFycmF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhbnlQcm9wZXJ0eUtleSA9IGFueVByb3BlcnR5S2V5IHx8ICckJztcbiAgICB2YXIgZXhwcmVzc2lvblR5cGUgPSBnZXRUeXBlRm9yRmlsdGVyKGV4cHJlc3Npb24pO1xuICAgIHZhciBwcmVkaWNhdGVGbjtcbiAgICB2YXIgbWF0Y2hBZ2FpbnN0QW55UHJvcDtcblxuICAgIHN3aXRjaCAoZXhwcmVzc2lvblR5cGUpIHtcbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgcHJlZGljYXRlRm4gPSBleHByZXNzaW9uO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnbnVsbCc6XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgbWF0Y2hBZ2FpbnN0QW55UHJvcCA9IHRydWU7XG4gICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHByZWRpY2F0ZUZuID0gY3JlYXRlUHJlZGljYXRlRm4oZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGFycmF5LCBwcmVkaWNhdGVGbik7XG4gIH07XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGBmaWx0ZXJGaWx0ZXJgXG5mdW5jdGlvbiBjcmVhdGVQcmVkaWNhdGVGbihleHByZXNzaW9uLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgbWF0Y2hBZ2FpbnN0QW55UHJvcCkge1xuICB2YXIgc2hvdWxkTWF0Y2hQcmltaXRpdmVzID0gaXNPYmplY3QoZXhwcmVzc2lvbikgJiYgKGFueVByb3BlcnR5S2V5IGluIGV4cHJlc3Npb24pO1xuICB2YXIgcHJlZGljYXRlRm47XG5cbiAgaWYgKGNvbXBhcmF0b3IgPT09IHRydWUpIHtcbiAgICBjb21wYXJhdG9yID0gZXF1YWxzO1xuICB9IGVsc2UgaWYgKCFpc0Z1bmN0aW9uKGNvbXBhcmF0b3IpKSB7XG4gICAgY29tcGFyYXRvciA9IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChhY3R1YWwpKSB7XG4gICAgICAgIC8vIE5vIHN1YnN0cmluZyBtYXRjaGluZyBhZ2FpbnN0IGB1bmRlZmluZWRgXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICgoYWN0dWFsID09PSBudWxsKSB8fCAoZXhwZWN0ZWQgPT09IG51bGwpKSB7XG4gICAgICAgIC8vIE5vIHN1YnN0cmluZyBtYXRjaGluZyBhZ2FpbnN0IGBudWxsYDsgb25seSBtYXRjaCBhZ2FpbnN0IGBudWxsYFxuICAgICAgICByZXR1cm4gYWN0dWFsID09PSBleHBlY3RlZDtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChleHBlY3RlZCkgfHwgKGlzT2JqZWN0KGFjdHVhbCkgJiYgIWhhc0N1c3RvbVRvU3RyaW5nKGFjdHVhbCkpKSB7XG4gICAgICAgIC8vIFNob3VsZCBub3QgY29tcGFyZSBwcmltaXRpdmVzIGFnYWluc3Qgb2JqZWN0cywgdW5sZXNzIHRoZXkgaGF2ZSBjdXN0b20gYHRvU3RyaW5nYCBtZXRob2RcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBhY3R1YWwgPSBsb3dlcmNhc2UoJycgKyBhY3R1YWwpO1xuICAgICAgZXhwZWN0ZWQgPSBsb3dlcmNhc2UoJycgKyBleHBlY3RlZCk7XG4gICAgICByZXR1cm4gYWN0dWFsLmluZGV4T2YoZXhwZWN0ZWQpICE9PSAtMTtcbiAgICB9O1xuICB9XG5cbiAgcHJlZGljYXRlRm4gPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgaWYgKHNob3VsZE1hdGNoUHJpbWl0aXZlcyAmJiAhaXNPYmplY3QoaXRlbSkpIHtcbiAgICAgIHJldHVybiBkZWVwQ29tcGFyZShpdGVtLCBleHByZXNzaW9uW2FueVByb3BlcnR5S2V5XSwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgfTtcblxuICByZXR1cm4gcHJlZGljYXRlRm47XG59XG5cbmZ1bmN0aW9uIGRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wLCBkb250TWF0Y2hXaG9sZU9iamVjdCkge1xuICB2YXIgYWN0dWFsVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoYWN0dWFsKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoZXhwZWN0ZWQpO1xuXG4gIGlmICgoZXhwZWN0ZWRUeXBlID09PSAnc3RyaW5nJykgJiYgKGV4cGVjdGVkLmNoYXJBdCgwKSA9PT0gJyEnKSkge1xuICAgIHJldHVybiAhZGVlcENvbXBhcmUoYWN0dWFsLCBleHBlY3RlZC5zdWJzdHJpbmcoMSksIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGFjdHVhbCkpIHtcbiAgICAvLyBJbiBjYXNlIGBhY3R1YWxgIGlzIGFuIGFycmF5LCBjb25zaWRlciBpdCBhIG1hdGNoXG4gICAgLy8gaWYgQU5ZIG9mIGl0J3MgaXRlbXMgbWF0Y2hlcyBgZXhwZWN0ZWRgXG4gICAgcmV0dXJuIGFjdHVhbC5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBkZWVwQ29tcGFyZShpdGVtLCBleHBlY3RlZCwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgIH0pO1xuICB9XG5cbiAgc3dpdGNoIChhY3R1YWxUeXBlKSB7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHZhciBrZXk7XG4gICAgICBpZiAobWF0Y2hBZ2FpbnN0QW55UHJvcCkge1xuICAgICAgICBmb3IgKGtleSBpbiBhY3R1YWwpIHtcbiAgICAgICAgICAvLyBVbmRlciBjZXJ0YWluLCByYXJlLCBjaXJjdW1zdGFuY2VzLCBrZXkgbWF5IG5vdCBiZSBhIHN0cmluZyBhbmQgYGNoYXJBdGAgd2lsbCBiZSB1bmRlZmluZWRcbiAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE1NjQ0XG4gICAgICAgICAgaWYgKGtleS5jaGFyQXQgJiYgKGtleS5jaGFyQXQoMCkgIT09ICckJykgJiZcbiAgICAgICAgICAgICAgZGVlcENvbXBhcmUoYWN0dWFsW2tleV0sIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9udE1hdGNoV2hvbGVPYmplY3QgPyBmYWxzZSA6IGRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChrZXkgaW4gZXhwZWN0ZWQpIHtcbiAgICAgICAgICB2YXIgZXhwZWN0ZWRWYWwgPSBleHBlY3RlZFtrZXldO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGV4cGVjdGVkVmFsKSB8fCBpc1VuZGVmaW5lZChleHBlY3RlZFZhbCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtYXRjaEFueVByb3BlcnR5ID0ga2V5ID09PSBhbnlQcm9wZXJ0eUtleTtcbiAgICAgICAgICB2YXIgYWN0dWFsVmFsID0gbWF0Y2hBbnlQcm9wZXJ0eSA/IGFjdHVhbCA6IGFjdHVhbFtrZXldO1xuICAgICAgICAgIGlmICghZGVlcENvbXBhcmUoYWN0dWFsVmFsLCBleHBlY3RlZFZhbCwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQW55UHJvcGVydHksIG1hdGNoQW55UHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoYWN0dWFsLCBleHBlY3RlZCk7XG4gICAgICB9XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gY29tcGFyYXRvcihhY3R1YWwsIGV4cGVjdGVkKTtcbiAgfVxufVxuXG4vLyBVc2VkIGZvciBlYXNpbHkgZGlmZmVyZW50aWF0aW5nIGJldHdlZW4gYG51bGxgIGFuZCBhY3R1YWwgYG9iamVjdGBcbmZ1bmN0aW9uIGdldFR5cGVGb3JGaWx0ZXIodmFsKSB7XG4gIHJldHVybiAodmFsID09PSBudWxsKSA/ICdudWxsJyA6IHR5cGVvZiB2YWw7XG59XG5cbnZhciBNQVhfRElHSVRTID0gMjI7XG52YXIgREVDSU1BTF9TRVAgPSAnLic7XG52YXIgWkVST19DSEFSID0gJzAnO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGN1cnJlbmN5XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdFxuICogc3ltYm9sIGZvciBjdXJyZW50IGxvY2FsZSBpcyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtzdHJpbmc9fSBzeW1ib2wgQ3VycmVuY3kgc3ltYm9sIG9yIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkLlxuICogQHBhcmFtIHtudW1iZXI9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBhbW91bnQgdG8sIGRlZmF1bHRzIHRvIGRlZmF1bHQgbWF4IGZyYWN0aW9uIHNpemUgZm9yIGN1cnJlbnQgbG9jYWxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgbnVtYmVyLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiY3VycmVuY3lFeGFtcGxlXCIgbmFtZT1cImN1cnJlbmN5LWZpbHRlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY3VycmVuY3lFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLmFtb3VudCA9IDEyMzQuNTY7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cImFtb3VudFwiIGFyaWEtbGFiZWw9XCJhbW91bnRcIj4gPGJyPlxuICAgICAgICAgZGVmYXVsdCBjdXJyZW5jeSBzeW1ib2wgKCQpOiA8c3BhbiBpZD1cImN1cnJlbmN5LWRlZmF1bHRcIj57e2Ftb3VudCB8IGN1cnJlbmN5fX08L3NwYW4+PGJyPlxuICAgICAgICAgY3VzdG9tIGN1cnJlbmN5IGlkZW50aWZpZXIgKFVTRCQpOiA8c3BhbiBpZD1cImN1cnJlbmN5LWN1c3RvbVwiPnt7YW1vdW50IHwgY3VycmVuY3k6XCJVU0QkXCJ9fTwvc3Bhbj48YnI+XG4gICAgICAgICBubyBmcmFjdGlvbnMgKDApOiA8c3BhbiBpZD1cImN1cnJlbmN5LW5vLWZyYWN0aW9uc1wiPnt7YW1vdW50IHwgY3VycmVuY3k6XCJVU0QkXCI6MH19PC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGluaXQgd2l0aCAxMjM0LjU2JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJyQxLDIzNC41NicpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJ1VTRCQxLDIzNC41NicpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LW5vLWZyYWN0aW9ucycpKS5nZXRUZXh0KCkpLnRvQmUoJ1VTRCQxLDIzNScpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PT0gJ3NhZmFyaScpIHtcbiAgICAgICAgICAgLy8gU2FmYXJpIGRvZXMgbm90IHVuZGVyc3RhbmQgdGhlIG1pbnVzIGtleS4gU2VlXG4gICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MVxuICAgICAgICAgICByZXR1cm47XG4gICAgICAgICB9XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdhbW91bnQnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Ftb3VudCcpKS5zZW5kS2V5cygnLTEyMzQnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnLSQxLDIzNC4wMCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJy1VU0QkMSwyMzQuMDAnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1uby1mcmFjdGlvbnMnKSkuZ2V0VGV4dCgpKS50b0JlKCctVVNEJDEsMjM0Jyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuY3VycmVuY3lGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gY3VycmVuY3lGaWx0ZXIoJGxvY2FsZSkge1xuICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7XG4gIHJldHVybiBmdW5jdGlvbihhbW91bnQsIGN1cnJlbmN5U3ltYm9sLCBmcmFjdGlvblNpemUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQoY3VycmVuY3lTeW1ib2wpKSB7XG4gICAgICBjdXJyZW5jeVN5bWJvbCA9IGZvcm1hdHMuQ1VSUkVOQ1lfU1lNO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7XG4gICAgICBmcmFjdGlvblNpemUgPSBmb3JtYXRzLlBBVFRFUk5TWzFdLm1heEZyYWM7XG4gICAgfVxuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChhbW91bnQgPT0gbnVsbClcbiAgICAgICAgPyBhbW91bnRcbiAgICAgICAgOiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgZnJhY3Rpb25TaXplKS5cbiAgICAgICAgICAgIHJlcGxhY2UoL1xcdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpO1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG51bWJlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgdGV4dC5cbiAqXG4gKiBJZiB0aGUgaW5wdXQgaXMgbnVsbCBvciB1bmRlZmluZWQsIGl0IHdpbGwganVzdCBiZSByZXR1cm5lZC5cbiAqIElmIHRoZSBpbnB1dCBpcyBpbmZpbml0ZSAoSW5maW5pdHkgb3IgLUluZmluaXR5KSwgdGhlIEluZmluaXR5IHN5bWJvbCAn4oieJyBvciAnLeKInicgaXMgcmV0dXJuZWQsIHJlc3BlY3RpdmVseS5cbiAqIElmIHRoZSBpbnB1dCBpcyBub3QgYSBudW1iZXIgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciBOdW1iZXIgdG8gZm9ybWF0LlxuICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyk9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBudW1iZXIgdG8uXG4gKiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCB0aGVuIHRoZSBmcmFjdGlvbiBzaXplIGlzIGNvbXB1dGVkIGZyb20gdGhlIGN1cnJlbnQgbG9jYWxlJ3MgbnVtYmVyXG4gKiBmb3JtYXR0aW5nIHBhdHRlcm4uIEluIHRoZSBjYXNlIG9mIHRoZSBkZWZhdWx0IGxvY2FsZSwgaXQgd2lsbCBiZSAzLlxuICogQHJldHVybnMge3N0cmluZ30gTnVtYmVyIHJvdW5kZWQgdG8gYGZyYWN0aW9uU2l6ZWAgYXBwcm9wcmlhdGVseSBmb3JtYXR0ZWQgYmFzZWQgb24gdGhlIGN1cnJlbnRcbiAqICAgICAgICAgICAgICAgICAgIGxvY2FsZSAoZS5nLiwgaW4gdGhlIGVuX1VTIGxvY2FsZSBpdCB3aWxsIGhhdmUgXCIuXCIgYXMgdGhlIGRlY2ltYWwgc2VwYXJhdG9yIGFuZFxuICogICAgICAgICAgICAgICAgICAgaW5jbHVkZSBcIixcIiBncm91cCBzZXBhcmF0b3JzIGFmdGVyIGVhY2ggdGhpcmQgZGlnaXQpLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJudW1iZXJGaWx0ZXJFeGFtcGxlXCIgbmFtZT1cIm51bWJlci1maWx0ZXJcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckZpbHRlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUudmFsID0gMTIzNC41Njc4OTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+RW50ZXIgbnVtYmVyOiA8aW5wdXQgbmctbW9kZWw9J3ZhbCc+PC9sYWJlbD48YnI+XG4gICAgICAgICBEZWZhdWx0IGZvcm1hdHRpbmc6IDxzcGFuIGlkPSdudW1iZXItZGVmYXVsdCc+e3t2YWwgfCBudW1iZXJ9fTwvc3Bhbj48YnI+XG4gICAgICAgICBObyBmcmFjdGlvbnM6IDxzcGFuPnt7dmFsIHwgbnVtYmVyOjB9fTwvc3Bhbj48YnI+XG4gICAgICAgICBOZWdhdGl2ZSBudW1iZXI6IDxzcGFuPnt7LXZhbCB8IG51bWJlcjo0fX08L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IG51bWJlcnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzEsMjM0LjU2OCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCcxLDIzNScpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTEsMjM0LjU2NzknKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWwnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5zZW5kS2V5cygnMzM3NC4zMzMnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0LjMzMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCczLDM3NCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTMsMzc0LjMzMzAnKTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbm51bWJlckZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107XG5mdW5jdGlvbiBudW1iZXJGaWx0ZXIoJGxvY2FsZSkge1xuICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7XG4gIHJldHVybiBmdW5jdGlvbihudW1iZXIsIGZyYWN0aW9uU2l6ZSkge1xuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChudW1iZXIgPT0gbnVsbClcbiAgICAgICAgPyBudW1iZXJcbiAgICAgICAgOiBmb3JtYXROdW1iZXIobnVtYmVyLCBmb3JtYXRzLlBBVFRFUk5TWzBdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCxcbiAgICAgICAgICAgICAgICAgICAgICAgZnJhY3Rpb25TaXplKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIG51bWJlciAoYXMgYSBzdHJpbmcpIGludG8gdGhyZWUgY29tcG9uZW50cyB0aGF0IGNhbiBiZSB1c2VkXG4gKiBmb3IgZm9ybWF0dGluZyB0aGUgbnVtYmVyLlxuICpcbiAqIChTaWduaWZpY2FudCBiaXRzIG9mIHRoaXMgcGFyc2UgYWxnb3JpdGhtIGNhbWUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9iaWcuanMvKVxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gbnVtU3RyIFRoZSBudW1iZXIgdG8gcGFyc2VcbiAqIEByZXR1cm4ge29iamVjdH0gQW4gb2JqZWN0IGRlc2NyaWJpbmcgdGhpcyBudW1iZXIsIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBrZXlzOlxuICogIC0gZCA6IGFuIGFycmF5IG9mIGRpZ2l0cyBjb250YWluaW5nIGxlYWRpbmcgemVyb3MgYXMgbmVjZXNzYXJ5XG4gKiAgLSBpIDogdGhlIG51bWJlciBvZiB0aGUgZGlnaXRzIGluIGBkYCB0aGF0IGFyZSB0byB0aGUgbGVmdCBvZiB0aGUgZGVjaW1hbCBwb2ludFxuICogIC0gZSA6IHRoZSBleHBvbmVudCBmb3IgbnVtYmVycyB0aGF0IHdvdWxkIG5lZWQgbW9yZSB0aGFuIGBNQVhfRElHSVRTYCBkaWdpdHMgaW4gYGRgXG4gKlxuICovXG5mdW5jdGlvbiBwYXJzZShudW1TdHIpIHtcbiAgdmFyIGV4cG9uZW50ID0gMCwgZGlnaXRzLCBudW1iZXJPZkludGVnZXJEaWdpdHM7XG4gIHZhciBpLCBqLCB6ZXJvcztcblxuICAvLyBEZWNpbWFsIHBvaW50P1xuICBpZiAoKG51bWJlck9mSW50ZWdlckRpZ2l0cyA9IG51bVN0ci5pbmRleE9mKERFQ0lNQUxfU0VQKSkgPiAtMSkge1xuICAgIG51bVN0ciA9IG51bVN0ci5yZXBsYWNlKERFQ0lNQUxfU0VQLCAnJyk7XG4gIH1cblxuICAvLyBFeHBvbmVudGlhbCBmb3JtP1xuICBpZiAoKGkgPSBudW1TdHIuc2VhcmNoKC9lL2kpKSA+IDApIHtcbiAgICAvLyBXb3JrIG91dCB0aGUgZXhwb25lbnQuXG4gICAgaWYgKG51bWJlck9mSW50ZWdlckRpZ2l0cyA8IDApIG51bWJlck9mSW50ZWdlckRpZ2l0cyA9IGk7XG4gICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzICs9ICtudW1TdHIuc2xpY2UoaSArIDEpO1xuICAgIG51bVN0ciA9IG51bVN0ci5zdWJzdHJpbmcoMCwgaSk7XG4gIH0gZWxzZSBpZiAobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIDwgMCkge1xuICAgIC8vIFRoZXJlIHdhcyBubyBkZWNpbWFsIHBvaW50IG9yIGV4cG9uZW50IHNvIGl0IGlzIGFuIGludGVnZXIuXG4gICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gbnVtU3RyLmxlbmd0aDtcbiAgfVxuXG4gIC8vIENvdW50IHRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcy5cbiAgZm9yIChpID0gMDsgbnVtU3RyLmNoYXJBdChpKSA9PT0gWkVST19DSEFSOyBpKyspIHsgLyogZW1wdHkgKi8gfVxuXG4gIGlmIChpID09PSAoemVyb3MgPSBudW1TdHIubGVuZ3RoKSkge1xuICAgIC8vIFRoZSBkaWdpdHMgYXJlIGFsbCB6ZXJvLlxuICAgIGRpZ2l0cyA9IFswXTtcbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgPSAxO1xuICB9IGVsc2Uge1xuICAgIC8vIENvdW50IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3NcbiAgICB6ZXJvcy0tO1xuICAgIHdoaWxlIChudW1TdHIuY2hhckF0KHplcm9zKSA9PT0gWkVST19DSEFSKSB6ZXJvcy0tO1xuXG4gICAgLy8gVHJhaWxpbmcgemVyb3MgYXJlIGluc2lnbmlmaWNhbnQgc28gaWdub3JlIHRoZW1cbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgLT0gaTtcbiAgICBkaWdpdHMgPSBbXTtcbiAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBhcnJheSBvZiBkaWdpdHMgd2l0aG91dCBsZWFkaW5nL3RyYWlsaW5nIHplcm9zLlxuICAgIGZvciAoaiA9IDA7IGkgPD0gemVyb3M7IGkrKywgaisrKSB7XG4gICAgICBkaWdpdHNbal0gPSArbnVtU3RyLmNoYXJBdChpKTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGUgbnVtYmVyIG92ZXJmbG93cyB0aGUgbWF4aW11bSBhbGxvd2VkIGRpZ2l0cyB0aGVuIHVzZSBhbiBleHBvbmVudC5cbiAgaWYgKG51bWJlck9mSW50ZWdlckRpZ2l0cyA+IE1BWF9ESUdJVFMpIHtcbiAgICBkaWdpdHMgPSBkaWdpdHMuc3BsaWNlKDAsIE1BWF9ESUdJVFMgLSAxKTtcbiAgICBleHBvbmVudCA9IG51bWJlck9mSW50ZWdlckRpZ2l0cyAtIDE7XG4gICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gMTtcbiAgfVxuXG4gIHJldHVybiB7IGQ6IGRpZ2l0cywgZTogZXhwb25lbnQsIGk6IG51bWJlck9mSW50ZWdlckRpZ2l0cyB9O1xufVxuXG4vKipcbiAqIFJvdW5kIHRoZSBwYXJzZWQgbnVtYmVyIHRvIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXG4gKiBUaGlzIGZ1bmN0aW9uIGNoYW5nZWQgdGhlIHBhcnNlZE51bWJlciBpbi1wbGFjZVxuICovXG5mdW5jdGlvbiByb3VuZE51bWJlcihwYXJzZWROdW1iZXIsIGZyYWN0aW9uU2l6ZSwgbWluRnJhYywgbWF4RnJhYykge1xuICAgIHZhciBkaWdpdHMgPSBwYXJzZWROdW1iZXIuZDtcbiAgICB2YXIgZnJhY3Rpb25MZW4gPSBkaWdpdHMubGVuZ3RoIC0gcGFyc2VkTnVtYmVyLmk7XG5cbiAgICAvLyBkZXRlcm1pbmUgZnJhY3Rpb25TaXplIGlmIGl0IGlzIG5vdCBzcGVjaWZpZWQ7IGArZnJhY3Rpb25TaXplYCBjb252ZXJ0cyBpdCB0byBhIG51bWJlclxuICAgIGZyYWN0aW9uU2l6ZSA9IChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSA/IE1hdGgubWluKE1hdGgubWF4KG1pbkZyYWMsIGZyYWN0aW9uTGVuKSwgbWF4RnJhYykgOiArZnJhY3Rpb25TaXplO1xuXG4gICAgLy8gVGhlIGluZGV4IG9mIHRoZSBkaWdpdCB0byB3aGVyZSByb3VuZGluZyBpcyB0byBvY2N1clxuICAgIHZhciByb3VuZEF0ID0gZnJhY3Rpb25TaXplICsgcGFyc2VkTnVtYmVyLmk7XG4gICAgdmFyIGRpZ2l0ID0gZGlnaXRzW3JvdW5kQXRdO1xuXG4gICAgaWYgKHJvdW5kQXQgPiAwKSB7XG4gICAgICAvLyBEcm9wIGZyYWN0aW9uYWwgZGlnaXRzIGJleW9uZCBgcm91bmRBdGBcbiAgICAgIGRpZ2l0cy5zcGxpY2UoTWF0aC5tYXgocGFyc2VkTnVtYmVyLmksIHJvdW5kQXQpKTtcblxuICAgICAgLy8gU2V0IG5vbi1mcmFjdGlvbmFsIGRpZ2l0cyBiZXlvbmQgYHJvdW5kQXRgIHRvIDBcbiAgICAgIGZvciAodmFyIGogPSByb3VuZEF0OyBqIDwgZGlnaXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRpZ2l0c1tqXSA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHJvdW5kZWQgdG8gemVybyBzbyByZXNldCB0aGUgcGFyc2VkTnVtYmVyXG4gICAgICBmcmFjdGlvbkxlbiA9IE1hdGgubWF4KDAsIGZyYWN0aW9uTGVuKTtcbiAgICAgIHBhcnNlZE51bWJlci5pID0gMTtcbiAgICAgIGRpZ2l0cy5sZW5ndGggPSBNYXRoLm1heCgxLCByb3VuZEF0ID0gZnJhY3Rpb25TaXplICsgMSk7XG4gICAgICBkaWdpdHNbMF0gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCByb3VuZEF0OyBpKyspIGRpZ2l0c1tpXSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGRpZ2l0ID49IDUpIHtcbiAgICAgIGlmIChyb3VuZEF0IC0gMSA8IDApIHtcbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPiByb3VuZEF0OyBrLS0pIHtcbiAgICAgICAgICBkaWdpdHMudW5zaGlmdCgwKTtcbiAgICAgICAgICBwYXJzZWROdW1iZXIuaSsrO1xuICAgICAgICB9XG4gICAgICAgIGRpZ2l0cy51bnNoaWZ0KDEpO1xuICAgICAgICBwYXJzZWROdW1iZXIuaSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlnaXRzW3JvdW5kQXQgLSAxXSsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFBhZCBvdXQgd2l0aCB6ZXJvcyB0byBnZXQgdGhlIHJlcXVpcmVkIGZyYWN0aW9uIGxlbmd0aFxuICAgIGZvciAoOyBmcmFjdGlvbkxlbiA8IE1hdGgubWF4KDAsIGZyYWN0aW9uU2l6ZSk7IGZyYWN0aW9uTGVuKyspIGRpZ2l0cy5wdXNoKDApO1xuXG5cbiAgICAvLyBEbyBhbnkgY2FycnlpbmcsIGUuZy4gYSBkaWdpdCB3YXMgcm91bmRlZCB1cCB0byAxMFxuICAgIHZhciBjYXJyeSA9IGRpZ2l0cy5yZWR1Y2VSaWdodChmdW5jdGlvbihjYXJyeSwgZCwgaSwgZGlnaXRzKSB7XG4gICAgICBkID0gZCArIGNhcnJ5O1xuICAgICAgZGlnaXRzW2ldID0gZCAlIDEwO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZCAvIDEwKTtcbiAgICB9LCAwKTtcbiAgICBpZiAoY2FycnkpIHtcbiAgICAgIGRpZ2l0cy51bnNoaWZ0KGNhcnJ5KTtcbiAgICAgIHBhcnNlZE51bWJlci5pKys7XG4gICAgfVxufVxuXG4vKipcbiAqIEZvcm1hdCBhIG51bWJlciBpbnRvIGEgc3RyaW5nXG4gKiBAcGFyYW0gIHtudW1iZXJ9IG51bWJlciAgICAgICBUaGUgbnVtYmVyIHRvIGZvcm1hdFxuICogQHBhcmFtICB7e1xuICogICAgICAgICAgIG1pbkZyYWMsIC8vIHRoZSBtaW5pbXVtIG51bWJlciBvZiBkaWdpdHMgcmVxdWlyZWQgaW4gdGhlIGZyYWN0aW9uIHBhcnQgb2YgdGhlIG51bWJlclxuICogICAgICAgICAgIG1heEZyYWMsIC8vIHRoZSBtYXhpbXVtIG51bWJlciBvZiBkaWdpdHMgcmVxdWlyZWQgaW4gdGhlIGZyYWN0aW9uIHBhcnQgb2YgdGhlIG51bWJlclxuICogICAgICAgICAgIGdTaXplLCAgIC8vIG51bWJlciBvZiBkaWdpdHMgaW4gZWFjaCBncm91cCBvZiBzZXBhcmF0ZWQgZGlnaXRzXG4gKiAgICAgICAgICAgbGdTaXplLCAgLy8gbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgbGFzdCBncm91cCBvZiBkaWdpdHMgYmVmb3JlIHRoZSBkZWNpbWFsIHNlcGFyYXRvclxuICogICAgICAgICAgIG5lZ1ByZSwgIC8vIHRoZSBzdHJpbmcgdG8gZ28gaW4gZnJvbnQgb2YgYSBuZWdhdGl2ZSBudW1iZXIgKGUuZy4gYC1gIG9yIGAoYCkpXG4gKiAgICAgICAgICAgcG9zUHJlLCAgLy8gdGhlIHN0cmluZyB0byBnbyBpbiBmcm9udCBvZiBhIHBvc2l0aXZlIG51bWJlclxuICogICAgICAgICAgIG5lZ1N1ZiwgIC8vIHRoZSBzdHJpbmcgdG8gZ28gYWZ0ZXIgYSBuZWdhdGl2ZSBudW1iZXIgKGUuZy4gYClgKVxuICogICAgICAgICAgIHBvc1N1ZiAgIC8vIHRoZSBzdHJpbmcgdG8gZ28gYWZ0ZXIgYSBwb3NpdGl2ZSBudW1iZXJcbiAqICAgICAgICAgfX0gcGF0dGVyblxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFNlcCAgICAgVGhlIHN0cmluZyB0byBzZXBhcmF0ZSBncm91cHMgb2YgbnVtYmVyIChlLmcuIGAsYClcbiAqIEBwYXJhbSAge3N0cmluZ30gZGVjaW1hbFNlcCAgIFRoZSBzdHJpbmcgdG8gYWN0IGFzIHRoZSBkZWNpbWFsIHNlcGFyYXRvciAoZS5nLiBgLmApXG4gKiBAcGFyYW0gIHtbdHlwZV19IGZyYWN0aW9uU2l6ZSBUaGUgc2l6ZSBvZiB0aGUgZnJhY3Rpb25hbCBwYXJ0IG9mIHRoZSBudW1iZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICAgIFRoZSBudW1iZXIgZm9ybWF0dGVkIGFzIGEgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW1iZXIsIHBhdHRlcm4sIGdyb3VwU2VwLCBkZWNpbWFsU2VwLCBmcmFjdGlvblNpemUpIHtcblxuICBpZiAoIShpc1N0cmluZyhudW1iZXIpIHx8IGlzTnVtYmVyKG51bWJlcikpIHx8IGlzTmFOKG51bWJlcikpIHJldHVybiAnJztcblxuICB2YXIgaXNJbmZpbml0eSA9ICFpc0Zpbml0ZShudW1iZXIpO1xuICB2YXIgaXNaZXJvID0gZmFsc2U7XG4gIHZhciBudW1TdHIgPSBNYXRoLmFicyhudW1iZXIpICsgJycsXG4gICAgICBmb3JtYXR0ZWRUZXh0ID0gJycsXG4gICAgICBwYXJzZWROdW1iZXI7XG5cbiAgaWYgKGlzSW5maW5pdHkpIHtcbiAgICBmb3JtYXR0ZWRUZXh0ID0gJ1xcdTIyMWUnO1xuICB9IGVsc2Uge1xuICAgIHBhcnNlZE51bWJlciA9IHBhcnNlKG51bVN0cik7XG5cbiAgICByb3VuZE51bWJlcihwYXJzZWROdW1iZXIsIGZyYWN0aW9uU2l6ZSwgcGF0dGVybi5taW5GcmFjLCBwYXR0ZXJuLm1heEZyYWMpO1xuXG4gICAgdmFyIGRpZ2l0cyA9IHBhcnNlZE51bWJlci5kO1xuICAgIHZhciBpbnRlZ2VyTGVuID0gcGFyc2VkTnVtYmVyLmk7XG4gICAgdmFyIGV4cG9uZW50ID0gcGFyc2VkTnVtYmVyLmU7XG4gICAgdmFyIGRlY2ltYWxzID0gW107XG4gICAgaXNaZXJvID0gZGlnaXRzLnJlZHVjZShmdW5jdGlvbihpc1plcm8sIGQpIHsgcmV0dXJuIGlzWmVybyAmJiAhZDsgfSwgdHJ1ZSk7XG5cbiAgICAvLyBwYWQgemVyb3MgZm9yIHNtYWxsIG51bWJlcnNcbiAgICB3aGlsZSAoaW50ZWdlckxlbiA8IDApIHtcbiAgICAgIGRpZ2l0cy51bnNoaWZ0KDApO1xuICAgICAgaW50ZWdlckxlbisrO1xuICAgIH1cblxuICAgIC8vIGV4dHJhY3QgZGVjaW1hbHMgZGlnaXRzXG4gICAgaWYgKGludGVnZXJMZW4gPiAwKSB7XG4gICAgICBkZWNpbWFscyA9IGRpZ2l0cy5zcGxpY2UoaW50ZWdlckxlbiwgZGlnaXRzLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlY2ltYWxzID0gZGlnaXRzO1xuICAgICAgZGlnaXRzID0gWzBdO1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCB0aGUgaW50ZWdlciBkaWdpdHMgd2l0aCBncm91cGluZyBzZXBhcmF0b3JzXG4gICAgdmFyIGdyb3VwcyA9IFtdO1xuICAgIGlmIChkaWdpdHMubGVuZ3RoID49IHBhdHRlcm4ubGdTaXplKSB7XG4gICAgICBncm91cHMudW5zaGlmdChkaWdpdHMuc3BsaWNlKC1wYXR0ZXJuLmxnU2l6ZSwgZGlnaXRzLmxlbmd0aCkuam9pbignJykpO1xuICAgIH1cbiAgICB3aGlsZSAoZGlnaXRzLmxlbmd0aCA+IHBhdHRlcm4uZ1NpemUpIHtcbiAgICAgIGdyb3Vwcy51bnNoaWZ0KGRpZ2l0cy5zcGxpY2UoLXBhdHRlcm4uZ1NpemUsIGRpZ2l0cy5sZW5ndGgpLmpvaW4oJycpKTtcbiAgICB9XG4gICAgaWYgKGRpZ2l0cy5sZW5ndGgpIHtcbiAgICAgIGdyb3Vwcy51bnNoaWZ0KGRpZ2l0cy5qb2luKCcnKSk7XG4gICAgfVxuICAgIGZvcm1hdHRlZFRleHQgPSBncm91cHMuam9pbihncm91cFNlcCk7XG5cbiAgICAvLyBhcHBlbmQgdGhlIGRlY2ltYWwgZGlnaXRzXG4gICAgaWYgKGRlY2ltYWxzLmxlbmd0aCkge1xuICAgICAgZm9ybWF0dGVkVGV4dCArPSBkZWNpbWFsU2VwICsgZGVjaW1hbHMuam9pbignJyk7XG4gICAgfVxuXG4gICAgaWYgKGV4cG9uZW50KSB7XG4gICAgICBmb3JtYXR0ZWRUZXh0ICs9ICdlKycgKyBleHBvbmVudDtcbiAgICB9XG4gIH1cbiAgaWYgKG51bWJlciA8IDAgJiYgIWlzWmVybykge1xuICAgIHJldHVybiBwYXR0ZXJuLm5lZ1ByZSArIGZvcm1hdHRlZFRleHQgKyBwYXR0ZXJuLm5lZ1N1ZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGF0dGVybi5wb3NQcmUgKyBmb3JtYXR0ZWRUZXh0ICsgcGF0dGVybi5wb3NTdWY7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFkTnVtYmVyKG51bSwgZGlnaXRzLCB0cmltLCBuZWdXcmFwKSB7XG4gIHZhciBuZWcgPSAnJztcbiAgaWYgKG51bSA8IDAgfHwgKG5lZ1dyYXAgJiYgbnVtIDw9IDApKSB7XG4gICAgaWYgKG5lZ1dyYXApIHtcbiAgICAgIG51bSA9IC1udW0gKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW0gPSAtbnVtO1xuICAgICAgbmVnID0gJy0nO1xuICAgIH1cbiAgfVxuICBudW0gPSAnJyArIG51bTtcbiAgd2hpbGUgKG51bS5sZW5ndGggPCBkaWdpdHMpIG51bSA9IFpFUk9fQ0hBUiArIG51bTtcbiAgaWYgKHRyaW0pIHtcbiAgICBudW0gPSBudW0uc3Vic3RyKG51bS5sZW5ndGggLSBkaWdpdHMpO1xuICB9XG4gIHJldHVybiBuZWcgKyBudW07XG59XG5cblxuZnVuY3Rpb24gZGF0ZUdldHRlcihuYW1lLCBzaXplLCBvZmZzZXQsIHRyaW0sIG5lZ1dyYXApIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7XG4gICAgaWYgKG9mZnNldCA+IDAgfHwgdmFsdWUgPiAtb2Zmc2V0KSB7XG4gICAgICB2YWx1ZSArPSBvZmZzZXQ7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gMCAmJiBvZmZzZXQgPT09IC0xMikgdmFsdWUgPSAxMjtcbiAgICByZXR1cm4gcGFkTnVtYmVyKHZhbHVlLCBzaXplLCB0cmltLCBuZWdXcmFwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGF0ZVN0ckdldHRlcihuYW1lLCBzaG9ydEZvcm0sIHN0YW5kQWxvbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdHMpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTtcbiAgICB2YXIgcHJvcFByZWZpeCA9IChzdGFuZEFsb25lID8gJ1NUQU5EQUxPTkUnIDogJycpICsgKHNob3J0Rm9ybSA/ICdTSE9SVCcgOiAnJyk7XG4gICAgdmFyIGdldCA9IHVwcGVyY2FzZShwcm9wUHJlZml4ICsgbmFtZSk7XG5cbiAgICByZXR1cm4gZm9ybWF0c1tnZXRdW3ZhbHVlXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGltZVpvbmVHZXR0ZXIoZGF0ZSwgZm9ybWF0cywgb2Zmc2V0KSB7XG4gIHZhciB6b25lID0gLTEgKiBvZmZzZXQ7XG4gIHZhciBwYWRkZWRab25lID0gKHpvbmUgPj0gMCkgPyAnKycgOiAnJztcblxuICBwYWRkZWRab25lICs9IHBhZE51bWJlcihNYXRoW3pvbmUgPiAwID8gJ2Zsb29yJyA6ICdjZWlsJ10oem9uZSAvIDYwKSwgMikgK1xuICAgICAgICAgICAgICAgIHBhZE51bWJlcihNYXRoLmFicyh6b25lICUgNjApLCAyKTtcblxuICByZXR1cm4gcGFkZGVkWm9uZTtcbn1cblxuZnVuY3Rpb24gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSB7XG4gICAgLy8gMCA9IGluZGV4IG9mIEphbnVhcnlcbiAgICB2YXIgZGF5T2ZXZWVrT25GaXJzdCA9IChuZXcgRGF0ZSh5ZWFyLCAwLCAxKSkuZ2V0RGF5KCk7XG4gICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5ICgrMSB0byBhY2NvdW50IGZvciAxc3QgPSA1KVxuICAgIC8vIDExID0gaW5kZXggb2YgKm5leHQqIFRodXJzZGF5ICgrMSBhY2NvdW50IGZvciAxc3QgPSAxMilcbiAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgKChkYXlPZldlZWtPbkZpcnN0IDw9IDQpID8gNSA6IDEyKSAtIGRheU9mV2Vla09uRmlyc3QpO1xufVxuXG5mdW5jdGlvbiBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGV0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGV0aW1lLmdldEZ1bGxZZWFyKCksIGRhdGV0aW1lLmdldE1vbnRoKCksXG4gICAgICAvLyA0ID0gaW5kZXggb2YgVGh1cnNkYXlcbiAgICAgIGRhdGV0aW1lLmdldERhdGUoKSArICg0IC0gZGF0ZXRpbWUuZ2V0RGF5KCkpKTtcbn1cblxuZnVuY3Rpb24gd2Vla0dldHRlcihzaXplKSB7XG4gICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIGZpcnN0VGh1cnMgPSBnZXRGaXJzdFRodXJzZGF5T2ZZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICAgICB0aGlzVGh1cnMgPSBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGUpO1xuXG4gICAgICB2YXIgZGlmZiA9ICt0aGlzVGh1cnMgLSArZmlyc3RUaHVycyxcbiAgICAgICAgIHJlc3VsdCA9IDEgKyBNYXRoLnJvdW5kKGRpZmYgLyA2LjA0OGU4KTsgLy8gNi4wNDhlOCBtcyBwZXIgd2Vla1xuXG4gICAgICByZXR1cm4gcGFkTnVtYmVyKHJlc3VsdCwgc2l6ZSk7XG4gICB9O1xufVxuXG5mdW5jdGlvbiBhbXBtR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSA8IDEyID8gZm9ybWF0cy5BTVBNU1swXSA6IGZvcm1hdHMuQU1QTVNbMV07XG59XG5cbmZ1bmN0aW9uIGVyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gMCA/IGZvcm1hdHMuRVJBU1swXSA6IGZvcm1hdHMuRVJBU1sxXTtcbn1cblxuZnVuY3Rpb24gbG9uZ0VyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gMCA/IGZvcm1hdHMuRVJBTkFNRVNbMF0gOiBmb3JtYXRzLkVSQU5BTUVTWzFdO1xufVxuXG52YXIgREFURV9GT1JNQVRTID0ge1xuICB5eXl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDQsIDAsIGZhbHNlLCB0cnVlKSxcbiAgICB5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCAyLCAwLCB0cnVlLCB0cnVlKSxcbiAgICAgeTogZGF0ZUdldHRlcignRnVsbFllYXInLCAxLCAwLCBmYWxzZSwgdHJ1ZSksXG4gIE1NTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJyksXG4gICBNTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJywgdHJ1ZSksXG4gICAgTU06IGRhdGVHZXR0ZXIoJ01vbnRoJywgMiwgMSksXG4gICAgIE06IGRhdGVHZXR0ZXIoJ01vbnRoJywgMSwgMSksXG4gIExMTEw6IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJywgZmFsc2UsIHRydWUpLFxuICAgIGRkOiBkYXRlR2V0dGVyKCdEYXRlJywgMiksXG4gICAgIGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAxKSxcbiAgICBISDogZGF0ZUdldHRlcignSG91cnMnLCAyKSxcbiAgICAgSDogZGF0ZUdldHRlcignSG91cnMnLCAxKSxcbiAgICBoaDogZGF0ZUdldHRlcignSG91cnMnLCAyLCAtMTIpLFxuICAgICBoOiBkYXRlR2V0dGVyKCdIb3VycycsIDEsIC0xMiksXG4gICAgbW06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAyKSxcbiAgICAgbTogZGF0ZUdldHRlcignTWludXRlcycsIDEpLFxuICAgIHNzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMiksXG4gICAgIHM6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAxKSxcbiAgICAgLy8gd2hpbGUgSVNPIDg2MDEgcmVxdWlyZXMgZnJhY3Rpb25zIHRvIGJlIHByZWZpeGVkIHdpdGggYC5gIG9yIGAsYFxuICAgICAvLyB3ZSBjYW4gYmUganVzdCBzYWZlbHkgcmVseSBvbiB1c2luZyBgc3NzYCBzaW5jZSB3ZSBjdXJyZW50bHkgZG9uJ3Qgc3VwcG9ydCBzaW5nbGUgb3IgdHdvIGRpZ2l0IGZyYWN0aW9uc1xuICAgc3NzOiBkYXRlR2V0dGVyKCdNaWxsaXNlY29uZHMnLCAzKSxcbiAgRUVFRTogZGF0ZVN0ckdldHRlcignRGF5JyksXG4gICBFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScsIHRydWUpLFxuICAgICBhOiBhbXBtR2V0dGVyLFxuICAgICBaOiB0aW1lWm9uZUdldHRlcixcbiAgICB3dzogd2Vla0dldHRlcigyKSxcbiAgICAgdzogd2Vla0dldHRlcigxKSxcbiAgICAgRzogZXJhR2V0dGVyLFxuICAgICBHRzogZXJhR2V0dGVyLFxuICAgICBHR0c6IGVyYUdldHRlcixcbiAgICAgR0dHRzogbG9uZ0VyYUdldHRlclxufTtcblxudmFyIERBVEVfRk9STUFUU19TUExJVCA9IC8oKD86W155TUxkSGhtc2FaRXdHJ10rKXwoPzonKD86W14nXXwnJykqJyl8KD86RSt8eSt8TSt8TCt8ZCt8SCt8aCt8bSt8cyt8YXxafEcrfHcrKSkoW1xcc1xcU10qKS8sXG4gICAgTlVNQkVSX1NUUklORyA9IC9eLT9cXGQrJC87XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZGF0ZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICAgRm9ybWF0cyBgZGF0ZWAgdG8gYSBzdHJpbmcgYmFzZWQgb24gdGhlIHJlcXVlc3RlZCBgZm9ybWF0YC5cbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50czpcbiAqXG4gKiAgICogYCd5eXl5J2A6IDQgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciAoZS5nLiBBRCAxID0+IDAwMDEsIEFEIDIwMTAgPT4gMjAxMClcbiAqICAgKiBgJ3l5J2A6IDIgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgcGFkZGVkICgwMC05OSkuIChlLmcuIEFEIDIwMDEgPT4gMDEsIEFEIDIwMTAgPT4gMTApXG4gKiAgICogYCd5J2A6IDEgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgZS5nLiAoQUQgMSA9PiAxLCBBRCAxOTkgPT4gMTk5KVxuICogICAqIGAnTU1NTSdgOiBNb250aCBpbiB5ZWFyIChKYW51YXJ5LURlY2VtYmVyKVxuICogICAqIGAnTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbi1EZWMpXG4gKiAgICogYCdNTSdgOiBNb250aCBpbiB5ZWFyLCBwYWRkZWQgKDAxLTEyKVxuICogICAqIGAnTSdgOiBNb250aCBpbiB5ZWFyICgxLTEyKVxuICogICAqIGAnTExMTCdgOiBTdGFuZC1hbG9uZSBtb250aCBpbiB5ZWFyIChKYW51YXJ5LURlY2VtYmVyKVxuICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKVxuICogICAqIGAnZCdgOiBEYXkgaW4gbW9udGggKDEtMzEpXG4gKiAgICogYCdFRUVFJ2A6IERheSBpbiBXZWVrLChTdW5kYXktU2F0dXJkYXkpXG4gKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KVxuICogICAqIGAnSEgnYDogSG91ciBpbiBkYXksIHBhZGRlZCAoMDAtMjMpXG4gKiAgICogYCdIJ2A6IEhvdXIgaW4gZGF5ICgwLTIzKVxuICogICAqIGAnaGgnYDogSG91ciBpbiBBTS9QTSwgcGFkZGVkICgwMS0xMilcbiAqICAgKiBgJ2gnYDogSG91ciBpbiBBTS9QTSwgKDEtMTIpXG4gKiAgICogYCdtbSdgOiBNaW51dGUgaW4gaG91ciwgcGFkZGVkICgwMC01OSlcbiAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpXG4gKiAgICogYCdzcydgOiBTZWNvbmQgaW4gbWludXRlLCBwYWRkZWQgKDAwLTU5KVxuICogICAqIGAncydgOiBTZWNvbmQgaW4gbWludXRlICgwLTU5KVxuICogICAqIGAnc3NzJ2A6IE1pbGxpc2Vjb25kIGluIHNlY29uZCwgcGFkZGVkICgwMDAtOTk5KVxuICogICAqIGAnYSdgOiBBTS9QTSBtYXJrZXJcbiAqICAgKiBgJ1onYDogNCBkaWdpdCAoK3NpZ24pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lem9uZSBvZmZzZXQgKC0xMjAwLSsxMjAwKVxuICogICAqIGAnd3cnYDogV2VlayBvZiB5ZWFyLCBwYWRkZWQgKDAwLTUzKS4gV2VlayAwMSBpcyB0aGUgd2VlayB3aXRoIHRoZSBmaXJzdCBUaHVyc2RheSBvZiB0aGUgeWVhclxuICogICAqIGAndydgOiBXZWVrIG9mIHllYXIgKDAtNTMpLiBXZWVrIDEgaXMgdGhlIHdlZWsgd2l0aCB0aGUgZmlyc3QgVGh1cnNkYXkgb2YgdGhlIHllYXJcbiAqICAgKiBgJ0cnYCwgYCdHRydgLCBgJ0dHRydgOiBUaGUgYWJicmV2aWF0ZWQgZm9ybSBvZiB0aGUgZXJhIHN0cmluZyAoZS5nLiAnQUQnKVxuICogICAqIGAnR0dHRydgOiBUaGUgbG9uZyBmb3JtIG9mIHRoZSBlcmEgc3RyaW5nIChlLmcuICdBbm5vIERvbWluaScpXG4gKlxuICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGFsc28gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgcHJlZGVmaW5lZFxuICogICB7QGxpbmsgZ3VpZGUvaTE4biBsb2NhbGl6YWJsZSBmb3JtYXRzfTpcbiAqXG4gKiAgICogYCdtZWRpdW0nYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5IGg6bW06c3MgYSdgIGZvciBlbl9VUyBsb2NhbGVcbiAqICAgICAoZS5nLiBTZXAgMywgMjAxMCAxMjowNTowOCBQTSlcbiAqICAgKiBgJ3Nob3J0J2A6IGVxdWl2YWxlbnQgdG8gYCdNL2QveXkgaDptbSBhJ2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gOS8zLzEwIDEyOjA1IFBNKVxuICogICAqIGAnZnVsbERhdGUnYDogZXF1aXZhbGVudCB0byBgJ0VFRUUsIE1NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlXG4gKiAgICAgKGUuZy4gRnJpZGF5LCBTZXB0ZW1iZXIgMywgMjAxMClcbiAqICAgKiBgJ2xvbmdEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiBTZXB0ZW1iZXIgMywgMjAxMClcbiAqICAgKiBgJ21lZGl1bURhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gU2VwIDMsIDIwMTApXG4gKiAgICogYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gOS8zLzEwKVxuICogICAqIGAnbWVkaXVtVGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNTowOCBQTSlcbiAqICAgKiBgJ3Nob3J0VGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbSBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNSBQTSlcbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gY29udGFpbiBsaXRlcmFsIHZhbHVlcy4gVGhlc2UgbmVlZCB0byBiZSBlc2NhcGVkIGJ5IHN1cnJvdW5kaW5nIHdpdGggc2luZ2xlIHF1b3RlcyAoZS5nLlxuICogICBgXCJoICdpbiB0aGUgbW9ybmluZydcImApLiBJbiBvcmRlciB0byBvdXRwdXQgYSBzaW5nbGUgcXVvdGUsIGVzY2FwZSBpdCAtIGkuZS4sIHR3byBzaW5nbGUgcXVvdGVzIGluIGEgc2VxdWVuY2VcbiAqICAgKGUuZy4gYFwiaCAnbycnY2xvY2snXCJgKS5cbiAqXG4gKiAgIEFueSBvdGhlciBjaGFyYWN0ZXJzIGluIHRoZSBgZm9ybWF0YCBzdHJpbmcgd2lsbCBiZSBvdXRwdXQgYXMtaXMuXG4gKlxuICogQHBhcmFtIHsoRGF0ZXxudW1iZXJ8c3RyaW5nKX0gZGF0ZSBEYXRlIHRvIGZvcm1hdCBlaXRoZXIgYXMgRGF0ZSBvYmplY3QsIG1pbGxpc2Vjb25kcyAoc3RyaW5nIG9yXG4gKiAgICBudW1iZXIpIG9yIHZhcmlvdXMgSVNPIDg2MDEgZGF0ZXRpbWUgc3RyaW5nIGZvcm1hdHMgKGUuZy4geXl5eS1NTS1kZFRISDptbTpzcy5zc3NaIGFuZCBpdHNcbiAqICAgIHNob3J0ZXIgdmVyc2lvbnMgbGlrZSB5eXl5LU1NLWRkVEhIOm1tWiwgeXl5eS1NTS1kZCBvciB5eXl5TU1kZFRISG1tc3NaKS4gSWYgbm8gdGltZXpvbmUgaXNcbiAqICAgIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGlucHV0LCB0aGUgdGltZSBpcyBjb25zaWRlcmVkIHRvIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gZm9ybWF0IEZvcm1hdHRpbmcgcnVsZXMgKHNlZSBEZXNjcmlwdGlvbikuIElmIG5vdCBzcGVjaWZpZWQsXG4gKiAgICBgbWVkaXVtRGF0ZWAgaXMgdXNlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gdGltZXpvbmUgVGltZXpvbmUgdG8gYmUgdXNlZCBmb3IgZm9ybWF0dGluZy4gSXQgdW5kZXJzdGFuZHMgVVRDL0dNVCBhbmQgdGhlXG4gKiAgICBjb250aW5lbnRhbCBVUyB0aW1lIHpvbmUgYWJicmV2aWF0aW9ucywgYnV0IGZvciBnZW5lcmFsIHVzZSwgdXNlIGEgdGltZSB6b25lIG9mZnNldCwgZm9yXG4gKiAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICogICAgSWYgbm90IHNwZWNpZmllZCwgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyIHdpbGwgYmUgdXNlZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmcgb3IgdGhlIGlucHV0IGlmIGlucHV0IGlzIG5vdCByZWNvZ25pemVkIGFzIGRhdGUvbWlsbGlzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwiZmlsdGVyLWRhdGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjpcbiAgICAgICAgICAgPHNwYW4+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjpcbiAgICAgICAgICA8c3Bhbj57ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTpcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVwifX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTpcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVwifX08L3NwYW4+PGJyPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC9PY3QgMlxcZCwgMjAxMCBcXGR7MSwyfTpcXGR7Mn06XFxkezJ9IChBTXxQTSkvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCIxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzIwMTAtMTAtMlxcZCBcXGR7Mn06XFxkezJ9OlxcZHsyfSAoLXxcXCspP1xcZHs0fS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8xMFxcLzJcXGRcXC8yMDEwIEAgXFxkezEsMn06XFxkezJ9KEFNfFBNKS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6XFxcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVxcXCJcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8xMFxcLzJcXGRcXC8yMDEwIGF0IFxcZHsxLDJ9OlxcZHsyfShBTXxQTSkvKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5kYXRlRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIGRhdGVGaWx0ZXIoJGxvY2FsZSkge1xuXG5cbiAgdmFyIFJfSVNPODYwMV9TVFIgPSAvXihcXGR7NH0pLT8oXFxkXFxkKS0/KFxcZFxcZCkoPzpUKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlxcLihcXGQrKSk/KT8pPyhafChbKy1dKShcXGRcXGQpOj8oXFxkXFxkKSk/KT8kLztcbiAgICAgICAgICAgICAgICAgICAgIC8vIDEgICAgICAgIDIgICAgICAgMyAgICAgICAgIDQgICAgICAgICAgNSAgICAgICAgICA2ICAgICAgICAgIDcgICAgICAgICAgOCAgOSAgICAgMTAgICAgICAxMVxuICBmdW5jdGlvbiBqc29uU3RyaW5nVG9EYXRlKHN0cmluZykge1xuICAgIHZhciBtYXRjaDtcbiAgICBpZiAoKG1hdGNoID0gc3RyaW5nLm1hdGNoKFJfSVNPODYwMV9TVFIpKSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKSxcbiAgICAgICAgICB0ekhvdXIgPSAwLFxuICAgICAgICAgIHR6TWluICA9IDAsXG4gICAgICAgICAgZGF0ZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENGdWxsWWVhciA6IGRhdGUuc2V0RnVsbFllYXIsXG4gICAgICAgICAgdGltZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENIb3VycyA6IGRhdGUuc2V0SG91cnM7XG5cbiAgICAgIGlmIChtYXRjaFs5XSkge1xuICAgICAgICB0ekhvdXIgPSB0b0ludChtYXRjaFs5XSArIG1hdGNoWzEwXSk7XG4gICAgICAgIHR6TWluID0gdG9JbnQobWF0Y2hbOV0gKyBtYXRjaFsxMV0pO1xuICAgICAgfVxuICAgICAgZGF0ZVNldHRlci5jYWxsKGRhdGUsIHRvSW50KG1hdGNoWzFdKSwgdG9JbnQobWF0Y2hbMl0pIC0gMSwgdG9JbnQobWF0Y2hbM10pKTtcbiAgICAgIHZhciBoID0gdG9JbnQobWF0Y2hbNF0gfHwgMCkgLSB0ekhvdXI7XG4gICAgICB2YXIgbSA9IHRvSW50KG1hdGNoWzVdIHx8IDApIC0gdHpNaW47XG4gICAgICB2YXIgcyA9IHRvSW50KG1hdGNoWzZdIHx8IDApO1xuICAgICAgdmFyIG1zID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KCcwLicgKyAobWF0Y2hbN10gfHwgMCkpICogMTAwMCk7XG4gICAgICB0aW1lU2V0dGVyLmNhbGwoZGF0ZSwgaCwgbSwgcywgbXMpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuXG4gIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIHRpbWV6b25lKSB7XG4gICAgdmFyIHRleHQgPSAnJyxcbiAgICAgICAgcGFydHMgPSBbXSxcbiAgICAgICAgZm4sIG1hdGNoO1xuXG4gICAgZm9ybWF0ID0gZm9ybWF0IHx8ICdtZWRpdW1EYXRlJztcbiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7XG4gICAgaWYgKGlzU3RyaW5nKGRhdGUpKSB7XG4gICAgICBkYXRlID0gTlVNQkVSX1NUUklORy50ZXN0KGRhdGUpID8gdG9JbnQoZGF0ZSkgOiBqc29uU3RyaW5nVG9EYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihkYXRlKSkge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmICghaXNEYXRlKGRhdGUpIHx8ICFpc0Zpbml0ZShkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIHdoaWxlIChmb3JtYXQpIHtcbiAgICAgIG1hdGNoID0gREFURV9GT1JNQVRTX1NQTElULmV4ZWMoZm9ybWF0KTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBwYXJ0cyA9IGNvbmNhdChwYXJ0cywgbWF0Y2gsIDEpO1xuICAgICAgICBmb3JtYXQgPSBwYXJ0cy5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzLnB1c2goZm9ybWF0KTtcbiAgICAgICAgZm9ybWF0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lem9uZSkge1xuICAgICAgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZGF0ZVRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIGRhdGUgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCB0cnVlKTtcbiAgICB9XG4gICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZuID0gREFURV9GT1JNQVRTW3ZhbHVlXTtcbiAgICAgIHRleHQgKz0gZm4gPyBmbihkYXRlLCAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMsIGRhdGVUaW1lem9uZU9mZnNldClcbiAgICAgICAgICAgICAgICAgOiB2YWx1ZSA9PT0gJ1xcJ1xcJycgPyAnXFwnJyA6IHZhbHVlLnJlcGxhY2UoLyheJ3wnJCkvZywgJycpLnJlcGxhY2UoLycnL2csICdcXCcnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0ZXh0O1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUganNvblxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICAgQWxsb3dzIHlvdSB0byBjb252ZXJ0IGEgSmF2YVNjcmlwdCBvYmplY3QgaW50byBKU09OIHN0cmluZy5cbiAqXG4gKiAgIFRoaXMgZmlsdGVyIGlzIG1vc3RseSB1c2VmdWwgZm9yIGRlYnVnZ2luZy4gV2hlbiB1c2luZyB0aGUgZG91YmxlIGN1cmx5IHt7dmFsdWV9fSBub3RhdGlvblxuICogICB0aGUgYmluZGluZyBpcyBhdXRvbWF0aWNhbGx5IGNvbnZlcnRlZCB0byBKU09OLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IEFueSBKYXZhU2NyaXB0IG9iamVjdCAoaW5jbHVkaW5nIGFycmF5cyBhbmQgcHJpbWl0aXZlIHR5cGVzKSB0byBmaWx0ZXIuXG4gKiBAcGFyYW0ge251bWJlcj19IHNwYWNpbmcgVGhlIG51bWJlciBvZiBzcGFjZXMgdG8gdXNlIHBlciBpbmRlbnRhdGlvbiwgZGVmYXVsdHMgdG8gMi5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEpTT04gc3RyaW5nLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cImZpbHRlci1qc29uXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHByZSBpZD1cImRlZmF1bHQtc3BhY2luZ1wiPnt7IHsnbmFtZSc6J3ZhbHVlJ30gfCBqc29uIH19PC9wcmU+XG4gICAgICAgPHByZSBpZD1cImN1c3RvbS1zcGFjaW5nXCI+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb246NCB9fTwvcHJlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGpzb25pZnkgZmlsdGVyZWQgb2JqZWN0cycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RlZmF1bHQtc3BhY2luZycpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiB7Mn1cIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXN0b20tc3BhY2luZycpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiB7NH1cIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xuZnVuY3Rpb24ganNvbkZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgc3BhY2luZykge1xuICAgIGlmIChpc1VuZGVmaW5lZChzcGFjaW5nKSkge1xuICAgICAgICBzcGFjaW5nID0gMjtcbiAgICB9XG4gICAgcmV0dXJuIHRvSnNvbihvYmplY3QsIHNwYWNpbmcpO1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbG93ZXJjYXNlXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gbG93ZXJjYXNlLlxuICpcbiAqIFNlZSB0aGUge0BsaW5rIG5nLnVwcGVyY2FzZSB1cHBlcmNhc2UgZmlsdGVyIGRvY3VtZW50YXRpb259IGZvciBhIGZ1bmN0aW9uYWxseSBpZGVudGljYWwgZXhhbXBsZS5cbiAqXG4gKiBAc2VlIGFuZ3VsYXIubG93ZXJjYXNlXG4gKi9cbnZhciBsb3dlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKGxvd2VyY2FzZSk7XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSB1cHBlcmNhc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIHN0cmluZyB0byB1cHBlcmNhc2UuXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwidXBwZXJjYXNlRmlsdGVyRXhhbXBsZVwiIG5hbWU9XCJmaWx0ZXItdXBwZXJjYXNlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd1cHBlcmNhc2VGaWx0ZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJ1RoaXMgaXMgYSB0aXRsZSc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPCEtLSBUaGlzIHRpdGxlIHNob3VsZCBiZSBmb3JtYXR0ZWQgbm9ybWFsbHkgLS0+XG4gICAgICAgICA8aDE+e3t0aXRsZX19PC9oMT5cbiAgICAgICAgIDwhLS0gVGhpcyB0aXRsZSBzaG91bGQgYmUgY2FwaXRhbGl6ZWQgLS0+XG4gICAgICAgICA8aDE+e3t0aXRsZSB8IHVwcGVyY2FzZX19PC9oMT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgdXBwZXJjYXNlRmlsdGVyID0gdmFsdWVGbih1cHBlcmNhc2UpO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGxpbWl0VG9cbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgbmV3IGFycmF5IG9yIHN0cmluZyBjb250YWluaW5nIG9ubHkgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGVsZW1lbnRzLiBUaGUgZWxlbWVudHMgYXJlXG4gKiB0YWtlbiBmcm9tIGVpdGhlciB0aGUgYmVnaW5uaW5nIG9yIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheSwgc3RyaW5nIG9yIG51bWJlciwgYXMgc3BlY2lmaWVkIGJ5XG4gKiB0aGUgdmFsdWUgYW5kIHNpZ24gKHBvc2l0aXZlIG9yIG5lZ2F0aXZlKSBvZiBgbGltaXRgLiBPdGhlciBhcnJheS1saWtlIG9iamVjdHMgYXJlIGFsc28gc3VwcG9ydGVkXG4gKiAoZS5nLiBhcnJheSBzdWJjbGFzc2VzLCBOb2RlTGlzdHMsIGpxTGl0ZS9qUXVlcnkgY29sbGVjdGlvbnMgZXRjKS4gSWYgYSBudW1iZXIgaXMgdXNlZCBhcyBpbnB1dCxcbiAqIGl0IGlzIGNvbnZlcnRlZCB0byBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fEFycmF5TGlrZXxzdHJpbmd8bnVtYmVyfSBpbnB1dCAtIEFycmF5L2FycmF5LWxpa2UsIHN0cmluZyBvciBudW1iZXIgdG8gYmUgbGltaXRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGltaXQgLSBUaGUgbGVuZ3RoIG9mIHRoZSByZXR1cm5lZCBhcnJheSBvciBzdHJpbmcuIElmIHRoZSBgbGltaXRgIG51bWJlclxuICogICAgIGlzIHBvc2l0aXZlLCBgbGltaXRgIG51bWJlciBvZiBpdGVtcyBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNvdXJjZSBhcnJheS9zdHJpbmcgYXJlIGNvcGllZC5cbiAqICAgICBJZiB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLCBgbGltaXRgIG51bWJlciAgb2YgaXRlbXMgZnJvbSB0aGUgZW5kIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nXG4gKiAgICAgYXJlIGNvcGllZC4gVGhlIGBsaW1pdGAgd2lsbCBiZSB0cmltbWVkIGlmIGl0IGV4Y2VlZHMgYGFycmF5Lmxlbmd0aGAuIElmIGBsaW1pdGAgaXMgdW5kZWZpbmVkLFxuICogICAgIHRoZSBpbnB1dCB3aWxsIGJlIHJldHVybmVkIHVuY2hhbmdlZC5cbiAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gYmVnaW4gLSBJbmRleCBhdCB3aGljaCB0byBiZWdpbiBsaW1pdGF0aW9uLiBBcyBhIG5lZ2F0aXZlIGluZGV4LFxuICogICAgIGBiZWdpbmAgaW5kaWNhdGVzIGFuIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGlucHV0YC4gRGVmYXVsdHMgdG8gYDBgLlxuICogQHJldHVybnMge0FycmF5fHN0cmluZ30gQSBuZXcgc3ViLWFycmF5IG9yIHN1YnN0cmluZyBvZiBsZW5ndGggYGxpbWl0YCBvciBsZXNzIGlmIHRoZSBpbnB1dCBoYWRcbiAqICAgICBsZXNzIHRoYW4gYGxpbWl0YCBlbGVtZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibGltaXRUb0V4YW1wbGVcIiBuYW1lPVwibGltaXQtdG8tZmlsdGVyXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdsaW1pdFRvRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5udW1iZXJzID0gWzEsMiwzLDQsNSw2LDcsOCw5XTtcbiAgICAgICAgICAgICAkc2NvcGUubGV0dGVycyA9IFwiYWJjZGVmZ2hpXCI7XG4gICAgICAgICAgICAgJHNjb3BlLmxvbmdOdW1iZXIgPSAyMzQ1NDMyMzQyO1xuICAgICAgICAgICAgICRzY29wZS5udW1MaW1pdCA9IDM7XG4gICAgICAgICAgICAgJHNjb3BlLmxldHRlckxpbWl0ID0gMztcbiAgICAgICAgICAgICAkc2NvcGUubG9uZ051bWJlckxpbWl0ID0gMztcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICBMaW1pdCB7e251bWJlcnN9fSB0bzpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cIm51bUxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IG51bWJlcnM6IHt7IG51bWJlcnMgfCBsaW1pdFRvOm51bUxpbWl0IH19PC9wPlxuICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgTGltaXQge3tsZXR0ZXJzfX0gdG86XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJsZXR0ZXJMaW1pdFwiPlxuICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDxwPk91dHB1dCBsZXR0ZXJzOiB7eyBsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCB9fTwvcD5cbiAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIExpbWl0IHt7bG9uZ051bWJlcn19IHRvOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibG9uZ051bWJlckxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IGxvbmcgbnVtYmVyOiB7eyBsb25nTnVtYmVyIHwgbGltaXRUbzpsb25nTnVtYmVyTGltaXQgfX08L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBudW1MaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbnVtTGltaXQnKSk7XG4gICAgICAgdmFyIGxldHRlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsZXR0ZXJMaW1pdCcpKTtcbiAgICAgICB2YXIgbG9uZ051bWJlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsb25nTnVtYmVyTGltaXQnKSk7XG4gICAgICAgdmFyIGxpbWl0ZWROdW1iZXJzID0gZWxlbWVudChieS5iaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKTtcbiAgICAgICB2YXIgbGltaXRlZExldHRlcnMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0JykpO1xuICAgICAgIHZhciBsaW1pdGVkTG9uZ051bWJlciA9IGVsZW1lbnQoYnkuYmluZGluZygnbG9uZ051bWJlciB8IGxpbWl0VG86bG9uZ051bWJlckxpbWl0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsaW1pdCB0aGUgbnVtYmVyIGFycmF5IHRvIGZpcnN0IHRocmVlIGl0ZW1zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobnVtTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsZXR0ZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxvbmdOdW1iZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsM10nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmMnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0Jyk7XG4gICAgICAgfSk7XG5cbiAgICAgICAvLyBUaGVyZSBpcyBhIGJ1ZyBpbiBzYWZhcmkgYW5kIHByb3RyYWN0b3IgdGhhdCBkb2Vzbid0IGxpa2UgdGhlIG1pbnVzIGtleVxuICAgICAgIC8vIGl0KCdzaG91bGQgdXBkYXRlIHRoZSBvdXRwdXQgd2hlbiAtMyBpcyBlbnRlcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LnNlbmRLZXlzKCctMycpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGxvbmdOdW1iZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBsb25nTnVtYmVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbNyw4LDldJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogZ2hpJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDM0MicpO1xuICAgICAgIC8vIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBub3QgZXhjZWVkIHRoZSBtYXhpbXVtIHNpemUgb2YgaW5wdXQgYXJyYXknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7XG4gICAgICAgICBsb25nTnVtYmVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbG9uZ051bWJlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsMyw0LDUsNiw3LDgsOV0nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmNkZWZnaGknKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0NTQzMjM0MicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4qL1xuZnVuY3Rpb24gbGltaXRUb0ZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBsaW1pdCwgYmVnaW4pIHtcbiAgICBpZiAoTWF0aC5hYnMoTnVtYmVyKGxpbWl0KSkgPT09IEluZmluaXR5KSB7XG4gICAgICBsaW1pdCA9IE51bWJlcihsaW1pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbWl0ID0gdG9JbnQobGltaXQpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXJOYU4obGltaXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICBpZiAoaXNOdW1iZXIoaW5wdXQpKSBpbnB1dCA9IGlucHV0LnRvU3RyaW5nKCk7XG4gICAgaWYgKCFpc0FycmF5TGlrZShpbnB1dCkpIHJldHVybiBpbnB1dDtcblxuICAgIGJlZ2luID0gKCFiZWdpbiB8fCBpc05hTihiZWdpbikpID8gMCA6IHRvSW50KGJlZ2luKTtcbiAgICBiZWdpbiA9IChiZWdpbiA8IDApID8gTWF0aC5tYXgoMCwgaW5wdXQubGVuZ3RoICsgYmVnaW4pIDogYmVnaW47XG5cbiAgICBpZiAobGltaXQgPj0gMCkge1xuICAgICAgcmV0dXJuIHNsaWNlRm4oaW5wdXQsIGJlZ2luLCBiZWdpbiArIGxpbWl0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGJlZ2luID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzbGljZUZuKGlucHV0LCBsaW1pdCwgaW5wdXQubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzbGljZUZuKGlucHV0LCBNYXRoLm1heCgwLCBiZWdpbiArIGxpbWl0KSwgYmVnaW4pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gc2xpY2VGbihpbnB1dCwgYmVnaW4sIGVuZCkge1xuICBpZiAoaXNTdHJpbmcoaW5wdXQpKSByZXR1cm4gaW5wdXQuc2xpY2UoYmVnaW4sIGVuZCk7XG5cbiAgcmV0dXJuIHNsaWNlLmNhbGwoaW5wdXQsIGJlZ2luLCBlbmQpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG9yZGVyQnlcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGl0ZW1zIGZyb20gdGhlIHNwZWNpZmllZCBgY29sbGVjdGlvbmAsIG9yZGVyZWQgYnkgYSBgY29tcGFyYXRvcmBcbiAqIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSB2YWx1ZXMgY29tcHV0ZWQgdXNpbmcgdGhlIGBleHByZXNzaW9uYCBwcmVkaWNhdGUuXG4gKlxuICogRm9yIGV4YW1wbGUsIGBbe2lkOiAnZm9vJ30sIHtpZDogJ2Jhcid9XSB8IG9yZGVyQnk6J2lkJ2Agd291bGQgcmVzdWx0IGluXG4gKiBgW3tpZDogJ2Jhcid9LCB7aWQ6ICdmb28nfV1gLlxuICpcbiAqIFRoZSBgY29sbGVjdGlvbmAgY2FuIGJlIGFuIEFycmF5IG9yIGFycmF5LWxpa2Ugb2JqZWN0IChlLmcuIE5vZGVMaXN0LCBqUXVlcnkgb2JqZWN0LCBUeXBlZEFycmF5LFxuICogU3RyaW5nLCBldGMpLlxuICpcbiAqIFRoZSBgZXhwcmVzc2lvbmAgY2FuIGJlIGEgc2luZ2xlIHByZWRpY2F0ZSwgb3IgYSBsaXN0IG9mIHByZWRpY2F0ZXMgZWFjaCBzZXJ2aW5nIGFzIGEgdGllLWJyZWFrZXJcbiAqIGZvciB0aGUgcHJlY2VkaW5nIG9uZS4gVGhlIGBleHByZXNzaW9uYCBpcyBldmFsdWF0ZWQgYWdhaW5zdCBlYWNoIGl0ZW0gYW5kIHRoZSBvdXRwdXQgaXMgdXNlZFxuICogZm9yIGNvbXBhcmluZyB3aXRoIG90aGVyIGl0ZW1zLlxuICpcbiAqIFlvdSBjYW4gY2hhbmdlIHRoZSBzb3J0aW5nIG9yZGVyIGJ5IHNldHRpbmcgYHJldmVyc2VgIHRvIGB0cnVlYC4gQnkgZGVmYXVsdCwgaXRlbXMgYXJlIHNvcnRlZCBpblxuICogYXNjZW5kaW5nIG9yZGVyLlxuICpcbiAqIFRoZSBjb21wYXJpc29uIGlzIGRvbmUgdXNpbmcgdGhlIGBjb21wYXJhdG9yYCBmdW5jdGlvbi4gSWYgbm9uZSBpcyBzcGVjaWZpZWQsIGEgZGVmYXVsdCwgYnVpbHQtaW5cbiAqIGNvbXBhcmF0b3IgaXMgdXNlZCAoc2VlIGJlbG93IGZvciBkZXRhaWxzIC0gaW4gYSBudXRzaGVsbCwgaXQgY29tcGFyZXMgbnVtYmVycyBudW1lcmljYWxseSBhbmRcbiAqIHN0cmluZ3MgYWxwaGFiZXRpY2FsbHkpLlxuICpcbiAqICMjIyBVbmRlciB0aGUgaG9vZFxuICpcbiAqIE9yZGVyaW5nIHRoZSBzcGVjaWZpZWQgYGNvbGxlY3Rpb25gIGhhcHBlbnMgaW4gdHdvIHBoYXNlczpcbiAqXG4gKiAxLiBBbGwgaXRlbXMgYXJlIHBhc3NlZCB0aHJvdWdoIHRoZSBwcmVkaWNhdGUgKG9yIHByZWRpY2F0ZXMpLCBhbmQgdGhlIHJldHVybmVkIHZhbHVlcyBhcmUgc2F2ZWRcbiAqICAgIGFsb25nIHdpdGggdGhlaXIgdHlwZSAoYHN0cmluZ2AsIGBudW1iZXJgIGV0YykuIEZvciBleGFtcGxlLCBhbiBpdGVtIGB7bGFiZWw6ICdmb28nfWAsIHBhc3NlZFxuICogICAgdGhyb3VnaCBhIHByZWRpY2F0ZSB0aGF0IGV4dHJhY3RzIHRoZSB2YWx1ZSBvZiB0aGUgYGxhYmVsYCBwcm9wZXJ0eSwgd291bGQgYmUgdHJhbnNmb3JtZWQgdG86XG4gKiAgICBgYGBcbiAqICAgIHtcbiAqICAgICAgdmFsdWU6ICdmb28nLFxuICogICAgICB0eXBlOiAnc3RyaW5nJyxcbiAqICAgICAgaW5kZXg6IC4uLlxuICogICAgfVxuICogICAgYGBgXG4gKiAyLiBUaGUgY29tcGFyYXRvciBmdW5jdGlvbiBpcyB1c2VkIHRvIHNvcnQgdGhlIGl0ZW1zLCBiYXNlZCBvbiB0aGUgZGVyaXZlZCB2YWx1ZXMsIHR5cGVzIGFuZFxuICogICAgaW5kaWNlcy5cbiAqXG4gKiBJZiB5b3UgdXNlIGEgY3VzdG9tIGNvbXBhcmF0b3IsIGl0IHdpbGwgYmUgY2FsbGVkIHdpdGggcGFpcnMgb2Ygb2JqZWN0cyBvZiB0aGUgZm9ybVxuICogYHt2YWx1ZTogLi4uLCB0eXBlOiAnLi4uJywgaW5kZXg6IC4uLn1gIGFuZCBpcyBleHBlY3RlZCB0byByZXR1cm4gYDBgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVhbFxuICogKGFzIGZhciBhcyB0aGUgY29tcGFyYXRvciBpcyBjb25jZXJuZWQpLCBgLTFgIGlmIHRoZSAxc3Qgb25lIHNob3VsZCBiZSByYW5rZWQgaGlnaGVyIHRoYW4gdGhlXG4gKiBzZWNvbmQsIG9yIGAxYCBvdGhlcndpc2UuXG4gKlxuICogSW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgdGhlIHNvcnRpbmcgd2lsbCBiZSBkZXRlcm1pbmlzdGljIGFjcm9zcyBwbGF0Zm9ybXMsIGlmIG5vbmUgb2YgdGhlXG4gKiBzcGVjaWZpZWQgcHJlZGljYXRlcyBjYW4gZGlzdGluZ3Vpc2ggYmV0d2VlbiB0d28gaXRlbXMsIGBvcmRlckJ5YCB3aWxsIGF1dG9tYXRpY2FsbHkgaW50cm9kdWNlIGFcbiAqIGR1bW15IHByZWRpY2F0ZSB0aGF0IHJldHVybnMgdGhlIGl0ZW0ncyBpbmRleCBhcyBgdmFsdWVgLlxuICogKElmIHlvdSBhcmUgdXNpbmcgYSBjdXN0b20gY29tcGFyYXRvciwgbWFrZSBzdXJlIGl0IGNhbiBoYW5kbGUgdGhpcyBwcmVkaWNhdGUgYXMgd2VsbC4pXG4gKlxuICogSWYgYSBjdXN0b20gY29tcGFyYXRvciBzdGlsbCBjYW4ndCBkaXN0aW5ndWlzaCBiZXR3ZWVuIHR3byBpdGVtcywgdGhlbiB0aGV5IHdpbGwgYmUgc29ydGVkIGJhc2VkXG4gKiBvbiB0aGVpciBpbmRleCB1c2luZyB0aGUgYnVpbHQtaW4gY29tcGFyYXRvci5cbiAqXG4gKiBGaW5hbGx5LCBpbiBhbiBhdHRlbXB0IHRvIHNpbXBsaWZ5IHRoaW5ncywgaWYgYSBwcmVkaWNhdGUgcmV0dXJucyBhbiBvYmplY3QgYXMgdGhlIGV4dHJhY3RlZFxuICogdmFsdWUgZm9yIGFuIGl0ZW0sIGBvcmRlckJ5YCB3aWxsIHRyeSB0byBjb252ZXJ0IHRoYXQgb2JqZWN0IHRvIGEgcHJpbWl0aXZlIHZhbHVlLCBiZWZvcmUgcGFzc2luZ1xuICogaXQgdG8gdGhlIGNvbXBhcmF0b3IuIFRoZSBmb2xsb3dpbmcgcnVsZXMgZ292ZXJuIHRoZSBjb252ZXJzaW9uOlxuICpcbiAqIDEuIElmIHRoZSBvYmplY3QgaGFzIGEgYHZhbHVlT2YoKWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhIHByaW1pdGl2ZSwgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlXG4gKiAgICB1c2VkIGluc3RlYWQuPGJyIC8+XG4gKiAgICAoSWYgdGhlIG9iamVjdCBoYXMgYSBgdmFsdWVPZigpYCBtZXRob2QgdGhhdCByZXR1cm5zIGFub3RoZXIgb2JqZWN0LCB0aGVuIHRoZSByZXR1cm5lZCBvYmplY3RcbiAqICAgIHdpbGwgYmUgdXNlZCBpbiBzdWJzZXF1ZW50IHN0ZXBzLilcbiAqIDIuIElmIHRoZSBvYmplY3QgaGFzIGEgY3VzdG9tIGB0b1N0cmluZygpYCBtZXRob2QgKGkuZS4gbm90IHRoZSBvbmUgaW5oZXJpdGVkIGZyb20gYE9iamVjdGApIHRoYXRcbiAqICAgIHJldHVybnMgYSBwcmltaXRpdmUsIGl0cyByZXR1cm4gdmFsdWUgd2lsbCBiZSB1c2VkIGluc3RlYWQuPGJyIC8+XG4gKiAgICAoSWYgdGhlIG9iamVjdCBoYXMgYSBgdG9TdHJpbmcoKWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhbm90aGVyIG9iamVjdCwgdGhlbiB0aGUgcmV0dXJuZWQgb2JqZWN0XG4gKiAgICB3aWxsIGJlIHVzZWQgaW4gc3Vic2VxdWVudCBzdGVwcy4pXG4gKiAzLiBObyBjb252ZXJzaW9uOyB0aGUgb2JqZWN0IGl0c2VsZiBpcyB1c2VkLlxuICpcbiAqICMjIyBUaGUgZGVmYXVsdCBjb21wYXJhdG9yXG4gKlxuICogVGhlIGRlZmF1bHQsIGJ1aWx0LWluIGNvbXBhcmF0b3Igc2hvdWxkIGJlIHN1ZmZpY2llbnQgZm9yIG1vc3QgdXNlY2FzZXMuIEluIHNob3J0LCBpdCBjb21wYXJlc1xuICogbnVtYmVycyBudW1lcmljYWxseSwgc3RyaW5ncyBhbHBoYWJldGljYWxseSAoYW5kIGNhc2UtaW5zZW5zaXRpdmVseSksIGZvciBvYmplY3RzIGZhbGxzIGJhY2sgdG9cbiAqIHVzaW5nIHRoZWlyIGluZGV4IGluIHRoZSBvcmlnaW5hbCBjb2xsZWN0aW9uLCBhbmQgc29ydHMgdmFsdWVzIG9mIGRpZmZlcmVudCB0eXBlcyBieSB0eXBlLlxuICpcbiAqIE1vcmUgc3BlY2lmaWNhbGx5LCBpdCBmb2xsb3dzIHRoZXNlIHN0ZXBzIHRvIGRldGVybWluZSB0aGUgcmVsYXRpdmUgb3JkZXIgb2YgaXRlbXM6XG4gKlxuICogMS4gSWYgdGhlIGNvbXBhcmVkIHZhbHVlcyBhcmUgb2YgZGlmZmVyZW50IHR5cGVzLCBjb21wYXJlIHRoZSB0eXBlcyB0aGVtc2VsdmVzIGFscGhhYmV0aWNhbGx5LlxuICogMi4gSWYgYm90aCB2YWx1ZXMgYXJlIG9mIHR5cGUgYHN0cmluZ2AsIGNvbXBhcmUgdGhlbSBhbHBoYWJldGljYWxseSBpbiBhIGNhc2UtIGFuZFxuICogICAgbG9jYWxlLWluc2Vuc2l0aXZlIHdheS5cbiAqIDMuIElmIGJvdGggdmFsdWVzIGFyZSBvYmplY3RzLCBjb21wYXJlIHRoZWlyIGluZGljZXMgaW5zdGVhZC5cbiAqIDQuIE90aGVyd2lzZSwgcmV0dXJuOlxuICogICAgLSAgYDBgLCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVhbCAoYnkgc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb24sIGkuZS4gdXNpbmcgYD09PWApLlxuICogICAgLSBgLTFgLCBpZiB0aGUgMXN0IHZhbHVlIGlzIFwibGVzcyB0aGFuXCIgdGhlIDJuZCB2YWx1ZSAoY29tcGFyZWQgdXNpbmcgdGhlIGA8YCBvcGVyYXRvcikuXG4gKiAgICAtICBgMWAsIG90aGVyd2lzZS5cbiAqXG4gKiAqKk5vdGU6KiogSWYgeW91IG5vdGljZSBudW1iZXJzIG5vdCBiZWluZyBzb3J0ZWQgYXMgZXhwZWN0ZWQsIG1ha2Ugc3VyZSB0aGV5IGFyZSBhY3R1YWxseSBiZWluZ1xuICogICAgICAgICAgIHNhdmVkIGFzIG51bWJlcnMgYW5kIG5vdCBzdHJpbmdzLlxuICogKipOb3RlOioqIEZvciB0aGUgcHVycG9zZSBvZiBzb3J0aW5nLCBgbnVsbGAgdmFsdWVzIGFyZSB0cmVhdGVkIGFzIHRoZSBzdHJpbmcgYCdudWxsJ2AgKGkuZS5cbiAqICAgICAgICAgICBgdHlwZTogJ3N0cmluZydgLCBgdmFsdWU6ICdudWxsJ2ApLiBUaGlzIG1heSBjYXVzZSB1bmV4cGVjdGVkIHNvcnQgb3JkZXIgcmVsYXRpdmUgdG9cbiAqICAgICAgICAgICBvdGhlciB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtBcnJheXxBcnJheUxpa2V9IGNvbGxlY3Rpb24gLSBUaGUgY29sbGVjdGlvbiAoYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QpIHRvIHNvcnQuXG4gKiBAcGFyYW0geyhGdW5jdGlvbnxzdHJpbmd8QXJyYXkuPEZ1bmN0aW9ufHN0cmluZz4pPX0gZXhwcmVzc2lvbiAtIEEgcHJlZGljYXRlIChvciBsaXN0IG9mXG4gKiAgICBwcmVkaWNhdGVzKSB0byBiZSB1c2VkIGJ5IHRoZSBjb21wYXJhdG9yIHRvIGRldGVybWluZSB0aGUgb3JkZXIgb2YgZWxlbWVudHMuXG4gKlxuICogICAgQ2FuIGJlIG9uZSBvZjpcbiAqXG4gKiAgICAtIGBGdW5jdGlvbmA6IEEgZ2V0dGVyIGZ1bmN0aW9uLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggZWFjaCBpdGVtIGFzIGFyZ3VtZW50IGFuZFxuICogICAgICB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZCBmb3Igc29ydGluZy5cbiAqICAgIC0gYHN0cmluZ2A6IEFuIEFuZ3VsYXIgZXhwcmVzc2lvbi4gVGhpcyBleHByZXNzaW9uIHdpbGwgYmUgZXZhbHVhdGVkIGFnYWluc3QgZWFjaCBpdGVtIGFuZCB0aGVcbiAqICAgICAgcmVzdWx0IHdpbGwgYmUgdXNlZCBmb3Igc29ydGluZy4gRm9yIGV4YW1wbGUsIHVzZSBgJ2xhYmVsJ2AgdG8gc29ydCBieSBhIHByb3BlcnR5IGNhbGxlZFxuICogICAgICBgbGFiZWxgIG9yIGAnbGFiZWwuc3Vic3RyaW5nKDAsIDMpJ2AgdG8gc29ydCBieSB0aGUgZmlyc3QgMyBjaGFyYWN0ZXJzIG9mIHRoZSBgbGFiZWxgXG4gKiAgICAgIHByb3BlcnR5LjxiciAvPlxuICogICAgICAoVGhlIHJlc3VsdCBvZiBhIGNvbnN0YW50IGV4cHJlc3Npb24gaXMgaW50ZXJwcmV0ZWQgYXMgYSBwcm9wZXJ0eSBuYW1lIHRvIGJlIHVzZWQgZm9yXG4gKiAgICAgIGNvbXBhcmlzb24uIEZvciBleGFtcGxlLCB1c2UgYCdcInNwZWNpYWwgbmFtZVwiJ2AgKG5vdGUgdGhlIGV4dHJhIHBhaXIgb2YgcXVvdGVzKSB0byBzb3J0IGJ5IGFcbiAqICAgICAgcHJvcGVydHkgY2FsbGVkIGBzcGVjaWFsIG5hbWVgLik8YnIgLz5cbiAqICAgICAgQW4gZXhwcmVzc2lvbiBjYW4gYmUgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGArYCBvciBgLWAgdG8gY29udHJvbCB0aGUgc29ydGluZyBkaXJlY3Rpb24sXG4gKiAgICAgIGFzY2VuZGluZyBvciBkZXNjZW5kaW5nLiBGb3IgZXhhbXBsZSwgYCcrbGFiZWwnYCBvciBgJy1sYWJlbCdgLiBJZiBubyBwcm9wZXJ0eSBpcyBwcm92aWRlZCxcbiAqICAgICAgKGUuZy4gYCcrJ2Agb3IgYCctJ2ApLCB0aGUgY29sbGVjdGlvbiBlbGVtZW50IGl0c2VsZiBpcyB1c2VkIGluIGNvbXBhcmlzb25zLlxuICogICAgLSBgQXJyYXlgOiBBbiBhcnJheSBvZiBmdW5jdGlvbiBhbmQvb3Igc3RyaW5nIHByZWRpY2F0ZXMuIElmIGEgcHJlZGljYXRlIGNhbm5vdCBkZXRlcm1pbmUgdGhlXG4gKiAgICAgIHJlbGF0aXZlIG9yZGVyIG9mIHR3byBpdGVtcywgdGhlIG5leHQgcHJlZGljYXRlIGlzIHVzZWQgYXMgYSB0aWUtYnJlYWtlci5cbiAqXG4gKiAqKk5vdGU6KiogSWYgdGhlIHByZWRpY2F0ZSBpcyBtaXNzaW5nIG9yIGVtcHR5IHRoZW4gaXQgZGVmYXVsdHMgdG8gYCcrJ2AuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gcmV2ZXJzZSAtIElmIGB0cnVlYCwgcmV2ZXJzZSB0aGUgc29ydGluZyBvcmRlci5cbiAqIEBwYXJhbSB7KEZ1bmN0aW9uKT19IGNvbXBhcmF0b3IgLSBUaGUgY29tcGFyYXRvciBmdW5jdGlvbiB1c2VkIHRvIGRldGVybWluZSB0aGUgcmVsYXRpdmUgb3JkZXIgb2ZcbiAqICAgIHZhbHVlIHBhaXJzLiBJZiBvbWl0dGVkLCB0aGUgYnVpbHQtaW4gY29tcGFyYXRvciB3aWxsIGJlIHVzZWQuXG4gKlxuICogQHJldHVybnMge0FycmF5fSAtIFRoZSBzb3J0ZWQgYXJyYXkuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgT3JkZXJpbmcgYSB0YWJsZSB3aXRoIGBuZ1JlcGVhdGBcbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgYSBzaW1wbGUge0BsaW5rIG5nUmVwZWF0IG5nUmVwZWF0fSwgd2hlcmUgdGhlIGRhdGEgaXMgc29ydGVkIGJ5XG4gKiBhZ2UgaW4gZGVzY2VuZGluZyBvcmRlciAoZXhwcmVzc2lvbiBpcyBzZXQgdG8gYCctYWdlJ2ApLiBUaGUgYGNvbXBhcmF0b3JgIGlzIG5vdCBzZXQsIHdoaWNoIG1lYW5zXG4gKiBpdCBkZWZhdWx0cyB0byB0aGUgYnVpbHQtaW4gY29tcGFyYXRvci5cbiAqXG4gICA8ZXhhbXBsZSBuYW1lPVwib3JkZXJCeS1zdGF0aWNcIiBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZTFcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgIDx0aD5QaG9uZSBOdW1iZXI8L3RoPlxuICAgICAgICAgICAgIDx0aD5BZ2U8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OictYWdlJ1wiPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgPC90YWJsZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ29yZGVyQnlFeGFtcGxlMScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBbXG4gICAgICAgICAgICAge25hbWU6ICdKb2huJywgICBwaG9uZTogJzU1NS0xMjEyJywgIGFnZTogMTB9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWFyeScsICAgcGhvbmU6ICc1NTUtOTg3NicsICBhZ2U6IDE5fSxcbiAgICAgICAgICAgICB7bmFtZTogJ01pa2UnLCAgIHBob25lOiAnNTU1LTQzMjEnLCAgYWdlOiAyMX0sXG4gICAgICAgICAgICAge25hbWU6ICdBZGFtJywgICBwaG9uZTogJzU1NS01Njc4JywgIGFnZTogMzV9LFxuICAgICAgICAgICAgIHtuYW1lOiAnSnVsaWUnLCAgcGhvbmU6ICc1NTUtODc2NScsICBhZ2U6IDI5fVxuICAgICAgICAgICBdO1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuZnJpZW5kcyB7XG4gICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgICAgIH1cblxuICAgICAgIC5mcmllbmRzIHRoIHtcbiAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcbiAgICAgICB9XG4gICAgICAgLmZyaWVuZHMgdGQsIC5mcmllbmRzIHRoIHtcbiAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQ7XG4gICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgICAgICB9XG4gICAgICAgLmZyaWVuZHMgdGQ6Zmlyc3QtY2hpbGQsIC5mcmllbmRzIHRoOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgIGJvcmRlci1sZWZ0OiBub25lO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgLy8gRWxlbWVudCBsb2NhdG9yc1xuICAgICAgIHZhciBuYW1lcyA9IGVsZW1lbnQuYWxsKGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGJ5IGFnZSBpbiByZXZlcnNlIG9yZGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgxKS5nZXRUZXh0KCkpLnRvQmUoJ0p1bGllJyk7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnTWlrZScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgzKS5nZXRUZXh0KCkpLnRvQmUoJ01hcnknKTtcbiAgICAgICAgIGV4cGVjdChuYW1lcy5nZXQoNCkuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqIDxociAvPlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQ2hhbmdpbmcgcGFyYW1ldGVycyBkeW5hbWljYWxseVxuICpcbiAqIEFsbCBwYXJhbWV0ZXJzIGNhbiBiZSBjaGFuZ2VkIGR5bmFtaWNhbGx5LiBUaGUgbmV4dCBleGFtcGxlIHNob3dzIGhvdyB5b3UgY2FuIG1ha2UgdGhlIGNvbHVtbnMgb2ZcbiAqIGEgdGFibGUgc29ydGFibGUsIGJ5IGJpbmRpbmcgdGhlIGBleHByZXNzaW9uYCBhbmQgYHJldmVyc2VgIHBhcmFtZXRlcnMgdG8gc2NvcGUgcHJvcGVydGllcy5cbiAqXG4gICA8ZXhhbXBsZSBuYW1lPVwib3JkZXJCeS1keW5hbWljXCIgbW9kdWxlPVwib3JkZXJCeUV4YW1wbGUyXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwcmU+U29ydCBieSA9IHt7cHJvcGVydHlOYW1lfX07IHJldmVyc2UgPSB7e3JldmVyc2V9fTwvcHJlPlxuICAgICAgICAgPGhyLz5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJwcm9wZXJ0eU5hbWUgPSBudWxsOyByZXZlcnNlID0gZmFsc2VcIj5TZXQgdG8gdW5zb3J0ZWQ8L2J1dHRvbj5cbiAgICAgICAgIDxoci8+XG4gICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRzXCI+XG4gICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KCduYW1lJylcIj5OYW1lPC9idXR0b24+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcm9wZXJ0eU5hbWUgPT09ICduYW1lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgncGhvbmUnKVwiPlBob25lIE51bWJlcjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAncGhvbmUnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTogcmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KCdhZ2UnKVwiPkFnZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAnYWdlJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IG9yZGVyQnk6cHJvcGVydHlOYW1lOnJldmVyc2VcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTInLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgIHZhciBmcmllbmRzID0gW1xuICAgICAgICAgICAgIHtuYW1lOiAnSm9obicsICAgcGhvbmU6ICc1NTUtMTIxMicsICBhZ2U6IDEwfSxcbiAgICAgICAgICAgICB7bmFtZTogJ01hcnknLCAgIHBob25lOiAnNTU1LTk4NzYnLCAgYWdlOiAxOX0sXG4gICAgICAgICAgICAge25hbWU6ICdNaWtlJywgICBwaG9uZTogJzU1NS00MzIxJywgIGFnZTogMjF9LFxuICAgICAgICAgICAgIHtuYW1lOiAnQWRhbScsICAgcGhvbmU6ICc1NTUtNTY3OCcsICBhZ2U6IDM1fSxcbiAgICAgICAgICAgICB7bmFtZTogJ0p1bGllJywgIHBob25lOiAnNTU1LTg3NjUnLCAgYWdlOiAyOX1cbiAgICAgICAgICAgXTtcblxuICAgICAgICAgICAkc2NvcGUucHJvcGVydHlOYW1lID0gJ2FnZSc7XG4gICAgICAgICAgICRzY29wZS5yZXZlcnNlID0gdHJ1ZTtcbiAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBmcmllbmRzO1xuXG4gICAgICAgICAgICRzY29wZS5zb3J0QnkgPSBmdW5jdGlvbihwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9ICgkc2NvcGUucHJvcGVydHlOYW1lID09PSBwcm9wZXJ0eU5hbWUpID8gISRzY29wZS5yZXZlcnNlIDogZmFsc2U7XG4gICAgICAgICAgICAgJHNjb3BlLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICB9XG5cbiAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICB9XG5cbiAgICAgICAuc29ydG9yZGVyOmFmdGVyIHtcbiAgICAgICAgIGNvbnRlbnQ6ICdcXDI1YjInOyAgIC8vIEJMQUNLIFVQLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICAgIC5zb3J0b3JkZXIucmV2ZXJzZTphZnRlciB7XG4gICAgICAgICBjb250ZW50OiAnXFwyNWJjJzsgICAvLyBCTEFDSyBET1dOLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAvLyBFbGVtZW50IGxvY2F0b3JzXG4gICAgICAgdmFyIHVuc29ydEJ1dHRvbiA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ3Vuc29ydGVkJykpO1xuICAgICAgIHZhciBuYW1lSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnTmFtZScpKTtcbiAgICAgICB2YXIgcGhvbmVIZWFkZXIgPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCdQaG9uZScpKTtcbiAgICAgICB2YXIgYWdlSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnQWdlJykpO1xuICAgICAgIHZhciBmaXJzdE5hbWUgPSBlbGVtZW50KGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpLnJvdygwKSk7XG4gICAgICAgdmFyIGxhc3ROYW1lID0gZWxlbWVudChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKS5yb3coNCkpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzb3J0IGZyaWVuZHMgYnkgc29tZSBwcm9wZXJ0eSwgd2hlbiBjbGlja2luZyBvbiB0aGUgY29sdW1uIGhlYWRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgcGhvbmVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNYXJ5Jyk7XG5cbiAgICAgICAgIG5hbWVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNaWtlJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGluIHJldmVyc2Ugb3JkZXIsIHdoZW4gY2xpY2tpbmcgb24gdGhlIHNhbWUgY29sdW1uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuXG4gICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgb3JkZXIsIHdoZW4gY2xpY2tpbmcgXCJTZXQgdG8gdW5zb3J0ZWRcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgdW5zb3J0QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSnVsaWUnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICogPGhyIC8+XG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBVc2luZyBgb3JkZXJCeWAgaW5zaWRlIGEgY29udHJvbGxlclxuICpcbiAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gY2FsbCB0aGUgYG9yZGVyQnlgIGZpbHRlciBtYW51YWxseSwgYnkgaW5qZWN0aW5nIGBvcmRlckJ5RmlsdGVyYCwgYW5kXG4gKiBjYWxsaW5nIGl0IHdpdGggdGhlIGRlc2lyZWQgcGFyYW1ldGVycy4gKEFsdGVybmF0aXZlbHksIHlvdSBjb3VsZCBpbmplY3QgdGhlIGAkZmlsdGVyYCBmYWN0b3J5XG4gKiBhbmQgcmV0cmlldmUgdGhlIGBvcmRlckJ5YCBmaWx0ZXIgd2l0aCBgJGZpbHRlcignb3JkZXJCeScpYC4pXG4gKlxuICAgPGV4YW1wbGUgbmFtZT1cIm9yZGVyQnktY2FsbC1tYW51YWxseVwiIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlM1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8cHJlPlNvcnQgYnkgPSB7e3Byb3BlcnR5TmFtZX19OyByZXZlcnNlID0ge3tyZXZlcnNlfX08L3ByZT5cbiAgICAgICAgIDxoci8+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KG51bGwpXCI+U2V0IHRvIHVuc29ydGVkPC9idXR0b24+XG4gICAgICAgICA8aHIvPlxuICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgnbmFtZScpXCI+TmFtZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAnbmFtZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzb3J0QnkoJ3Bob25lJylcIj5QaG9uZSBOdW1iZXI8L2J1dHRvbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByb3BlcnR5TmFtZSA9PT0gJ3Bob25lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgnYWdlJylcIj5BZ2U8L2J1dHRvbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByb3BlcnR5TmFtZSA9PT0gJ2FnZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHNcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTMnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJ29yZGVyQnlGaWx0ZXInLCBmdW5jdGlvbigkc2NvcGUsIG9yZGVyQnkpIHtcbiAgICAgICAgICAgdmFyIGZyaWVuZHMgPSBbXG4gICAgICAgICAgICAge25hbWU6ICdKb2huJywgICBwaG9uZTogJzU1NS0xMjEyJywgIGFnZTogMTB9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWFyeScsICAgcGhvbmU6ICc1NTUtOTg3NicsICBhZ2U6IDE5fSxcbiAgICAgICAgICAgICB7bmFtZTogJ01pa2UnLCAgIHBob25lOiAnNTU1LTQzMjEnLCAgYWdlOiAyMX0sXG4gICAgICAgICAgICAge25hbWU6ICdBZGFtJywgICBwaG9uZTogJzU1NS01Njc4JywgIGFnZTogMzV9LFxuICAgICAgICAgICAgIHtuYW1lOiAnSnVsaWUnLCAgcGhvbmU6ICc1NTUtODc2NScsICBhZ2U6IDI5fVxuICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICRzY29wZS5wcm9wZXJ0eU5hbWUgPSAnYWdlJztcbiAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSB0cnVlO1xuICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IG9yZGVyQnkoZnJpZW5kcywgJHNjb3BlLnByb3BlcnR5TmFtZSwgJHNjb3BlLnJldmVyc2UpO1xuXG4gICAgICAgICAgICRzY29wZS5zb3J0QnkgPSBmdW5jdGlvbihwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9IChwcm9wZXJ0eU5hbWUgIT09IG51bGwgJiYgJHNjb3BlLnByb3BlcnR5TmFtZSA9PT0gcHJvcGVydHlOYW1lKVxuICAgICAgICAgICAgICAgICA/ICEkc2NvcGUucmV2ZXJzZSA6IGZhbHNlO1xuICAgICAgICAgICAgICRzY29wZS5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBvcmRlckJ5KGZyaWVuZHMsICRzY29wZS5wcm9wZXJ0eU5hbWUsICRzY29wZS5yZXZlcnNlKTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICB9XG5cbiAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICB9XG5cbiAgICAgICAuc29ydG9yZGVyOmFmdGVyIHtcbiAgICAgICAgIGNvbnRlbnQ6ICdcXDI1YjInOyAgIC8vIEJMQUNLIFVQLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICAgIC5zb3J0b3JkZXIucmV2ZXJzZTphZnRlciB7XG4gICAgICAgICBjb250ZW50OiAnXFwyNWJjJzsgICAvLyBCTEFDSyBET1dOLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAvLyBFbGVtZW50IGxvY2F0b3JzXG4gICAgICAgdmFyIHVuc29ydEJ1dHRvbiA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ3Vuc29ydGVkJykpO1xuICAgICAgIHZhciBuYW1lSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnTmFtZScpKTtcbiAgICAgICB2YXIgcGhvbmVIZWFkZXIgPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCdQaG9uZScpKTtcbiAgICAgICB2YXIgYWdlSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnQWdlJykpO1xuICAgICAgIHZhciBmaXJzdE5hbWUgPSBlbGVtZW50KGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpLnJvdygwKSk7XG4gICAgICAgdmFyIGxhc3ROYW1lID0gZWxlbWVudChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKS5yb3coNCkpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzb3J0IGZyaWVuZHMgYnkgc29tZSBwcm9wZXJ0eSwgd2hlbiBjbGlja2luZyBvbiB0aGUgY29sdW1uIGhlYWRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgcGhvbmVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNYXJ5Jyk7XG5cbiAgICAgICAgIG5hbWVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNaWtlJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGluIHJldmVyc2Ugb3JkZXIsIHdoZW4gY2xpY2tpbmcgb24gdGhlIHNhbWUgY29sdW1uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuXG4gICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgb3JkZXIsIHdoZW4gY2xpY2tpbmcgXCJTZXQgdG8gdW5zb3J0ZWRcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgdW5zb3J0QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSnVsaWUnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICogPGhyIC8+XG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBVc2luZyBhIGN1c3RvbSBjb21wYXJhdG9yXG4gKlxuICogSWYgeW91IGhhdmUgdmVyeSBzcGVjaWZpYyByZXF1aXJlbWVudHMgYWJvdXQgdGhlIHdheSBpdGVtcyBhcmUgc29ydGVkLCB5b3UgY2FuIHBhc3MgeW91ciBvd25cbiAqIGNvbXBhcmF0b3IgZnVuY3Rpb24uIEZvciBleGFtcGxlLCB5b3UgbWlnaHQgbmVlZCB0byBjb21wYXJlIHNvbWUgc3RyaW5ncyBpbiBhIGxvY2FsZS1zZW5zaXRpdmVcbiAqIHdheS4gKFdoZW4gc3BlY2lmeWluZyBhIGN1c3RvbSBjb21wYXJhdG9yLCB5b3UgYWxzbyBuZWVkIHRvIHBhc3MgYSB2YWx1ZSBmb3IgdGhlIGByZXZlcnNlYFxuICogYXJndW1lbnQgLSBwYXNzaW5nIGBmYWxzZWAgcmV0YWlucyB0aGUgZGVmYXVsdCBzb3J0aW5nIG9yZGVyLCBpLmUuIGFzY2VuZGluZy4pXG4gKlxuICAgPGV4YW1wbGUgbmFtZT1cIm9yZGVyQnktY3VzdG9tLWNvbXBhcmF0b3JcIiBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZTRcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGRpdiBjbGFzcz1cImZyaWVuZHMtY29udGFpbmVyIGN1c3RvbS1jb21wYXJhdG9yXCI+XG4gICAgICAgICAgIDxoMz5Mb2NhbGUtc2Vuc2l0aXZlIENvbXBhcmF0b3I8L2gzPlxuICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRzXCI+XG4gICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgICAgPHRoPkZhdm9yaXRlIExldHRlcjwvdGg+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OidmYXZvcml0ZUxldHRlcic6ZmFsc2U6bG9jYWxlU2Vuc2l0aXZlQ29tcGFyYXRvclwiPlxuICAgICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuZmF2b3JpdGVMZXR0ZXJ9fTwvdGQ+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgICAgPGRpdiBjbGFzcz1cImZyaWVuZHMtY29udGFpbmVyIGRlZmF1bHQtY29tcGFyYXRvclwiPlxuICAgICAgICAgICA8aDM+RGVmYXVsdCBDb21wYXJhdG9yPC9oMz5cbiAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICAgIDx0aD5GYXZvcml0ZSBMZXR0ZXI8L3RoPlxuICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTonZmF2b3JpdGVMZXR0ZXInXCI+XG4gICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5mYXZvcml0ZUxldHRlcn19PC90ZD5cbiAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTQnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICRzY29wZS5mcmllbmRzID0gW1xuICAgICAgICAgICAgIHtuYW1lOiAnSm9obicsICAgZmF2b3JpdGVMZXR0ZXI6ICfDhCd9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWFyeScsICAgZmF2b3JpdGVMZXR0ZXI6ICfDnCd9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWlrZScsICAgZmF2b3JpdGVMZXR0ZXI6ICfDlid9LFxuICAgICAgICAgICAgIHtuYW1lOiAnQWRhbScsICAgZmF2b3JpdGVMZXR0ZXI6ICdIJ30sXG4gICAgICAgICAgICAge25hbWU6ICdKdWxpZScsICBmYXZvcml0ZUxldHRlcjogJ1onfVxuICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICRzY29wZS5sb2NhbGVTZW5zaXRpdmVDb21wYXJhdG9yID0gZnVuY3Rpb24odjEsIHYyKSB7XG4gICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgZ2V0IHN0cmluZ3MsIGp1c3QgY29tcGFyZSBieSBpbmRleFxuICAgICAgICAgICAgIGlmICh2MS50eXBlICE9PSAnc3RyaW5nJyB8fCB2Mi50eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgcmV0dXJuICh2MS5pbmRleCA8IHYyLmluZGV4KSA/IC0xIDogMTtcbiAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAvLyBDb21wYXJlIHN0cmluZ3MgYWxwaGFiZXRpY2FsbHksIHRha2luZyBsb2NhbGUgaW50byBhY2NvdW50XG4gICAgICAgICAgICAgcmV0dXJuIHYxLnZhbHVlLmxvY2FsZUNvbXBhcmUodjIudmFsdWUpO1xuICAgICAgICAgICB9O1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuZnJpZW5kcy1jb250YWluZXIge1xuICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgbWFyZ2luOiAwIDMwcHg7XG4gICAgICAgfVxuXG4gICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICB9XG5cbiAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIC8vIEVsZW1lbnQgbG9jYXRvcnNcbiAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5jc3MoJy5jdXN0b20tY29tcGFyYXRvcicpKTtcbiAgICAgICB2YXIgbmFtZXMgPSBjb250YWluZXIuYWxsKGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGJ5IGZhdm9yaXRlIGxldHRlciAoaW4gY29ycmVjdCBhbHBoYWJldGljYWwgb3JkZXIpJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgxKS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChuYW1lcy5nZXQoMikuZ2V0VGV4dCgpKS50b0JlKCdNaWtlJyk7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDMpLmdldFRleHQoKSkudG9CZSgnTWFyeScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCg0KS5nZXRUZXh0KCkpLnRvQmUoJ0p1bGllJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbm9yZGVyQnlGaWx0ZXIuJGluamVjdCA9IFsnJHBhcnNlJ107XG5mdW5jdGlvbiBvcmRlckJ5RmlsdGVyKCRwYXJzZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHNvcnRQcmVkaWNhdGUsIHJldmVyc2VPcmRlciwgY29tcGFyZUZuKSB7XG5cbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIGFycmF5O1xuICAgIGlmICghaXNBcnJheUxpa2UoYXJyYXkpKSB7XG4gICAgICB0aHJvdyBtaW5FcnIoJ29yZGVyQnknKSgnbm90YXJyYXknLCAnRXhwZWN0ZWQgYXJyYXkgYnV0IHJlY2VpdmVkOiB7MH0nLCBhcnJheSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc0FycmF5KHNvcnRQcmVkaWNhdGUpKSB7IHNvcnRQcmVkaWNhdGUgPSBbc29ydFByZWRpY2F0ZV07IH1cbiAgICBpZiAoc29ydFByZWRpY2F0ZS5sZW5ndGggPT09IDApIHsgc29ydFByZWRpY2F0ZSA9IFsnKyddOyB9XG5cbiAgICB2YXIgcHJlZGljYXRlcyA9IHByb2Nlc3NQcmVkaWNhdGVzKHNvcnRQcmVkaWNhdGUpO1xuXG4gICAgdmFyIGRlc2NlbmRpbmcgPSByZXZlcnNlT3JkZXIgPyAtMSA6IDE7XG5cbiAgICAvLyBEZWZpbmUgdGhlIGBjb21wYXJlKClgIGZ1bmN0aW9uLiBVc2UgYSBkZWZhdWx0IGNvbXBhcmF0b3IgaWYgbm9uZSBpcyBzcGVjaWZpZWQuXG4gICAgdmFyIGNvbXBhcmUgPSBpc0Z1bmN0aW9uKGNvbXBhcmVGbikgPyBjb21wYXJlRm4gOiBkZWZhdWx0Q29tcGFyZTtcblxuICAgIC8vIFRoZSBuZXh0IHRocmVlIGxpbmVzIGFyZSBhIHZlcnNpb24gb2YgYSBTd2FydHppYW4gVHJhbnNmb3JtIGlkaW9tIGZyb20gUGVybFxuICAgIC8vIChzb21ldGltZXMgY2FsbGVkIHRoZSBEZWNvcmF0ZS1Tb3J0LVVuZGVjb3JhdGUgaWRpb20pXG4gICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NjaHdhcnR6aWFuX3RyYW5zZm9ybVxuICAgIHZhciBjb21wYXJlVmFsdWVzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFycmF5LCBnZXRDb21wYXJpc29uT2JqZWN0KTtcbiAgICBjb21wYXJlVmFsdWVzLnNvcnQoZG9Db21wYXJpc29uKTtcbiAgICBhcnJheSA9IGNvbXBhcmVWYWx1ZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHsgcmV0dXJuIGl0ZW0udmFsdWU7IH0pO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGFyaXNvbk9iamVjdCh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIC8vIE5PVEU6IFdlIGFyZSBhZGRpbmcgYW4gZXh0cmEgYHRpZUJyZWFrZXJgIHZhbHVlIGJhc2VkIG9uIHRoZSBlbGVtZW50J3MgaW5kZXguXG4gICAgICAvLyBUaGlzIHdpbGwgYmUgdXNlZCB0byBrZWVwIHRoZSBzb3J0IHN0YWJsZSB3aGVuIG5vbmUgb2YgdGhlIGlucHV0IHByZWRpY2F0ZXMgY2FuXG4gICAgICAvLyBkaXN0aW5ndWlzaCBiZXR3ZWVuIHR3byBlbGVtZW50cy5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgdGllQnJlYWtlcjoge3ZhbHVlOiBpbmRleCwgdHlwZTogJ251bWJlcicsIGluZGV4OiBpbmRleH0sXG4gICAgICAgIHByZWRpY2F0ZVZhbHVlczogcHJlZGljYXRlcy5tYXAoZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFByZWRpY2F0ZVZhbHVlKHByZWRpY2F0ZS5nZXQodmFsdWUpLCBpbmRleCk7XG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvQ29tcGFyaXNvbih2MSwgdjIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHByZWRpY2F0ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZSh2MS5wcmVkaWNhdGVWYWx1ZXNbaV0sIHYyLnByZWRpY2F0ZVZhbHVlc1tpXSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogcHJlZGljYXRlc1tpXS5kZXNjZW5kaW5nICogZGVzY2VuZGluZztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKGNvbXBhcmUodjEudGllQnJlYWtlciwgdjIudGllQnJlYWtlcikgfHwgZGVmYXVsdENvbXBhcmUodjEudGllQnJlYWtlciwgdjIudGllQnJlYWtlcikpICogZGVzY2VuZGluZztcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1ByZWRpY2F0ZXMoc29ydFByZWRpY2F0ZXMpIHtcbiAgICByZXR1cm4gc29ydFByZWRpY2F0ZXMubWFwKGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGRlc2NlbmRpbmcgPSAxLCBnZXQgPSBpZGVudGl0eTtcblxuICAgICAgaWYgKGlzRnVuY3Rpb24ocHJlZGljYXRlKSkge1xuICAgICAgICBnZXQgPSBwcmVkaWNhdGU7XG4gICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKHByZWRpY2F0ZSkpIHtcbiAgICAgICAgaWYgKChwcmVkaWNhdGUuY2hhckF0KDApID09PSAnKycgfHwgcHJlZGljYXRlLmNoYXJBdCgwKSA9PT0gJy0nKSkge1xuICAgICAgICAgIGRlc2NlbmRpbmcgPSBwcmVkaWNhdGUuY2hhckF0KDApID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZGljYXRlICE9PSAnJykge1xuICAgICAgICAgIGdldCA9ICRwYXJzZShwcmVkaWNhdGUpO1xuICAgICAgICAgIGlmIChnZXQuY29uc3RhbnQpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBnZXQoKTtcbiAgICAgICAgICAgIGdldCA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZVtrZXldOyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtnZXQ6IGdldCwgZGVzY2VuZGluZzogZGVzY2VuZGluZ307XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOiAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlICdib29sZWFuJzogLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb2JqZWN0VmFsdWUodmFsdWUpIHtcbiAgICAvLyBJZiBgdmFsdWVPZmAgaXMgYSB2YWxpZCBmdW5jdGlvbiB1c2UgdGhhdFxuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlLnZhbHVlT2YpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcbiAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgLy8gSWYgYHRvU3RyaW5nYCBpcyBhIHZhbGlkIGZ1bmN0aW9uIGFuZCBub3QgdGhlIG9uZSBmcm9tIGBPYmplY3QucHJvdG90eXBlYCB1c2UgdGhhdFxuICAgIGlmIChoYXNDdXN0b21Ub1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQcmVkaWNhdGVWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHR5cGUgPSAnc3RyaW5nJztcbiAgICAgIHZhbHVlID0gJ251bGwnO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbHVlID0gb2JqZWN0VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgdHlwZTogdHlwZSwgaW5kZXg6IGluZGV4fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKHYxLCB2Mikge1xuICAgIHZhciByZXN1bHQgPSAwO1xuICAgIHZhciB0eXBlMSA9IHYxLnR5cGU7XG4gICAgdmFyIHR5cGUyID0gdjIudHlwZTtcblxuICAgIGlmICh0eXBlMSA9PT0gdHlwZTIpIHtcbiAgICAgIHZhciB2YWx1ZTEgPSB2MS52YWx1ZTtcbiAgICAgIHZhciB2YWx1ZTIgPSB2Mi52YWx1ZTtcblxuICAgICAgaWYgKHR5cGUxID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBDb21wYXJlIHN0cmluZ3MgY2FzZS1pbnNlbnNpdGl2ZWx5XG4gICAgICAgIHZhbHVlMSA9IHZhbHVlMS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YWx1ZTIgPSB2YWx1ZTIudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZTEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIEZvciBiYXNpYyBvYmplY3RzLCB1c2UgdGhlIHBvc2l0aW9uIG9mIHRoZSBvYmplY3RcbiAgICAgICAgLy8gaW4gdGhlIGNvbGxlY3Rpb24gaW5zdGVhZCBvZiB0aGUgdmFsdWVcbiAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlMSkpIHZhbHVlMSA9IHYxLmluZGV4O1xuICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUyKSkgdmFsdWUyID0gdjIuaW5kZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZTEgIT09IHZhbHVlMikge1xuICAgICAgICByZXN1bHQgPSB2YWx1ZTEgPCB2YWx1ZTIgPyAtMSA6IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHR5cGUxIDwgdHlwZTIgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBuZ0RpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkge1xuICAgIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGxpbms6IGRpcmVjdGl2ZVxuICAgIH07XG4gIH1cbiAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZGlyZWN0aXZlLnJlc3RyaWN0IHx8ICdBQyc7XG4gIHJldHVybiB2YWx1ZUZuKGRpcmVjdGl2ZSk7XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgYVxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE1vZGlmaWVzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSBodG1sIGEgdGFnIHNvIHRoYXQgdGhlIGRlZmF1bHQgYWN0aW9uIGlzIHByZXZlbnRlZCB3aGVuXG4gKiB0aGUgaHJlZiBhdHRyaWJ1dGUgaXMgZW1wdHkuXG4gKlxuICogRm9yIGR5bmFtaWNhbGx5IGNyZWF0aW5nIGBocmVmYCBhdHRyaWJ1dGVzIGZvciBhIHRhZ3MsIHNlZSB0aGUge0BsaW5rIG5nLm5nSHJlZiBgbmdIcmVmYH0gZGlyZWN0aXZlLlxuICovXG52YXIgaHRtbEFuY2hvckRpcmVjdGl2ZSA9IHZhbHVlRm4oe1xuICByZXN0cmljdDogJ0UnLFxuICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgaWYgKCFhdHRyLmhyZWYgJiYgIWF0dHIueGxpbmtIcmVmKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgICAgLy8gSWYgdGhlIGxpbmtlZCBlbGVtZW50IGlzIG5vdCBhbiBhbmNob3IgdGFnIGFueW1vcmUsIGRvIG5vdGhpbmdcbiAgICAgICAgaWYgKGVsZW1lbnRbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2EnKSByZXR1cm47XG5cbiAgICAgICAgLy8gU1ZHQUVsZW1lbnQgZG9lcyBub3QgdXNlIHRoZSBocmVmIGF0dHJpYnV0ZSwgYnV0IHJhdGhlciB0aGUgJ3hsaW5rSHJlZicgYXR0cmlidXRlLlxuICAgICAgICB2YXIgaHJlZiA9IHRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nID9cbiAgICAgICAgICAgICAgICAgICAneGxpbms6aHJlZicgOiAnaHJlZic7XG4gICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAvLyBpZiB3ZSBoYXZlIG5vIGhyZWYgdXJsLCB0aGVuIGRvbid0IG5hdmlnYXRlIGFueXdoZXJlLlxuICAgICAgICAgIGlmICghZWxlbWVudC5hdHRyKGhyZWYpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdIcmVmXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYW4gaHJlZiBhdHRyaWJ1dGUgd2lsbFxuICogbWFrZSB0aGUgbGluayBnbyB0byB0aGUgd3JvbmcgVVJMIGlmIHRoZSB1c2VyIGNsaWNrcyBpdCBiZWZvcmVcbiAqIEFuZ3VsYXIgaGFzIGEgY2hhbmNlIHRvIHJlcGxhY2UgdGhlIGB7e2hhc2h9fWAgbWFya3VwIHdpdGggaXRzXG4gKiB2YWx1ZS4gVW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgbWFya3VwIHRoZSBsaW5rIHdpbGwgYmUgYnJva2VuXG4gKiBhbmQgd2lsbCBtb3N0IGxpa2VseSByZXR1cm4gYSA0MDQgZXJyb3IuIFRoZSBgbmdIcmVmYCBkaXJlY3RpdmVcbiAqIHNvbHZlcyB0aGlzIHByb2JsZW0uXG4gKlxuICogVGhlIHdyb25nIHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxhIGhyZWY9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIj5saW5rMTwvYT5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxhIG5nLWhyZWY9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIj5saW5rMTwvYT5cbiAqIGBgYFxuICpcbiAqIEBlbGVtZW50IEFcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nSHJlZiBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyB2YXJpb3VzIGNvbWJpbmF0aW9ucyBvZiBgaHJlZmAsIGBuZy1ocmVmYCBhbmQgYG5nLWNsaWNrYCBhdHRyaWJ1dGVzXG4gKiBpbiBsaW5rcyBhbmQgdGhlaXIgZGlmZmVyZW50IGJlaGF2aW9yczpcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctaHJlZlwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidmFsdWVcIiAvPjxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstMVwiIGhyZWYgbmctY2xpY2s9XCJ2YWx1ZSA9IDFcIj5saW5rIDE8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0yXCIgaHJlZj1cIlwiIG5nLWNsaWNrPVwidmFsdWUgPSAyXCI+bGluayAyPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstM1wiIG5nLWhyZWY9XCIve3snMTIzJ319XCI+bGluayAzPC9hPiAobGluaywgcmVsb2FkISk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTRcIiBocmVmPVwiXCIgbmFtZT1cInh4XCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDRcIj5hbmNob3I8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay01XCIgbmFtZT1cInh4eFwiIG5nLWNsaWNrPVwidmFsdWUgPSA1XCI+YW5jaG9yPC9hPiAobm8gbGluayk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTZcIiBuZy1ocmVmPVwie3t2YWx1ZX19XCI+bGluazwvYT4gKGxpbmssIGNoYW5nZSBsb2NhdGlvbilcbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiB3aXRob3V0IHZhbHVlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0xJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnMScpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTEnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMicpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzInKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0yJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKCcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGFuZCBjaGFuZ2UgdXJsIHdoZW4gbmctaHJlZiBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0zJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b01hdGNoKC9cXC8xMjMkLyk7XG5cbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTMnKSkuY2xpY2soKTtcblxuICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5hdmlnYXRlIGF3YXkgZnJvbSBhbiBBbmd1bGFyIHBhZ2UsIHNvIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci5cblxuICAgICAgICAgIGJyb3dzZXIud2FpdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVybC5tYXRjaCgvXFwvMTIzJC8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgNTAwMCwgJ3BhZ2Ugc2hvdWxkIG5hdmlnYXRlIHRvIC8xMjMnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiBlbXB0eSBzdHJpbmcgYW5kIG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay00JykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNCcpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBubyBocmVmIGJ1dCBuYW1lIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstNScpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzUnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay01JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIG9ubHkgY2hhbmdlIHVybCB3aGVuIG9ubHkgbmctaHJlZicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmNsZWFyKCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuc2VuZEtleXMoJzYnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay02JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b01hdGNoKC9cXC82JC8pO1xuXG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay02JykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBuYXZpZ2F0ZSBhd2F5IGZyb20gYW4gQW5ndWxhciBwYWdlLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gdXNlIGJyb3dzZXIuZHJpdmVyIHRvIGdldCB0aGUgYmFzZSB3ZWJkcml2ZXIuXG4gICAgICAgICAgYnJvd3Nlci53YWl0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cXC82JC8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgNTAwMCwgJ3BhZ2Ugc2hvdWxkIG5hdmlnYXRlIHRvIC82Jyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3JjXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3JjYCBhdHRyaWJ1dGUgZG9lc24ndFxuICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbFxuICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlXG4gKiBge3toYXNofX1gLiBUaGUgYG5nU3JjYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBzcmM9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIiBhbHQ9XCJEZXNjcmlwdGlvblwiLz5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgbmctc3JjPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCIgYWx0PVwiRGVzY3JpcHRpb25cIiAvPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgSU1HXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyYyBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1NyY3NldFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSA5OVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGEgYHNyY3NldGAgYXR0cmlidXRlIGRvZXNuJ3RcbiAqIHdvcmsgcmlnaHQ6IFRoZSBicm93c2VyIHdpbGwgZmV0Y2ggZnJvbSB0aGUgVVJMIHdpdGggdGhlIGxpdGVyYWxcbiAqIHRleHQgYHt7aGFzaH19YCB1bnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBleHByZXNzaW9uIGluc2lkZVxuICogYHt7aGFzaH19YC4gVGhlIGBuZ1NyY3NldGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uXG4gKlxuICogVGhlIGJ1Z2d5IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIgYWx0PVwiRGVzY3JpcHRpb25cIi8+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIG5nLXNyY3NldD1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSAyeFwiIGFsdD1cIkRlc2NyaXB0aW9uXCIgLz5cbiAqIGBgYFxuICpcbiAqIEBlbGVtZW50IElNR1xuICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdTcmNzZXQgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdEaXNhYmxlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGlzIGRpcmVjdGl2ZSBzZXRzIHRoZSBgZGlzYWJsZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCAodHlwaWNhbGx5IGEgZm9ybSBjb250cm9sLFxuICogZS5nLiBgaW5wdXRgLCBgYnV0dG9uYCwgYHNlbGVjdGAgZXRjLikgaWYgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnNpZGUgYG5nRGlzYWJsZWRgIGV2YWx1YXRlcyB0byB0cnV0aHkuXG4gKlxuICogQSBzcGVjaWFsIGRpcmVjdGl2ZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBgZGlzYWJsZWRgXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZy1kaXNhYmxlZFwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNsaWNrIG1lIHRvIHRvZ2dsZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgPGJ1dHRvbiBuZy1tb2RlbD1cImJ1dHRvblwiIG5nLWRpc2FibGVkPVwiY2hlY2tlZFwiPkJ1dHRvbjwvYnV0dG9uPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBidXR0b24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IElOUFVUXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRGlzYWJsZWQgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHRoZSBgZGlzYWJsZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NoZWNrZWRcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXRzIHRoZSBgY2hlY2tlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nQ2hlY2tlZGAgaXMgdHJ1dGh5LlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIGRpcmVjdGl2ZSBzaG91bGQgbm90IGJlIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LFxuICogYXMgdGhpcyBjYW4gbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yLlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYGNoZWNrZWRgXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZy1jaGVja2VkXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2hlY2sgbWUgdG8gY2hlY2sgYm90aDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwibWFzdGVyXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8aW5wdXQgaWQ9XCJjaGVja1NsYXZlXCIgdHlwZT1cImNoZWNrYm94XCIgbmctY2hlY2tlZD1cIm1hc3RlclwiIGFyaWEtbGFiZWw9XCJTbGF2ZSBpbnB1dFwiPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGJvdGggY2hlY2tCb3hlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjaGVja1NsYXZlJykpLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdtYXN0ZXInKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY2hlY2tTbGF2ZScpKS5nZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGVja2VkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlYWRvbmx5XG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNldHMgdGhlIGByZWFkb25seWAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nUmVhZG9ubHlgIGlzIHRydXRoeS5cbiAqIE5vdGUgdGhhdCBgcmVhZG9ubHlgIGFwcGxpZXMgb25seSB0byBgaW5wdXRgIGVsZW1lbnRzIHdpdGggc3BlY2lmaWMgdHlwZXMuIFtTZWUgdGhlIGlucHV0IGRvY3Mgb25cbiAqIE1ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I2F0dHItcmVhZG9ubHkpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYHJlYWRvbmx5YFxuICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctcmVhZG9ubHlcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DaGVjayBtZSB0byBtYWtlIHRleHQgcmVhZG9ubHk6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLXJlYWRvbmx5PVwiY2hlY2tlZFwiIHZhbHVlPVwiSSdtIEFuZ3VsYXJcIiBhcmlhLWxhYmVsPVwiUmVhZG9ubHkgZmllbGRcIiAvPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSByZWFkb25seSBhdHRyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1JlYWRvbmx5IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInJlYWRvbmx5XCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTZWxlY3RlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXRzIHRoZSBgc2VsZWN0ZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCwgaWYgdGhlIGV4cHJlc3Npb24gaW5zaWRlIGBuZ1NlbGVjdGVkYCBpcyB0cnV0aHkuXG4gKlxuICogQSBzcGVjaWFsIGRpcmVjdGl2ZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBgc2VsZWN0ZWRgXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogICAqKk5vdGU6KiogYG5nU2VsZWN0ZWRgIGRvZXMgbm90IGludGVyYWN0IHdpdGggdGhlIGBzZWxlY3RgIGFuZCBgbmdNb2RlbGAgZGlyZWN0aXZlcywgaXQgb25seVxuICogICBzZXRzIHRoZSBgc2VsZWN0ZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC4gSWYgeW91IGFyZSB1c2luZyBgbmdNb2RlbGAgb24gdGhlIHNlbGVjdCwgeW91XG4gKiAgIHNob3VsZCBub3QgdXNlIGBuZ1NlbGVjdGVkYCBvbiB0aGUgb3B0aW9ucywgYXMgYG5nTW9kZWxgIHdpbGwgc2V0IHRoZSBzZWxlY3QgdmFsdWUgYW5kXG4gKiAgIHNlbGVjdGVkIG9wdGlvbnMuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZy1zZWxlY3RlZFwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNoZWNrIG1lIHRvIHNlbGVjdDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxzZWxlY3QgYXJpYS1sYWJlbD1cIm5nU2VsZWN0ZWQgZGVtb1wiPlxuICAgICAgICAgIDxvcHRpb24+SGVsbG8hPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiBpZD1cImdyZWV0XCIgbmctc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPkdyZWV0aW5ncyE8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgc2VsZWN0IEdyZWV0aW5ncyEnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzZWxlY3RlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdncmVldCcpKS5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IE9QVElPTlxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1NlbGVjdGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInNlbGVjdGVkXCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nT3BlblxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXRzIHRoZSBgb3BlbmAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nT3BlbmAgaXMgdHJ1dGh5LlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYG9wZW5gXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiAjIyBBIG5vdGUgYWJvdXQgYnJvd3NlciBjb21wYXRpYmlsaXR5XG4gKlxuICogSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgdGhlIGBkZXRhaWxzYCBlbGVtZW50LCBpdCBpc1xuICogcmVjb21tZW5kZWQgdG8gdXNlIHtAbGluayBuZy5uZ1Nob3d9IGFuZCB7QGxpbmsgbmcubmdIaWRlfSBpbnN0ZWFkLlxuICpcbiAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJuZy1vcGVuXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxsYWJlbD5Ub2dnbGUgZGV0YWlsczogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwib3BlblwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgIDxkZXRhaWxzIGlkPVwiZGV0YWlsc1wiIG5nLW9wZW49XCJvcGVuXCI+XG4gICAgICAgICAgICA8c3VtbWFyeT5MaXN0PC9zdW1tYXJ5PlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICA8bGk+QXBwbGU8L2xpPlxuICAgICAgICAgICAgICA8bGk+T3JhbmdlPC9saT5cbiAgICAgICAgICAgICAgPGxpPkR1cmlhbjwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBvcGVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdkZXRhaWxzJykpLmdldEF0dHJpYnV0ZSgnb3BlbicpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnb3BlbicpKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZVRydXRoeSgpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgREVUQUlMU1xuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ09wZW4gSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlIFwib3BlblwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxudmFyIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzID0ge307XG5cbi8vIGJvb2xlYW4gYXR0cnMgYXJlIGV2YWx1YXRlZFxuZm9yRWFjaChCT09MRUFOX0FUVFIsIGZ1bmN0aW9uKHByb3BOYW1lLCBhdHRyTmFtZSkge1xuICAvLyBiaW5kaW5nIHRvIG11bHRpcGxlIGlzIG5vdCBzdXBwb3J0ZWRcbiAgaWYgKHByb3BOYW1lID09PSAnbXVsdGlwbGUnKSByZXR1cm47XG5cbiAgZnVuY3Rpb24gZGVmYXVsdExpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgIHNjb3BlLiR3YXRjaChhdHRyW25vcm1hbGl6ZWRdLCBmdW5jdGlvbiBuZ0Jvb2xlYW5BdHRyV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgIGF0dHIuJHNldChhdHRyTmFtZSwgISF2YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbm9ybWFsaXplZCA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGF0dHJOYW1lKTtcbiAgdmFyIGxpbmtGbiA9IGRlZmF1bHRMaW5rRm47XG5cbiAgaWYgKHByb3BOYW1lID09PSAnY2hlY2tlZCcpIHtcbiAgICBsaW5rRm4gPSBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgLy8gZW5zdXJpbmcgbmdDaGVja2VkIGRvZXNuJ3QgaW50ZXJmZXJlIHdpdGggbmdNb2RlbCB3aGVuIGJvdGggYXJlIHNldCBvbiB0aGUgc2FtZSBpbnB1dFxuICAgICAgaWYgKGF0dHIubmdNb2RlbCAhPT0gYXR0cltub3JtYWxpemVkXSkge1xuICAgICAgICBkZWZhdWx0TGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHByaW9yaXR5OiAxMDAsXG4gICAgICBsaW5rOiBsaW5rRm5cbiAgICB9O1xuICB9O1xufSk7XG5cbi8vIGFsaWFzZWQgaW5wdXQgYXR0cnMgYXJlIGV2YWx1YXRlZFxuZm9yRWFjaChBTElBU0VEX0FUVFIsIGZ1bmN0aW9uKGh0bWxBdHRyLCBuZ0F0dHIpIHtcbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbmdBdHRyXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgLy9zcGVjaWFsIGNhc2UgbmdQYXR0ZXJuIHdoZW4gYSBsaXRlcmFsIHJlZ3VsYXIgZXhwcmVzc2lvbiB2YWx1ZVxuICAgICAgICAvL2lzIHVzZWQgYXMgdGhlIGV4cHJlc3Npb24gKHRoaXMgd2F5IHdlIGRvbid0IGhhdmUgdG8gd2F0Y2ggYW55dGhpbmcpLlxuICAgICAgICBpZiAobmdBdHRyID09PSAnbmdQYXR0ZXJuJyAmJiBhdHRyLm5nUGF0dGVybi5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGF0dHIubmdQYXR0ZXJuLm1hdGNoKFJFR0VYX1NUUklOR19SRUdFWFApO1xuICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgYXR0ci4kc2V0KCduZ1BhdHRlcm4nLCBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25nQXR0cl0sIGZ1bmN0aW9uIG5nQXR0ckFsaWFzV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBhdHRyLiRzZXQobmdBdHRyLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59KTtcblxuLy8gbmctc3JjLCBuZy1zcmNzZXQsIG5nLWhyZWYgYXJlIGludGVycG9sYXRlZFxuZm9yRWFjaChbJ3NyYycsICdzcmNzZXQnLCAnaHJlZiddLCBmdW5jdGlvbihhdHRyTmFtZSkge1xuICB2YXIgbm9ybWFsaXplZCA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGF0dHJOYW1lKTtcbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJpb3JpdHk6IDk5LCAvLyBpdCBuZWVkcyB0byBydW4gYWZ0ZXIgdGhlIGF0dHJpYnV0ZXMgYXJlIGludGVycG9sYXRlZFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gYXR0ck5hbWUsXG4gICAgICAgICAgICBuYW1lID0gYXR0ck5hbWU7XG5cbiAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnaHJlZicgJiZcbiAgICAgICAgICAgIHRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nKSB7XG4gICAgICAgICAgbmFtZSA9ICd4bGlua0hyZWYnO1xuICAgICAgICAgIGF0dHIuJGF0dHJbbmFtZV0gPSAneGxpbms6aHJlZic7XG4gICAgICAgICAgcHJvcE5hbWUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgYXR0ci4kb2JzZXJ2ZShub3JtYWxpemVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2hyZWYnKSB7XG4gICAgICAgICAgICAgIGF0dHIuJHNldChuYW1lLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgdmFsdWUpO1xuXG4gICAgICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gICAgICAgICAgLy8gT24gSUUsIGlmIFwibmc6c3JjXCIgZGlyZWN0aXZlIGRlY2xhcmF0aW9uIGlzIHVzZWQgYW5kIFwic3JjXCIgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAvLyB0aGVuIGNhbGxpbmcgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NyYycsICdmb28nKSBkb2Vzbid0IGRvIGFueXRoaW5nLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gc2V0IHRoZSBwcm9wZXJ0eSBhcyB3ZWxsIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgICAgICAgIC8vIFdlIHVzZSBhdHRyW2F0dHJOYW1lXSB2YWx1ZSBzaW5jZSAkc2V0IGNhbiBzYW5pdGl6ZSB0aGUgdXJsLlxuICAgICAgICAgIGlmIChtc2llICYmIHByb3BOYW1lKSBlbGVtZW50LnByb3AocHJvcE5hbWUsIGF0dHJbbmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufSk7XG5cbi8qIGdsb2JhbCAtbnVsbEZvcm1DdHJsLCAtUEVORElOR19DTEFTUywgLVNVQk1JVFRFRF9DTEFTU1xuICovXG52YXIgbnVsbEZvcm1DdHJsID0ge1xuICAkYWRkQ29udHJvbDogbm9vcCxcbiAgJCRyZW5hbWVDb250cm9sOiBudWxsRm9ybVJlbmFtZUNvbnRyb2wsXG4gICRyZW1vdmVDb250cm9sOiBub29wLFxuICAkc2V0VmFsaWRpdHk6IG5vb3AsXG4gICRzZXREaXJ0eTogbm9vcCxcbiAgJHNldFByaXN0aW5lOiBub29wLFxuICAkc2V0U3VibWl0dGVkOiBub29wXG59LFxuUEVORElOR19DTEFTUyA9ICduZy1wZW5kaW5nJyxcblNVQk1JVFRFRF9DTEFTUyA9ICduZy1zdWJtaXR0ZWQnO1xuXG5mdW5jdGlvbiBudWxsRm9ybVJlbmFtZUNvbnRyb2woY29udHJvbCwgbmFtZSkge1xuICBjb250cm9sLiRuYW1lID0gbmFtZTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlclxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybSB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiBhbGwgb2YgdGhlIGNvbnRhaW5pbmcgZm9ybXMgYW5kIGNvbnRyb2xzIGFyZSB2YWxpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgY29udGFpbmluZyBjb250cm9sIG9yIGZvcm0gaXMgaW52YWxpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHN1Ym1pdHRlZCBUcnVlIGlmIHVzZXIgaGFzIHN1Ym1pdHRlZCB0aGUgZm9ybSBldmVuIGlmIGl0cyBpbnZhbGlkLlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkcGVuZGluZyBBbiBvYmplY3QgaGFzaCwgY29udGFpbmluZyByZWZlcmVuY2VzIHRvIGNvbnRyb2xzIG9yIGZvcm1zIHdpdGhcbiAqICBwZW5kaW5nIHZhbGlkYXRvcnMsIHdoZXJlOlxuICpcbiAqICAtIGtleXMgYXJlIHZhbGlkYXRpb25zIHRva2VucyAoZXJyb3IgbmFtZXMpLlxuICogIC0gdmFsdWVzIGFyZSBhcnJheXMgb2YgY29udHJvbHMgb3IgZm9ybXMgdGhhdCBoYXZlIGEgcGVuZGluZyB2YWxpZGF0b3IgZm9yIHRoZSBnaXZlbiBlcnJvciBuYW1lLlxuICpcbiAqIFNlZSB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlciMkZXJyb3IgJGVycm9yfSBmb3IgYSBsaXN0IG9mIGJ1aWx0LWluIHZhbGlkYXRpb24gdG9rZW5zLlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgQW4gb2JqZWN0IGhhc2gsIGNvbnRhaW5pbmcgcmVmZXJlbmNlcyB0byBjb250cm9scyBvciBmb3JtcyB3aXRoIGZhaWxpbmdcbiAqICB2YWxpZGF0b3JzLCB3aGVyZTpcbiAqXG4gKiAgLSBrZXlzIGFyZSB2YWxpZGF0aW9uIHRva2VucyAoZXJyb3IgbmFtZXMpLFxuICogIC0gdmFsdWVzIGFyZSBhcnJheXMgb2YgY29udHJvbHMgb3IgZm9ybXMgdGhhdCBoYXZlIGEgZmFpbGluZyB2YWxpZGF0b3IgZm9yIHRoZSBnaXZlbiBlcnJvciBuYW1lLlxuICpcbiAqICBCdWlsdC1pbiB2YWxpZGF0aW9uIHRva2VuczpcbiAqICAtIGBlbWFpbGBcbiAqICAtIGBtYXhgXG4gKiAgLSBgbWF4bGVuZ3RoYFxuICogIC0gYG1pbmBcbiAqICAtIGBtaW5sZW5ndGhgXG4gKiAgLSBgbnVtYmVyYFxuICogIC0gYHBhdHRlcm5gXG4gKiAgLSBgcmVxdWlyZWRgXG4gKiAgLSBgdXJsYFxuICogIC0gYGRhdGVgXG4gKiAgLSBgZGF0ZXRpbWVsb2NhbGBcbiAqICAtIGB0aW1lYFxuICogIC0gYHdlZWtgXG4gKiAgLSBgbW9udGhgXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgRm9ybUNvbnRyb2xsZXJgIGtlZXBzIHRyYWNrIG9mIGFsbCBpdHMgY29udHJvbHMgYW5kIG5lc3RlZCBmb3JtcyBhcyB3ZWxsIGFzIHRoZSBzdGF0ZSBvZiB0aGVtLFxuICogc3VjaCBhcyBiZWluZyB2YWxpZC9pbnZhbGlkIG9yIGRpcnR5L3ByaXN0aW5lLlxuICpcbiAqIEVhY2gge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19IGRpcmVjdGl2ZSBjcmVhdGVzIGFuIGluc3RhbmNlXG4gKiBvZiBgRm9ybUNvbnRyb2xsZXJgLlxuICpcbiAqL1xuLy9hc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGVcbkZvcm1Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJyRhdHRycycsICckc2NvcGUnLCAnJGFuaW1hdGUnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiBGb3JtQ29udHJvbGxlcigkZWxlbWVudCwgJGF0dHJzLCAkc2NvcGUsICRhbmltYXRlLCAkaW50ZXJwb2xhdGUpIHtcbiAgdGhpcy4kJGNvbnRyb2xzID0gW107XG5cbiAgLy8gaW5pdCBzdGF0ZVxuICB0aGlzLiRlcnJvciA9IHt9O1xuICB0aGlzLiQkc3VjY2VzcyA9IHt9O1xuICB0aGlzLiRwZW5kaW5nID0gdW5kZWZpbmVkO1xuICB0aGlzLiRuYW1lID0gJGludGVycG9sYXRlKCRhdHRycy5uYW1lIHx8ICRhdHRycy5uZ0Zvcm0gfHwgJycpKCRzY29wZSk7XG4gIHRoaXMuJGRpcnR5ID0gZmFsc2U7XG4gIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTtcbiAgdGhpcy4kdmFsaWQgPSB0cnVlO1xuICB0aGlzLiRpbnZhbGlkID0gZmFsc2U7XG4gIHRoaXMuJHN1Ym1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLiQkcGFyZW50Rm9ybSA9IG51bGxGb3JtQ3RybDtcblxuICB0aGlzLiQkZWxlbWVudCA9ICRlbGVtZW50O1xuICB0aGlzLiQkYW5pbWF0ZSA9ICRhbmltYXRlO1xuXG4gIHNldHVwVmFsaWRpdHkodGhpcyk7XG59XG5cbkZvcm1Db250cm9sbGVyLnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJvbGxiYWNrIGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyB0eXBpY2FsbHkgbmVlZGVkIGJ5IHRoZSByZXNldCBidXR0b24gb2ZcbiAgICogYSBmb3JtIHRoYXQgdXNlcyBgbmctbW9kZWwtb3B0aW9uc2AgdG8gcGVuZCB1cGRhdGVzLlxuICAgKi9cbiAgJHJvbGxiYWNrVmlld1ZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKHRoaXMuJCRjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kcm9sbGJhY2tWaWV3VmFsdWUoKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRjb21taXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbW1pdCBhbGwgZm9ybSBjb250cm9scyBwZW5kaW5nIHVwZGF0ZXMgdG8gdGhlIGAkbW9kZWxWYWx1ZWAuXG4gICAqXG4gICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZVxuICAgKiBldmVudCBkZWZpbmVkIGluIGBuZy1tb2RlbC1vcHRpb25zYC4gVGhpcyBtZXRob2QgaXMgcmFyZWx5IG5lZWRlZCBhcyBgTmdNb2RlbENvbnRyb2xsZXJgXG4gICAqIHVzdWFsbHkgaGFuZGxlcyBjYWxsaW5nIHRoaXMgaW4gcmVzcG9uc2UgdG8gaW5wdXQgZXZlbnRzLlxuICAgKi9cbiAgJGNvbW1pdFZpZXdWYWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgZm9yRWFjaCh0aGlzLiQkY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGFkZENvbnRyb2xcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2wgY29udHJvbCBvYmplY3QsIGVpdGhlciBhIHtAbGluayBmb3JtLkZvcm1Db250cm9sbGVyfSBvciBhblxuICAgKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcn1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGEgY29udHJvbCB3aXRoIHRoZSBmb3JtLiBJbnB1dCBlbGVtZW50cyB1c2luZyBuZ01vZGVsQ29udHJvbGxlciBkbyB0aGlzIGF1dG9tYXRpY2FsbHlcbiAgICogd2hlbiB0aGV5IGFyZSBsaW5rZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY29udHJvbCB3aWxsIG5vdCBiZSByZWZsZWN0ZWQgb24gdGhlIG5ldyBwYXJlbnQgZm9ybS4gVGhpc1xuICAgKiBpcyBub3QgYW4gaXNzdWUgd2l0aCBub3JtYWwgdXNlLCBhcyBmcmVzaGx5IGNvbXBpbGVkIGFuZCBsaW5rZWQgY29udHJvbHMgYXJlIGluIGEgYCRwcmlzdGluZWBcbiAgICogc3RhdGUuXG4gICAqXG4gICAqIEhvd2V2ZXIsIGlmIHRoZSBtZXRob2QgaXMgdXNlZCBwcm9ncmFtbWF0aWNhbGx5LCBmb3IgZXhhbXBsZSBieSBhZGRpbmcgZHluYW1pY2FsbHkgY3JlYXRlZCBjb250cm9scyxcbiAgICogb3IgY29udHJvbHMgdGhhdCBoYXZlIGJlZW4gcHJldmlvdXNseSByZW1vdmVkIHdpdGhvdXQgZGVzdHJveWluZyB0aGVpciBjb3JyZXNwb25kaW5nIERPTSBlbGVtZW50LFxuICAgKiBpdCdzIHRoZSBkZXZlbG9wZXJzIHJlc3BvbnNpYmlsaXR5IHRvIG1ha2Ugc3VyZSB0aGUgY3VycmVudCBzdGF0ZSBwcm9wYWdhdGVzIHRvIHRoZSBwYXJlbnQgZm9ybS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGlmIGFuIGlucHV0IGNvbnRyb2wgaXMgYWRkZWQgdGhhdCBpcyBhbHJlYWR5IGAkZGlydHlgIGFuZCBoYXMgYCRlcnJvcmAgcHJvcGVydGllcyxcbiAgICogY2FsbGluZyBgJHNldERpcnR5KClgIGFuZCBgJHZhbGlkYXRlKClgIGFmdGVyd2FyZHMgd2lsbCBwcm9wYWdhdGUgdGhlIHN0YXRlIHRvIHRoZSBwYXJlbnQgZm9ybS5cbiAgICovXG4gICRhZGRDb250cm9sOiBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgLy8gQnJlYWtpbmcgY2hhbmdlIC0gYmVmb3JlLCBpbnB1dHMgd2hvc2UgbmFtZSB3YXMgXCJoYXNPd25Qcm9wZXJ0eVwiIHdlcmUgcXVpZXRseSBpZ25vcmVkXG4gICAgLy8gYW5kIG5vdCBhZGRlZCB0byB0aGUgc2NvcGUuICBOb3cgd2UgdGhyb3cgYW4gZXJyb3IuXG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkoY29udHJvbC4kbmFtZSwgJ2lucHV0Jyk7XG4gICAgdGhpcy4kJGNvbnRyb2xzLnB1c2goY29udHJvbCk7XG5cbiAgICBpZiAoY29udHJvbC4kbmFtZSkge1xuICAgICAgdGhpc1tjb250cm9sLiRuYW1lXSA9IGNvbnRyb2w7XG4gICAgfVxuXG4gICAgY29udHJvbC4kJHBhcmVudEZvcm0gPSB0aGlzO1xuICB9LFxuXG4gIC8vIFByaXZhdGUgQVBJOiByZW5hbWUgYSBmb3JtIGNvbnRyb2xcbiAgJCRyZW5hbWVDb250cm9sOiBmdW5jdGlvbihjb250cm9sLCBuZXdOYW1lKSB7XG4gICAgdmFyIG9sZE5hbWUgPSBjb250cm9sLiRuYW1lO1xuXG4gICAgaWYgKHRoaXNbb2xkTmFtZV0gPT09IGNvbnRyb2wpIHtcbiAgICAgIGRlbGV0ZSB0aGlzW29sZE5hbWVdO1xuICAgIH1cbiAgICB0aGlzW25ld05hbWVdID0gY29udHJvbDtcbiAgICBjb250cm9sLiRuYW1lID0gbmV3TmFtZTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRyZW1vdmVDb250cm9sXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250cm9sIGNvbnRyb2wgb2JqZWN0LCBlaXRoZXIgYSB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlcn0gb3IgYW5cbiAgICoge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJ9XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZXJlZ2lzdGVyIGEgY29udHJvbCBmcm9tIHRoZSBmb3JtLlxuICAgKlxuICAgKiBJbnB1dCBlbGVtZW50cyB1c2luZyBuZ01vZGVsQ29udHJvbGxlciBkbyB0aGlzIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGV5IGFyZSBkZXN0cm95ZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBvbmx5IHRoZSByZW1vdmVkIGNvbnRyb2wncyB2YWxpZGF0aW9uIHN0YXRlIChgJGVycm9yc2BldGMuKSB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGVcbiAgICogZm9ybS4gYCRkaXJ0eWAsIGAkc3VibWl0dGVkYCBzdGF0ZXMgd2lsbCBub3QgYmUgY2hhbmdlZCwgYmVjYXVzZSB0aGUgZXhwZWN0ZWQgYmVoYXZpb3IgY2FuIGJlXG4gICAqIGRpZmZlcmVudCBmcm9tIGNhc2UgdG8gY2FzZS4gRm9yIGV4YW1wbGUsIHJlbW92aW5nIHRoZSBvbmx5IGAkZGlydHlgIGNvbnRyb2wgZnJvbSBhIGZvcm0gbWF5IG9yXG4gICAqIG1heSBub3QgbWVhbiB0aGF0IHRoZSBmb3JtIGlzIHN0aWxsIGAkZGlydHlgLlxuICAgKi9cbiAgJHJlbW92ZUNvbnRyb2w6IGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICBpZiAoY29udHJvbC4kbmFtZSAmJiB0aGlzW2NvbnRyb2wuJG5hbWVdID09PSBjb250cm9sKSB7XG4gICAgICBkZWxldGUgdGhpc1tjb250cm9sLiRuYW1lXTtcbiAgICB9XG4gICAgZm9yRWFjaCh0aGlzLiRwZW5kaW5nLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWludmFsaWQtdGhpc1xuICAgICAgdGhpcy4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7XG4gICAgfSwgdGhpcyk7XG4gICAgZm9yRWFjaCh0aGlzLiRlcnJvciwgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgICAgIHRoaXMuJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgIH0sIHRoaXMpO1xuICAgIGZvckVhY2godGhpcy4kJHN1Y2Nlc3MsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW52YWxpZC10aGlzXG4gICAgICB0aGlzLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICB9LCB0aGlzKTtcblxuICAgIGFycmF5UmVtb3ZlKHRoaXMuJCRjb250cm9scywgY29udHJvbCk7XG4gICAgY29udHJvbC4kJHBhcmVudEZvcm0gPSBudWxsRm9ybUN0cmw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0RGlydHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gYSBkaXJ0eSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byBhZGQgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBhIGRpcnR5XG4gICAqIHN0YXRlIChuZy1kaXJ0eSBjbGFzcykuIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gcGFyZW50IGZvcm1zLlxuICAgKi9cbiAgJHNldERpcnR5OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpO1xuICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBESVJUWV9DTEFTUyk7XG4gICAgdGhpcy4kZGlydHkgPSB0cnVlO1xuICAgIHRoaXMuJHByaXN0aW5lID0gZmFsc2U7XG4gICAgdGhpcy4kJHBhcmVudEZvcm0uJHNldERpcnR5KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0UHJpc3RpbmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzZXRzIHRoZSBmb3JtJ3MgYCRwcmlzdGluZWAgc3RhdGUgdG8gdHJ1ZSwgdGhlIGAkZGlydHlgIHN0YXRlIHRvIGZhbHNlLCByZW1vdmVzXG4gICAqIHRoZSBgbmctZGlydHlgIGNsYXNzIGFuZCBhZGRzIHRoZSBgbmctcHJpc3RpbmVgIGNsYXNzLiBBZGRpdGlvbmFsbHksIGl0IHNldHMgdGhlIGAkc3VibWl0dGVkYFxuICAgKiBzdGF0ZSB0byBmYWxzZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBhbGwgdGhlIGNvbnRyb2xzIGNvbnRhaW5lZCBpbiB0aGlzIGZvcm0uXG4gICAqXG4gICAqIFNldHRpbmcgYSBmb3JtIGJhY2sgdG8gYSBwcmlzdGluZSBzdGF0ZSBpcyBvZnRlbiB1c2VmdWwgd2hlbiB3ZSB3YW50IHRvICdyZXVzZScgYSBmb3JtIGFmdGVyXG4gICAqIHNhdmluZyBvciByZXNldHRpbmcgaXQuXG4gICAqL1xuICAkc2V0UHJpc3RpbmU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCRhbmltYXRlLnNldENsYXNzKHRoaXMuJCRlbGVtZW50LCBQUklTVElORV9DTEFTUywgRElSVFlfQ0xBU1MgKyAnICcgKyBTVUJNSVRURURfQ0xBU1MpO1xuICAgIHRoaXMuJGRpcnR5ID0gZmFsc2U7XG4gICAgdGhpcy4kcHJpc3RpbmUgPSB0cnVlO1xuICAgIHRoaXMuJHN1Ym1pdHRlZCA9IGZhbHNlO1xuICAgIGZvckVhY2godGhpcy4kJGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRzZXRQcmlzdGluZSgpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFVudG91Y2hlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgdW50b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLXRvdWNoZWQnIGNsYXNzIGFuZCBzZXQgdGhlIGZvcm0gY29udHJvbHMgdG8gdGhlaXJcbiAgICogdW50b3VjaGVkIHN0YXRlIChuZy11bnRvdWNoZWQgY2xhc3MpLlxuICAgKlxuICAgKiBTZXR0aW5nIGEgZm9ybSBjb250cm9scyBiYWNrIHRvIHRoZWlyIHVudG91Y2hlZCBzdGF0ZSBpcyBvZnRlbiB1c2VmdWwgd2hlbiBzZXR0aW5nIHRoZSBmb3JtXG4gICAqIGJhY2sgdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKi9cbiAgJHNldFVudG91Y2hlZDogZnVuY3Rpb24oKSB7XG4gICAgZm9yRWFjaCh0aGlzLiQkY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJHNldFVudG91Y2hlZCgpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFN1Ym1pdHRlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgc3VibWl0dGVkIHN0YXRlLlxuICAgKi9cbiAgJHNldFN1Ym1pdHRlZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIFNVQk1JVFRFRF9DTEFTUyk7XG4gICAgdGhpcy4kc3VibWl0dGVkID0gdHJ1ZTtcbiAgICB0aGlzLiQkcGFyZW50Rm9ybS4kc2V0U3VibWl0dGVkKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0VmFsaWRpdHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENoYW5nZSB0aGUgdmFsaWRpdHkgc3RhdGUgb2YgdGhlIGZvcm0sIGFuZCBub3RpZnkgdGhlIHBhcmVudCBmb3JtIChpZiBhbnkpLlxuICpcbiAqIEFwcGxpY2F0aW9uIGRldmVsb3BlcnMgd2lsbCByYXJlbHkgbmVlZCB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBJdCBpcyB1c2VkIGludGVybmFsbHksIGJ5XG4gKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VmFsaWRpdHkgTmdNb2RlbENvbnRyb2xsZXIuJHNldFZhbGlkaXR5KCl9LCB0byBwcm9wYWdhdGUgYVxuICogY29udHJvbCdzIHZhbGlkaXR5IHN0YXRlIHRvIHRoZSBwYXJlbnQgYEZvcm1Db250cm9sbGVyYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdGlvbkVycm9yS2V5IE5hbWUgb2YgdGhlIHZhbGlkYXRvci4gVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHdpbGwgYmVcbiAqICAgICAgICBhc3NpZ25lZCB0byBlaXRoZXIgYCRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldYCBvciBgJHBlbmRpbmdbdmFsaWRhdGlvbkVycm9yS2V5XWAgKGZvclxuICogICAgICAgIHVuZnVsZmlsbGVkIGAkYXN5bmNWYWxpZGF0b3JzYCksIHNvIHRoYXQgaXQgaXMgYXZhaWxhYmxlIGZvciBkYXRhLWJpbmRpbmcuIFRoZVxuICogICAgICAgIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHNob3VsZCBiZSBpbiBjYW1lbENhc2UgYW5kIHdpbGwgZ2V0IGNvbnZlcnRlZCBpbnRvIGRhc2gtY2FzZSBmb3JcbiAqICAgICAgICBjbGFzcyBuYW1lLiBFeGFtcGxlOiBgbXlFcnJvcmAgd2lsbCByZXN1bHQgaW4gYG5nLXZhbGlkLW15LWVycm9yYCBhbmRcbiAqICAgICAgICBgbmctaW52YWxpZC1teS1lcnJvcmAgY2xhc3NlcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzIGB7eyBzb21lRm9ybS4kZXJyb3IubXlFcnJvciB9fWAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzVmFsaWQgV2hldGhlciB0aGUgY3VycmVudCBzdGF0ZSBpcyB2YWxpZCAodHJ1ZSksIGludmFsaWQgKGZhbHNlKSwgcGVuZGluZ1xuICogICAgICAgICh1bmRlZmluZWQpLCAgb3Igc2tpcHBlZCAobnVsbCkuIFBlbmRpbmcgaXMgdXNlZCBmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgLlxuICogICAgICAgIFNraXBwZWQgaXMgdXNlZCBieSBBbmd1bGFySlMgd2hlbiB2YWxpZGF0b3JzIGRvIG5vdCBydW4gYmVjYXVzZSBvZiBwYXJzZSBlcnJvcnMgYW5kIHdoZW5cbiAqICAgICAgICBgJGFzeW5jVmFsaWRhdG9yc2AgZG8gbm90IHJ1biBiZWNhdXNlIGFueSBvZiB0aGUgYCR2YWxpZGF0b3JzYCBmYWlsZWQuXG4gKiBAcGFyYW0ge05nTW9kZWxDb250cm9sbGVyIHwgRm9ybUNvbnRyb2xsZXJ9IGNvbnRyb2xsZXIgLSBUaGUgY29udHJvbGxlciB3aG9zZSB2YWxpZGl0eSBzdGF0ZSBpc1xuICogICAgICAgIHRyaWdnZXJpbmcgdGhlIGNoYW5nZS5cbiAqL1xuYWRkU2V0VmFsaWRpdHlNZXRob2Qoe1xuICBjbGF6ejogRm9ybUNvbnRyb2xsZXIsXG4gIHNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgY29udHJvbGxlcikge1xuICAgIHZhciBsaXN0ID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICBpZiAoIWxpc3QpIHtcbiAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBbY29udHJvbGxlcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZihjb250cm9sbGVyKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgbGlzdC5wdXNoKGNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgdW5zZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGNvbnRyb2xsZXIpIHtcbiAgICB2YXIgbGlzdCA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgaWYgKCFsaXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFycmF5UmVtb3ZlKGxpc3QsIGNvbnRyb2xsZXIpO1xuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Zvcm1cbiAqIEByZXN0cmljdCBFQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE5lc3RhYmxlIGFsaWFzIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBgZm9ybWB9IGRpcmVjdGl2ZS4gSFRNTFxuICogZG9lcyBub3QgYWxsb3cgbmVzdGluZyBvZiBmb3JtIGVsZW1lbnRzLiBJdCBpcyB1c2VmdWwgdG8gbmVzdCBmb3JtcywgZm9yIGV4YW1wbGUgaWYgdGhlIHZhbGlkaXR5IG9mIGFcbiAqIHN1Yi1ncm91cCBvZiBjb250cm9scyBuZWVkcyB0byBiZSBkZXRlcm1pbmVkLlxuICpcbiAqIE5vdGU6IHRoZSBwdXJwb3NlIG9mIGBuZ0Zvcm1gIGlzIHRvIGdyb3VwIGNvbnRyb2xzLFxuICogYnV0IG5vdCB0byBiZSBhIHJlcGxhY2VtZW50IGZvciB0aGUgYDxmb3JtPmAgdGFnIHdpdGggYWxsIG9mIGl0cyBjYXBhYmlsaXRpZXNcbiAqIChlLmcuIHBvc3RpbmcgdG8gdGhlIHNlcnZlciwgLi4uKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nRm9ybXxuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLlxuICpcbiAqL1xuXG4gLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBmb3JtXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIHRoYXQgaW5zdGFudGlhdGVzXG4gKiB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlciBGb3JtQ29udHJvbGxlcn0uXG4gKlxuICogSWYgdGhlIGBuYW1lYCBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIGlzIHB1Ymxpc2hlZCBvbnRvIHRoZSBjdXJyZW50IHNjb3BlIHVuZGVyXG4gKiB0aGlzIG5hbWUuXG4gKlxuICogIyBBbGlhczoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9XG4gKlxuICogSW4gQW5ndWxhciwgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZFxuICogZm9ybXMgYXJlIHZhbGlkIGFzIHdlbGwuIEhvd2V2ZXIsIGJyb3dzZXJzIGRvIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGA8Zm9ybT5gIGVsZW1lbnRzLCBzb1xuICogQW5ndWxhciBwcm92aWRlcyB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGRpcmVjdGl2ZSwgd2hpY2ggYmVoYXZlcyBpZGVudGljYWxseSB0b1xuICogYGZvcm1gIGJ1dCBjYW4gYmUgbmVzdGVkLiBOZXN0ZWQgZm9ybXMgY2FuIGJlIHVzZWZ1bCwgZm9yIGV4YW1wbGUsIGlmIHRoZSB2YWxpZGl0eSBvZiBhIHN1Yi1ncm91cFxuICogb2YgY29udHJvbHMgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC5cbiAqXG4gKiAjIENTUyBjbGFzc2VzXG4gKiAgLSBgbmctdmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyB2YWxpZC5cbiAqICAtIGBuZy1pbnZhbGlkYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgaW52YWxpZC5cbiAqICAtIGBuZy1wZW5kaW5nYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgcGVuZGluZy5cbiAqICAtIGBuZy1wcmlzdGluZWAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHByaXN0aW5lLlxuICogIC0gYG5nLWRpcnR5YCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgZGlydHkuXG4gKiAgLSBgbmctc3VibWl0dGVkYCBpcyBzZXQgaWYgdGhlIGZvcm0gd2FzIHN1Ym1pdHRlZC5cbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBuZ0FuaW1hdGUgY2FuIGRldGVjdCBlYWNoIG9mIHRoZXNlIGNsYXNzZXMgd2hlbiBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqXG4gKlxuICogIyBTdWJtaXR0aW5nIGEgZm9ybSBhbmQgcHJldmVudGluZyB0aGUgZGVmYXVsdCBhY3Rpb25cbiAqXG4gKiBTaW5jZSB0aGUgcm9sZSBvZiBmb3JtcyBpbiBjbGllbnQtc2lkZSBBbmd1bGFyIGFwcGxpY2F0aW9ucyBpcyBkaWZmZXJlbnQgdGhhbiBpbiBjbGFzc2ljYWxcbiAqIHJvdW5kdHJpcCBhcHBzLCBpdCBpcyBkZXNpcmFibGUgZm9yIHRoZSBicm93c2VyIG5vdCB0byB0cmFuc2xhdGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbnRvIGEgZnVsbFxuICogcGFnZSByZWxvYWQgdGhhdCBzZW5kcyB0aGUgZGF0YSB0byB0aGUgc2VydmVyLiBJbnN0ZWFkIHNvbWUgamF2YXNjcmlwdCBsb2dpYyBzaG91bGQgYmUgdHJpZ2dlcmVkXG4gKiB0byBoYW5kbGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbiBhbiBhcHBsaWNhdGlvbi1zcGVjaWZpYyB3YXkuXG4gKlxuICogRm9yIHRoaXMgcmVhc29uLCBBbmd1bGFyIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiAoZm9ybSBzdWJtaXNzaW9uIHRvIHRoZSBzZXJ2ZXIpIHVubGVzcyB0aGVcbiAqIGA8Zm9ybT5gIGVsZW1lbnQgaGFzIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBzcGVjaWZpZWQuXG4gKlxuICogWW91IGNhbiB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgdHdvIHdheXMgdG8gc3BlY2lmeSB3aGF0IGphdmFzY3JpcHQgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlblxuICogYSBmb3JtIGlzIHN1Ym1pdHRlZDpcbiAqXG4gKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9IGRpcmVjdGl2ZSBvbiB0aGUgZm9ybSBlbGVtZW50XG4gKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSBkaXJlY3RpdmUgb24gdGhlIGZpcnN0XG4gICogIGJ1dHRvbiBvciBpbnB1dCBmaWVsZCBvZiB0eXBlIHN1Ym1pdCAoaW5wdXRbdHlwZT1zdWJtaXRdKVxuICpcbiAqIFRvIHByZXZlbnQgZG91YmxlIGV4ZWN1dGlvbiBvZiB0aGUgaGFuZGxlciwgdXNlIG9ubHkgb25lIG9mIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fVxuICogb3Ige0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9IGRpcmVjdGl2ZXMuXG4gKiBUaGlzIGlzIGJlY2F1c2Ugb2YgdGhlIGZvbGxvd2luZyBmb3JtIHN1Ym1pc3Npb24gcnVsZXMgaW4gdGhlIEhUTUwgc3BlY2lmaWNhdGlvbjpcbiAqXG4gKiAtIElmIGEgZm9ybSBoYXMgb25seSBvbmUgaW5wdXQgZmllbGQgdGhlbiBoaXR0aW5nIGVudGVyIGluIHRoaXMgZmllbGQgdHJpZ2dlcnMgZm9ybSBzdWJtaXRcbiAqIChgbmdTdWJtaXRgKVxuICogLSBpZiBhIGZvcm0gaGFzIDIrIGlucHV0IGZpZWxkcyBhbmQgbm8gYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlbiBoaXR0aW5nIGVudGVyXG4gKiBkb2Vzbid0IHRyaWdnZXIgc3VibWl0XG4gKiAtIGlmIGEgZm9ybSBoYXMgb25lIG9yIG1vcmUgaW5wdXQgZmllbGRzIGFuZCBvbmUgb3IgbW9yZSBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuXG4gKiBoaXR0aW5nIGVudGVyIGluIGFueSBvZiB0aGUgaW5wdXQgZmllbGRzIHdpbGwgdHJpZ2dlciB0aGUgY2xpY2sgaGFuZGxlciBvbiB0aGUgKmZpcnN0KiBidXR0b24gb3JcbiAqIGlucHV0W3R5cGU9c3VibWl0XSAoYG5nQ2xpY2tgKSAqYW5kKiBhIHN1Ym1pdCBoYW5kbGVyIG9uIHRoZSBlbmNsb3NpbmcgZm9ybSAoYG5nU3VibWl0YClcbiAqXG4gKiBBbnkgcGVuZGluZyBgbmdNb2RlbE9wdGlvbnNgIGNoYW5nZXMgd2lsbCB0YWtlIHBsYWNlIGltbWVkaWF0ZWx5IHdoZW4gYW4gZW5jbG9zaW5nIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZC4gTm90ZSB0aGF0IGBuZ0NsaWNrYCBldmVudHMgd2lsbCBvY2N1ciBiZWZvcmUgdGhlIG1vZGVsIGlzIHVwZGF0ZWQuIFVzZSBgbmdTdWJtaXRgXG4gKiB0byBoYXZlIGFjY2VzcyB0byB0aGUgdXBkYXRlZCBtb2RlbC5cbiAqXG4gKiAjIyBBbmltYXRpb24gSG9va3NcbiAqXG4gKiBBbmltYXRpb25zIGluIG5nRm9ybSBhcmUgdHJpZ2dlcmVkIHdoZW4gYW55IG9mIHRoZSBhc3NvY2lhdGVkIENTUyBjbGFzc2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqIFRoZXNlIGNsYXNzZXMgYXJlOiBgLm5nLXByaXN0aW5lYCwgYC5uZy1kaXJ0eWAsIGAubmctaW52YWxpZGAgYW5kIGAubmctdmFsaWRgIGFzIHdlbGwgYXMgYW55XG4gKiBvdGhlciB2YWxpZGF0aW9ucyB0aGF0IGFyZSBwZXJmb3JtZWQgd2l0aGluIHRoZSBmb3JtLiBBbmltYXRpb25zIGluIG5nRm9ybSBhcmUgc2ltaWxhciB0byBob3dcbiAqIHRoZXkgd29yayBpbiBuZ0NsYXNzIGFuZCBhbmltYXRpb25zIGNhbiBiZSBob29rZWQgaW50byB1c2luZyBDU1MgdHJhbnNpdGlvbnMsIGtleWZyYW1lcyBhcyB3ZWxsXG4gKiBhcyBKUyBhbmltYXRpb25zLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBhIHNpbXBsZSB3YXkgdG8gdXRpbGl6ZSBDU1MgdHJhbnNpdGlvbnMgdG8gc3R5bGUgYSBmb3JtIGVsZW1lbnRcbiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6XG4gKlxuICogPHByZT5cbiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZVxuICogLy9hZHZhbmNlZCBhbmltYXRpb25zXG4gKiAubXktZm9ybSB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAqIH1cbiAqIC5teS1mb3JtLm5nLWludmFsaWQge1xuICogICBiYWNrZ3JvdW5kOiByZWQ7XG4gKiAgIGNvbG9yOndoaXRlO1xuICogfVxuICogPC9wcmU+XG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctZm9ybVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiZm9ybUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdmb3JtRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRm9ybUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS51c2VyVHlwZSA9ICdndWVzdCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgIC5teS1mb3JtIHtcbiAgICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICAubXktZm9ybS5uZy1pbnZhbGlkIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gICAgICAgIH1cbiAgICAgICA8L3N0eWxlPlxuICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRm9ybUNvbnRyb2xsZXJcIiBjbGFzcz1cIm15LWZvcm1cIj5cbiAgICAgICAgIHVzZXJUeXBlOiA8aW5wdXQgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ1c2VyVHlwZVwiIHJlcXVpcmVkPlxuICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPjxicj5cbiAgICAgICAgIDxjb2RlPnVzZXJUeXBlID0ge3t1c2VyVHlwZX19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gICAgICAgICA8Y29kZT5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L2NvZGU+PGJyPlxuICAgICAgICAgPGNvZGU+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC9jb2RlPjxicj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdXNlclR5cGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXJUeXBlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIHVzZXJJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXJUeXBlJykpO1xuXG4gICAgICAgICAgdXNlcklucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlcklucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3VzZXJUeXBlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgTmFtZSBvZiB0aGUgZm9ybS4gSWYgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIHdpbGwgYmUgcHVibGlzaGVkIGludG9cbiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuXG4gKi9cbnZhciBmb3JtRGlyZWN0aXZlRmFjdG9yeSA9IGZ1bmN0aW9uKGlzTmdGb3JtKSB7XG4gIHJldHVybiBbJyR0aW1lb3V0JywgJyRwYXJzZScsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkcGFyc2UpIHtcbiAgICB2YXIgZm9ybURpcmVjdGl2ZSA9IHtcbiAgICAgIG5hbWU6ICdmb3JtJyxcbiAgICAgIHJlc3RyaWN0OiBpc05nRm9ybSA/ICdFQUMnIDogJ0UnLFxuICAgICAgcmVxdWlyZTogWydmb3JtJywgJ15eP2Zvcm0nXSwgLy9maXJzdCBpcyB0aGUgZm9ybSdzIG93biBjdHJsLCBzZWNvbmQgaXMgYW4gb3B0aW9uYWwgcGFyZW50IGZvcm1cbiAgICAgIGNvbnRyb2xsZXI6IEZvcm1Db250cm9sbGVyLFxuICAgICAgY29tcGlsZTogZnVuY3Rpb24gbmdGb3JtQ29tcGlsZShmb3JtRWxlbWVudCwgYXR0cikge1xuICAgICAgICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXG4gICAgICAgIGZvcm1FbGVtZW50LmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKS5hZGRDbGFzcyhWQUxJRF9DTEFTUyk7XG5cbiAgICAgICAgdmFyIG5hbWVBdHRyID0gYXR0ci5uYW1lID8gJ25hbWUnIDogKGlzTmdGb3JtICYmIGF0dHIubmdGb3JtID8gJ25nRm9ybScgOiBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwcmU6IGZ1bmN0aW9uIG5nRm9ybVByZUxpbmsoc2NvcGUsIGZvcm1FbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBjdHJsc1swXTtcblxuICAgICAgICAgICAgLy8gaWYgYGFjdGlvbmAgYXR0ciBpcyBub3QgcHJlc2VudCBvbiB0aGUgZm9ybSwgcHJldmVudCB0aGUgZGVmYXVsdCBhY3Rpb24gKHN1Ym1pc3Npb24pXG4gICAgICAgICAgICBpZiAoISgnYWN0aW9uJyBpbiBhdHRyKSkge1xuICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1c2UganEgZXZlbnRzIGJlY2F1c2UgaWYgYSBmb3JtIGlzIGRlc3Ryb3llZCBkdXJpbmcgc3VibWlzc2lvbiB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgICAvLyBhY3Rpb24gaXMgbm90IHByZXZlbnRlZC4gc2VlICMxMjM4XG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vIElFIDkgaXMgbm90IGFmZmVjdGVkIGJlY2F1c2UgaXQgZG9lc24ndCBmaXJlIGEgc3VibWl0IGV2ZW50IGFuZCB0cnkgdG8gZG8gYSBmdWxsXG4gICAgICAgICAgICAgIC8vIHBhZ2UgcmVsb2FkIGlmIHRoZSBmb3JtIHdhcyBkZXN0cm95ZWQgYnkgc3VibWlzc2lvbiBvZiB0aGUgZm9ybSB2aWEgYSBjbGljayBoYW5kbGVyXG4gICAgICAgICAgICAgIC8vIG9uIGEgYnV0dG9uIGluIHRoZSBmb3JtLiBMb29rcyBsaWtlIGFuIElFOSBzcGVjaWZpYyBidWcuXG4gICAgICAgICAgICAgIHZhciBoYW5kbGVGb3JtU3VibWlzc2lvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRTdWJtaXR0ZWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgZm9ybUVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuXG4gICAgICAgICAgICAgIC8vIHVucmVnaXN0ZXIgdGhlIHByZXZlbnREZWZhdWx0IGxpc3RlbmVyIHNvIHRoYXQgd2UgZG9uJ3Qgbm90IGxlYWsgbWVtb3J5IGJ1dCBpbiBhXG4gICAgICAgICAgICAgIC8vIHdheSB0aGF0IHdpbGwgYWNoaWV2ZSB0aGUgcHJldmVudGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgZm9ybUVsZW1lbnRbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuICAgICAgICAgICAgICAgIH0sIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJlbnRGb3JtQ3RybCA9IGN0cmxzWzFdIHx8IGNvbnRyb2xsZXIuJCRwYXJlbnRGb3JtO1xuICAgICAgICAgICAgcGFyZW50Rm9ybUN0cmwuJGFkZENvbnRyb2woY29udHJvbGxlcik7XG5cbiAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBuYW1lQXR0ciA/IGdldFNldHRlcihjb250cm9sbGVyLiRuYW1lKSA6IG5vb3A7XG5cbiAgICAgICAgICAgIGlmIChuYW1lQXR0cikge1xuICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICBhdHRyLiRvYnNlcnZlKG5hbWVBdHRyLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChjb250cm9sbGVyLiRuYW1lID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNldHRlcihzY29wZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLiQkcGFyZW50Rm9ybS4kJHJlbmFtZUNvbnRyb2woY29udHJvbGxlciwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIHNldHRlciA9IGdldFNldHRlcihjb250cm9sbGVyLiRuYW1lKTtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLiQkcGFyZW50Rm9ybS4kcmVtb3ZlQ29udHJvbChjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICBleHRlbmQoY29udHJvbGxlciwgbnVsbEZvcm1DdHJsKTsgLy9zdG9wIHByb3BhZ2F0aW5nIGNoaWxkIGRlc3RydWN0aW9uIGhhbmRsZXJzIHVwd2FyZHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1EaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBnZXRTZXR0ZXIoZXhwcmVzc2lvbikge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7XG4gICAgICAgIC8vY3JlYXRlIGFuIGFzc2lnbmFibGUgZXhwcmVzc2lvbiwgc28gZm9ybXMgd2l0aCBhbiBlbXB0eSBuYW1lIGNhbiBiZSByZW5hbWVkIGxhdGVyXG4gICAgICAgIHJldHVybiAkcGFyc2UoJ3RoaXNbXCJcIl0nKS5hc3NpZ247XG4gICAgICB9XG4gICAgICByZXR1cm4gJHBhcnNlKGV4cHJlc3Npb24pLmFzc2lnbiB8fCBub29wO1xuICAgIH1cbiAgfV07XG59O1xuXG52YXIgZm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KCk7XG52YXIgbmdGb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkodHJ1ZSk7XG5cblxuXG4vLyBoZWxwZXIgbWV0aG9kc1xuZnVuY3Rpb24gc2V0dXBWYWxpZGl0eShpbnN0YW5jZSkge1xuICBpbnN0YW5jZS4kJGNsYXNzQ2FjaGUgPSB7fTtcbiAgaW5zdGFuY2UuJCRjbGFzc0NhY2hlW0lOVkFMSURfQ0xBU1NdID0gIShpbnN0YW5jZS4kJGNsYXNzQ2FjaGVbVkFMSURfQ0xBU1NdID0gaW5zdGFuY2UuJCRlbGVtZW50Lmhhc0NsYXNzKFZBTElEX0NMQVNTKSk7XG59XG5mdW5jdGlvbiBhZGRTZXRWYWxpZGl0eU1ldGhvZChjb250ZXh0KSB7XG4gIHZhciBjbGF6eiA9IGNvbnRleHQuY2xhenosXG4gICAgICBzZXQgPSBjb250ZXh0LnNldCxcbiAgICAgIHVuc2V0ID0gY29udGV4dC51bnNldDtcblxuICBjbGF6ei5wcm90b3R5cGUuJHNldFZhbGlkaXR5ID0gZnVuY3Rpb24odmFsaWRhdGlvbkVycm9yS2V5LCBzdGF0ZSwgY29udHJvbGxlcikge1xuICAgIGlmIChpc1VuZGVmaW5lZChzdGF0ZSkpIHtcbiAgICAgIGNyZWF0ZUFuZFNldCh0aGlzLCAnJHBlbmRpbmcnLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bnNldEFuZENsZWFudXAodGhpcywgJyRwZW5kaW5nJywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICB9XG4gICAgaWYgKCFpc0Jvb2xlYW4oc3RhdGUpKSB7XG4gICAgICB1bnNldCh0aGlzLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIHVuc2V0KHRoaXMuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgdW5zZXQodGhpcy4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICAgIHNldCh0aGlzLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldCh0aGlzLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgICAgdW5zZXQodGhpcy4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLiRwZW5kaW5nKSB7XG4gICAgICBjYWNoZWRUb2dnbGVDbGFzcyh0aGlzLCBQRU5ESU5HX0NMQVNTLCB0cnVlKTtcbiAgICAgIHRoaXMuJHZhbGlkID0gdGhpcy4kaW52YWxpZCA9IHVuZGVmaW5lZDtcbiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModGhpcywgJycsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZWRUb2dnbGVDbGFzcyh0aGlzLCBQRU5ESU5HX0NMQVNTLCBmYWxzZSk7XG4gICAgICB0aGlzLiR2YWxpZCA9IGlzT2JqZWN0RW1wdHkodGhpcy4kZXJyb3IpO1xuICAgICAgdGhpcy4kaW52YWxpZCA9ICF0aGlzLiR2YWxpZDtcbiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModGhpcywgJycsIHRoaXMuJHZhbGlkKTtcbiAgICB9XG5cbiAgICAvLyByZS1yZWFkIHRoZSBzdGF0ZSBhcyB0aGUgc2V0L3Vuc2V0IG1ldGhvZHMgY291bGQgaGF2ZVxuICAgIC8vIGNvbWJpbmVkIHN0YXRlIGluIHRoaXMuJGVycm9yW3ZhbGlkYXRpb25FcnJvcl0gKHVzZWQgZm9yIGZvcm1zKSxcbiAgICAvLyB3aGVyZSBzZXR0aW5nL3Vuc2V0dGluZyBvbmx5IGluY3JlbWVudHMvZGVjcmVtZW50cyB0aGUgdmFsdWUsXG4gICAgLy8gYW5kIGRvZXMgbm90IHJlcGxhY2UgaXQuXG4gICAgdmFyIGNvbWJpbmVkU3RhdGU7XG4gICAgaWYgKHRoaXMuJHBlbmRpbmcgJiYgdGhpcy4kcGVuZGluZ1t2YWxpZGF0aW9uRXJyb3JLZXldKSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAodGhpcy4kZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodGhpcy4kJHN1Y2Nlc3NbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModGhpcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlKTtcbiAgICB0aGlzLiQkcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlLCB0aGlzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVBbmRTZXQoY3RybCwgbmFtZSwgdmFsdWUsIGNvbnRyb2xsZXIpIHtcbiAgICBpZiAoIWN0cmxbbmFtZV0pIHtcbiAgICAgIGN0cmxbbmFtZV0gPSB7fTtcbiAgICB9XG4gICAgc2V0KGN0cmxbbmFtZV0sIHZhbHVlLCBjb250cm9sbGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuc2V0QW5kQ2xlYW51cChjdHJsLCBuYW1lLCB2YWx1ZSwgY29udHJvbGxlcikge1xuICAgIGlmIChjdHJsW25hbWVdKSB7XG4gICAgICB1bnNldChjdHJsW25hbWVdLCB2YWx1ZSwgY29udHJvbGxlcik7XG4gICAgfVxuICAgIGlmIChpc09iamVjdEVtcHR5KGN0cmxbbmFtZV0pKSB7XG4gICAgICBjdHJsW25hbWVdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlZFRvZ2dsZUNsYXNzKGN0cmwsIGNsYXNzTmFtZSwgc3dpdGNoVmFsdWUpIHtcbiAgICBpZiAoc3dpdGNoVmFsdWUgJiYgIWN0cmwuJCRjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgIGN0cmwuJCRhbmltYXRlLmFkZENsYXNzKGN0cmwuJCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgY3RybC4kJGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICghc3dpdGNoVmFsdWUgJiYgY3RybC4kJGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSkge1xuICAgICAgY3RybC4kJGFuaW1hdGUucmVtb3ZlQ2xhc3MoY3RybC4kJGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICBjdHJsLiQkY2xhc3NDYWNoZVtjbGFzc05hbWVdID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRhdGlvbkNzcyhjdHJsLCB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JLZXkgPSB2YWxpZGF0aW9uRXJyb3JLZXkgPyAnLScgKyBzbmFrZV9jYXNlKHZhbGlkYXRpb25FcnJvcktleSwgJy0nKSA6ICcnO1xuXG4gICAgY2FjaGVkVG9nZ2xlQ2xhc3MoY3RybCwgVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IHRydWUpO1xuICAgIGNhY2hlZFRvZ2dsZUNsYXNzKGN0cmwsIElOVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICBpZiAob2JqKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyogZ2xvYmFsXG4gIFZBTElEX0NMQVNTOiBmYWxzZSxcbiAgSU5WQUxJRF9DTEFTUzogZmFsc2UsXG4gIFBSSVNUSU5FX0NMQVNTOiBmYWxzZSxcbiAgRElSVFlfQ0xBU1M6IGZhbHNlLFxuICBuZ01vZGVsTWluRXJyOiBmYWxzZVxuKi9cblxuLy8gUmVnZXggY29kZSB3YXMgaW5pdGlhbGx5IG9idGFpbmVkIGZyb20gU08gcHJpb3IgdG8gbW9kaWZpY2F0aW9uOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTQzMDcwL2phdmFzY3JpcHQtcmVnZXgtaXNvLWRhdGV0aW1lI2Fuc3dlci0zMTQzMjMxXG52YXIgSVNPX0RBVEVfUkVHRVhQID0gL15cXGR7NCx9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKD86WystXVswLTJdXFxkOlswLTVdXFxkfFopJC87XG4vLyBTZWUgdmFsaWQgVVJMcyBpbiBSRkMzOTg3IChodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg3KVxuLy8gTm90ZTogV2UgYXJlIGJlaW5nIG1vcmUgbGVuaWVudCwgYmVjYXVzZSBicm93c2VycyBhcmUgdG9vLlxuLy8gICAxLiBTY2hlbWVcbi8vICAgMi4gU2xhc2hlc1xuLy8gICAzLiBVc2VybmFtZVxuLy8gICA0LiBQYXNzd29yZFxuLy8gICA1LiBIb3N0bmFtZVxuLy8gICA2LiBQb3J0XG4vLyAgIDcuIFBhdGhcbi8vICAgOC4gUXVlcnlcbi8vICAgOS4gRnJhZ21lbnRcbi8vICAgICAgICAgICAgICAgICAxMTExMTExMTExMTExMTExIDIyMiAgIDMzMzMzMyAgICA0NDQ0NCAgICAgICAgNTU1NTU1NTU1NTU1NTU1NTU1NTU1NTUgICAgIDY2NiAgICAgNzc3Nzc3NzcgICAgIDg4ODg4ODggICAgIDk5OVxudmFyIFVSTF9SRUdFWFAgPSAvXlthLXpdW2EtelxcZC4rLV0qOlxcLyooPzpbXjpAXSsoPzo6W15AXSspP0ApPyg/OlteXFxzOi8/I10rfFxcW1thLWZcXGQ6XStdKSg/OjpcXGQrKT8oPzpcXC9bXj8jXSopPyg/OlxcP1teI10qKT8oPzojLiopPyQvaTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG52YXIgRU1BSUxfUkVHRVhQID0gL14oPz0uezEsMjU0fSQpKD89LnsxLDY0fUApWy0hIyQlJicqKy8wLTk9P0EtWl5fYGEtent8fX5dKyhcXC5bLSEjJCUmJyorLzAtOT0/QS1aXl9gYS16e3x9fl0rKSpAW0EtWmEtejAtOV0oW0EtWmEtejAtOS1dezAsNjF9W0EtWmEtejAtOV0pPyhcXC5bQS1aYS16MC05XShbQS1aYS16MC05LV17MCw2MX1bQS1aYS16MC05XSk/KSokLztcbnZhciBOVU1CRVJfUkVHRVhQID0gL15cXHMqKC18XFwrKT8oXFxkK3woXFxkKihcXC5cXGQqKSkpKFtlRV1bKy1dP1xcZCspP1xccyokLztcbnZhciBEQVRFX1JFR0VYUCA9IC9eKFxcZHs0LH0pLShcXGR7Mn0pLShcXGR7Mn0pJC87XG52YXIgREFURVRJTUVMT0NBTF9SRUdFWFAgPSAvXihcXGR7NCx9KS0oXFxkXFxkKS0oXFxkXFxkKVQoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKShcXC5cXGR7MSwzfSk/KT8kLztcbnZhciBXRUVLX1JFR0VYUCA9IC9eKFxcZHs0LH0pLVcoXFxkXFxkKSQvO1xudmFyIE1PTlRIX1JFR0VYUCA9IC9eKFxcZHs0LH0pLShcXGRcXGQpJC87XG52YXIgVElNRV9SRUdFWFAgPSAvXihcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKFxcLlxcZHsxLDN9KT8pPyQvO1xuXG52YXIgUEFSVElBTF9WQUxJREFUSU9OX0VWRU5UUyA9ICdrZXlkb3duIHdoZWVsIG1vdXNlZG93bic7XG52YXIgUEFSVElBTF9WQUxJREFUSU9OX1RZUEVTID0gY3JlYXRlTWFwKCk7XG5mb3JFYWNoKCdkYXRlLGRhdGV0aW1lLWxvY2FsLG1vbnRoLHRpbWUsd2Vlaycuc3BsaXQoJywnKSwgZnVuY3Rpb24odHlwZSkge1xuICBQQVJUSUFMX1ZBTElEQVRJT05fVFlQRVNbdHlwZV0gPSB0cnVlO1xufSk7XG5cbnZhciBpbnB1dFR5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0ZXh0XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcsIGluaGVyaXRlZCBieSBtb3N0IG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRzLlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlICR2aWV3VmFsdWV9XG4gICAqICAgIGRvZXMgbm90IG1hdGNoIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gICAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAgICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAgICogICAgYWNjb3VudC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAgICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGVcbiAgICogICAgaW5wdXQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwidGV4dC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ0ZXh0SW5wdXRFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndGV4dElucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICAgdGV4dDogJ2d1ZXN0JyxcbiAgICAgICAgICAgICAgICAgd29yZDogL15cXHMqXFx3KlxccyokL1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlNpbmdsZSB3b3JkOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS50ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgbmctcGF0dGVybj1cImV4YW1wbGUud29yZFwiIHJlcXVpcmVkIG5nLXRyaW09XCJmYWxzZVwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5wYXR0ZXJuXCI+XG4gICAgICAgICAgICAgICBTaW5nbGUgd29yZCBvbmx5ITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDxjb2RlPnRleHQgPSB7e2V4YW1wbGUudGV4dH19PC9jb2RlPjxici8+XG4gICAgICAgICAgIDxjb2RlPm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICA8Y29kZT5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgPGNvZGU+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC9jb2RlPjxici8+XG4gICAgICAgICAgIDxjb2RlPm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC9jb2RlPjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS50ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdndWVzdCcpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbXVsdGkgd29yZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdoZWxsbyB3b3JsZCcpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICd0ZXh0JzogdGV4dElucHV0VHlwZSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICAqIEBuYW1lIGlucHV0W2RhdGVdXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJbnB1dCB3aXRoIGRhdGUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgICogZGF0ZSBmb3JtYXQgKHl5eXktTU0tZGQpLCBmb3IgZXhhbXBsZTogYDIwMDktMDEtMDZgLiBTaW5jZSBtYW55XG4gICAgICogbW9kZXJuIGJyb3dzZXJzIGRvIG5vdCB5ZXQgc3VwcG9ydCB0aGlzIGlucHV0IHR5cGUsIGl0IGlzIGltcG9ydGFudCB0byBwcm92aWRlIGN1ZXMgdG8gdXNlcnMgb24gdGhlXG4gICAgICogZXhwZWN0ZWQgaW5wdXQgZm9ybWF0IHZpYSBhIHBsYWNlaG9sZGVyIG9yIGxhYmVsLlxuICAgICAqXG4gICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLiBUaGlzIG11c3QgYmUgYVxuICAgICAqICAgdmFsaWQgSVNPIGRhdGUgc3RyaW5nICh5eXl5LU1NLWRkKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzIGF0dHJpYnV0ZVxuICAgICAqICAgKGUuZy4gYG1pbj1cInt7bWluRGF0ZSB8IGRhdGU6J3l5eXktTU0tZGQnfX1cImApLiBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZCBuYXRpdmUgSFRNTDVcbiAgICAgKiAgIGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdCBiZVxuICAgICAqICAgYSB2YWxpZCBJU08gZGF0ZSBzdHJpbmcgKHl5eXktTU0tZGQpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXMgYXR0cmlidXRlXG4gICAgICogICAoZS5nLiBgbWF4PVwie3ttYXhEYXRlIHwgZGF0ZToneXl5eS1NTS1kZCd9fVwiYCkuIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNVxuICAgICAqICAgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyBkYXRlIHN0cmluZ1xuICAgICAqICAgdGhlIGBuZ01pbmAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5gIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gZGF0ZSBzdHJpbmdcbiAgICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJkYXRlLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImRhdGVJbnB1dEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkYXRlSW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgOSwgMjIpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgZGF0ZSBpbiAyMDEzOjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRlXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU0tZGRcIiBtaW49XCIyMDEzLTAxLTAxXCIgbWF4PVwiMjAxMy0xMi0zMVwiIHJlcXVpcmVkIC8+XG4gICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5kYXRlXCI+XG4gICAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRcIn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkXCInKSk7XG4gICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcblxuICAgICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMC0yMicpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMScpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgICAqL1xuICAnZGF0ZSc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ2RhdGUnLCBEQVRFX1JFR0VYUCxcbiAgICAgICAgIGNyZWF0ZURhdGVQYXJzZXIoREFURV9SRUdFWFAsIFsneXl5eScsICdNTScsICdkZCddKSxcbiAgICAgICAgICd5eXl5LU1NLWRkJyksXG5cbiAgIC8qKlxuICAgICogQG5nZG9jIGlucHV0XG4gICAgKiBAbmFtZSBpbnB1dFtkYXRldGltZS1sb2NhbF1cbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIElucHV0IHdpdGggZGF0ZXRpbWUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgKiBsb2NhbCBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLCBmb3IgZXhhbXBsZTogYDIwMTAtMTItMjhUMTQ6NTc6MDBgLlxuICAgICpcbiAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICpcbiAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb25cbiAgICAqICAgaW5zaWRlIHRoaXMgYXR0cmlidXRlIChlLmcuIGBtaW49XCJ7e21pbkRhdGV0aW1lTG9jYWwgfCBkYXRlOid5eXl5LU1NLWRkVEhIOm1tOnNzJ319XCJgKS5cbiAgICAqICAgTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGQgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvblxuICAgICogICBpbnNpZGUgdGhpcyBhdHRyaWJ1dGUgKGUuZy4gYG1heD1cInt7bWF4RGF0ZXRpbWVMb2NhbCB8IGRhdGU6J3l5eXktTU0tZGRUSEg6bW06c3MnfX1cImApLlxuICAgICogICBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZCBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgdG8gdGhlIERhdGUgLyBJU08gZGF0ZXRpbWUgc3RyaW5nXG4gICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSB0byB0aGUgRGF0ZSAvIElTTyBkYXRldGltZSBzdHJpbmdcbiAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICpcbiAgICAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cImRhdGV0aW1lbG9jYWwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiZGF0ZUV4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2RhdGVFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMCwgMTEsIDI4LCAxNCwgNTcpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIGRhdGUgYmV0d2VlbiBpbiAyMDEzOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBpZD1cImV4YW1wbGVJbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU0tZGRUSEg6bW06c3NcIiBtaW49XCIyMDAxLTAxLTAxVDAwOjAwOjAwXCIgbWF4PVwiMjAxMy0xMi0zMVQwMDowMDowMFwiIHJlcXVpcmVkIC8+XG4gICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZGF0ZXRpbWVsb2NhbFwiPlxuICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFRISDptbTpzc1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMC0xMi0yOFQxNDo1NzowMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMVQyMzo1OTowMCcpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnZGF0ZXRpbWUtbG9jYWwnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRldGltZWxvY2FsJywgREFURVRJTUVMT0NBTF9SRUdFWFAsXG4gICAgICBjcmVhdGVEYXRlUGFyc2VyKERBVEVUSU1FTE9DQUxfUkVHRVhQLCBbJ3l5eXknLCAnTU0nLCAnZGQnLCAnSEgnLCAnbW0nLCAnc3MnLCAnc3NzJ10pLFxuICAgICAgJ3l5eXktTU0tZGRUSEg6bW06c3Muc3NzJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0aW1lXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSW5wdXQgd2l0aCB0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgKiB0aGUgSFRNTDUgdGltZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIGxvY2FsIHRpbWUgZm9ybWF0IChISDptbTpzcyksIGZvciBleGFtcGxlOiBgMTQ6NTc6MDBgLiBNb2RlbCBtdXN0IGJlIGEgRGF0ZSBvYmplY3QuIFRoaXMgYmluZGluZyB3aWxsIGFsd2F5cyBvdXRwdXQgYVxuICAgKiBEYXRlIG9iamVjdCB0byB0aGUgbW9kZWwgb2YgSmFudWFyeSAxLCAxOTcwLCBvciBsb2NhbCBkYXRlIGBuZXcgRGF0ZSgxOTcwLCAwLCAxLCBISCwgbW0sIHNzKWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB0aW1lIGZvcm1hdCAoSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluVGltZSB8IGRhdGU6J0hIOm1tOnNzJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhUaW1lIHwgZGF0ZTonSEg6bW06c3MnfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB0aW1lIHN0cmluZyB0aGVcbiAgICogICBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB0aW1lIHN0cmluZyB0aGVcbiAgICogICBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJ0aW1lLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInRpbWVFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3RpbWVFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMTk3MCwgMCwgMSwgMTQsIDU3LCAwKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSB0aW1lIGJldHdlZW4gOGFtIGFuZCA1cG06PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0aW1lXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJISDptbTpzc1wiIG1pbj1cIjA4OjAwOjAwXCIgbWF4PVwiMTc6MDA6MDBcIiByZXF1aXJlZCAvPlxuICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnRpbWVcIj5cbiAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICA8L2Zvcm0+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMTQ6NTc6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIzOjU5OjAwJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcbiAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAgICovXG4gICd0aW1lJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgndGltZScsIFRJTUVfUkVHRVhQLFxuICAgICAgY3JlYXRlRGF0ZVBhcnNlcihUSU1FX1JFR0VYUCwgWydISCcsICdtbScsICdzcycsICdzc3MnXSksXG4gICAgICdISDptbTpzcy5zc3MnKSxcblxuICAgLyoqXG4gICAgKiBAbmdkb2MgaW5wdXRcbiAgICAqIEBuYW1lIGlucHV0W3dlZWtdXG4gICAgKlxuICAgICogQGRlc2NyaXB0aW9uXG4gICAgKiBJbnB1dCB3aXRoIHdlZWstb2YtdGhlLXllYXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24gdG8gRGF0ZS4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICAqIHRoZSBIVE1MNSB3ZWVrIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAqIHdlZWsgZm9ybWF0ICh5eXl5LVcjIyksIGZvciBleGFtcGxlOiBgMjAxMy1XMDJgLlxuICAgICpcbiAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICpcbiAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICAqICAgYXR0cmlidXRlIChlLmcuIGBtaW49XCJ7e21pbldlZWsgfCBkYXRlOid5eXl5LVd3dyd9fVwiYCkuIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkXG4gICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICAqICAgYXR0cmlidXRlIChlLmcuIGBtYXg9XCJ7e21heFdlZWsgfCBkYXRlOid5eXl5LVd3dyd9fVwiYCkuIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkXG4gICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gd2VlayBzdHJpbmdcbiAgICAqICAgdGhlIGBuZ01pbmAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5gIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgICogICB0aGUgYG5nTWF4YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1heGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgKlxuICAgICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwid2Vlay1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ3ZWVrRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3dlZWtFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgMCwgMylcbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgICA8L3NjcmlwdD5cbiAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgPGxhYmVsPlBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzpcbiAgICAgICAgICA8aW5wdXQgaWQ9XCJleGFtcGxlSW5wdXRcIiB0eXBlPVwid2Vla1wiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiWVlZWS1XIyNcIiBtaW49XCIyMDEyLVczMlwiXG4gICAgICAgICAgICAgICAgIG1heD1cIjIwMTMtVzUyXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci53ZWVrXCI+XG4gICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LVd3d1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LVd3d1wiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtVzAxJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcyMDE1LVcwMScpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnd2Vlayc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ3dlZWsnLCBXRUVLX1JFR0VYUCwgd2Vla1BhcnNlciwgJ3l5eXktV3d3JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFttb250aF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElucHV0IHdpdGggbW9udGggdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAqIHRoZSBIVE1MNSBtb250aCBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSksIGZvciBleGFtcGxlOiBgMjAwOS0wMWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqIElmIHRoZSBtb2RlbCBpcyBub3Qgc2V0IHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGgsIHRoZSBuZXh0IHZpZXcgdG8gbW9kZWwgdXBkYXRlIHdpbGwgc2V0IGl0XG4gICAqIHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGguXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBtb250aCBmb3JtYXQgKHl5eXktTU0pLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluTW9udGggfCBkYXRlOid5eXl5LU1NJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhNb250aCB8IGRhdGU6J3l5eXktTU0nfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm1vbnRoLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm1vbnRoRXhhbXBsZVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdtb250aEV4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCA5LCAxKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIG1vbnRoIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICA8aW5wdXQgaWQ9XCJleGFtcGxlSW5wdXRcIiB0eXBlPVwibW9udGhcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTVwiIG1pbj1cIjIwMTMtMDFcIiBtYXg9XCIyMDEzLTEyXCIgcmVxdWlyZWQgLz5cbiAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IubW9udGhcIj5cbiAgICAgICAgICAgIE5vdCBhIHZhbGlkIG1vbnRoITwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU1cIn19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgPC9mb3JtPlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMScpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICAqL1xuICAnbW9udGgnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdtb250aCcsIE1PTlRIX1JFR0VYUCxcbiAgICAgY3JlYXRlRGF0ZVBhcnNlcihNT05USF9SRUdFWFAsIFsneXl5eScsICdNTSddKSxcbiAgICAgJ3l5eXktTU0nKSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W251bWJlcl1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBudW1iZXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIFNldHMgdGhlIGBudW1iZXJgIHZhbGlkYXRpb25cbiAgICogZXJyb3IgaWYgbm90IGEgdmFsaWQgbnVtYmVyLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgb2YgdHlwZSBgbnVtYmVyYCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBCZSBhd2FyZSB0aGF0IGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBudW1iZXIgaXMgbm90IGVub3VnaC4gU2VlIHRoZSB7QGxpbmsgbmdNb2RlbDpudW1mbXR9XG4gICAqIGVycm9yIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGFuIGV4YW1wbGUgb2YgaG93IHRvIGNvbnZlcnQgeW91ciBtb2RlbCBpZiBuZWNlc3NhcnkuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiAjIyBJc3N1ZXMgd2l0aCBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb25cbiAgICpcbiAgICogSW4gYnJvd3NlcnMgdGhhdCBmb2xsb3cgdGhlXG4gICAqIFtIVE1MNSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI251bWJlci1zdGF0ZS0lMjh0eXBlPW51bWJlciUyOSksXG4gICAqIGBpbnB1dFtudW1iZXJdYCBkb2VzIG5vdCB3b3JrIGFzIGV4cGVjdGVkIHdpdGgge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfS5cbiAgICogSWYgYSBub24tbnVtYmVyIGlzIGVudGVyZWQgaW4gdGhlIGlucHV0LCB0aGUgYnJvd3NlciB3aWxsIHJlcG9ydCB0aGUgdmFsdWUgYXMgYW4gZW1wdHkgc3RyaW5nLFxuICAgKiB3aGljaCBtZWFucyB0aGUgdmlldyAvIG1vZGVsIHZhbHVlcyBpbiBgbmdNb2RlbGAgYW5kIHN1YnNlcXVlbnRseSB0aGUgc2NvcGUgdmFsdWVcbiAgICogd2lsbCBhbHNvIGJlIGFuIGVtcHR5IHN0cmluZy5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICogICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgKiAgICBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nTWluIExpa2UgYG1pbmAsIHNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbmdNaW5gLFxuICAgKiAgICBidXQgZG9lcyBub3QgdHJpZ2dlciBIVE1MNSBuYXRpdmUgdmFsaWRhdGlvbi4gVGFrZXMgYW4gZXhwcmVzc2lvbi5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ01heCBMaWtlIGBtYXhgLCBzZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG5nTWF4YCxcbiAgICogICAgYnV0IGRvZXMgbm90IHRyaWdnZXIgSFRNTDUgbmF0aXZlIHZhbGlkYXRpb24uIFRha2VzIGFuIGV4cHJlc3Npb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc3RlcCBTZXRzIHRoZSBgc3RlcGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgZG9lcyBub3QgZml0IHRoZSBgc3RlcGAgY29uc3RyYWludC5cbiAgICogICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1N0ZXAgTGlrZSBgc3RlcGAsIHNldHMgdGhlIGBzdGVwYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBkb2VzIG5vdCBmaXQgdGhlIGBuZ1N0ZXBgIGNvbnN0cmFpbnQsXG4gICAqICAgIGJ1dCBkb2VzIG5vdCB0cmlnZ2VyIEhUTUw1IG5hdGl2ZSB2YWxpZGF0aW9uLiBUYWtlcyBhbiBleHByZXNzaW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgKiAgICBhbnkgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgYXMgaW4gdGhlIG5nUGF0dGVybiBkaXJlY3RpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJudW1iZXItaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwibnVtYmVyRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgIHZhbHVlOiAxMlxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPk51bWJlcjpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIG1pbj1cIjBcIiBtYXg9XCI5OVwiIHJlcXVpcmVkPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLm51bWJlclwiPlxuICAgICAgICAgICAgICAgTm90IHZhbGlkIG51bWJlciE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWV9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEyJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcxMjMnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ251bWJlcic6IG51bWJlcklucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbdXJsXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGV4dCBpbnB1dCB3aXRoIFVSTCB2YWxpZGF0aW9uLiBTZXRzIHRoZSBgdXJsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgY29udGVudCBpcyBub3QgYVxuICAgKiB2YWxpZCBVUkwuXG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICoqTm90ZToqKiBgaW5wdXRbdXJsXWAgdXNlcyBhIHJlZ2V4IHRvIHZhbGlkYXRlIHVybHMgdGhhdCBpcyBkZXJpdmVkIGZyb20gdGhlIHJlZ2V4XG4gICAqIHVzZWQgaW4gQ2hyb21pdW0uIElmIHlvdSBuZWVkIHN0cmljdGVyIHZhbGlkYXRpb24sIHlvdSBjYW4gdXNlIGBuZy1wYXR0ZXJuYCBvciBtb2RpZnlcbiAgICogdGhlIGJ1aWx0LWluIHZhbGlkYXRvcnMgKHNlZSB0aGUge0BsaW5rIGd1aWRlL2Zvcm1zIEZvcm1zIGd1aWRlfSlcbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgKiAgICBhbnkgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgYXMgaW4gdGhlIG5nUGF0dGVybiBkaXJlY3RpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJ1cmwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidXJsRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3VybEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLnVybCA9IHtcbiAgICAgICAgICAgICAgICAgdGV4dDogJ2h0dHA6Ly9nb29nbGUuY29tJ1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlVSTDpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInVybFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidXJsLnRleHRcIiByZXF1aXJlZD5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci51cmxcIj5cbiAgICAgICAgICAgICAgIE5vdCB2YWxpZCB1cmwhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnRleHQgPSB7e3VybC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IudXJsID0ge3shIW15Rm9ybS4kZXJyb3IudXJsfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygndXJsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VybC50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignaHR0cDovL2dvb2dsZS5jb20nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCB1cmwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYm94Jyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3VybCc6IHVybElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbZW1haWxdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggZW1haWwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYGVtYWlsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiBub3QgYSB2YWxpZCBlbWFpbFxuICAgKiBhZGRyZXNzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W2VtYWlsXWAgdXNlcyBhIHJlZ2V4IHRvIHZhbGlkYXRlIGVtYWlsIGFkZHJlc3NlcyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICogdXNlZCBpbiBDaHJvbWl1bS4gSWYgeW91IG5lZWQgc3RyaWN0ZXIgdmFsaWRhdGlvbiAoZS5nLiByZXF1aXJpbmcgYSB0b3AtbGV2ZWwgZG9tYWluKSwgeW91IGNhblxuICAgKiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeSB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSAkdmlld1ZhbHVlfVxuICAgKiAgICBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cImVtYWlsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImVtYWlsRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2VtYWlsRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZW1haWwgPSB7XG4gICAgICAgICAgICAgICAgIHRleHQ6ICdtZUBleGFtcGxlLmNvbSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgICA8bGFiZWw+RW1haWw6XG4gICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJlbWFpbC50ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5lbWFpbFwiPlxuICAgICAgICAgICAgICAgICBOb3QgdmFsaWQgZW1haWwhPC9zcGFuPlxuICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgIDx0dD50ZXh0ID0ge3tlbWFpbC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLmVtYWlsID0ge3shIW15Rm9ybS4kZXJyb3IuZW1haWx9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2VtYWlsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2VtYWlsLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdtZUBleGFtcGxlLmNvbScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCBlbWFpbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCd4eHgnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnZW1haWwnOiBlbWFpbElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbcmFkaW9dXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVE1MIHJhZGlvIGJ1dHRvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBgbmdNb2RlbGAgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gICAqICAgIE5vdGUgdGhhdCBgdmFsdWVgIG9ubHkgc3VwcG9ydHMgYHN0cmluZ2AgdmFsdWVzLCBpLmUuIHRoZSBzY29wZSBtb2RlbCBuZWVkcyB0byBiZSBhIHN0cmluZyxcbiAgICogICAgdG9vLiBVc2UgYG5nVmFsdWVgIGlmIHlvdSBuZWVkIGNvbXBsZXggbW9kZWxzIChgbnVtYmVyYCwgYG9iamVjdGAsIC4uLikuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ1ZhbHVlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byB3aGljaCBgbmdNb2RlbGAgd2lsbCBiZSBiZSBzZXQgd2hlbiB0aGUgcmFkaW9cbiAgICogICAgaXMgc2VsZWN0ZWQuIFNob3VsZCBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIGB2YWx1ZWAgYXR0cmlidXRlIGlmIHlvdSBuZWVkXG4gICAqICAgIGEgbm9uLXN0cmluZyBgbmdNb2RlbGAgKGBib29sZWFuYCwgYGFycmF5YCwgLi4uKS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJyYWRpby1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJyYWRpb0V4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYWRpb0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmNvbG9yID0ge1xuICAgICAgICAgICAgICAgICBuYW1lOiAnYmx1ZSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAkc2NvcGUuc3BlY2lhbFZhbHVlID0ge1xuICAgICAgICAgICAgICAgICBcImlkXCI6IFwiMTIzNDVcIixcbiAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImdyZWVuXCJcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvci5uYW1lXCIgdmFsdWU9XCJyZWRcIj5cbiAgICAgICAgICAgICBSZWRcbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCI+XG4gICAgICAgICAgICAgR3JlZW5cbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIHZhbHVlPVwiYmx1ZVwiPlxuICAgICAgICAgICAgIEJsdWVcbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8dHQ+Y29sb3IgPSB7e2NvbG9yLm5hbWUgfCBqc29ufX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIE5vdGUgdGhhdCBgbmctdmFsdWU9XCJzcGVjaWFsVmFsdWVcImAgc2V0cyByYWRpbyBpdGVtJ3MgdmFsdWUgdG8gYmUgdGhlIHZhbHVlIG9mIGAkc2NvcGUuc3BlY2lhbFZhbHVlYC5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpbnB1dHMgPSBlbGVtZW50LmFsbChieS5tb2RlbCgnY29sb3IubmFtZScpKTtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IGVsZW1lbnQoYnkuYmluZGluZygnY29sb3IubmFtZScpKTtcblxuICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdibHVlJyk7XG5cbiAgICAgICAgICAgIGlucHV0cy5nZXQoMCkuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbigncmVkJyk7XG5cbiAgICAgICAgICAgIGlucHV0cy5nZXQoMSkuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3JlZW4nKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3JhZGlvJzogcmFkaW9JbnB1dFR5cGUsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtyYW5nZV1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIE5hdGl2ZSByYW5nZSBpbnB1dCB3aXRoIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLlxuICAgKlxuICAgKiBUaGUgbW9kZWwgZm9yIHRoZSByYW5nZSBpbnB1dCBtdXN0IGFsd2F5cyBiZSBhIGBOdW1iZXJgLlxuICAgKlxuICAgKiBJRTkgYW5kIG90aGVyIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgdGhlIGByYW5nZWAgdHlwZSBmYWxsIGJhY2tcbiAgICogdG8gYSB0ZXh0IGlucHV0IHdpdGhvdXQgYW55IGRlZmF1bHQgdmFsdWVzIGZvciBgbWluYCwgYG1heGAgYW5kIGBzdGVwYC4gTW9kZWwgYmluZGluZyxcbiAgICogdmFsaWRhdGlvbiBhbmQgbnVtYmVyIHBhcnNpbmcgYXJlIG5ldmVydGhlbGVzcyBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCByYW5nZSAobGF0ZXN0IENocm9tZSwgU2FmYXJpLCBGaXJlZm94LCBFZGdlKSB0cmVhdCBgaW5wdXRbcmFuZ2VdYFxuICAgKiBpbiBhIHdheSB0aGF0IG5ldmVyIGFsbG93cyB0aGUgaW5wdXQgdG8gaG9sZCBhbiBpbnZhbGlkIHZhbHVlLiBUaGF0IG1lYW5zOlxuICAgKiAtIGFueSBub24tbnVtZXJpY2FsIHZhbHVlIGlzIHNldCB0byBgKG1heCArIG1pbikgLyAyYC5cbiAgICogLSBhbnkgbnVtZXJpY2FsIHZhbHVlIHRoYXQgaXMgbGVzcyB0aGFuIHRoZSBjdXJyZW50IG1pbiB2YWwsIG9yIGdyZWF0ZXIgdGhhbiB0aGUgY3VycmVudCBtYXggdmFsXG4gICAqIGlzIHNldCB0byB0aGUgbWluIC8gbWF4IHZhbCByZXNwZWN0aXZlbHkuXG4gICAqIC0gYWRkaXRpb25hbGx5LCB0aGUgY3VycmVudCBgc3RlcGAgaXMgcmVzcGVjdGVkLCBzbyB0aGUgbmVhcmVzdCB2YWx1ZSB0aGF0IHNhdGlzZmllcyBhIHN0ZXBcbiAgICogaXMgdXNlZC5cbiAgICpcbiAgICogU2VlIHRoZSBbSFRNTCBTcGVjIG9uIGlucHV0W3R5cGU9cmFuZ2VdXShodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZm9ybXMuaHRtbCNyYW5nZS1zdGF0ZS0odHlwZT1yYW5nZSkpXG4gICAqIGZvciBtb3JlIGluZm8uXG4gICAqXG4gICAqIFRoaXMgaGFzIHRoZSBmb2xsb3dpbmcgY29uc2VxdWVuY2VzIGZvciBBbmd1bGFyOlxuICAgKlxuICAgKiBTaW5jZSB0aGUgZWxlbWVudCB2YWx1ZSBzaG91bGQgYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgbW9kZWwgdmFsdWUsIGEgcmFuZ2UgaW5wdXRcbiAgICogd2lsbCBzZXQgdGhlIGJvdW5kIG5nTW9kZWwgZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgdGhhdCB0aGUgYnJvd3NlciBoYXMgc2V0IGZvciB0aGVcbiAgICogaW5wdXQgZWxlbWVudC4gRm9yIGV4YW1wbGUsIGluIHRoZSBmb2xsb3dpbmcgaW5wdXQgYDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBuZy1tb2RlbD1cIm1vZGVsLnZhbHVlXCI+YCxcbiAgICogaWYgdGhlIGFwcGxpY2F0aW9uIHNldHMgYG1vZGVsLnZhbHVlID0gbnVsbGAsIHRoZSBicm93c2VyIHdpbGwgc2V0IHRoZSBpbnB1dCB0byBgJzUwJ2AuXG4gICAqIEFuZ3VsYXIgd2lsbCB0aGVuIHNldCB0aGUgbW9kZWwgdG8gYDUwYCwgdG8gcHJldmVudCBpbnB1dCBhbmQgbW9kZWwgdmFsdWUgYmVpbmcgb3V0IG9mIHN5bmMuXG4gICAqXG4gICAqIFRoYXQgbWVhbnMgdGhlIG1vZGVsIGZvciByYW5nZSB3aWxsIGltbWVkaWF0ZWx5IGJlIHNldCB0byBgNTBgIGFmdGVyIGBuZ01vZGVsYCBoYXMgYmVlblxuICAgKiBpbml0aWFsaXplZC4gSXQgYWxzbyBtZWFucyBhIHJhbmdlIGlucHV0IGNhbiBuZXZlciBoYXZlIHRoZSByZXF1aXJlZCBlcnJvci5cbiAgICpcbiAgICogVGhpcyBkb2VzIG5vdCBvbmx5IGFmZmVjdCBjaGFuZ2VzIHRvIHRoZSBtb2RlbCB2YWx1ZSwgYnV0IGFsc28gdG8gdGhlIHZhbHVlcyBvZiB0aGUgYG1pbmAsXG4gICAqIGBtYXhgLCBhbmQgYHN0ZXBgIGF0dHJpYnV0ZXMuIFdoZW4gdGhlc2UgY2hhbmdlIGluIGEgd2F5IHRoYXQgd2lsbCBjYXVzZSB0aGUgYnJvd3NlciB0byBtb2RpZnlcbiAgICogdGhlIGlucHV0IHZhbHVlLCBBbmd1bGFyIHdpbGwgYWxzbyB1cGRhdGUgdGhlIG1vZGVsIHZhbHVlLlxuICAgKlxuICAgKiBBdXRvbWF0aWMgdmFsdWUgYWRqdXN0bWVudCBhbHNvIG1lYW5zIHRoYXQgYSByYW5nZSBpbnB1dCBlbGVtZW50IGNhbiBuZXZlciBoYXZlIHRoZSBgcmVxdWlyZWRgLFxuICAgKiBgbWluYCwgb3IgYG1heGAgZXJyb3JzLlxuICAgKlxuICAgKiBIb3dldmVyLCBgc3RlcGAgaXMgY3VycmVudGx5IG9ubHkgZnVsbHkgaW1wbGVtZW50ZWQgYnkgRmlyZWZveC4gT3RoZXIgYnJvd3NlcnMgaGF2ZSBwcm9ibGVtc1xuICAgKiB3aGVuIHRoZSBzdGVwIHZhbHVlIGNoYW5nZXMgZHluYW1pY2FsbHkgLSB0aGV5IGRvIG5vdCBhZGp1c3QgdGhlIGVsZW1lbnQgdmFsdWUgY29ycmVjdGx5LCBidXRcbiAgICogaW5zdGVhZCBtYXkgc2V0IHRoZSBgc3RlcE1pc21hdGNoYCBlcnJvci4gSWYgdGhhdCdzIHRoZSBjYXNlLCB0aGUgQW5ndWxhciB3aWxsIHNldCB0aGUgYHN0ZXBgXG4gICAqIGVycm9yIG9uIHRoZSBpbnB1dCwgYW5kIHNldCB0aGUgbW9kZWwgdG8gYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgaW5wdXRbcmFuZ2VdYCBpcyBub3QgY29tcGF0aWJsZSB3aXRoYG5nTWF4YCwgYG5nTWluYCwgYW5kIGBuZ1N0ZXBgLCBiZWNhdXNlIHRoZXkgZG9cbiAgICogbm90IHNldCB0aGUgYG1pbmAgYW5kIGBtYXhgIGF0dHJpYnV0ZXMsIHdoaWNoIG1lYW5zIHRoYXQgdGhlIGJyb3dzZXIgd29uJ3QgYXV0b21hdGljYWxseSBhZGp1c3RcbiAgICogdGhlIGlucHV0IHZhbHVlIGJhc2VkIG9uIHRoZWlyIHZhbHVlcywgYW5kIHdpbGwgYWx3YXlzIGFzc3VtZSBtaW4gPSAwLCBtYXggPSAxMDAsIGFuZCBzdGVwID0gMS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9ICBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXJcbiAgICogICAgICAgICAgICAgICAgICB0aGFuIGBtaW5gLiBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWF4YC5cbiAgICogICAgICAgICAgICAgICAgICBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHN0ZXAgU2V0cyB0aGUgYHN0ZXBgIHZhbGlkYXRpb24gdG8gZW5zdXJlIHRoYXQgdGhlIHZhbHVlIGVudGVyZWQgbWF0Y2hlcyB0aGUgYHN0ZXBgXG4gICAqICAgICAgICAgICAgICAgICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgbmdNb2RlbCB2YWx1ZSBjaGFuZ2VzIGR1ZVxuICAgKiAgICAgICAgICAgICAgICAgIHRvIHVzZXIgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmdDaGVja2VkIElmIHRoZSBleHByZXNzaW9uIGlzIHRydXRoeSwgdGhlbiB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC4gKipOb3RlKiogOiBgbmdDaGVja2VkYCBzaG91bGQgbm90IGJlIHVzZWQgYWxvbmdzaWRlIGBuZ01vZGVsYC5cbiAgICogICAgICAgICAgICAgICAgICAgICAgQ2hlY2tvdXQge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NoZWNrZWQgbmdDaGVja2VkfSBmb3IgdXNhZ2UuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwicmFuZ2UtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwicmFuZ2VFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYW5nZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSA3NTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWluID0gMTA7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1heCA9IDkwO1xuICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuXG4gICAgICAgICAgICBNb2RlbCBhcyByYW5nZTogPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJyYW5nZVwiIG5nLW1vZGVsPVwidmFsdWVcIiBtaW49XCJ7e21pbn19XCIgIG1heD1cInt7bWF4fX1cIj5cbiAgICAgICAgICAgIDxocj5cbiAgICAgICAgICAgIE1vZGVsIGFzIG51bWJlcjogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInZhbHVlXCI+PGJyPlxuICAgICAgICAgICAgTWluOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWluXCI+PGJyPlxuICAgICAgICAgICAgTWF4OiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWF4XCI+PGJyPlxuICAgICAgICAgICAgdmFsdWUgPSA8Y29kZT57e3ZhbHVlfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgIG15Rm9ybS5yYW5nZS4kdmFsaWQgPSA8Y29kZT57e215Rm9ybS5yYW5nZS4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICAgbXlGb3JtLnJhbmdlLiRlcnJvciA9IDxjb2RlPnt7bXlGb3JtLnJhbmdlLiRlcnJvcn19PC9jb2RlPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuXG4gICAqICMjIFJhbmdlIElucHV0IHdpdGggbmdNaW4gJiBuZ01heCBhdHRyaWJ1dGVzXG5cbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJyYW5nZS1pbnB1dC1kaXJlY3RpdmUtbmdcIiBtb2R1bGU9XCJyYW5nZUV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3JhbmdlRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS52YWx1ZSA9IDc1O1xuICAgICAgICAgICAgICAgICRzY29wZS5taW4gPSAxMDtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWF4ID0gOTA7XG4gICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgICBNb2RlbCBhcyByYW5nZTogPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJyYW5nZVwiIG5nLW1vZGVsPVwidmFsdWVcIiBuZy1taW49XCJtaW5cIiBuZy1tYXg9XCJtYXhcIj5cbiAgICAgICAgICAgIDxocj5cbiAgICAgICAgICAgIE1vZGVsIGFzIG51bWJlcjogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInZhbHVlXCI+PGJyPlxuICAgICAgICAgICAgTWluOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWluXCI+PGJyPlxuICAgICAgICAgICAgTWF4OiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWF4XCI+PGJyPlxuICAgICAgICAgICAgdmFsdWUgPSA8Y29kZT57e3ZhbHVlfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgIG15Rm9ybS5yYW5nZS4kdmFsaWQgPSA8Y29kZT57e215Rm9ybS5yYW5nZS4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICAgbXlGb3JtLnJhbmdlLiRlcnJvciA9IDxjb2RlPnt7bXlGb3JtLnJhbmdlLiRlcnJvcn19PC9jb2RlPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuXG4gICAqL1xuICAncmFuZ2UnOiByYW5nZUlucHV0VHlwZSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W2NoZWNrYm94XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSFRNTCBjaGVja2JveC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nVHJ1ZVZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nRmFsc2VWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIG5vdCBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwiY2hlY2tib3gtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiY2hlY2tib3hFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2hlY2tib3hFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlMSA6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWUyIDogJ1lFUydcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlZhbHVlMTpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2JveE1vZGVsLnZhbHVlMVwiPlxuICAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgIDxsYWJlbD5WYWx1ZTI6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tib3hNb2RlbC52YWx1ZTJcIlxuICAgICAgICAgICAgICAgICAgICBuZy10cnVlLXZhbHVlPVwiJ1lFUydcIiBuZy1mYWxzZS12YWx1ZT1cIidOTydcIj5cbiAgICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMSA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTF9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMiA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUxID0gZWxlbWVudChieS5iaW5kaW5nKCdjaGVja2JveE1vZGVsLnZhbHVlMScpKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZTIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsdWUxLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdZRVMnKTtcblxuICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tib3hNb2RlbC52YWx1ZTEnKSkuY2xpY2soKTtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTEuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdOTycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnY2hlY2tib3gnOiBjaGVja2JveElucHV0VHlwZSxcblxuICAnaGlkZGVuJzogbm9vcCxcbiAgJ2J1dHRvbic6IG5vb3AsXG4gICdzdWJtaXQnOiBub29wLFxuICAncmVzZXQnOiBub29wLFxuICAnZmlsZSc6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpIHtcbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpID8gdmFsdWUgOiB2YWx1ZS50b1N0cmluZygpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xufVxuXG5mdW5jdGlvbiBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgdmFyIHR5cGUgPSBsb3dlcmNhc2UoZWxlbWVudFswXS50eXBlKTtcblxuICAvLyBJbiBjb21wb3NpdGlvbiBtb2RlLCB1c2VycyBhcmUgc3RpbGwgaW5wdXR0aW5nIGludGVybWVkaWF0ZSB0ZXh0IGJ1ZmZlcixcbiAgLy8gaG9sZCB0aGUgbGlzdGVuZXIgdW50aWwgY29tcG9zaXRpb24gaXMgZG9uZS5cbiAgLy8gTW9yZSBhYm91dCBjb21wb3NpdGlvbiBldmVudHM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Db21wb3NpdGlvbkV2ZW50XG4gIGlmICghJHNuaWZmZXIuYW5kcm9pZCkge1xuICAgIHZhciBjb21wb3NpbmcgPSBmYWxzZTtcblxuICAgIGVsZW1lbnQub24oJ2NvbXBvc2l0aW9uc3RhcnQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbXBvc2luZyA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHRpbWVvdXQ7XG5cbiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChjb21wb3NpbmcpIHJldHVybjtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbCgpLFxuICAgICAgICBldmVudCA9IGV2ICYmIGV2LnR5cGU7XG5cbiAgICAvLyBCeSBkZWZhdWx0IHdlIHdpbGwgdHJpbSB0aGUgdmFsdWVcbiAgICAvLyBJZiB0aGUgYXR0cmlidXRlIG5nLXRyaW0gZXhpc3RzIHdlIHdpbGwgYXZvaWQgdHJpbW1pbmdcbiAgICAvLyBJZiBpbnB1dCB0eXBlIGlzICdwYXNzd29yZCcsIHRoZSB2YWx1ZSBpcyBuZXZlciB0cmltbWVkXG4gICAgaWYgKHR5cGUgIT09ICdwYXNzd29yZCcgJiYgKCFhdHRyLm5nVHJpbSB8fCBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJykpIHtcbiAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgYSBjb250cm9sIGlzIHN1ZmZlcmluZyBmcm9tIGJhZCBpbnB1dCAoZHVlIHRvIG5hdGl2ZSB2YWxpZGF0b3JzKSwgYnJvd3NlcnMgZGlzY2FyZCBpdHNcbiAgICAvLyB2YWx1ZSwgc28gaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byByZXZhbGlkYXRlIChieSBjYWxsaW5nICRzZXRWaWV3VmFsdWUgYWdhaW4pIGV2ZW4gaWYgdGhlXG4gICAgLy8gY29udHJvbCdzIHZhbHVlIGlzIHRoZSBzYW1lIGVtcHR5IHZhbHVlIHR3aWNlIGluIGEgcm93LlxuICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZhbHVlIHx8ICh2YWx1ZSA9PT0gJycgJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0IFwiaW5wdXRcIiBldmVudCwgd2UgYXJlIGZpbmUgLSBleGNlcHQgb24gSUU5IHdoaWNoIGRvZXNuJ3QgZmlyZSB0aGVcbiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0XG4gIGlmICgkc25pZmZlci5oYXNFdmVudCgnaW5wdXQnKSkge1xuICAgIGVsZW1lbnQub24oJ2lucHV0JywgbGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWZlckxpc3RlbmVyID0gZnVuY3Rpb24oZXYsIGlucHV0LCBvcmlnVmFsdWUpIHtcbiAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICB0aW1lb3V0ID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgaWYgKCFpbnB1dCB8fCBpbnB1dC52YWx1ZSAhPT0gb3JpZ1ZhbHVlKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihldik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZWxlbWVudC5vbigna2V5ZG93bicsIC8qKiBAdGhpcyAqLyBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIGtleSA9IGV2ZW50LmtleUNvZGU7XG5cbiAgICAgIC8vIGlnbm9yZVxuICAgICAgLy8gICAgY29tbWFuZCAgICAgICAgICAgIG1vZGlmaWVycyAgICAgICAgICAgICAgICAgICBhcnJvd3NcbiAgICAgIGlmIChrZXkgPT09IDkxIHx8ICgxNSA8IGtleSAmJiBrZXkgPCAxOSkgfHwgKDM3IDw9IGtleSAmJiBrZXkgPD0gNDApKSByZXR1cm47XG5cbiAgICAgIGRlZmVyTGlzdGVuZXIoZXZlbnQsIHRoaXMsIHRoaXMudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gaWYgdXNlciBtb2RpZmllcyBpbnB1dCB2YWx1ZSB1c2luZyBjb250ZXh0IG1lbnUgaW4gSUUsIHdlIG5lZWQgXCJwYXN0ZVwiIGFuZCBcImN1dFwiIGV2ZW50cyB0byBjYXRjaCBpdFxuICAgIGlmICgkc25pZmZlci5oYXNFdmVudCgncGFzdGUnKSkge1xuICAgICAgZWxlbWVudC5vbigncGFzdGUgY3V0JywgZGVmZXJMaXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdXNlciBwYXN0ZSBpbnRvIGlucHV0IHVzaW5nIG1vdXNlIG9uIG9sZGVyIGJyb3dzZXJcbiAgLy8gb3IgZm9ybSBhdXRvY29tcGxldGUgb24gbmV3ZXIgYnJvd3Nlciwgd2UgbmVlZCBcImNoYW5nZVwiIGV2ZW50IHRvIGNhdGNoIGl0XG4gIGVsZW1lbnQub24oJ2NoYW5nZScsIGxpc3RlbmVyKTtcblxuICAvLyBTb21lIG5hdGl2ZSBpbnB1dCB0eXBlcyAoZGF0ZS1mYW1pbHkpIGhhdmUgdGhlIGFiaWxpdHkgdG8gY2hhbmdlIHZhbGlkaXR5IHdpdGhvdXRcbiAgLy8gZmlyaW5nIGFueSBpbnB1dC9jaGFuZ2UgZXZlbnRzLlxuICAvLyBGb3IgdGhlc2UgZXZlbnQgdHlwZXMsIHdoZW4gbmF0aXZlIHZhbGlkYXRvcnMgYXJlIHByZXNlbnQgYW5kIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSB0eXBlLFxuICAvLyBjaGVjayBmb3IgdmFsaWRpdHkgY2hhbmdlcyBvbiB2YXJpb3VzIERPTSBldmVudHMuXG4gIGlmIChQQVJUSUFMX1ZBTElEQVRJT05fVFlQRVNbdHlwZV0gJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMgJiYgdHlwZSA9PT0gYXR0ci50eXBlKSB7XG4gICAgZWxlbWVudC5vbihQQVJUSUFMX1ZBTElEQVRJT05fRVZFTlRTLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oZXYpIHtcbiAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICB2YXIgdmFsaWRpdHkgPSB0aGlzW1ZBTElESVRZX1NUQVRFX1BST1BFUlRZXTtcbiAgICAgICAgdmFyIG9yaWdCYWRJbnB1dCA9IHZhbGlkaXR5LmJhZElucHV0O1xuICAgICAgICB2YXIgb3JpZ1R5cGVNaXNtYXRjaCA9IHZhbGlkaXR5LnR5cGVNaXNtYXRjaDtcbiAgICAgICAgdGltZW91dCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIGlmICh2YWxpZGl0eS5iYWRJbnB1dCAhPT0gb3JpZ0JhZElucHV0IHx8IHZhbGlkaXR5LnR5cGVNaXNtYXRjaCAhPT0gb3JpZ1R5cGVNaXNtYXRjaCkge1xuICAgICAgICAgICAgbGlzdGVuZXIoZXYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBGaXJlZm94IHZhbGlkYXRpb24gIzEyMTAyLlxuICAgIHZhciB2YWx1ZSA9IGN0cmwuJGlzRW1wdHkoY3RybC4kdmlld1ZhbHVlKSA/ICcnIDogY3RybC4kdmlld1ZhbHVlO1xuICAgIGlmIChlbGVtZW50LnZhbCgpICE9PSB2YWx1ZSkge1xuICAgICAgZWxlbWVudC52YWwodmFsdWUpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gd2Vla1BhcnNlcihpc29XZWVrLCBleGlzdGluZ0RhdGUpIHtcbiAgaWYgKGlzRGF0ZShpc29XZWVrKSkge1xuICAgIHJldHVybiBpc29XZWVrO1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nKGlzb1dlZWspKSB7XG4gICAgV0VFS19SRUdFWFAubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgcGFydHMgPSBXRUVLX1JFR0VYUC5leGVjKGlzb1dlZWspO1xuICAgIGlmIChwYXJ0cykge1xuICAgICAgdmFyIHllYXIgPSArcGFydHNbMV0sXG4gICAgICAgICAgd2VlayA9ICtwYXJ0c1syXSxcbiAgICAgICAgICBob3VycyA9IDAsXG4gICAgICAgICAgbWludXRlcyA9IDAsXG4gICAgICAgICAgc2Vjb25kcyA9IDAsXG4gICAgICAgICAgbWlsbGlzZWNvbmRzID0gMCxcbiAgICAgICAgICBmaXJzdFRodXJzID0gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSxcbiAgICAgICAgICBhZGREYXlzID0gKHdlZWsgLSAxKSAqIDc7XG5cbiAgICAgIGlmIChleGlzdGluZ0RhdGUpIHtcbiAgICAgICAgaG91cnMgPSBleGlzdGluZ0RhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgbWludXRlcyA9IGV4aXN0aW5nRGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgIHNlY29uZHMgPSBleGlzdGluZ0RhdGUuZ2V0U2Vjb25kcygpO1xuICAgICAgICBtaWxsaXNlY29uZHMgPSBleGlzdGluZ0RhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAwLCBmaXJzdFRodXJzLmdldERhdGUoKSArIGFkZERheXMsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBOYU47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGVQYXJzZXIocmVnZXhwLCBtYXBwaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbihpc28sIGRhdGUpIHtcbiAgICB2YXIgcGFydHMsIG1hcDtcblxuICAgIGlmIChpc0RhdGUoaXNvKSkge1xuICAgICAgcmV0dXJuIGlzbztcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoaXNvKSkge1xuICAgICAgLy8gV2hlbiBhIGRhdGUgaXMgSlNPTidpZmllZCB0byB3cmFwcyBpdHNlbGYgaW5zaWRlIG9mIGFuIGV4dHJhXG4gICAgICAvLyBzZXQgb2YgZG91YmxlIHF1b3Rlcy4gVGhpcyBtYWtlcyB0aGUgZGF0ZSBwYXJzaW5nIGNvZGUgdW5hYmxlXG4gICAgICAvLyB0byBtYXRjaCB0aGUgZGF0ZSBzdHJpbmcgYW5kIHBhcnNlIGl0IGFzIGEgZGF0ZS5cbiAgICAgIGlmIChpc28uY2hhckF0KDApID09PSAnXCInICYmIGlzby5jaGFyQXQoaXNvLmxlbmd0aCAtIDEpID09PSAnXCInKSB7XG4gICAgICAgIGlzbyA9IGlzby5zdWJzdHJpbmcoMSwgaXNvLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKElTT19EQVRFX1JFR0VYUC50ZXN0KGlzbykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGlzbyk7XG4gICAgICB9XG4gICAgICByZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICAgIHBhcnRzID0gcmVnZXhwLmV4ZWMoaXNvKTtcblxuICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgIHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgbWFwID0ge1xuICAgICAgICAgICAgeXl5eTogZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgTU06IGRhdGUuZ2V0TW9udGgoKSArIDEsXG4gICAgICAgICAgICBkZDogZGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgICBISDogZGF0ZS5nZXRIb3VycygpLFxuICAgICAgICAgICAgbW06IGRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgICAgc3M6IGRhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgICAgICAgc3NzOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC8gMTAwMFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFwID0geyB5eXl5OiAxOTcwLCBNTTogMSwgZGQ6IDEsIEhIOiAwLCBtbTogMCwgc3M6IDAsIHNzczogMCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24ocGFydCwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPCBtYXBwaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgbWFwW21hcHBpbmdbaW5kZXhdXSA9ICtwYXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShtYXAueXl5eSwgbWFwLk1NIC0gMSwgbWFwLmRkLCBtYXAuSEgsIG1hcC5tbSwgbWFwLnNzIHx8IDAsIG1hcC5zc3MgKiAxMDAwIHx8IDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBOYU47XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGVJbnB1dFR5cGUodHlwZSwgcmVnZXhwLCBwYXJzZURhdGUsIGZvcm1hdCkge1xuICByZXR1cm4gZnVuY3Rpb24gZHluYW1pY0RhdGVJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlcikge1xuICAgIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gICAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgICB2YXIgdGltZXpvbmUgPSBjdHJsICYmIGN0cmwuJG9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpO1xuICAgIHZhciBwcmV2aW91c0RhdGU7XG5cbiAgICBjdHJsLiQkcGFyc2VyTmFtZSA9IHR5cGU7XG4gICAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpIHJldHVybiBudWxsO1xuICAgICAgaWYgKHJlZ2V4cC50ZXN0KHZhbHVlKSkge1xuICAgICAgICAvLyBOb3RlOiBXZSBjYW5ub3QgcmVhZCBjdHJsLiRtb2RlbFZhbHVlLCBhcyB0aGVyZSBtaWdodCBiZSBhIGRpZmZlcmVudFxuICAgICAgICAvLyBwYXJzZXIvZm9ybWF0dGVyIGluIHRoZSBwcm9jZXNzaW5nIGNoYWluIHNvIHRoYXQgdGhlIG1vZGVsXG4gICAgICAgIC8vIGNvbnRhaW5zIHNvbWUgZGlmZmVyZW50IGRhdGEgZm9ybWF0IVxuICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IHBhcnNlRGF0ZSh2YWx1ZSwgcHJldmlvdXNEYXRlKTtcbiAgICAgICAgaWYgKHRpbWV6b25lKSB7XG4gICAgICAgICAgcGFyc2VkRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocGFyc2VkRGF0ZSwgdGltZXpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICYmICFpc0RhdGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ2RhdGVmbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBkYXRlJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVmFsaWREYXRlKHZhbHVlKSkge1xuICAgICAgICBwcmV2aW91c0RhdGUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHByZXZpb3VzRGF0ZSAmJiB0aW1lem9uZSkge1xuICAgICAgICAgIHByZXZpb3VzRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocHJldmlvdXNEYXRlLCB0aW1lem9uZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRmaWx0ZXIoJ2RhdGUnKSh2YWx1ZSwgZm9ybWF0LCB0aW1lem9uZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2aW91c0RhdGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWluKSB8fCBhdHRyLm5nTWluKSB7XG4gICAgICB2YXIgbWluVmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtaW5WYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPj0gbWluVmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtaW5WYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgICB2YXIgbWF4VmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPD0gbWF4VmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21heCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtYXhWYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgICAgLy8gSW52YWxpZCBEYXRlOiBnZXRUaW1lKCkgcmV0dXJucyBOYU5cbiAgICAgIHJldHVybiB2YWx1ZSAmJiAhKHZhbHVlLmdldFRpbWUgJiYgdmFsdWUuZ2V0VGltZSgpICE9PSB2YWx1ZS5nZXRUaW1lKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUodmFsKSB7XG4gICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbCkgJiYgIWlzRGF0ZSh2YWwpID8gcGFyc2VEYXRlKHZhbCkgfHwgdW5kZWZpbmVkIDogdmFsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgdmFyIG5hdGl2ZVZhbGlkYXRpb24gPSBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycyA9IGlzT2JqZWN0KG5vZGUudmFsaWRpdHkpO1xuICBpZiAobmF0aXZlVmFsaWRhdGlvbikge1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIHZhbGlkaXR5ID0gZWxlbWVudC5wcm9wKFZBTElESVRZX1NUQVRFX1BST1BFUlRZKSB8fCB7fTtcbiAgICAgIHJldHVybiB2YWxpZGl0eS5iYWRJbnB1dCB8fCB2YWxpZGl0eS50eXBlTWlzbWF0Y2ggPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBudW1iZXJGb3JtYXR0ZXJQYXJzZXIoY3RybCkge1xuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICdudW1iZXInO1xuICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKE5VTUJFUl9SRUdFWFAudGVzdCh2YWx1ZSkpIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9KTtcblxuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoIWN0cmwuJGlzRW1wdHkodmFsdWUpKSB7XG4gICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdudW1mbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBudW1iZXInLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpIHtcbiAgaWYgKGlzRGVmaW5lZCh2YWwpICYmICFpc051bWJlcih2YWwpKSB7XG4gICAgdmFsID0gcGFyc2VGbG9hdCh2YWwpO1xuICB9XG4gIHJldHVybiAhaXNOdW1iZXJOYU4odmFsKSA/IHZhbCA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXJJbnRlZ2VyKG51bSkge1xuICAvLyBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDYzNjUzNi9ob3ctdG8tY2hlY2staWYtYS12YXJpYWJsZS1pcy1hbi1pbnRlZ2VyLWluLWphdmFzY3JpcHQjMTQ3OTQwNjZcbiAgLy8gKG1pbnVzIHRoZSBhc3N1bXB0aW9uIHRoYXQgYG51bWAgaXMgYSBudW1iZXIpXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgcmV0dXJuIChudW0gfCAwKSA9PT0gbnVtO1xufVxuXG5mdW5jdGlvbiBjb3VudERlY2ltYWxzKG51bSkge1xuICB2YXIgbnVtU3RyaW5nID0gbnVtLnRvU3RyaW5nKCk7XG4gIHZhciBkZWNpbWFsU3ltYm9sSW5kZXggPSBudW1TdHJpbmcuaW5kZXhPZignLicpO1xuXG4gIGlmIChkZWNpbWFsU3ltYm9sSW5kZXggPT09IC0xKSB7XG4gICAgaWYgKC0xIDwgbnVtICYmIG51bSA8IDEpIHtcbiAgICAgIC8vIEl0IG1heSBiZSBpbiB0aGUgZXhwb25lbnRpYWwgbm90YXRpb24gZm9ybWF0IChgMWUtWGApXG4gICAgICB2YXIgbWF0Y2ggPSAvZS0oXFxkKykkLy5leGVjKG51bVN0cmluZyk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4gTnVtYmVyKG1hdGNoWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBudW1TdHJpbmcubGVuZ3RoIC0gZGVjaW1hbFN5bWJvbEluZGV4IC0gMTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEZvclN0ZXAodmlld1ZhbHVlLCBzdGVwQmFzZSwgc3RlcCkge1xuICAvLyBBdCB0aGlzIHBvaW50IGBzdGVwQmFzZWAgYW5kIGBzdGVwYCBhcmUgZXhwZWN0ZWQgdG8gYmUgbm9uLU5hTiB2YWx1ZXNcbiAgLy8gYW5kIGB2aWV3VmFsdWVgIGlzIGV4cGVjdGVkIHRvIGJlIGEgdmFsaWQgc3RyaW5naWZpZWQgbnVtYmVyLlxuICB2YXIgdmFsdWUgPSBOdW1iZXIodmlld1ZhbHVlKTtcblxuICB2YXIgaXNOb25JbnRlZ2VyVmFsdWUgPSAhaXNOdW1iZXJJbnRlZ2VyKHZhbHVlKTtcbiAgdmFyIGlzTm9uSW50ZWdlclN0ZXBCYXNlID0gIWlzTnVtYmVySW50ZWdlcihzdGVwQmFzZSk7XG4gIHZhciBpc05vbkludGVnZXJTdGVwID0gIWlzTnVtYmVySW50ZWdlcihzdGVwKTtcblxuICAvLyBEdWUgdG8gbGltaXRhdGlvbnMgaW4gRmxvYXRpbmcgUG9pbnQgQXJpdGhtZXRpYyAoZS5nLiBgMC4zIC0gMC4yICE9PSAwLjFgIG9yXG4gIC8vIGAwLjUgJSAwLjEgIT09IDBgKSwgd2UgbmVlZCB0byBjb252ZXJ0IGFsbCBudW1iZXJzIHRvIGludGVnZXJzLlxuICBpZiAoaXNOb25JbnRlZ2VyVmFsdWUgfHwgaXNOb25JbnRlZ2VyU3RlcEJhc2UgfHwgaXNOb25JbnRlZ2VyU3RlcCkge1xuICAgIHZhciB2YWx1ZURlY2ltYWxzID0gaXNOb25JbnRlZ2VyVmFsdWUgPyBjb3VudERlY2ltYWxzKHZhbHVlKSA6IDA7XG4gICAgdmFyIHN0ZXBCYXNlRGVjaW1hbHMgPSBpc05vbkludGVnZXJTdGVwQmFzZSA/IGNvdW50RGVjaW1hbHMoc3RlcEJhc2UpIDogMDtcbiAgICB2YXIgc3RlcERlY2ltYWxzID0gaXNOb25JbnRlZ2VyU3RlcCA/IGNvdW50RGVjaW1hbHMoc3RlcCkgOiAwO1xuXG4gICAgdmFyIGRlY2ltYWxDb3VudCA9IE1hdGgubWF4KHZhbHVlRGVjaW1hbHMsIHN0ZXBCYXNlRGVjaW1hbHMsIHN0ZXBEZWNpbWFscyk7XG4gICAgdmFyIG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgZGVjaW1hbENvdW50KTtcblxuICAgIHZhbHVlID0gdmFsdWUgKiBtdWx0aXBsaWVyO1xuICAgIHN0ZXBCYXNlID0gc3RlcEJhc2UgKiBtdWx0aXBsaWVyO1xuICAgIHN0ZXAgPSBzdGVwICogbXVsdGlwbGllcjtcblxuICAgIGlmIChpc05vbkludGVnZXJWYWx1ZSkgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICBpZiAoaXNOb25JbnRlZ2VyU3RlcEJhc2UpIHN0ZXBCYXNlID0gTWF0aC5yb3VuZChzdGVwQmFzZSk7XG4gICAgaWYgKGlzTm9uSW50ZWdlclN0ZXApIHN0ZXAgPSBNYXRoLnJvdW5kKHN0ZXApO1xuICB9XG5cbiAgcmV0dXJuICh2YWx1ZSAtIHN0ZXBCYXNlKSAlIHN0ZXAgPT09IDA7XG59XG5cbmZ1bmN0aW9uIG51bWJlcklucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gIG51bWJlckZvcm1hdHRlclBhcnNlcihjdHJsKTtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcblxuICB2YXIgbWluVmFsO1xuICB2YXIgbWF4VmFsO1xuXG4gIGlmIChpc0RlZmluZWQoYXR0ci5taW4pIHx8IGF0dHIubmdNaW4pIHtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCB2YWx1ZSA+PSBtaW5WYWw7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgbWluVmFsID0gcGFyc2VOdW1iZXJBdHRyVmFsKHZhbCk7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1heFZhbCkgfHwgdmFsdWUgPD0gbWF4VmFsO1xuICAgIH07XG5cbiAgICBhdHRyLiRvYnNlcnZlKCdtYXgnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgIG1heFZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGlzRGVmaW5lZChhdHRyLnN0ZXApIHx8IGF0dHIubmdTdGVwKSB7XG4gICAgdmFyIHN0ZXBWYWw7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5zdGVwID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKHN0ZXBWYWwpIHx8XG4gICAgICAgICAgICAgaXNWYWxpZEZvclN0ZXAodmlld1ZhbHVlLCBtaW5WYWwgfHwgMCwgc3RlcFZhbCk7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ3N0ZXAnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHN0ZXBWYWwgPSBwYXJzZU51bWJlckF0dHJWYWwodmFsKTtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByYW5nZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gIG51bWJlckZvcm1hdHRlclBhcnNlcihjdHJsKTtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcblxuICB2YXIgc3VwcG9ydHNSYW5nZSA9IGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzICYmIGVsZW1lbnRbMF0udHlwZSA9PT0gJ3JhbmdlJyxcbiAgICAgIG1pblZhbCA9IHN1cHBvcnRzUmFuZ2UgPyAwIDogdW5kZWZpbmVkLFxuICAgICAgbWF4VmFsID0gc3VwcG9ydHNSYW5nZSA/IDEwMCA6IHVuZGVmaW5lZCxcbiAgICAgIHN0ZXBWYWwgPSBzdXBwb3J0c1JhbmdlID8gMSA6IHVuZGVmaW5lZCxcbiAgICAgIHZhbGlkaXR5ID0gZWxlbWVudFswXS52YWxpZGl0eSxcbiAgICAgIGhhc01pbkF0dHIgPSBpc0RlZmluZWQoYXR0ci5taW4pLFxuICAgICAgaGFzTWF4QXR0ciA9IGlzRGVmaW5lZChhdHRyLm1heCksXG4gICAgICBoYXNTdGVwQXR0ciA9IGlzRGVmaW5lZChhdHRyLnN0ZXApO1xuXG4gIHZhciBvcmlnaW5hbFJlbmRlciA9IGN0cmwuJHJlbmRlcjtcblxuICBjdHJsLiRyZW5kZXIgPSBzdXBwb3J0c1JhbmdlICYmIGlzRGVmaW5lZCh2YWxpZGl0eS5yYW5nZVVuZGVyZmxvdykgJiYgaXNEZWZpbmVkKHZhbGlkaXR5LnJhbmdlT3ZlcmZsb3cpID9cbiAgICAvL0Jyb3dzZXJzIHRoYXQgaW1wbGVtZW50IHJhbmdlIHdpbGwgc2V0IHRoZXNlIHZhbHVlcyBhdXRvbWF0aWNhbGx5LCBidXQgcmVhZGluZyB0aGUgYWRqdXN0ZWQgdmFsdWVzIGFmdGVyXG4gICAgLy8kcmVuZGVyIHdvdWxkIGNhdXNlIHRoZSBtaW4gLyBtYXggdmFsaWRhdG9ycyB0byBiZSBhcHBsaWVkIHdpdGggdGhlIHdyb25nIHZhbHVlXG4gICAgZnVuY3Rpb24gcmFuZ2VSZW5kZXIoKSB7XG4gICAgICBvcmlnaW5hbFJlbmRlcigpO1xuICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnQudmFsKCkpO1xuICAgIH0gOlxuICAgIG9yaWdpbmFsUmVuZGVyO1xuXG4gIGlmIChoYXNNaW5BdHRyKSB7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBzdXBwb3J0c1JhbmdlID9cbiAgICAgIC8vIFNpbmNlIGFsbCBicm93c2VycyBzZXQgdGhlIGlucHV0IHRvIGEgdmFsaWQgdmFsdWUsIHdlIGRvbid0IG5lZWQgdG8gY2hlY2sgdmFsaWRpdHlcbiAgICAgIGZ1bmN0aW9uIG5vb3BNaW5WYWxpZGF0b3IoKSB7IHJldHVybiB0cnVlOyB9IDpcbiAgICAgIC8vIG5vbi1zdXBwb3J0IGJyb3dzZXJzIHZhbGlkYXRlIHRoZSBtaW4gdmFsXG4gICAgICBmdW5jdGlvbiBtaW5WYWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCB2aWV3VmFsdWUgPj0gbWluVmFsO1xuICAgICAgfTtcblxuICAgIHNldEluaXRpYWxWYWx1ZUFuZE9ic2VydmVyKCdtaW4nLCBtaW5DaGFuZ2UpO1xuICB9XG5cbiAgaWYgKGhhc01heEF0dHIpIHtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1heCA9IHN1cHBvcnRzUmFuZ2UgP1xuICAgICAgLy8gU2luY2UgYWxsIGJyb3dzZXJzIHNldCB0aGUgaW5wdXQgdG8gYSB2YWxpZCB2YWx1ZSwgd2UgZG9uJ3QgbmVlZCB0byBjaGVjayB2YWxpZGl0eVxuICAgICAgZnVuY3Rpb24gbm9vcE1heFZhbGlkYXRvcigpIHsgcmV0dXJuIHRydWU7IH0gOlxuICAgICAgLy8gbm9uLXN1cHBvcnQgYnJvd3NlcnMgdmFsaWRhdGUgdGhlIG1heCB2YWxcbiAgICAgIGZ1bmN0aW9uIG1heFZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHZpZXdWYWx1ZSA8PSBtYXhWYWw7XG4gICAgICB9O1xuXG4gICAgc2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIoJ21heCcsIG1heENoYW5nZSk7XG4gIH1cblxuICBpZiAoaGFzU3RlcEF0dHIpIHtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLnN0ZXAgPSBzdXBwb3J0c1JhbmdlID9cbiAgICAgIGZ1bmN0aW9uIG5hdGl2ZVN0ZXBWYWxpZGF0b3IoKSB7XG4gICAgICAgIC8vIEN1cnJlbnRseSwgb25seSBGRiBpbXBsZW1lbnRzIHRoZSBzcGVjIG9uIHN0ZXAgY2hhbmdlIGNvcnJlY3RseSAoaS5lLiBhZGp1c3RpbmcgdGhlXG4gICAgICAgIC8vIGlucHV0IGVsZW1lbnQgdmFsdWUgdG8gYSB2YWxpZCB2YWx1ZSkuIEl0J3MgcG9zc2libGUgdGhhdCBvdGhlciBicm93c2VycyBzZXQgdGhlIHN0ZXBNaXNtYXRjaFxuICAgICAgICAvLyB2YWxpZGl0eSBlcnJvciBpbnN0ZWFkLCBzbyB3ZSBjYW4gYXQgbGVhc3QgcmVwb3J0IGFuIGVycm9yIGluIHRoYXQgY2FzZS5cbiAgICAgICAgcmV0dXJuICF2YWxpZGl0eS5zdGVwTWlzbWF0Y2g7XG4gICAgICB9IDpcbiAgICAgIC8vIG5nU3RlcCBkb2Vzbid0IHNldCB0aGUgc2V0cCBhdHRyLCBzbyB0aGUgYnJvd3NlciBkb2Vzbid0IGFkanVzdCB0aGUgaW5wdXQgdmFsdWUgYXMgc2V0dGluZyBzdGVwIHdvdWxkXG4gICAgICBmdW5jdGlvbiBzdGVwVmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKHN0ZXBWYWwpIHx8XG4gICAgICAgICAgICAgICBpc1ZhbGlkRm9yU3RlcCh2aWV3VmFsdWUsIG1pblZhbCB8fCAwLCBzdGVwVmFsKTtcbiAgICAgIH07XG5cbiAgICBzZXRJbml0aWFsVmFsdWVBbmRPYnNlcnZlcignc3RlcCcsIHN0ZXBDaGFuZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIoaHRtbEF0dHJOYW1lLCBjaGFuZ2VGbikge1xuICAgIC8vIGludGVycG9sYXRlZCBhdHRyaWJ1dGVzIHNldCB0aGUgYXR0cmlidXRlIHZhbHVlIG9ubHkgYWZ0ZXIgYSBkaWdlc3QsIGJ1dCB3ZSBuZWVkIHRoZVxuICAgIC8vIGF0dHJpYnV0ZSB2YWx1ZSB3aGVuIHRoZSBpbnB1dCBpcyBmaXJzdCByZW5kZXJlZCwgc28gdGhhdCB0aGUgYnJvd3NlciBjYW4gYWRqdXN0IHRoZVxuICAgIC8vIGlucHV0IHZhbHVlIGJhc2VkIG9uIHRoZSBtaW4vbWF4IHZhbHVlXG4gICAgZWxlbWVudC5hdHRyKGh0bWxBdHRyTmFtZSwgYXR0cltodG1sQXR0ck5hbWVdKTtcbiAgICBhdHRyLiRvYnNlcnZlKGh0bWxBdHRyTmFtZSwgY2hhbmdlRm4pO1xuICB9XG5cbiAgZnVuY3Rpb24gbWluQ2hhbmdlKHZhbCkge1xuICAgIG1pblZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgIC8vIGlnbm9yZSBjaGFuZ2VzIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZFxuICAgIGlmIChpc051bWJlck5hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdXBwb3J0c1JhbmdlKSB7XG4gICAgICB2YXIgZWxWYWwgPSBlbGVtZW50LnZhbCgpO1xuICAgICAgLy8gSUUxMSBkb2Vzbid0IHNldCB0aGUgZWwgdmFsIGNvcnJlY3RseSBpZiB0aGUgbWluVmFsIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZWxlbWVudCB2YWx1ZVxuICAgICAgaWYgKG1pblZhbCA+IGVsVmFsKSB7XG4gICAgICAgIGVsVmFsID0gbWluVmFsO1xuICAgICAgICBlbGVtZW50LnZhbChlbFZhbCk7XG4gICAgICB9XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxWYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWF4Q2hhbmdlKHZhbCkge1xuICAgIG1heFZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgIC8vIGlnbm9yZSBjaGFuZ2VzIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZFxuICAgIGlmIChpc051bWJlck5hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdXBwb3J0c1JhbmdlKSB7XG4gICAgICB2YXIgZWxWYWwgPSBlbGVtZW50LnZhbCgpO1xuICAgICAgLy8gSUUxMSBkb2Vzbid0IHNldCB0aGUgZWwgdmFsIGNvcnJlY3RseSBpZiB0aGUgbWF4VmFsIGlzIGxlc3MgdGhhbiB0aGUgZWxlbWVudCB2YWx1ZVxuICAgICAgaWYgKG1heFZhbCA8IGVsVmFsKSB7XG4gICAgICAgIGVsZW1lbnQudmFsKG1heFZhbCk7XG4gICAgICAgIC8vIElFMTEgYW5kIENocm9tZSBkb24ndCBzZXQgdGhlIHZhbHVlIHRvIHRoZSBtaW5WYWwgd2hlbiBtYXggPCBtaW5cbiAgICAgICAgZWxWYWwgPSBtYXhWYWwgPCBtaW5WYWwgPyBtaW5WYWwgOiBtYXhWYWw7XG4gICAgICB9XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxWYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RlcENoYW5nZSh2YWwpIHtcbiAgICBzdGVwVmFsID0gcGFyc2VOdW1iZXJBdHRyVmFsKHZhbCk7XG4gICAgLy8gaWdub3JlIGNoYW5nZXMgYmVmb3JlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgaWYgKGlzTnVtYmVyTmFOKGN0cmwuJG1vZGVsVmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU29tZSBicm93c2VycyBkb24ndCBhZGp1c3QgdGhlIGlucHV0IHZhbHVlIGNvcnJlY3RseSwgYnV0IHNldCB0aGUgc3RlcE1pc21hdGNoIGVycm9yXG4gICAgaWYgKHN1cHBvcnRzUmFuZ2UgJiYgY3RybC4kdmlld1ZhbHVlICE9PSBlbGVtZW50LnZhbCgpKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudC52YWwoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXJsSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgLy8gTm90ZTogbm8gYmFkSW5wdXRDaGVja2VyIGhlcmUgYnkgcHVycG9zZSBhcyBgdXJsYCBpcyBvbmx5IGEgdmFsaWRhdGlvblxuICAvLyBpbiBicm93c2VycywgaS5lLiB3ZSBjYW4gYWx3YXlzIHJlYWQgb3V0IGlucHV0LnZhbHVlIGV2ZW4gaWYgaXQgaXMgbm90IHZhbGlkIVxuICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTtcblxuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICd1cmwnO1xuICBjdHJsLiR2YWxpZGF0b3JzLnVybCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBVUkxfUkVHRVhQLnRlc3QodmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBlbWFpbElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIC8vIE5vdGU6IG5vIGJhZElucHV0Q2hlY2tlciBoZXJlIGJ5IHB1cnBvc2UgYXMgYHVybGAgaXMgb25seSBhIHZhbGlkYXRpb25cbiAgLy8gaW4gYnJvd3NlcnMsIGkuZS4gd2UgY2FuIGFsd2F5cyByZWFkIG91dCBpbnB1dC52YWx1ZSBldmVuIGlmIGl0IGlzIG5vdCB2YWxpZCFcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAnZW1haWwnO1xuICBjdHJsLiR2YWxpZGF0b3JzLmVtYWlsID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IEVNQUlMX1JFR0VYUC50ZXN0KHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmFkaW9JbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgdmFyIGRvVHJpbSA9ICFhdHRyLm5nVHJpbSB8fCB0cmltKGF0dHIubmdUcmltKSAhPT0gJ2ZhbHNlJztcbiAgLy8gbWFrZSB0aGUgbmFtZSB1bmlxdWUsIGlmIG5vdCBkZWZpbmVkXG4gIGlmIChpc1VuZGVmaW5lZChhdHRyLm5hbWUpKSB7XG4gICAgZWxlbWVudC5hdHRyKCduYW1lJywgbmV4dFVpZCgpKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgdmFyIHZhbHVlO1xuICAgIGlmIChlbGVtZW50WzBdLmNoZWNrZWQpIHtcbiAgICAgIHZhbHVlID0gYXR0ci52YWx1ZTtcbiAgICAgIGlmIChkb1RyaW0pIHtcbiAgICAgICAgdmFsdWUgPSB0cmltKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSwgZXYgJiYgZXYudHlwZSk7XG4gICAgfVxuICB9O1xuXG4gIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpO1xuXG4gIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHIudmFsdWU7XG4gICAgaWYgKGRvVHJpbSkge1xuICAgICAgdmFsdWUgPSB0cmltKHZhbHVlKTtcbiAgICB9XG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gKHZhbHVlID09PSBjdHJsLiR2aWV3VmFsdWUpO1xuICB9O1xuXG4gIGF0dHIuJG9ic2VydmUoJ3ZhbHVlJywgY3RybC4kcmVuZGVyKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBjb250ZXh0LCBuYW1lLCBleHByZXNzaW9uLCBmYWxsYmFjaykge1xuICB2YXIgcGFyc2VGbjtcbiAgaWYgKGlzRGVmaW5lZChleHByZXNzaW9uKSkge1xuICAgIHBhcnNlRm4gPSAkcGFyc2UoZXhwcmVzc2lvbik7XG4gICAgaWYgKCFwYXJzZUZuLmNvbnN0YW50KSB7XG4gICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdjb25zdGV4cHInLCAnRXhwZWN0ZWQgY29uc3RhbnQgZXhwcmVzc2lvbiBmb3IgYHswfWAsIGJ1dCBzYXcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdgezF9YC4nLCBuYW1lLCBleHByZXNzaW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlRm4oY29udGV4dCk7XG4gIH1cbiAgcmV0dXJuIGZhbGxiYWNrO1xufVxuXG5mdW5jdGlvbiBjaGVja2JveElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgdmFyIHRydWVWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ1RydWVWYWx1ZScsIGF0dHIubmdUcnVlVmFsdWUsIHRydWUpO1xuICB2YXIgZmFsc2VWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ0ZhbHNlVmFsdWUnLCBhdHRyLm5nRmFsc2VWYWx1ZSwgZmFsc2UpO1xuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnRbMF0uY2hlY2tlZCwgZXYgJiYgZXYudHlwZSk7XG4gIH07XG5cbiAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gY3RybC4kdmlld1ZhbHVlO1xuICB9O1xuXG4gIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCBgJGlzRW1wdHlgIGJlY2F1c2UgdGhlICR2aWV3VmFsdWUgb2YgYW4gZW1wdHkgY2hlY2tib3ggaXMgYWx3YXlzIHNldCB0byBgZmFsc2VgXG4gIC8vIFRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgcGFyc2VyIGJlbG93LCB3aGljaCBjb21wYXJlcyB0aGUgYCRtb2RlbFZhbHVlYCB3aXRoIGB0cnVlVmFsdWVgIHRvIGNvbnZlcnRcbiAgLy8gaXQgdG8gYSBib29sZWFuLlxuICBjdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IGZhbHNlO1xuICB9O1xuXG4gIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlcXVhbHModmFsdWUsIHRydWVWYWx1ZSk7XG4gIH0pO1xuXG4gIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7XG4gIH0pO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdGV4dGFyZWFcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIHRleHRhcmVhIGVsZW1lbnQgY29udHJvbCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLiBUaGUgZGF0YS1iaW5kaW5nIGFuZCB2YWxpZGF0aW9uXG4gKiBwcm9wZXJ0aWVzIG9mIHRoaXMgZWxlbWVudCBhcmUgZXhhY3RseSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXQgZWxlbWVudH0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICogICAgbWlubGVuZ3RoLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mIGFueVxuICogICAgbGVuZ3RoLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSAkdmlld1ZhbHVlfVxuICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICogICAgYWNjb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAqXG4gKiBAa25vd25Jc3N1ZVxuICpcbiAqIFdoZW4gc3BlY2lmeWluZyB0aGUgYHBsYWNlaG9sZGVyYCBhdHRyaWJ1dGUgb2YgYDx0ZXh0YXJlYT5gLCBJbnRlcm5ldCBFeHBsb3JlciB3aWxsIHRlbXBvcmFyaWx5XG4gKiBpbnNlcnQgdGhlIHBsYWNlaG9sZGVyIHZhbHVlIGFzIHRoZSB0ZXh0YXJlYSdzIGNvbnRlbnQuIElmIHRoZSBwbGFjZWhvbGRlciB2YWx1ZSBjb250YWluc1xuICogaW50ZXJwb2xhdGlvbiAoYHt7IC4uLiB9fWApLCBhbiBlcnJvciB3aWxsIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZSB3aGVuIEFuZ3VsYXIgdHJpZXMgdG8gdXBkYXRlXG4gKiB0aGUgdmFsdWUgb2YgdGhlIGJ5LXRoZW4tcmVtb3ZlZCB0ZXh0IG5vZGUuIFRoaXMgZG9lc24ndCBhZmZlY3QgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlXG4gKiB0ZXh0YXJlYSwgYnV0IGNhbiBiZSB1bmRlc2lyYWJsZS5cbiAqXG4gKiBZb3UgY2FuIHdvcmsgYXJvdW5kIHRoaXMgSW50ZXJuZXQgRXhwbG9yZXIgaXNzdWUgYnkgdXNpbmcgYG5nLWF0dHItcGxhY2Vob2xkZXJgIGluc3RlYWQgb2ZcbiAqIGBwbGFjZWhvbGRlcmAgb24gdGV4dGFyZWFzLCB3aGVuZXZlciB5b3UgbmVlZCBpbnRlcnBvbGF0aW9uIGluIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS4gWW91IGNhblxuICogZmluZCBtb3JlIGRldGFpbHMgb24gYG5nQXR0cmAgaW4gdGhlXG4gKiBbSW50ZXJwb2xhdGlvbl0oZ3VpZGUvaW50ZXJwb2xhdGlvbiMtbmdhdHRyLWZvci1iaW5kaW5nLXRvLWFyYml0cmFyeS1hdHRyaWJ1dGVzKSBzZWN0aW9uIG9mIHRoZVxuICogRGV2ZWxvcGVyIEd1aWRlLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBpbnB1dFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUTUwgaW5wdXQgZWxlbWVudCBjb250cm9sLiBXaGVuIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LCBpdCBwcm92aWRlcyBkYXRhLWJpbmRpbmcsXG4gKiBpbnB1dCBzdGF0ZSBjb250cm9sLCBhbmQgdmFsaWRhdGlvbi5cbiAqIElucHV0IGNvbnRyb2wgZm9sbG93cyBIVE1MNSBpbnB1dCB0eXBlcyBhbmQgcG9seWZpbGxzIHRoZSBIVE1MNSB2YWxpZGF0aW9uIGJlaGF2aW9yIGZvciBvbGRlciBicm93c2Vycy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIE5vdCBldmVyeSBmZWF0dXJlIG9mZmVyZWQgaXMgYXZhaWxhYmxlIGZvciBhbGwgaW5wdXQgdHlwZXMuXG4gKiBTcGVjaWZpY2FsbHksIGRhdGEgYmluZGluZyBhbmQgZXZlbnQgaGFuZGxpbmcgdmlhIGBuZy1tb2RlbGAgaXMgdW5zdXBwb3J0ZWQgZm9yIGBpbnB1dFtmaWxlXWAuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBuZ1JlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgaWYgc2V0IHRvIHRydWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gKiAgICBtaW5sZW5ndGguXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2YgYW55XG4gKiAgICBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlICR2aWV3VmFsdWV9XG4gKiAgICB2YWx1ZSBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gKiAgICBhY2NvdW50LlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGVcbiAqICAgIGlucHV0LlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cImlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImlucHV0RXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS51c2VyID0ge25hbWU6ICdndWVzdCcsIGxhc3Q6ICd2aXNpdG9yJ307XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICBVc2VyIG5hbWU6XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0udXNlck5hbWUuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgTGFzdCBuYW1lOlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibGFzdE5hbWVcIiBuZy1tb2RlbD1cInVzZXIubGFzdFwiXG4gICAgICAgICAgICAgIG5nLW1pbmxlbmd0aD1cIjNcIiBuZy1tYXhsZW5ndGg9XCIxMFwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5taW5sZW5ndGhcIj5cbiAgICAgICAgICAgICAgIFRvbyBzaG9ydCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubGFzdE5hbWUuJGVycm9yLm1heGxlbmd0aFwiPlxuICAgICAgICAgICAgICAgVG9vIGxvbmchPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDxocj5cbiAgICAgICAgIDx0dD51c2VyID0ge3t1c2VyfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiR2YWxpZCA9IHt7bXlGb3JtLnVzZXJOYW1lLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kZXJyb3IgPSB7e215Rm9ybS51c2VyTmFtZS4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiRlcnJvciA9IHt7bXlGb3JtLmxhc3ROYW1lLiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1pbmxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1pbmxlbmd0aH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IubWF4bGVuZ3RoID0ge3shIW15Rm9ybS4kZXJyb3IubWF4bGVuZ3RofX08L3R0Pjxici8+XG4gICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciB1c2VyID0gZWxlbWVudChieS5leGFjdEJpbmRpbmcoJ3VzZXInKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0udXNlck5hbWUuJHZhbGlkJykpO1xuICAgICAgICB2YXIgbGFzdE5hbWVWYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGxhc3ROYW1lRXJyb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kZXJyb3InKSk7XG4gICAgICAgIHZhciBmb3JtVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlci5uYW1lJykpO1xuICAgICAgICB2YXIgdXNlckxhc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubGFzdCcpKTtcblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICBleHBlY3QodXNlck5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5IHdoZW4gcmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlck5hbWVJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibGFzdFwiOlwidmlzaXRvclwifScpO1xuICAgICAgICAgIGV4cGVjdCh1c2VyTmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgaWYgZW1wdHkgd2hlbiBtaW4gbGVuZ3RoIGlzIHNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwiLFwibGFzdFwiOlwiXCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsZXNzIHRoYW4gcmVxdWlyZWQgbWluIGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCd4eCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21pbmxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsb25nZXIgdGhhbiBtYXggbGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuc2VuZEtleXMoJ3NvbWUgcmlkaWN1bG91c2x5IGxvbmcgbmFtZScpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21heGxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsICckZmlsdGVyJywgJyRwYXJzZScsXG4gICAgZnVuY3Rpb24oJGJyb3dzZXIsICRzbmlmZmVyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnP25nTW9kZWwnXSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICBpZiAoY3RybHNbMF0pIHtcbiAgICAgICAgICAoaW5wdXRUeXBlW2xvd2VyY2FzZShhdHRyLnR5cGUpXSB8fCBpbnB1dFR5cGUudGV4dCkoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzWzBdLCAkc25pZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJyb3dzZXIsICRmaWx0ZXIsICRwYXJzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuXG5cbnZhciBDT05TVEFOVF9WQUxVRV9SRUdFWFAgPSAvXih0cnVlfGZhbHNlfFxcZCspJC87XG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nVmFsdWVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEJpbmRzIHRoZSBnaXZlbiBleHByZXNzaW9uIHRvIHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudC5cbiAqXG4gKiBJdCBpcyBtYWlubHkgdXNlZCBvbiB7QGxpbmsgaW5wdXRbcmFkaW9dIGBpbnB1dFtyYWRpb11gfSBhbmQgb3B0aW9uIGVsZW1lbnRzLFxuICogc28gdGhhdCB3aGVuIHRoZSBlbGVtZW50IGlzIHNlbGVjdGVkLCB0aGUge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSBvZiB0aGF0IGVsZW1lbnQgKG9yIGl0c1xuICoge0BsaW5rIHNlbGVjdCBgc2VsZWN0YH0gcGFyZW50IGVsZW1lbnQpIGlzIHNldCB0byB0aGUgYm91bmQgdmFsdWUuIEl0IGlzIGVzcGVjaWFsbHkgdXNlZnVsXG4gKiBmb3IgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIGxpc3RzIHVzaW5nIHtAbGluayBuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2hvd24gYmVsb3cuXG4gKlxuICogSXQgY2FuIGFsc28gYmUgdXNlZCB0byBhY2hpZXZlIG9uZS13YXkgYmluZGluZyBvZiBhIGdpdmVuIGV4cHJlc3Npb24gdG8gYW4gaW5wdXQgZWxlbWVudFxuICogc3VjaCBhcyBhbiBgaW5wdXRbdGV4dF1gIG9yIGEgYHRleHRhcmVhYCwgd2hlbiB0aGF0IGVsZW1lbnQgZG9lcyBub3QgdXNlIG5nTW9kZWwuXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdWYWx1ZSBhbmd1bGFyIGV4cHJlc3Npb24sIHdob3NlIHZhbHVlIHdpbGwgYmUgYm91bmQgdG8gdGhlIGB2YWx1ZWAgYXR0cmlidXRlXG4gKiBhbmQgYHZhbHVlYCBwcm9wZXJ0eSBvZiB0aGUgZWxlbWVudC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZ1ZhbHVlLWRpcmVjdGl2ZVwiIG1vZHVsZT1cInZhbHVlRXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd2YWx1ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsncGl6emEnLCAndW5pY29ybnMnLCAncm9ib3RzJ107XG4gICAgICAgICAgICAgICRzY29wZS5teSA9IHsgZmF2b3JpdGU6ICd1bmljb3JucycgfTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGZvcm0gbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPGgyPldoaWNoIGlzIHlvdXIgZmF2b3JpdGU/PC9oMj5cbiAgICAgICAgICAgIDxsYWJlbCBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCIgZm9yPVwie3tuYW1lfX1cIj5cbiAgICAgICAgICAgICAge3tuYW1lfX1cbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cIm15LmZhdm9yaXRlXCJcbiAgICAgICAgICAgICAgICAgICAgIG5nLXZhbHVlPVwibmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICBpZD1cInt7bmFtZX19XCJcbiAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJmYXZvcml0ZVwiPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2PllvdSBjaG9zZSB7e215LmZhdm9yaXRlfX08L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgZmF2b3JpdGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215LmZhdm9yaXRlJykpO1xuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigndW5pY29ybnMnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnB1dHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXkuZmF2b3JpdGUnKSkuZ2V0KDApLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGZhdm9yaXRlLmdldFRleHQoKSkudG9Db250YWluKCdwaXp6YScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1ZhbHVlRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiAgaW5wdXRzIHVzZSB0aGUgdmFsdWUgYXR0cmlidXRlIGFzIHRoZWlyIGRlZmF1bHQgdmFsdWUgaWYgdGhlIHZhbHVlIHByb3BlcnR5IGlzIG5vdCBzZXQuXG4gICAqICBPbmNlIHRoZSB2YWx1ZSBwcm9wZXJ0eSBoYXMgYmVlbiBzZXQgKGJ5IGFkZGluZyBpbnB1dCksIGl0IHdpbGwgbm90IHJlYWN0IHRvIGNoYW5nZXMgdG9cbiAgICogIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgYW55bW9yZS4gU2V0dGluZyBib3RoIGF0dHJpYnV0ZSBhbmQgcHJvcGVydHkgZml4ZXMgdGhpcyBiZWhhdmlvciwgYW5kXG4gICAqICBtYWtlcyBpdCBwb3NzaWJsZSB0byB1c2UgbmdWYWx1ZSBhcyBhIHNvcnQgb2Ygb25lLXdheSBiaW5kLlxuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudFZhbHVlKGVsZW1lbnQsIGF0dHIsIHZhbHVlKSB7XG4gICAgLy8gU3VwcG9ydDogSUU5IG9ubHlcbiAgICAvLyBJbiBJRTkgdmFsdWVzIGFyZSBjb252ZXJ0ZWQgdG8gc3RyaW5nIChlLmcuIGBpbnB1dC52YWx1ZSA9IG51bGxgIHJlc3VsdHMgaW4gYGlucHV0LnZhbHVlID09PSAnbnVsbCdgKS5cbiAgICB2YXIgcHJvcFZhbHVlID0gaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogKG1zaWUgPT09IDkpID8gJycgOiBudWxsO1xuICAgIGVsZW1lbnQucHJvcCgndmFsdWUnLCBwcm9wVmFsdWUpO1xuICAgIGF0dHIuJHNldCgndmFsdWUnLCB2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbih0cGwsIHRwbEF0dHIpIHtcbiAgICAgIGlmIChDT05TVEFOVF9WQUxVRV9SRUdFWFAudGVzdCh0cGxBdHRyLm5nVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlQ29uc3RhbnRMaW5rKHNjb3BlLCBlbG0sIGF0dHIpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBzY29wZS4kZXZhbChhdHRyLm5nVmFsdWUpO1xuICAgICAgICAgIHVwZGF0ZUVsZW1lbnRWYWx1ZShlbG0sIGF0dHIsIHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlTGluayhzY29wZSwgZWxtLCBhdHRyKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdWYWx1ZSwgZnVuY3Rpb24gdmFsdWVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdXBkYXRlRWxlbWVudFZhbHVlKGVsbSwgYXR0ciwgdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdCaW5kXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdCaW5kYCBhdHRyaWJ1dGUgdGVsbHMgQW5ndWxhciB0byByZXBsYWNlIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHNwZWNpZmllZCBIVE1MIGVsZW1lbnRcbiAqIHdpdGggdGhlIHZhbHVlIG9mIGEgZ2l2ZW4gZXhwcmVzc2lvbiwgYW5kIHRvIHVwZGF0ZSB0aGUgdGV4dCBjb250ZW50IHdoZW4gdGhlIHZhbHVlIG9mIHRoYXRcbiAqIGV4cHJlc3Npb24gY2hhbmdlcy5cbiAqXG4gKiBUeXBpY2FsbHksIHlvdSBkb24ndCB1c2UgYG5nQmluZGAgZGlyZWN0bHksIGJ1dCBpbnN0ZWFkIHlvdSB1c2UgdGhlIGRvdWJsZSBjdXJseSBtYXJrdXAgbGlrZVxuICogYHt7IGV4cHJlc3Npb24gfX1gIHdoaWNoIGlzIHNpbWlsYXIgYnV0IGxlc3MgdmVyYm9zZS5cbiAqXG4gKiBJdCBpcyBwcmVmZXJhYmxlIHRvIHVzZSBgbmdCaW5kYCBpbnN0ZWFkIG9mIGB7eyBleHByZXNzaW9uIH19YCBpZiBhIHRlbXBsYXRlIGlzIG1vbWVudGFyaWx5XG4gKiBkaXNwbGF5ZWQgYnkgdGhlIGJyb3dzZXIgaW4gaXRzIHJhdyBzdGF0ZSBiZWZvcmUgQW5ndWxhciBjb21waWxlcyBpdC4gU2luY2UgYG5nQmluZGAgaXMgYW5cbiAqIGVsZW1lbnQgYXR0cmlidXRlLCBpdCBtYWtlcyB0aGUgYmluZGluZ3MgaW52aXNpYmxlIHRvIHRoZSB1c2VyIHdoaWxlIHRoZSBwYWdlIGlzIGxvYWRpbmcuXG4gKlxuICogQW4gYWx0ZXJuYXRpdmUgc29sdXRpb24gdG8gdGhpcyBwcm9ibGVtIHdvdWxkIGJlIHVzaW5nIHRoZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Nsb2FrIG5nQ2xvYWt9IGRpcmVjdGl2ZS5cbiAqXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogRW50ZXIgYSBuYW1lIGluIHRoZSBMaXZlIFByZXZpZXcgdGV4dCBib3g7IHRoZSBncmVldGluZyBiZWxvdyB0aGUgdGV4dCBib3ggY2hhbmdlcyBpbnN0YW50bHkuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiIG5hbWU9XCJuZy1iaW5kXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5uYW1lID0gJ1doaXJsZWQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxsYWJlbD5FbnRlciBuYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICAgIEhlbGxvIDxzcGFuIG5nLWJpbmQ9XCJuYW1lXCI+PC9zcGFuPiFcbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ1doaXJsZWQnKTtcbiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd3b3JsZCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ3dvcmxkJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQmluZERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZENvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZCk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0JpbmQsIGZ1bmN0aW9uIG5nQmluZFdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFRlbXBsYXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZFRlbXBsYXRlYCBkaXJlY3RpdmUgc3BlY2lmaWVzIHRoYXQgdGhlIGVsZW1lbnRcbiAqIHRleHQgY29udGVudCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgaW50ZXJwb2xhdGlvbiBvZiB0aGUgdGVtcGxhdGVcbiAqIGluIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGF0dHJpYnV0ZS5cbiAqIFVubGlrZSBgbmdCaW5kYCwgdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYHt7YCBgfX1gXG4gKiBleHByZXNzaW9ucy4gVGhpcyBkaXJlY3RpdmUgaXMgbmVlZGVkIHNpbmNlIHNvbWUgSFRNTCBlbGVtZW50c1xuICogKHN1Y2ggYXMgVElUTEUgYW5kIE9QVElPTikgY2Fubm90IGNvbnRhaW4gU1BBTiBlbGVtZW50cy5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0JpbmRUZW1wbGF0ZSB0ZW1wbGF0ZSBvZiBmb3JtXG4gKiAgIDx0dD57ezwvdHQ+IDx0dD5leHByZXNzaW9uPC90dD4gPHR0Pn19PC90dD4gdG8gZXZhbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVHJ5IGl0IGhlcmU6IGVudGVyIHRleHQgaW4gdGV4dCBib3ggYW5kIHdhdGNoIHRoZSBncmVldGluZyBjaGFuZ2UuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiIG5hbWU9XCJuZy1iaW5kLXRlbXBsYXRlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5zYWx1dGF0aW9uID0gJ0hlbGxvJztcbiAgICAgICAgICAgICAkc2NvcGUubmFtZSA9ICdXb3JsZCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8bGFiZWw+U2FsdXRhdGlvbjogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzYWx1dGF0aW9uXCI+PC9sYWJlbD48YnI+XG4gICAgICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICAgPHByZSBuZy1iaW5kLXRlbXBsYXRlPVwie3tzYWx1dGF0aW9ufX0ge3tuYW1lfX0hXCI+PC9wcmU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNhbHV0YXRpb25FbGVtID0gZWxlbWVudChieS5iaW5kaW5nKCdzYWx1dGF0aW9uJykpO1xuICAgICAgICAgdmFyIHNhbHV0YXRpb25JbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NhbHV0YXRpb24nKSk7XG4gICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTtcblxuICAgICAgICAgZXhwZWN0KHNhbHV0YXRpb25FbGVtLmdldFRleHQoKSkudG9CZSgnSGVsbG8gV29ybGQhJyk7XG5cbiAgICAgICAgIHNhbHV0YXRpb25JbnB1dC5jbGVhcigpO1xuICAgICAgICAgc2FsdXRhdGlvbklucHV0LnNlbmRLZXlzKCdHcmVldGluZ3MnKTtcbiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd1c2VyJyk7XG5cbiAgICAgICAgIGV4cGVjdChzYWx1dGF0aW9uRWxlbS5nZXRUZXh0KCkpLnRvQmUoJ0dyZWV0aW5ncyB1c2VyIScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJGludGVycG9sYXRlLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZFRlbXBsYXRlQ29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlRWxlbWVudCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kVGVtcGxhdGVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLm5nQmluZFRlbXBsYXRlKSk7XG4gICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBhdHRyLiRvYnNlcnZlKCduZ0JpbmRUZW1wbGF0ZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGlzVW5kZWZpbmVkKHZhbHVlKSA/ICcnIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZEh0bWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV2YWx1YXRlcyB0aGUgZXhwcmVzc2lvbiBhbmQgaW5zZXJ0cyB0aGUgcmVzdWx0aW5nIEhUTUwgaW50byB0aGUgZWxlbWVudCBpbiBhIHNlY3VyZSB3YXkuIEJ5IGRlZmF1bHQsXG4gKiB0aGUgcmVzdWx0aW5nIEhUTUwgY29udGVudCB3aWxsIGJlIHNhbml0aXplZCB1c2luZyB0aGUge0BsaW5rIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gc2VydmljZS5cbiAqIFRvIHV0aWxpemUgdGhpcyBmdW5jdGlvbmFsaXR5LCBlbnN1cmUgdGhhdCBgJHNhbml0aXplYCBpcyBhdmFpbGFibGUsIGZvciBleGFtcGxlLCBieSBpbmNsdWRpbmcge0BsaW5rXG4gKiBuZ1Nhbml0aXplfSBpbiB5b3VyIG1vZHVsZSdzIGRlcGVuZGVuY2llcyAobm90IGluIGNvcmUgQW5ndWxhcikuIEluIG9yZGVyIHRvIHVzZSB7QGxpbmsgbmdTYW5pdGl6ZX1cbiAqIGluIHlvdXIgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzLCB5b3UgbmVlZCB0byBpbmNsdWRlIFwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiIGluIHlvdXIgYXBwbGljYXRpb24uXG4gKlxuICogWW91IG1heSBhbHNvIGJ5cGFzcyBzYW5pdGl6YXRpb24gZm9yIHZhbHVlcyB5b3Uga25vdyBhcmUgc2FmZS4gVG8gZG8gc28sIGJpbmQgdG9cbiAqIGFuIGV4cGxpY2l0bHkgdHJ1c3RlZCB2YWx1ZSB2aWEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0uICBTZWUgdGhlIGV4YW1wbGVcbiAqIHVuZGVyIHtAbGluayBuZy4kc2NlI3Nob3ctbWUtYW4tZXhhbXBsZS11c2luZy1zY2UtIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqXG4gKiBOb3RlOiBJZiBhIGAkc2FuaXRpemVgIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUgYW5kIHRoZSBib3VuZCB2YWx1ZSBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQsIHlvdVxuICogd2lsbCBoYXZlIGFuIGV4Y2VwdGlvbiAoaW5zdGVhZCBvZiBhbiBleHBsb2l0LilcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCaW5kSHRtbCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kSHRtbEV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiIG5hbWU9XCJuZy1iaW5kLWh0bWxcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8cCBuZy1iaW5kLWh0bWw9XCJteUhUTUxcIj48L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRIdG1sRXhhbXBsZScsIFsnbmdTYW5pdGl6ZSddKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLm15SFRNTCA9XG4gICAgICAgICAgICAgICdJIGFtIGFuIDxjb2RlPkhUTUw8L2NvZGU+c3RyaW5nIHdpdGggJyArXG4gICAgICAgICAgICAgICc8YSBocmVmPVwiI1wiPmxpbmtzITwvYT4gYW5kIG90aGVyIDxlbT5zdHVmZjwvZW0+JztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQtaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbXlIVE1MJykpLmdldFRleHQoKSkudG9CZShcbiAgICAgICAgICAgICAnSSBhbSBhbiBIVE1Mc3RyaW5nIHdpdGggbGlua3MhIGFuZCBvdGhlciBzdHVmZicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgJyRwYXJzZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRzY2UsICRwYXJzZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZEh0bWxDb21waWxlKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgIHZhciBuZ0JpbmRIdG1sR2V0dGVyID0gJHBhcnNlKHRBdHRycy5uZ0JpbmRIdG1sKTtcbiAgICAgIHZhciBuZ0JpbmRIdG1sV2F0Y2ggPSAkcGFyc2UodEF0dHJzLm5nQmluZEh0bWwsIGZ1bmN0aW9uIHNjZVZhbHVlT2YodmFsKSB7XG4gICAgICAgIC8vIFVud3JhcCB0aGUgdmFsdWUgdG8gY29tcGFyZSB0aGUgYWN0dWFsIGlubmVyIHNhZmUgdmFsdWUsIG5vdCB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICAgIHJldHVybiAkc2NlLnZhbHVlT2YodmFsKTtcbiAgICAgIH0pO1xuICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3ModEVsZW1lbnQpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kSHRtbExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZEh0bWwpO1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaChuZ0JpbmRIdG1sV2F0Y2gsIGZ1bmN0aW9uIG5nQmluZEh0bWxXYXRjaEFjdGlvbigpIHtcbiAgICAgICAgICAvLyBUaGUgd2F0Y2hlZCB2YWx1ZSBpcyB0aGUgdW53cmFwcGVkIHZhbHVlLiBUbyBhdm9pZCByZS1lc2NhcGluZywgdXNlIHRoZSBkaXJlY3QgZ2V0dGVyLlxuICAgICAgICAgIHZhciB2YWx1ZSA9IG5nQmluZEh0bWxHZXR0ZXIoc2NvcGUpO1xuICAgICAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKSB8fCAnJyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NoYW5nZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRXZhbHVhdGUgdGhlIGdpdmVuIGV4cHJlc3Npb24gd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBpbnB1dC5cbiAqIFRoZSBleHByZXNzaW9uIGlzIGV2YWx1YXRlZCBpbW1lZGlhdGVseSwgdW5saWtlIHRoZSBKYXZhU2NyaXB0IG9uY2hhbmdlIGV2ZW50XG4gKiB3aGljaCBvbmx5IHRyaWdnZXJzIGF0IHRoZSBlbmQgb2YgYSBjaGFuZ2UgKHVzdWFsbHksIHdoZW4gdGhlIHVzZXIgbGVhdmVzIHRoZVxuICogZm9ybSBlbGVtZW50IG9yIHByZXNzZXMgdGhlIHJldHVybiBrZXkpLlxuICpcbiAqIFRoZSBgbmdDaGFuZ2VgIGV4cHJlc3Npb24gaXMgb25seSBldmFsdWF0ZWQgd2hlbiBhIGNoYW5nZSBpbiB0aGUgaW5wdXQgdmFsdWUgY2F1c2VzXG4gKiBhIG5ldyB2YWx1ZSB0byBiZSBjb21taXR0ZWQgdG8gdGhlIG1vZGVsLlxuICpcbiAqIEl0IHdpbGwgbm90IGJlIGV2YWx1YXRlZDpcbiAqICogaWYgdGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGAkcGFyc2Vyc2AgdHJhbnNmb3JtYXRpb24gcGlwZWxpbmUgaGFzIG5vdCBjaGFuZ2VkXG4gKiAqIGlmIHRoZSBpbnB1dCBoYXMgY29udGludWVkIHRvIGJlIGludmFsaWQgc2luY2UgdGhlIG1vZGVsIHdpbGwgc3RheSBgbnVsbGBcbiAqICogaWYgdGhlIG1vZGVsIGlzIGNoYW5nZWQgcHJvZ3JhbW1hdGljYWxseSBhbmQgbm90IGJ5IGEgY2hhbmdlIHRvIHRoZSBpbnB1dCB2YWx1ZVxuICpcbiAqXG4gKiBOb3RlLCB0aGlzIGRpcmVjdGl2ZSByZXF1aXJlcyBgbmdNb2RlbGAgdG8gYmUgcHJlc2VudC5cbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NoYW5nZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uIGNoYW5nZVxuICogaW4gaW5wdXQgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0NoYW5nZS1kaXJlY3RpdmVcIiBtb2R1bGU9XCJjaGFuZ2VFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNjcmlwdD5cbiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGFuZ2VFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIgPSAwO1xuICogICAgICAgICAgICRzY29wZS5jaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgICRzY29wZS5jb3VudGVyKys7XG4gKiAgICAgICAgICAgfTtcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb25maXJtZWRcIiBuZy1jaGFuZ2U9XCJjaGFuZ2UoKVwiIGlkPVwibmctY2hhbmdlLWV4YW1wbGUxXCIgLz5cbiAqICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbmZpcm1lZFwiIGlkPVwibmctY2hhbmdlLWV4YW1wbGUyXCIgLz5cbiAqICAgICAgIDxsYWJlbCBmb3I9XCJuZy1jaGFuZ2UtZXhhbXBsZTJcIj5Db25maXJtZWQ8L2xhYmVsPjxiciAvPlxuICogICAgICAgPHR0PmRlYnVnID0ge3tjb25maXJtZWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgIDx0dD5jb3VudGVyID0ge3tjb3VudGVyfX08L3R0Pjxici8+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIHZhciBjb3VudGVyID0gZWxlbWVudChieS5iaW5kaW5nKCdjb3VudGVyJykpO1xuICogICAgIHZhciBkZWJ1ZyA9IGVsZW1lbnQoYnkuYmluZGluZygnY29uZmlybWVkJykpO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gdmlldycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzAnKTtcbiAqXG4gKiAgICAgICBlbGVtZW50KGJ5LmlkKCduZy1jaGFuZ2UtZXhhbXBsZTEnKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMScpO1xuICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgbm90IGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGVsZW1lbnQoYnkuaWQoJ25nLWNoYW5nZS1leGFtcGxlMicpKS5jbGljaygpO1xuXG4gKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMCcpO1xuICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2hhbmdlRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gIHJlc3RyaWN0OiAnQScsXG4gIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICBjdHJsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICBzY29wZS4kZXZhbChhdHRyLm5nQ2hhbmdlKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qIGV4cG9ydGVkXG4gIG5nQ2xhc3NEaXJlY3RpdmUsXG4gIG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICBuZ0NsYXNzT2RkRGlyZWN0aXZlXG4qL1xuXG5mdW5jdGlvbiBjbGFzc0RpcmVjdGl2ZShuYW1lLCBzZWxlY3Rvcikge1xuICBuYW1lID0gJ25nQ2xhc3MnICsgbmFtZTtcbiAgdmFyIGluZGV4V2F0Y2hFeHByZXNzaW9uO1xuXG4gIHJldHVybiBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0FDJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBleHByZXNzaW9uID0gYXR0cltuYW1lXS50cmltKCk7XG4gICAgICAgIHZhciBpc09uZVRpbWUgPSAoZXhwcmVzc2lvbi5jaGFyQXQoMCkgPT09ICc6JykgJiYgKGV4cHJlc3Npb24uY2hhckF0KDEpID09PSAnOicpO1xuXG4gICAgICAgIHZhciB3YXRjaEludGVyY2VwdG9yID0gaXNPbmVUaW1lID8gdG9GbGF0VmFsdWUgOiB0b0NsYXNzU3RyaW5nO1xuICAgICAgICB2YXIgd2F0Y2hFeHByZXNzaW9uID0gJHBhcnNlKGV4cHJlc3Npb24sIHdhdGNoSW50ZXJjZXB0b3IpO1xuICAgICAgICB2YXIgd2F0Y2hBY3Rpb24gPSBpc09uZVRpbWUgPyBuZ0NsYXNzT25lVGltZVdhdGNoQWN0aW9uIDogbmdDbGFzc1dhdGNoQWN0aW9uO1xuXG4gICAgICAgIHZhciBjbGFzc0NvdW50cyA9IGVsZW1lbnQuZGF0YSgnJGNsYXNzQ291bnRzJyk7XG4gICAgICAgIHZhciBvbGRNb2R1bG8gPSB0cnVlO1xuICAgICAgICB2YXIgb2xkQ2xhc3NTdHJpbmc7XG5cbiAgICAgICAgaWYgKCFjbGFzc0NvdW50cykge1xuICAgICAgICAgIC8vIFVzZSBjcmVhdGVNYXAoKSB0byBwcmV2ZW50IGNsYXNzIGFzc3VtcHRpb25zIGludm9sdmluZyBwcm9wZXJ0eVxuICAgICAgICAgIC8vIG5hbWVzIGluIE9iamVjdC5wcm90b3R5cGVcbiAgICAgICAgICBjbGFzc0NvdW50cyA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGVsZW1lbnQuZGF0YSgnJGNsYXNzQ291bnRzJywgY2xhc3NDb3VudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hbWUgIT09ICduZ0NsYXNzJykge1xuICAgICAgICAgIGlmICghaW5kZXhXYXRjaEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGluZGV4V2F0Y2hFeHByZXNzaW9uID0gJHBhcnNlKCckaW5kZXgnLCBmdW5jdGlvbiBtb2R1bG9Ud28oJGluZGV4KSB7XG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgICAgICAgIHJldHVybiAkaW5kZXggJiAxO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGluZGV4V2F0Y2hFeHByZXNzaW9uLCBuZ0NsYXNzSW5kZXhXYXRjaEFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kd2F0Y2god2F0Y2hFeHByZXNzaW9uLCB3YXRjaEFjdGlvbiwgaXNPbmVUaW1lKTtcblxuICAgICAgICBmdW5jdGlvbiBhZGRDbGFzc2VzKGNsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgY2xhc3NTdHJpbmcgPSBkaWdlc3RDbGFzc0NvdW50cyhzcGxpdChjbGFzc1N0cmluZyksIDEpO1xuICAgICAgICAgIGF0dHIuJGFkZENsYXNzKGNsYXNzU3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoY2xhc3NTdHJpbmcpIHtcbiAgICAgICAgICBjbGFzc1N0cmluZyA9IGRpZ2VzdENsYXNzQ291bnRzKHNwbGl0KGNsYXNzU3RyaW5nKSwgLTEpO1xuICAgICAgICAgIGF0dHIuJHJlbW92ZUNsYXNzKGNsYXNzU3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NTdHJpbmcsIG5ld0NsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgdmFyIG9sZENsYXNzQXJyYXkgPSBzcGxpdChvbGRDbGFzc1N0cmluZyk7XG4gICAgICAgICAgdmFyIG5ld0NsYXNzQXJyYXkgPSBzcGxpdChuZXdDbGFzc1N0cmluZyk7XG5cbiAgICAgICAgICB2YXIgdG9SZW1vdmVBcnJheSA9IGFycmF5RGlmZmVyZW5jZShvbGRDbGFzc0FycmF5LCBuZXdDbGFzc0FycmF5KTtcbiAgICAgICAgICB2YXIgdG9BZGRBcnJheSA9IGFycmF5RGlmZmVyZW5jZShuZXdDbGFzc0FycmF5LCBvbGRDbGFzc0FycmF5KTtcblxuICAgICAgICAgIHZhciB0b1JlbW92ZVN0cmluZyA9IGRpZ2VzdENsYXNzQ291bnRzKHRvUmVtb3ZlQXJyYXksIC0xKTtcbiAgICAgICAgICB2YXIgdG9BZGRTdHJpbmcgPSBkaWdlc3RDbGFzc0NvdW50cyh0b0FkZEFycmF5LCAxKTtcblxuICAgICAgICAgIGF0dHIuJGFkZENsYXNzKHRvQWRkU3RyaW5nKTtcbiAgICAgICAgICBhdHRyLiRyZW1vdmVDbGFzcyh0b1JlbW92ZVN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkaWdlc3RDbGFzc0NvdW50cyhjbGFzc0FycmF5LCBjb3VudCkge1xuICAgICAgICAgIHZhciBjbGFzc2VzVG9VcGRhdGUgPSBbXTtcblxuICAgICAgICAgIGZvckVhY2goY2xhc3NBcnJheSwgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBpZiAoY291bnQgPiAwIHx8IGNsYXNzQ291bnRzW2NsYXNzTmFtZV0pIHtcbiAgICAgICAgICAgICAgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSA9IChjbGFzc0NvdW50c1tjbGFzc05hbWVdIHx8IDApICsgY291bnQ7XG4gICAgICAgICAgICAgIGlmIChjbGFzc0NvdW50c1tjbGFzc05hbWVdID09PSArKGNvdW50ID4gMCkpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzVG9VcGRhdGUucHVzaChjbGFzc05hbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gY2xhc3Nlc1RvVXBkYXRlLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5nQ2xhc3NJbmRleFdhdGNoQWN0aW9uKG5ld01vZHVsbykge1xuICAgICAgICAgIC8vIFRoaXMgd2F0Y2gtYWN0aW9uIHNob3VsZCBydW4gYmVmb3JlIHRoZSBgbmdDbGFzc1tPbmVUaW1lXVdhdGNoQWN0aW9uKClgLCB0aHVzIGl0XG4gICAgICAgICAgLy8gYWRkcy9yZW1vdmVzIGBvbGRDbGFzc1N0cmluZ2AuIElmIHRoZSBgbmdDbGFzc2AgZXhwcmVzc2lvbiBoYXMgY2hhbmdlZCBhcyB3ZWxsLCB0aGVcbiAgICAgICAgICAvLyBgbmdDbGFzc1tPbmVUaW1lXVdhdGNoQWN0aW9uKClgIHdpbGwgdXBkYXRlIHRoZSBjbGFzc2VzLlxuICAgICAgICAgIGlmIChuZXdNb2R1bG8gPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBhZGRDbGFzc2VzKG9sZENsYXNzU3RyaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhvbGRDbGFzc1N0cmluZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2xkTW9kdWxvID0gbmV3TW9kdWxvO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmdDbGFzc09uZVRpbWVXYXRjaEFjdGlvbihuZXdDbGFzc1ZhbHVlKSB7XG4gICAgICAgICAgdmFyIG5ld0NsYXNzU3RyaW5nID0gdG9DbGFzc1N0cmluZyhuZXdDbGFzc1ZhbHVlKTtcblxuICAgICAgICAgIGlmIChuZXdDbGFzc1N0cmluZyAhPT0gb2xkQ2xhc3NTdHJpbmcpIHtcbiAgICAgICAgICAgIG5nQ2xhc3NXYXRjaEFjdGlvbihuZXdDbGFzc1N0cmluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmdDbGFzc1dhdGNoQWN0aW9uKG5ld0NsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgaWYgKG9sZE1vZHVsbyA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NTdHJpbmcsIG5ld0NsYXNzU3RyaW5nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvbGRDbGFzc1N0cmluZyA9IG5ld0NsYXNzU3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbiAgLy8gSGVscGVyc1xuICBmdW5jdGlvbiBhcnJheURpZmZlcmVuY2UodG9rZW5zMSwgdG9rZW5zMikge1xuICAgIGlmICghdG9rZW5zMSB8fCAhdG9rZW5zMS5sZW5ndGgpIHJldHVybiBbXTtcbiAgICBpZiAoIXRva2VuczIgfHwgIXRva2VuczIubGVuZ3RoKSByZXR1cm4gdG9rZW5zMTtcblxuICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgIG91dGVyOlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zMS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zMVtpXTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdG9rZW5zMi5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAodG9rZW4gPT09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyO1xuICAgICAgfVxuICAgICAgdmFsdWVzLnB1c2godG9rZW4pO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBmdW5jdGlvbiBzcGxpdChjbGFzc1N0cmluZykge1xuICAgIHJldHVybiBjbGFzc1N0cmluZyAmJiBjbGFzc1N0cmluZy5zcGxpdCgnICcpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9DbGFzc1N0cmluZyhjbGFzc1ZhbHVlKSB7XG4gICAgdmFyIGNsYXNzU3RyaW5nID0gY2xhc3NWYWx1ZTtcblxuICAgIGlmIChpc0FycmF5KGNsYXNzVmFsdWUpKSB7XG4gICAgICBjbGFzc1N0cmluZyA9IGNsYXNzVmFsdWUubWFwKHRvQ2xhc3NTdHJpbmcpLmpvaW4oJyAnKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGNsYXNzVmFsdWUpKSB7XG4gICAgICBjbGFzc1N0cmluZyA9IE9iamVjdC5rZXlzKGNsYXNzVmFsdWUpLlxuICAgICAgICBmaWx0ZXIoZnVuY3Rpb24oa2V5KSB7IHJldHVybiBjbGFzc1ZhbHVlW2tleV07IH0pLlxuICAgICAgICBqb2luKCcgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzU3RyaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9GbGF0VmFsdWUoY2xhc3NWYWx1ZSkge1xuICAgIHZhciBmbGF0VmFsdWUgPSBjbGFzc1ZhbHVlO1xuXG4gICAgaWYgKGlzQXJyYXkoY2xhc3NWYWx1ZSkpIHtcbiAgICAgIGZsYXRWYWx1ZSA9IGNsYXNzVmFsdWUubWFwKHRvRmxhdFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGNsYXNzVmFsdWUpKSB7XG4gICAgICB2YXIgaGFzVW5kZWZpbmVkID0gZmFsc2U7XG5cbiAgICAgIGZsYXRWYWx1ZSA9IE9iamVjdC5rZXlzKGNsYXNzVmFsdWUpLmZpbHRlcihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gY2xhc3NWYWx1ZVtrZXldO1xuXG4gICAgICAgIGlmICghaGFzVW5kZWZpbmVkICYmIGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIGhhc1VuZGVmaW5lZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGhhc1VuZGVmaW5lZCkge1xuICAgICAgICAvLyBQcmV2ZW50IHRoZSBgb25lVGltZUxpdGVyYWxXYXRjaEludGVyY2VwdG9yYCBmcm9tIHVucmVnaXN0ZXJpbmdcbiAgICAgICAgLy8gdGhlIHdhdGNoZXIsIGJ5IGluY2x1ZGluZyBhdCBsZWFzdCBvbmUgYHVuZGVmaW5lZGAgdmFsdWUuXG4gICAgICAgIGZsYXRWYWx1ZS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZsYXRWYWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xhc3NcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBkeW5hbWljYWxseSBzZXQgQ1NTIGNsYXNzZXMgb24gYW4gSFRNTCBlbGVtZW50IGJ5IGRhdGFiaW5kaW5nXG4gKiBhbiBleHByZXNzaW9uIHRoYXQgcmVwcmVzZW50cyBhbGwgY2xhc3NlcyB0byBiZSBhZGRlZC5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIG9wZXJhdGVzIGluIHRocmVlIGRpZmZlcmVudCB3YXlzLCBkZXBlbmRpbmcgb24gd2hpY2ggb2YgdGhyZWUgdHlwZXMgdGhlIGV4cHJlc3Npb25cbiAqIGV2YWx1YXRlcyB0bzpcbiAqXG4gKiAxLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZSBzdHJpbmcgc2hvdWxkIGJlIG9uZSBvciBtb3JlIHNwYWNlLWRlbGltaXRlZCBjbGFzc1xuICogbmFtZXMuXG4gKlxuICogMi4gSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGFuIG9iamVjdCwgdGhlbiBmb3IgZWFjaCBrZXktdmFsdWUgcGFpciBvZiB0aGVcbiAqIG9iamVjdCB3aXRoIGEgdHJ1dGh5IHZhbHVlIHRoZSBjb3JyZXNwb25kaW5nIGtleSBpcyB1c2VkIGFzIGEgY2xhc3MgbmFtZS5cbiAqXG4gKiAzLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gYXJyYXksIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXkgc2hvdWxkIGVpdGhlciBiZSBhIHN0cmluZyBhcyBpblxuICogdHlwZSAxIG9yIGFuIG9iamVjdCBhcyBpbiB0eXBlIDIuIFRoaXMgbWVhbnMgdGhhdCB5b3UgY2FuIG1peCBzdHJpbmdzIGFuZCBvYmplY3RzIHRvZ2V0aGVyIGluIGFuIGFycmF5XG4gKiB0byBnaXZlIHlvdSBtb3JlIGNvbnRyb2wgb3ZlciB3aGF0IENTUyBjbGFzc2VzIGFwcGVhci4gU2VlIHRoZSBjb2RlIGJlbG93IGZvciBhbiBleGFtcGxlIG9mIHRoaXMuXG4gKlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgd29uJ3QgYWRkIGR1cGxpY2F0ZSBjbGFzc2VzIGlmIGEgcGFydGljdWxhciBjbGFzcyB3YXMgYWxyZWFkeSBzZXQuXG4gKlxuICogV2hlbiB0aGUgZXhwcmVzc2lvbiBjaGFuZ2VzLCB0aGUgcHJldmlvdXNseSBhZGRlZCBjbGFzc2VzIGFyZSByZW1vdmVkIGFuZCBvbmx5IHRoZW4gYXJlIHRoZVxuICogbmV3IGNsYXNzZXMgYWRkZWQuXG4gKlxuICogQGtub3duSXNzdWVcbiAqIFlvdSBzaG91bGQgbm90IHVzZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9ufSBpbiB0aGUgdmFsdWUgb2YgdGhlIGBjbGFzc2BcbiAqIGF0dHJpYnV0ZSwgd2hlbiB1c2luZyB0aGUgYG5nQ2xhc3NgIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50LlxuICogU2VlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uI2tub3duLWlzc3VlcyBoZXJlfSBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2FkZENsYXNzIGFkZENsYXNzfSAgICAgICB8IGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyBhcHBsaWVkIHRvIHRoZSBlbGVtZW50ICAgfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjcmVtb3ZlQ2xhc3MgcmVtb3ZlQ2xhc3N9IHwganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCB8XG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3Mge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdFxuICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzc1xuICogICBuYW1lcywgYW4gYXJyYXksIG9yIGEgbWFwIG9mIGNsYXNzIG5hbWVzIHRvIGJvb2xlYW4gdmFsdWVzLiBJbiB0aGUgY2FzZSBvZiBhIG1hcCwgdGhlXG4gKiAgIG5hbWVzIG9mIHRoZSBwcm9wZXJ0aWVzIHdob3NlIHZhbHVlcyBhcmUgdHJ1dGh5IHdpbGwgYmUgYWRkZWQgYXMgY3NzIGNsYXNzZXMgdG8gdGhlXG4gKiAgIGVsZW1lbnQuXG4gKlxuICogQGV4YW1wbGUgRXhhbXBsZSB0aGF0IGRlbW9uc3RyYXRlcyBiYXNpYyBiaW5kaW5ncyB2aWEgbmdDbGFzcyBkaXJlY3RpdmUuXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY2xhc3NcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIntzdHJpa2U6IGRlbGV0ZWQsIGJvbGQ6IGltcG9ydGFudCwgJ2hhcy1lcnJvcic6IGVycm9yfVwiPk1hcCBTeW50YXggRXhhbXBsZTwvcD5cbiAgICAgICA8bGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiZGVsZXRlZFwiPlxuICAgICAgICAgIGRlbGV0ZWQgKGFwcGx5IFwic3RyaWtlXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImltcG9ydGFudFwiPlxuICAgICAgICAgIGltcG9ydGFudCAoYXBwbHkgXCJib2xkXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImVycm9yXCI+XG4gICAgICAgICAgZXJyb3IgKGFwcGx5IFwiaGFzLWVycm9yXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD5cbiAgICAgICA8aHI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJzdHlsZVwiPlVzaW5nIFN0cmluZyBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzdHlsZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCBzdHJpa2UgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQgc3RyaWtlIHJlZFwiPlxuICAgICAgIDxocj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIltzdHlsZTEsIHN0eWxlMiwgc3R5bGUzXVwiPlVzaW5nIEFycmF5IFN5bnRheDwvcD5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTFcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiPjxicj5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTJcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCAyXCI+PGJyPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlM1wiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkIDNcIj48YnI+XG4gICAgICAgPGhyPlxuICAgICAgIDxwIG5nLWNsYXNzPVwiW3N0eWxlNCwge29yYW5nZTogd2FybmluZ31dXCI+VXNpbmcgQXJyYXkgYW5kIE1hcCBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGU0XCIgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2VcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlXCI+PGJyPlxuICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJ3YXJuaW5nXCI+IHdhcm5pbmcgKGFwcGx5IFwib3JhbmdlXCIgY2xhc3MpPC9sYWJlbD5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLnN0cmlrZSB7XG4gICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xuICAgICAgIH1cbiAgICAgICAuYm9sZCB7XG4gICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgIH1cbiAgICAgICAucmVkIHtcbiAgICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICB9XG4gICAgICAgLmhhcy1lcnJvciB7XG4gICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHllbGxvdztcbiAgICAgICB9XG4gICAgICAgLm9yYW5nZSB7XG4gICAgICAgICAgIGNvbG9yOiBvcmFuZ2U7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgcHMgPSBlbGVtZW50LmFsbChieS5jc3MoJ3AnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGxldCB5b3UgdG9nZ2xlIHRoZSBjbGFzcycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC50b01hdGNoKC9ib2xkLyk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC50b01hdGNoKC9oYXMtZXJyb3IvKTtcblxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnaW1wb3J0YW50JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL2JvbGQvKTtcblxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnZXJyb3InKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvaGFzLWVycm9yLyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGxldCB5b3UgdG9nZ2xlIHN0cmluZyBleGFtcGxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDEpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZScpKS5jbGVhcigpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUnKSkuc2VuZEtleXMoJ3JlZCcpO1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ3JlZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ2FycmF5IGV4YW1wbGUgc2hvdWxkIGhhdmUgMyBjbGFzc2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDIpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTEnKSkuc2VuZEtleXMoJ2JvbGQnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMicpKS5zZW5kS2V5cygnc3RyaWtlJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTMnKSkuc2VuZEtleXMoJ3JlZCcpO1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgyKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ2JvbGQgc3RyaWtlIHJlZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ2FycmF5IHdpdGggbWFwIGV4YW1wbGUgc2hvdWxkIGhhdmUgMiBjbGFzc2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTQnKSkuc2VuZEtleXMoJ2JvbGQnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3dhcm5pbmcnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChwcy5sYXN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIG9yYW5nZScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG5cbiAgICMjIEFuaW1hdGlvbnNcblxuICAgVGhlIGV4YW1wbGUgYmVsb3cgZGVtb25zdHJhdGVzIGhvdyB0byBwZXJmb3JtIGFuaW1hdGlvbnMgdXNpbmcgbmdDbGFzcy5cblxuICAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLWNsYXNzXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgaWQ9XCJzZXRidG5cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXRcIiBuZy1jbGljaz1cIm15VmFyPSdteS1jbGFzcydcIj5cbiAgICAgIDxpbnB1dCBpZD1cImNsZWFyYnRuXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15VmFyPScnXCI+XG4gICAgICA8YnI+XG4gICAgICA8c3BhbiBjbGFzcz1cImJhc2UtY2xhc3NcIiBuZy1jbGFzcz1cIm15VmFyXCI+U2FtcGxlIFRleHQ8L3NwYW4+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5iYXNlLWNsYXNzIHtcbiAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgICB9XG5cbiAgICAgICAuYmFzZS1jbGFzcy5teS1jbGFzcyB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgZm9udC1zaXplOjNlbTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ3NldGJ0bicpKS5jbGljaygpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2NsZWFyYnRuJykpLmNsaWNrKCk7XG5cbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cblxuXG4gICAjIyBuZ0NsYXNzIGFuZCBwcmUtZXhpc3RpbmcgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zXG4gICBUaGUgbmdDbGFzcyBkaXJlY3RpdmUgc3RpbGwgc3VwcG9ydHMgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zIGV2ZW4gaWYgdGhleSBkbyBub3QgZm9sbG93IHRoZSBuZ0FuaW1hdGUgQ1NTIG5hbWluZyBzdHJ1Y3R1cmUuXG4gICBVcG9uIGFuaW1hdGlvbiBuZ0FuaW1hdGUgd2lsbCBhcHBseSBzdXBwbGVtZW50YXJ5IENTUyBjbGFzc2VzIHRvIHRyYWNrIHRoZSBzdGFydCBhbmQgZW5kIG9mIGFuIGFuaW1hdGlvbiwgYnV0IHRoaXMgd2lsbCBub3QgaGluZGVyXG4gICBhbnkgcHJlLWV4aXN0aW5nIENTUyB0cmFuc2l0aW9ucyBhbHJlYWR5IG9uIHRoZSBlbGVtZW50LiBUbyBnZXQgYW4gaWRlYSBvZiB3aGF0IGhhcHBlbnMgZHVyaW5nIGEgY2xhc3MtYmFzZWQgYW5pbWF0aW9uLCBiZSBzdXJlXG4gICB0byB2aWV3IHRoZSBzdGVwIGJ5IHN0ZXAgZGV0YWlscyBvZiB7QGxpbmsgJGFuaW1hdGUjYWRkQ2xhc3MgJGFuaW1hdGUuYWRkQ2xhc3N9IGFuZFxuICAge0BsaW5rICRhbmltYXRlI3JlbW92ZUNsYXNzICRhbmltYXRlLnJlbW92ZUNsYXNzfS5cbiAqL1xudmFyIG5nQ2xhc3NEaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnJywgdHJ1ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc09kZFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCB0aGV5IHdvcmsgaW5cbiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZSBlZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gdGhlIHNjb3BlIG9mIGFuXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fS5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzc09kZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGUgcmVzdWx0XG4gKiAgIG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzIG5hbWVzIG9yIGFuIGFycmF5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY2xhc3Mtb2RkXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NPZGREaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnT2RkJywgMCk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc0V2ZW5cbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZVxuICogICByZXN1bHQgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3MgbmFtZXMgb3IgYW4gYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1jbGFzcy1ldmVuXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19ICZuYnNwOyAmbmJzcDsgJm5ic3A7XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NFdmVuRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ0V2ZW4nLCAxKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Nsb2FrXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGlzIHVzZWQgdG8gcHJldmVudCB0aGUgQW5ndWxhciBodG1sIHRlbXBsYXRlIGZyb20gYmVpbmcgYnJpZWZseVxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgKHVuY29tcGlsZWQpIGZvcm0gd2hpbGUgeW91ciBhcHBsaWNhdGlvbiBpcyBsb2FkaW5nLiBVc2UgdGhpc1xuICogZGlyZWN0aXZlIHRvIGF2b2lkIHRoZSB1bmRlc2lyYWJsZSBmbGlja2VyIGVmZmVjdCBjYXVzZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGUgZGlzcGxheS5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIHRvIHRoZSBgPGJvZHk+YCBlbGVtZW50LCBidXQgdGhlIHByZWZlcnJlZCB1c2FnZSBpcyB0byBhcHBseVxuICogbXVsdGlwbGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZXMgdG8gc21hbGwgcG9ydGlvbnMgb2YgdGhlIHBhZ2UgdG8gcGVybWl0IHByb2dyZXNzaXZlIHJlbmRlcmluZ1xuICogb2YgdGhlIGJyb3dzZXIgdmlldy5cbiAqXG4gKiBgbmdDbG9ha2Agd29ya3MgaW4gY29vcGVyYXRpb24gd2l0aCB0aGUgZm9sbG93aW5nIGNzcyBydWxlIGVtYmVkZGVkIHdpdGhpbiBgYW5ndWxhci5qc2AgYW5kXG4gKiBgYW5ndWxhci5taW4uanNgLlxuICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gKlxuICogYGBgY3NzXG4gKiBbbmdcXDpjbG9ha10sIFtuZy1jbG9ha10sIFtkYXRhLW5nLWNsb2FrXSwgW3gtbmctY2xvYWtdLCAubmctY2xvYWssIC54LW5nLWNsb2FrIHtcbiAqICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGlzIGNzcyBydWxlIGlzIGxvYWRlZCBieSB0aGUgYnJvd3NlciwgYWxsIGh0bWwgZWxlbWVudHMgKGluY2x1ZGluZyB0aGVpciBjaGlsZHJlbikgdGhhdFxuICogYXJlIHRhZ2dlZCB3aXRoIHRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGFyZSBoaWRkZW4uIFdoZW4gQW5ndWxhciBlbmNvdW50ZXJzIHRoaXMgZGlyZWN0aXZlXG4gKiBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZSBpdCBkZWxldGVzIHRoZSBgbmdDbG9ha2AgZWxlbWVudCBhdHRyaWJ1dGUsIG1ha2luZ1xuICogdGhlIGNvbXBpbGVkIGVsZW1lbnQgdmlzaWJsZS5cbiAqXG4gKiBGb3IgdGhlIGJlc3QgcmVzdWx0LCB0aGUgYGFuZ3VsYXIuanNgIHNjcmlwdCBtdXN0IGJlIGxvYWRlZCBpbiB0aGUgaGVhZCBzZWN0aW9uIG9mIHRoZSBodG1sXG4gKiBkb2N1bWVudDsgYWx0ZXJuYXRpdmVseSwgdGhlIGNzcyBydWxlIGFib3ZlIG11c3QgYmUgaW5jbHVkZWQgaW4gdGhlIGV4dGVybmFsIHN0eWxlc2hlZXQgb2YgdGhlXG4gKiBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNsb2FrXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTFcIiBuZy1jbG9haz57eyAnaGVsbG8nIH19PC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTJcIiBjbGFzcz1cIm5nLWNsb2FrXCI+e3sgJ3dvcmxkJyB9fTwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIHJlbW92ZSB0aGUgdGVtcGxhdGUgZGlyZWN0aXZlIGFuZCBjc3MgY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUxJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS5cbiAgICAgICAgICAgdG9CZU51bGwoKTtcbiAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUyJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS5cbiAgICAgICAgICAgdG9CZU51bGwoKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xudmFyIG5nQ2xvYWtEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICBhdHRyLiRzZXQoJ25nQ2xvYWsnLCB1bmRlZmluZWQpO1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ25nLWNsb2FrJyk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ29udHJvbGxlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBhdHRhY2hlcyBhIGNvbnRyb2xsZXIgY2xhc3MgdG8gdGhlIHZpZXcuIFRoaXMgaXMgYSBrZXkgYXNwZWN0IG9mIGhvdyBhbmd1bGFyXG4gKiBzdXBwb3J0cyB0aGUgcHJpbmNpcGxlcyBiZWhpbmQgdGhlIE1vZGVsLVZpZXctQ29udHJvbGxlciBkZXNpZ24gcGF0dGVybi5cbiAqXG4gKiBNVkMgY29tcG9uZW50cyBpbiBhbmd1bGFyOlxuICpcbiAqICogTW9kZWwg4oCUIE1vZGVscyBhcmUgdGhlIHByb3BlcnRpZXMgb2YgYSBzY29wZTsgc2NvcGVzIGFyZSBhdHRhY2hlZCB0byB0aGUgRE9NIHdoZXJlIHNjb3BlIHByb3BlcnRpZXNcbiAqICAgYXJlIGFjY2Vzc2VkIHRocm91Z2ggYmluZGluZ3MuXG4gKiAqIFZpZXcg4oCUIFRoZSB0ZW1wbGF0ZSAoSFRNTCB3aXRoIGRhdGEgYmluZGluZ3MpIHRoYXQgaXMgcmVuZGVyZWQgaW50byB0aGUgVmlldy5cbiAqICogQ29udHJvbGxlciDigJQgVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgYSBDb250cm9sbGVyIGNsYXNzOyB0aGUgY2xhc3MgY29udGFpbnMgYnVzaW5lc3NcbiAqICAgbG9naWMgYmVoaW5kIHRoZSBhcHBsaWNhdGlvbiB0byBkZWNvcmF0ZSB0aGUgc2NvcGUgd2l0aCBmdW5jdGlvbnMgYW5kIHZhbHVlc1xuICpcbiAqIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gYXR0YWNoIGNvbnRyb2xsZXJzIHRvIHRoZSBET00gYnkgZGVjbGFyaW5nIGl0IGluIGEgcm91dGUgZGVmaW5pdGlvblxuICogdmlhIHRoZSB7QGxpbmsgbmdSb3V0ZS4kcm91dGUgJHJvdXRlfSBzZXJ2aWNlLiBBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIGRlY2xhcmUgdGhlIGNvbnRyb2xsZXJcbiAqIGFnYWluIHVzaW5nIGBuZy1jb250cm9sbGVyYCBpbiB0aGUgdGVtcGxhdGUgaXRzZWxmLiAgVGhpcyB3aWxsIGNhdXNlIHRoZSBjb250cm9sbGVyIHRvIGJlIGF0dGFjaGVkXG4gKiBhbmQgZXhlY3V0ZWQgdHdpY2UuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA1MDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb250cm9sbGVyIE5hbWUgb2YgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiByZWdpc3RlcmVkIHdpdGggdGhlIGN1cnJlbnRcbiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyICRjb250cm9sbGVyUHJvdmlkZXJ9IG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259XG4gKiB0aGF0IG9uIHRoZSBjdXJyZW50IHNjb3BlIGV2YWx1YXRlcyB0byBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICpcbiAqIFRoZSBjb250cm9sbGVyIGluc3RhbmNlIGNhbiBiZSBwdWJsaXNoZWQgaW50byBhIHNjb3BlIHByb3BlcnR5IGJ5IHNwZWNpZnlpbmdcbiAqIGBuZy1jb250cm9sbGVyPVwiYXMgcHJvcGVydHlOYW1lXCJgLlxuICpcbiAqIElmIHRoZSBjdXJyZW50IGAkY29udHJvbGxlclByb3ZpZGVyYCBpcyBjb25maWd1cmVkIHRvIHVzZSBnbG9iYWxzICh2aWFcbiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscyBgJGNvbnRyb2xsZXJQcm92aWRlci5hbGxvd0dsb2JhbHMoKWAgfSksIHRoaXMgbWF5XG4gKiBhbHNvIGJlIHRoZSBuYW1lIG9mIGEgZ2xvYmFsbHkgYWNjZXNzaWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiAoZGVwcmVjYXRlZCwgbm90IHJlY29tbWVuZGVkKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBpcyBhIHNpbXBsZSBmb3JtIGZvciBlZGl0aW5nIHVzZXIgY29udGFjdCBpbmZvcm1hdGlvbi4gQWRkaW5nLCByZW1vdmluZywgY2xlYXJpbmcsIGFuZFxuICogZ3JlZXRpbmcgYXJlIG1ldGhvZHMgZGVjbGFyZWQgb24gdGhlIGNvbnRyb2xsZXIgKHNlZSBzb3VyY2UgdGFiKS4gVGhlc2UgbWV0aG9kcyBjYW5cbiAqIGVhc2lseSBiZSBjYWxsZWQgZnJvbSB0aGUgYW5ndWxhciBtYXJrdXAuIEFueSBjaGFuZ2VzIHRvIHRoZSBkYXRhIGFyZSBhdXRvbWF0aWNhbGx5IHJlZmxlY3RlZFxuICogaW4gdGhlIFZpZXcgd2l0aG91dCB0aGUgbmVlZCBmb3IgYSBtYW51YWwgdXBkYXRlLlxuICpcbiAqIFR3byBkaWZmZXJlbnQgZGVjbGFyYXRpb24gc3R5bGVzIGFyZSBpbmNsdWRlZCBiZWxvdzpcbiAqXG4gKiAqIG9uZSBiaW5kcyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIGRpcmVjdGx5IG9udG8gdGhlIGNvbnRyb2xsZXIgdXNpbmcgYHRoaXNgOlxuICogYG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIxIGFzIHNldHRpbmdzXCJgXG4gKiAqIG9uZSBpbmplY3RzIGAkc2NvcGVgIGludG8gdGhlIGNvbnRyb2xsZXI6XG4gKiBgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjJcImBcbiAqXG4gKiBUaGUgc2Vjb25kIG9wdGlvbiBpcyBtb3JlIGNvbW1vbiBpbiB0aGUgQW5ndWxhciBjb21tdW5pdHksIGFuZCBpcyBnZW5lcmFsbHkgdXNlZCBpbiBib2lsZXJwbGF0ZXNcbiAqIGFuZCBpbiB0aGlzIGd1aWRlLiBIb3dldmVyLCB0aGVyZSBhcmUgYWR2YW50YWdlcyB0byBiaW5kaW5nIHByb3BlcnRpZXMgZGlyZWN0bHkgdG8gdGhlIGNvbnRyb2xsZXJcbiAqIGFuZCBhdm9pZGluZyBzY29wZS5cbiAqXG4gKiAqIFVzaW5nIGBjb250cm9sbGVyIGFzYCBtYWtlcyBpdCBvYnZpb3VzIHdoaWNoIGNvbnRyb2xsZXIgeW91IGFyZSBhY2Nlc3NpbmcgaW4gdGhlIHRlbXBsYXRlIHdoZW5cbiAqIG11bHRpcGxlIGNvbnRyb2xsZXJzIGFwcGx5IHRvIGFuIGVsZW1lbnQuXG4gKiAqIElmIHlvdSBhcmUgd3JpdGluZyB5b3VyIGNvbnRyb2xsZXJzIGFzIGNsYXNzZXMgeW91IGhhdmUgZWFzaWVyIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBhbmRcbiAqIG1ldGhvZHMsIHdoaWNoIHdpbGwgYXBwZWFyIG9uIHRoZSBzY29wZSwgZnJvbSBpbnNpZGUgdGhlIGNvbnRyb2xsZXIgY29kZS5cbiAqICogU2luY2UgdGhlcmUgaXMgYWx3YXlzIGEgYC5gIGluIHRoZSBiaW5kaW5ncywgeW91IGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgcHJvdG90eXBhbFxuICogaW5oZXJpdGFuY2UgbWFza2luZyBwcmltaXRpdmVzLlxuICpcbiAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdGhlIGBjb250cm9sbGVyIGFzYCBzeW50YXguXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlckFzXCIgbW9kdWxlPVwiY29udHJvbGxlckFzRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPGRpdiBpZD1cImN0cmwtYXMtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMSBhcyBzZXR0aW5nc1wiPlxuICogICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzZXR0aW5ncy5uYW1lXCIvPjwvbGFiZWw+XG4gKiAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5ncmVldCgpXCI+Z3JlZXQ8L2J1dHRvbj48YnIvPlxuICogICAgICBDb250YWN0OlxuICogICAgICA8dWw+XG4gKiAgICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHNcIj5cbiAqICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIiBhcmlhLWxhYmVsPVwiQ29udGFjdCBtZXRob2RcIiBpZD1cInNlbGVjdF97eyRpbmRleH19XCI+XG4gKiAgICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+XG4gKiAgICAgICAgICAgICA8b3B0aW9uPmVtYWlsPC9vcHRpb24+XG4gKiAgICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiY29udGFjdC52YWx1ZVwiIGFyaWEtbGFiZWxsZWRieT1cInNlbGVjdF97eyRpbmRleH19XCIgLz5cbiAqICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5jbGVhckNvbnRhY3QoY29udGFjdClcIj5jbGVhcjwvYnV0dG9uPlxuICogICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNldHRpbmdzLnJlbW92ZUNvbnRhY3QoY29udGFjdClcIiBhcmlhLWxhYmVsPVwiUmVtb3ZlXCI+WDwvYnV0dG9uPlxuICogICAgICAgIDwvbGk+XG4gKiAgICAgICAgPGxpPjxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5hZGRDb250YWN0KClcIj5hZGQ8L2J1dHRvbj48L2xpPlxuICogICAgIDwvdWw+XG4gKiAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICBhbmd1bGFyLm1vZHVsZSgnY29udHJvbGxlckFzRXhhbXBsZScsIFtdKVxuICogICAgICAuY29udHJvbGxlcignU2V0dGluZ3NDb250cm9sbGVyMScsIFNldHRpbmdzQ29udHJvbGxlcjEpO1xuICpcbiAqICAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcjEoKSB7XG4gKiAgICAgIHRoaXMubmFtZSA9ICdKb2huIFNtaXRoJztcbiAqICAgICAgdGhpcy5jb250YWN0cyA9IFtcbiAqICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSxcbiAqICAgICAgICB7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICdqb2huLnNtaXRoQGV4YW1wbGUub3JnJ31cbiAqICAgICAgXTtcbiAqICAgIH1cbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICogICAgICBhbGVydCh0aGlzLm5hbWUpO1xuICogICAgfTtcbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgIHRoaXMuY29udGFjdHMucHVzaCh7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICd5b3VybmFtZUBleGFtcGxlLm9yZyd9KTtcbiAqICAgIH07XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkge1xuICogICAgIHZhciBpbmRleCA9IHRoaXMuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICB9O1xuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJztcbiAqICAgICAgY29udGFjdC52YWx1ZSA9ICcnO1xuICogICAgfTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyIGFzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1hcy1leG1wbCcpKTtcbiAqICAgICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5Lm1vZGVsKCdzZXR0aW5ncy5uYW1lJykpXG4gKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICpcbiAqICAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMCkpO1xuICogICAgICAgdmFyIHNlY29uZFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7XG4gKlxuICogICAgICAgZXhwZWN0KHNlY29uZFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpO1xuICpcbiAqICAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJycpO1xuICpcbiAqICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygyKSlcbiAqICAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKVxuICogICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBcImF0dGFjaCB0byBgJHNjb3BlYFwiIHN0eWxlIG9mIGNvbnRyb2xsZXIuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlclwiIG1vZHVsZT1cImNvbnRyb2xsZXJFeGFtcGxlXCI+XG4gKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgPGRpdiBpZD1cImN0cmwtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMlwiPlxuICogICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIi8+PC9sYWJlbD5cbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZ3JlZXQoKVwiPmdyZWV0PC9idXR0b24+PGJyLz5cbiAqICAgICBDb250YWN0OlxuICogICAgIDx1bD5cbiAqICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIiBpZD1cInNlbGVjdF97eyRpbmRleH19XCI+XG4gKiAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj5cbiAqICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjb250YWN0LnZhbHVlXCIgYXJpYS1sYWJlbGxlZGJ5PVwic2VsZWN0X3t7JGluZGV4fX1cIiAvPlxuICogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2J1dHRvbj5cbiAqICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInJlbW92ZUNvbnRhY3QoY29udGFjdClcIj5YPC9idXR0b24+XG4gKiAgICAgICA8L2xpPlxuICogICAgICAgPGxpPlsgPGJ1dHRvbiBuZy1jbGljaz1cImFkZENvbnRhY3QoKVwiPmFkZDwvYnV0dG9uPiBdPC9saT5cbiAqICAgIDwvdWw+XG4gKiAgIDwvZGl2PlxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgIGFuZ3VsYXIubW9kdWxlKCdjb250cm9sbGVyRXhhbXBsZScsIFtdKVxuICogICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIyJywgWyckc2NvcGUnLCBTZXR0aW5nc0NvbnRyb2xsZXIyXSk7XG4gKlxuICogICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIyKCRzY29wZSkge1xuICogICAgICRzY29wZS5uYW1lID0gJ0pvaG4gU21pdGgnO1xuICogICAgICRzY29wZS5jb250YWN0cyA9IFtcbiAqICAgICAgIHt0eXBlOidwaG9uZScsIHZhbHVlOic0MDggNTU1IDEyMTInfSxcbiAqICAgICAgIHt0eXBlOidlbWFpbCcsIHZhbHVlOidqb2huLnNtaXRoQGV4YW1wbGUub3JnJ31cbiAqICAgICBdO1xuICpcbiAqICAgICAkc2NvcGUuZ3JlZXQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgIGFsZXJ0KCRzY29wZS5uYW1lKTtcbiAqICAgICB9O1xuICpcbiAqICAgICAkc2NvcGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnB1c2goe3R5cGU6J2VtYWlsJywgdmFsdWU6J3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pO1xuICogICAgIH07XG4gKlxuICogICAgICRzY29wZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7XG4gKiAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgJHNjb3BlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7XG4gKiAgICAgICBjb250YWN0LnZhbHVlID0gJyc7XG4gKiAgICAgfTtcbiAqICAgfVxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuaWQoJ2N0cmwtZXhtcGwnKSk7XG4gKlxuICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJ0pvaG4gU21pdGgnKTtcbiAqXG4gKiAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygwKSk7XG4gKiAgICAgIHZhciBzZWNvbmRSZXBlYXQgPVxuICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICogICAgICBleHBlY3Qoc2Vjb25kUmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTtcbiAqXG4gKiAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCcnKTtcbiAqXG4gKiAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDIpKVxuICogICAgICAgICAgLmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTtcbiAqICAgIH0pO1xuICogIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuXG4gKi9cbnZhciBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUgPSBbZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnQCcsXG4gICAgcHJpb3JpdHk6IDUwMFxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDc3BcbiAqXG4gKiBAcmVzdHJpY3QgQVxuICogQGVsZW1lbnQgQU5ZXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBBbmd1bGFyIGhhcyBzb21lIGZlYXR1cmVzIHRoYXQgY2FuIGNvbmZsaWN0IHdpdGggY2VydGFpbiByZXN0cmljdGlvbnMgdGhhdCBhcmUgYXBwbGllZCB3aGVuIHVzaW5nXG4gKiBbQ1NQIChDb250ZW50IFNlY3VyaXR5IFBvbGljeSldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1NlY3VyaXR5L0NTUCkgcnVsZXMuXG4gKlxuICogSWYgeW91IGludGVuZCB0byBpbXBsZW1lbnQgQ1NQIHdpdGggdGhlc2UgcnVsZXMgdGhlbiB5b3UgbXVzdCB0ZWxsIEFuZ3VsYXIgbm90IHRvIHVzZSB0aGVzZVxuICogZmVhdHVyZXMuXG4gKlxuICogVGhpcyBpcyBuZWNlc3Nhcnkgd2hlbiBkZXZlbG9waW5nIHRoaW5ncyBsaWtlIEdvb2dsZSBDaHJvbWUgRXh0ZW5zaW9ucyBvciBVbml2ZXJzYWwgV2luZG93cyBBcHBzLlxuICpcbiAqXG4gKiBUaGUgZm9sbG93aW5nIGRlZmF1bHQgcnVsZXMgaW4gQ1NQIGFmZmVjdCBBbmd1bGFyOlxuICpcbiAqICogVGhlIHVzZSBvZiBgZXZhbCgpYCwgYEZ1bmN0aW9uKHN0cmluZylgIGFuZCBzaW1pbGFyIGZ1bmN0aW9ucyB0byBkeW5hbWljYWxseSBjcmVhdGUgYW5kIGV4ZWN1dGVcbiAqIGNvZGUgZnJvbSBzdHJpbmdzIGlzIGZvcmJpZGRlbi4gQW5ndWxhciBtYWtlcyB1c2Ugb2YgdGhpcyBpbiB0aGUge0BsaW5rICRwYXJzZX0gc2VydmljZSB0b1xuICogcHJvdmlkZSBhIDMwJSBpbmNyZWFzZSBpbiB0aGUgc3BlZWQgb2YgZXZhbHVhdGluZyBBbmd1bGFyIGV4cHJlc3Npb25zLiAoVGhpcyBDU1AgcnVsZSBjYW4gYmVcbiAqIGRpc2FibGVkIHdpdGggdGhlIENTUCBrZXl3b3JkIGB1bnNhZmUtZXZhbGAsIGJ1dCBpdCBpcyBnZW5lcmFsbHkgbm90IHJlY29tbWVuZGVkIGFzIGl0IHdvdWxkXG4gKiB3ZWFrZW4gdGhlIHByb3RlY3Rpb25zIG9mZmVyZWQgYnkgQ1NQLilcbiAqXG4gKiAqIFRoZSB1c2Ugb2YgaW5saW5lIHJlc291cmNlcywgc3VjaCBhcyBpbmxpbmUgYDxzY3JpcHQ+YCBhbmQgYDxzdHlsZT5gIGVsZW1lbnRzLCBhcmUgZm9yYmlkZGVuLlxuICogVGhpcyBwcmV2ZW50cyBhcHBzIGZyb20gaW5qZWN0aW5nIGN1c3RvbSBzdHlsZXMgZGlyZWN0bHkgaW50byB0aGUgZG9jdW1lbnQuIEFuZ3VsYXIgbWFrZXMgdXNlIG9mXG4gKiB0aGlzIHRvIGluY2x1ZGUgc29tZSBDU1MgcnVsZXMgKGUuZy4ge0BsaW5rIG5nQ2xvYWt9IGFuZCB7QGxpbmsgbmdIaWRlfSkuIFRvIG1ha2UgdGhlc2VcbiAqIGRpcmVjdGl2ZXMgd29yayB3aGVuIGEgQ1NQIHJ1bGUgaXMgYmxvY2tpbmcgaW5saW5lIHN0eWxlcywgeW91IG11c3QgbGluayB0byB0aGUgYGFuZ3VsYXItY3NwLmNzc2BcbiAqIGluIHlvdXIgSFRNTCBtYW51YWxseS4gKFRoaXMgQ1NQIHJ1bGUgY2FuIGJlIGRpc2FibGVkIHdpdGggdGhlIENTUCBrZXl3b3JkIGB1bnNhZmUtaW5saW5lYCwgYnV0XG4gKiBpdCBpcyBnZW5lcmFsbHkgbm90IHJlY29tbWVuZGVkIGFzIGl0IHdvdWxkIHdlYWtlbiB0aGUgcHJvdGVjdGlvbnMgb2ZmZXJlZCBieSBDU1AuKVxuICpcbiAqIElmIHlvdSBkbyBub3QgcHJvdmlkZSBgbmdDc3BgIHRoZW4gQW5ndWxhciB0cmllcyB0byBhdXRvZGV0ZWN0IGlmIENTUCBpcyBibG9ja2luZyBkeW5hbWljIGNvZGVcbiAqIGNyZWF0aW9uIGZyb20gc3RyaW5ncyAoZS5nLiwgYHVuc2FmZS1ldmFsYCBub3Qgc3BlY2lmaWVkIGluIENTUCBoZWFkZXIpIGFuZCBhdXRvbWF0aWNhbGx5XG4gKiBkZWFjdGl2YXRlcyB0aGlzIGZlYXR1cmUgaW4gdGhlIHtAbGluayAkcGFyc2V9IHNlcnZpY2UuIFRoaXMgYXV0b2RldGVjdGlvbiwgaG93ZXZlciwgdHJpZ2dlcnMgYVxuICogQ1NQIGVycm9yIHRvIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZTpcbiAqXG4gKiBgYGBcbiAqIFJlZnVzZWQgdG8gZXZhbHVhdGUgYSBzdHJpbmcgYXMgSmF2YVNjcmlwdCBiZWNhdXNlICd1bnNhZmUtZXZhbCcgaXMgbm90IGFuIGFsbG93ZWQgc291cmNlIG9mXG4gKiBzY3JpcHQgaW4gdGhlIGZvbGxvd2luZyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBkaXJlY3RpdmU6IFwiZGVmYXVsdC1zcmMgJ3NlbGYnXCIuIE5vdGUgdGhhdFxuICogJ3NjcmlwdC1zcmMnIHdhcyBub3QgZXhwbGljaXRseSBzZXQsIHNvICdkZWZhdWx0LXNyYycgaXMgdXNlZCBhcyBhIGZhbGxiYWNrLlxuICogYGBgXG4gKlxuICogVGhpcyBlcnJvciBpcyBoYXJtbGVzcyBidXQgYW5ub3lpbmcuIFRvIHByZXZlbnQgdGhlIGVycm9yIGZyb20gc2hvd2luZyB1cCwgcHV0IHRoZSBgbmdDc3BgXG4gKiBkaXJlY3RpdmUgb24gYW4gZWxlbWVudCBvZiB0aGUgSFRNTCBkb2N1bWVudCB0aGF0IGFwcGVhcnMgYmVmb3JlIHRoZSBgPHNjcmlwdD5gIHRhZyB0aGF0IGxvYWRzXG4gKiB0aGUgYGFuZ3VsYXIuanNgIGZpbGUuXG4gKlxuICogKk5vdGU6IFRoaXMgZGlyZWN0aXZlIGlzIG9ubHkgYXZhaWxhYmxlIGluIHRoZSBgbmctY3NwYCBhbmQgYGRhdGEtbmctY3NwYCBhdHRyaWJ1dGUgZm9ybS4qXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IHdoaWNoIG9mIHRoZSBDU1AgcmVsYXRlZCBBbmd1bGFyIGZlYXR1cmVzIHNob3VsZCBiZSBkZWFjdGl2YXRlZCBieSBwcm92aWRpbmdcbiAqIGEgdmFsdWUgZm9yIHRoZSBgbmctY3NwYCBhdHRyaWJ1dGUuIFRoZSBvcHRpb25zIGFyZSBhcyBmb2xsb3dzOlxuICpcbiAqICogbm8taW5saW5lLXN0eWxlOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBpbmplY3RpbmcgQ1NTIHN0eWxlcyBpbnRvIHRoZSBET01cbiAqXG4gKiAqIG5vLXVuc2FmZS1ldmFsOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBvcHRpbWl6aW5nICRwYXJzZSB3aXRoIHVuc2FmZSBldmFsIG9mIHN0cmluZ3NcbiAqXG4gKiBZb3UgY2FuIHVzZSB0aGVzZSB2YWx1ZXMgaW4gdGhlIGZvbGxvd2luZyBjb21iaW5hdGlvbnM6XG4gKlxuICpcbiAqICogTm8gZGVjbGFyYXRpb24gbWVhbnMgdGhhdCBBbmd1bGFyIHdpbGwgYXNzdW1lIHRoYXQgeW91IGNhbiBkbyBpbmxpbmUgc3R5bGVzLCBidXQgaXQgd2lsbCBkb1xuICogYSBydW50aW1lIGNoZWNrIGZvciB1bnNhZmUtZXZhbC4gRS5nLiBgPGJvZHk+YC4gVGhpcyBpcyBiYWNrd2FyZGx5IGNvbXBhdGlibGUgd2l0aCBwcmV2aW91c1xuICogdmVyc2lvbnMgb2YgQW5ndWxhci5cbiAqXG4gKiAqIEEgc2ltcGxlIGBuZy1jc3BgIChvciBgZGF0YS1uZy1jc3BgKSBhdHRyaWJ1dGUgd2lsbCB0ZWxsIEFuZ3VsYXIgdG8gZGVhY3RpdmF0ZSBib3RoIGlubGluZVxuICogc3R5bGVzIGFuZCB1bnNhZmUgZXZhbC4gRS5nLiBgPGJvZHkgbmctY3NwPmAuIFRoaXMgaXMgYmFja3dhcmRseSBjb21wYXRpYmxlIHdpdGggcHJldmlvdXNcbiAqIHZlcnNpb25zIG9mIEFuZ3VsYXIuXG4gKlxuICogKiBTcGVjaWZ5aW5nIG9ubHkgYG5vLXVuc2FmZS1ldmFsYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgdXNlIGV2YWwsIGJ1dCB0aGF0IHdlIGNhblxuICogaW5qZWN0IGlubGluZSBzdHlsZXMuIEUuZy4gYDxib2R5IG5nLWNzcD1cIm5vLXVuc2FmZS1ldmFsXCI+YC5cbiAqXG4gKiAqIFNwZWNpZnlpbmcgb25seSBgbm8taW5saW5lLXN0eWxlYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgaW5qZWN0IHN0eWxlcywgYnV0IHRoYXQgd2UgY2FuXG4gKiBydW4gZXZhbCAtIG5vIGF1dG9tYXRpYyBjaGVjayBmb3IgdW5zYWZlIGV2YWwgd2lsbCBvY2N1ci4gRS5nLiBgPGJvZHkgbmctY3NwPVwibm8taW5saW5lLXN0eWxlXCI+YFxuICpcbiAqICogU3BlY2lmeWluZyBib3RoIGBuby11bnNhZmUtZXZhbGAgYW5kIGBuby1pbmxpbmUtc3R5bGVgIHRlbGxzIEFuZ3VsYXIgdGhhdCB3ZSBtdXN0IG5vdCBpbmplY3RcbiAqIHN0eWxlcyBub3IgdXNlIGV2YWwsIHdoaWNoIGlzIHRoZSBzYW1lIGFzIGFuIGVtcHR5OiBuZy1jc3AuXG4gKiBFLmcuYDxib2R5IG5nLWNzcD1cIm5vLWlubGluZS1zdHlsZTtuby11bnNhZmUtZXZhbFwiPmBcbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBhcHBseSB0aGUgYG5nQ3NwYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuXG4gICBgYGBodG1sXG4gICAgIDwhZG9jdHlwZSBodG1sPlxuICAgICA8aHRtbCBuZy1hcHAgbmctY3NwPlxuICAgICAuLi5cbiAgICAgLi4uXG4gICAgIDwvaHRtbD5cbiAgIGBgYFxuICAqIEBleGFtcGxlXG4gICAgICA8IS0tIE5vdGU6IHRoZSBgLmNzcGAgc3VmZml4IGluIHRoZSBleGFtcGxlIG5hbWUgdHJpZ2dlcnMgQ1NQIG1vZGUgaW4gb3VyIGh0dHAgc2VydmVyISAtLT5cbiAgICAgIDxleGFtcGxlIG5hbWU9XCJleGFtcGxlLmNzcFwiIG1vZHVsZT1cImNzcEV4YW1wbGVcIiBuZy1jc3A9XCJ0cnVlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkNvbnRyb2xsZXIgYXMgY3RybFwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImN0cmwuaW5jKClcIiBpZD1cImluY1wiPkluY3JlbWVudDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8c3BhbiBpZD1cImNvdW50ZXJcIj5cbiAgICAgICAgICAgICAgICB7e2N0cmwuY291bnRlcn19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY3RybC5ldmlsKClcIiBpZD1cImV2aWxcIj5FdmlsPC9idXR0b24+XG4gICAgICAgICAgICAgIDxzcGFuIGlkPVwiZXZpbEVycm9yXCI+XG4gICAgICAgICAgICAgICAge3tjdHJsLmV2aWxFcnJvcn19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2NzcEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBmdW5jdGlvbiBNYWluQ29udHJvbGxlcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXIrKztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuZXZpbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZXZhbCgnMSsyJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2aWxFcnJvciA9IGUubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHV0aWwsIHdlYmRyaXZlcjtcblxuICAgICAgICAgIHZhciBpbmNCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbmMnKSk7XG4gICAgICAgICAgdmFyIGNvdW50ZXIgPSBlbGVtZW50KGJ5LmlkKCdjb3VudGVyJykpO1xuICAgICAgICAgIHZhciBldmlsQnRuID0gZWxlbWVudChieS5pZCgnZXZpbCcpKTtcbiAgICAgICAgICB2YXIgZXZpbEVycm9yID0gZWxlbWVudChieS5pZCgnZXZpbEVycm9yJykpO1xuXG4gICAgICAgICAgZnVuY3Rpb24gZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5tYW5hZ2UoKS5sb2dzKCkuZ2V0KCdicm93c2VyJykudGhlbihmdW5jdGlvbihicm93c2VyTG9nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBicm93c2VyTG9nLmZpbHRlcihmdW5jdGlvbihsb2dFbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2dFbnRyeS5sZXZlbC52YWx1ZSA+IHdlYmRyaXZlci5sb2dnaW5nLkxldmVsLldBUk5JTkcudmFsdWU7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gY2xlYXJFcnJvcnMoKSB7XG4gICAgICAgICAgICBnZXRBbmRDbGVhclNldmVyZUVycm9ycygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGV4cGVjdE5vRXJyb3JzKCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKS50aGVuKGZ1bmN0aW9uKGZpbHRlcmVkTG9nKSB7XG4gICAgICAgICAgICAgIGV4cGVjdChmaWx0ZXJlZExvZy5sZW5ndGgpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgICAgIGlmIChmaWx0ZXJlZExvZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYnJvd3NlciBjb25zb2xlIGVycm9yczogJyArIHV0aWwuaW5zcGVjdChmaWx0ZXJlZExvZykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBleHBlY3RFcnJvcihyZWdleCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKS50aGVuKGZ1bmN0aW9uKGZpbHRlcmVkTG9nKSB7XG4gICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBmaWx0ZXJlZExvZy5mb3JFYWNoKGZ1bmN0aW9uKGxvZykge1xuICAgICAgICAgICAgICAgIGlmIChsb2cubWVzc2FnZS5tYXRjaChyZWdleCkpIHtcbiAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBhbiBlcnJvciB0aGF0IG1hdGNoZXMgJyArIHJlZ2V4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG4gICAgICAgICAgICB3ZWJkcml2ZXIgPSByZXF1aXJlKCdzZWxlbml1bS13ZWJkcml2ZXInKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIEZvciBub3csIHdlIG9ubHkgdGVzdCBvbiBDaHJvbWUsXG4gICAgICAgICAgLy8gYXMgU2FmYXJpIGRvZXMgbm90IGxvYWQgdGhlIHBhZ2Ugd2l0aCBQcm90cmFjdG9yJ3MgaW5qZWN0ZWQgc2NyaXB0cyxcbiAgICAgICAgICAvLyBhbmQgRmlyZWZveCB3ZWJkcml2ZXIgYWx3YXlzIGRpc2FibGVzIGNvbnRlbnQgc2VjdXJpdHkgcG9saWN5ICgjNjM1OClcbiAgICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciAhPT0gJ2Nocm9tZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIG5vdCByZXBvcnQgZXJyb3JzIHdoZW4gdGhlIHBhZ2UgaXMgbG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBjbGVhciBlcnJvcnMgc28gd2UgYXJlIG5vdCBkZXBlbmRlbnQgb24gcHJldmlvdXMgdGVzdHNcbiAgICAgICAgICAgIGNsZWFyRXJyb3JzKCk7XG4gICAgICAgICAgICAvLyBOZWVkIHRvIHJlbG9hZCB0aGUgcGFnZSBhcyB0aGUgcGFnZSBpcyBhbHJlYWR5IGxvYWRlZCB3aGVuXG4gICAgICAgICAgICAvLyB3ZSBjb21lIGhlcmVcbiAgICAgICAgICAgIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICBicm93c2VyLmdldCh1cmwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBleHBlY3ROb0Vycm9ycygpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSBleHByZXNzaW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCcwJyk7XG4gICAgICAgICAgICBpbmNCdG4uY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9FcXVhbCgnMScpO1xuICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW5kIHJlcG9ydCBhbiBlcnJvciB3aGVuIHVzaW5nIFwiZXZhbFwiJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBldmlsQnRuLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoZXZpbEVycm9yLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBTZWN1cml0eSBQb2xpY3kvKTtcbiAgICAgICAgICAgIGV4cGVjdEVycm9yKC9Db250ZW50IFNlY3VyaXR5IFBvbGljeS8pO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICovXG5cbi8vIGBuZ0NzcGAgaXMgbm90IGltcGxlbWVudGVkIGFzIGEgcHJvcGVyIGRpcmVjdGl2ZSBhbnkgbW9yZSwgYmVjYXVzZSB3ZSBuZWVkIGl0IGJlIHByb2Nlc3NlZCB3aGlsZVxuLy8gd2UgYm9vdHN0cmFwIHRoZSBhcHAgKGJlZm9yZSBgJHBhcnNlYCBpcyBpbnN0YW50aWF0ZWQpLiBGb3IgdGhpcyByZWFzb24sIHdlIGp1c3QgaGF2ZSB0aGUgYGNzcCgpYFxuLy8gZm4gdGhhdCBsb29rcyBmb3IgdGhlIGBuZy1jc3BgIGF0dHJpYnV0ZSBhbnl3aGVyZSBpbiB0aGUgY3VycmVudCBkb2MuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGlja1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG5nQ2xpY2sgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igd2hlblxuICogYW4gZWxlbWVudCBpcyBjbGlja2VkLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjbGljay4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1jbGlja1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxzcGFuPlxuICAgICAgICBjb3VudDoge3tjb3VudH19XG4gICAgICA8L3NwYW4+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMCcpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnY291bnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKCcxJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuLypcbiAqIEEgY29sbGVjdGlvbiBvZiBkaXJlY3RpdmVzIHRoYXQgYWxsb3dzIGNyZWF0aW9uIG9mIGN1c3RvbSBldmVudCBoYW5kbGVycyB0aGF0IGFyZSBkZWZpbmVkIGFzXG4gKiBhbmd1bGFyIGV4cHJlc3Npb25zIGFuZCBhcmUgY29tcGlsZWQgYW5kIGV4ZWN1dGVkIHdpdGhpbiB0aGUgY3VycmVudCBzY29wZS5cbiAqL1xudmFyIG5nRXZlbnREaXJlY3RpdmVzID0ge307XG5cbi8vIEZvciBldmVudHMgdGhhdCBtaWdodCBmaXJlIHN5bmNocm9ub3VzbHkgZHVyaW5nIERPTSBtYW5pcHVsYXRpb25cbi8vIHdlIG5lZWQgdG8gZXhlY3V0ZSB0aGVpciBldmVudCBoYW5kbGVycyBhc3luY2hyb25vdXNseSB1c2luZyAkZXZhbEFzeW5jLFxuLy8gc28gdGhhdCB0aGV5IGFyZSBub3QgZXhlY3V0ZWQgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLlxudmFyIGZvcmNlQXN5bmNFdmVudHMgPSB7XG4gICdibHVyJzogdHJ1ZSxcbiAgJ2ZvY3VzJzogdHJ1ZVxufTtcbmZvckVhY2goXG4gICdjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2Vtb3ZlIG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBrZXlkb3duIGtleXVwIGtleXByZXNzIHN1Ym1pdCBmb2N1cyBibHVyIGNvcHkgY3V0IHBhc3RlJy5zcGxpdCgnICcpLFxuICBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGV2ZW50TmFtZSk7XG4gICAgbmdFdmVudERpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBbJyRwYXJzZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHBhcnNlLCAkcm9vdFNjb3BlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbigkZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgIC8vIE5PVEU6XG4gICAgICAgICAgLy8gV2UgZXhwb3NlIHRoZSBwb3dlcmZ1bCBgJGV2ZW50YCBvYmplY3Qgb24gdGhlIHNjb3BlIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBXaW5kb3csXG4gICAgICAgICAgLy8gZXRjLiBUaGlzIGlzIE9LLCBiZWNhdXNlIGV4cHJlc3Npb25zIGFyZSBub3Qgc2FuZGJveGVkIGFueSBtb3JlIChhbmQgdGhlIGV4cHJlc3Npb25cbiAgICAgICAgICAvLyBzYW5kYm94IHdhcyBuZXZlciBtZWFudCB0byBiZSBhIHNlY3VyaXR5IGZlYXR1cmUgYW55d2F5KS5cbiAgICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cltkaXJlY3RpdmVOYW1lXSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nRXZlbnRIYW5kbGVyKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm4oc2NvcGUsIHskZXZlbnQ6IGV2ZW50fSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGlmIChmb3JjZUFzeW5jRXZlbnRzW2V2ZW50TmFtZV0gJiYgJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XTtcbiAgfVxuKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0RibGNsaWNrXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nRGJsY2xpY2tgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGEgZGJsY2xpY2sgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0RibGNsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGEgZGJsY2xpY2suIChUaGUgRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YClcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWRibGNsaWNrXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLWRibGNsaWNrPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIGRvdWJsZSBjbGljaylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2Vkb3duXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgbmdNb3VzZWRvd24gZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2Vkb3duIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2Vkb3duLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNlZG93blwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWRvd249XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAob24gbW91c2UgZG93bilcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2V1cFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2V1cCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2V1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZXVwLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNldXBcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2V1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50IChvbiBtb3VzZSB1cClcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlb3ZlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VvdmVyIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZW92ZXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2VvdmVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNlb3ZlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZW92ZXI9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBpcyBvdmVyKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWVudGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWVudGVyIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWVudGVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlZW50ZXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctbW91c2VlbnRlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWVudGVyPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgZW50ZXJzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWxlYXZlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWxlYXZlIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWxlYXZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbGVhdmUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctbW91c2VsZWF2ZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWxlYXZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbGVhdmVzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZW1vdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbW92ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vtb3ZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbW92ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1tb3VzZW1vdmVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2Vtb3ZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbW92ZXMpXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleWRvd25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleWRvd24gZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0tleWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICoga2V5ZG93bi4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWtleWRvd25cIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1rZXlkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IGRvd24gY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5dXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXVwIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXl1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXl1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWtleXVwXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5IGNvdW50PC9wPlxuICAgICAgIDxpbnB1dCBuZy1rZXl1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj4ga2V5IHVwIGNvdW50OiB7e2NvdW50fX1cblxuICAgICAgIDxwPlR5cGluZyBpbiB0aGUgaW5wdXQgYm94IGJlbG93IHVwZGF0ZXMgdGhlIGtleWNvZGU8L3A+XG4gICAgICAgPGlucHV0IG5nLWtleXVwPVwiZXZlbnQ9JGV2ZW50XCI+XG4gICAgICAgPHA+ZXZlbnQga2V5Q29kZToge3sgZXZlbnQua2V5Q29kZSB9fTwvcD5cbiAgICAgICA8cD5ldmVudCBhbHRLZXk6IHt7IGV2ZW50LmFsdEtleSB9fTwvcD5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleXByZXNzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlwcmVzcyBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlwcmVzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlwcmVzcy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH1cbiAqIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1rZXlwcmVzc1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWtleXByZXNzPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IHByZXNzIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N1Ym1pdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRW5hYmxlcyBiaW5kaW5nIGFuZ3VsYXIgZXhwcmVzc2lvbnMgdG8gb25zdWJtaXQgZXZlbnRzLlxuICpcbiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlXG4gKiBzZXJ2ZXIgYW5kIHJlbG9hZGluZyB0aGUgY3VycmVudCBwYWdlKSwgYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBgYWN0aW9uYCxcbiAqIGBkYXRhLWFjdGlvbmAsIG9yIGB4LWFjdGlvbmAgYXR0cmlidXRlcy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipXYXJuaW5nOioqIEJlIGNhcmVmdWwgbm90IHRvIGNhdXNlIFwiZG91YmxlLXN1Ym1pc3Npb25cIiBieSB1c2luZyBib3RoIHRoZSBgbmdDbGlja2AgYW5kXG4gKiBgbmdTdWJtaXRgIGhhbmRsZXJzIHRvZ2V0aGVyLiBTZWUgdGhlXG4gKiB7QGxpbmsgZm9ybSNzdWJtaXR0aW5nLWEtZm9ybS1hbmQtcHJldmVudGluZy10aGUtZGVmYXVsdC1hY3Rpb24gYGZvcm1gIGRpcmVjdGl2ZSBkb2N1bWVudGF0aW9ufVxuICogZm9yIGEgZGV0YWlsZWQgZGlzY3Vzc2lvbiBvZiB3aGVuIGBuZ1N1Ym1pdGAgbWF5IGJlIHRyaWdnZXJlZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBlbGVtZW50IGZvcm1cbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3VibWl0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwic3VibWl0RXhhbXBsZVwiIG5hbWU9XCJuZy1zdWJtaXRcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdzdWJtaXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5saXN0ID0gW107XG4gICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdoZWxsbyc7XG4gICAgICAgICAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICgkc2NvcGUudGV4dCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnB1c2godGhpcy50ZXh0KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmctc3VibWl0PVwic3VibWl0KClcIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgRW50ZXIgdGV4dCBhbmQgaGl0IGVudGVyOlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInRleHRcIiBuYW1lPVwidGV4dFwiIC8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgaWQ9XCJzdWJtaXRcIiB2YWx1ZT1cIlN1Ym1pdFwiIC8+XG4gICAgICAgIDxwcmU+bGlzdD17e2xpc3R9fTwvcHJlPlxuICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN1Ym1pdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3Q9W10nKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCcnKTtcbiAgICAgICB9KTtcbiAgICAgICBpdCgnc2hvdWxkIGlnbm9yZSBlbXB0eSBzdHJpbmdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpO1xuICAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdGb2N1c1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gZm9jdXMgZXZlbnQuXG4gKlxuICogTm90ZTogQXMgdGhlIGBmb2N1c2AgZXZlbnQgaXMgZXhlY3V0ZWQgc3luY2hyb25vdXNseSB3aGVuIGNhbGxpbmcgYGlucHV0LmZvY3VzKClgXG4gKiBBbmd1bGFySlMgZXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gdXNpbmcgYHNjb3BlLiRldmFsQXN5bmNgIGlmIHRoZSBldmVudCBpcyBmaXJlZFxuICogZHVyaW5nIGFuIGAkYXBwbHlgIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgc3RhdGUuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdGb2N1cyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBmb2N1cy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja31cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmx1clxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYmx1ciBldmVudC5cbiAqXG4gKiBBIFtibHVyIGV2ZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvYmx1cikgZmlyZXMgd2hlblxuICogYW4gZWxlbWVudCBoYXMgbG9zdCBmb2N1cy5cbiAqXG4gKiBOb3RlOiBBcyB0aGUgYGJsdXJgIGV2ZW50IGlzIGV4ZWN1dGVkIHN5bmNocm9ub3VzbHkgYWxzbyBkdXJpbmcgRE9NIG1hbmlwdWxhdGlvbnNcbiAqIChlLmcuIHJlbW92aW5nIGEgZm9jdXNzZWQgaW5wdXQpLFxuICogQW5ndWxhckpTIGV4ZWN1dGVzIHRoZSBleHByZXNzaW9uIHVzaW5nIGBzY29wZS4kZXZhbEFzeW5jYCBpZiB0aGUgZXZlbnQgaXMgZmlyZWRcbiAqIGR1cmluZyBhbiBgJGFwcGx5YCB0byBlbnN1cmUgYSBjb25zaXN0ZW50IHN0YXRlLlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmx1ciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBibHVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDb3B5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBjb3B5IGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29weSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjb3B5LiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNvcHlcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jb3B5PVwiY29waWVkPXRydWVcIiBuZy1pbml0PVwiY29waWVkPWZhbHNlOyB2YWx1ZT0nY29weSBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICBjb3BpZWQ6IHt7Y29waWVkfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDdXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGN1dCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0N1dCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjdXQuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY3V0XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmctY3V0PVwiY3V0PXRydWVcIiBuZy1pbml0PVwiY3V0PWZhbHNlOyB2YWx1ZT0nY3V0IG1lJ1wiIG5nLW1vZGVsPVwidmFsdWVcIj5cbiAgICAgIGN1dDoge3tjdXR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1Bhc3RlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBwYXN0ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1Bhc3RlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIHBhc3RlLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLXBhc3RlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmctcGFzdGU9XCJwYXN0ZT10cnVlXCIgbmctaW5pdD1cInBhc3RlPWZhbHNlXCIgcGxhY2Vob2xkZXI9J3Bhc3RlIGhlcmUnPlxuICAgICAgcGFzdGVkOiB7e3Bhc3RlfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJZlxuICogQHJlc3RyaWN0IEFcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdJZmAgZGlyZWN0aXZlIHJlbW92ZXMgb3IgcmVjcmVhdGVzIGEgcG9ydGlvbiBvZiB0aGUgRE9NIHRyZWUgYmFzZWQgb24gYW5cbiAqIHtleHByZXNzaW9ufS4gSWYgdGhlIGV4cHJlc3Npb24gYXNzaWduZWQgdG8gYG5nSWZgIGV2YWx1YXRlcyB0byBhIGZhbHNlXG4gKiB2YWx1ZSB0aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLCBvdGhlcndpc2UgYSBjbG9uZSBvZiB0aGVcbiAqIGVsZW1lbnQgaXMgcmVpbnNlcnRlZCBpbnRvIHRoZSBET00uXG4gKlxuICogYG5nSWZgIGRpZmZlcnMgZnJvbSBgbmdTaG93YCBhbmQgYG5nSGlkZWAgaW4gdGhhdCBgbmdJZmAgY29tcGxldGVseSByZW1vdmVzIGFuZCByZWNyZWF0ZXMgdGhlXG4gKiBlbGVtZW50IGluIHRoZSBET00gcmF0aGVyIHRoYW4gY2hhbmdpbmcgaXRzIHZpc2liaWxpdHkgdmlhIHRoZSBgZGlzcGxheWAgY3NzIHByb3BlcnR5LiAgQSBjb21tb25cbiAqIGNhc2Ugd2hlbiB0aGlzIGRpZmZlcmVuY2UgaXMgc2lnbmlmaWNhbnQgaXMgd2hlbiB1c2luZyBjc3Mgc2VsZWN0b3JzIHRoYXQgcmVseSBvbiBhbiBlbGVtZW50J3NcbiAqIHBvc2l0aW9uIHdpdGhpbiB0aGUgRE9NLCBzdWNoIGFzIHRoZSBgOmZpcnN0LWNoaWxkYCBvciBgOmxhc3QtY2hpbGRgIHBzZXVkby1jbGFzc2VzLlxuICpcbiAqIE5vdGUgdGhhdCB3aGVuIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCB1c2luZyBgbmdJZmAgaXRzIHNjb3BlIGlzIGRlc3Ryb3llZCBhbmQgYSBuZXcgc2NvcGVcbiAqIGlzIGNyZWF0ZWQgd2hlbiB0aGUgZWxlbWVudCBpcyByZXN0b3JlZC4gIFRoZSBzY29wZSBjcmVhdGVkIHdpdGhpbiBgbmdJZmAgaW5oZXJpdHMgZnJvbVxuICogaXRzIHBhcmVudCBzY29wZSB1c2luZ1xuICogW3Byb3RvdHlwYWwgaW5oZXJpdGFuY2VdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9VbmRlcnN0YW5kaW5nLVNjb3BlcyNqYXZhc2NyaXB0LXByb3RvdHlwYWwtaW5oZXJpdGFuY2UpLlxuICogQW4gaW1wb3J0YW50IGltcGxpY2F0aW9uIG9mIHRoaXMgaXMgaWYgYG5nTW9kZWxgIGlzIHVzZWQgd2l0aGluIGBuZ0lmYCB0byBiaW5kIHRvXG4gKiBhIGphdmFzY3JpcHQgcHJpbWl0aXZlIGRlZmluZWQgaW4gdGhlIHBhcmVudCBzY29wZS4gSW4gdGhpcyBjYXNlIGFueSBtb2RpZmljYXRpb25zIG1hZGUgdG8gdGhlXG4gKiB2YXJpYWJsZSB3aXRoaW4gdGhlIGNoaWxkIHNjb3BlIHdpbGwgb3ZlcnJpZGUgKGhpZGUpIHRoZSB2YWx1ZSBpbiB0aGUgcGFyZW50IHNjb3BlLlxuICpcbiAqIEFsc28sIGBuZ0lmYCByZWNyZWF0ZXMgZWxlbWVudHMgdXNpbmcgdGhlaXIgY29tcGlsZWQgc3RhdGUuIEFuIGV4YW1wbGUgb2YgdGhpcyBiZWhhdmlvclxuICogaXMgaWYgYW4gZWxlbWVudCdzIGNsYXNzIGF0dHJpYnV0ZSBpcyBkaXJlY3RseSBtb2RpZmllZCBhZnRlciBpdCdzIGNvbXBpbGVkLCB1c2luZyBzb21ldGhpbmcgbGlrZVxuICogalF1ZXJ5J3MgYC5hZGRDbGFzcygpYCBtZXRob2QsIGFuZCB0aGUgZWxlbWVudCBpcyBsYXRlciByZW1vdmVkLiBXaGVuIGBuZ0lmYCByZWNyZWF0ZXMgdGhlIGVsZW1lbnRcbiAqIHRoZSBhZGRlZCBjbGFzcyB3aWxsIGJlIGxvc3QgYmVjYXVzZSB0aGUgb3JpZ2luYWwgY29tcGlsZWQgc3RhdGUgaXMgdXNlZCB0byByZWdlbmVyYXRlIHRoZSBlbGVtZW50LlxuICpcbiAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBwcm92aWRlIGFuaW1hdGlvbnMgdmlhIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgdG8gYW5pbWF0ZSB0aGUgYGVudGVyYFxuICogYW5kIGBsZWF2ZWAgZWZmZWN0cy5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IGp1c3QgYWZ0ZXIgdGhlIGBuZ0lmYCBjb250ZW50cyBjaGFuZ2UgYW5kIGEgbmV3IERPTSBlbGVtZW50IGlzIGNyZWF0ZWQgYW5kIGluamVjdGVkIGludG8gdGhlIGBuZ0lmYCBjb250YWluZXIgfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjbGVhdmUgbGVhdmV9ICB8IGp1c3QgYmVmb3JlIHRoZSBgbmdJZmAgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHxcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDYwMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0lmIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBmYWxzeSB0aGVuXG4gKiAgICAgdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdHJlZS4gSWYgaXQgaXMgdHJ1dGh5IGEgY29weSBvZiB0aGUgY29tcGlsZWRcbiAqICAgICBlbGVtZW50IGlzIGFkZGVkIHRvIHRoZSBET00gdHJlZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctaWZcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGxhYmVsPkNsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgbmctaW5pdD1cImNoZWNrZWQ9dHJ1ZVwiIC8+PC9sYWJlbD48YnIvPlxuICAgICAgU2hvdyB3aGVuIGNoZWNrZWQ6XG4gICAgICA8c3BhbiBuZy1pZj1cImNoZWNrZWRcIiBjbGFzcz1cImFuaW1hdGUtaWZcIj5cbiAgICAgICAgVGhpcyBpcyByZW1vdmVkIHdoZW4gdGhlIGNoZWNrYm94IGlzIHVuY2hlY2tlZC5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1pZiB7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIsIC5hbmltYXRlLWlmLm5nLWxlYXZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OjE7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0lmRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRhbmltYXRlLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgcHJpb3JpdHk6IDYwMCxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgYmxvY2ssIGNoaWxkU2NvcGUsIHByZXZpb3VzRWxlbWVudHM7XG4gICAgICAgICRzY29wZS4kd2F0Y2goJGF0dHIubmdJZiwgZnVuY3Rpb24gbmdJZldhdGNoQWN0aW9uKHZhbHVlKSB7XG5cbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghY2hpbGRTY29wZSkge1xuICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSwgbmV3U2NvcGUpIHtcbiAgICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gJGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KCdlbmQgbmdJZicsICRhdHRyLm5nSWYpO1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgbmVlZCB0aGUgZmlyc3QvbGFzdCBub2RlIG9mIHRoZSBjbG9uZWQgbm9kZXMuXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgd2UgbmVlZCB0byBrZWVwIHRoZSByZWZlcmVuY2UgdG8gdGhlIGpxbGl0ZSB3cmFwcGVyIGFzIGl0IG1pZ2h0IGJlIGNoYW5nZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuXG4gICAgICAgICAgICAgICAgYmxvY2sgPSB7XG4gICAgICAgICAgICAgICAgICBjbG9uZTogY2xvbmVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCAkZWxlbWVudC5wYXJlbnQoKSwgJGVsZW1lbnQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cy5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hpbGRTY29wZSkge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUocHJldmlvdXNFbGVtZW50cykuZG9uZShmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UpIHByZXZpb3VzRWxlbWVudHMgPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYmxvY2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJbmNsdWRlXG4gKiBAcmVzdHJpY3QgRUNBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGZXRjaGVzLCBjb21waWxlcyBhbmQgaW5jbHVkZXMgYW4gZXh0ZXJuYWwgSFRNTCBmcmFnbWVudC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgVVJMIGlzIHJlc3RyaWN0ZWQgdG8gdGhlIHNhbWUgZG9tYWluIGFuZCBwcm90b2NvbCBhcyB0aGVcbiAqIGFwcGxpY2F0aW9uIGRvY3VtZW50LiBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiBpdC4gVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIHByb3RvY29sc1xuICogeW91IG1heSBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdCB0aGVtfSBvclxuICoge0BsaW5rICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgdGhlbX0gYXMgdHJ1c3RlZCB2YWx1ZXMuIFJlZmVyIHRvIEFuZ3VsYXIncyB7QGxpbmtcbiAqIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmd9LlxuICpcbiAqIEluIGFkZGl0aW9uLCB0aGUgYnJvd3NlcidzXG4gKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICogcG9saWN5IG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWQuXG4gKiBGb3IgZXhhbXBsZSwgYG5nSW5jbHVkZWAgd29uJ3Qgd29yayBmb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzIG9uIGFsbCBicm93c2VycyBhbmQgZm9yIGBmaWxlOi8vYFxuICogYWNjZXNzIG9uIHNvbWUgYnJvd3NlcnMuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IHdoZW4gdGhlIGV4cHJlc3Npb24gY2hhbmdlcywgb24gdGhlIG5ldyBpbmNsdWRlIHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2xlYXZlIGxlYXZlfSAgfCB3aGVuIHRoZSBleHByZXNzaW9uIGNoYW5nZXMsIG9uIHRoZSBvbGQgaW5jbHVkZSB8XG4gKlxuICogVGhlIGVudGVyIGFuZCBsZWF2ZSBhbmltYXRpb24gb2NjdXIgY29uY3VycmVudGx5LlxuICpcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDQwMFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0luY2x1ZGV8c3JjIGFuZ3VsYXIgZXhwcmVzc2lvbiBldmFsdWF0aW5nIHRvIFVSTC4gSWYgdGhlIHNvdXJjZSBpcyBhIHN0cmluZyBjb25zdGFudCxcbiAqICAgICAgICAgICAgICAgICBtYWtlIHN1cmUgeW91IHdyYXAgaXQgaW4gKipzaW5nbGUqKiBxdW90ZXMsIGUuZy4gYHNyYz1cIidteVBhcnRpYWxUZW1wbGF0ZS5odG1sJ1wiYC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb25sb2FkIEV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbiBhIG5ldyBwYXJ0aWFsIGlzIGxvYWRlZC5cbiAqICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICAgICAgICAgICAgICAgICAgKipOb3RlOioqIFdoZW4gdXNpbmcgb25sb2FkIG9uIFNWRyBlbGVtZW50cyBpbiBJRTExLCB0aGUgYnJvd3NlciB3aWxsIHRyeSB0byBjYWxsXG4gKiAgICAgICAgICAgICAgICAgIGEgZnVuY3Rpb24gd2l0aCB0aGUgbmFtZSBvbiB0aGUgd2luZG93IGVsZW1lbnQsIHdoaWNoIHdpbGwgdXN1YWxseSB0aHJvdyBhXG4gKiAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb24gaXMgdW5kZWZpbmVkXCIgZXJyb3IuIFRvIGZpeCB0aGlzLCB5b3UgY2FuIGluc3RlYWQgdXNlIGBkYXRhLW9ubG9hZGAgb3IgYVxuICogICAgICAgICAgICAgICAgICBkaWZmZXJlbnQgZm9ybSB0aGF0IHtAbGluayBndWlkZS9kaXJlY3RpdmUjbm9ybWFsaXphdGlvbiBtYXRjaGVzfSBgb25sb2FkYC5cbiAqICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgV2hldGhlciBgbmdJbmNsdWRlYCBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbFxuICogICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsfSB0byBzY3JvbGwgdGhlIHZpZXdwb3J0IGFmdGVyIHRoZSBjb250ZW50IGlzIGxvYWRlZC5cbiAqXG4gKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCBkaXNhYmxlIHNjcm9sbGluZy5cbiAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIHNldCB3aXRob3V0IHZhbHVlLCBlbmFibGUgc2Nyb2xsaW5nLlxuICogICAgICAgICAgICAgICAgICAtIE90aGVyd2lzZSBlbmFibGUgc2Nyb2xsaW5nIG9ubHkgaWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydXRoeSB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJpbmNsdWRlRXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1pbmNsdWRlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwidGVtcGxhdGVcIiBuZy1vcHRpb25zPVwidC5uYW1lIGZvciB0IGluIHRlbXBsYXRlc1wiPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+KGJsYW5rKTwvb3B0aW9uPlxuICAgICAgIDwvc2VsZWN0PlxuICAgICAgIHVybCBvZiB0aGUgdGVtcGxhdGU6IDxjb2RlPnt7dGVtcGxhdGUudXJsfX08L2NvZGU+XG4gICAgICAgPGhyLz5cbiAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtYW5pbWF0ZS1jb250YWluZXJcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJzbGlkZS1hbmltYXRlXCIgbmctaW5jbHVkZT1cInRlbXBsYXRlLnVybFwiPjwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2luY2x1ZGVFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudGVtcGxhdGVzID1cbiAgICAgICAgICAgIFt7IG5hbWU6ICd0ZW1wbGF0ZTEuaHRtbCcsIHVybDogJ3RlbXBsYXRlMS5odG1sJ30sXG4gICAgICAgICAgICAgeyBuYW1lOiAndGVtcGxhdGUyLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTIuaHRtbCd9XTtcbiAgICAgICAgICAkc2NvcGUudGVtcGxhdGUgPSAkc2NvcGUudGVtcGxhdGVzWzBdO1xuICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwidGVtcGxhdGUxLmh0bWxcIj5cbiAgICAgIENvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWxcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInRlbXBsYXRlMi5odG1sXCI+XG4gICAgICBDb250ZW50IG9mIHRlbXBsYXRlMi5odG1sXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLnNsaWRlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGhlaWdodDo0MHB4O1xuICAgICAgICBvdmVyZmxvdzpoaWRkZW47XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlIHtcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciwgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUge1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG5cbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHRvcDowO1xuICAgICAgICBsZWZ0OjA7XG4gICAgICAgIHJpZ2h0OjA7XG4gICAgICAgIGJvdHRvbTowO1xuICAgICAgICBkaXNwbGF5OmJsb2NrO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyIHtcbiAgICAgICAgdG9wOi01MHB4O1xuICAgICAgfVxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICB0b3A6NTBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRlbXBsYXRlU2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgndGVtcGxhdGUnKSk7XG4gICAgICB2YXIgaW5jbHVkZUVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLWluY2x1ZGVdJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUxLmh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbC8pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZTIuaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0c1xuICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy80ODBcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTtcbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMi5odG1sLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdmaXJlZm94Jykge1xuICAgICAgICAgIC8vIEZpcmVmb3ggY2FuJ3QgaGFuZGxlIHVzaW5nIHNlbGVjdHNcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTtcbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgwKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uaXNQcmVzZW50KCkpLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZFxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBzY29wZSBuZ0luY2x1ZGUgd2FzIGRlY2xhcmVkIGluXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGV2ZW50XG4gKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50TG9hZGVkXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIGN1cnJlbnQgbmdJbmNsdWRlIHNjb3BlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVsb2FkZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZXZlbnRcbiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRFcnJvclxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBzY29wZSBuZ0luY2x1ZGUgd2FzIGRlY2xhcmVkIGluXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgd2hlbiBhIHRlbXBsYXRlIEhUVFAgcmVxdWVzdCB5aWVsZHMgYW4gZXJyb25lb3VzIHJlc3BvbnNlIChzdGF0dXMgPCAyMDAgfHwgc3RhdHVzID4gMjk5KVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC5cbiAqL1xudmFyIG5nSW5jbHVkZURpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlUmVxdWVzdCcsICckYW5jaG9yU2Nyb2xsJywgJyRhbmltYXRlJyxcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCR0ZW1wbGF0ZVJlcXVlc3QsICAgJGFuY2hvclNjcm9sbCwgICAkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICBwcmlvcml0eTogNDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICBjb250cm9sbGVyOiBhbmd1bGFyLm5vb3AsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIHNyY0V4cCA9IGF0dHIubmdJbmNsdWRlIHx8IGF0dHIuc3JjLFxuICAgICAgICAgIG9ubG9hZEV4cCA9IGF0dHIub25sb2FkIHx8ICcnLFxuICAgICAgICAgIGF1dG9TY3JvbGxFeHAgPSBhdHRyLmF1dG9zY3JvbGw7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgY2hhbmdlQ291bnRlciA9IDAsXG4gICAgICAgICAgICBjdXJyZW50U2NvcGUsXG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQsXG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudDtcblxuICAgICAgICB2YXIgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShjdXJyZW50RWxlbWVudCkuZG9uZShmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgIT09IGZhbHNlKSBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBjdXJyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKHNyY0V4cCwgZnVuY3Rpb24gbmdJbmNsdWRlV2F0Y2hBY3Rpb24oc3JjKSB7XG4gICAgICAgICAgdmFyIGFmdGVyQW5pbWF0aW9uID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UgJiYgaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmXG4gICAgICAgICAgICAgICghYXV0b1Njcm9sbEV4cCB8fCBzY29wZS4kZXZhbChhdXRvU2Nyb2xsRXhwKSkpIHtcbiAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgdGhpc0NoYW5nZUlkID0gKytjaGFuZ2VDb3VudGVyO1xuXG4gICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgLy9zZXQgdGhlIDJuZCBwYXJhbSB0byB0cnVlIHRvIGlnbm9yZSB0aGUgdGVtcGxhdGUgcmVxdWVzdCBlcnJvciBzbyB0aGF0IHRoZSBpbm5lclxuICAgICAgICAgICAgLy9jb250ZW50cyBhbmQgc2NvcGUgY2FuIGJlIGNsZWFuZWQgdXAuXG4gICAgICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KHNyYywgdHJ1ZSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAoc2NvcGUuJCRkZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSByZXR1cm47XG4gICAgICAgICAgICAgIHZhciBuZXdTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICAgIC8vIE5vdGU6IFRoaXMgd2lsbCBhbHNvIGxpbmsgYWxsIGNoaWxkcmVuIG9mIG5nLWluY2x1ZGUgdGhhdCB3ZXJlIGNvbnRhaW5lZCBpbiB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgICAgLy8gaHRtbC4gSWYgdGhhdCBjb250ZW50IGNvbnRhaW5zIGNvbnRyb2xsZXJzLCAuLi4gdGhleSBjb3VsZCBwb2xsdXRlL2NoYW5nZSB0aGUgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHVzaW5nIG5nLWluY2x1ZGUgb24gYW4gZWxlbWVudCB3aXRoIGFkZGl0aW9uYWwgY29udGVudCBkb2VzIG5vdCBtYWtlIHNlbnNlLi4uXG4gICAgICAgICAgICAgIC8vIE5vdGU6IFdlIGNhbid0IHJlbW92ZSB0aGVtIGluIHRoZSBjbG9uZUF0dGNoRm4gb2YgJHRyYW5zY2x1ZGUgYXMgdGhhdFxuICAgICAgICAgICAgICAvLyBmdW5jdGlvbiBpcyBjYWxsZWQgYmVmb3JlIGxpbmtpbmcgdGhlIGNvbnRlbnQsIHdoaWNoIHdvdWxkIGFwcGx5IGNoaWxkXG4gICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMgdG8gbm9uIGV4aXN0aW5nIGVsZW1lbnRzLlxuICAgICAgICAgICAgICB2YXIgY2xvbmUgPSAkdHJhbnNjbHVkZShuZXdTY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsICRlbGVtZW50KS5kb25lKGFmdGVyQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY2xvbmU7XG5cbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBzcmMpO1xuICAgICAgICAgICAgICBzY29wZS4kZXZhbChvbmxvYWRFeHApO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgPT09IGNoYW5nZUNvdW50ZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudEVycm9yJywgc3JjKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkJywgc3JjKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8vIFRoaXMgZGlyZWN0aXZlIGlzIGNhbGxlZCBkdXJpbmcgdGhlICR0cmFuc2NsdWRlIGNhbGwgb2YgdGhlIGZpcnN0IGBuZ0luY2x1ZGVgIGRpcmVjdGl2ZS5cbi8vIEl0IHdpbGwgcmVwbGFjZSBhbmQgY29tcGlsZSB0aGUgY29udGVudCBvZiB0aGUgZWxlbWVudCB3aXRoIHRoZSBsb2FkZWQgdGVtcGxhdGUuXG4vLyBXZSBuZWVkIHRoaXMgZGlyZWN0aXZlIHNvIHRoYXQgdGhlIGVsZW1lbnQgY29udGVudCBpcyBhbHJlYWR5IGZpbGxlZCB3aGVuXG4vLyB0aGUgbGluayBmdW5jdGlvbiBvZiBhbm90aGVyIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50IGFzIG5nSW5jbHVkZVxuLy8gaXMgY2FsbGVkLlxudmFyIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlID0gWyckY29tcGlsZScsXG4gIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICAgIHByaW9yaXR5OiAtNDAwLFxuICAgICAgcmVxdWlyZTogJ25nSW5jbHVkZScsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsKSB7XG4gICAgICAgIGlmICh0b1N0cmluZy5jYWxsKCRlbGVtZW50WzBdKS5tYXRjaCgvU1ZHLykpIHtcbiAgICAgICAgICAvLyBXZWJLaXQ6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzU2OTggLS0tIFNWRyBlbGVtZW50cyBkbyBub3RcbiAgICAgICAgICAvLyBzdXBwb3J0IGlubmVySFRNTCwgc28gZGV0ZWN0IHRoaXMgaGVyZSBhbmQgdHJ5IHRvIGdlbmVyYXRlIHRoZSBjb250ZW50c1xuICAgICAgICAgIC8vIHNwZWNpYWxseS5cbiAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpO1xuICAgICAgICAgICRjb21waWxlKGpxTGl0ZUJ1aWxkRnJhZ21lbnQoY3RybC50ZW1wbGF0ZSwgd2luZG93LmRvY3VtZW50KS5jaGlsZE5vZGVzKShzY29wZSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gbmFtZXNwYWNlQWRhcHRlZENsb25lKGNsb25lKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICAgIH0sIHtmdXR1cmVQYXJlbnRFbGVtZW50OiAkZWxlbWVudH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbGVtZW50Lmh0bWwoY3RybC50ZW1wbGF0ZSk7XG4gICAgICAgICRjb21waWxlKCRlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0luaXRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0luaXRgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIGV2YWx1YXRlIGFuIGV4cHJlc3Npb24gaW4gdGhlXG4gKiBjdXJyZW50IHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhYnVzZWQgdG8gYWRkIHVubmVjZXNzYXJ5IGFtb3VudHMgb2YgbG9naWMgaW50byB5b3VyIHRlbXBsYXRlcy5cbiAqIFRoZXJlIGFyZSBvbmx5IGEgZmV3IGFwcHJvcHJpYXRlIHVzZXMgb2YgYG5nSW5pdGAsIHN1Y2ggYXMgZm9yIGFsaWFzaW5nIHNwZWNpYWwgcHJvcGVydGllcyBvZlxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2VlbiBpbiB0aGUgZGVtbyBiZWxvdzsgYW5kIGZvciBpbmplY3RpbmcgZGF0YSB2aWFcbiAqIHNlcnZlciBzaWRlIHNjcmlwdGluZy4gQmVzaWRlcyB0aGVzZSBmZXcgY2FzZXMsIHlvdSBzaG91bGQgdXNlIHtAbGluayBndWlkZS9jb250cm9sbGVyIGNvbnRyb2xsZXJzfVxuICogcmF0aGVyIHRoYW4gYG5nSW5pdGAgdG8gaW5pdGlhbGl6ZSB2YWx1ZXMgb24gYSBzY29wZS5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogSWYgeW91IGhhdmUgYXNzaWdubWVudCBpbiBgbmdJbml0YCBhbG9uZyB3aXRoIGEge0BsaW5rIG5nLiRmaWx0ZXIgYGZpbHRlcmB9LCBtYWtlXG4gKiBzdXJlIHlvdSBoYXZlIHBhcmVudGhlc2VzIHRvIGVuc3VyZSBjb3JyZWN0IG9wZXJhdG9yIHByZWNlZGVuY2U6XG4gKiA8cHJlIGNsYXNzPVwicHJldHR5cHJpbnRcIj5cbiAqIGA8ZGl2IG5nLWluaXQ9XCJ0ZXN0MSA9ICgkaW5kZXggfCB0b1N0cmluZylcIj48L2Rpdj5gXG4gKiA8L3ByZT5cbiAqIDwvZGl2PlxuICpcbiAqIEBwcmlvcml0eSA0NTBcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJbml0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImluaXRFeGFtcGxlXCIgbmFtZT1cIm5nLWluaXRcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgIDxzY3JpcHQ+XG4gICAgIGFuZ3VsYXIubW9kdWxlKCdpbml0RXhhbXBsZScsIFtdKVxuICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAkc2NvcGUubGlzdCA9IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXTtcbiAgICAgICB9XSk7XG4gICA8L3NjcmlwdD5cbiAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgIDxkaXYgbmctcmVwZWF0PVwiaW5uZXJMaXN0IGluIGxpc3RcIiBuZy1pbml0PVwib3V0ZXJJbmRleCA9ICRpbmRleFwiPlxuICAgICAgIDxkaXYgbmctcmVwZWF0PVwidmFsdWUgaW4gaW5uZXJMaXN0XCIgbmctaW5pdD1cImlubmVySW5kZXggPSAkaW5kZXhcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImV4YW1wbGUtaW5pdFwiPmxpc3RbIHt7b3V0ZXJJbmRleH19IF1bIHt7aW5uZXJJbmRleH19IF0gPSB7e3ZhbHVlfX07PC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2Rpdj5cbiAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGFsaWFzIGluZGV4IHBvc2l0aW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIGVsZW1lbnRzID0gZWxlbWVudC5hbGwoYnkuY3NzKCcuZXhhbXBsZS1pbml0JykpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgwKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDAgXVsgMCBdID0gYTsnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAwIF1bIDEgXSA9IGI7Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAwIF0gPSBjOycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgzKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDEgXVsgMSBdID0gZDsnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdJbml0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICBwcmlvcml0eTogNDUwLFxuICBjb21waWxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgc2NvcGUuJGV2YWwoYXR0cnMubmdJbml0KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0xpc3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRleHQgaW5wdXQgdGhhdCBjb252ZXJ0cyBiZXR3ZWVuIGEgZGVsaW1pdGVkIHN0cmluZyBhbmQgYW4gYXJyYXkgb2Ygc3RyaW5ncy4gVGhlIGRlZmF1bHRcbiAqIGRlbGltaXRlciBpcyBhIGNvbW1hIGZvbGxvd2VkIGJ5IGEgc3BhY2UgLSBlcXVpdmFsZW50IHRvIGBuZy1saXN0PVwiLCBcImAuIFlvdSBjYW4gc3BlY2lmeSBhIGN1c3RvbVxuICogZGVsaW1pdGVyIGFzIHRoZSB2YWx1ZSBvZiB0aGUgYG5nTGlzdGAgYXR0cmlidXRlIC0gZm9yIGV4YW1wbGUsIGBuZy1saXN0PVwiIHwgXCJgLlxuICpcbiAqIFRoZSBiZWhhdmlvdXIgb2YgdGhlIGRpcmVjdGl2ZSBpcyBhZmZlY3RlZCBieSB0aGUgdXNlIG9mIHRoZSBgbmdUcmltYCBhdHRyaWJ1dGUuXG4gKiAqIElmIGBuZ1RyaW1gIGlzIHNldCB0byBgXCJmYWxzZVwiYCB0aGVuIHdoaXRlc3BhY2UgYXJvdW5kIGJvdGggdGhlIHNlcGFyYXRvciBhbmQgZWFjaFxuICogICBsaXN0IGl0ZW0gaXMgcmVzcGVjdGVkLiBUaGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBvZiB0aGUgZGlyZWN0aXZlIGlzIHJlc3BvbnNpYmxlIGZvclxuICogICBkZWFsaW5nIHdpdGggd2hpdGVzcGFjZSBidXQgYWxzbyBhbGxvd3MgeW91IHRvIHVzZSB3aGl0ZXNwYWNlIGFzIGEgZGVsaW1pdGVyLCBzdWNoIGFzIGFcbiAqICAgdGFiIG9yIG5ld2xpbmUgY2hhcmFjdGVyLlxuICogKiBPdGhlcndpc2Ugd2hpdGVzcGFjZSBhcm91bmQgdGhlIGRlbGltaXRlciBpcyBpZ25vcmVkIHdoZW4gc3BsaXR0aW5nIChhbHRob3VnaCBpdCBpcyByZXNwZWN0ZWRcbiAqICAgd2hlbiBqb2luaW5nIHRoZSBsaXN0IGl0ZW1zIGJhY2sgdG9nZXRoZXIpIGFuZCB3aGl0ZXNwYWNlIGFyb3VuZCBlYWNoIGxpc3QgaXRlbSBpcyBzdHJpcHBlZFxuICogICBiZWZvcmUgaXQgaXMgYWRkZWQgdG8gdGhlIG1vZGVsLlxuICpcbiAqICMjIyBFeGFtcGxlIHdpdGggVmFsaWRhdGlvblxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0xpc3QtZGlyZWN0aXZlXCIgbW9kdWxlPVwibGlzdEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgICBhbmd1bGFyLm1vZHVsZSgnbGlzdEV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydtb3JwaGV1cycsICduZW8nLCAndHJpbml0eSddO1xuICogICAgICAgIH1dKTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICA8bGFiZWw+TGlzdDogPGlucHV0IG5hbWU9XCJuYW1lc0lucHV0XCIgbmctbW9kZWw9XCJuYW1lc1wiIG5nLWxpc3QgcmVxdWlyZWQ+PC9sYWJlbD5cbiAqICAgICAgPHNwYW4gcm9sZT1cImFsZXJ0XCI+XG4gKiAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAqICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gKiAgICAgIDwvc3Bhbj5cbiAqICAgICAgPGJyPlxuICogICAgICA8dHQ+bmFtZXMgPSB7e25hbWVzfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICogICAgIDwvZm9ybT5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgdmFyIGxpc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ25hbWVzJykpO1xuICogICAgIHZhciBuYW1lcyA9IGVsZW1lbnQoYnkuZXhhY3RCaW5kaW5nKCduYW1lcycpKTtcbiAqICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCcpKTtcbiAqICAgICB2YXIgZXJyb3IgPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5lcnJvcicpKTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QobmFtZXMuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1tcIm1vcnBoZXVzXCIsXCJuZW9cIixcInRyaW5pdHlcIl0nKTtcbiAqICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgICAgZXhwZWN0KGVycm9yLmdldENzc1ZhbHVlKCdkaXNwbGF5JykpLnRvQmUoJ25vbmUnKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBsaXN0SW5wdXQuY2xlYXIoKTtcbiAqICAgICAgIGxpc3RJbnB1dC5zZW5kS2V5cygnJyk7XG4gKlxuICogICAgICAgZXhwZWN0KG5hbWVzLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAqICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAqICAgICAgIGV4cGVjdChlcnJvci5nZXRDc3NWYWx1ZSgnZGlzcGxheScpKS5ub3QudG9CZSgnbm9uZScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogIyMjIEV4YW1wbGUgLSBzcGxpdHRpbmcgb24gbmV3bGluZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nTGlzdC1kaXJlY3RpdmUtbmV3bGluZXNcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cImxpc3RcIiBuZy1saXN0PVwiJiMxMDtcIiBuZy10cmltPVwiZmFsc2VcIj48L3RleHRhcmVhPlxuICogICAgPHByZT57eyBsaXN0IHwganNvbiB9fTwvcHJlPlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICBpdChcInNob3VsZCBzcGxpdCB0aGUgdGV4dCBieSBuZXdsaW5lc1wiLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIHZhciBsaXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsaXN0JykpO1xuICogICAgICAgdmFyIG91dHB1dCA9IGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCB8IGpzb24nKSk7XG4gKiAgICAgICBsaXN0SW5wdXQuc2VuZEtleXMoJ2FiY1xcbmRlZlxcbmdoaScpO1xuICogICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQ29udGFpbignW1xcbiAgXCJhYmNcIixcXG4gIFwiZGVmXCIsXFxuICBcImdoaVwiXFxuXScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdMaXN0IG9wdGlvbmFsIGRlbGltaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHNwbGl0IHRoZSB2YWx1ZS5cbiAqL1xudmFyIG5nTGlzdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICAgIHZhciBuZ0xpc3QgPSBhdHRyLm5nTGlzdCB8fCAnLCAnO1xuICAgICAgdmFyIHRyaW1WYWx1ZXMgPSBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJztcbiAgICAgIHZhciBzZXBhcmF0b3IgPSB0cmltVmFsdWVzID8gdHJpbShuZ0xpc3QpIDogbmdMaXN0O1xuXG4gICAgICB2YXIgcGFyc2UgPSBmdW5jdGlvbih2aWV3VmFsdWUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZpZXdWYWx1ZSBpcyBpbnZhbGlkIChzYXkgcmVxdWlyZWQgYnV0IGVtcHR5KSBpdCB3aWxsIGJlIGB1bmRlZmluZWRgXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2aWV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGxpc3QgPSBbXTtcblxuICAgICAgICBpZiAodmlld1ZhbHVlKSB7XG4gICAgICAgICAgZm9yRWFjaCh2aWV3VmFsdWUuc3BsaXQoc2VwYXJhdG9yKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkgbGlzdC5wdXNoKHRyaW1WYWx1ZXMgPyB0cmltKHZhbHVlKSA6IHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgfTtcblxuICAgICAgY3RybC4kcGFyc2Vycy5wdXNoKHBhcnNlKTtcbiAgICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUuam9pbihuZ0xpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBPdmVycmlkZSB0aGUgc3RhbmRhcmQgJGlzRW1wdHkgYmVjYXVzZSBhbiBlbXB0eSBhcnJheSBtZWFucyB0aGUgaW5wdXQgaXMgZW1wdHkuXG4gICAgICBjdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCAhdmFsdWUubGVuZ3RoO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG4vKiBnbG9iYWwgVkFMSURfQ0xBU1M6IHRydWUsXG4gIElOVkFMSURfQ0xBU1M6IHRydWUsXG4gIFBSSVNUSU5FX0NMQVNTOiB0cnVlLFxuICBESVJUWV9DTEFTUzogdHJ1ZSxcbiAgVU5UT1VDSEVEX0NMQVNTOiB0cnVlLFxuICBUT1VDSEVEX0NMQVNTOiB0cnVlLFxuICBQRU5ESU5HX0NMQVNTOiB0cnVlLFxuICBhZGRTZXRWYWxpZGl0eU1ldGhvZDogdHJ1ZSxcbiAgc2V0dXBWYWxpZGl0eTogdHJ1ZSxcbiAgZGVmYXVsdE1vZGVsT3B0aW9uczogZmFsc2VcbiovXG5cblxudmFyIFZBTElEX0NMQVNTID0gJ25nLXZhbGlkJyxcbiAgICBJTlZBTElEX0NMQVNTID0gJ25nLWludmFsaWQnLFxuICAgIFBSSVNUSU5FX0NMQVNTID0gJ25nLXByaXN0aW5lJyxcbiAgICBESVJUWV9DTEFTUyA9ICduZy1kaXJ0eScsXG4gICAgVU5UT1VDSEVEX0NMQVNTID0gJ25nLXVudG91Y2hlZCcsXG4gICAgVE9VQ0hFRF9DTEFTUyA9ICduZy10b3VjaGVkJyxcbiAgICBFTVBUWV9DTEFTUyA9ICduZy1lbXB0eScsXG4gICAgTk9UX0VNUFRZX0NMQVNTID0gJ25nLW5vdC1lbXB0eSc7XG5cbnZhciBuZ01vZGVsTWluRXJyID0gbWluRXJyKCduZ01vZGVsJyk7XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJcbiAqXG4gKiBAcHJvcGVydHkgeyp9ICR2aWV3VmFsdWUgVGhlIGFjdHVhbCB2YWx1ZSBmcm9tIHRoZSBjb250cm9sJ3Mgdmlldy4gRm9yIGBpbnB1dGAgZWxlbWVudHMsIHRoaXMgaXMgYVxuICogU3RyaW5nLiBTZWUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZX0gZm9yIGluZm9ybWF0aW9uIGFib3V0IHdoZW4gdGhlICR2aWV3VmFsdWVcbiAqIGlzIHNldC5cbiAqXG4gKiBAcHJvcGVydHkgeyp9ICRtb2RlbFZhbHVlIFRoZSB2YWx1ZSBpbiB0aGUgbW9kZWwgdGhhdCB0aGUgY29udHJvbCBpcyBib3VuZCB0by5cbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRwYXJzZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxuICogIHRoZSBjb250cm9sIHVwZGF0ZXMgdGhlIG5nTW9kZWxDb250cm9sbGVyIHdpdGggYSBuZXcge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZVxuICAgIGAkdmlld1ZhbHVlYH0gZnJvbSB0aGUgRE9NLCB1c3VhbGx5IHZpYSB1c2VyIGlucHV0LlxuICAgIFNlZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0Vmlld1ZhbHVlIGAkc2V0Vmlld1ZhbHVlKClgfSBmb3IgYSBkZXRhaWxlZCBsaWZlY3ljbGUgZXhwbGFuYXRpb24uXG4gICAgTm90ZSB0aGF0IHRoZSBgJHBhcnNlcnNgIGFyZSBub3QgY2FsbGVkIHdoZW4gdGhlIGJvdW5kIG5nTW9kZWwgZXhwcmVzc2lvbiBjaGFuZ2VzIHByb2dyYW1tYXRpY2FsbHkuXG5cbiAgVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIGluIGFycmF5IG9yZGVyLCBlYWNoIHBhc3NpbmdcbiAgICBpdHMgcmV0dXJuIHZhbHVlIHRocm91Z2ggdG8gdGhlIG5leHQuIFRoZSBsYXN0IHJldHVybiB2YWx1ZSBpcyBmb3J3YXJkZWQgdG8gdGhlXG4gICAge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYCR2YWxpZGF0b3JzYH0gY29sbGVjdGlvbi5cblxuICBQYXJzZXJzIGFyZSB1c2VkIHRvIHNhbml0aXplIC8gY29udmVydCB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZVxuICAgIGAkdmlld1ZhbHVlYH0uXG5cbiAgUmV0dXJuaW5nIGB1bmRlZmluZWRgIGZyb20gYSBwYXJzZXIgbWVhbnMgYSBwYXJzZSBlcnJvciBvY2N1cnJlZC4gSW4gdGhhdCBjYXNlLFxuICAgIG5vIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGAkdmFsaWRhdG9yc2B9IHdpbGwgcnVuIGFuZCB0aGUgYG5nTW9kZWxgXG4gICAgd2lsbCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAgdW5sZXNzIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH1cbiAgICBpcyBzZXQgdG8gYHRydWVgLiBUaGUgcGFyc2UgZXJyb3IgaXMgc3RvcmVkIGluIGBuZ01vZGVsLiRlcnJvci5wYXJzZWAuXG5cbiAgVGhpcyBzaW1wbGUgZXhhbXBsZSBzaG93cyBhIHBhcnNlciB0aGF0IHdvdWxkIGNvbnZlcnQgdGV4dCBpbnB1dCB2YWx1ZSB0byBsb3dlcmNhc2U6XG4gKiBgYGBqc1xuICogZnVuY3Rpb24gcGFyc2UodmFsdWUpIHtcbiAqICAgaWYgKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gKiAgIH1cbiAqIH1cbiAqIG5nTW9kZWxDb250cm9sbGVyLiRwYXJzZXJzLnB1c2gocGFyc2UpO1xuICogYGBgXG5cbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRmb3JtYXR0ZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxuICAgIHRoZSBib3VuZCBuZ01vZGVsIGV4cHJlc3Npb24gY2hhbmdlcyBwcm9ncmFtbWF0aWNhbGx5LiBUaGUgYCRmb3JtYXR0ZXJzYCBhcmUgbm90IGNhbGxlZCB3aGVuIHRoZVxuICAgIHZhbHVlIG9mIHRoZSBjb250cm9sIGlzIGNoYW5nZWQgYnkgdXNlciBpbnRlcmFjdGlvbi5cblxuICBGb3JtYXR0ZXJzIGFyZSB1c2VkIHRvIGZvcm1hdCAvIGNvbnZlcnQgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRtb2RlbFZhbHVlXG4gICAgYCRtb2RlbFZhbHVlYH0gZm9yIGRpc3BsYXkgaW4gdGhlIGNvbnRyb2wuXG5cbiAgVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIGluIHJldmVyc2UgYXJyYXkgb3JkZXIsIGVhY2ggcGFzc2luZyB0aGUgdmFsdWUgdGhyb3VnaCB0byB0aGVcbiAgICBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgdXNlZCBhcyB0aGUgYWN0dWFsIERPTSB2YWx1ZS5cblxuICBUaGlzIHNpbXBsZSBleGFtcGxlIHNob3dzIGEgZm9ybWF0dGVyIHRoYXQgd291bGQgY29udmVydCB0aGUgbW9kZWwgdmFsdWUgdG8gdXBwZXJjYXNlOlxuXG4gKiBgYGBqc1xuICogZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gKiAgIGlmICh2YWx1ZSkge1xuICogICAgIHJldHVybiB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICogICB9XG4gKiB9XG4gKiBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZm9ybWF0KTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJHZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRvcnMgdGhhdCBhcmUgYXBwbGllZFxuICogICAgICB3aGVuZXZlciB0aGUgbW9kZWwgdmFsdWUgY2hhbmdlcy4gVGhlIGtleSB2YWx1ZSB3aXRoaW4gdGhlIG9iamVjdCByZWZlcnMgdG8gdGhlIG5hbWUgb2YgdGhlXG4gKiAgICAgIHZhbGlkYXRvciB3aGlsZSB0aGUgZnVuY3Rpb24gcmVmZXJzIHRvIHRoZSB2YWxpZGF0aW9uIG9wZXJhdGlvbi4gVGhlIHZhbGlkYXRpb24gb3BlcmF0aW9uIGlzXG4gKiAgICAgIHByb3ZpZGVkIHdpdGggdGhlIG1vZGVsIHZhbHVlIGFzIGFuIGFyZ3VtZW50IGFuZCBtdXN0IHJldHVybiBhIHRydWUgb3IgZmFsc2UgdmFsdWUgZGVwZW5kaW5nXG4gKiAgICAgIG9uIHRoZSByZXNwb25zZSBvZiB0aGF0IHZhbGlkYXRpb24uXG4gKlxuICogYGBganNcbiAqIG5nTW9kZWwuJHZhbGlkYXRvcnMudmFsaWRDaGFyYWN0ZXJzID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gKiAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICogICByZXR1cm4gL1swLTldKy8udGVzdCh2YWx1ZSkgJiZcbiAqICAgICAgICAgIC9bYS16XSsvLnRlc3QodmFsdWUpICYmXG4gKiAgICAgICAgICAvW0EtWl0rLy50ZXN0KHZhbHVlKSAmJlxuICogICAgICAgICAgL1xcVysvLnRlc3QodmFsdWUpO1xuICogfTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJGFzeW5jVmFsaWRhdG9ycyBBIGNvbGxlY3Rpb24gb2YgdmFsaWRhdGlvbnMgdGhhdCBhcmUgZXhwZWN0ZWQgdG9cbiAqICAgICAgcGVyZm9ybSBhbiBhc3luY2hyb25vdXMgdmFsaWRhdGlvbiAoZS5nLiBhIEhUVFAgcmVxdWVzdCkuIFRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uIHRoYXQgaXMgcHJvdmlkZWRcbiAqICAgICAgaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgcHJvbWlzZSB3aGVuIGl0IGlzIHJ1biBkdXJpbmcgdGhlIG1vZGVsIHZhbGlkYXRpb24gcHJvY2Vzcy4gT25jZSB0aGUgcHJvbWlzZVxuICogICAgICBpcyBkZWxpdmVyZWQgdGhlbiB0aGUgdmFsaWRhdGlvbiBzdGF0dXMgd2lsbCBiZSBzZXQgdG8gdHJ1ZSB3aGVuIGZ1bGZpbGxlZCBhbmQgZmFsc2Ugd2hlbiByZWplY3RlZC5cbiAqICAgICAgV2hlbiB0aGUgYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMgYXJlIHRyaWdnZXJlZCwgZWFjaCBvZiB0aGUgdmFsaWRhdG9ycyB3aWxsIHJ1biBpbiBwYXJhbGxlbCBhbmQgdGhlIG1vZGVsXG4gKiAgICAgIHZhbHVlIHdpbGwgb25seSBiZSB1cGRhdGVkIG9uY2UgYWxsIHZhbGlkYXRvcnMgaGF2ZSBiZWVuIGZ1bGZpbGxlZC4gQXMgbG9uZyBhcyBhbiBhc3luY2hyb25vdXMgdmFsaWRhdG9yXG4gKiAgICAgIGlzIHVuZnVsZmlsbGVkLCBpdHMga2V5IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXJzIGAkcGVuZGluZ2AgcHJvcGVydHkuIEFsc28sIGFsbCBhc3luY2hyb25vdXMgdmFsaWRhdG9yc1xuICogICAgICB3aWxsIG9ubHkgcnVuIG9uY2UgYWxsIHN5bmNocm9ub3VzIHZhbGlkYXRvcnMgaGF2ZSBwYXNzZWQuXG4gKlxuICogUGxlYXNlIG5vdGUgdGhhdCBpZiAkaHR0cCBpcyB1c2VkIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRoYXQgdGhlIHNlcnZlciByZXR1cm5zIGEgc3VjY2VzcyBIVFRQIHJlc3BvbnNlIGNvZGVcbiAqIGluIG9yZGVyIHRvIGZ1bGZpbGwgdGhlIHZhbGlkYXRpb24gYW5kIGEgc3RhdHVzIGxldmVsIG9mIGA0eHhgIGluIG9yZGVyIHRvIHJlamVjdCB0aGUgdmFsaWRhdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzLnVuaXF1ZVVzZXJuYW1lID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gKiAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICpcbiAqICAgLy8gTG9va3VwIHVzZXIgYnkgdXNlcm5hbWVcbiAqICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy8nICsgdmFsdWUpLlxuICogICAgICB0aGVuKGZ1bmN0aW9uIHJlc29sdmVkKCkge1xuICogICAgICAgIC8vdXNlcm5hbWUgZXhpc3RzLCB0aGlzIG1lYW5zIHZhbGlkYXRpb24gZmFpbHNcbiAqICAgICAgICByZXR1cm4gJHEucmVqZWN0KCdleGlzdHMnKTtcbiAqICAgICAgfSwgZnVuY3Rpb24gcmVqZWN0ZWQoKSB7XG4gKiAgICAgICAgLy91c2VybmFtZSBkb2VzIG5vdCBleGlzdCwgdGhlcmVmb3JlIHRoaXMgdmFsaWRhdGlvbiBwYXNzZXNcbiAqICAgICAgICByZXR1cm4gdHJ1ZTtcbiAqICAgICAgfSk7XG4gKiB9O1xuICogYGBgXG4gKlxuICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkdmlld0NoYW5nZUxpc3RlbmVycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSB3aGVuZXZlciB0aGVcbiAqICAgICB2aWV3IHZhbHVlIGhhcyBjaGFuZ2VkLiBJdCBpcyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIGlnbm9yZWQuXG4gKiAgICAgVGhpcyBjYW4gYmUgdXNlZCBpbiBwbGFjZSBvZiBhZGRpdGlvbmFsICR3YXRjaGVzIGFnYWluc3QgdGhlIG1vZGVsIHZhbHVlLlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgQW4gb2JqZWN0IGhhc2ggd2l0aCBhbGwgZmFpbGluZyB2YWxpZGF0b3IgaWRzIGFzIGtleXMuXG4gKiBAcHJvcGVydHkge09iamVjdH0gJHBlbmRpbmcgQW4gb2JqZWN0IGhhc2ggd2l0aCBhbGwgcGVuZGluZyB2YWxpZGF0b3IgaWRzIGFzIGtleXMuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdW50b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbm90IGxvc3QgZm9jdXMgeWV0LlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdG91Y2hlZCBUcnVlIGlmIGNvbnRyb2wgaGFzIGxvc3QgZm9jdXMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRwcmlzdGluZSBUcnVlIGlmIHVzZXIgaGFzIG5vdCBpbnRlcmFjdGVkIHdpdGggdGhlIGNvbnRyb2wgeWV0LlxuICogQHByb3BlcnR5IHtib29sZWFufSAkZGlydHkgVHJ1ZSBpZiB1c2VyIGhhcyBhbHJlYWR5IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgdGhlcmUgaXMgbm8gZXJyb3IuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRpbnZhbGlkIFRydWUgaWYgYXQgbGVhc3Qgb25lIGVycm9yIG9uIHRoZSBjb250cm9sLlxuICogQHByb3BlcnR5IHtzdHJpbmd9ICRuYW1lIFRoZSBuYW1lIGF0dHJpYnV0ZSBvZiB0aGUgY29udHJvbC5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgTmdNb2RlbENvbnRyb2xsZXJgIHByb3ZpZGVzIEFQSSBmb3IgdGhlIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0gZGlyZWN0aXZlLlxuICogVGhlIGNvbnRyb2xsZXIgY29udGFpbnMgc2VydmljZXMgZm9yIGRhdGEtYmluZGluZywgdmFsaWRhdGlvbiwgQ1NTIHVwZGF0ZXMsIGFuZCB2YWx1ZSBmb3JtYXR0aW5nXG4gKiBhbmQgcGFyc2luZy4gSXQgcHVycG9zZWZ1bGx5IGRvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljIHdoaWNoIGRlYWxzIHdpdGggRE9NIHJlbmRlcmluZyBvclxuICogbGlzdGVuaW5nIHRvIERPTSBldmVudHMuXG4gKiBTdWNoIERPTSByZWxhdGVkIGxvZ2ljIHNob3VsZCBiZSBwcm92aWRlZCBieSBvdGhlciBkaXJlY3RpdmVzIHdoaWNoIG1ha2UgdXNlIG9mXG4gKiBgTmdNb2RlbENvbnRyb2xsZXJgIGZvciBkYXRhLWJpbmRpbmcgdG8gY29udHJvbCBlbGVtZW50cy5cbiAqIEFuZ3VsYXIgcHJvdmlkZXMgdGhpcyBET00gbG9naWMgZm9yIG1vc3Qge0BsaW5rIGlucHV0IGBpbnB1dGB9IGVsZW1lbnRzLlxuICogQXQgdGhlIGVuZCBvZiB0aGlzIHBhZ2UgeW91IGNhbiBmaW5kIGEge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjY3VzdG9tLWNvbnRyb2wtZXhhbXBsZVxuICogY3VzdG9tIGNvbnRyb2wgZXhhbXBsZX0gdGhhdCB1c2VzIGBuZ01vZGVsQ29udHJvbGxlcmAgdG8gYmluZCB0byBgY29udGVudGVkaXRhYmxlYCBlbGVtZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIEN1c3RvbSBDb250cm9sIEV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBOZ01vZGVsQ29udHJvbGxlcmAgd2l0aCBhIGN1c3RvbSBjb250cm9sIHRvIGFjaGlldmVcbiAqIGRhdGEtYmluZGluZy4gTm90aWNlIGhvdyBkaWZmZXJlbnQgZGlyZWN0aXZlcyAoYGNvbnRlbnRlZGl0YWJsZWAsIGBuZy1tb2RlbGAsIGFuZCBgcmVxdWlyZWRgKVxuICogY29sbGFib3JhdGUgdG9nZXRoZXIgdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCByZXN1bHQuXG4gKlxuICogYGNvbnRlbnRlZGl0YWJsZWAgaXMgYW4gSFRNTDUgYXR0cmlidXRlLCB3aGljaCB0ZWxscyB0aGUgYnJvd3NlciB0byBsZXQgdGhlIGVsZW1lbnRcbiAqIGNvbnRlbnRzIGJlIGVkaXRlZCBpbiBwbGFjZSBieSB0aGUgdXNlci5cbiAqXG4gKiBXZSBhcmUgdXNpbmcgdGhlIHtAbGluayBuZy5zZXJ2aWNlOiRzY2UgJHNjZX0gc2VydmljZSBoZXJlIGFuZCBpbmNsdWRlIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSAkc2FuaXRpemV9XG4gKiBtb2R1bGUgdG8gYXV0b21hdGljYWxseSByZW1vdmUgXCJiYWRcIiBjb250ZW50IGxpa2UgaW5saW5lIGV2ZW50IGxpc3RlbmVyIChlLmcuIGA8c3BhbiBvbmNsaWNrPVwiLi4uXCI+YCkuXG4gKiBIb3dldmVyLCBhcyB3ZSBhcmUgdXNpbmcgYCRzY2VgIHRoZSBtb2RlbCBjYW4gc3RpbGwgZGVjaWRlIHRvIHByb3ZpZGUgdW5zYWZlIGNvbnRlbnQgaWYgaXQgbWFya3NcbiAqIHRoYXQgY29udGVudCB1c2luZyB0aGUgYCRzY2VgIHNlcnZpY2UuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIk5nTW9kZWxDb250cm9sbGVyXCIgbW9kdWxlPVwiY3VzdG9tQ29udHJvbFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgW2NvbnRlbnRlZGl0YWJsZV0ge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDIwcHg7XG4gICAgICB9XG5cbiAgICAgIC5uZy1pbnZhbGlkIHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xuICAgICAgfVxuXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdjdXN0b21Db250cm9sJywgWyduZ1Nhbml0aXplJ10pLlxuICAgICAgICBkaXJlY3RpdmUoJ2NvbnRlbnRlZGl0YWJsZScsIFsnJHNjZScsIGZ1bmN0aW9uKCRzY2UpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJywgLy8gb25seSBhY3RpdmF0ZSBvbiBlbGVtZW50IGF0dHJpYnV0ZVxuICAgICAgICAgICAgcmVxdWlyZTogJz9uZ01vZGVsJywgLy8gZ2V0IGEgaG9sZCBvZiBOZ01vZGVsQ29udHJvbGxlclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG4gICAgICAgICAgICAgIGlmICghbmdNb2RlbCkgcmV0dXJuOyAvLyBkbyBub3RoaW5nIGlmIG5vIG5nLW1vZGVsXG5cbiAgICAgICAgICAgICAgLy8gU3BlY2lmeSBob3cgVUkgc2hvdWxkIGJlIHVwZGF0ZWRcbiAgICAgICAgICAgICAgbmdNb2RlbC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5odG1sKCRzY2UuZ2V0VHJ1c3RlZEh0bWwobmdNb2RlbC4kdmlld1ZhbHVlIHx8ICcnKSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBjaGFuZ2UgZXZlbnRzIHRvIGVuYWJsZSBiaW5kaW5nXG4gICAgICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXIga2V5dXAgY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhyZWFkKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJlYWQoKTsgLy8gaW5pdGlhbGl6ZVxuXG4gICAgICAgICAgICAgIC8vIFdyaXRlIGRhdGEgdG8gdGhlIG1vZGVsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSBlbGVtZW50Lmh0bWwoKTtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIGNsZWFyIHRoZSBjb250ZW50IGVkaXRhYmxlIHRoZSBicm93c2VyIGxlYXZlcyBhIDxicj4gYmVoaW5kXG4gICAgICAgICAgICAgICAgLy8gSWYgc3RyaXAtYnIgYXR0cmlidXRlIGlzIHByb3ZpZGVkIHRoZW4gd2Ugc3RyaXAgdGhpcyBvdXRcbiAgICAgICAgICAgICAgICBpZiAoYXR0cnMuc3RyaXBCciAmJiBodG1sID09PSAnPGJyPicpIHtcbiAgICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGh0bWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICAgICAgIDxkaXYgY29udGVudGVkaXRhYmxlXG4gICAgICAgICAgICBuYW1lPVwibXlXaWRnZXRcIiBuZy1tb2RlbD1cInVzZXJDb250ZW50XCJcbiAgICAgICAgICAgIHN0cmlwLWJyPVwidHJ1ZVwiXG4gICAgICAgICAgICByZXF1aXJlZD5DaGFuZ2UgbWUhPC9kaXY+XG4gICAgICAgIDxzcGFuIG5nLXNob3c9XCJteUZvcm0ubXlXaWRnZXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPlxuICAgICAgIDxocj5cbiAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ1c2VyQ29udGVudFwiIGFyaWEtbGFiZWw9XCJEeW5hbWljIHRleHRhcmVhXCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgIGl0KCdzaG91bGQgZGF0YS1iaW5kIGFuZCBiZWNvbWUgaW52YWxpZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdzYWZhcmknIHx8IGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdmaXJlZm94Jykge1xuICAgICAgICAvLyBTYWZhcmlEcml2ZXIgY2FuJ3QgaGFuZGxlIGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAvLyBhbmQgRmlyZWZveCBkcml2ZXIgY2FuJ3QgY2xlYXIgY29udGVudGVkaXRhYmxlcyB2ZXJ5IHdlbGxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnRlbnRFZGl0YWJsZSA9IGVsZW1lbnQoYnkuY3NzKCdbY29udGVudGVkaXRhYmxlXScpKTtcbiAgICAgIHZhciBjb250ZW50ID0gJ0NoYW5nZSBtZSEnO1xuXG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbChjb250ZW50KTtcblxuICAgICAgY29udGVudEVkaXRhYmxlLmNsZWFyKCk7XG4gICAgICBjb250ZW50RWRpdGFibGUuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuQkFDS19TUEFDRSk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbCgnJyk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvbmctaW52YWxpZC1yZXF1aXJlZC8pO1xuICAgIH0pO1xuICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICovXG5OZ01vZGVsQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRwYXJzZScsICckYW5pbWF0ZScsICckdGltZW91dCcsICckcScsICckaW50ZXJwb2xhdGUnXTtcbmZ1bmN0aW9uIE5nTW9kZWxDb250cm9sbGVyKCRzY29wZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICRhdHRyLCAkZWxlbWVudCwgJHBhcnNlLCAkYW5pbWF0ZSwgJHRpbWVvdXQsICRxLCAkaW50ZXJwb2xhdGUpIHtcbiAgdGhpcy4kdmlld1ZhbHVlID0gTnVtYmVyLk5hTjtcbiAgdGhpcy4kbW9kZWxWYWx1ZSA9IE51bWJlci5OYU47XG4gIHRoaXMuJCRyYXdNb2RlbFZhbHVlID0gdW5kZWZpbmVkOyAvLyBzdG9yZXMgdGhlIHBhcnNlZCBtb2RlbFZhbHVlIC8gbW9kZWwgc2V0IGZyb20gc2NvcGUgcmVnYXJkbGVzcyBvZiB2YWxpZGl0eS5cbiAgdGhpcy4kdmFsaWRhdG9ycyA9IHt9O1xuICB0aGlzLiRhc3luY1ZhbGlkYXRvcnMgPSB7fTtcbiAgdGhpcy4kcGFyc2VycyA9IFtdO1xuICB0aGlzLiRmb3JtYXR0ZXJzID0gW107XG4gIHRoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgdGhpcy4kdW50b3VjaGVkID0gdHJ1ZTtcbiAgdGhpcy4kdG91Y2hlZCA9IGZhbHNlO1xuICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XG4gIHRoaXMuJGRpcnR5ID0gZmFsc2U7XG4gIHRoaXMuJHZhbGlkID0gdHJ1ZTtcbiAgdGhpcy4kaW52YWxpZCA9IGZhbHNlO1xuICB0aGlzLiRlcnJvciA9IHt9OyAvLyBrZWVwIGludmFsaWQga2V5cyBoZXJlXG4gIHRoaXMuJCRzdWNjZXNzID0ge307IC8vIGtlZXAgdmFsaWQga2V5cyBoZXJlXG4gIHRoaXMuJHBlbmRpbmcgPSB1bmRlZmluZWQ7IC8vIGtlZXAgcGVuZGluZyBrZXlzIGhlcmVcbiAgdGhpcy4kbmFtZSA9ICRpbnRlcnBvbGF0ZSgkYXR0ci5uYW1lIHx8ICcnLCBmYWxzZSkoJHNjb3BlKTtcbiAgdGhpcy4kJHBhcmVudEZvcm0gPSBudWxsRm9ybUN0cmw7XG4gIHRoaXMuJG9wdGlvbnMgPSBkZWZhdWx0TW9kZWxPcHRpb25zO1xuXG4gIHRoaXMuJCRwYXJzZWROZ01vZGVsID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwpO1xuICB0aGlzLiQkcGFyc2VkTmdNb2RlbEFzc2lnbiA9IHRoaXMuJCRwYXJzZWROZ01vZGVsLmFzc2lnbjtcbiAgdGhpcy4kJG5nTW9kZWxHZXQgPSB0aGlzLiQkcGFyc2VkTmdNb2RlbDtcbiAgdGhpcy4kJG5nTW9kZWxTZXQgPSB0aGlzLiQkcGFyc2VkTmdNb2RlbEFzc2lnbjtcbiAgdGhpcy4kJHBlbmRpbmdEZWJvdW5jZSA9IG51bGw7XG4gIHRoaXMuJCRwYXJzZXJWYWxpZCA9IHVuZGVmaW5lZDtcblxuICB0aGlzLiQkY3VycmVudFZhbGlkYXRpb25SdW5JZCA9IDA7XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTU4MzNcbiAgLy8gUHJldmVudCBgJCRzY29wZWAgZnJvbSBiZWluZyBpdGVyYXRlZCBvdmVyIGJ5IGBjb3B5YCB3aGVuIE5nTW9kZWxDb250cm9sbGVyIGlzIGRlZXAgd2F0Y2hlZFxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJyQkc2NvcGUnLCB7dmFsdWU6ICRzY29wZX0pO1xuICB0aGlzLiQkYXR0ciA9ICRhdHRyO1xuICB0aGlzLiQkZWxlbWVudCA9ICRlbGVtZW50O1xuICB0aGlzLiQkYW5pbWF0ZSA9ICRhbmltYXRlO1xuICB0aGlzLiQkdGltZW91dCA9ICR0aW1lb3V0O1xuICB0aGlzLiQkcGFyc2UgPSAkcGFyc2U7XG4gIHRoaXMuJCRxID0gJHE7XG4gIHRoaXMuJCRleGNlcHRpb25IYW5kbGVyID0gJGV4Y2VwdGlvbkhhbmRsZXI7XG5cbiAgc2V0dXBWYWxpZGl0eSh0aGlzKTtcbiAgc2V0dXBNb2RlbFdhdGNoZXIodGhpcyk7XG59XG5cbk5nTW9kZWxDb250cm9sbGVyLnByb3RvdHlwZSA9IHtcbiAgJCRpbml0R2V0dGVyU2V0dGVyczogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuJG9wdGlvbnMuZ2V0T3B0aW9uKCdnZXR0ZXJTZXR0ZXInKSkge1xuICAgICAgdmFyIGludm9rZU1vZGVsR2V0dGVyID0gdGhpcy4kJHBhcnNlKHRoaXMuJCRhdHRyLm5nTW9kZWwgKyAnKCknKSxcbiAgICAgICAgICBpbnZva2VNb2RlbFNldHRlciA9IHRoaXMuJCRwYXJzZSh0aGlzLiQkYXR0ci5uZ01vZGVsICsgJygkJCRwKScpO1xuXG4gICAgICB0aGlzLiQkbmdNb2RlbEdldCA9IGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICB2YXIgbW9kZWxWYWx1ZSA9IHRoaXMuJCRwYXJzZWROZ01vZGVsKCRzY29wZSk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgbW9kZWxWYWx1ZSA9IGludm9rZU1vZGVsR2V0dGVyKCRzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gICAgICB9O1xuICAgICAgdGhpcy4kJG5nTW9kZWxTZXQgPSBmdW5jdGlvbigkc2NvcGUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMuJCRwYXJzZWROZ01vZGVsKCRzY29wZSkpKSB7XG4gICAgICAgICAgaW52b2tlTW9kZWxTZXR0ZXIoJHNjb3BlLCB7JCQkcDogbmV3VmFsdWV9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiQkcGFyc2VkTmdNb2RlbEFzc2lnbigkc2NvcGUsIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLiQkcGFyc2VkTmdNb2RlbC5hc3NpZ24pIHtcbiAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ25vbmFzc2lnbicsICdFeHByZXNzaW9uIFxcJ3swfVxcJyBpcyBub24tYXNzaWduYWJsZS4gRWxlbWVudDogezF9JyxcbiAgICAgICAgICB0aGlzLiQkYXR0ci5uZ01vZGVsLCBzdGFydGluZ1RhZyh0aGlzLiQkZWxlbWVudCkpO1xuICAgIH1cbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJlbmRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FsbGVkIHdoZW4gdGhlIHZpZXcgbmVlZHMgdG8gYmUgdXBkYXRlZC4gSXQgaXMgZXhwZWN0ZWQgdGhhdCB0aGUgdXNlciBvZiB0aGUgbmctbW9kZWxcbiAgICogZGlyZWN0aXZlIHdpbGwgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBUaGUgYCRyZW5kZXIoKWAgbWV0aG9kIGlzIGludm9rZWQgaW4gdGhlIGZvbGxvd2luZyBzaXR1YXRpb25zOlxuICAgKlxuICAgKiAqIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgaXMgY2FsbGVkLiAgSWYgd2UgYXJlIHJvbGxpbmcgYmFjayB0aGUgdmlldyB2YWx1ZSB0byB0aGUgbGFzdFxuICAgKiAgIGNvbW1pdHRlZCB2YWx1ZSB0aGVuIGAkcmVuZGVyKClgIGlzIGNhbGxlZCB0byB1cGRhdGUgdGhlIGlucHV0IGNvbnRyb2wuXG4gICAqICogVGhlIHZhbHVlIHJlZmVyZW5jZWQgYnkgYG5nLW1vZGVsYCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIGJvdGggdGhlIGAkbW9kZWxWYWx1ZWAgYW5kXG4gICAqICAgdGhlIGAkdmlld1ZhbHVlYCBhcmUgZGlmZmVyZW50IGZyb20gbGFzdCB0aW1lLlxuICAgKlxuICAgKiBTaW5jZSBgbmctbW9kZWxgIGRvZXMgbm90IGRvIGEgZGVlcCB3YXRjaCwgYCRyZW5kZXIoKWAgaXMgb25seSBpbnZva2VkIGlmIHRoZSB2YWx1ZXMgb2ZcbiAgICogYCRtb2RlbFZhbHVlYCBhbmQgYCR2aWV3VmFsdWVgIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQgZnJvbSB0aGVpciBwcmV2aW91cyB2YWx1ZXMuIElmIGAkbW9kZWxWYWx1ZWBcbiAgICogb3IgYCR2aWV3VmFsdWVgIGFyZSBvYmplY3RzIChyYXRoZXIgdGhhbiBhIHN0cmluZyBvciBudW1iZXIpIHRoZW4gYCRyZW5kZXIoKWAgd2lsbCBub3QgYmVcbiAgICogaW52b2tlZCBpZiB5b3Ugb25seSBjaGFuZ2UgYSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0cy5cbiAgICovXG4gICRyZW5kZXI6IG5vb3AsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB3ZSBuZWVkIHRvIGRldGVybWluZSBpZiB0aGUgdmFsdWUgb2YgYW4gaW5wdXQgaXMgZW1wdHkuXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgdGhlIHJlcXVpcmVkIGRpcmVjdGl2ZSBkb2VzIHRoaXMgdG8gd29yayBvdXQgaWYgdGhlIGlucHV0IGhhcyBkYXRhIG9yIG5vdC5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgYCRpc0VtcHR5YCBmdW5jdGlvbiBjaGVja3Mgd2hldGhlciB0aGUgdmFsdWUgaXMgYHVuZGVmaW5lZGAsIGAnJ2AsIGBudWxsYCBvciBgTmFOYC5cbiAgICpcbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIGZvciBpbnB1dCBkaXJlY3RpdmVzIHdob3NlIGNvbmNlcHQgb2YgYmVpbmcgZW1wdHkgaXMgZGlmZmVyZW50IGZyb20gdGhlXG4gICAqIGRlZmF1bHQuIFRoZSBgY2hlY2tib3hJbnB1dFR5cGVgIGRpcmVjdGl2ZSBkb2VzIHRoaXMgYmVjYXVzZSBpbiBpdHMgY2FzZSBhIHZhbHVlIG9mIGBmYWxzZWBcbiAgICogaW1wbGllcyBlbXB0eS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGlucHV0IHRvIGNoZWNrIGZvciBlbXB0aW5lc3MuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgXCJlbXB0eVwiLlxuICAgKi9cbiAgJGlzRW1wdHk6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTtcbiAgfSxcblxuICAkJHVwZGF0ZUVtcHR5Q2xhc3NlczogZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodGhpcy4kaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgIHRoaXMuJCRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBOT1RfRU1QVFlfQ0xBU1MpO1xuICAgICAgdGhpcy4kJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIEVNUFRZX0NMQVNTKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIEVNUFRZX0NMQVNTKTtcbiAgICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBOT1RfRU1QVFlfQ0xBU1MpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRQcmlzdGluZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmUgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctZGlydHlgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lXG4gICAqIHN0YXRlIChgbmctcHJpc3RpbmVgIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIHByaXN0aW5lIHdoZW4gdGhlIGNvbnRyb2xcbiAgICogaGFzIG5vdCBiZWVuIGNoYW5nZWQgZnJvbSB3aGVuIGZpcnN0IGNvbXBpbGVkLlxuICAgKi9cbiAgJHNldFByaXN0aW5lOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRkaXJ0eSA9IGZhbHNlO1xuICAgIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0RGlydHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIGRpcnR5IHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXByaXN0aW5lYCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0cyBkaXJ0eVxuICAgKiBzdGF0ZSAoYG5nLWRpcnR5YCBjbGFzcykuIEEgbW9kZWwgaXMgY29uc2lkZXJlZCB0byBiZSBkaXJ0eSB3aGVuIHRoZSBjb250cm9sIGhhcyBiZWVuIGNoYW5nZWRcbiAgICogZnJvbSB3aGVuIGZpcnN0IGNvbXBpbGVkLlxuICAgKi9cbiAgJHNldERpcnR5OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRkaXJ0eSA9IHRydWU7XG4gICAgdGhpcy4kcHJpc3RpbmUgPSBmYWxzZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpO1xuICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBESVJUWV9DTEFTUyk7XG4gICAgdGhpcy4kJHBhcmVudEZvcm0uJHNldERpcnR5KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VW50b3VjaGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyB1bnRvdWNoZWQgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctdG91Y2hlZGAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHNcbiAgICogdW50b3VjaGVkIHN0YXRlIChgbmctdW50b3VjaGVkYCBjbGFzcykuIFVwb24gY29tcGlsYXRpb24sIGEgbW9kZWwgaXMgc2V0IGFzIHVudG91Y2hlZFxuICAgKiBieSBkZWZhdWx0LCBob3dldmVyIHRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gcmVzdG9yZSB0aGF0IHN0YXRlIGlmIHRoZSBtb2RlbCBoYXNcbiAgICogYWxyZWFkeSBiZWVuIHRvdWNoZWQgYnkgdGhlIHVzZXIuXG4gICAqL1xuICAkc2V0VW50b3VjaGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiR0b3VjaGVkID0gZmFsc2U7XG4gICAgdGhpcy4kdW50b3VjaGVkID0gdHJ1ZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5zZXRDbGFzcyh0aGlzLiQkZWxlbWVudCwgVU5UT1VDSEVEX0NMQVNTLCBUT1VDSEVEX0NMQVNTKTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRUb3VjaGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyB0b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXVudG91Y2hlZGAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHNcbiAgICogdG91Y2hlZCBzdGF0ZSAoYG5nLXRvdWNoZWRgIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIHRvdWNoZWQgd2hlbiB0aGUgdXNlciBoYXNcbiAgICogZmlyc3QgZm9jdXNlZCB0aGUgY29udHJvbCBlbGVtZW50IGFuZCB0aGVuIHNoaWZ0ZWQgZm9jdXMgYXdheSBmcm9tIHRoZSBjb250cm9sIChibHVyIGV2ZW50KS5cbiAgICovXG4gICRzZXRUb3VjaGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiR0b3VjaGVkID0gdHJ1ZTtcbiAgICB0aGlzLiR1bnRvdWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5zZXRDbGFzcyh0aGlzLiQkZWxlbWVudCwgVE9VQ0hFRF9DTEFTUywgVU5UT1VDSEVEX0NMQVNTKTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FuY2VsIGFuIHVwZGF0ZSBhbmQgcmVzZXQgdGhlIGlucHV0IGVsZW1lbnQncyB2YWx1ZSB0byBwcmV2ZW50IGFuIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYCxcbiAgICogd2hpY2ggbWF5IGJlIGNhdXNlZCBieSBhIHBlbmRpbmcgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIHNvbWVcbiAgICogZnV0dXJlIGV2ZW50LlxuICAgKlxuICAgKiBJZiB5b3UgaGF2ZSBhbiBpbnB1dCB0aGF0IHVzZXMgYG5nLW1vZGVsLW9wdGlvbnNgIHRvIHNldCB1cCBkZWJvdW5jZWQgdXBkYXRlcyBvciB1cGRhdGVzIHRoYXRcbiAgICogZGVwZW5kIG9uIHNwZWNpYWwgZXZlbnRzIHN1Y2ggYXMgYGJsdXJgLCB0aGVyZSBjYW4gYmUgYSBwZXJpb2Qgd2hlbiB0aGUgYCR2aWV3VmFsdWVgIGlzIG91dCBvZlxuICAgKiBzeW5jIHdpdGggdGhlIG5nTW9kZWwncyBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBJbiB0aGlzIGNhc2UsIHlvdSBjYW4gdXNlIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgdG8gbWFudWFsbHkgY2FuY2VsIHRoZSBkZWJvdW5jZWQgLyBmdXR1cmUgdXBkYXRlXG4gICAqIGFuZCByZXNldCB0aGUgaW5wdXQgdG8gdGhlIGxhc3QgY29tbWl0dGVkIHZpZXcgdmFsdWUuXG4gICAqXG4gICAqIEl0IGlzIGFsc28gcG9zc2libGUgdGhhdCB5b3UgcnVuIGludG8gZGlmZmljdWx0aWVzIGlmIHlvdSB0cnkgdG8gdXBkYXRlIHRoZSBuZ01vZGVsJ3MgYCRtb2RlbFZhbHVlYFxuICAgKiBwcm9ncmFtbWF0aWNhbGx5IGJlZm9yZSB0aGVzZSBkZWJvdW5jZWQvZnV0dXJlIGV2ZW50cyBoYXZlIHJlc29sdmVkL29jY3VycmVkLCBiZWNhdXNlIEFuZ3VsYXInc1xuICAgKiBkaXJ0eSBjaGVja2luZyBtZWNoYW5pc20gaXMgbm90IGFibGUgdG8gdGVsbCB3aGV0aGVyIHRoZSBtb2RlbCBoYXMgYWN0dWFsbHkgY2hhbmdlZCBvciBub3QuXG4gICAqXG4gICAqIFRoZSBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBwcm9ncmFtbWF0aWNhbGx5IGNoYW5naW5nIHRoZSBtb2RlbCBvZiBhblxuICAgKiBpbnB1dCB3aGljaCBtYXkgaGF2ZSBzdWNoIGV2ZW50cyBwZW5kaW5nLiBUaGlzIGlzIGltcG9ydGFudCBpbiBvcmRlciB0byBtYWtlIHN1cmUgdGhhdCB0aGVcbiAgICogaW5wdXQgZmllbGQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIG5ldyBtb2RlbCB2YWx1ZSBhbmQgYW55IHBlbmRpbmcgb3BlcmF0aW9ucyBhcmUgY2FuY2VsbGVkLlxuICAgKlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmctbW9kZWwtY2FuY2VsLXVwZGF0ZVwiIG1vZHVsZT1cImNhbmNlbC11cGRhdGUtZXhhbXBsZVwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdjYW5jZWwtdXBkYXRlLWV4YW1wbGUnLCBbXSlcbiAgICpcbiAgICogICAgIC5jb250cm9sbGVyKCdDYW5jZWxVcGRhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAgJHNjb3BlLm1vZGVsID0ge3ZhbHVlMTogJycsIHZhbHVlMjogJyd9O1xuICAgKlxuICAgKiAgICAgICAkc2NvcGUuc2V0RW1wdHkgPSBmdW5jdGlvbihlLCB2YWx1ZSwgcm9sbGJhY2spIHtcbiAgICogICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgKiAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgKiAgICAgICAgICAgaWYgKHJvbGxiYWNrKSB7XG4gICAqICAgICAgICAgICAgICRzY29wZS5teUZvcm1bdmFsdWVdLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgKiAgICAgICAgICAgfVxuICAgKiAgICAgICAgICAgJHNjb3BlLm1vZGVsW3ZhbHVlXSA9ICcnO1xuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgfTtcbiAgICogICAgIH1dKTtcbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkNhbmNlbFVwZGF0ZUNvbnRyb2xsZXJcIj5cbiAgICogICAgICAgPHA+Qm90aCBvZiB0aGVzZSBpbnB1dHMgYXJlIG9ubHkgdXBkYXRlZCBpZiB0aGV5IGFyZSBibHVycmVkLiBIaXR0aW5nIGVzY2FwZSBzaG91bGRcbiAgICogICAgICAgZW1wdHkgdGhlbS4gRm9sbG93IHRoZXNlIHN0ZXBzIGFuZCBvYnNlcnZlIHRoZSBkaWZmZXJlbmNlOjwvcD5cbiAgICogICAgICAgPG9sPlxuICAgKiAgICAgICAgIDxsaT5UeXBlIHNvbWV0aGluZyBpbiB0aGUgaW5wdXQuIFlvdSB3aWxsIHNlZSB0aGF0IHRoZSBtb2RlbCBpcyBub3QgeWV0IHVwZGF0ZWQ8L2xpPlxuICAgKiAgICAgICAgIDxsaT5QcmVzcyB0aGUgRXNjYXBlIGtleS5cbiAgICogICAgICAgICAgIDxvbD5cbiAgICogICAgICAgICAgICAgPGxpPiBJbiB0aGUgZmlyc3QgZXhhbXBsZSwgbm90aGluZyBoYXBwZW5zLCBiZWNhdXNlIHRoZSBtb2RlbCBpcyBhbHJlYWR5ICcnLCBhbmQgbm9cbiAgICogICAgICAgICAgICAgdXBkYXRlIGlzIGRldGVjdGVkLiBJZiB5b3UgYmx1ciB0aGUgaW5wdXQsIHRoZSBtb2RlbCB3aWxsIGJlIHNldCB0byB0aGUgY3VycmVudCB2aWV3LlxuICAgKiAgICAgICAgICAgICA8L2xpPlxuICAgKiAgICAgICAgICAgICA8bGk+IEluIHRoZSBzZWNvbmQgZXhhbXBsZSwgdGhlIHBlbmRpbmcgdXBkYXRlIGlzIGNhbmNlbGxlZCwgYW5kIHRoZSBpbnB1dCBpcyBzZXQgYmFja1xuICAgKiAgICAgICAgICAgICB0byB0aGUgbGFzdCBjb21taXR0ZWQgdmlldyB2YWx1ZSAoJycpLiBCbHVycmluZyB0aGUgaW5wdXQgZG9lcyBub3RoaW5nLlxuICAgKiAgICAgICAgICAgICA8L2xpPlxuICAgKiAgICAgICAgICAgPC9vbD5cbiAgICogICAgICAgICA8L2xpPlxuICAgKiAgICAgICA8L29sPlxuICAgKlxuICAgKiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJyB9XCI+XG4gICAqICAgICAgICAgPGRpdj5cbiAgICogICAgICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvbjFcIj5XaXRob3V0ICRyb2xsYmFja1ZpZXdWYWx1ZSgpOjwvcD5cbiAgICogICAgICAgICAgIDxpbnB1dCBuYW1lPVwidmFsdWUxXCIgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb24xXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZTFcIlxuICAgKiAgICAgICAgICAgICAgICAgIG5nLWtleWRvd249XCJzZXRFbXB0eSgkZXZlbnQsICd2YWx1ZTEnKVwiPlxuICAgKiAgICAgICAgICAgdmFsdWUxOiBcInt7IG1vZGVsLnZhbHVlMSB9fVwiXG4gICAqICAgICAgICAgPC9kaXY+XG4gICAqXG4gICAqICAgICAgICAgPGRpdj5cbiAgICogICAgICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvbjJcIj5XaXRoICRyb2xsYmFja1ZpZXdWYWx1ZSgpOjwvcD5cbiAgICogICAgICAgICAgIDxpbnB1dCBuYW1lPVwidmFsdWUyXCIgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb24yXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZTJcIlxuICAgKiAgICAgICAgICAgICAgICAgIG5nLWtleWRvd249XCJzZXRFbXB0eSgkZXZlbnQsICd2YWx1ZTInLCB0cnVlKVwiPlxuICAgKiAgICAgICAgICAgdmFsdWUyOiBcInt7IG1vZGVsLnZhbHVlMiB9fVwiXG4gICAqICAgICAgICAgPC9kaXY+XG4gICAqICAgICAgIDwvZm9ybT5cbiAgICogICAgIDwvZGl2PlxuICAgKiAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICAgZGl2IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRpdjpudGgtY2hpbGQoMSkge1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzBweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqL1xuICAkcm9sbGJhY2tWaWV3VmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCR0aW1lb3V0LmNhbmNlbCh0aGlzLiQkcGVuZGluZ0RlYm91bmNlKTtcbiAgICB0aGlzLiR2aWV3VmFsdWUgPSB0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICB0aGlzLiRyZW5kZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUnVucyBlYWNoIG9mIHRoZSByZWdpc3RlcmVkIHZhbGlkYXRvcnMgKGZpcnN0IHN5bmNocm9ub3VzIHZhbGlkYXRvcnMgYW5kIHRoZW5cbiAgICogYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMpLlxuICAgKiBJZiB0aGUgdmFsaWRpdHkgY2hhbmdlcyB0byBpbnZhbGlkLCB0aGUgbW9kZWwgd2lsbCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAsXG4gICAqIHVubGVzcyB7QGxpbmsgbmdNb2RlbE9wdGlvbnMgYG5nTW9kZWxPcHRpb25zLmFsbG93SW52YWxpZGB9IGlzIGB0cnVlYC5cbiAgICogSWYgdGhlIHZhbGlkaXR5IGNoYW5nZXMgdG8gdmFsaWQsIGl0IHdpbGwgc2V0IHRoZSBtb2RlbCB0byB0aGUgbGFzdCBhdmFpbGFibGUgdmFsaWRcbiAgICogYCRtb2RlbFZhbHVlYCwgaS5lLiBlaXRoZXIgdGhlIGxhc3QgcGFyc2VkIHZhbHVlIG9yIHRoZSBsYXN0IHZhbHVlIHNldCBmcm9tIHRoZSBzY29wZS5cbiAgICovXG4gICR2YWxpZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gaWdub3JlICR2YWxpZGF0ZSBiZWZvcmUgbW9kZWwgaXMgaW5pdGlhbGl6ZWRcbiAgICBpZiAoaXNOdW1iZXJOYU4odGhpcy4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmlld1ZhbHVlID0gdGhpcy4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgLy8gTm90ZTogd2UgdXNlIHRoZSAkJHJhd01vZGVsVmFsdWUgYXMgJG1vZGVsVmFsdWUgbWlnaHQgaGF2ZSBiZWVuXG4gICAgLy8gc2V0IHRvIHVuZGVmaW5lZCBkdXJpbmcgYSB2aWV3IC0+IG1vZGVsIHVwZGF0ZSB0aGF0IGZvdW5kIHZhbGlkYXRpb25cbiAgICAvLyBlcnJvcnMuIFdlIGNhbid0IHBhcnNlIHRoZSB2aWV3IGhlcmUsIHNpbmNlIHRoYXQgY291bGQgY2hhbmdlXG4gICAgLy8gdGhlIG1vZGVsIGFsdGhvdWdoIG5laXRoZXIgdmlld1ZhbHVlIG5vciB0aGUgbW9kZWwgb24gdGhlIHNjb3BlIGNoYW5nZWRcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IHRoaXMuJCRyYXdNb2RlbFZhbHVlO1xuXG4gICAgdmFyIHByZXZWYWxpZCA9IHRoaXMuJHZhbGlkO1xuICAgIHZhciBwcmV2TW9kZWxWYWx1ZSA9IHRoaXMuJG1vZGVsVmFsdWU7XG5cbiAgICB2YXIgYWxsb3dJbnZhbGlkID0gdGhpcy4kb3B0aW9ucy5nZXRPcHRpb24oJ2FsbG93SW52YWxpZCcpO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHRoaXMuJCRydW5WYWxpZGF0b3JzKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZnVuY3Rpb24oYWxsVmFsaWQpIHtcbiAgICAgIC8vIElmIHRoZXJlIHdhcyBubyBjaGFuZ2UgaW4gdmFsaWRpdHksIGRvbid0IHVwZGF0ZSB0aGUgbW9kZWxcbiAgICAgIC8vIFRoaXMgcHJldmVudHMgY2hhbmdpbmcgYW4gaW52YWxpZCBtb2RlbFZhbHVlIHRvIHVuZGVmaW5lZFxuICAgICAgaWYgKCFhbGxvd0ludmFsaWQgJiYgcHJldlZhbGlkICE9PSBhbGxWYWxpZCkge1xuICAgICAgICAvLyBOb3RlOiBEb24ndCBjaGVjayB0aGlzLiR2YWxpZCBoZXJlLCBhcyB3ZSBjb3VsZCBoYXZlXG4gICAgICAgIC8vIGV4dGVybmFsIHZhbGlkYXRvcnMgKGUuZy4gY2FsY3VsYXRlZCBvbiB0aGUgc2VydmVyKSxcbiAgICAgICAgLy8gdGhhdCBqdXN0IGNhbGwgJHNldFZhbGlkaXR5IGFuZCBuZWVkIHRoZSBtb2RlbCB2YWx1ZVxuICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlaXIgdmFsaWRpdHkuXG4gICAgICAgIHRoYXQuJG1vZGVsVmFsdWUgPSBhbGxWYWxpZCA/IG1vZGVsVmFsdWUgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRoYXQuJG1vZGVsVmFsdWUgIT09IHByZXZNb2RlbFZhbHVlKSB7XG4gICAgICAgICAgdGhhdC4kJHdyaXRlTW9kZWxUb1Njb3BlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAkJHJ1blZhbGlkYXRvcnM6IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZG9uZUNhbGxiYWNrKSB7XG4gICAgdGhpcy4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQrKztcbiAgICB2YXIgbG9jYWxWYWxpZGF0aW9uUnVuSWQgPSB0aGlzLiQkY3VycmVudFZhbGlkYXRpb25SdW5JZDtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAvLyBjaGVjayBwYXJzZXIgZXJyb3JcbiAgICBpZiAoIXByb2Nlc3NQYXJzZUVycm9ycygpKSB7XG4gICAgICB2YWxpZGF0aW9uRG9uZShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghcHJvY2Vzc1N5bmNWYWxpZGF0b3JzKCkpIHtcbiAgICAgIHZhbGlkYXRpb25Eb25lKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvY2Vzc0FzeW5jVmFsaWRhdG9ycygpO1xuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1BhcnNlRXJyb3JzKCkge1xuICAgICAgdmFyIGVycm9yS2V5ID0gdGhhdC4kJHBhcnNlck5hbWUgfHwgJ3BhcnNlJztcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh0aGF0LiQkcGFyc2VyVmFsaWQpKSB7XG4gICAgICAgIHNldFZhbGlkaXR5KGVycm9yS2V5LCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhhdC4kJHBhcnNlclZhbGlkKSB7XG4gICAgICAgICAgZm9yRWFjaCh0aGF0LiR2YWxpZGF0b3JzLCBmdW5jdGlvbih2LCBuYW1lKSB7XG4gICAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3JFYWNoKHRoYXQuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IHRoZSBwYXJzZSBlcnJvciBsYXN0LCB0byBwcmV2ZW50IHVuc2V0dGluZyBpdCwgc2hvdWxkIGEgJHZhbGlkYXRvcnMga2V5ID09IHBhcnNlck5hbWVcbiAgICAgICAgc2V0VmFsaWRpdHkoZXJyb3JLZXksIHRoYXQuJCRwYXJzZXJWYWxpZCk7XG4gICAgICAgIHJldHVybiB0aGF0LiQkcGFyc2VyVmFsaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzU3luY1ZhbGlkYXRvcnMoKSB7XG4gICAgICB2YXIgc3luY1ZhbGlkYXRvcnNWYWxpZCA9IHRydWU7XG4gICAgICBmb3JFYWNoKHRoYXQuJHZhbGlkYXRvcnMsIGZ1bmN0aW9uKHZhbGlkYXRvciwgbmFtZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gQm9vbGVhbih2YWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSk7XG4gICAgICAgIHN5bmNWYWxpZGF0b3JzVmFsaWQgPSBzeW5jVmFsaWRhdG9yc1ZhbGlkICYmIHJlc3VsdDtcbiAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFzeW5jVmFsaWRhdG9yc1ZhbGlkKSB7XG4gICAgICAgIGZvckVhY2godGhhdC4kYXN5bmNWYWxpZGF0b3JzLCBmdW5jdGlvbih2LCBuYW1lKSB7XG4gICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzQXN5bmNWYWxpZGF0b3JzKCkge1xuICAgICAgdmFyIHZhbGlkYXRvclByb21pc2VzID0gW107XG4gICAgICB2YXIgYWxsVmFsaWQgPSB0cnVlO1xuICAgICAgZm9yRWFjaCh0aGF0LiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHZhbGlkYXRvciwgbmFtZSkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpO1xuICAgICAgICBpZiAoIWlzUHJvbWlzZUxpa2UocHJvbWlzZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdub3Byb21pc2UnLFxuICAgICAgICAgICAgJ0V4cGVjdGVkIGFzeW5jaHJvbm91cyB2YWxpZGF0b3IgdG8gcmV0dXJuIGEgcHJvbWlzZSBidXQgZ290IFxcJ3swfVxcJyBpbnN0ZWFkLicsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhbGlkYXRvclByb21pc2VzLnB1c2gocHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHRydWUpO1xuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBhbGxWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIGZhbHNlKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXZhbGlkYXRvclByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICB2YWxpZGF0aW9uRG9uZSh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoYXQuJCRxLmFsbCh2YWxpZGF0b3JQcm9taXNlcykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YWxpZGF0aW9uRG9uZShhbGxWYWxpZCk7XG4gICAgICAgIH0sIG5vb3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpIHtcbiAgICAgIGlmIChsb2NhbFZhbGlkYXRpb25SdW5JZCA9PT0gdGhhdC4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQpIHtcbiAgICAgICAgdGhhdC4kc2V0VmFsaWRpdHkobmFtZSwgaXNWYWxpZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGlvbkRvbmUoYWxsVmFsaWQpIHtcbiAgICAgIGlmIChsb2NhbFZhbGlkYXRpb25SdW5JZCA9PT0gdGhhdC4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQpIHtcblxuICAgICAgICBkb25lQ2FsbGJhY2soYWxsVmFsaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRjb21taXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbW1pdCBhIHBlbmRpbmcgdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIHRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICovXG4gICRjb21taXRWaWV3VmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSB0aGlzLiR2aWV3VmFsdWU7XG5cbiAgICB0aGlzLiQkdGltZW91dC5jYW5jZWwodGhpcy4kJHBlbmRpbmdEZWJvdW5jZSk7XG5cbiAgICAvLyBJZiB0aGUgdmlldyB2YWx1ZSBoYXMgbm90IGNoYW5nZWQgdGhlbiB3ZSBzaG91bGQganVzdCBleGl0LCBleGNlcHQgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlcmUgaXNcbiAgICAvLyBhIG5hdGl2ZSB2YWxpZGF0b3Igb24gdGhlIGVsZW1lbnQuIEluIHRoaXMgY2FzZSB0aGUgdmFsaWRhdGlvbiBzdGF0ZSBtYXkgaGF2ZSBjaGFuZ2VkIGV2ZW4gdGhvdWdoXG4gICAgLy8gdGhlIHZpZXdWYWx1ZSBoYXMgc3RheWVkIGVtcHR5LlxuICAgIGlmICh0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9PT0gdmlld1ZhbHVlICYmICh2aWV3VmFsdWUgIT09ICcnIHx8ICF0aGlzLiQkaGFzTmF0aXZlVmFsaWRhdG9ycykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4kJHVwZGF0ZUVtcHR5Q2xhc3Nlcyh2aWV3VmFsdWUpO1xuICAgIHRoaXMuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID0gdmlld1ZhbHVlO1xuXG4gICAgLy8gY2hhbmdlIHRvIGRpcnR5XG4gICAgaWYgKHRoaXMuJHByaXN0aW5lKSB7XG4gICAgICB0aGlzLiRzZXREaXJ0eSgpO1xuICAgIH1cbiAgICB0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZSgpO1xuICB9LFxuXG4gICQkcGFyc2VBbmRWYWxpZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZXdWYWx1ZSA9IHRoaXMuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlO1xuICAgIHZhciBtb2RlbFZhbHVlID0gdmlld1ZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIHRoaXMuJCRwYXJzZXJWYWxpZCA9IGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpID8gdW5kZWZpbmVkIDogdHJ1ZTtcblxuICAgIGlmICh0aGlzLiQkcGFyc2VyVmFsaWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy4kcGFyc2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb2RlbFZhbHVlID0gdGhpcy4kcGFyc2Vyc1tpXShtb2RlbFZhbHVlKTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy4kJHBhcnNlclZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyTmFOKHRoaXMuJG1vZGVsVmFsdWUpKSB7XG4gICAgICAvLyB0aGlzLiRtb2RlbFZhbHVlIGhhcyBub3QgYmVlbiB0b3VjaGVkIHlldC4uLlxuICAgICAgdGhpcy4kbW9kZWxWYWx1ZSA9IHRoaXMuJCRuZ01vZGVsR2V0KHRoaXMuJCRzY29wZSk7XG4gICAgfVxuICAgIHZhciBwcmV2TW9kZWxWYWx1ZSA9IHRoaXMuJG1vZGVsVmFsdWU7XG4gICAgdmFyIGFsbG93SW52YWxpZCA9IHRoaXMuJG9wdGlvbnMuZ2V0T3B0aW9uKCdhbGxvd0ludmFsaWQnKTtcbiAgICB0aGlzLiQkcmF3TW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG5cbiAgICBpZiAoYWxsb3dJbnZhbGlkKSB7XG4gICAgICB0aGlzLiRtb2RlbFZhbHVlID0gbW9kZWxWYWx1ZTtcbiAgICAgIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCk7XG4gICAgfVxuXG4gICAgLy8gUGFzcyB0aGUgJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlIGhlcmUsIGJlY2F1c2UgdGhlIGNhY2hlZCB2aWV3VmFsdWUgbWlnaHQgYmUgb3V0IG9mIGRhdGUuXG4gICAgLy8gVGhpcyBjYW4gaGFwcGVuIGlmIGUuZy4gJHNldFZpZXdWYWx1ZSBpcyBjYWxsZWQgZnJvbSBpbnNpZGUgYSBwYXJzZXJcbiAgICB0aGlzLiQkcnVuVmFsaWRhdG9ycyhtb2RlbFZhbHVlLCB0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSwgZnVuY3Rpb24oYWxsVmFsaWQpIHtcbiAgICAgIGlmICghYWxsb3dJbnZhbGlkKSB7XG4gICAgICAgIC8vIE5vdGU6IERvbid0IGNoZWNrIHRoaXMuJHZhbGlkIGhlcmUsIGFzIHdlIGNvdWxkIGhhdmVcbiAgICAgICAgLy8gZXh0ZXJuYWwgdmFsaWRhdG9ycyAoZS5nLiBjYWxjdWxhdGVkIG9uIHRoZSBzZXJ2ZXIpLFxuICAgICAgICAvLyB0aGF0IGp1c3QgY2FsbCAkc2V0VmFsaWRpdHkgYW5kIG5lZWQgdGhlIG1vZGVsIHZhbHVlXG4gICAgICAgIC8vIHRvIGNhbGN1bGF0ZSB0aGVpciB2YWxpZGl0eS5cbiAgICAgICAgdGhhdC4kbW9kZWxWYWx1ZSA9IGFsbFZhbGlkID8gbW9kZWxWYWx1ZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgd3JpdGVUb01vZGVsSWZOZWVkZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCkge1xuICAgICAgaWYgKHRoYXQuJG1vZGVsVmFsdWUgIT09IHByZXZNb2RlbFZhbHVlKSB7XG4gICAgICAgIHRoYXQuJCR3cml0ZU1vZGVsVG9TY29wZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAkJHdyaXRlTW9kZWxUb1Njb3BlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkbmdNb2RlbFNldCh0aGlzLiQkc2NvcGUsIHRoaXMuJG1vZGVsVmFsdWUpO1xuICAgIGZvckVhY2godGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgICAgICAgdGhpcy4kJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0Vmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBVcGRhdGUgdGhlIHZpZXcgdmFsdWUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhIGNvbnRyb2wgd2FudHMgdG8gY2hhbmdlIHRoZSB2aWV3IHZhbHVlOyB0eXBpY2FsbHksXG4gICAqIHRoaXMgaXMgZG9uZSBmcm9tIHdpdGhpbiBhIERPTSBldmVudCBoYW5kbGVyLiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9XG4gICAqIGRpcmVjdGl2ZSBjYWxscyBpdCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgY2hhbmdlcyBhbmQge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fVxuICAgKiBjYWxscyBpdCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogV2hlbiBgJHNldFZpZXdWYWx1ZWAgaXMgY2FsbGVkLCB0aGUgbmV3IGB2YWx1ZWAgd2lsbCBiZSBzdGFnZWQgZm9yIGNvbW1pdHRpbmcgdGhyb3VnaCB0aGUgYCRwYXJzZXJzYFxuICAgKiBhbmQgYCR2YWxpZGF0b3JzYCBwaXBlbGluZXMuIElmIHRoZXJlIGFyZSBubyBzcGVjaWFsIHtAbGluayBuZ01vZGVsT3B0aW9uc30gc3BlY2lmaWVkIHRoZW4gdGhlIHN0YWdlZFxuICAgKiB2YWx1ZSBpcyBzZW50IGRpcmVjdGx5IGZvciBwcm9jZXNzaW5nIHRocm91Z2ggdGhlIGAkcGFyc2Vyc2AgcGlwZWxpbmUuIEFmdGVyIHRoaXMsIHRoZSBgJHZhbGlkYXRvcnNgIGFuZFxuICAgKiBgJGFzeW5jVmFsaWRhdG9yc2AgYXJlIGNhbGxlZCBhbmQgdGhlIHZhbHVlIGlzIGFwcGxpZWQgdG8gYCRtb2RlbFZhbHVlYC5cbiAgICogRmluYWxseSwgdGhlIHZhbHVlIGlzIHNldCB0byB0aGUgKipleHByZXNzaW9uKiogc3BlY2lmaWVkIGluIHRoZSBgbmctbW9kZWxgIGF0dHJpYnV0ZSBhbmRcbiAgICogYWxsIHRoZSByZWdpc3RlcmVkIGNoYW5nZSBsaXN0ZW5lcnMsIGluIHRoZSBgJHZpZXdDaGFuZ2VMaXN0ZW5lcnNgIGxpc3QgYXJlIGNhbGxlZC5cbiAgICpcbiAgICogSW4gY2FzZSB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30gZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBgdXBkYXRlT25gXG4gICAqIGFuZCB0aGUgYGRlZmF1bHRgIHRyaWdnZXIgaXMgbm90IGxpc3RlZCwgYWxsIHRob3NlIGFjdGlvbnMgd2lsbCByZW1haW4gcGVuZGluZyB1bnRpbCBvbmUgb2YgdGhlXG4gICAqIGB1cGRhdGVPbmAgZXZlbnRzIGlzIHRyaWdnZXJlZCBvbiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEFsbCB0aGVzZSBhY3Rpb25zIHdpbGwgYmUgZGVib3VuY2VkIGlmIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfVxuICAgKiBkaXJlY3RpdmUgaXMgdXNlZCB3aXRoIGEgY3VzdG9tIGRlYm91bmNlIGZvciB0aGlzIHBhcnRpY3VsYXIgZXZlbnQuXG4gICAqIE5vdGUgdGhhdCBhIGAkZGlnZXN0YCBpcyBvbmx5IHRyaWdnZXJlZCBvbmNlIHRoZSBgdXBkYXRlT25gIGV2ZW50cyBhcmUgZmlyZWQsIG9yIGlmIGBkZWJvdW5jZWBcbiAgICogaXMgc3BlY2lmaWVkLCBvbmNlIHRoZSB0aW1lciBydW5zIG91dC5cbiAgICpcbiAgICogV2hlbiB1c2VkIHdpdGggc3RhbmRhcmQgaW5wdXRzLCB0aGUgdmlldyB2YWx1ZSB3aWxsIGFsd2F5cyBiZSBhIHN0cmluZyAod2hpY2ggaXMgaW4gc29tZSBjYXNlc1xuICAgKiBwYXJzZWQgaW50byBhbm90aGVyIHR5cGUsIHN1Y2ggYXMgYSBgRGF0ZWAgb2JqZWN0IGZvciBgaW5wdXRbZGF0ZV1gLilcbiAgICogSG93ZXZlciwgY3VzdG9tIGNvbnRyb2xzIG1pZ2h0IGFsc28gcGFzcyBvYmplY3RzIHRvIHRoaXMgbWV0aG9kLiBJbiB0aGlzIGNhc2UsIHdlIHNob3VsZCBtYWtlXG4gICAqIGEgY29weSBvZiB0aGUgb2JqZWN0IGJlZm9yZSBwYXNzaW5nIGl0IHRvIGAkc2V0Vmlld1ZhbHVlYC4gVGhpcyBpcyBiZWNhdXNlIGBuZ01vZGVsYCBkb2VzIG5vdFxuICAgKiBwZXJmb3JtIGEgZGVlcCB3YXRjaCBvZiBvYmplY3RzLCBpdCBvbmx5IGxvb2tzIGZvciBhIGNoYW5nZSBvZiBpZGVudGl0eS4gSWYgeW91IG9ubHkgY2hhbmdlXG4gICAqIHRoZSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IHRoZW4gbmdNb2RlbCB3aWxsIG5vdCByZWFsaXplIHRoYXQgdGhlIG9iamVjdCBoYXMgY2hhbmdlZCBhbmRcbiAgICogd2lsbCBub3QgaW52b2tlIHRoZSBgJHBhcnNlcnNgIGFuZCBgJHZhbGlkYXRvcnNgIHBpcGVsaW5lcy4gRm9yIHRoaXMgcmVhc29uLCB5b3Ugc2hvdWxkXG4gICAqIG5vdCBjaGFuZ2UgcHJvcGVydGllcyBvZiB0aGUgY29weSBvbmNlIGl0IGhhcyBiZWVuIHBhc3NlZCB0byBgJHNldFZpZXdWYWx1ZWAuXG4gICAqIE90aGVyd2lzZSB5b3UgbWF5IGNhdXNlIHRoZSBtb2RlbCB2YWx1ZSBvbiB0aGUgc2NvcGUgdG8gY2hhbmdlIGluY29ycmVjdGx5LlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICAgKiBJbiBhbnkgY2FzZSwgdGhlIHZhbHVlIHBhc3NlZCB0byB0aGUgbWV0aG9kIHNob3VsZCBhbHdheXMgcmVmbGVjdCB0aGUgY3VycmVudCB2YWx1ZVxuICAgKiBvZiB0aGUgY29udHJvbC4gRm9yIGV4YW1wbGUsIGlmIHlvdSBhcmUgY2FsbGluZyBgJHNldFZpZXdWYWx1ZWAgZm9yIGFuIGlucHV0IGVsZW1lbnQsXG4gICAqIHlvdSBzaG91bGQgcGFzcyB0aGUgaW5wdXQgRE9NIHZhbHVlLiBPdGhlcndpc2UsIHRoZSBjb250cm9sIGFuZCB0aGUgc2NvcGUgbW9kZWwgYmVjb21lXG4gICAqIG91dCBvZiBzeW5jLiBJdCdzIGFsc28gaW1wb3J0YW50IHRvIG5vdGUgdGhhdCBgJHNldFZpZXdWYWx1ZWAgZG9lcyBub3QgY2FsbCBgJHJlbmRlcmAgb3IgY2hhbmdlXG4gICAqIHRoZSBjb250cm9sJ3MgRE9NIHZhbHVlIGluIGFueSB3YXkuIElmIHdlIHdhbnQgdG8gY2hhbmdlIHRoZSBjb250cm9sJ3MgRE9NIHZhbHVlXG4gICAqIHByb2dyYW1tYXRpY2FsbHksIHdlIHNob3VsZCB1cGRhdGUgdGhlIGBuZ01vZGVsYCBzY29wZSBleHByZXNzaW9uLiBJdHMgbmV3IHZhbHVlIHdpbGwgYmVcbiAgICogcGlja2VkIHVwIGJ5IHRoZSBtb2RlbCBjb250cm9sbGVyLCB3aGljaCB3aWxsIHJ1biBpdCB0aHJvdWdoIHRoZSBgJGZvcm1hdHRlcnNgLCBgJHJlbmRlcmAgaXRcbiAgICogdG8gdXBkYXRlIHRoZSBET00sIGFuZCBmaW5hbGx5IGNhbGwgYCR2YWxpZGF0ZWAgb24gaXQuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIGZyb20gdGhlIHZpZXcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmlnZ2VyIEV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSB1cGRhdGUuXG4gICAqL1xuICAkc2V0Vmlld1ZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgdHJpZ2dlcikge1xuICAgIHRoaXMuJHZpZXdWYWx1ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLiRvcHRpb25zLmdldE9wdGlvbigndXBkYXRlT25EZWZhdWx0JykpIHtcbiAgICAgIHRoaXMuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCh0cmlnZ2VyKTtcbiAgICB9XG4gIH0sXG5cbiAgJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdDogZnVuY3Rpb24odHJpZ2dlcikge1xuICAgIHZhciBkZWJvdW5jZURlbGF5ID0gdGhpcy4kb3B0aW9ucy5nZXRPcHRpb24oJ2RlYm91bmNlJyk7XG5cbiAgICBpZiAoaXNOdW1iZXIoZGVib3VuY2VEZWxheVt0cmlnZ2VyXSkpIHtcbiAgICAgIGRlYm91bmNlRGVsYXkgPSBkZWJvdW5jZURlbGF5W3RyaWdnZXJdO1xuICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZGVib3VuY2VEZWxheVsnZGVmYXVsdCddKSkge1xuICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlRGVsYXlbJ2RlZmF1bHQnXTtcbiAgICB9XG5cbiAgICB0aGlzLiQkdGltZW91dC5jYW5jZWwodGhpcy4kJHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIGlmIChkZWJvdW5jZURlbGF5ID4gMCkgeyAvLyB0aGlzIGZhaWxzIGlmIGRlYm91bmNlRGVsYXkgaXMgYW4gb2JqZWN0XG4gICAgICB0aGlzLiQkcGVuZGluZ0RlYm91bmNlID0gdGhpcy4kJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoYXQuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgfSwgZGVib3VuY2VEZWxheSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLiQkc2NvcGUuJHJvb3QuJCRwaGFzZSkge1xuICAgICAgdGhpcy4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJCRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoYXQuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJG92ZXJyaWRlTW9kZWxPcHRpb25zXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPdmVycmlkZSB0aGUgY3VycmVudCBtb2RlbCBvcHRpb25zIHNldHRpbmdzIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqXG4gICAqIFRoZSBwcmV2aW91cyBgTW9kZWxPcHRpb25zYCB2YWx1ZSB3aWxsIG5vdCBiZSBtb2RpZmllZC4gSW5zdGVhZCwgYVxuICAgKiBuZXcgYE1vZGVsT3B0aW9uc2Agb2JqZWN0IHdpbGwgaW5oZXJpdCBmcm9tIHRoZSBwcmV2aW91cyBvbmUgb3ZlcnJpZGluZ1xuICAgKiBvciBpbmhlcml0aW5nIHNldHRpbmdzIHRoYXQgYXJlIGRlZmluZWQgaW4gdGhlIGdpdmVuIHBhcmFtZXRlci5cbiAgICpcbiAgICogU2VlIHtAbGluayBuZ01vZGVsT3B0aW9uc30gZm9yIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgb3B0aW9ucyBjYW4gYmUgc3BlY2lmaWVkXG4gICAqIGFuZCBob3cgbW9kZWwgb3B0aW9uIGluaGVyaXRhbmNlIHdvcmtzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBhIGhhc2ggb2Ygc2V0dGluZ3MgdG8gb3ZlcnJpZGUgdGhlIHByZXZpb3VzIG9wdGlvbnNcbiAgICpcbiAgICovXG4gICRvdmVycmlkZU1vZGVsT3B0aW9uczogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuJG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zLmNyZWF0ZUNoaWxkKG9wdGlvbnMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzZXR1cE1vZGVsV2F0Y2hlcihjdHJsKSB7XG4gIC8vIG1vZGVsIC0+IHZhbHVlXG4gIC8vIE5vdGU6IHdlIGNhbm5vdCB1c2UgYSBub3JtYWwgc2NvcGUuJHdhdGNoIGFzIHdlIHdhbnQgdG8gZGV0ZWN0IHRoZSBmb2xsb3dpbmc6XG4gIC8vIDEuIHNjb3BlIHZhbHVlIGlzICdhJ1xuICAvLyAyLiB1c2VyIGVudGVycyAnYidcbiAgLy8gMy4gbmctY2hhbmdlIGtpY2tzIGluIGFuZCByZXZlcnRzIHNjb3BlIHZhbHVlIHRvICdhJ1xuICAvLyAgICAtPiBzY29wZSB2YWx1ZSBkaWQgbm90IGNoYW5nZSBzaW5jZSB0aGUgbGFzdCBkaWdlc3QgYXNcbiAgLy8gICAgICAgbmctY2hhbmdlIGV4ZWN1dGVzIGluIGFwcGx5IHBoYXNlXG4gIC8vIDQuIHZpZXcgc2hvdWxkIGJlIGNoYW5nZWQgYmFjayB0byAnYSdcbiAgY3RybC4kJHNjb3BlLiR3YXRjaChmdW5jdGlvbiBuZ01vZGVsV2F0Y2goc2NvcGUpIHtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IGN0cmwuJCRuZ01vZGVsR2V0KHNjb3BlKTtcblxuICAgIC8vIGlmIHNjb3BlIG1vZGVsIHZhbHVlIGFuZCBuZ01vZGVsIHZhbHVlIGFyZSBvdXQgb2Ygc3luY1xuICAgIC8vIFRPRE8ocGVyZik6IHdoeSBub3QgbW92ZSB0aGlzIHRvIHRoZSBhY3Rpb24gZm4/XG4gICAgaWYgKG1vZGVsVmFsdWUgIT09IGN0cmwuJG1vZGVsVmFsdWUgJiZcbiAgICAgICAvLyBjaGVja3MgZm9yIE5hTiBpcyBuZWVkZWQgdG8gYWxsb3cgc2V0dGluZyB0aGUgbW9kZWwgdG8gTmFOIHdoZW4gdGhlcmUncyBhbiBhc3luY1ZhbGlkYXRvclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICAgKGN0cmwuJG1vZGVsVmFsdWUgPT09IGN0cmwuJG1vZGVsVmFsdWUgfHwgbW9kZWxWYWx1ZSA9PT0gbW9kZWxWYWx1ZSlcbiAgICApIHtcbiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBjdHJsLiQkcmF3TW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICBjdHJsLiQkcGFyc2VyVmFsaWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBmb3JtYXR0ZXJzID0gY3RybC4kZm9ybWF0dGVycyxcbiAgICAgICAgICBpZHggPSBmb3JtYXR0ZXJzLmxlbmd0aDtcblxuICAgICAgdmFyIHZpZXdWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICB3aGlsZSAoaWR4LS0pIHtcbiAgICAgICAgdmlld1ZhbHVlID0gZm9ybWF0dGVyc1tpZHhdKHZpZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2aWV3VmFsdWUpIHtcbiAgICAgICAgY3RybC4kJHVwZGF0ZUVtcHR5Q2xhc3Nlcyh2aWV3VmFsdWUpO1xuICAgICAgICBjdHJsLiR2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICAgICAgY3RybC4kcmVuZGVyKCk7XG5cbiAgICAgICAgLy8gSXQgaXMgcG9zc2libGUgdGhhdCBtb2RlbCBhbmQgdmlldyB2YWx1ZSBoYXZlIGJlZW4gdXBkYXRlZCBkdXJpbmcgcmVuZGVyXG4gICAgICAgIGN0cmwuJCRydW5WYWxpZGF0b3JzKGN0cmwuJG1vZGVsVmFsdWUsIGN0cmwuJHZpZXdWYWx1ZSwgbm9vcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZhbGlkaXR5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDaGFuZ2UgdGhlIHZhbGlkaXR5IHN0YXRlLCBhbmQgbm90aWZ5IHRoZSBmb3JtLlxuICpcbiAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgd2l0aGluICRwYXJzZXJzLyRmb3JtYXR0ZXJzIG9yIGEgY3VzdG9tIHZhbGlkYXRpb24gaW1wbGVtZW50YXRpb24uXG4gKiBIb3dldmVyLCBpbiBtb3N0IGNhc2VzIGl0IHNob3VsZCBiZSBzdWZmaWNpZW50IHRvIHVzZSB0aGUgYG5nTW9kZWwuJHZhbGlkYXRvcnNgIGFuZFxuICogYG5nTW9kZWwuJGFzeW5jVmFsaWRhdG9yc2AgY29sbGVjdGlvbnMgd2hpY2ggd2lsbCBjYWxsIGAkc2V0VmFsaWRpdHlgIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGJlIGFzc2lnbmVkXG4gKiAgICAgICAgdG8gZWl0aGVyIGAkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XWAgb3IgYCRwZW5kaW5nW3ZhbGlkYXRpb25FcnJvcktleV1gXG4gKiAgICAgICAgKGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2ApLCBzbyB0aGF0IGl0IGlzIGF2YWlsYWJsZSBmb3IgZGF0YS1iaW5kaW5nLlxuICogICAgICAgIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCBzaG91bGQgYmUgaW4gY2FtZWxDYXNlIGFuZCB3aWxsIGdldCBjb252ZXJ0ZWQgaW50byBkYXNoLWNhc2VcbiAqICAgICAgICBmb3IgY2xhc3MgbmFtZS4gRXhhbXBsZTogYG15RXJyb3JgIHdpbGwgcmVzdWx0IGluIGBuZy12YWxpZC1teS1lcnJvcmAgYW5kIGBuZy1pbnZhbGlkLW15LWVycm9yYFxuICogICAgICAgIGNsYXNzZXMgYW5kIGNhbiBiZSBib3VuZCB0byBhcyBge3sgc29tZUZvcm0uc29tZUNvbnRyb2wuJGVycm9yLm15RXJyb3IgfX1gLlxuICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpLCBpbnZhbGlkIChmYWxzZSksIHBlbmRpbmcgKHVuZGVmaW5lZCksXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgb3Igc2tpcHBlZCAobnVsbCkuIFBlbmRpbmcgaXMgdXNlZCBmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIFNraXBwZWQgaXMgdXNlZCBieSBBbmd1bGFyIHdoZW4gdmFsaWRhdG9ycyBkbyBub3QgcnVuIGJlY2F1c2Ugb2YgcGFyc2UgZXJyb3JzIGFuZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gYCRhc3luY1ZhbGlkYXRvcnNgIGRvIG5vdCBydW4gYmVjYXVzZSBhbnkgb2YgdGhlIGAkdmFsaWRhdG9yc2AgZmFpbGVkLlxuICovXG5hZGRTZXRWYWxpZGl0eU1ldGhvZCh7XG4gIGNsYXp6OiBOZ01vZGVsQ29udHJvbGxlcixcbiAgc2V0OiBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgb2JqZWN0W3Byb3BlcnR5XSA9IHRydWU7XG4gIH0sXG4gIHVuc2V0OiBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gIH1cbn0pO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb2RlbFxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcHJpb3JpdHkgMVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ01vZGVsYCBkaXJlY3RpdmUgYmluZHMgYW4gYGlucHV0YCxgc2VsZWN0YCwgYHRleHRhcmVhYCAob3IgY3VzdG9tIGZvcm0gY29udHJvbCkgdG8gYVxuICogcHJvcGVydHkgb24gdGhlIHNjb3BlIHVzaW5nIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIE5nTW9kZWxDb250cm9sbGVyfSxcbiAqIHdoaWNoIGlzIGNyZWF0ZWQgYW5kIGV4cG9zZWQgYnkgdGhpcyBkaXJlY3RpdmUuXG4gKlxuICogYG5nTW9kZWxgIGlzIHJlc3BvbnNpYmxlIGZvcjpcbiAqXG4gKiAtIEJpbmRpbmcgdGhlIHZpZXcgaW50byB0aGUgbW9kZWwsIHdoaWNoIG90aGVyIGRpcmVjdGl2ZXMgc3VjaCBhcyBgaW5wdXRgLCBgdGV4dGFyZWFgIG9yIGBzZWxlY3RgXG4gKiAgIHJlcXVpcmUuXG4gKiAtIFByb3ZpZGluZyB2YWxpZGF0aW9uIGJlaGF2aW9yIChpLmUuIHJlcXVpcmVkLCBudW1iZXIsIGVtYWlsLCB1cmwpLlxuICogLSBLZWVwaW5nIHRoZSBzdGF0ZSBvZiB0aGUgY29udHJvbCAodmFsaWQvaW52YWxpZCwgZGlydHkvcHJpc3RpbmUsIHRvdWNoZWQvdW50b3VjaGVkLCB2YWxpZGF0aW9uIGVycm9ycykuXG4gKiAtIFNldHRpbmcgcmVsYXRlZCBjc3MgY2xhc3NlcyBvbiB0aGUgZWxlbWVudCAoYG5nLXZhbGlkYCwgYG5nLWludmFsaWRgLCBgbmctZGlydHlgLCBgbmctcHJpc3RpbmVgLCBgbmctdG91Y2hlZGAsXG4gKiAgIGBuZy11bnRvdWNoZWRgLCBgbmctZW1wdHlgLCBgbmctbm90LWVtcHR5YCkgaW5jbHVkaW5nIGFuaW1hdGlvbnMuXG4gKiAtIFJlZ2lzdGVyaW5nIHRoZSBjb250cm9sIHdpdGggaXRzIHBhcmVudCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0uXG4gKlxuICogTm90ZTogYG5nTW9kZWxgIHdpbGwgdHJ5IHRvIGJpbmQgdG8gdGhlIHByb3BlcnR5IGdpdmVuIGJ5IGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24gb24gdGhlXG4gKiBjdXJyZW50IHNjb3BlLiBJZiB0aGUgcHJvcGVydHkgZG9lc24ndCBhbHJlYWR5IGV4aXN0IG9uIHRoaXMgc2NvcGUsIGl0IHdpbGwgYmUgY3JlYXRlZFxuICogaW1wbGljaXRseSBhbmQgYWRkZWQgdG8gdGhlIHNjb3BlLlxuICpcbiAqIEZvciBiZXN0IHByYWN0aWNlcyBvbiB1c2luZyBgbmdNb2RlbGAsIHNlZTpcbiAqXG4gKiAgLSBbVW5kZXJzdGFuZGluZyBTY29wZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9VbmRlcnN0YW5kaW5nLVNjb3BlcylcbiAqXG4gKiBGb3IgYmFzaWMgZXhhbXBsZXMsIGhvdyB0byB1c2UgYG5nTW9kZWxgLCBzZWU6XG4gKlxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3RleHRdIHRleHR9XG4gKiAgICAtIHtAbGluayBpbnB1dFtjaGVja2JveF0gY2hlY2tib3h9XG4gKiAgICAtIHtAbGluayBpbnB1dFtyYWRpb10gcmFkaW99XG4gKiAgICAtIHtAbGluayBpbnB1dFtudW1iZXJdIG51bWJlcn1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2VtYWlsXSBlbWFpbH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3VybF0gdXJsfVxuICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZV0gZGF0ZX1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2RhdGV0aW1lLWxvY2FsXSBkYXRldGltZS1sb2NhbH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3RpbWVdIHRpbWV9XG4gKiAgICAtIHtAbGluayBpbnB1dFttb250aF0gbW9udGh9XG4gKiAgICAtIHtAbGluayBpbnB1dFt3ZWVrXSB3ZWVrfVxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fVxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTp0ZXh0YXJlYSB0ZXh0YXJlYX1cbiAqXG4gKiAjIENvbXBsZXggTW9kZWxzIChvYmplY3RzIG9yIGNvbGxlY3Rpb25zKVxuICpcbiAqIEJ5IGRlZmF1bHQsIGBuZ01vZGVsYCB3YXRjaGVzIHRoZSBtb2RlbCBieSByZWZlcmVuY2UsIG5vdCB2YWx1ZS4gVGhpcyBpcyBpbXBvcnRhbnQgdG8ga25vdyB3aGVuXG4gKiBiaW5kaW5nIGlucHV0cyB0byBtb2RlbHMgdGhhdCBhcmUgb2JqZWN0cyAoZS5nLiBgRGF0ZWApIG9yIGNvbGxlY3Rpb25zIChlLmcuIGFycmF5cykuIElmIG9ubHkgcHJvcGVydGllcyBvZiB0aGVcbiAqIG9iamVjdCBvciBjb2xsZWN0aW9uIGNoYW5nZSwgYG5nTW9kZWxgIHdpbGwgbm90IGJlIG5vdGlmaWVkIGFuZCBzbyB0aGUgaW5wdXQgd2lsbCBub3QgYmUgIHJlLXJlbmRlcmVkLlxuICpcbiAqIFRoZSBtb2RlbCBtdXN0IGJlIGFzc2lnbmVkIGFuIGVudGlyZWx5IG5ldyBvYmplY3Qgb3IgY29sbGVjdGlvbiBiZWZvcmUgYSByZS1yZW5kZXJpbmcgd2lsbCBvY2N1ci5cbiAqXG4gKiBTb21lIGRpcmVjdGl2ZXMgaGF2ZSBvcHRpb25zIHRoYXQgd2lsbCBjYXVzZSB0aGVtIHRvIHVzZSBhIGN1c3RvbSBgJHdhdGNoQ29sbGVjdGlvbmAgb24gdGhlIG1vZGVsIGV4cHJlc3Npb25cbiAqIC0gZm9yIGV4YW1wbGUsIGBuZ09wdGlvbnNgIHdpbGwgZG8gc28gd2hlbiBhIGB0cmFjayBieWAgY2xhdXNlIGlzIGluY2x1ZGVkIGluIHRoZSBjb21wcmVoZW5zaW9uIGV4cHJlc3Npb24gb3JcbiAqIGlmIHRoZSBzZWxlY3QgaXMgZ2l2ZW4gdGhlIGBtdWx0aXBsZWAgYXR0cmlidXRlLlxuICpcbiAqIFRoZSBgJHdhdGNoQ29sbGVjdGlvbigpYCBtZXRob2Qgb25seSBkb2VzIGEgc2hhbGxvdyBjb21wYXJpc29uLCBtZWFuaW5nIHRoYXQgY2hhbmdpbmcgcHJvcGVydGllcyBkZWVwZXIgdGhhbiB0aGVcbiAqIGZpcnN0IGxldmVsIG9mIHRoZSBvYmplY3QgKG9yIG9ubHkgY2hhbmdpbmcgdGhlIHByb3BlcnRpZXMgb2YgYW4gaXRlbSBpbiB0aGUgY29sbGVjdGlvbiBpZiBpdCdzIGFuIGFycmF5KSB3aWxsIHN0aWxsXG4gKiBub3QgdHJpZ2dlciBhIHJlLXJlbmRlcmluZyBvZiB0aGUgbW9kZWwuXG4gKlxuICogIyBDU1MgY2xhc3Nlc1xuICogVGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQgb24gdGhlIGFzc29jaWF0ZWQgaW5wdXQvc2VsZWN0L3RleHRhcmVhIGVsZW1lbnRcbiAqIGRlcGVuZGluZyBvbiB0aGUgdmFsaWRpdHkgb2YgdGhlIG1vZGVsLlxuICpcbiAqICAtIGBuZy12YWxpZGA6IHRoZSBtb2RlbCBpcyB2YWxpZFxuICogIC0gYG5nLWludmFsaWRgOiB0aGUgbW9kZWwgaXMgaW52YWxpZFxuICogIC0gYG5nLXZhbGlkLVtrZXldYDogZm9yIGVhY2ggdmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gKiAgLSBgbmctaW52YWxpZC1ba2V5XWA6IGZvciBlYWNoIGludmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gKiAgLSBgbmctcHJpc3RpbmVgOiB0aGUgY29udHJvbCBoYXNuJ3QgYmVlbiBpbnRlcmFjdGVkIHdpdGggeWV0XG4gKiAgLSBgbmctZGlydHlgOiB0aGUgY29udHJvbCBoYXMgYmVlbiBpbnRlcmFjdGVkIHdpdGhcbiAqICAtIGBuZy10b3VjaGVkYDogdGhlIGNvbnRyb2wgaGFzIGJlZW4gYmx1cnJlZFxuICogIC0gYG5nLXVudG91Y2hlZGA6IHRoZSBjb250cm9sIGhhc24ndCBiZWVuIGJsdXJyZWRcbiAqICAtIGBuZy1wZW5kaW5nYDogYW55IGAkYXN5bmNWYWxpZGF0b3JzYCBhcmUgdW5mdWxmaWxsZWRcbiAqICAtIGBuZy1lbXB0eWA6IHRoZSB2aWV3IGRvZXMgbm90IGNvbnRhaW4gYSB2YWx1ZSBvciB0aGUgdmFsdWUgaXMgZGVlbWVkIFwiZW1wdHlcIiwgYXMgZGVmaW5lZFxuICogICAgIGJ5IHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eX0gbWV0aG9kXG4gKiAgLSBgbmctbm90LWVtcHR5YDogdGhlIHZpZXcgY29udGFpbnMgYSBub24tZW1wdHkgdmFsdWVcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBuZ0FuaW1hdGUgY2FuIGRldGVjdCBlYWNoIG9mIHRoZXNlIGNsYXNzZXMgd2hlbiBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqXG4gKiAjIyBBbmltYXRpb24gSG9va3NcbiAqXG4gKiBBbmltYXRpb25zIHdpdGhpbiBtb2RlbHMgYXJlIHRyaWdnZXJlZCB3aGVuIGFueSBvZiB0aGUgYXNzb2NpYXRlZCBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWRcbiAqIG9uIHRoZSBpbnB1dCBlbGVtZW50IHdoaWNoIGlzIGF0dGFjaGVkIHRvIHRoZSBtb2RlbC4gVGhlc2UgY2xhc3NlcyBpbmNsdWRlOiBgLm5nLXByaXN0aW5lYCwgYC5uZy1kaXJ0eWAsXG4gKiBgLm5nLWludmFsaWRgIGFuZCBgLm5nLXZhbGlkYCBhcyB3ZWxsIGFzIGFueSBvdGhlciB2YWxpZGF0aW9ucyB0aGF0IGFyZSBwZXJmb3JtZWQgb24gdGhlIG1vZGVsIGl0c2VsZi5cbiAqIFRoZSBhbmltYXRpb25zIHRoYXQgYXJlIHRyaWdnZXJlZCB3aXRoaW4gbmdNb2RlbCBhcmUgc2ltaWxhciB0byBob3cgdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kXG4gKiBhbmltYXRpb25zIGNhbiBiZSBob29rZWQgaW50byB1c2luZyBDU1MgdHJhbnNpdGlvbnMsIGtleWZyYW1lcyBhcyB3ZWxsIGFzIEpTIGFuaW1hdGlvbnMuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhbiBpbnB1dCBlbGVtZW50XG4gKiB0aGF0IGhhcyBiZWVuIHJlbmRlcmVkIGFzIGludmFsaWQgYWZ0ZXIgaXQgaGFzIGJlZW4gdmFsaWRhdGVkOlxuICpcbiAqIDxwcmU+XG4gKiAvL2JlIHN1cmUgdG8gaW5jbHVkZSBuZ0FuaW1hdGUgYXMgYSBtb2R1bGUgdG8gaG9vayBpbnRvIG1vcmVcbiAqIC8vYWR2YW5jZWQgYW5pbWF0aW9uc1xuICogLm15LWlucHV0IHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICogfVxuICogLm15LWlucHV0Lm5nLWludmFsaWQge1xuICogICBiYWNrZ3JvdW5kOiByZWQ7XG4gKiAgIGNvbG9yOndoaXRlO1xuICogfVxuICogPC9wcmU+XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiaW5wdXRFeGFtcGxlXCIgbmFtZT1cIm5nLW1vZGVsXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2lucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUudmFsID0gJzEnO1xuICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgICAubXktaW5wdXQge1xuICAgICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICB9XG4gICAgICAgICAubXktaW5wdXQubmctaW52YWxpZCB7XG4gICAgICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gICAgICAgICB9XG4gICAgICAgPC9zdHlsZT5cbiAgICAgICA8cCBpZD1cImlucHV0RGVzY3JpcHRpb25cIj5cbiAgICAgICAgVXBkYXRlIGlucHV0IHRvIHNlZSB0cmFuc2l0aW9ucyB3aGVuIHZhbGlkL2ludmFsaWQuXG4gICAgICAgIEludGVnZXIgaXMgYSB2YWxpZCB2YWx1ZS5cbiAgICAgICA8L3A+XG4gICAgICAgPGZvcm0gbmFtZT1cInRlc3RGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ2YWxcIiBuZy1wYXR0ZXJuPVwiL15cXGQrJC9cIiBuYW1lPVwiYW5pbVwiIGNsYXNzPVwibXktaW5wdXRcIlxuICAgICAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dERlc2NyaXB0aW9uXCIgLz5cbiAgICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiAjIyBCaW5kaW5nIHRvIGEgZ2V0dGVyL3NldHRlclxuICpcbiAqIFNvbWV0aW1lcyBpdCdzIGhlbHBmdWwgdG8gYmluZCBgbmdNb2RlbGAgdG8gYSBnZXR0ZXIvc2V0dGVyIGZ1bmN0aW9uLiAgQSBnZXR0ZXIvc2V0dGVyIGlzIGFcbiAqIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCB3aGVuIGNhbGxlZCB3aXRoIHplcm8gYXJndW1lbnRzLCBhbmQgc2V0c1xuICogdGhlIGludGVybmFsIHN0YXRlIG9mIGEgbW9kZWwgd2hlbiBjYWxsZWQgd2l0aCBhbiBhcmd1bWVudC4gSXQncyBzb21ldGltZXMgdXNlZnVsIHRvIHVzZSB0aGlzXG4gKiBmb3IgbW9kZWxzIHRoYXQgaGF2ZSBhbiBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiB0aGF0J3MgZGlmZmVyZW50IGZyb20gd2hhdCB0aGUgbW9kZWwgZXhwb3Nlc1xuICogdG8gdGhlIHZpZXcuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAqICoqQmVzdCBQcmFjdGljZToqKiBJdCdzIGJlc3QgdG8ga2VlcCBnZXR0ZXJzIGZhc3QgYmVjYXVzZSBBbmd1bGFyIGlzIGxpa2VseSB0byBjYWxsIHRoZW0gbW9yZVxuICogZnJlcXVlbnRseSB0aGFuIG90aGVyIHBhcnRzIG9mIHlvdXIgY29kZS5cbiAqIDwvZGl2PlxuICpcbiAqIFlvdSB1c2UgdGhpcyBiZWhhdmlvciBieSBhZGRpbmcgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCJgIHRvIGFuIGVsZW1lbnQgdGhhdFxuICogaGFzIGBuZy1tb2RlbGAgYXR0YWNoZWQgdG8gaXQuIFlvdSBjYW4gYWxzbyBhZGQgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCJgIHRvXG4gKiBhIGA8Zm9ybT5gLCB3aGljaCB3aWxsIGVuYWJsZSB0aGlzIGJlaGF2aW9yIGZvciBhbGwgYDxpbnB1dD5gcyB3aXRoaW4gaXQuIFNlZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnNgfSBmb3IgbW9yZS5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBgbmdNb2RlbGAgd2l0aCBhIGdldHRlci9zZXR0ZXI6XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsLWdldHRlci1zZXR0ZXJcIiBtb2R1bGU9XCJnZXR0ZXJTZXR0ZXJFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgICAgICAgICA8bGFiZWw+TmFtZTpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCIgLz5cbiAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZSgpXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgdmFyIF9uYW1lID0gJ0JyaWFuJztcbiAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gICAgICAgICAgICAgbmFtZTogZnVuY3Rpb24obmV3TmFtZSkge1xuICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgbmV3TmFtZSBjYW4gYmUgdW5kZWZpbmVkIGZvciB0d28gcmVhc29uczpcbiAgICAgICAgICAgICAgLy8gMS4gQmVjYXVzZSBpdCBpcyBjYWxsZWQgYXMgYSBnZXR0ZXIgYW5kIHRodXMgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzXG4gICAgICAgICAgICAgIC8vIDIuIEJlY2F1c2UgdGhlIHByb3BlcnR5IHNob3VsZCBhY3R1YWxseSBiZSBzZXQgdG8gdW5kZWZpbmVkLiBUaGlzIGhhcHBlbnMgZS5nLiBpZiB0aGVcbiAgICAgICAgICAgICAgLy8gICAgaW5wdXQgaXMgaW52YWxpZFxuICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfbmFtZSA9IG5ld05hbWUpIDogX25hbWU7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9O1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ01vZGVsRGlyZWN0aXZlID0gWyckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ14/Zm9ybScsICdeP25nTW9kZWxPcHRpb25zJ10sXG4gICAgY29udHJvbGxlcjogTmdNb2RlbENvbnRyb2xsZXIsXG4gICAgLy8gUHJlbGluayBuZWVkcyB0byBydW4gYmVmb3JlIGFueSBpbnB1dCBkaXJlY3RpdmVcbiAgICAvLyBzbyB0aGF0IHdlIGNhbiBzZXQgdGhlIE5nTW9kZWxPcHRpb25zIGluIE5nTW9kZWxDb250cm9sbGVyXG4gICAgLy8gYmVmb3JlIGFueW9uZSBlbHNlIHVzZXMgaXQuXG4gICAgcHJpb3JpdHk6IDEsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdNb2RlbENvbXBpbGUoZWxlbWVudCkge1xuICAgICAgLy8gU2V0dXAgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgY29udHJvbFxuICAgICAgZWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoVU5UT1VDSEVEX0NMQVNTKS5hZGRDbGFzcyhWQUxJRF9DTEFTUyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZTogZnVuY3Rpb24gbmdNb2RlbFByZUxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdLFxuICAgICAgICAgICAgICBmb3JtQ3RybCA9IGN0cmxzWzFdIHx8IG1vZGVsQ3RybC4kJHBhcmVudEZvcm0sXG4gICAgICAgICAgICAgIG9wdGlvbnNDdHJsID0gY3RybHNbMl07XG5cbiAgICAgICAgICBpZiAob3B0aW9uc0N0cmwpIHtcbiAgICAgICAgICAgIG1vZGVsQ3RybC4kb3B0aW9ucyA9IG9wdGlvbnNDdHJsLiRvcHRpb25zO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vZGVsQ3RybC4kJGluaXRHZXR0ZXJTZXR0ZXJzKCk7XG5cbiAgICAgICAgICAvLyBub3RpZnkgb3RoZXJzLCBlc3BlY2lhbGx5IHBhcmVudCBmb3Jtc1xuICAgICAgICAgIGZvcm1DdHJsLiRhZGRDb250cm9sKG1vZGVsQ3RybCk7XG5cbiAgICAgICAgICBhdHRyLiRvYnNlcnZlKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChtb2RlbEN0cmwuJG5hbWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIG1vZGVsQ3RybC4kJHBhcmVudEZvcm0uJCRyZW5hbWVDb250cm9sKG1vZGVsQ3RybCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbW9kZWxDdHJsLiQkcGFyZW50Rm9ybS4kcmVtb3ZlQ29udHJvbChtb2RlbEN0cmwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0OiBmdW5jdGlvbiBuZ01vZGVsUG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdO1xuICAgICAgICAgIGlmIChtb2RlbEN0cmwuJG9wdGlvbnMuZ2V0T3B0aW9uKCd1cGRhdGVPbicpKSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKG1vZGVsQ3RybC4kb3B0aW9ucy5nZXRPcHRpb24oJ3VwZGF0ZU9uJyksIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgIG1vZGVsQ3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGV2ICYmIGV2LnR5cGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gc2V0VG91Y2hlZCgpIHtcbiAgICAgICAgICAgIG1vZGVsQ3RybC4kc2V0VG91Y2hlZCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChtb2RlbEN0cmwuJHRvdWNoZWQpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKHNldFRvdWNoZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KHNldFRvdWNoZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKiBleHBvcnRlZCBkZWZhdWx0TW9kZWxPcHRpb25zICovXG52YXIgZGVmYXVsdE1vZGVsT3B0aW9ucztcbnZhciBERUZBVUxUX1JFR0VYUCA9IC8oXFxzK3xeKWRlZmF1bHQoXFxzK3wkKS87XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIE1vZGVsT3B0aW9uc1xuICogQGRlc2NyaXB0aW9uXG4gKiBBIGNvbnRhaW5lciBmb3IgdGhlIG9wdGlvbnMgc2V0IGJ5IHRoZSB7QGxpbmsgbmdNb2RlbE9wdGlvbnN9IGRpcmVjdGl2ZVxuICovXG5mdW5jdGlvbiBNb2RlbE9wdGlvbnMob3B0aW9ucykge1xuICB0aGlzLiQkb3B0aW9ucyA9IG9wdGlvbnM7XG59XG5cbk1vZGVsT3B0aW9ucy5wcm90b3R5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgTW9kZWxPcHRpb25zI2dldE9wdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgb3B0aW9uIHRvIHJldHJpZXZlXG4gICAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgb2YgdGhlIG9wdGlvblxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIG9wdGlvblxuICAgKi9cbiAgZ2V0T3B0aW9uOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuJCRvcHRpb25zW25hbWVdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIE1vZGVsT3B0aW9ucyNjcmVhdGVDaGlsZFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBhIGhhc2ggb2Ygb3B0aW9ucyBmb3IgdGhlIG5ldyBjaGlsZCB0aGF0IHdpbGwgb3ZlcnJpZGUgdGhlIHBhcmVudCdzIG9wdGlvbnNcbiAgICogQHJldHVybiB7TW9kZWxPcHRpb25zfSBhIG5ldyBgTW9kZWxPcHRpb25zYCBvYmplY3QgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAgICovXG4gIGNyZWF0ZUNoaWxkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGluaGVyaXRBbGwgPSBmYWxzZTtcblxuICAgIC8vIG1ha2UgYSBzaGFsbG93IGNvcHlcbiAgICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcblxuICAgIC8vIEluaGVyaXQgb3B0aW9ucyBmcm9tIHRoZSBwYXJlbnQgaWYgc3BlY2lmaWVkIGJ5IHRoZSB2YWx1ZSBgXCIkaW5oZXJpdFwiYFxuICAgIGZvckVhY2gob3B0aW9ucywgLyogQHRoaXMgKi8gZnVuY3Rpb24ob3B0aW9uLCBrZXkpIHtcbiAgICAgIGlmIChvcHRpb24gPT09ICckaW5oZXJpdCcpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJyonKSB7XG4gICAgICAgICAgaW5oZXJpdEFsbCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9uc1trZXldID0gdGhpcy4kJG9wdGlvbnNba2V5XTtcbiAgICAgICAgICAvLyBgdXBkYXRlT25gIGlzIHNwZWNpYWwgc28gd2UgbXVzdCBhbHNvIGluaGVyaXQgdGhlIGB1cGRhdGVPbkRlZmF1bHRgIG9wdGlvblxuICAgICAgICAgIGlmIChrZXkgPT09ICd1cGRhdGVPbicpIHtcbiAgICAgICAgICAgIG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gdGhpcy4kJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ3VwZGF0ZU9uJykge1xuICAgICAgICAgIC8vIElmIHRoZSBgdXBkYXRlT25gIHByb3BlcnR5IGNvbnRhaW5zIHRoZSBgZGVmYXVsdGAgZXZlbnQgdGhlbiB3ZSBoYXZlIHRvIHJlbW92ZVxuICAgICAgICAgIC8vIGl0IGZyb20gdGhlIGV2ZW50IGxpc3QgYW5kIHNldCB0aGUgYHVwZGF0ZU9uRGVmYXVsdGAgZmxhZy5cbiAgICAgICAgICBvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IGZhbHNlO1xuICAgICAgICAgIG9wdGlvbnNba2V5XSA9IHRyaW0ob3B0aW9uLnJlcGxhY2UoREVGQVVMVF9SRUdFWFAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuICcgJztcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcblxuICAgIGlmIChpbmhlcml0QWxsKSB7XG4gICAgICAvLyBXZSBoYXZlIGEgcHJvcGVydHkgb2YgdGhlIGZvcm06IGBcIipcIjogXCIkaW5oZXJpdFwiYFxuICAgICAgZGVsZXRlIG9wdGlvbnNbJyonXTtcbiAgICAgIGRlZmF1bHRzKG9wdGlvbnMsIHRoaXMuJCRvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5IGFkZCBpbiBhbnkgbWlzc2luZyBkZWZhdWx0c1xuICAgIGRlZmF1bHRzKG9wdGlvbnMsIGRlZmF1bHRNb2RlbE9wdGlvbnMuJCRvcHRpb25zKTtcblxuICAgIHJldHVybiBuZXcgTW9kZWxPcHRpb25zKG9wdGlvbnMpO1xuICB9XG59O1xuXG5cbmRlZmF1bHRNb2RlbE9wdGlvbnMgPSBuZXcgTW9kZWxPcHRpb25zKHtcbiAgdXBkYXRlT246ICcnLFxuICB1cGRhdGVPbkRlZmF1bHQ6IHRydWUsXG4gIGRlYm91bmNlOiAwLFxuICBnZXR0ZXJTZXR0ZXI6IGZhbHNlLFxuICBhbGxvd0ludmFsaWQ6IGZhbHNlLFxuICB0aW1lem9uZTogbnVsbFxufSk7XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vZGVsT3B0aW9uc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBtb2RpZnkgdGhlIGJlaGF2aW91ciBvZiB7QGxpbmsgbmdNb2RlbH0gZGlyZWN0aXZlcyB3aXRoaW4geW91clxuICogYXBwbGljYXRpb24uIFlvdSBjYW4gc3BlY2lmeSBhbiBgbmdNb2RlbE9wdGlvbnNgIGRpcmVjdGl2ZSBvbiBhbnkgZWxlbWVudC4gQWxsIHtAbGluayBuZ01vZGVsfVxuICogZGlyZWN0aXZlcyB3aWxsIHVzZSB0aGUgb3B0aW9ucyBvZiB0aGVpciBuZWFyZXN0IGBuZ01vZGVsT3B0aW9uc2AgYW5jZXN0b3IuXG4gKlxuICogVGhlIGBuZ01vZGVsT3B0aW9uc2Agc2V0dGluZ3MgYXJlIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgZGlyZWN0aXZlIGFzXG4gKiBhbiBBbmd1bGFyIGV4cHJlc3Npb24uIFRoaXMgZXhwcmVzc2lvbiBzaG91bGQgZXZhbHVhdGUgdG8gYW4gb2JqZWN0LCB3aG9zZSBwcm9wZXJ0aWVzIGNvbnRhaW5cbiAqIHRoZSBzZXR0aW5ncy4gRm9yIGV4YW1wbGU6IGA8ZGl2IFwibmctbW9kZWwtb3B0aW9uc1wiPVwieyBkZWJvdW5jZTogMTAwIH1cImAuXG4gKlxuICogIyMgSW5oZXJpdGluZyBPcHRpb25zXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IHRoYXQgYW4gYG5nTW9kZWxPcHRpb25zYCBzZXR0aW5nIHNob3VsZCBiZSBpbmhlcml0ZWQgZnJvbSBhIHBhcmVudCBgbmdNb2RlbE9wdGlvbnNgXG4gKiBkaXJlY3RpdmUgYnkgZ2l2aW5nIGl0IHRoZSB2YWx1ZSBvZiBgXCIkaW5oZXJpdFwiYC5cbiAqIFRoZW4gaXQgd2lsbCBpbmhlcml0IHRoYXQgc2V0dGluZyBmcm9tIHRoZSBmaXJzdCBgbmdNb2RlbE9wdGlvbnNgIGRpcmVjdGl2ZSBmb3VuZCBieSB0cmF2ZXJzaW5nIHVwIHRoZVxuICogRE9NIHRyZWUuIElmIHRoZXJlIGlzIG5vIGFuY2VzdG9yIGVsZW1lbnQgY29udGFpbmluZyBhbiBgbmdNb2RlbE9wdGlvbnNgIGRpcmVjdGl2ZSB0aGVuIGRlZmF1bHQgc2V0dGluZ3NcbiAqIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBGb3IgZXhhbXBsZSBnaXZlbiB0aGUgZm9sbG93aW5nIGZyYWdtZW50IG9mIEhUTUxcbiAqXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1tb2RlbC1vcHRpb25zPVwieyBhbGxvd0ludmFsaWQ6IHRydWUsIGRlYm91bmNlOiAyMDAgfVwiPlxuICogICA8Zm9ybSBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2JsdXInLCBhbGxvd0ludmFsaWQ6ICckaW5oZXJpdCcgfVwiPlxuICogICAgIDxpbnB1dCBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2RlZmF1bHQnLCBhbGxvd0ludmFsaWQ6ICckaW5oZXJpdCcgfVwiIC8+XG4gKiAgIDwvZm9ybT5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGhhdmUgdGhlIGZvbGxvd2luZyBzZXR0aW5nc1xuICpcbiAqIGBgYGpzXG4gKiB7IGFsbG93SW52YWxpZDogdHJ1ZSwgdXBkYXRlT246ICdkZWZhdWx0JywgZGVib3VuY2U6IDAgfVxuICogYGBgXG4gKlxuICogTm90aWNlIHRoYXQgdGhlIGBkZWJvdW5jZWAgc2V0dGluZyB3YXMgbm90IGluaGVyaXRlZCBhbmQgdXNlZCB0aGUgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSB0aGF0IGFsbCB1bmRlZmluZWQgc2V0dGluZ3MgYXJlIGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGZyb20gYW4gYW5jZXN0b3IgYnlcbiAqIGluY2x1ZGluZyBhIHByb3BlcnR5IHdpdGgga2V5IG9mIGBcIipcImAgYW5kIHZhbHVlIG9mIGBcIiRpbmhlcml0XCJgLlxuICpcbiAqIEZvciBleGFtcGxlIGdpdmVuIHRoZSBmb2xsb3dpbmcgZnJhZ21lbnQgb2YgSFRNTFxuICpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDIwMCB9XCI+XG4gKiAgIDxmb3JtIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicsIFwiKlwiOiAnJGluaGVyaXQnIH1cIj5cbiAqICAgICA8aW5wdXQgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdkZWZhdWx0JywgXCIqXCI6ICckaW5oZXJpdCcgfVwiIC8+XG4gKiAgIDwvZm9ybT5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGhhdmUgdGhlIGZvbGxvd2luZyBzZXR0aW5nc1xuICpcbiAqIGBgYGpzXG4gKiB7IGFsbG93SW52YWxpZDogdHJ1ZSwgdXBkYXRlT246ICdkZWZhdWx0JywgZGVib3VuY2U6IDIwMCB9XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCB0aGUgYGRlYm91bmNlYCBzZXR0aW5nIG5vdyBpbmhlcml0cyB0aGUgdmFsdWUgZnJvbSB0aGUgb3V0ZXIgYDxkaXY+YCBlbGVtZW50LlxuICpcbiAqIElmIHlvdSBhcmUgY3JlYXRpbmcgYSByZXVzYWJsZSBjb21wb25lbnQgdGhlbiB5b3Ugc2hvdWxkIGJlIGNhcmVmdWwgd2hlbiB1c2luZyBgXCIqXCI6IFwiJGluaGVyaXRcImBcbiAqIHNpbmNlIHlvdSBtYXkgaW5hZHZlcnRlbnRseSBpbmhlcml0IGEgc2V0dGluZyBpbiB0aGUgZnV0dXJlIHRoYXQgY2hhbmdlcyB0aGUgYmVoYXZpb3Igb2YgeW91ciBjb21wb25lbnQuXG4gKlxuICpcbiAqICMjIFRyaWdnZXJpbmcgYW5kIGRlYm91bmNpbmcgbW9kZWwgdXBkYXRlc1xuICpcbiAqIFRoZSBgdXBkYXRlT25gIGFuZCBgZGVib3VuY2VgIHByb3BlcnRpZXMgYWxsb3cgeW91IHRvIHNwZWNpZnkgYSBjdXN0b20gbGlzdCBvZiBldmVudHMgdGhhdCB3aWxsXG4gKiB0cmlnZ2VyIGEgbW9kZWwgdXBkYXRlIGFuZC9vciBhIGRlYm91bmNpbmcgZGVsYXkgc28gdGhhdCB0aGUgYWN0dWFsIHVwZGF0ZSBvbmx5IHRha2VzIHBsYWNlIHdoZW5cbiAqIGEgdGltZXIgZXhwaXJlczsgdGhpcyB0aW1lciB3aWxsIGJlIHJlc2V0IGFmdGVyIGFub3RoZXIgY2hhbmdlIHRha2VzIHBsYWNlLlxuICpcbiAqIEdpdmVuIHRoZSBuYXR1cmUgb2YgYG5nTW9kZWxPcHRpb25zYCwgdGhlIHZhbHVlIGRpc3BsYXllZCBpbnNpZGUgaW5wdXQgZmllbGRzIGluIHRoZSB2aWV3IG1pZ2h0XG4gKiBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgdmFsdWUgaW4gdGhlIGFjdHVhbCBtb2RlbC4gVGhpcyBtZWFucyB0aGF0IGlmIHlvdSB1cGRhdGUgdGhlIG1vZGVsIHlvdVxuICogc2hvdWxkIGFsc28gaW52b2tlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZX0gb24gdGhlIHJlbGV2YW50IGlucHV0IGZpZWxkIGluXG4gKiBvcmRlciB0byBtYWtlIHN1cmUgaXQgaXMgc3luY2hyb25pemVkIHdpdGggdGhlIG1vZGVsIGFuZCB0aGF0IGFueSBkZWJvdW5jZWQgYWN0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIFRoZSBlYXNpZXN0IHdheSB0byByZWZlcmVuY2UgdGhlIGNvbnRyb2wncyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWV9XG4gKiBtZXRob2QgaXMgYnkgbWFraW5nIHN1cmUgdGhlIGlucHV0IGlzIHBsYWNlZCBpbnNpZGUgYSBmb3JtIHRoYXQgaGFzIGEgYG5hbWVgIGF0dHJpYnV0ZS4gVGhpcyBpc1xuICogaW1wb3J0YW50IGJlY2F1c2UgYGZvcm1gIGNvbnRyb2xsZXJzIGFyZSBwdWJsaXNoZWQgdG8gdGhlIHJlbGF0ZWQgc2NvcGUgdW5kZXIgdGhlIG5hbWUgaW4gdGhlaXJcbiAqIGBuYW1lYCBhdHRyaWJ1dGUuXG4gKlxuICogQW55IHBlbmRpbmcgY2hhbmdlcyB3aWxsIHRha2UgcGxhY2UgaW1tZWRpYXRlbHkgd2hlbiBhbiBlbmNsb3NpbmcgZm9ybSBpcyBzdWJtaXR0ZWQgdmlhIHRoZVxuICogYHN1Ym1pdGAgZXZlbnQuIE5vdGUgdGhhdCBgbmdDbGlja2AgZXZlbnRzIHdpbGwgb2NjdXIgYmVmb3JlIHRoZSBtb2RlbCBpcyB1cGRhdGVkLiBVc2UgYG5nU3VibWl0YFxuICogdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBvdmVycmlkZSBpbW1lZGlhdGUgdXBkYXRlcy4gQ2hhbmdlcyBvbiB0aGUgaW5wdXRzIHdpdGhpbiB0aGVcbiAqIGZvcm0gd2lsbCB1cGRhdGUgdGhlIG1vZGVsIG9ubHkgd2hlbiB0aGUgY29udHJvbCBsb3NlcyBmb2N1cyAoYmx1ciBldmVudCkuIElmIGBlc2NhcGVgIGtleSBpc1xuICogcHJlc3NlZCB3aGlsZSB0aGUgaW5wdXQgZmllbGQgaXMgZm9jdXNlZCwgdGhlIHZhbHVlIGlzIHJlc2V0IHRvIHRoZSB2YWx1ZSBpbiB0aGUgY3VycmVudCBtb2RlbC5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWJsdXJcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAqICAgICAgICAgPGxhYmVsPlxuICogICAgICAgICAgIE5hbWU6XG4gKiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAqICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICogICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2JsdXInIH1cIlxuICogICAgICAgICAgICAgICAgICBuZy1rZXl1cD1cImNhbmNlbCgkZXZlbnQpXCIgLz5cbiAqICAgICAgICAgPC9sYWJlbD48YnIgLz5cbiAqICAgICAgICAgPGxhYmVsPlxuICogICAgICAgICAgIE90aGVyIGRhdGE6XG4gKiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ1c2VyLmRhdGFcIiAvPlxuICogICAgICAgICA8L2xhYmVsPjxiciAvPlxuICogICAgICAgPC9mb3JtPlxuICogICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lXCI+PC9zcGFuPjwvcHJlPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICBhbmd1bGFyLm1vZHVsZSgnb3B0aW9uc0V4YW1wbGUnLCBbXSlcbiAqICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnc2F5JywgZGF0YTogJycgfTtcbiAqXG4gKiAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbihlKSB7XG4gKiAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHtcbiAqICAgICAgICAgICAgICRzY29wZS51c2VyRm9ybS51c2VyTmFtZS4kcm9sbGJhY2tWaWV3VmFsdWUoKTtcbiAqICAgICAgICAgICB9XG4gKiAgICAgICAgIH07XG4gKiAgICAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIHZhciBtb2RlbCA9IGVsZW1lbnQoYnkuYmluZGluZygndXNlci5uYW1lJykpO1xuICogICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAqICAgICB2YXIgb3RoZXIgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmRhdGEnKSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgYWxsb3cgY3VzdG9tIGV2ZW50cycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgaW5wdXQuc2VuZEtleXMoJyBoZWxsbycpO1xuICogICAgICAgaW5wdXQuY2xpY2soKTtcbiAqICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheScpO1xuICogICAgICAgb3RoZXIuY2xpY2soKTtcbiAqICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheSBoZWxsbycpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkICRyb2xsYmFja1ZpZXdWYWx1ZSB3aGVuIG1vZGVsIGNoYW5nZXMnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGlucHV0LnNlbmRLZXlzKCcgaGVsbG8nKTtcbiAqICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ3NheSBoZWxsbycpO1xuICogICAgICAgaW5wdXQuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuRVNDQVBFKTtcbiAqICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ3NheScpO1xuICogICAgICAgb3RoZXIuY2xpY2soKTtcbiAqICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogVGhlIG5leHQgZXhhbXBsZSBzaG93cyBob3cgdG8gZGVib3VuY2UgbW9kZWwgY2hhbmdlcy4gTW9kZWwgd2lsbCBiZSB1cGRhdGVkIG9ubHkgMSBzZWMgYWZ0ZXIgbGFzdCBjaGFuZ2UuXG4gKiBJZiB0aGUgYENsZWFyYCBidXR0b24gaXMgcHJlc3NlZCwgYW55IGRlYm91bmNlZCBhY3Rpb24gaXMgY2FuY2VsZWQgYW5kIHRoZSB2YWx1ZSBiZWNvbWVzIGVtcHR5LlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtZGVib3VuY2VcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAqICAgICAgICAgTmFtZTpcbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAqICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAqICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGRlYm91bmNlOiAxMDAwIH1cIiAvPlxuICogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwidXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7IHVzZXIubmFtZT0nJ1wiPkNsZWFyPC9idXR0b24+PGJyIC8+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWVcIj48L3NwYW4+PC9wcmU+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKVxuICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgJHNjb3BlLnVzZXIgPSB7IG5hbWU6ICdzYXknIH07XG4gKiAgICAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiAjIyBNb2RlbCB1cGRhdGVzIGFuZCB2YWxpZGF0aW9uXG4gKlxuICogVGhlIGRlZmF1bHQgYmVoYXZpb3VyIGluIGBuZ01vZGVsYCBpcyB0aGF0IHRoZSBtb2RlbCB2YWx1ZSBpcyBzZXQgdG8gYHVuZGVmaW5lZGAgd2hlbiB0aGVcbiAqIHZhbGlkYXRpb24gZGV0ZXJtaW5lcyB0aGF0IHRoZSB2YWx1ZSBpcyBpbnZhbGlkLiBCeSBzZXR0aW5nIHRoZSBgYWxsb3dJbnZhbGlkYCBwcm9wZXJ0eSB0byB0cnVlLFxuICogdGhlIG1vZGVsIHdpbGwgc3RpbGwgYmUgdXBkYXRlZCBldmVuIGlmIHRoZSB2YWx1ZSBpcyBpbnZhbGlkLlxuICpcbiAqXG4gKiAjIyBDb25uZWN0aW5nIHRvIHRoZSBzY29wZVxuICpcbiAqIEJ5IHNldHRpbmcgdGhlIGBnZXR0ZXJTZXR0ZXJgIHByb3BlcnR5IHRvIHRydWUgeW91IGFyZSB0ZWxsaW5nIG5nTW9kZWwgdGhhdCB0aGUgYG5nTW9kZWxgIGV4cHJlc3Npb25cbiAqIG9uIHRoZSBzY29wZSByZWZlcnMgdG8gYSBcImdldHRlci9zZXR0ZXJcIiBmdW5jdGlvbiByYXRoZXIgdGhhbiB0aGUgdmFsdWUgaXRzZWxmLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gYmluZCB0byBnZXR0ZXIvc2V0dGVyczpcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWdldHRlci1zZXR0ZXJcIiBtb2R1bGU9XCJnZXR0ZXJTZXR0ZXJFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICogICAgICAgICA8bGFiZWw+XG4gKiAgICAgICAgICAgTmFtZTpcbiAqICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICogICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gKiAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCIgLz5cbiAqICAgICAgICAgPC9sYWJlbD5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZSgpXCI+PC9zcGFuPjwvcHJlPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgdmFyIF9uYW1lID0gJ0JyaWFuJztcbiAqICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gKiAgICAgICAgICAgbmFtZTogZnVuY3Rpb24obmV3TmFtZSkge1xuICogICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKG5ld05hbWUpID8gKF9uYW1lID0gbmV3TmFtZSkgOiBfbmFtZTtcbiAqICAgICAgICAgICB9XG4gKiAgICAgICAgIH07XG4gKiAgICAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICogIyMgU3BlY2lmeWluZyB0aW1lem9uZXNcbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgdGhlIHRpbWV6b25lIHRoYXQgZGF0ZS90aW1lIGlucHV0IGRpcmVjdGl2ZXMgZXhwZWN0IGJ5IHByb3ZpZGluZyBpdHMgbmFtZSBpbiB0aGVcbiAqIGB0aW1lem9uZWAgcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG5nTW9kZWxPcHRpb25zIG9wdGlvbnMgdG8gYXBwbHkgdG8ge0BsaW5rIG5nTW9kZWx9IGRpcmVjdGl2ZXMgb24gdGhpcyBlbGVtZW50IGFuZFxuICogICBhbmQgaXRzIGRlc2NlbmRlbnRzLiBWYWxpZCBrZXlzIGFyZTpcbiAqICAgLSBgdXBkYXRlT25gOiBzdHJpbmcgc3BlY2lmeWluZyB3aGljaCBldmVudCBzaG91bGQgdGhlIGlucHV0IGJlIGJvdW5kIHRvLiBZb3UgY2FuIHNldCBzZXZlcmFsXG4gKiAgICAgZXZlbnRzIHVzaW5nIGFuIHNwYWNlIGRlbGltaXRlZCBsaXN0LiBUaGVyZSBpcyBhIHNwZWNpYWwgZXZlbnQgY2FsbGVkIGBkZWZhdWx0YCB0aGF0XG4gKiAgICAgbWF0Y2hlcyB0aGUgZGVmYXVsdCBldmVudHMgYmVsb25naW5nIHRvIHRoZSBjb250cm9sLlxuICogICAtIGBkZWJvdW5jZWA6IGludGVnZXIgdmFsdWUgd2hpY2ggY29udGFpbnMgdGhlIGRlYm91bmNlIG1vZGVsIHVwZGF0ZSB2YWx1ZSBpbiBtaWxsaXNlY29uZHMuIEFcbiAqICAgICB2YWx1ZSBvZiAwIHRyaWdnZXJzIGFuIGltbWVkaWF0ZSB1cGRhdGUuIElmIGFuIG9iamVjdCBpcyBzdXBwbGllZCBpbnN0ZWFkLCB5b3UgY2FuIHNwZWNpZnkgYVxuICogICAgIGN1c3RvbSB2YWx1ZSBmb3IgZWFjaCBldmVudC4gRm9yIGV4YW1wbGU6XG4gKiAgICAgYGBgXG4gKiAgICAgbmctbW9kZWwtb3B0aW9ucz1cIntcbiAqICAgICAgIHVwZGF0ZU9uOiAnZGVmYXVsdCBibHVyJyxcbiAqICAgICAgIGRlYm91bmNlOiB7ICdkZWZhdWx0JzogNTAwLCAnYmx1cic6IDAgfVxuICogICAgIH1cIlxuICogICAgIGBgYFxuICogICAtIGBhbGxvd0ludmFsaWRgOiBib29sZWFuIHZhbHVlIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBtb2RlbCBjYW4gYmUgc2V0IHdpdGggdmFsdWVzIHRoYXQgZGlkXG4gKiAgICAgbm90IHZhbGlkYXRlIGNvcnJlY3RseSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHNldHRpbmcgdGhlIG1vZGVsIHRvIHVuZGVmaW5lZC5cbiAqICAgLSBgZ2V0dGVyU2V0dGVyYDogYm9vbGVhbiB2YWx1ZSB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIHRyZWF0IGZ1bmN0aW9ucyBib3VuZCB0b1xuICogICAgIGBuZ01vZGVsYCBhcyBnZXR0ZXJzL3NldHRlcnMuXG4gKiAgIC0gYHRpbWV6b25lYDogRGVmaW5lcyB0aGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGZvclxuICogICAgIGA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPmAsIGA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPmAsIC4uLiAuIEl0IHVuZGVyc3RhbmRzIFVUQy9HTVQgYW5kIHRoZVxuICogICAgIGNvbnRpbmVudGFsIFVTIHRpbWUgem9uZSBhYmJyZXZpYXRpb25zLCBidXQgZm9yIGdlbmVyYWwgdXNlLCB1c2UgYSB0aW1lIHpvbmUgb2Zmc2V0LCBmb3JcbiAqICAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICogICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3NlciB3aWxsIGJlIHVzZWQuXG4gKlxuICovXG52YXIgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgTmdNb2RlbE9wdGlvbnNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRhdHRycycsICckc2NvcGUnXTtcbiAgZnVuY3Rpb24gTmdNb2RlbE9wdGlvbnNDb250cm9sbGVyKCRhdHRycywgJHNjb3BlKSB7XG4gICAgdGhpcy4kJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuJCRzY29wZSA9ICRzY29wZTtcbiAgfVxuICBOZ01vZGVsT3B0aW9uc0NvbnRyb2xsZXIucHJvdG90eXBlID0ge1xuICAgICRvbkluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhcmVudE9wdGlvbnMgPSB0aGlzLnBhcmVudEN0cmwgPyB0aGlzLnBhcmVudEN0cmwuJG9wdGlvbnMgOiBkZWZhdWx0TW9kZWxPcHRpb25zO1xuICAgICAgdmFyIG1vZGVsT3B0aW9uc0RlZmluaXRpb24gPSB0aGlzLiQkc2NvcGUuJGV2YWwodGhpcy4kJGF0dHJzLm5nTW9kZWxPcHRpb25zKTtcblxuICAgICAgdGhpcy4kb3B0aW9ucyA9IHBhcmVudE9wdGlvbnMuY3JlYXRlQ2hpbGQobW9kZWxPcHRpb25zRGVmaW5pdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAvLyBuZ01vZGVsT3B0aW9ucyBuZWVkcyB0byBydW4gYmVmb3JlIG5nTW9kZWwgYW5kIGlucHV0IGRpcmVjdGl2ZXNcbiAgICBwcmlvcml0eTogMTAsXG4gICAgcmVxdWlyZToge3BhcmVudEN0cmw6ICc/Xl5uZ01vZGVsT3B0aW9ucyd9LFxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgY29udHJvbGxlcjogTmdNb2RlbE9wdGlvbnNDb250cm9sbGVyXG4gIH07XG59O1xuXG5cbi8vIHNoYWxsb3cgY29weSBvdmVyIHZhbHVlcyBmcm9tIGBzcmNgIHRoYXQgYXJlIG5vdCBhbHJlYWR5IHNwZWNpZmllZCBvbiBgZHN0YFxuZnVuY3Rpb24gZGVmYXVsdHMoZHN0LCBzcmMpIHtcbiAgZm9yRWFjaChzcmMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoIWlzRGVmaW5lZChkc3Rba2V5XSkpIHtcbiAgICAgIGRzdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ05vbkJpbmRhYmxlXG4gKiBAcmVzdHJpY3QgQUNcbiAqIEBwcmlvcml0eSAxMDAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nTm9uQmluZGFibGVgIGRpcmVjdGl2ZSB0ZWxscyBBbmd1bGFyIG5vdCB0byBjb21waWxlIG9yIGJpbmQgdGhlIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50XG4gKiBET00gZWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIGVsZW1lbnQgY29udGFpbnMgd2hhdCBhcHBlYXJzIHRvIGJlIEFuZ3VsYXIgZGlyZWN0aXZlcyBhbmRcbiAqIGJpbmRpbmdzIGJ1dCB3aGljaCBzaG91bGQgYmUgaWdub3JlZCBieSBBbmd1bGFyLiBUaGlzIGNvdWxkIGJlIHRoZSBjYXNlIGlmIHlvdSBoYXZlIGEgc2l0ZSB0aGF0XG4gKiBkaXNwbGF5cyBzbmlwcGV0cyBvZiBjb2RlLCBmb3IgaW5zdGFuY2UuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAqIEluIHRoaXMgZXhhbXBsZSB0aGVyZSBhcmUgdHdvIGxvY2F0aW9ucyB3aGVyZSBhIHNpbXBsZSBpbnRlcnBvbGF0aW9uIGJpbmRpbmcgKGB7e319YCkgaXMgcHJlc2VudCxcbiAqIGJ1dCB0aGUgb25lIHdyYXBwZWQgaW4gYG5nTm9uQmluZGFibGVgIGlzIGxlZnQgYWxvbmUuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctbm9uLWJpbmRhYmxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2Pk5vcm1hbDoge3sxICsgMn19PC9kaXY+XG4gICAgICAgIDxkaXYgbmctbm9uLWJpbmRhYmxlPklnbm9yZWQ6IHt7MSArIDJ9fTwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctbm9uLWJpbmRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCcxICsgMicpKS5nZXRUZXh0KCkpLnRvQ29udGFpbignMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnZGl2JykpLmxhc3QoKS5nZXRUZXh0KCkpLnRvTWF0Y2goLzEgXFwrIDIvKTtcbiAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoeyB0ZXJtaW5hbDogdHJ1ZSwgcHJpb3JpdHk6IDEwMDAgfSk7XG5cbi8qIGV4cG9ydGVkIG5nT3B0aW9uc0RpcmVjdGl2ZSAqL1xuXG4vKiBnbG9iYWwganFMaXRlUmVtb3ZlICovXG5cbnZhciBuZ09wdGlvbnNNaW5FcnIgPSBtaW5FcnIoJ25nT3B0aW9ucycpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nT3B0aW9uc1xuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUgYG5nT3B0aW9uc2AgYXR0cmlidXRlIGNhbiBiZSB1c2VkIHRvIGR5bmFtaWNhbGx5IGdlbmVyYXRlIGEgbGlzdCBvZiBgPG9wdGlvbj5gXG4gKiBlbGVtZW50cyBmb3IgdGhlIGA8c2VsZWN0PmAgZWxlbWVudCB1c2luZyB0aGUgYXJyYXkgb3Igb2JqZWN0IG9idGFpbmVkIGJ5IGV2YWx1YXRpbmcgdGhlXG4gKiBgbmdPcHRpb25zYCBjb21wcmVoZW5zaW9uIGV4cHJlc3Npb24uXG4gKlxuICogSW4gbWFueSBjYXNlcywge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0gY2FuIGJlIHVzZWQgb24gYDxvcHRpb24+YCBlbGVtZW50cyBpbnN0ZWFkIG9mXG4gKiBgbmdPcHRpb25zYCB0byBhY2hpZXZlIGEgc2ltaWxhciByZXN1bHQuIEhvd2V2ZXIsIGBuZ09wdGlvbnNgIHByb3ZpZGVzIHNvbWUgYmVuZWZpdHM6XG4gKiAtIG1vcmUgZmxleGliaWxpdHkgaW4gaG93IHRoZSBgPHNlbGVjdD5gJ3MgbW9kZWwgaXMgYXNzaWduZWQgdmlhIHRoZSBgc2VsZWN0YCAqKmBhc2AqKiBwYXJ0IG9mIHRoZVxuICogY29tcHJlaGVuc2lvbiBleHByZXNzaW9uXG4gKiAtIHJlZHVjZWQgbWVtb3J5IGNvbnN1bXB0aW9uIGJ5IG5vdCBjcmVhdGluZyBhIG5ldyBzY29wZSBmb3IgZWFjaCByZXBlYXRlZCBpbnN0YW5jZVxuICogLSBpbmNyZWFzZWQgcmVuZGVyIHNwZWVkIGJ5IGNyZWF0aW5nIHRoZSBvcHRpb25zIGluIGEgZG9jdW1lbnRGcmFnbWVudCBpbnN0ZWFkIG9mIGluZGl2aWR1YWxseVxuICpcbiAqIFdoZW4gYW4gaXRlbSBpbiB0aGUgYDxzZWxlY3Q+YCBtZW51IGlzIHNlbGVjdGVkLCB0aGUgYXJyYXkgZWxlbWVudCBvciBvYmplY3QgcHJvcGVydHlcbiAqIHJlcHJlc2VudGVkIGJ5IHRoZSBzZWxlY3RlZCBvcHRpb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgaWRlbnRpZmllZCBieSB0aGUgYG5nTW9kZWxgXG4gKiBkaXJlY3RpdmUuXG4gKlxuICogT3B0aW9uYWxseSwgYSBzaW5nbGUgaGFyZC1jb2RlZCBgPG9wdGlvbj5gIGVsZW1lbnQsIHdpdGggdGhlIHZhbHVlIHNldCB0byBhbiBlbXB0eSBzdHJpbmcsIGNhblxuICogYmUgbmVzdGVkIGludG8gdGhlIGA8c2VsZWN0PmAgZWxlbWVudC4gVGhpcyBlbGVtZW50IHdpbGwgdGhlbiByZXByZXNlbnQgdGhlIGBudWxsYCBvciBcIm5vdCBzZWxlY3RlZFwiXG4gKiBvcHRpb24uIFNlZSBleGFtcGxlIGJlbG93IGZvciBkZW1vbnN0cmF0aW9uLlxuICpcbiAqICMjIENvbXBsZXggTW9kZWxzIChvYmplY3RzIG9yIGNvbGxlY3Rpb25zKVxuICpcbiAqIEJ5IGRlZmF1bHQsIGBuZ01vZGVsYCB3YXRjaGVzIHRoZSBtb2RlbCBieSByZWZlcmVuY2UsIG5vdCB2YWx1ZS4gVGhpcyBpcyBpbXBvcnRhbnQgdG8ga25vdyB3aGVuXG4gKiBiaW5kaW5nIHRoZSBzZWxlY3QgdG8gYSBtb2RlbCB0aGF0IGlzIGFuIG9iamVjdCBvciBhIGNvbGxlY3Rpb24uXG4gKlxuICogT25lIGlzc3VlIG9jY3VycyBpZiB5b3Ugd2FudCB0byBwcmVzZWxlY3QgYW4gb3B0aW9uLiBGb3IgZXhhbXBsZSwgaWYgeW91IHNldFxuICogdGhlIG1vZGVsIHRvIGFuIG9iamVjdCB0aGF0IGlzIGVxdWFsIHRvIGFuIG9iamVjdCBpbiB5b3VyIGNvbGxlY3Rpb24sIGBuZ09wdGlvbnNgIHdvbid0IGJlIGFibGUgdG8gc2V0IHRoZSBzZWxlY3Rpb24sXG4gKiBiZWNhdXNlIHRoZSBvYmplY3RzIGFyZSBub3QgaWRlbnRpY2FsLiBTbyBieSBkZWZhdWx0LCB5b3Ugc2hvdWxkIGFsd2F5cyByZWZlcmVuY2UgdGhlIGl0ZW0gaW4geW91ciBjb2xsZWN0aW9uXG4gKiBmb3IgcHJlc2VsZWN0aW9ucywgZS5nLjogYCRzY29wZS5zZWxlY3RlZCA9ICRzY29wZS5jb2xsZWN0aW9uWzNdYC5cbiAqXG4gKiBBbm90aGVyIHNvbHV0aW9uIGlzIHRvIHVzZSBhIGB0cmFjayBieWAgY2xhdXNlLCBiZWNhdXNlIHRoZW4gYG5nT3B0aW9uc2Agd2lsbCB0cmFjayB0aGUgaWRlbnRpdHlcbiAqIG9mIHRoZSBpdGVtIG5vdCBieSByZWZlcmVuY2UsIGJ1dCBieSB0aGUgcmVzdWx0IG9mIHRoZSBgdHJhY2sgYnlgIGV4cHJlc3Npb24uIEZvciBleGFtcGxlLCBpZiB5b3VyXG4gKiBjb2xsZWN0aW9uIGl0ZW1zIGhhdmUgYW4gaWQgcHJvcGVydHksIHlvdSB3b3VsZCBgdHJhY2sgYnkgaXRlbS5pZGAuXG4gKlxuICogQSBkaWZmZXJlbnQgaXNzdWUgd2l0aCBvYmplY3RzIG9yIGNvbGxlY3Rpb25zIGlzIHRoYXQgbmdNb2RlbCB3b24ndCBkZXRlY3QgaWYgYW4gb2JqZWN0IHByb3BlcnR5IG9yXG4gKiBhIGNvbGxlY3Rpb24gaXRlbSBjaGFuZ2VzLiBGb3IgdGhhdCByZWFzb24sIGBuZ09wdGlvbnNgIGFkZGl0aW9uYWxseSB3YXRjaGVzIHRoZSBtb2RlbCB1c2luZ1xuICogYCR3YXRjaENvbGxlY3Rpb25gLCB3aGVuIHRoZSBleHByZXNzaW9uIGNvbnRhaW5zIGEgYHRyYWNrIGJ5YCBjbGF1c2Ugb3IgdGhlIHRoZSBzZWxlY3QgaGFzIHRoZSBgbXVsdGlwbGVgIGF0dHJpYnV0ZS5cbiAqIFRoaXMgYWxsb3dzIG5nT3B0aW9ucyB0byB0cmlnZ2VyIGEgcmUtcmVuZGVyaW5nIG9mIHRoZSBvcHRpb25zIGV2ZW4gaWYgdGhlIGFjdHVhbCBvYmplY3QvY29sbGVjdGlvblxuICogaGFzIG5vdCBjaGFuZ2VkIGlkZW50aXR5LCBidXQgb25seSBhIHByb3BlcnR5IG9uIHRoZSBvYmplY3Qgb3IgYW4gaXRlbSBpbiB0aGUgY29sbGVjdGlvbiBjaGFuZ2VzLlxuICpcbiAqIE5vdGUgdGhhdCBgJHdhdGNoQ29sbGVjdGlvbmAgZG9lcyBhIHNoYWxsb3cgY29tcGFyaXNvbiBvZiB0aGUgcHJvcGVydGllcyBvZiB0aGUgb2JqZWN0IChvciB0aGUgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb25cbiAqIGlmIHRoZSBtb2RlbCBpcyBhbiBhcnJheSkuIFRoaXMgbWVhbnMgdGhhdCBjaGFuZ2luZyBhIHByb3BlcnR5IGRlZXBlciB0aGFuIHRoZSBmaXJzdCBsZXZlbCBpbnNpZGUgdGhlXG4gKiBvYmplY3QvY29sbGVjdGlvbiB3aWxsIG5vdCB0cmlnZ2VyIGEgcmUtcmVuZGVyaW5nLlxuICpcbiAqICMjIGBzZWxlY3RgICoqYGFzYCoqXG4gKlxuICogVXNpbmcgYHNlbGVjdGAgKipgYXNgKiogd2lsbCBiaW5kIHRoZSByZXN1bHQgb2YgdGhlIGBzZWxlY3RgIGV4cHJlc3Npb24gdG8gdGhlIG1vZGVsLCBidXRcbiAqIHRoZSB2YWx1ZSBvZiB0aGUgYDxzZWxlY3Q+YCBhbmQgYDxvcHRpb24+YCBodG1sIGVsZW1lbnRzIHdpbGwgYmUgZWl0aGVyIHRoZSBpbmRleCAoZm9yIGFycmF5IGRhdGEgc291cmNlcylcbiAqIG9yIHByb3BlcnR5IG5hbWUgKGZvciBvYmplY3QgZGF0YSBzb3VyY2VzKSBvZiB0aGUgdmFsdWUgd2l0aGluIHRoZSBjb2xsZWN0aW9uLiBJZiBhICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb25cbiAqIGlzIHVzZWQsIHRoZSByZXN1bHQgb2YgdGhhdCBleHByZXNzaW9uIHdpbGwgYmUgc2V0IGFzIHRoZSB2YWx1ZSBvZiB0aGUgYG9wdGlvbmAgYW5kIGBzZWxlY3RgIGVsZW1lbnRzLlxuICpcbiAqXG4gKiAjIyMgYHNlbGVjdGAgKipgYXNgKiogYW5kICoqYHRyYWNrIGJ5YCoqXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqIEJlIGNhcmVmdWwgd2hlbiB1c2luZyBgc2VsZWN0YCAqKmBhc2AqKiBhbmQgKipgdHJhY2sgYnlgKiogaW4gdGhlIHNhbWUgZXhwcmVzc2lvbi5cbiAqIDwvZGl2PlxuICpcbiAqIEdpdmVuIHRoaXMgYXJyYXkgb2YgaXRlbXMgb24gdGhlICRzY29wZTpcbiAqXG4gKiBgYGBqc1xuICogJHNjb3BlLml0ZW1zID0gW3tcbiAqICAgaWQ6IDEsXG4gKiAgIGxhYmVsOiAnYUxhYmVsJyxcbiAqICAgc3ViSXRlbTogeyBuYW1lOiAnYVN1Ykl0ZW0nIH1cbiAqIH0sIHtcbiAqICAgaWQ6IDIsXG4gKiAgIGxhYmVsOiAnYkxhYmVsJyxcbiAqICAgc3ViSXRlbTogeyBuYW1lOiAnYlN1Ykl0ZW0nIH1cbiAqIH1dO1xuICogYGBgXG4gKlxuICogVGhpcyB3aWxsIHdvcms6XG4gKlxuICogYGBgaHRtbFxuICogPHNlbGVjdCBuZy1vcHRpb25zPVwiaXRlbSBhcyBpdGVtLmxhYmVsIGZvciBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5IGl0ZW0uaWRcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCI+PC9zZWxlY3Q+XG4gKiBgYGBcbiAqIGBgYGpzXG4gKiAkc2NvcGUuc2VsZWN0ZWQgPSAkc2NvcGUuaXRlbXNbMF07XG4gKiBgYGBcbiAqXG4gKiBidXQgdGhpcyB3aWxsIG5vdCB3b3JrOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxzZWxlY3Qgbmctb3B0aW9ucz1cIml0ZW0uc3ViSXRlbSBhcyBpdGVtLmxhYmVsIGZvciBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5IGl0ZW0uaWRcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCI+PC9zZWxlY3Q+XG4gKiBgYGBcbiAqIGBgYGpzXG4gKiAkc2NvcGUuc2VsZWN0ZWQgPSAkc2NvcGUuaXRlbXNbMF0uc3ViSXRlbTtcbiAqIGBgYFxuICpcbiAqIEluIGJvdGggZXhhbXBsZXMsIHRoZSAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uIGlzIGFwcGxpZWQgc3VjY2Vzc2Z1bGx5IHRvIGVhY2ggYGl0ZW1gIGluIHRoZVxuICogYGl0ZW1zYCBhcnJheS4gQmVjYXVzZSB0aGUgc2VsZWN0ZWQgb3B0aW9uIGhhcyBiZWVuIHNldCBwcm9ncmFtbWF0aWNhbGx5IGluIHRoZSBjb250cm9sbGVyLCB0aGVcbiAqICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb24gaXMgYWxzbyBhcHBsaWVkIHRvIHRoZSBgbmdNb2RlbGAgdmFsdWUuIEluIHRoZSBmaXJzdCBleGFtcGxlLCB0aGVcbiAqIGBuZ01vZGVsYCB2YWx1ZSBpcyBgaXRlbXNbMF1gIGFuZCB0aGUgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYGl0ZW1zWzBdLmlkYCB3aXRoXG4gKiBubyBpc3N1ZS4gSW4gdGhlIHNlY29uZCBleGFtcGxlLCB0aGUgYG5nTW9kZWxgIHZhbHVlIGlzIGBpdGVtc1swXS5zdWJJdGVtYCBhbmQgdGhlICoqYHRyYWNrIGJ5YCoqXG4gKiBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBgaXRlbXNbMF0uc3ViSXRlbS5pZGAgKHdoaWNoIGlzIHVuZGVmaW5lZCkuIEFzIGEgcmVzdWx0LCB0aGUgbW9kZWwgdmFsdWVcbiAqIGlzIG5vdCBtYXRjaGVkIGFnYWluc3QgYW55IGA8b3B0aW9uPmAgYW5kIHRoZSBgPHNlbGVjdD5gIGFwcGVhcnMgYXMgaGF2aW5nIG5vIHNlbGVjdGVkIHZhbHVlLlxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIEFuZ3VsYXJKUyBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7Y29tcHJlaGVuc2lvbl9leHByZXNzaW9ufSBuZ09wdGlvbnMgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybXM6XG4gKlxuICogICAqIGZvciBhcnJheSBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCB8IG9yZGVyQnk6YG9yZGVyZXhwcmAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAgICAoZm9yIGluY2x1ZGluZyBhIGZpbHRlciB3aXRoIGB0cmFjayBieWApXG4gKiAgICogZm9yIG9iamVjdCBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvciAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGBcbiAqICAgICAgICAgKipgZm9yYCBgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgXG4gKiAgICAgICAgICoqYGZvcmAgYChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqXG4gKiBXaGVyZTpcbiAqXG4gKiAgICogYGFycmF5YCAvIGBvYmplY3RgOiBhbiBleHByZXNzaW9uIHdoaWNoIGV2YWx1YXRlcyB0byBhbiBhcnJheSAvIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiAgICogYHZhbHVlYDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBlYWNoIGl0ZW0gaW4gdGhlIGBhcnJheWAgb3IgZWFjaCBwcm9wZXJ0eSB2YWx1ZVxuICogICAgICBvZiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBrZXlgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGEgcHJvcGVydHkgbmFtZSBpbiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBsYWJlbGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdGhlIGxhYmVsIGZvciBgPG9wdGlvbj5gIGVsZW1lbnQuIFRoZVxuICogICAgIGBleHByZXNzaW9uYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZSBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS5cbiAqICAgKiBgc2VsZWN0YDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgb2YgdGhlIHBhcmVudCBgPHNlbGVjdD5gXG4gKiAgICAgIGVsZW1lbnQuIElmIG5vdCBzcGVjaWZpZWQsIGBzZWxlY3RgIGV4cHJlc3Npb24gd2lsbCBkZWZhdWx0IHRvIGB2YWx1ZWAuXG4gKiAgICogYGdyb3VwYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB1c2VkIHRvIGdyb3VwIG9wdGlvbnMgdXNpbmcgdGhlIGA8b3B0Z3JvdXA+YFxuICogICAgICBET00gZWxlbWVudC5cbiAqICAgKiBgZGlzYWJsZWA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdXNlZCB0byBkaXNhYmxlIHRoZSByZW5kZXJlZCBgPG9wdGlvbj5gXG4gKiAgICAgIGVsZW1lbnQuIFJldHVybiBgdHJ1ZWAgdG8gZGlzYWJsZS5cbiAqICAgKiBgdHJhY2tleHByYDogVXNlZCB3aGVuIHdvcmtpbmcgd2l0aCBhbiBhcnJheSBvZiBvYmplY3RzLiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlXG4gKiAgICAgIHVzZWQgdG8gaWRlbnRpZnkgdGhlIG9iamVjdHMgaW4gdGhlIGFycmF5LiBUaGUgYHRyYWNrZXhwcmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGVcbiAqICAgICBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS4gV2l0aCB0aGlzIHRoZSBzZWxlY3Rpb24gaXMgcHJlc2VydmVkXG4gKiAgICAgIGV2ZW4gd2hlbiB0aGUgb3B0aW9ucyBhcmUgcmVjcmVhdGVkIChlLmcuIHJlbG9hZGVkIGZyb20gdGhlIHNlcnZlcikuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFRoZSBjb250cm9sIGlzIGNvbnNpZGVyZWQgdmFsaWQgb25seSBpZiB2YWx1ZSBpcyBlbnRlcmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQXR0clNpemUgc2V0cyB0aGUgc2l6ZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQgZHluYW1pY2FsbHkuIFVzZXMgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiMtbmdhdHRyLWZvci1iaW5kaW5nLXRvLWFyYml0cmFyeS1hdHRyaWJ1dGVzIG5nQXR0cn0gZGlyZWN0aXZlLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwic2VsZWN0RXhhbXBsZVwiIG5hbWU9XCJzZWxlY3RcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdzZWxlY3RFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5jb2xvcnMgPSBbXG4gICAgICAgICAgICAgIHtuYW1lOidibGFjaycsIHNoYWRlOidkYXJrJ30sXG4gICAgICAgICAgICAgIHtuYW1lOid3aGl0ZScsIHNoYWRlOidsaWdodCcsIG5vdEFuT3B0aW9uOiB0cnVlfSxcbiAgICAgICAgICAgICAge25hbWU6J3JlZCcsIHNoYWRlOidkYXJrJ30sXG4gICAgICAgICAgICAgIHtuYW1lOidibHVlJywgc2hhZGU6J2RhcmsnLCBub3RBbk9wdGlvbjogdHJ1ZX0sXG4gICAgICAgICAgICAgIHtuYW1lOid5ZWxsb3cnLCBzaGFkZTonbGlnaHQnLCBub3RBbk9wdGlvbjogZmFsc2V9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgJHNjb3BlLm15Q29sb3IgPSAkc2NvcGUuY29sb3JzWzJdOyAvLyByZWRcbiAgICAgICAgICB9XSk7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgICAgPGxhYmVsPk5hbWU6IDxpbnB1dCBuZy1tb2RlbD1cImNvbG9yLm5hbWVcIj48L2xhYmVsPlxuICAgICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29sb3Iubm90QW5PcHRpb25cIj4gRGlzYWJsZWQ/PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9ycy5zcGxpY2UoJGluZGV4LCAxKVwiIGFyaWEtbGFiZWw9XCJSZW1vdmVcIj5YPC9idXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY29sb3JzLnB1c2goe30pXCI+YWRkPC9idXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPGhyLz5cbiAgICAgICAgICA8bGFiZWw+Q29sb3IgKG51bGwgbm90IGFsbG93ZWQpOlxuICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIiBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBmb3IgY29sb3IgaW4gY29sb3JzXCI+PC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgIDxsYWJlbD5Db2xvciAobnVsbCBhbGxvd2VkKTpcbiAgICAgICAgICA8c3BhbiAgY2xhc3M9XCJudWxsYWJsZVwiPlxuICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIiBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBmb3IgY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLSBjaG9vc2UgY29sb3IgLS08L29wdGlvbj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvc3Bhbj48L2xhYmVsPjxici8+XG5cbiAgICAgICAgICA8bGFiZWw+Q29sb3IgZ3JvdXBlZCBieSBzaGFkZTpcbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZ3JvdXAgYnkgY29sb3Iuc2hhZGUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD48YnIvPlxuXG4gICAgICAgICAgPGxhYmVsPkNvbG9yIGdyb3VwZWQgYnkgc2hhZGUsIHdpdGggc29tZSBkaXNhYmxlZDpcbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCJcbiAgICAgICAgICAgICAgICAgIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGdyb3VwIGJ5IGNvbG9yLnNoYWRlIGRpc2FibGUgd2hlbiBjb2xvci5ub3RBbk9wdGlvbiBmb3IgY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2xhYmVsPjxici8+XG5cblxuXG4gICAgICAgICAgU2VsZWN0IDxidXR0b24gbmctY2xpY2s9XCJteUNvbG9yID0geyBuYW1lOidub3QgaW4gbGlzdCcsIHNoYWRlOiAnb3RoZXInIH1cIj5ib2d1czwvYnV0dG9uPi5cbiAgICAgICAgICA8YnIvPlxuICAgICAgICAgIDxoci8+XG4gICAgICAgICAgQ3VycmVudGx5IHNlbGVjdGVkOiB7eyB7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0gfX1cbiAgICAgICAgICA8ZGl2IHN0eWxlPVwiYm9yZGVyOnNvbGlkIDFweCBibGFjazsgaGVpZ2h0OjIwcHhcIlxuICAgICAgICAgICAgICAgbmctc3R5bGU9XCJ7J2JhY2tncm91bmQtY29sb3InOm15Q29sb3IubmFtZX1cIj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW9wdGlvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygne3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9JykpLmdldFRleHQoKSkudG9NYXRjaCgncmVkJyk7XG4gICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdteUNvbG9yJykpLmZpcnN0KCkuY2xpY2soKTtcbiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCdzZWxlY3RbbmctbW9kZWw9XCJteUNvbG9yXCJdIG9wdGlvbicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ2JsYWNrJyk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcubnVsbGFibGUgc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXScpKS5jbGljaygpO1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5jc3MoJy5udWxsYWJsZSBzZWxlY3RbbmctbW9kZWw9XCJteUNvbG9yXCJdIG9wdGlvbicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ251bGwnKTtcbiAgICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vMDAwMDExMTExMTExMTEwMDAwMDAwMDAwMDIyMjIyMjIyMjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMzMzMzMzMzMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQ0NDQ0NDQ0NDQ0MDAwMDAwMDAwMDAwMDU1NTU1NTU1NTU1NTUwMDAwMDAwMDA2NjY2NjY2NjY2NjY2MDAwMDAwMDc3Nzc3Nzc3Nzc3NzcwMDAwMDAwMDAwMDAwMDA4ODg4ODg4ODg4MDAwMDAwMDAwMDAwMDAwMDAwMDk5OTk5OTk5OTlcbnZhciBOR19PUFRJT05TX1JFR0VYUCA9IC9eXFxzKihbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpPyg/Olxccytncm91cFxccytieVxccysoW1xcc1xcU10rPykpPyg/OlxccytkaXNhYmxlXFxzK3doZW5cXHMrKFtcXHNcXFNdKz8pKT9cXHMrZm9yXFxzKyg/OihbJFxcd11bJFxcd10qKXwoPzpcXChcXHMqKFskXFx3XVskXFx3XSopXFxzKixcXHMqKFskXFx3XVskXFx3XSopXFxzKlxcKSkpXFxzK2luXFxzKyhbXFxzXFxTXSs/KSg/Olxccyt0cmFja1xccytieVxccysoW1xcc1xcU10rPykpPyQvO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMTogdmFsdWUgZXhwcmVzc2lvbiAodmFsdWVGbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDI6IGxhYmVsIGV4cHJlc3Npb24gKGRpc3BsYXlGbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDM6IGdyb3VwIGJ5IGV4cHJlc3Npb24gKGdyb3VwQnlGbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDQ6IGRpc2FibGUgd2hlbiBleHByZXNzaW9uIChkaXNhYmxlV2hlbkZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNTogYXJyYXkgaXRlbSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA2OiBvYmplY3QgaXRlbSBrZXkgdmFyaWFibGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNzogb2JqZWN0IGl0ZW0gdmFsdWUgdmFyaWFibGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gODogY29sbGVjdGlvbiBleHByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA5OiB0cmFjayBieSBleHByZXNzaW9uXG4vKiBlc2xpbnQtZW5hYmxlICovXG5cblxudmFyIG5nT3B0aW9uc0RpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCAnJGRvY3VtZW50JywgJyRwYXJzZScsIGZ1bmN0aW9uKCRjb21waWxlLCAkZG9jdW1lbnQsICRwYXJzZSkge1xuXG4gIGZ1bmN0aW9uIHBhcnNlT3B0aW9uc0V4cHJlc3Npb24ob3B0aW9uc0V4cCwgc2VsZWN0RWxlbWVudCwgc2NvcGUpIHtcblxuICAgIHZhciBtYXRjaCA9IG9wdGlvbnNFeHAubWF0Y2goTkdfT1BUSU9OU19SRUdFWFApO1xuICAgIGlmICghKG1hdGNoKSkge1xuICAgICAgdGhyb3cgbmdPcHRpb25zTWluRXJyKCdpZXhwJyxcbiAgICAgICAgJ0V4cGVjdGVkIGV4cHJlc3Npb24gaW4gZm9ybSBvZiAnICtcbiAgICAgICAgJ1xcJ19zZWxlY3RfIChhcyBfbGFiZWxfKT8gZm9yIChfa2V5XywpP192YWx1ZV8gaW4gX2NvbGxlY3Rpb25fXFwnJyArXG4gICAgICAgICcgYnV0IGdvdCBcXCd7MH1cXCcuIEVsZW1lbnQ6IHsxfScsXG4gICAgICAgIG9wdGlvbnNFeHAsIHN0YXJ0aW5nVGFnKHNlbGVjdEVsZW1lbnQpKTtcbiAgICB9XG5cbiAgICAvLyBFeHRyYWN0IHRoZSBwYXJ0cyBmcm9tIHRoZSBuZ09wdGlvbnMgZXhwcmVzc2lvblxuXG4gICAgLy8gVGhlIHZhcmlhYmxlIG5hbWUgZm9yIHRoZSB2YWx1ZSBvZiB0aGUgaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICAgIHZhciB2YWx1ZU5hbWUgPSBtYXRjaFs1XSB8fCBtYXRjaFs3XTtcbiAgICAvLyBUaGUgdmFyaWFibGUgbmFtZSBmb3IgdGhlIGtleSBvZiB0aGUgaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICAgIHZhciBrZXlOYW1lID0gbWF0Y2hbNl07XG5cbiAgICAvLyBBbiBleHByZXNzaW9uIHRoYXQgZ2VuZXJhdGVzIHRoZSB2aWV3VmFsdWUgZm9yIGFuIG9wdGlvbiBpZiB0aGVyZSBpcyBhIGxhYmVsIGV4cHJlc3Npb25cbiAgICB2YXIgc2VsZWN0QXMgPSAvIGFzIC8udGVzdChtYXRjaFswXSkgJiYgbWF0Y2hbMV07XG4gICAgLy8gQW4gZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgdG8gdHJhY2sgdGhlIGlkIG9mIGVhY2ggb2JqZWN0IGluIHRoZSBvcHRpb25zIGNvbGxlY3Rpb25cbiAgICB2YXIgdHJhY2tCeSA9IG1hdGNoWzldO1xuICAgIC8vIEFuIGV4cHJlc3Npb24gdGhhdCBnZW5lcmF0ZXMgdGhlIHZpZXdWYWx1ZSBmb3IgYW4gb3B0aW9uIGlmIHRoZXJlIGlzIG5vIGxhYmVsIGV4cHJlc3Npb25cbiAgICB2YXIgdmFsdWVGbiA9ICRwYXJzZShtYXRjaFsyXSA/IG1hdGNoWzFdIDogdmFsdWVOYW1lKTtcbiAgICB2YXIgc2VsZWN0QXNGbiA9IHNlbGVjdEFzICYmICRwYXJzZShzZWxlY3RBcyk7XG4gICAgdmFyIHZpZXdWYWx1ZUZuID0gc2VsZWN0QXNGbiB8fCB2YWx1ZUZuO1xuICAgIHZhciB0cmFja0J5Rm4gPSB0cmFja0J5ICYmICRwYXJzZSh0cmFja0J5KTtcblxuICAgIC8vIEdldCB0aGUgdmFsdWUgYnkgd2hpY2ggd2UgYXJlIGdvaW5nIHRvIHRyYWNrIHRoZSBvcHRpb25cbiAgICAvLyBpZiB3ZSBoYXZlIGEgdHJhY2tGbiB0aGVuIHVzZSB0aGF0IChwYXNzaW5nIHNjb3BlIGFuZCBsb2NhbHMpXG4gICAgLy8gb3RoZXJ3aXNlIGp1c3QgaGFzaCB0aGUgZ2l2ZW4gdmlld1ZhbHVlXG4gICAgdmFyIGdldFRyYWNrQnlWYWx1ZUZuID0gdHJhY2tCeSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSwgbG9jYWxzKSB7IHJldHVybiB0cmFja0J5Rm4oc2NvcGUsIGxvY2Fscyk7IH0gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SGFzaE9mVmFsdWUodmFsdWUpIHsgcmV0dXJuIGhhc2hLZXkodmFsdWUpOyB9O1xuICAgIHZhciBnZXRUcmFja0J5VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXR1cm4gZ2V0VHJhY2tCeVZhbHVlRm4odmFsdWUsIGdldExvY2Fscyh2YWx1ZSwga2V5KSk7XG4gICAgfTtcblxuICAgIHZhciBkaXNwbGF5Rm4gPSAkcGFyc2UobWF0Y2hbMl0gfHwgbWF0Y2hbMV0pO1xuICAgIHZhciBncm91cEJ5Rm4gPSAkcGFyc2UobWF0Y2hbM10gfHwgJycpO1xuICAgIHZhciBkaXNhYmxlV2hlbkZuID0gJHBhcnNlKG1hdGNoWzRdIHx8ICcnKTtcbiAgICB2YXIgdmFsdWVzRm4gPSAkcGFyc2UobWF0Y2hbOF0pO1xuXG4gICAgdmFyIGxvY2FscyA9IHt9O1xuICAgIHZhciBnZXRMb2NhbHMgPSBrZXlOYW1lID8gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgbG9jYWxzW2tleU5hbWVdID0ga2V5O1xuICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBsb2NhbHM7XG4gICAgfSA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGxvY2FscztcbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiBPcHRpb24oc2VsZWN0VmFsdWUsIHZpZXdWYWx1ZSwgbGFiZWwsIGdyb3VwLCBkaXNhYmxlZCkge1xuICAgICAgdGhpcy5zZWxlY3RWYWx1ZSA9IHNlbGVjdFZhbHVlO1xuICAgICAgdGhpcy52aWV3VmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0T3B0aW9uVmFsdWVzS2V5cyhvcHRpb25WYWx1ZXMpIHtcbiAgICAgIHZhciBvcHRpb25WYWx1ZXNLZXlzO1xuXG4gICAgICBpZiAoIWtleU5hbWUgJiYgaXNBcnJheUxpa2Uob3B0aW9uVmFsdWVzKSkge1xuICAgICAgICBvcHRpb25WYWx1ZXNLZXlzID0gb3B0aW9uVmFsdWVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgb2JqZWN0LCBleHRyYWN0IGtleXMsIGluIGVudW1lcmF0aW9uIG9yZGVyLCB1bnNvcnRlZFxuICAgICAgICBvcHRpb25WYWx1ZXNLZXlzID0gW107XG4gICAgICAgIGZvciAodmFyIGl0ZW1LZXkgaW4gb3B0aW9uVmFsdWVzKSB7XG4gICAgICAgICAgaWYgKG9wdGlvblZhbHVlcy5oYXNPd25Qcm9wZXJ0eShpdGVtS2V5KSAmJiBpdGVtS2V5LmNoYXJBdCgwKSAhPT0gJyQnKSB7XG4gICAgICAgICAgICBvcHRpb25WYWx1ZXNLZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb3B0aW9uVmFsdWVzS2V5cztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHJhY2tCeTogdHJhY2tCeSxcbiAgICAgIGdldFRyYWNrQnlWYWx1ZTogZ2V0VHJhY2tCeVZhbHVlLFxuICAgICAgZ2V0V2F0Y2hhYmxlczogJHBhcnNlKHZhbHVlc0ZuLCBmdW5jdGlvbihvcHRpb25WYWx1ZXMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgY29sbGVjdGlvbiBvZiB0aGluZ3MgdGhhdCB3ZSB3b3VsZCBsaWtlIHRvIHdhdGNoICh3YXRjaGVkQXJyYXkpXG4gICAgICAgIC8vIHNvIHRoYXQgdGhleSBjYW4gYWxsIGJlIHdhdGNoZWQgdXNpbmcgYSBzaW5nbGUgJHdhdGNoQ29sbGVjdGlvblxuICAgICAgICAvLyB0aGF0IG9ubHkgcnVucyB0aGUgaGFuZGxlciBvbmNlIGlmIGFueXRoaW5nIGNoYW5nZXNcbiAgICAgICAgdmFyIHdhdGNoZWRBcnJheSA9IFtdO1xuICAgICAgICBvcHRpb25WYWx1ZXMgPSBvcHRpb25WYWx1ZXMgfHwgW107XG5cbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0tleXMgPSBnZXRPcHRpb25WYWx1ZXNLZXlzKG9wdGlvblZhbHVlcyk7XG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXNMZW5ndGggPSBvcHRpb25WYWx1ZXNLZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG9wdGlvblZhbHVlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHZhciBrZXkgPSAob3B0aW9uVmFsdWVzID09PSBvcHRpb25WYWx1ZXNLZXlzKSA/IGluZGV4IDogb3B0aW9uVmFsdWVzS2V5c1tpbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9uVmFsdWVzW2tleV07XG5cbiAgICAgICAgICB2YXIgbG9jYWxzID0gZ2V0TG9jYWxzKHZhbHVlLCBrZXkpO1xuICAgICAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IGdldFRyYWNrQnlWYWx1ZUZuKHZhbHVlLCBsb2NhbHMpO1xuICAgICAgICAgIHdhdGNoZWRBcnJheS5wdXNoKHNlbGVjdFZhbHVlKTtcblxuICAgICAgICAgIC8vIE9ubHkgbmVlZCB0byB3YXRjaCB0aGUgZGlzcGxheUZuIGlmIHRoZXJlIGlzIGEgc3BlY2lmaWMgbGFiZWwgZXhwcmVzc2lvblxuICAgICAgICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSkge1xuICAgICAgICAgICAgdmFyIGxhYmVsID0gZGlzcGxheUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2gobGFiZWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE9ubHkgbmVlZCB0byB3YXRjaCB0aGUgZGlzYWJsZVdoZW5GbiBpZiB0aGVyZSBpcyBhIHNwZWNpZmljIGRpc2FibGUgZXhwcmVzc2lvblxuICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgdmFyIGRpc2FibGVXaGVuID0gZGlzYWJsZVdoZW5GbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgIHdhdGNoZWRBcnJheS5wdXNoKGRpc2FibGVXaGVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdhdGNoZWRBcnJheTtcbiAgICAgIH0pLFxuXG4gICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgb3B0aW9uSXRlbXMgPSBbXTtcbiAgICAgICAgdmFyIHNlbGVjdFZhbHVlTWFwID0ge307XG5cbiAgICAgICAgLy8gVGhlIG9wdGlvbiB2YWx1ZXMgd2VyZSBhbHJlYWR5IGNvbXB1dGVkIGluIHRoZSBgZ2V0V2F0Y2hhYmxlc2AgZm4sXG4gICAgICAgIC8vIHdoaWNoIG11c3QgaGF2ZSBiZWVuIGNhbGxlZCB0byB0cmlnZ2VyIGBnZXRPcHRpb25zYFxuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzID0gdmFsdWVzRm4oc2NvcGUpIHx8IFtdO1xuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzS2V5cyA9IGdldE9wdGlvblZhbHVlc0tleXMob3B0aW9uVmFsdWVzKTtcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0xlbmd0aCA9IG9wdGlvblZhbHVlc0tleXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBvcHRpb25WYWx1ZXNMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICB2YXIga2V5ID0gKG9wdGlvblZhbHVlcyA9PT0gb3B0aW9uVmFsdWVzS2V5cykgPyBpbmRleCA6IG9wdGlvblZhbHVlc0tleXNbaW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9wdGlvblZhbHVlc1trZXldO1xuICAgICAgICAgIHZhciBsb2NhbHMgPSBnZXRMb2NhbHModmFsdWUsIGtleSk7XG4gICAgICAgICAgdmFyIHZpZXdWYWx1ZSA9IHZpZXdWYWx1ZUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IGdldFRyYWNrQnlWYWx1ZUZuKHZpZXdWYWx1ZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIGdyb3VwID0gZ3JvdXBCeUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBkaXNhYmxlZCA9IGRpc2FibGVXaGVuRm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIG9wdGlvbkl0ZW0gPSBuZXcgT3B0aW9uKHNlbGVjdFZhbHVlLCB2aWV3VmFsdWUsIGxhYmVsLCBncm91cCwgZGlzYWJsZWQpO1xuXG4gICAgICAgICAgb3B0aW9uSXRlbXMucHVzaChvcHRpb25JdGVtKTtcbiAgICAgICAgICBzZWxlY3RWYWx1ZU1hcFtzZWxlY3RWYWx1ZV0gPSBvcHRpb25JdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpdGVtczogb3B0aW9uSXRlbXMsXG4gICAgICAgICAgc2VsZWN0VmFsdWVNYXA6IHNlbGVjdFZhbHVlTWFwLFxuICAgICAgICAgIGdldE9wdGlvbkZyb21WaWV3VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0VmFsdWVNYXBbZ2V0VHJhY2tCeVZhbHVlKHZhbHVlKV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXRWaWV3VmFsdWVGcm9tT3B0aW9uOiBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSB2aWV3VmFsdWUgY291bGQgYmUgYW4gb2JqZWN0IHRoYXQgbWF5IGJlIG11dGF0ZWQgYnkgdGhlIGFwcGxpY2F0aW9uLFxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBtYWtlIGEgY29weSBhbmQgbm90IHJldHVybiB0aGUgcmVmZXJlbmNlIHRvIHRoZSB2YWx1ZSBvbiB0aGUgb3B0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnkgPyBjb3B5KG9wdGlvbi52aWV3VmFsdWUpIDogb3B0aW9uLnZpZXdWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG5cbiAgLy8gU3VwcG9ydDogSUUgOSBvbmx5XG4gIC8vIFdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICB2YXIgb3B0aW9uVGVtcGxhdGUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyksXG4gICAgICBvcHRHcm91cFRlbXBsYXRlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGdyb3VwJyk7XG5cbiAgICBmdW5jdGlvbiBuZ09wdGlvbnNQb3N0TGluayhzY29wZSwgc2VsZWN0RWxlbWVudCwgYXR0ciwgY3RybHMpIHtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcbiAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuICAgICAgdmFyIG11bHRpcGxlID0gYXR0ci5tdWx0aXBsZTtcblxuICAgICAgLy8gVGhlIGVtcHR5T3B0aW9uIGFsbG93cyB0aGUgYXBwbGljYXRpb24gZGV2ZWxvcGVyIHRvIHByb3ZpZGUgdGhlaXIgb3duIGN1c3RvbSBcImVtcHR5XCJcbiAgICAgIC8vIG9wdGlvbiB3aGVuIHRoZSB2aWV3VmFsdWUgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb24gdmFsdWVzLlxuICAgICAgZm9yICh2YXIgaSA9IDAsIGNoaWxkcmVuID0gc2VsZWN0RWxlbWVudC5jaGlsZHJlbigpLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLnZhbHVlID09PSAnJykge1xuICAgICAgICAgIHNlbGVjdEN0cmwuaGFzRW1wdHlPcHRpb24gPSB0cnVlO1xuICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24gPSBjaGlsZHJlbi5lcShpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgZW1wdHkgb3B0aW9uIHdpbGwgYmUgY29tcGlsZWQgYW5kIHJlbmRlcmVkIGJlZm9yZSB3ZSBmaXJzdCBnZW5lcmF0ZSB0aGUgb3B0aW9uc1xuICAgICAgc2VsZWN0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgICB2YXIgcHJvdmlkZWRFbXB0eU9wdGlvbiA9ICEhc2VsZWN0Q3RybC5lbXB0eU9wdGlvbjtcblxuICAgICAgdmFyIHVua25vd25PcHRpb24gPSBqcUxpdGUob3B0aW9uVGVtcGxhdGUuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICB1bmtub3duT3B0aW9uLnZhbCgnPycpO1xuXG4gICAgICB2YXIgb3B0aW9ucztcbiAgICAgIHZhciBuZ09wdGlvbnMgPSBwYXJzZU9wdGlvbnNFeHByZXNzaW9uKGF0dHIubmdPcHRpb25zLCBzZWxlY3RFbGVtZW50LCBzY29wZSk7XG4gICAgICAvLyBUaGlzIHN0b3JlcyB0aGUgbmV3bHkgY3JlYXRlZCBvcHRpb25zIGJlZm9yZSB0aGV5IGFyZSBhcHBlbmRlZCB0byB0aGUgc2VsZWN0LlxuICAgICAgLy8gU2luY2UgdGhlIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIGZyYWdtZW50IHdoZW4gaXQgaXMgYXBwZW5kZWQsXG4gICAgICAvLyB3ZSBvbmx5IG5lZWQgdG8gY3JlYXRlIGl0IG9uY2UuXG4gICAgICB2YXIgbGlzdEZyYWdtZW50ID0gJGRvY3VtZW50WzBdLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgLy8gT3ZlcndyaXRlIHRoZSBpbXBsZW1lbnRhdGlvbi4gbmdPcHRpb25zIGRvZXNuJ3QgdXNlIGhhc2hlc1xuICAgICAgc2VsZWN0Q3RybC5nZW5lcmF0ZVVua25vd25PcHRpb25WYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICByZXR1cm4gJz8nO1xuICAgICAgfTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBjb250cm9sbGVyIG1ldGhvZHMgZm9yIG11bHRpcGxlIHNlbGVjdGFibGUgb3B0aW9uc1xuICAgICAgaWYgKCFtdWx0aXBsZSkge1xuXG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlTmdPcHRpb25zVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAvLyBUaGUgb3B0aW9ucyBtaWdodCBub3QgYmUgZGVmaW5lZCB5ZXQgd2hlbiBuZ01vZGVsIHRyaWVzIHRvIHJlbmRlclxuICAgICAgICAgIGlmICghb3B0aW9ucykgcmV0dXJuO1xuXG4gICAgICAgICAgdmFyIHNlbGVjdGVkT3B0aW9uID0gc2VsZWN0RWxlbWVudFswXS5vcHRpb25zW3NlbGVjdEVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleF07XG4gICAgICAgICAgdmFyIG9wdGlvbiA9IG9wdGlvbnMuZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgICAvLyBNYWtlIHN1cmUgdG8gcmVtb3ZlIHRoZSBzZWxlY3RlZCBhdHRyaWJ1dGUgZnJvbSB0aGUgcHJldmlvdXNseSBzZWxlY3RlZCBvcHRpb25cbiAgICAgICAgICAvLyBPdGhlcndpc2UsIHNjcmVlbiByZWFkZXJzIG1pZ2h0IGdldCBjb25mdXNlZFxuICAgICAgICAgIGlmIChzZWxlY3RlZE9wdGlvbikgc2VsZWN0ZWRPcHRpb24ucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgLy8gRG9uJ3QgdXBkYXRlIHRoZSBvcHRpb24gd2hlbiBpdCBpcyBhbHJlYWR5IHNlbGVjdGVkLlxuICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIHRoZSBicm93c2VyIHdpbGwgc2VsZWN0IHRoZSBmaXJzdCBvcHRpb24gYnkgZGVmYXVsdC4gSW4gdGhhdCBjYXNlLFxuICAgICAgICAgICAgLy8gbW9zdCBwcm9wZXJ0aWVzIGFyZSBzZXQgYXV0b21hdGljYWxseSAtIGV4Y2VwdCB0aGUgYHNlbGVjdGVkYCBhdHRyaWJ1dGUsIHdoaWNoIHdlXG4gICAgICAgICAgICAvLyBzZXQgYWx3YXlzXG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RFbGVtZW50WzBdLnZhbHVlICE9PSBvcHRpb24uc2VsZWN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG5cbiAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudFswXS52YWx1ZSA9IG9wdGlvbi5zZWxlY3RWYWx1ZTtcbiAgICAgICAgICAgICAgb3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb24uZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdEN0cmwuc2VsZWN0VW5rbm93bk9yRW1wdHlPcHRpb24odmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxlY3RDdHJsLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWROZ09wdGlvbnNWYWx1ZSgpIHtcblxuICAgICAgICAgIHZhciBzZWxlY3RlZE9wdGlvbiA9IG9wdGlvbnMuc2VsZWN0VmFsdWVNYXBbc2VsZWN0RWxlbWVudC52YWwoKV07XG5cbiAgICAgICAgICBpZiAoc2VsZWN0ZWRPcHRpb24gJiYgIXNlbGVjdGVkT3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBzZWxlY3RDdHJsLnVuc2VsZWN0RW1wdHlPcHRpb24oKTtcbiAgICAgICAgICAgIHNlbGVjdEN0cmwucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbihzZWxlY3RlZE9wdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBgdHJhY2sgYnlgIHRoZW4gd2UgbXVzdCB3YXRjaCB0aGUgdHJhY2tlZCB2YWx1ZSBvbiB0aGUgbW9kZWxcbiAgICAgICAgLy8gc2luY2UgbmdNb2RlbCBvbmx5IHdhdGNoZXMgZm9yIG9iamVjdCBpZGVudGl0eSBjaGFuZ2VcbiAgICAgICAgLy8gRklYTUU6IFdoZW4gYSB1c2VyIHNlbGVjdHMgYW4gb3B0aW9uLCB0aGlzIHdhdGNoIHdpbGwgZmlyZSBuZWVkbGVzc2x5XG4gICAgICAgIGlmIChuZ09wdGlvbnMudHJhY2tCeSkge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gbmdPcHRpb25zLmdldFRyYWNrQnlWYWx1ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTsgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7IH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVOZ09wdGlvbnNNdWx0aXBsZSh2YWx1ZXMpIHtcbiAgICAgICAgICAvLyBUaGUgb3B0aW9ucyBtaWdodCBub3QgYmUgZGVmaW5lZCB5ZXQgd2hlbiBuZ01vZGVsIHRyaWVzIHRvIHJlbmRlclxuICAgICAgICAgIGlmICghb3B0aW9ucykgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gT25seSBzZXQgYDxvcHRpb24+LnNlbGVjdGVkYCBpZiBuZWNlc3NhcnksIGluIG9yZGVyIHRvIHByZXZlbnQgc29tZSBicm93c2VycyBmcm9tXG4gICAgICAgICAgLy8gc2Nyb2xsaW5nIHRvIGA8b3B0aW9uPmAgZWxlbWVudHMgdGhhdCBhcmUgb3V0c2lkZSB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50J3Mgdmlld3BvcnQuXG4gICAgICAgICAgdmFyIHNlbGVjdGVkT3B0aW9ucyA9IHZhbHVlcyAmJiB2YWx1ZXMubWFwKGdldEFuZFVwZGF0ZVNlbGVjdGVkT3B0aW9uKSB8fCBbXTtcblxuICAgICAgICAgIG9wdGlvbnMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb24uZWxlbWVudC5zZWxlY3RlZCAmJiAhaW5jbHVkZXMoc2VsZWN0ZWRPcHRpb25zLCBvcHRpb24pKSB7XG4gICAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cblxuICAgICAgICBzZWxlY3RDdHJsLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWROZ09wdGlvbnNNdWx0aXBsZSgpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0ZWRWYWx1ZXMgPSBzZWxlY3RFbGVtZW50LnZhbCgpIHx8IFtdLFxuICAgICAgICAgICAgICBzZWxlY3Rpb25zID0gW107XG5cbiAgICAgICAgICBmb3JFYWNoKHNlbGVjdGVkVmFsdWVzLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG9wdGlvbnMuc2VsZWN0VmFsdWVNYXBbdmFsdWVdO1xuICAgICAgICAgICAgaWYgKG9wdGlvbiAmJiAhb3B0aW9uLmRpc2FibGVkKSBzZWxlY3Rpb25zLnB1c2gob3B0aW9ucy5nZXRWaWV3VmFsdWVGcm9tT3B0aW9uKG9wdGlvbikpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbnM7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSWYgd2UgYXJlIHVzaW5nIGB0cmFjayBieWAgdGhlbiB3ZSBtdXN0IHdhdGNoIHRoZXNlIHRyYWNrZWQgdmFsdWVzIG9uIHRoZSBtb2RlbFxuICAgICAgICAvLyBzaW5jZSBuZ01vZGVsIG9ubHkgd2F0Y2hlcyBmb3Igb2JqZWN0IGlkZW50aXR5IGNoYW5nZVxuICAgICAgICBpZiAobmdPcHRpb25zLnRyYWNrQnkpIHtcblxuICAgICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJheShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZS5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmdPcHRpb25zLmdldFRyYWNrQnlWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcblxuICAgICAgICAvLyBjb21waWxlIHRoZSBlbGVtZW50IHNpbmNlIHRoZXJlIG1pZ2h0IGJlIGJpbmRpbmdzIGluIGl0XG4gICAgICAgICRjb21waWxlKHNlbGVjdEN0cmwuZW1wdHlPcHRpb24pKHNjb3BlKTtcblxuICAgICAgICBzZWxlY3RFbGVtZW50LnByZXBlbmQoc2VsZWN0Q3RybC5lbXB0eU9wdGlvbik7XG5cbiAgICAgICAgaWYgKHNlbGVjdEN0cmwuZW1wdHlPcHRpb25bMF0ubm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UKSB7XG4gICAgICAgICAgLy8gVGhpcyBtZWFucyB0aGUgZW1wdHkgb3B0aW9uIGhhcyBjdXJyZW50bHkgbm8gYWN0dWFsIERPTSBub2RlLCBwcm9iYWJseSBiZWNhdXNlXG4gICAgICAgICAgLy8gaXQgaGFzIGJlZW4gbW9kaWZpZWQgYnkgYSB0cmFuc2NsdXNpb24gZGlyZWN0aXZlLlxuICAgICAgICAgIHNlbGVjdEN0cmwuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcblxuICAgICAgICAgIC8vIFJlZGVmaW5lIHRoZSByZWdpc3Rlck9wdGlvbiBmdW5jdGlvbiwgd2hpY2ggd2lsbCBjYXRjaFxuICAgICAgICAgIC8vIG9wdGlvbnMgdGhhdCBhcmUgYWRkZWQgYnkgbmdJZiBldGMuIChyZW5kZXJpbmcgb2YgdGhlIG5vZGUgaXMgYXN5bmMgYmVjYXVzZSBvZlxuICAgICAgICAgIC8vIGxhenkgdHJhbnNjbHVzaW9uKVxuICAgICAgICAgIHNlbGVjdEN0cmwucmVnaXN0ZXJPcHRpb24gPSBmdW5jdGlvbihvcHRpb25TY29wZSwgb3B0aW9uRWwpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25FbC52YWwoKSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5oYXNFbXB0eU9wdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24gPSBvcHRpb25FbDtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5lbXB0eU9wdGlvbi5yZW1vdmVDbGFzcygnbmctc2NvcGUnKTtcbiAgICAgICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHRoZSBuZXcgZW1wdHkgb3B0aW9uIGlzIHNlbGVjdGVkIGlmIHByZXZpb3VzbHkgbm8gb3B0aW9uIHdhcyBzZWxlY3RlZFxuICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgb3B0aW9uRWwub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5lZWRzUmVyZW5kZXIgPSBzZWxlY3RDdHJsLiRpc0VtcHR5T3B0aW9uU2VsZWN0ZWQoKTtcblxuICAgICAgICAgICAgICAgIHNlbGVjdEN0cmwuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZWxlY3RDdHJsLmVtcHR5T3B0aW9uID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5lZWRzUmVyZW5kZXIpIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2xhc3MsIHdoaWNoIGlzIGFkZGVkIGF1dG9tYXRpY2FsbHkgYmVjYXVzZSB3ZSByZWNvbXBpbGUgdGhlIGVsZW1lbnQgYW5kIGl0XG4gICAgICAgICAgLy8gYmVjb21lcyB0aGUgY29tcGlsYXRpb24gcm9vdFxuICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24ucmVtb3ZlQ2xhc3MoJ25nLXNjb3BlJyk7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICAvLyBXZSB3aWxsIHJlLXJlbmRlciB0aGUgb3B0aW9uIGVsZW1lbnRzIGlmIHRoZSBvcHRpb24gdmFsdWVzIG9yIGxhYmVscyBjaGFuZ2VcbiAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24obmdPcHRpb25zLmdldFdhdGNoYWJsZXMsIHVwZGF0ZU9wdGlvbnMpO1xuXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAgICAgZnVuY3Rpb24gYWRkT3B0aW9uRWxlbWVudChvcHRpb24sIHBhcmVudCkge1xuICAgICAgICB2YXIgb3B0aW9uRWxlbWVudCA9IG9wdGlvblRlbXBsYXRlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChvcHRpb25FbGVtZW50KTtcbiAgICAgICAgdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIG9wdGlvbkVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRBbmRVcGRhdGVTZWxlY3RlZE9wdGlvbih2aWV3VmFsdWUpIHtcbiAgICAgICAgdmFyIG9wdGlvbiA9IG9wdGlvbnMuZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZSh2aWV3VmFsdWUpO1xuICAgICAgICB2YXIgZWxlbWVudCA9IG9wdGlvbiAmJiBvcHRpb24uZWxlbWVudDtcblxuICAgICAgICBpZiAoZWxlbWVudCAmJiAhZWxlbWVudC5zZWxlY3RlZCkgZWxlbWVudC5zZWxlY3RlZCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIGVsZW1lbnQpIHtcbiAgICAgICAgb3B0aW9uLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gb3B0aW9uLmRpc2FibGVkO1xuICAgICAgICAvLyBTdXBwb3J0OiBJRSAxMSBvbmx5LCBFZGdlIDEyLTEzIG9ubHlcbiAgICAgICAgLy8gTk9URTogVGhlIGxhYmVsIG11c3QgYmUgc2V0IGJlZm9yZSB0aGUgdmFsdWUsIG90aGVyd2lzZSBJRSAxMSAmIEVkZ2UgY3JlYXRlIHVucmVzcG9uc2l2ZVxuICAgICAgICAvLyBzZWxlY3RzIGluIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcyB3aGVuIG11bHRpcGxlIHNlbGVjdHMgYXJlIG5leHQgdG8gZWFjaCBvdGhlciBhbmQgZGlzcGxheVxuICAgICAgICAvLyB0aGUgb3B0aW9uIGxpc3QgaW4gbGlzdGJveCBzdHlsZSwgaS5lLiB0aGUgc2VsZWN0IGlzIFttdWx0aXBsZV0sIG9yIHNwZWNpZmllcyBhIFtzaXplXS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzExMzE0IGZvciBtb3JlIGluZm8uXG4gICAgICAgIC8vIFRoaXMgaXMgdW5mb3J0dW5hdGVseSB1bnRlc3RhYmxlIHdpdGggdW5pdCAvIGUyZSB0ZXN0c1xuICAgICAgICBpZiAob3B0aW9uLmxhYmVsICE9PSBlbGVtZW50LmxhYmVsKSB7XG4gICAgICAgICAgZWxlbWVudC5sYWJlbCA9IG9wdGlvbi5sYWJlbDtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gb3B0aW9uLmxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSBvcHRpb24uc2VsZWN0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoKSB7XG4gICAgICAgIHZhciBwcmV2aW91c1ZhbHVlID0gb3B0aW9ucyAmJiBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuXG4gICAgICAgIC8vIFdlIG11c3QgcmVtb3ZlIGFsbCBjdXJyZW50IG9wdGlvbnMsIGJ1dCBjYW5ub3Qgc2ltcGx5IHNldCBpbm5lckhUTUwgPSBudWxsXG4gICAgICAgIC8vIHNpbmNlIHRoZSBwcm92aWRlZEVtcHR5T3B0aW9uIG1pZ2h0IGhhdmUgYW4gbmdJZiBvbiBpdCB0aGF0IGluc2VydHMgY29tbWVudHMgd2hpY2ggd2VcbiAgICAgICAgLy8gbXVzdCBwcmVzZXJ2ZS5cbiAgICAgICAgLy8gSW5zdGVhZCwgaXRlcmF0ZSBvdmVyIHRoZSBjdXJyZW50IG9wdGlvbiBlbGVtZW50cyBhbmQgcmVtb3ZlIHRoZW0gb3IgdGhlaXIgb3B0Z3JvdXBcbiAgICAgICAgLy8gcGFyZW50c1xuICAgICAgICBpZiAob3B0aW9ucykge1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IG9wdGlvbnMuaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLml0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChvcHRpb24uZ3JvdXApKSB7XG4gICAgICAgICAgICAgIGpxTGl0ZVJlbW92ZShvcHRpb24uZWxlbWVudC5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGpxTGl0ZVJlbW92ZShvcHRpb24uZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IG5nT3B0aW9ucy5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgdmFyIGdyb3VwRWxlbWVudE1hcCA9IHt9O1xuXG4gICAgICAgIG9wdGlvbnMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbiBhZGRPcHRpb24ob3B0aW9uKSB7XG4gICAgICAgICAgdmFyIGdyb3VwRWxlbWVudDtcblxuICAgICAgICAgIGlmIChpc0RlZmluZWQob3B0aW9uLmdyb3VwKSkge1xuXG4gICAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBpcyB0byBsaXZlIGluIGEgZ3JvdXBcbiAgICAgICAgICAgIC8vIFNlZSBpZiB3ZSBoYXZlIGFscmVhZHkgY3JlYXRlZCB0aGlzIGdyb3VwXG4gICAgICAgICAgICBncm91cEVsZW1lbnQgPSBncm91cEVsZW1lbnRNYXBbb3B0aW9uLmdyb3VwXTtcblxuICAgICAgICAgICAgaWYgKCFncm91cEVsZW1lbnQpIHtcblxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQgPSBvcHRHcm91cFRlbXBsYXRlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgIGxpc3RGcmFnbWVudC5hcHBlbmRDaGlsZChncm91cEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgbGFiZWwgb24gdGhlIGdyb3VwIGVsZW1lbnRcbiAgICAgICAgICAgICAgLy8gXCJudWxsXCIgaXMgc3BlY2lhbCBjYXNlZCBiZWNhdXNlIG9mIFNhZmFyaVxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQubGFiZWwgPSBvcHRpb24uZ3JvdXAgPT09IG51bGwgPyAnbnVsbCcgOiBvcHRpb24uZ3JvdXA7XG5cbiAgICAgICAgICAgICAgLy8gU3RvcmUgaXQgZm9yIHVzZSBsYXRlclxuICAgICAgICAgICAgICBncm91cEVsZW1lbnRNYXBbb3B0aW9uLmdyb3VwXSA9IGdyb3VwRWxlbWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkT3B0aW9uRWxlbWVudChvcHRpb24sIGdyb3VwRWxlbWVudCk7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBpcyBub3QgaW4gYSBncm91cFxuICAgICAgICAgICAgYWRkT3B0aW9uRWxlbWVudChvcHRpb24sIGxpc3RGcmFnbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBzZWxlY3RFbGVtZW50WzBdLmFwcGVuZENoaWxkKGxpc3RGcmFnbWVudCk7XG5cbiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQgZHVlIHRvIHRoZSB1cGRhdGUgdG8gdGhlIG9wdGlvbnNcbiAgICAgICAgaWYgKCFuZ01vZGVsQ3RybC4kaXNFbXB0eShwcmV2aW91c1ZhbHVlKSkge1xuICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuICAgICAgICAgIHZhciBpc05vdFByaW1pdGl2ZSA9IG5nT3B0aW9ucy50cmFja0J5IHx8IG11bHRpcGxlO1xuICAgICAgICAgIGlmIChpc05vdFByaW1pdGl2ZSA/ICFlcXVhbHMocHJldmlvdXNWYWx1ZSwgbmV4dFZhbHVlKSA6IHByZXZpb3VzVmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHJlcXVpcmU6IFsnc2VsZWN0JywgJ25nTW9kZWwnXSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uIG5nT3B0aW9uc1ByZUxpbmsoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgIC8vIERlYWN0aXZhdGUgdGhlIFNlbGVjdENvbnRyb2xsZXIucmVnaXN0ZXIgbWV0aG9kIHRvIHByZXZlbnRcbiAgICAgICAgLy8gb3B0aW9uIGRpcmVjdGl2ZXMgZnJvbSBhY2NpZGVudGFsbHkgcmVnaXN0ZXJpbmcgdGhlbXNlbHZlc1xuICAgICAgICAvLyAoYW5kIHVud2FudGVkICRkZXN0cm95IGhhbmRsZXJzIGV0Yy4pXG4gICAgICAgIGN0cmxzWzBdLnJlZ2lzdGVyT3B0aW9uID0gbm9vcDtcbiAgICAgIH0sXG4gICAgICBwb3N0OiBuZ09wdGlvbnNQb3N0TGlua1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUGx1cmFsaXplXG4gKiBAcmVzdHJpY3QgRUFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGBuZ1BsdXJhbGl6ZWAgaXMgYSBkaXJlY3RpdmUgdGhhdCBkaXNwbGF5cyBtZXNzYWdlcyBhY2NvcmRpbmcgdG8gZW4tVVMgbG9jYWxpemF0aW9uIHJ1bGVzLlxuICogVGhlc2UgcnVsZXMgYXJlIGJ1bmRsZWQgd2l0aCBhbmd1bGFyLmpzLCBidXQgY2FuIGJlIG92ZXJyaWRkZW5cbiAqIChzZWUge0BsaW5rIGd1aWRlL2kxOG4gQW5ndWxhciBpMThufSBkZXYgZ3VpZGUpLiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGRpcmVjdGl2ZVxuICogYnkgc3BlY2lmeWluZyB0aGUgbWFwcGluZ3MgYmV0d2VlblxuICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpXG4gKiBhbmQgdGhlIHN0cmluZ3MgdG8gYmUgZGlzcGxheWVkLlxuICpcbiAqICMgUGx1cmFsIGNhdGVnb3JpZXMgYW5kIGV4cGxpY2l0IG51bWJlciBydWxlc1xuICogVGhlcmUgYXJlIHR3b1xuICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpXG4gKiBpbiBBbmd1bGFyJ3MgZGVmYXVsdCBlbi1VUyBsb2NhbGU6IFwib25lXCIgYW5kIFwib3RoZXJcIi5cbiAqXG4gKiBXaGlsZSBhIHBsdXJhbCBjYXRlZ29yeSBtYXkgbWF0Y2ggbWFueSBudW1iZXJzIChmb3IgZXhhbXBsZSwgaW4gZW4tVVMgbG9jYWxlLCBcIm90aGVyXCIgY2FuIG1hdGNoXG4gKiBhbnkgbnVtYmVyIHRoYXQgaXMgbm90IDEpLCBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBjYW4gb25seSBtYXRjaCBvbmUgbnVtYmVyLiBGb3IgZXhhbXBsZSwgdGhlXG4gKiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3IgXCIzXCIgbWF0Y2hlcyB0aGUgbnVtYmVyIDMuIFRoZXJlIGFyZSBleGFtcGxlcyBvZiBwbHVyYWwgY2F0ZWdvcmllc1xuICogYW5kIGV4cGxpY2l0IG51bWJlciBydWxlcyB0aHJvdWdob3V0IHRoZSByZXN0IG9mIHRoaXMgZG9jdW1lbnRhdGlvbi5cbiAqXG4gKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplXG4gKiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGJ5IHByb3ZpZGluZyAyIGF0dHJpYnV0ZXM6IGBjb3VudGAgYW5kIGB3aGVuYC5cbiAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGF0dHJpYnV0ZSwgYG9mZnNldGAuXG4gKlxuICogVGhlIHZhbHVlIG9mIHRoZSBgY291bnRgIGF0dHJpYnV0ZSBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uXG4gKiBBbmd1bGFyIGV4cHJlc3Npb259OyB0aGVzZSBhcmUgZXZhbHVhdGVkIG9uIHRoZSBjdXJyZW50IHNjb3BlIGZvciBpdHMgYm91bmQgdmFsdWUuXG4gKlxuICogVGhlIGB3aGVuYCBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBtYXBwaW5ncyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yaWVzIGFuZCB0aGUgYWN0dWFsXG4gKiBzdHJpbmcgdG8gYmUgZGlzcGxheWVkLiBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBzaG91bGQgYmUgYSBKU09OIG9iamVjdC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIlxuICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAqIDwvbmctcGx1cmFsaXplPlxuICpgYGBcbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSwgYFwiMDogTm9ib2R5IGlzIHZpZXdpbmcuXCJgIGlzIGFuIGV4cGxpY2l0IG51bWJlciBydWxlLiBJZiB5b3UgZGlkIG5vdFxuICogc3BlY2lmeSB0aGlzIHJ1bGUsIDAgd291bGQgYmUgbWF0Y2hlZCB0byB0aGUgXCJvdGhlclwiIGNhdGVnb3J5IGFuZCBcIjAgcGVvcGxlIGFyZSB2aWV3aW5nXCJcbiAqIHdvdWxkIGJlIHNob3duIGluc3RlYWQgb2YgXCJOb2JvZHkgaXMgdmlld2luZ1wiLiBZb3UgY2FuIHNwZWNpZnkgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yXG4gKiBvdGhlciBudW1iZXJzLCBmb3IgZXhhbXBsZSAxMiwgc28gdGhhdCBpbnN0ZWFkIG9mIHNob3dpbmcgXCIxMiBwZW9wbGUgYXJlIHZpZXdpbmdcIiwgeW91IGNhblxuICogc2hvdyBcImEgZG96ZW4gcGVvcGxlIGFyZSB2aWV3aW5nXCIuXG4gKlxuICogWW91IGNhbiB1c2UgYSBzZXQgb2YgY2xvc2VkIGJyYWNlcyAoYHt9YCkgYXMgYSBwbGFjZWhvbGRlciBmb3IgdGhlIG51bWJlciB0aGF0IHlvdSB3YW50IHN1YnN0aXR1dGVkXG4gKiBpbnRvIHBsdXJhbGl6ZWQgc3RyaW5ncy4gSW4gdGhlIHByZXZpb3VzIGV4YW1wbGUsIEFuZ3VsYXIgd2lsbCByZXBsYWNlIGB7fWAgd2l0aFxuICogPHNwYW4gbmctbm9uLWJpbmRhYmxlPmB7e3BlcnNvbkNvdW50fX1gPC9zcGFuPi4gVGhlIGNsb3NlZCBicmFjZXMgYHt9YCBpcyBhIHBsYWNlaG9sZGVyXG4gKiBmb3IgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7bnVtYmVyRXhwcmVzc2lvbn19PC9zcGFuPi5cbiAqXG4gKiBJZiBubyBydWxlIGlzIGRlZmluZWQgZm9yIGEgY2F0ZWdvcnksIHRoZW4gYW4gZW1wdHkgc3RyaW5nIGlzIGRpc3BsYXllZCBhbmQgYSB3YXJuaW5nIGlzIGdlbmVyYXRlZC5cbiAqIE5vdGUgdGhhdCBzb21lIGxvY2FsZXMgZGVmaW5lIG1vcmUgY2F0ZWdvcmllcyB0aGFuIGBvbmVgIGFuZCBgb3RoZXJgLiBGb3IgZXhhbXBsZSwgZnItZnIgZGVmaW5lcyBgZmV3YCBhbmQgYG1hbnlgLlxuICpcbiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemUgd2l0aCBvZmZzZXRcbiAqIFRoZSBgb2Zmc2V0YCBhdHRyaWJ1dGUgYWxsb3dzIGZ1cnRoZXIgY3VzdG9taXphdGlvbiBvZiBwbHVyYWxpemVkIHRleHQsIHdoaWNoIGNhbiByZXN1bHQgaW5cbiAqIGEgYmV0dGVyIHVzZXIgZXhwZXJpZW5jZS4gRm9yIGV4YW1wbGUsIGluc3RlYWQgb2YgdGhlIG1lc3NhZ2UgXCI0IHBlb3BsZSBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50XCIsXG4gKiB5b3UgbWlnaHQgZGlzcGxheSBcIkpvaG4sIEthdGUgYW5kIDIgb3RoZXJzIGFyZSB2aWV3aW5nIHRoaXMgZG9jdW1lbnRcIi5cbiAqIFRoZSBvZmZzZXQgYXR0cmlidXRlIGFsbG93cyB5b3UgdG8gb2Zmc2V0IGEgbnVtYmVyIGJ5IGFueSBkZXNpcmVkIHZhbHVlLlxuICogTGV0J3MgdGFrZSBhIGxvb2sgYXQgYW4gZXhhbXBsZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIiBvZmZzZXQ9MlxuICogICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAqIDwvbmctcGx1cmFsaXplPlxuICogYGBgXG4gKlxuICogTm90aWNlIHRoYXQgd2UgYXJlIHN0aWxsIHVzaW5nIHR3byBwbHVyYWwgY2F0ZWdvcmllcyhvbmUsIG90aGVyKSwgYnV0IHdlIGFkZGVkXG4gKiB0aHJlZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgMCwgMSBhbmQgMi5cbiAqIFdoZW4gb25lIHBlcnNvbiwgcGVyaGFwcyBKb2huLCB2aWV3cyB0aGUgZG9jdW1lbnQsIFwiSm9obiBpcyB2aWV3aW5nXCIgd2lsbCBiZSBzaG93bi5cbiAqIFdoZW4gdGhyZWUgcGVvcGxlIHZpZXcgdGhlIGRvY3VtZW50LCBubyBleHBsaWNpdCBudW1iZXIgcnVsZSBpcyBmb3VuZCwgc29cbiAqIGFuIG9mZnNldCBvZiAyIGlzIHRha2VuIG9mZiAzLCBhbmQgQW5ndWxhciB1c2VzIDEgdG8gZGVjaWRlIHRoZSBwbHVyYWwgY2F0ZWdvcnkuXG4gKiBJbiB0aGlzIGNhc2UsIHBsdXJhbCBjYXRlZ29yeSAnb25lJyBpcyBtYXRjaGVkIGFuZCBcIkpvaG4sIE1hcnkgYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmdcIlxuICogaXMgc2hvd24uXG4gKlxuICogTm90ZSB0aGF0IHdoZW4geW91IHNwZWNpZnkgb2Zmc2V0cywgeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yXG4gKiBudW1iZXJzIGZyb20gMCB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBvZmZzZXQuIElmIHlvdSB1c2UgYW4gb2Zmc2V0IG9mIDMsIGZvciBleGFtcGxlLFxuICogeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yIDAsIDEsIDIgYW5kIDMuIFlvdSBtdXN0IGFsc28gcHJvdmlkZSBwbHVyYWwgc3RyaW5ncyBmb3JcbiAqIHBsdXJhbCBjYXRlZ29yaWVzIFwib25lXCIgYW5kIFwib3RoZXJcIi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xleHByZXNzaW9ufSBjb3VudCBUaGUgdmFyaWFibGUgdG8gYmUgYm91bmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gd2hlbiBUaGUgbWFwcGluZyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yeSB0byBpdHMgY29ycmVzcG9uZGluZyBzdHJpbmdzLlxuICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGRlZHVjdCBmcm9tIHRoZSB0b3RhbCBudW1iZXIuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJwbHVyYWxpemVFeGFtcGxlXCIgbmFtZT1cIm5nLXBsdXJhbGl6ZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncGx1cmFsaXplRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjEgPSAnSWdvcic7XG4gICAgICAgICAgICAgICRzY29wZS5wZXJzb24yID0gJ01pc2tvJztcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbkNvdW50ID0gMTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPGxhYmVsPlBlcnNvbiAxOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uMVwiIHZhbHVlPVwiSWdvclwiIC8+PC9sYWJlbD48YnIvPlxuICAgICAgICAgIDxsYWJlbD5QZXJzb24gMjo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbjJcIiB2YWx1ZT1cIk1pc2tvXCIgLz48L2xhYmVsPjxici8+XG4gICAgICAgICAgPGxhYmVsPk51bWJlciBvZiBQZW9wbGU6PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJwZXJzb25Db3VudFwiIHZhbHVlPVwiMVwiIC8+PC9sYWJlbD48YnIvPlxuXG4gICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIHNpbXBsZSBwbHVyYWxpemF0aW9uIHJ1bGVzIGZvciBlbiBsb2NhbGUgLS0tPlxuICAgICAgICAgIFdpdGhvdXQgT2Zmc2V0OlxuICAgICAgICAgIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICcxIHBlcnNvbiBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICAgICAgICAgIDwvbmctcGx1cmFsaXplPjxicj5cblxuICAgICAgICAgIDwhLS0tIEV4YW1wbGUgd2l0aCBvZmZzZXQgLS0tPlxuICAgICAgICAgIFdpdGggT2Zmc2V0KDIpOlxuICAgICAgICAgIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiIG9mZnNldD0yXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcyJzogJ3t7cGVyc29uMX19IGFuZCB7e3BlcnNvbjJ9fSBhcmUgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gICAgICAgICAgPC9uZy1wbHVyYWxpemU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHNob3cgY29ycmVjdCBwbHVyYWxpemVkIHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB3aXRob3V0T2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDApO1xuICAgICAgICAgIHZhciB3aXRoT2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDEpO1xuICAgICAgICAgIHZhciBjb3VudElucHV0ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzEgcGVyc29uIGlzIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yIGlzIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdOb2JvZHkgaXMgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzInKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMiBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yIGFuZCBNaXNrbyBhcmUgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCczJyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzMgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciwgTWlza28gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnNCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCc0IHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IsIE1pc2tvIGFuZCAyIG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgc2hvdyBkYXRhLWJvdW5kIG5hbWVzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7XG4gICAgICAgICAgdmFyIHBlcnNvbkNvdW50ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7XG4gICAgICAgICAgdmFyIHBlcnNvbjEgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb24xJykpO1xuICAgICAgICAgIHZhciBwZXJzb24yID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uMicpKTtcbiAgICAgICAgICBwZXJzb25Db3VudC5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbkNvdW50LnNlbmRLZXlzKCc0Jyk7XG4gICAgICAgICAgcGVyc29uMS5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbjEuc2VuZEtleXMoJ0RpJyk7XG4gICAgICAgICAgcGVyc29uMi5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbjIuc2VuZEtleXMoJ1ZvanRhJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdEaSwgVm9qdGEgYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSA9IFsnJGxvY2FsZScsICckaW50ZXJwb2xhdGUnLCAnJGxvZycsIGZ1bmN0aW9uKCRsb2NhbGUsICRpbnRlcnBvbGF0ZSwgJGxvZykge1xuICB2YXIgQlJBQ0UgPSAve30vZyxcbiAgICAgIElTX1dIRU4gPSAvXndoZW4oTWludXMpPyguKykkLztcblxuICByZXR1cm4ge1xuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgbnVtYmVyRXhwID0gYXR0ci5jb3VudCxcbiAgICAgICAgICB3aGVuRXhwID0gYXR0ci4kYXR0ci53aGVuICYmIGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLndoZW4pLCAvLyB3ZSBoYXZlIHt7fX0gaW4gYXR0cnNcbiAgICAgICAgICBvZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwLFxuICAgICAgICAgIHdoZW5zID0gc2NvcGUuJGV2YWwod2hlbkV4cCkgfHwge30sXG4gICAgICAgICAgd2hlbnNFeHBGbnMgPSB7fSxcbiAgICAgICAgICBzdGFydFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpLFxuICAgICAgICAgIGVuZFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKSxcbiAgICAgICAgICBicmFjZVJlcGxhY2VtZW50ID0gc3RhcnRTeW1ib2wgKyBudW1iZXJFeHAgKyAnLScgKyBvZmZzZXQgKyBlbmRTeW1ib2wsXG4gICAgICAgICAgd2F0Y2hSZW1vdmVyID0gYW5ndWxhci5ub29wLFxuICAgICAgICAgIGxhc3RDb3VudDtcblxuICAgICAgZm9yRWFjaChhdHRyLCBmdW5jdGlvbihleHByZXNzaW9uLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIHZhciB0bXBNYXRjaCA9IElTX1dIRU4uZXhlYyhhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgaWYgKHRtcE1hdGNoKSB7XG4gICAgICAgICAgdmFyIHdoZW5LZXkgPSAodG1wTWF0Y2hbMV0gPyAnLScgOiAnJykgKyBsb3dlcmNhc2UodG1wTWF0Y2hbMl0pO1xuICAgICAgICAgIHdoZW5zW3doZW5LZXldID0gZWxlbWVudC5hdHRyKGF0dHIuJGF0dHJbYXR0cmlidXRlTmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZvckVhY2god2hlbnMsIGZ1bmN0aW9uKGV4cHJlc3Npb24sIGtleSkge1xuICAgICAgICB3aGVuc0V4cEZuc1trZXldID0gJGludGVycG9sYXRlKGV4cHJlc3Npb24ucmVwbGFjZShCUkFDRSwgYnJhY2VSZXBsYWNlbWVudCkpO1xuXG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJHdhdGNoKG51bWJlckV4cCwgZnVuY3Rpb24gbmdQbHVyYWxpemVXYXRjaEFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gcGFyc2VGbG9hdChuZXdWYWwpO1xuICAgICAgICB2YXIgY291bnRJc05hTiA9IGlzTnVtYmVyTmFOKGNvdW50KTtcblxuICAgICAgICBpZiAoIWNvdW50SXNOYU4gJiYgIShjb3VudCBpbiB3aGVucykpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBzdWNoIGFzIDEsIDIsIDMuLi4gaXMgZGVmaW5lZCwganVzdCB1c2UgaXQuXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpdCBhZ2FpbnN0IHBsdXJhbGl6YXRpb24gcnVsZXMgaW4gJGxvY2FsZSBzZXJ2aWNlLlxuICAgICAgICAgIGNvdW50ID0gJGxvY2FsZS5wbHVyYWxDYXQoY291bnQgLSBvZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYm90aCBgY291bnRgIGFuZCBgbGFzdENvdW50YCBhcmUgTmFOLCB3ZSBkb24ndCBuZWVkIHRvIHJlLXJlZ2lzdGVyIGEgd2F0Y2guXG4gICAgICAgIC8vIEluIEpTIGBOYU4gIT09IE5hTmAsIHNvIHdlIGhhdmUgdG8gZXhwbGljaXRseSBjaGVjay5cbiAgICAgICAgaWYgKChjb3VudCAhPT0gbGFzdENvdW50KSAmJiAhKGNvdW50SXNOYU4gJiYgaXNOdW1iZXJOYU4obGFzdENvdW50KSkpIHtcbiAgICAgICAgICB3YXRjaFJlbW92ZXIoKTtcbiAgICAgICAgICB2YXIgd2hlbkV4cEZuID0gd2hlbnNFeHBGbnNbY291bnRdO1xuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh3aGVuRXhwRm4pKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgJGxvZy5kZWJ1ZygnbmdQbHVyYWxpemU6IG5vIHJ1bGUgZGVmaW5lZCBmb3IgXFwnJyArIGNvdW50ICsgJ1xcJyBpbiAnICsgd2hlbkV4cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBub29wO1xuICAgICAgICAgICAgdXBkYXRlRWxlbWVudFRleHQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2F0Y2hSZW1vdmVyID0gc2NvcGUuJHdhdGNoKHdoZW5FeHBGbiwgdXBkYXRlRWxlbWVudFRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0Q291bnQgPSBjb3VudDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnRUZXh0KG5ld1RleHQpIHtcbiAgICAgICAgZWxlbWVudC50ZXh0KG5ld1RleHQgfHwgJycpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dO1xuXG4vKiBleHBvcnRlZCBuZ1JlcGVhdERpcmVjdGl2ZSAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUmVwZWF0XG4gKiBAbXVsdGlFbGVtZW50XG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1JlcGVhdGAgZGlyZWN0aXZlIGluc3RhbnRpYXRlcyBhIHRlbXBsYXRlIG9uY2UgcGVyIGl0ZW0gZnJvbSBhIGNvbGxlY3Rpb24uIEVhY2ggdGVtcGxhdGVcbiAqIGluc3RhbmNlIGdldHMgaXRzIG93biBzY29wZSwgd2hlcmUgdGhlIGdpdmVuIGxvb3AgdmFyaWFibGUgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gaXRlbSxcbiAqIGFuZCBgJGluZGV4YCBpcyBzZXQgdG8gdGhlIGl0ZW0gaW5kZXggb3Iga2V5LlxuICpcbiAqIFNwZWNpYWwgcHJvcGVydGllcyBhcmUgZXhwb3NlZCBvbiB0aGUgbG9jYWwgc2NvcGUgb2YgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSwgaW5jbHVkaW5nOlxuICpcbiAqIHwgVmFyaWFibGUgIHwgVHlwZSAgICAgICAgICAgIHwgRGV0YWlscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgYCRpbmRleGAgIHwge0B0eXBlIG51bWJlcn0gIHwgaXRlcmF0b3Igb2Zmc2V0IG9mIHRoZSByZXBlYXRlZCBlbGVtZW50ICgwLi5sZW5ndGgtMSkgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRmaXJzdGAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBmaXJzdCBpbiB0aGUgaXRlcmF0b3IuICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRtaWRkbGVgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBpbiB0aGUgaXRlcmF0b3IuIHxcbiAqIHwgYCRsYXN0YCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBsYXN0IGluIHRoZSBpdGVyYXRvci4gICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRldmVuYCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgZXZlbiAob3RoZXJ3aXNlIGZhbHNlKS4gICAgICAgICAgIHxcbiAqIHwgYCRvZGRgICAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgb2RkIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgIHxcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogICBDcmVhdGluZyBhbGlhc2VzIGZvciB0aGVzZSBwcm9wZXJ0aWVzIGlzIHBvc3NpYmxlIHdpdGgge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luaXQgYG5nSW5pdGB9LlxuICogICBUaGlzIG1heSBiZSB1c2VmdWwgd2hlbiwgZm9yIGluc3RhbmNlLCBuZXN0aW5nIG5nUmVwZWF0cy5cbiAqIDwvZGl2PlxuICpcbiAqXG4gKiAjIEl0ZXJhdGluZyBvdmVyIG9iamVjdCBwcm9wZXJ0aWVzXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gZ2V0IGBuZ1JlcGVhdGAgdG8gaXRlcmF0ZSBvdmVyIHRoZSBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCB1c2luZyB0aGUgZm9sbG93aW5nXG4gKiBzeW50YXg6XG4gKlxuICogYGBganNcbiAqIDxkaXYgbmctcmVwZWF0PVwiKGtleSwgdmFsdWUpIGluIG15T2JqXCI+IC4uLiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEhvd2V2ZXIsIHRoZXJlIGFyZSBhIGZldyBsaW1pdGF0aW9ucyBjb21wYXJlZCB0byBhcnJheSBpdGVyYXRpb246XG4gKlxuICogLSBUaGUgSmF2YVNjcmlwdCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IGRlZmluZSB0aGUgb3JkZXIgb2Yga2V5c1xuICogICByZXR1cm5lZCBmb3IgYW4gb2JqZWN0LCBzbyBBbmd1bGFyIHJlbGllcyBvbiB0aGUgb3JkZXIgcmV0dXJuZWQgYnkgdGhlIGJyb3dzZXJcbiAqICAgd2hlbiBydW5uaW5nIGBmb3Iga2V5IGluIG15T2JqYC4gQnJvd3NlcnMgZ2VuZXJhbGx5IGZvbGxvdyB0aGUgc3RyYXRlZ3kgb2YgcHJvdmlkaW5nXG4gKiAgIGtleXMgaW4gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgd2VyZSBkZWZpbmVkLCBhbHRob3VnaCB0aGVyZSBhcmUgZXhjZXB0aW9ucyB3aGVuIGtleXMgYXJlIGRlbGV0ZWRcbiAqICAgYW5kIHJlaW5zdGF0ZWQuIFNlZSB0aGVcbiAqICAgW01ETiBwYWdlIG9uIGBkZWxldGVgIGZvciBtb3JlIGluZm9dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9kZWxldGUjQ3Jvc3MtYnJvd3Nlcl9ub3RlcykuXG4gKlxuICogLSBgbmdSZXBlYXRgIHdpbGwgc2lsZW50bHkgKmlnbm9yZSogb2JqZWN0IGtleXMgc3RhcnRpbmcgd2l0aCBgJGAsIGJlY2F1c2VcbiAqICAgaXQncyBhIHByZWZpeCB1c2VkIGJ5IEFuZ3VsYXIgZm9yIHB1YmxpYyAoYCRgKSBhbmQgcHJpdmF0ZSAoYCQkYCkgcHJvcGVydGllcy5cbiAqXG4gKiAtIFRoZSBidWlsdC1pbiBmaWx0ZXJzIHtAbGluayBuZy5vcmRlckJ5IG9yZGVyQnl9IGFuZCB7QGxpbmsgbmcuZmlsdGVyIGZpbHRlcn0gZG8gbm90IHdvcmsgd2l0aFxuICogICBvYmplY3RzLCBhbmQgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB1c2VkIHdpdGggb25lLlxuICpcbiAqIElmIHlvdSBhcmUgaGl0dGluZyBhbnkgb2YgdGhlc2UgbGltaXRhdGlvbnMsIHRoZSByZWNvbW1lbmRlZCB3b3JrYXJvdW5kIGlzIHRvIGNvbnZlcnQgeW91ciBvYmplY3QgaW50byBhbiBhcnJheVxuICogdGhhdCBpcyBzb3J0ZWQgaW50byB0aGUgb3JkZXIgdGhhdCB5b3UgcHJlZmVyIGJlZm9yZSBwcm92aWRpbmcgaXQgdG8gYG5nUmVwZWF0YC4gWW91IGNvdWxkXG4gKiBkbyB0aGlzIHdpdGggYSBmaWx0ZXIgc3VjaCBhcyBbdG9BcnJheUZpbHRlcl0oaHR0cDovL25nbW9kdWxlcy5vcmcvbW9kdWxlcy9hbmd1bGFyLXRvQXJyYXlGaWx0ZXIpXG4gKiBvciBpbXBsZW1lbnQgYSBgJHdhdGNoYCBvbiB0aGUgb2JqZWN0IHlvdXJzZWxmLlxuICpcbiAqXG4gKiAjIFRyYWNraW5nIGFuZCBEdXBsaWNhdGVzXG4gKlxuICogYG5nUmVwZWF0YCB1c2VzIHtAbGluayAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb24gJHdhdGNoQ29sbGVjdGlvbn0gdG8gZGV0ZWN0IGNoYW5nZXMgaW5cbiAqIHRoZSBjb2xsZWN0aW9uLiBXaGVuIGEgY2hhbmdlIGhhcHBlbnMsIGBuZ1JlcGVhdGAgdGhlbiBtYWtlcyB0aGUgY29ycmVzcG9uZGluZyBjaGFuZ2VzIHRvIHRoZSBET006XG4gKlxuICogKiBXaGVuIGFuIGl0ZW0gaXMgYWRkZWQsIGEgbmV3IGluc3RhbmNlIG9mIHRoZSB0ZW1wbGF0ZSBpcyBhZGRlZCB0byB0aGUgRE9NLlxuICogKiBXaGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCwgaXRzIHRlbXBsYXRlIGluc3RhbmNlIGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICogKiBXaGVuIGl0ZW1zIGFyZSByZW9yZGVyZWQsIHRoZWlyIHJlc3BlY3RpdmUgdGVtcGxhdGVzIGFyZSByZW9yZGVyZWQgaW4gdGhlIERPTS5cbiAqXG4gKiBUbyBtaW5pbWl6ZSBjcmVhdGlvbiBvZiBET00gZWxlbWVudHMsIGBuZ1JlcGVhdGAgdXNlcyBhIGZ1bmN0aW9uXG4gKiB0byBcImtlZXAgdHJhY2tcIiBvZiBhbGwgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24gYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgRE9NIGVsZW1lbnRzLlxuICogRm9yIGV4YW1wbGUsIGlmIGFuIGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGNvbGxlY3Rpb24sIGBuZ1JlcGVhdGAgd2lsbCBrbm93IHRoYXQgYWxsIG90aGVyIGl0ZW1zXG4gKiBhbHJlYWR5IGhhdmUgRE9NIGVsZW1lbnRzLCBhbmQgd2lsbCBub3QgcmUtcmVuZGVyIHRoZW0uXG4gKlxuICogVGhlIGRlZmF1bHQgdHJhY2tpbmcgZnVuY3Rpb24gKHdoaWNoIHRyYWNrcyBpdGVtcyBieSB0aGVpciBpZGVudGl0eSkgZG9lcyBub3QgYWxsb3dcbiAqIGR1cGxpY2F0ZSBpdGVtcyBpbiBhcnJheXMuIFRoaXMgaXMgYmVjYXVzZSB3aGVuIHRoZXJlIGFyZSBkdXBsaWNhdGVzLCBpdCBpcyBub3QgcG9zc2libGVcbiAqIHRvIG1haW50YWluIGEgb25lLXRvLW9uZSBtYXBwaW5nIGJldHdlZW4gY29sbGVjdGlvbiBpdGVtcyBhbmQgRE9NIGVsZW1lbnRzLlxuICpcbiAqIElmIHlvdSBkbyBuZWVkIHRvIHJlcGVhdCBkdXBsaWNhdGUgaXRlbXMsIHlvdSBjYW4gc3Vic3RpdHV0ZSB0aGUgZGVmYXVsdCB0cmFja2luZyBiZWhhdmlvclxuICogd2l0aCB5b3VyIG93biB1c2luZyB0aGUgYHRyYWNrIGJ5YCBleHByZXNzaW9uLlxuICpcbiAqIEZvciBleGFtcGxlLCB5b3UgbWF5IHRyYWNrIGl0ZW1zIGJ5IHRoZSBpbmRleCBvZiBlYWNoIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24sIHVzaW5nIHRoZVxuICogc3BlY2lhbCBzY29wZSBwcm9wZXJ0eSBgJGluZGV4YDpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwibiBpbiBbNDIsIDQyLCA0MywgNDNdIHRyYWNrIGJ5ICRpbmRleFwiPlxuICogICAgICB7e259fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBZb3UgbWF5IGFsc28gdXNlIGFyYml0cmFyeSBleHByZXNzaW9ucyBpbiBgdHJhY2sgYnlgLCBpbmNsdWRpbmcgcmVmZXJlbmNlcyB0byBjdXN0b20gZnVuY3Rpb25zXG4gKiBvbiB0aGUgc2NvcGU6XG4gKiBgYGBodG1sXG4gKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm4gaW4gWzQyLCA0MiwgNDMsIDQzXSB0cmFjayBieSBteVRyYWNraW5nRnVuY3Rpb24obilcIj5cbiAqICAgICAge3tufX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAqIElmIHlvdSBhcmUgd29ya2luZyB3aXRoIG9iamVjdHMgdGhhdCBoYXZlIGEgdW5pcXVlIGlkZW50aWZpZXIgcHJvcGVydHksIHlvdSBzaG91bGQgdHJhY2tcbiAqIGJ5IHRoaXMgaWRlbnRpZmllciBpbnN0ZWFkIG9mIHRoZSBvYmplY3QgaW5zdGFuY2UuIFNob3VsZCB5b3UgcmVsb2FkIHlvdXIgZGF0YSBsYXRlciwgYG5nUmVwZWF0YFxuICogd2lsbCBub3QgaGF2ZSB0byByZWJ1aWxkIHRoZSBET00gZWxlbWVudHMgZm9yIGl0ZW1zIGl0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLCBldmVuIGlmIHRoZVxuICogSmF2YVNjcmlwdCBvYmplY3RzIGluIHRoZSBjb2xsZWN0aW9uIGhhdmUgYmVlbiBzdWJzdGl0dXRlZCBmb3IgbmV3IG9uZXMuIEZvciBsYXJnZSBjb2xsZWN0aW9ucyxcbiAqIHRoaXMgc2lnbmlmaWNhbnRseSBpbXByb3ZlcyByZW5kZXJpbmcgcGVyZm9ybWFuY2UuIElmIHlvdSBkb24ndCBoYXZlIGEgdW5pcXVlIGlkZW50aWZpZXIsXG4gKiBgdHJhY2sgYnkgJGluZGV4YCBjYW4gYWxzbyBwcm92aWRlIGEgcGVyZm9ybWFuY2UgYm9vc3QuXG4gKiA8L2Rpdj5cbiAqXG4gKiBgYGBodG1sXG4gKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm1vZGVsIGluIGNvbGxlY3Rpb24gdHJhY2sgYnkgbW9kZWwuaWRcIj5cbiAqICAgICAge3ttb2RlbC5uYW1lfX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogPGJyIC8+XG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogQXZvaWQgdXNpbmcgYHRyYWNrIGJ5ICRpbmRleGAgd2hlbiB0aGUgcmVwZWF0ZWQgdGVtcGxhdGUgY29udGFpbnNcbiAqIHtAbGluayBndWlkZS9leHByZXNzaW9uI29uZS10aW1lLWJpbmRpbmcgb25lLXRpbWUgYmluZGluZ3N9LiBJbiBzdWNoIGNhc2VzLCB0aGUgYG50aGAgRE9NXG4gKiBlbGVtZW50IHdpbGwgYWx3YXlzIGJlIG1hdGNoZWQgd2l0aCB0aGUgYG50aGAgaXRlbSBvZiB0aGUgYXJyYXksIHNvIHRoZSBiaW5kaW5ncyBvbiB0aGF0IGVsZW1lbnRcbiAqIHdpbGwgbm90IGJlIHVwZGF0ZWQgZXZlbiB3aGVuIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0gY2hhbmdlcywgZXNzZW50aWFsbHkgY2F1c2luZyB0aGUgdmlldyB0byBnZXRcbiAqIG91dC1vZi1zeW5jIHdpdGggdGhlIHVuZGVybHlpbmcgZGF0YS5cbiAqIDwvZGl2PlxuICpcbiAqIFdoZW4gbm8gYHRyYWNrIGJ5YCBleHByZXNzaW9uIGlzIHByb3ZpZGVkLCBpdCBpcyBlcXVpdmFsZW50IHRvIHRyYWNraW5nIGJ5IHRoZSBidWlsdC1pblxuICogYCRpZGAgZnVuY3Rpb24sIHdoaWNoIHRyYWNrcyBpdGVtcyBieSB0aGVpciBpZGVudGl0eTpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwib2JqIGluIGNvbGxlY3Rpb24gdHJhY2sgYnkgJGlkKG9iailcIj5cbiAqICAgICAge3tvYmoucHJvcH19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIDxiciAvPlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBgdHJhY2sgYnlgIG11c3QgYWx3YXlzIGJlIHRoZSBsYXN0IGV4cHJlc3Npb246XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJtb2RlbCBpbiBjb2xsZWN0aW9uIHwgb3JkZXJCeTogJ2lkJyBhcyBmaWx0ZXJlZF9yZXN1bHQgdHJhY2sgYnkgbW9kZWwuaWRcIj5cbiAqICAgICAge3ttb2RlbC5uYW1lfX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICpcbiAqICMgU3BlY2lhbCByZXBlYXQgc3RhcnQgYW5kIGVuZCBwb2ludHNcbiAqIFRvIHJlcGVhdCBhIHNlcmllcyBvZiBlbGVtZW50cyBpbnN0ZWFkIG9mIGp1c3Qgb25lIHBhcmVudCBlbGVtZW50LCBuZ1JlcGVhdCAoYXMgd2VsbCBhcyBvdGhlciBuZyBkaXJlY3RpdmVzKSBzdXBwb3J0cyBleHRlbmRpbmdcbiAqIHRoZSByYW5nZSBvZiB0aGUgcmVwZWF0ZXIgYnkgZGVmaW5pbmcgZXhwbGljaXQgc3RhcnQgYW5kIGVuZCBwb2ludHMgYnkgdXNpbmcgKipuZy1yZXBlYXQtc3RhcnQqKiBhbmQgKipuZy1yZXBlYXQtZW5kKiogcmVzcGVjdGl2ZWx5LlxuICogVGhlICoqbmctcmVwZWF0LXN0YXJ0KiogZGlyZWN0aXZlIHdvcmtzIHRoZSBzYW1lIGFzICoqbmctcmVwZWF0KiosIGJ1dCB3aWxsIHJlcGVhdCBhbGwgdGhlIEhUTUwgY29kZSAoaW5jbHVkaW5nIHRoZSB0YWcgaXQncyBkZWZpbmVkIG9uKVxuICogdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgZW5kaW5nIEhUTUwgdGFnIHdoZXJlICoqbmctcmVwZWF0LWVuZCoqIGlzIHBsYWNlZC5cbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBtYWtlcyB1c2Ugb2YgdGhpcyBmZWF0dXJlOlxuICogYGBgaHRtbFxuICogICA8aGVhZGVyIG5nLXJlcGVhdC1zdGFydD1cIml0ZW0gaW4gaXRlbXNcIj5cbiAqICAgICBIZWFkZXIge3sgaXRlbSB9fVxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IHt7IGl0ZW0gfX1cbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXIgbmctcmVwZWF0LWVuZD5cbiAqICAgICBGb290ZXIge3sgaXRlbSB9fVxuICogICA8L2Zvb3Rlcj5cbiAqIGBgYFxuICpcbiAqIEFuZCB3aXRoIGFuIGlucHV0IG9mIHtAdHlwZSBbJ0EnLCdCJ119IGZvciB0aGUgaXRlbXMgdmFyaWFibGUgaW4gdGhlIGV4YW1wbGUgYWJvdmUsIHRoZSBvdXRwdXQgd2lsbCBldmFsdWF0ZSB0bzpcbiAqIGBgYGh0bWxcbiAqICAgPGhlYWRlcj5cbiAqICAgICBIZWFkZXIgQVxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IEFcbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXI+XG4gKiAgICAgRm9vdGVyIEFcbiAqICAgPC9mb290ZXI+XG4gKiAgIDxoZWFkZXI+XG4gKiAgICAgSGVhZGVyIEJcbiAqICAgPC9oZWFkZXI+XG4gKiAgIDxkaXYgY2xhc3M9XCJib2R5XCI+XG4gKiAgICAgQm9keSBCXG4gKiAgIDwvZGl2PlxuICogICA8Zm9vdGVyPlxuICogICAgIEZvb3RlciBCXG4gKiAgIDwvZm9vdGVyPlxuICogYGBgXG4gKlxuICogVGhlIGN1c3RvbSBzdGFydCBhbmQgZW5kIHBvaW50cyBmb3IgbmdSZXBlYXQgYWxzbyBzdXBwb3J0IGFsbCBvdGhlciBIVE1MIGRpcmVjdGl2ZSBzeW50YXggZmxhdm9ycyBwcm92aWRlZCBpbiBBbmd1bGFySlMgKHN1Y2hcbiAqIGFzICoqZGF0YS1uZy1yZXBlYXQtc3RhcnQqKiwgKip4LW5nLXJlcGVhdC1zdGFydCoqIGFuZCAqKm5nOnJlcGVhdC1zdGFydCoqKS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNlbnRlciBlbnRlcn0gfCB3aGVuIGEgbmV3IGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGxpc3Qgb3Igd2hlbiBhbiBpdGVtIGlzIHJldmVhbGVkIGFmdGVyIGEgZmlsdGVyIHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2xlYXZlIGxlYXZlfSB8IHdoZW4gYW4gaXRlbSBpcyByZW1vdmVkIGZyb20gdGhlIGxpc3Qgb3Igd2hlbiBhbiBpdGVtIGlzIGZpbHRlcmVkIG91dCB8XG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNtb3ZlIG1vdmUgfSB8IHdoZW4gYW4gYWRqYWNlbnQgaXRlbSBpcyBmaWx0ZXJlZCBvdXQgY2F1c2luZyBhIHJlb3JkZXIgb3Igd2hlbiB0aGUgaXRlbSBjb250ZW50cyBhcmUgcmVvcmRlcmVkIHxcbiAqXG4gKiBTZWUgdGhlIGV4YW1wbGUgYmVsb3cgZm9yIGRlZmluaW5nIENTUyBhbmltYXRpb25zIHdpdGggbmdSZXBlYXQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSAxMDAwXG4gKiBAcGFyYW0ge3JlcGVhdF9leHByZXNzaW9ufSBuZ1JlcGVhdCBUaGUgZXhwcmVzc2lvbiBpbmRpY2F0aW5nIGhvdyB0byBlbnVtZXJhdGUgYSBjb2xsZWN0aW9uLiBUaGVzZVxuICogICBmb3JtYXRzIGFyZSBjdXJyZW50bHkgc3VwcG9ydGVkOlxuICpcbiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIHZhcmlhYmxlIGlzIHRoZSB1c2VyIGRlZmluZWQgbG9vcCB2YXJpYWJsZSBhbmQgYGV4cHJlc3Npb25gXG4gKiAgICAgaXMgYSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgYWxidW0gaW4gYXJ0aXN0LmFsYnVtc2AuXG4gKlxuICogICAqIGAoa2V5LCB2YWx1ZSkgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIGBrZXlgIGFuZCBgdmFsdWVgIGNhbiBiZSBhbnkgdXNlciBkZWZpbmVkIGlkZW50aWZpZXJzLFxuICogICAgIGFuZCBgZXhwcmVzc2lvbmAgaXMgdGhlIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGAobmFtZSwgYWdlKSBpbiB7J2FkYW0nOjEwLCAnYW1hbGllJzoxMn1gLlxuICpcbiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbiB0cmFjayBieSB0cmFja2luZ19leHByZXNzaW9uYCDigJMgWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgdHJhY2tpbmcgZXhwcmVzc2lvblxuICogICAgIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFzc29jaWF0ZSB0aGUgb2JqZWN0cyBpbiB0aGUgY29sbGVjdGlvbiB3aXRoIHRoZSBET00gZWxlbWVudHMuIElmIG5vIHRyYWNraW5nIGV4cHJlc3Npb25cbiAqICAgICBpcyBzcGVjaWZpZWQsIG5nLXJlcGVhdCBhc3NvY2lhdGVzIGVsZW1lbnRzIGJ5IGlkZW50aXR5LiBJdCBpcyBhbiBlcnJvciB0byBoYXZlXG4gKiAgICAgbW9yZSB0aGFuIG9uZSB0cmFja2luZyBleHByZXNzaW9uIHZhbHVlIHJlc29sdmUgdG8gdGhlIHNhbWUga2V5LiAoVGhpcyB3b3VsZCBtZWFuIHRoYXQgdHdvIGRpc3RpbmN0IG9iamVjdHMgYXJlXG4gKiAgICAgbWFwcGVkIHRvIHRoZSBzYW1lIERPTSBlbGVtZW50LCB3aGljaCBpcyBub3QgcG9zc2libGUuKVxuICpcbiAqICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogICAgICAgPHN0cm9uZz5Ob3RlOjwvc3Ryb25nPiB0aGUgYHRyYWNrIGJ5YCBleHByZXNzaW9uIG11c3QgY29tZSBsYXN0IC0gYWZ0ZXIgYW55IGZpbHRlcnMsIGFuZCB0aGUgYWxpYXMgZXhwcmVzc2lvbi5cbiAqICAgICA8L2Rpdj5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zYCBpcyBlcXVpdmFsZW50IHRvIGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIFRoaXMgaW1wbGllcyB0aGF0IHRoZSBET00gZWxlbWVudHNcbiAqICAgICB3aWxsIGJlIGFzc29jaWF0ZWQgYnkgaXRlbSBpZGVudGl0eSBpbiB0aGUgYXJyYXkuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSAkaWQoaXRlbSlgLiBBIGJ1aWx0IGluIGAkaWQoKWAgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYXNzaWduIGEgdW5pcXVlXG4gKiAgICAgYCQkaGFzaEtleWAgcHJvcGVydHkgdG8gZWFjaCBpdGVtIGluIHRoZSBhcnJheS4gVGhpcyBwcm9wZXJ0eSBpcyB0aGVuIHVzZWQgYXMgYSBrZXkgdG8gYXNzb2NpYXRlZCBET00gZWxlbWVudHNcbiAqICAgICB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0gaW4gdGhlIGFycmF5IGJ5IGlkZW50aXR5LiBNb3ZpbmcgdGhlIHNhbWUgb2JqZWN0IGluIGFycmF5IHdvdWxkIG1vdmUgdGhlIERPTVxuICogICAgIGVsZW1lbnQgaW4gdGhlIHNhbWUgd2F5IGluIHRoZSBET00uXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHR5cGljYWwgcGF0dGVybiB3aGVuIHRoZSBpdGVtcyBjb21lIGZyb20gdGhlIGRhdGFiYXNlLiBJbiB0aGlzXG4gKiAgICAgY2FzZSB0aGUgb2JqZWN0IGlkZW50aXR5IGRvZXMgbm90IG1hdHRlci4gVHdvIG9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBhcyBsb25nIGFzIHRoZWlyIGBpZGBcbiAqICAgICBwcm9wZXJ0eSBpcyBzYW1lLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXI6c2VhcmNoVGV4dCB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHBhdHRlcm4gdGhhdCBtaWdodCBiZSB1c2VkIHRvIGFwcGx5IGEgZmlsdGVyXG4gKiAgICAgdG8gaXRlbXMgaW4gY29uanVuY3Rpb24gd2l0aCBhIHRyYWNraW5nIGV4cHJlc3Npb24uXG4gKlxuICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uIGFzIGFsaWFzX2V4cHJlc3Npb25gIOKAkyBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCBhbGlhcyBleHByZXNzaW9uIHdoaWNoIHdpbGwgdGhlbiBzdG9yZSB0aGVcbiAqICAgICBpbnRlcm1lZGlhdGUgcmVzdWx0cyBvZiB0aGUgcmVwZWF0ZXIgYWZ0ZXIgdGhlIGZpbHRlcnMgaGF2ZSBiZWVuIGFwcGxpZWQuIFR5cGljYWxseSB0aGlzIGlzIHVzZWQgdG8gcmVuZGVyIGEgc3BlY2lhbCBtZXNzYWdlXG4gKiAgICAgd2hlbiBhIGZpbHRlciBpcyBhY3RpdmUgb24gdGhlIHJlcGVhdGVyLCBidXQgdGhlIGZpbHRlcmVkIHJlc3VsdCBzZXQgaXMgZW1wdHkuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjp4IGFzIHJlc3VsdHNgIHdpbGwgc3RvcmUgdGhlIGZyYWdtZW50IG9mIHRoZSByZXBlYXRlZCBpdGVtcyBhcyBgcmVzdWx0c2AsIGJ1dCBvbmx5IGFmdGVyXG4gKiAgICAgdGhlIGl0ZW1zIGhhdmUgYmVlbiBwcm9jZXNzZWQgdGhyb3VnaCB0aGUgZmlsdGVyLlxuICpcbiAqICAgICBQbGVhc2Ugbm90ZSB0aGF0IGBhcyBbdmFyaWFibGUgbmFtZV0gaXMgbm90IGFuIG9wZXJhdG9yIGJ1dCByYXRoZXIgYSBwYXJ0IG9mIG5nUmVwZWF0IG1pY3JvLXN5bnRheCBzbyBpdCBjYW4gYmUgdXNlZCBvbmx5IGF0IHRoZSBlbmRcbiAqICAgICAoYW5kIG5vdCBhcyBvcGVyYXRvciwgaW5zaWRlIGFuIGV4cHJlc3Npb24pLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXIgOiB4IHwgb3JkZXJCeSA6IG9yZGVyIHwgbGltaXRUbyA6IGxpbWl0IGFzIHJlc3VsdHNgIC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHVzZXMgYG5nUmVwZWF0YCB0byBkaXNwbGF5IGEgbGlzdCBvZiBwZW9wbGUuIEEgZmlsdGVyIGlzIHVzZWQgdG8gcmVzdHJpY3QgdGhlIGRpc3BsYXllZFxuICogcmVzdWx0cyBieSBuYW1lIG9yIGJ5IGFnZS4gTmV3IChlbnRlcmluZykgYW5kIHJlbW92ZWQgKGxlYXZpbmcpIGl0ZW1zIGFyZSBhbmltYXRlZC5cbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdSZXBlYXRcIiBuYW1lPVwibmdSZXBlYXRcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctcmVwZWF0XCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cInJlcGVhdENvbnRyb2xsZXJcIj5cbiAgICAgICAgSSBoYXZlIHt7ZnJpZW5kcy5sZW5ndGh9fSBmcmllbmRzLiBUaGV5IGFyZTpcbiAgICAgICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIiBuZy1tb2RlbD1cInFcIiBwbGFjZWhvbGRlcj1cImZpbHRlciBmcmllbmRzLi4uXCIgYXJpYS1sYWJlbD1cImZpbHRlciBmcmllbmRzXCIgLz5cbiAgICAgICAgPHVsIGNsYXNzPVwiZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxsaSBjbGFzcz1cImFuaW1hdGUtcmVwZWF0XCIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6cSBhcyByZXN1bHRzXCI+XG4gICAgICAgICAgICBbe3skaW5kZXggKyAxfX1dIHt7ZnJpZW5kLm5hbWV9fSB3aG8gaXMge3tmcmllbmQuYWdlfX0geWVhcnMgb2xkLlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPGxpIGNsYXNzPVwiYW5pbWF0ZS1yZXBlYXRcIiBuZy1pZj1cInJlc3VsdHMubGVuZ3RoID09PSAwXCI+XG4gICAgICAgICAgICA8c3Ryb25nPk5vIHJlc3VsdHMgZm91bmQuLi48L3N0cm9uZz5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ1JlcGVhdCcsIFsnbmdBbmltYXRlJ10pLmNvbnRyb2xsZXIoJ3JlcGVhdENvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBbXG4gICAgICAgICAge25hbWU6J0pvaG4nLCBhZ2U6MjUsIGdlbmRlcjonYm95J30sXG4gICAgICAgICAge25hbWU6J0plc3NpZScsIGFnZTozMCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgICAge25hbWU6J0pvaGFubmEnLCBhZ2U6MjgsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgIHtuYW1lOidKb3knLCBhZ2U6MTUsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgIHtuYW1lOidNYXJ5JywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAgICB7bmFtZTonUGV0ZXInLCBhZ2U6OTUsIGdlbmRlcjonYm95J30sXG4gICAgICAgICAge25hbWU6J1NlYmFzdGlhbicsIGFnZTo1MCwgZ2VuZGVyOidib3knfSxcbiAgICAgICAgICB7bmFtZTonRXJpa2EnLCBhZ2U6MjcsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgIHtuYW1lOidQYXRyaWNrJywgYWdlOjQwLCBnZW5kZXI6J2JveSd9LFxuICAgICAgICAgIHtuYW1lOidTYW1hbnRoYScsIGFnZTo2MCwgZ2VuZGVyOidnaXJsJ31cbiAgICAgICAgXTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5leGFtcGxlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgbGlzdC1zdHlsZTpub25lO1xuICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgcGFkZGluZzowIDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdCB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OjMwcHg7XG4gICAgICAgIGxpc3Qtc3R5bGU6bm9uZTtcbiAgICAgICAgYm94LXNpemluZzpib3JkZXItYm94O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSB7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIge1xuICAgICAgICBvcGFjaXR5OjA7XG4gICAgICAgIG1heC1oZWlnaHQ6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUubmctbW92ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgICBtYXgtaGVpZ2h0OjMwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBmcmllbmRzID0gZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoJ2ZyaWVuZCBpbiBmcmllbmRzJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIHJlbmRlciBpbml0aWFsIGRhdGEgc2V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gSm9obiB3aG8gaXMgMjUgeWVhcnMgb2xkLicpO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMl0gSmVzc2llIHdobyBpcyAzMCB5ZWFycyBvbGQuJyk7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxMF0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnZnJpZW5kcy5sZW5ndGgnKSkuZ2V0VGV4dCgpKVxuICAgICAgICAgICAgLnRvTWF0Y2goXCJJIGhhdmUgMTAgZnJpZW5kcy4gVGhleSBhcmU6XCIpO1xuICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSByZXBlYXRlciB3aGVuIGZpbHRlciBwcmVkaWNhdGUgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgxMCk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3EnKSkuc2VuZEtleXMoJ21hJyk7XG5cbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMik7XG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gTWFyeSB3aG8gaXMgMjggeWVhcnMgb2xkLicpO1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMubGFzdCgpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIFNhbWFudGhhIHdobyBpcyA2MCB5ZWFycyBvbGQuJyk7XG4gICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdSZXBlYXREaXJlY3RpdmUgPSBbJyRwYXJzZScsICckYW5pbWF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGFuaW1hdGUsICRjb21waWxlKSB7XG4gIHZhciBOR19SRU1PVkVEID0gJyQkTkdfUkVNT1ZFRCc7XG4gIHZhciBuZ1JlcGVhdE1pbkVyciA9IG1pbkVycignbmdSZXBlYXQnKTtcblxuICB2YXIgdXBkYXRlU2NvcGUgPSBmdW5jdGlvbihzY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgYXJyYXlMZW5ndGgpIHtcbiAgICAvLyBUT0RPKHBlcmYpOiBnZW5lcmF0ZSBzZXR0ZXJzIHRvIHNoYXZlIG9mZiB+NDBtcyBvciAxLTEuNSVcbiAgICBzY29wZVt2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgaWYgKGtleUlkZW50aWZpZXIpIHNjb3BlW2tleUlkZW50aWZpZXJdID0ga2V5O1xuICAgIHNjb3BlLiRpbmRleCA9IGluZGV4O1xuICAgIHNjb3BlLiRmaXJzdCA9IChpbmRleCA9PT0gMCk7XG4gICAgc2NvcGUuJGxhc3QgPSAoaW5kZXggPT09IChhcnJheUxlbmd0aCAtIDEpKTtcbiAgICBzY29wZS4kbWlkZGxlID0gIShzY29wZS4kZmlyc3QgfHwgc2NvcGUuJGxhc3QpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgc2NvcGUuJG9kZCA9ICEoc2NvcGUuJGV2ZW4gPSAoaW5kZXggJiAxKSA9PT0gMCk7XG4gIH07XG5cbiAgdmFyIGdldEJsb2NrU3RhcnQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVswXTtcbiAgfTtcblxuICB2YXIgZ2V0QmxvY2tFbmQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVtibG9jay5jbG9uZS5sZW5ndGggLSAxXTtcbiAgfTtcblxuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIHByaW9yaXR5OiAxMDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nUmVwZWF0Q29tcGlsZSgkZWxlbWVudCwgJGF0dHIpIHtcbiAgICAgIHZhciBleHByZXNzaW9uID0gJGF0dHIubmdSZXBlYXQ7XG4gICAgICB2YXIgbmdSZXBlYXRFbmRDb21tZW50ID0gJGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KCdlbmQgbmdSZXBlYXQnLCBleHByZXNzaW9uKTtcblxuICAgICAgdmFyIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaCgvXlxccyooW1xcc1xcU10rPylcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/XFxzKiQvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWV4cCcsICdFeHBlY3RlZCBleHByZXNzaW9uIGluIGZvcm0gb2YgXFwnX2l0ZW1fIGluIF9jb2xsZWN0aW9uX1sgdHJhY2sgYnkgX2lkX11cXCcgYnV0IGdvdCBcXCd7MH1cXCcuJyxcbiAgICAgICAgICAgIGV4cHJlc3Npb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGhzID0gbWF0Y2hbMV07XG4gICAgICB2YXIgcmhzID0gbWF0Y2hbMl07XG4gICAgICB2YXIgYWxpYXNBcyA9IG1hdGNoWzNdO1xuICAgICAgdmFyIHRyYWNrQnlFeHAgPSBtYXRjaFs0XTtcblxuICAgICAgbWF0Y2ggPSBsaHMubWF0Y2goL14oPzooXFxzKlskXFx3XSspfFxcKFxccyooWyRcXHddKylcXHMqLFxccyooWyRcXHddKylcXHMqXFwpKSQvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWlkZXhwJywgJ1xcJ19pdGVtX1xcJyBpbiBcXCdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fXFwnIHNob3VsZCBiZSBhbiBpZGVudGlmaWVyIG9yIFxcJyhfa2V5XywgX3ZhbHVlXylcXCcgZXhwcmVzc2lvbiwgYnV0IGdvdCBcXCd7MH1cXCcuJyxcbiAgICAgICAgICAgIGxocyk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWVJZGVudGlmaWVyID0gbWF0Y2hbM10gfHwgbWF0Y2hbMV07XG4gICAgICB2YXIga2V5SWRlbnRpZmllciA9IG1hdGNoWzJdO1xuXG4gICAgICBpZiAoYWxpYXNBcyAmJiAoIS9eWyRhLXpBLVpfXVskYS16QS1aMC05X10qJC8udGVzdChhbGlhc0FzKSB8fFxuICAgICAgICAgIC9eKG51bGx8dW5kZWZpbmVkfHRoaXN8XFwkaW5kZXh8XFwkZmlyc3R8XFwkbWlkZGxlfFxcJGxhc3R8XFwkZXZlbnxcXCRvZGR8XFwkcGFyZW50fFxcJHJvb3R8XFwkaWQpJC8udGVzdChhbGlhc0FzKSkpIHtcbiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2JhZGlkZW50JywgJ2FsaWFzIFxcJ3swfVxcJyBpcyBpbnZhbGlkIC0tLSBtdXN0IGJlIGEgdmFsaWQgSlMgaWRlbnRpZmllciB3aGljaCBpcyBub3QgYSByZXNlcnZlZCBuYW1lLicsXG4gICAgICAgICAgYWxpYXNBcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFja0J5RXhwR2V0dGVyLCB0cmFja0J5SWRFeHBGbiwgdHJhY2tCeUlkQXJyYXlGbiwgdHJhY2tCeUlkT2JqRm47XG4gICAgICB2YXIgaGFzaEZuTG9jYWxzID0geyRpZDogaGFzaEtleX07XG5cbiAgICAgIGlmICh0cmFja0J5RXhwKSB7XG4gICAgICAgIHRyYWNrQnlFeHBHZXR0ZXIgPSAkcGFyc2UodHJhY2tCeUV4cCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFja0J5SWRBcnJheUZuID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBoYXNoS2V5KHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJhY2tCeUlkT2JqRm4gPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdSZXBlYXRMaW5rKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuXG4gICAgICAgIGlmICh0cmFja0J5RXhwR2V0dGVyKSB7XG4gICAgICAgICAgdHJhY2tCeUlkRXhwRm4gPSBmdW5jdGlvbihrZXksIHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgLy8gYXNzaWduIGtleSwgdmFsdWUsIGFuZCAkaW5kZXggdG8gdGhlIGxvY2FscyBzbyB0aGF0IHRoZXkgY2FuIGJlIHVzZWQgaW4gaGFzaCBmdW5jdGlvbnNcbiAgICAgICAgICAgIGlmIChrZXlJZGVudGlmaWVyKSBoYXNoRm5Mb2NhbHNba2V5SWRlbnRpZmllcl0gPSBrZXk7XG4gICAgICAgICAgICBoYXNoRm5Mb2NhbHNbdmFsdWVJZGVudGlmaWVyXSA9IHZhbHVlO1xuICAgICAgICAgICAgaGFzaEZuTG9jYWxzLiRpbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnlFeHBHZXR0ZXIoJHNjb3BlLCBoYXNoRm5Mb2NhbHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSBhIGxpc3Qgb2YgZWxlbWVudHMgZnJvbSBwcmV2aW91cyBydW4uIFRoaXMgaXMgYSBoYXNoIHdoZXJlIGtleSBpcyB0aGUgaXRlbSBmcm9tIHRoZVxuICAgICAgICAvLyBpdGVyYXRvciwgYW5kIHRoZSB2YWx1ZSBpcyBvYmplY3RzIHdpdGggZm9sbG93aW5nIHByb3BlcnRpZXMuXG4gICAgICAgIC8vICAgLSBzY29wZTogYm91bmQgc2NvcGVcbiAgICAgICAgLy8gICAtIGNsb25lOiBwcmV2aW91cyBlbGVtZW50LlxuICAgICAgICAvLyAgIC0gaW5kZXg6IHBvc2l0aW9uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlIGFyZSB1c2luZyBuby1wcm90byBvYmplY3Qgc28gdGhhdCB3ZSBkb24ndCBuZWVkIHRvIGd1YXJkIGFnYWluc3QgaW5oZXJpdGVkIHByb3BzIHZpYVxuICAgICAgICAvLyBoYXNPd25Qcm9wZXJ0eS5cbiAgICAgICAgdmFyIGxhc3RCbG9ja01hcCA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgICAgIC8vd2F0Y2ggcHJvcHNcbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24ocmhzLCBmdW5jdGlvbiBuZ1JlcGVhdEFjdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgdmFyIGluZGV4LCBsZW5ndGgsXG4gICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9ICRlbGVtZW50WzBdLCAgICAgLy8gbm9kZSB0aGF0IGNsb25lZCBub2RlcyBzaG91bGQgYmUgaW5zZXJ0ZWQgYWZ0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplZCB0byB0aGUgY29tbWVudCBub2RlIGFuY2hvclxuICAgICAgICAgICAgICBuZXh0Tm9kZSxcbiAgICAgICAgICAgICAgLy8gU2FtZSBhcyBsYXN0QmxvY2tNYXAgYnV0IGl0IGhhcyB0aGUgY3VycmVudCBzdGF0ZS4gSXQgd2lsbCBiZWNvbWUgdGhlXG4gICAgICAgICAgICAgIC8vIGxhc3RCbG9ja01hcCBvbiB0aGUgbmV4dCBpdGVyYXRpb24uXG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcCA9IGNyZWF0ZU1hcCgpLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoLFxuICAgICAgICAgICAgICBrZXksIHZhbHVlLCAvLyBrZXkvdmFsdWUgb2YgaXRlcmF0aW9uXG4gICAgICAgICAgICAgIHRyYWNrQnlJZCxcbiAgICAgICAgICAgICAgdHJhY2tCeUlkRm4sXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLFxuICAgICAgICAgICAgICBibG9jaywgICAgICAgLy8gbGFzdCBvYmplY3QgaW5mb3JtYXRpb24ge3Njb3BlLCBlbGVtZW50LCBpZH1cbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXIsXG4gICAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmU7XG5cbiAgICAgICAgICBpZiAoYWxpYXNBcykge1xuICAgICAgICAgICAgJHNjb3BlW2FsaWFzQXNdID0gY29sbGVjdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gY29sbGVjdGlvbjtcbiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkQXJyYXlGbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhY2tCeUlkRm4gPSB0cmFja0J5SWRFeHBGbiB8fCB0cmFja0J5SWRPYmpGbjtcbiAgICAgICAgICAgIC8vIGlmIG9iamVjdCwgZXh0cmFjdCBrZXlzLCBpbiBlbnVtZXJhdGlvbiBvcmRlciwgdW5zb3J0ZWRcbiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpdGVtS2V5IGluIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29sbGVjdGlvbiwgaXRlbUtleSkgJiYgaXRlbUtleS5jaGFyQXQoMCkgIT09ICckJykge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoID0gY29sbGVjdGlvbktleXMubGVuZ3RoO1xuICAgICAgICAgIG5leHRCbG9ja09yZGVyID0gbmV3IEFycmF5KGNvbGxlY3Rpb25MZW5ndGgpO1xuXG4gICAgICAgICAgLy8gbG9jYXRlIGV4aXN0aW5nIGl0ZW1zXG4gICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29sbGVjdGlvbkxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07XG4gICAgICAgICAgICB0cmFja0J5SWQgPSB0cmFja0J5SWRGbihrZXksIHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICBpZiAobGFzdEJsb2NrTWFwW3RyYWNrQnlJZF0pIHtcbiAgICAgICAgICAgICAgLy8gZm91bmQgcHJldmlvdXNseSBzZWVuIGJsb2NrXG4gICAgICAgICAgICAgIGJsb2NrID0gbGFzdEJsb2NrTWFwW3RyYWNrQnlJZF07XG4gICAgICAgICAgICAgIGRlbGV0ZSBsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXTtcbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRCbG9ja01hcFt0cmFja0J5SWRdKSB7XG4gICAgICAgICAgICAgIC8vIGlmIGNvbGxpc2lvbiBkZXRlY3RlZC4gcmVzdG9yZSBsYXN0QmxvY2tNYXAgYW5kIHRocm93IGFuIGVycm9yXG4gICAgICAgICAgICAgIGZvckVhY2gobmV4dEJsb2NrT3JkZXIsIGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrICYmIGJsb2NrLnNjb3BlKSBsYXN0QmxvY2tNYXBbYmxvY2suaWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignZHVwZXMnLFxuICAgICAgICAgICAgICAgICAgJ0R1cGxpY2F0ZXMgaW4gYSByZXBlYXRlciBhcmUgbm90IGFsbG93ZWQuIFVzZSBcXCd0cmFjayBieVxcJyBleHByZXNzaW9uIHRvIHNwZWNpZnkgdW5pcXVlIGtleXMuIFJlcGVhdGVyOiB7MH0sIER1cGxpY2F0ZSBrZXk6IHsxfSwgRHVwbGljYXRlIHZhbHVlOiB7Mn0nLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbiwgdHJhY2tCeUlkLCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBuZXcgbmV2ZXIgYmVmb3JlIHNlZW4gYmxvY2tcbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0ge2lkOiB0cmFja0J5SWQsIHNjb3BlOiB1bmRlZmluZWQsIGNsb25lOiB1bmRlZmluZWR9O1xuICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcmVtb3ZlIGxlZnRvdmVyIGl0ZW1zXG4gICAgICAgICAgZm9yICh2YXIgYmxvY2tLZXkgaW4gbGFzdEJsb2NrTWFwKSB7XG4gICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFtibG9ja0tleV07XG4gICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlID0gZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSk7XG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShlbGVtZW50c1RvUmVtb3ZlKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50c1RvUmVtb3ZlWzBdLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgd2FzIG5vdCByZW1vdmVkIHlldCBiZWNhdXNlIG9mIHBlbmRpbmcgYW5pbWF0aW9uLCBtYXJrIGl0IGFzIGRlbGV0ZWRcbiAgICAgICAgICAgICAgLy8gc28gdGhhdCB3ZSBjYW4gaWdub3JlIGl0IGxhdGVyXG4gICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlW2luZGV4XVtOR19SRU1PVkVEXSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLnNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBmb3JFYWNoIGZvciBwZXJmIHJlYXNvbnMgKHRyeWluZyB0byBhdm9pZCAjY2FsbClcbiAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2xsZWN0aW9uTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBrZXkgPSAoY29sbGVjdGlvbiA9PT0gY29sbGVjdGlvbktleXMpID8gaW5kZXggOiBjb2xsZWN0aW9uS2V5c1tpbmRleF07XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbGxlY3Rpb25ba2V5XTtcbiAgICAgICAgICAgIGJsb2NrID0gbmV4dEJsb2NrT3JkZXJbaW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAoYmxvY2suc2NvcGUpIHtcbiAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhbHJlYWR5IHNlZW4gdGhpcyBvYmplY3QsIHRoZW4gd2UgbmVlZCB0byByZXVzZSB0aGVcbiAgICAgICAgICAgICAgLy8gYXNzb2NpYXRlZCBzY29wZS9lbGVtZW50XG5cbiAgICAgICAgICAgICAgbmV4dE5vZGUgPSBwcmV2aW91c05vZGU7XG5cbiAgICAgICAgICAgICAgLy8gc2tpcCBub2RlcyB0aGF0IGFyZSBhbHJlYWR5IHBlbmRpbmcgcmVtb3ZhbCB2aWEgbGVhdmUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICB9IHdoaWxlIChuZXh0Tm9kZSAmJiBuZXh0Tm9kZVtOR19SRU1PVkVEXSk7XG5cbiAgICAgICAgICAgICAgaWYgKGdldEJsb2NrU3RhcnQoYmxvY2spICE9PSBuZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIGl0ZW0gd2hpY2ggZ290IG1vdmVkXG4gICAgICAgICAgICAgICAgJGFuaW1hdGUubW92ZShnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKSwgbnVsbCwgcHJldmlvdXNOb2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBnZXRCbG9ja0VuZChibG9jayk7XG4gICAgICAgICAgICAgIHVwZGF0ZVNjb3BlKGJsb2NrLnNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBjb2xsZWN0aW9uTGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIG5ldyBpdGVtIHdoaWNoIHdlIGRvbid0IGtub3cgYWJvdXRcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24gbmdSZXBlYXRUcmFuc2NsdWRlKGNsb25lLCBzY29wZSkge1xuICAgICAgICAgICAgICAgIGJsb2NrLnNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vY2xvbmUtdnMtY3JlYXRlY29tbWVudFxuICAgICAgICAgICAgICAgIHZhciBlbmROb2RlID0gbmdSZXBlYXRFbmRDb21tZW50LmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gZW5kTm9kZTtcblxuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCBwcmV2aW91c05vZGUpO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGVuZE5vZGU7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy5cbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHJlZmVyZW5jZSB0byB0aGUganFsaXRlIHdyYXBwZXIgYXMgaXQgbWlnaHQgYmUgY2hhbmdlZCBsYXRlclxuICAgICAgICAgICAgICAgIC8vIGJ5IGEgZGlyZWN0aXZlIHdpdGggdGVtcGxhdGVVcmwgd2hlbiBpdHMgdGVtcGxhdGUgYXJyaXZlcy5cbiAgICAgICAgICAgICAgICBibG9jay5jbG9uZSA9IGNsb25lO1xuICAgICAgICAgICAgICAgIG5leHRCbG9ja01hcFtibG9jay5pZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgICB1cGRhdGVTY29wZShibG9jay5zY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgY29sbGVjdGlvbkxlbmd0aCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0QmxvY2tNYXAgPSBuZXh0QmxvY2tNYXA7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIE5HX0hJREVfQ0xBU1MgPSAnbmctaGlkZSc7XG52YXIgTkdfSElERV9JTl9QUk9HUkVTU19DTEFTUyA9ICduZy1oaWRlLWFuaW1hdGUnO1xuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1Nob3dcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdTaG93YCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvbiBwcm92aWRlZCB0b1xuICogdGhlIGBuZ1Nob3dgIGF0dHJpYnV0ZS5cbiAqXG4gKiBUaGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gYnkgcmVtb3Zpbmcgb3IgYWRkaW5nIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LlxuICogVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHByZWRlZmluZWQgaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuXG4gKiBgIWltcG9ydGFudGAgZmxhZykuIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgSFRNTCBmaWxlIChzZWVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDc3AgbmdDc3B9KS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgdHJ1dGh5IChlbGVtZW50IGlzIHZpc2libGUpIC0tPlxuICogPGRpdiBuZy1zaG93PVwibXlWYWx1ZVwiPjwvZGl2PlxuICpcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPlxuICogPGRpdiBuZy1zaG93PVwibXlWYWx1ZVwiIGNsYXNzPVwibmctaGlkZVwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYG5nU2hvd2AgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBmYWxzeSB2YWx1ZSB0aGVuIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBhZGRlZFxuICogdG8gdGhlIGNsYXNzIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gdHJ1dGh5LCB0aGUgYC5uZy1oaWRlYFxuICogQ1NTIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCBjYXVzaW5nIHRoZSBlbGVtZW50IG5vdCB0byBhcHBlYXIgaGlkZGVuLlxuICpcbiAqICMjIFdoeSBpcyBgIWltcG9ydGFudGAgdXNlZD9cbiAqXG4gKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgYCFpbXBvcnRhbnRgIGlzIHVzZWQgZm9yIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZVxuICogYC5uZy1oaWRlYCBzZWxlY3RvciBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXNcbiAqIHNpbXBsZSBhcyBjaGFuZ2luZyB0aGUgZGlzcGxheSBzdHlsZSBvbiBhIEhUTUwgbGlzdCBpdGVtIHdvdWxkIG1ha2UgaGlkZGVuIGVsZW1lbnRzIGFwcGVhclxuICogdmlzaWJsZS4gVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuXG4gKlxuICogQnkgdXNpbmcgYCFpbXBvcnRhbnRgLCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlblxuICogQ1NTIHNlbGVjdG9yIHNwZWNpZmljaXR5ICh3aGVuIGAhaW1wb3J0YW50YCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGFcbiAqIGRldmVsb3BlciBjaG9vc2VzIHRvIG92ZXJyaWRlIHRoZSBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhXG4gKiBtYXR0ZXIgb2YgdXNpbmcgYCFpbXBvcnRhbnRgIGluIHRoZWlyIG93biBDU1MgY29kZS5cbiAqXG4gKiAjIyMgT3ZlcnJpZGluZyBgLm5nLWhpZGVgXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5OiBub25lICFpbXBvcnRhbnRgLiBJZiB5b3VcbiAqIHdpc2ggdG8gY2hhbmdlIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggYG5nU2hvd2AvYG5nSGlkZWAsIHlvdSBjYW4gc2ltcGx5IG92ZXJ3cml0ZSB0aGUgc3R5bGVzIGZvclxuICogdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzLiBOb3RlIHRoYXQgdGhlIHNlbGVjdG9yIHRoYXQgbmVlZHMgdG8gYmUgdXNlZCBpcyBhY3R1YWxseVxuICogYC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKWAgdG8gY29wZSB3aXRoIGV4dHJhIGFuaW1hdGlvbiBjbGFzc2VzIHRoYXQgY2FuIGJlIGFkZGVkLlxuICpcbiAqIGBgYGNzc1xuICogLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpIHtcbiAqICAgLyYjNDI7IFRoZXNlIGFyZSBqdXN0IGFsdGVybmF0aXZlIHdheXMgb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gKiAgIGRpc3BsYXk6IGJsb2NrIWltcG9ydGFudDtcbiAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICogICB0b3A6IC05OTk5cHg7XG4gKiAgIGxlZnQ6IC05OTk5cHg7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGFueXRoaW5nIGluIENTUyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGVcbiAqIGRpc3BsYXkgc3R5bGUuXG4gKlxuICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgbmdTaG93YFxuICpcbiAqIEFuaW1hdGlvbnMgaW4gYG5nU2hvd2AvYG5nSGlkZWAgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGVcbiAqIGRpcmVjdGl2ZSBleHByZXNzaW9uIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aFxuICogYG5nQ2xhc3NgIGV4Y2VwdCB0aGF0IHlvdSBtdXN0IGFsc28gaW5jbHVkZSB0aGUgYCFpbXBvcnRhbnRgIGZsYWcgdG8gb3ZlcnJpZGUgdGhlIGRpc3BsYXlcbiAqIHByb3BlcnR5IHNvIHRoYXQgdGhlIGVsZW1lbnRzIGFyZSBub3QgYWN0dWFsbHkgaGlkZGVuIGR1cmluZyB0aGUgYW5pbWF0aW9uLlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IEEgd29ya2luZyBleGFtcGxlIGNhbiBiZSBmb3VuZCBhdCB0aGUgYm90dG9tIG9mIHRoaXMgcGFnZS4gJiM0MjsvXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCwgLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUge1xuICogICB0cmFuc2l0aW9uOiBhbGwgMC41cyBsaW5lYXI7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNoYW5nZSB0aGUgZGlzcGxheSBwcm9wZXJ0eVxuICogdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMgLSBuZ0FuaW1hdGUgd2lsbCBhdXRvbWF0aWNhbGx5IGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgZm9yIHlvdS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHtAbGluayAkYW5pbWF0ZSNhZGRDbGFzcyBhZGRDbGFzc30gYC5uZy1oaWRlYCAgICAgICB8IEFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIG5vbiB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlbi4gfFxuICogfCB7QGxpbmsgJGFuaW1hdGUjcmVtb3ZlQ2xhc3MgcmVtb3ZlQ2xhc3N9IGAubmctaGlkZWAgfCBBZnRlciB0aGUgYG5nU2hvd2AgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIGNvbnRlbnRzIGFyZSBzZXQgdG8gdmlzaWJsZS4gICAgICAgIHxcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTaG93IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHkvZmFsc3kgdGhlbiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgaXMgc2hvd24vaGlkZGVuIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBAZXhhbXBsZVxuICogQSBzaW1wbGUgZXhhbXBsZSwgYW5pbWF0aW5nIHRoZSBlbGVtZW50J3Mgb3BhY2l0eTpcbiAqXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1zaG93LXNpbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICBTaG93OiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuZ1Nob3dcIj48YnIgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtc2hvdy1oaWRlXCIgbmctc2hvdz1cImNoZWNrZWRcIj5cbiAgICAgICAgSSBzaG93IHVwIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zaG93LWhpZGUubmctaGlkZS1hZGQsXG4gICAgICAuYW5pbWF0ZS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUge1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgbGluZWFyIDAuNXM7XG4gICAgICB9XG5cbiAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmdTaG93JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGVja2JveCA9IGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSk7XG4gICAgICAgIHZhciBjaGVja0VsZW0gPSBlbGVtZW50KGJ5LmNzcygnLmNoZWNrLWVsZW1lbnQnKSk7XG5cbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKGZhbHNlKTtcbiAgICAgICAgY2hlY2tib3guY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKHRydWUpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKlxuICogPGhyIC8+XG4gKiBAZXhhbXBsZVxuICogQSBtb3JlIGNvbXBsZXggZXhhbXBsZSwgZmVhdHVyaW5nIGRpZmZlcmVudCBzaG93L2hpZGUgYW5pbWF0aW9uczpcbiAqXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1zaG93LWNvbXBsZXhcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgU2hvdzogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmdTaG93XCI+PGJyIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBmdW5reS1zaG93LWhpZGVcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICBJIHNob3cgdXAgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICBib2R5IHtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgcGVyc3BlY3RpdmU6IDEwMDBweDtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLWFkZCB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWigwKTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQ7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2UtaW4tb3V0O1xuICAgICAgfVxuXG4gICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWigtMTM1ZGVnKTtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLXJlbW92ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWSg5MGRlZyk7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQ7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2U7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDApO1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nU2hvdycsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hlY2tib3ggPSBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpO1xuICAgICAgICB2YXIgY2hlY2tFbGVtID0gZWxlbWVudChieS5jc3MoJy5jaGVjay1lbGVtZW50JykpO1xuXG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICAgIGNoZWNrYm94LmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZSh0cnVlKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTaG93RGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nU2hvdywgZnVuY3Rpb24gbmdTaG93V2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gd2UncmUgYWRkaW5nIGEgdGVtcG9yYXJ5LCBhbmltYXRpb24tc3BlY2lmaWMgY2xhc3MgZm9yIG5nLWhpZGUgc2luY2UgdGhpcyB3YXlcbiAgICAgICAgLy8gd2UgY2FuIGNvbnRyb2wgd2hlbiB0aGUgZWxlbWVudCBpcyBhY3R1YWxseSBkaXNwbGF5ZWQgb24gc2NyZWVuIHdpdGhvdXQgaGF2aW5nXG4gICAgICAgIC8vIHRvIGhhdmUgYSBnbG9iYWwvZ3JlZWR5IENTUyBzZWxlY3RvciB0aGF0IGJyZWFrcyB3aGVuIG90aGVyIGFuaW1hdGlvbnMgYXJlIHJ1bi5cbiAgICAgICAgLy8gUmVhZDogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTEwMyNpc3N1ZWNvbW1lbnQtNTgzMzU4NDVcbiAgICAgICAgJGFuaW1hdGVbdmFsdWUgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oZWxlbWVudCwgTkdfSElERV9DTEFTUywge1xuICAgICAgICAgIHRlbXBDbGFzc2VzOiBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0hpZGVcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdIaWRlYCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvbiBwcm92aWRlZCB0b1xuICogdGhlIGBuZ0hpZGVgIGF0dHJpYnV0ZS5cbiAqXG4gKiBUaGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gYnkgcmVtb3Zpbmcgb3IgYWRkaW5nIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LlxuICogVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHByZWRlZmluZWQgaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuXG4gKiBgIWltcG9ydGFudGAgZmxhZykuIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgSFRNTCBmaWxlIChzZWVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDc3AgbmdDc3B9KS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgdHJ1dGh5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XG4gKiA8ZGl2IG5nLWhpZGU9XCJteVZhbHVlXCIgY2xhc3M9XCJuZy1oaWRlXCI+PC9kaXY+XG4gKlxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIHZpc2libGUpIC0tPlxuICogPGRpdiBuZy1oaWRlPVwibXlWYWx1ZVwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgdGhlbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgYWRkZWRcbiAqIHRvIHRoZSBjbGFzcyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgY2F1c2luZyBpdCB0byBiZWNvbWUgaGlkZGVuLiBXaGVuIGZhbHN5LCB0aGUgYC5uZy1oaWRlYFxuICogQ1NTIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCBjYXVzaW5nIHRoZSBlbGVtZW50IG5vdCB0byBhcHBlYXIgaGlkZGVuLlxuICpcbiAqICMjIFdoeSBpcyBgIWltcG9ydGFudGAgdXNlZD9cbiAqXG4gKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgYCFpbXBvcnRhbnRgIGlzIHVzZWQgZm9yIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZVxuICogYC5uZy1oaWRlYCBzZWxlY3RvciBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXNcbiAqIHNpbXBsZSBhcyBjaGFuZ2luZyB0aGUgZGlzcGxheSBzdHlsZSBvbiBhIEhUTUwgbGlzdCBpdGVtIHdvdWxkIG1ha2UgaGlkZGVuIGVsZW1lbnRzIGFwcGVhclxuICogdmlzaWJsZS4gVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuXG4gKlxuICogQnkgdXNpbmcgYCFpbXBvcnRhbnRgLCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlblxuICogQ1NTIHNlbGVjdG9yIHNwZWNpZmljaXR5ICh3aGVuIGAhaW1wb3J0YW50YCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGFcbiAqIGRldmVsb3BlciBjaG9vc2VzIHRvIG92ZXJyaWRlIHRoZSBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhXG4gKiBtYXR0ZXIgb2YgdXNpbmcgYCFpbXBvcnRhbnRgIGluIHRoZWlyIG93biBDU1MgY29kZS5cbiAqXG4gKiAjIyMgT3ZlcnJpZGluZyBgLm5nLWhpZGVgXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5OiBub25lICFpbXBvcnRhbnRgLiBJZiB5b3VcbiAqIHdpc2ggdG8gY2hhbmdlIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggYG5nU2hvd2AvYG5nSGlkZWAsIHlvdSBjYW4gc2ltcGx5IG92ZXJ3cml0ZSB0aGUgc3R5bGVzIGZvclxuICogdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzLiBOb3RlIHRoYXQgdGhlIHNlbGVjdG9yIHRoYXQgbmVlZHMgdG8gYmUgdXNlZCBpcyBhY3R1YWxseVxuICogYC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKWAgdG8gY29wZSB3aXRoIGV4dHJhIGFuaW1hdGlvbiBjbGFzc2VzIHRoYXQgY2FuIGJlIGFkZGVkLlxuICpcbiAqIGBgYGNzc1xuICogLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpIHtcbiAqICAgLyYjNDI7IFRoZXNlIGFyZSBqdXN0IGFsdGVybmF0aXZlIHdheXMgb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gKiAgIGRpc3BsYXk6IGJsb2NrIWltcG9ydGFudDtcbiAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICogICB0b3A6IC05OTk5cHg7XG4gKiAgIGxlZnQ6IC05OTk5cHg7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGluIENTUyBhbnl0aGluZyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGVcbiAqIGRpc3BsYXkgc3R5bGUuXG4gKlxuICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgbmdIaWRlYFxuICpcbiAqIEFuaW1hdGlvbnMgaW4gYG5nU2hvd2AvYG5nSGlkZWAgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGVcbiAqIGRpcmVjdGl2ZSBleHByZXNzaW9uIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aFxuICogYG5nQ2xhc3NgIGV4Y2VwdCB0aGF0IHlvdSBtdXN0IGFsc28gaW5jbHVkZSB0aGUgYCFpbXBvcnRhbnRgIGZsYWcgdG8gb3ZlcnJpZGUgdGhlIGRpc3BsYXlcbiAqIHByb3BlcnR5IHNvIHRoYXQgdGhlIGVsZW1lbnRzIGFyZSBub3QgYWN0dWFsbHkgaGlkZGVuIGR1cmluZyB0aGUgYW5pbWF0aW9uLlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IEEgd29ya2luZyBleGFtcGxlIGNhbiBiZSBmb3VuZCBhdCB0aGUgYm90dG9tIG9mIHRoaXMgcGFnZS4gJiM0MjsvXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCwgLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUge1xuICogICB0cmFuc2l0aW9uOiBhbGwgMC41cyBsaW5lYXI7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNoYW5nZSB0aGUgZGlzcGxheSBwcm9wZXJ0eVxuICogdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMgLSBuZ0FuaW1hdGUgd2lsbCBhdXRvbWF0aWNhbGx5IGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgZm9yIHlvdS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHtAbGluayAkYW5pbWF0ZSNhZGRDbGFzcyBhZGRDbGFzc30gYC5uZy1oaWRlYCAgICAgICB8IEFmdGVyIHRoZSBgbmdIaWRlYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gaGlkZGVuLiAgfFxuICogfCB7QGxpbmsgJGFuaW1hdGUjcmVtb3ZlQ2xhc3MgcmVtb3ZlQ2xhc3N9IGAubmctaGlkZWAgfCBBZnRlciB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSBjb250ZW50cyBhcmUgc2V0IHRvIHZpc2libGUuIHxcbiAqXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSGlkZSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5L2ZhbHN5IHRoZW4gdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50IGlzIGhpZGRlbi9zaG93biByZXNwZWN0aXZlbHkuXG4gKlxuICogQGV4YW1wbGVcbiAqIEEgc2ltcGxlIGV4YW1wbGUsIGFuaW1hdGluZyB0aGUgZWxlbWVudCdzIG9wYWNpdHk6XG4gKlxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctaGlkZS1zaW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgSGlkZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmdIaWRlXCI+PGJyIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3ctaGlkZVwiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgIEkgaGlkZSB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLXNob3ctaGlkZS5uZy1oaWRlIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUtYWRkLFxuICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUtcmVtb3ZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nSGlkZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hlY2tib3ggPSBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpO1xuICAgICAgICB2YXIgY2hlY2tFbGVtID0gZWxlbWVudChieS5jc3MoJy5jaGVjay1lbGVtZW50JykpO1xuXG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZSh0cnVlKTtcbiAgICAgICAgY2hlY2tib3guY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICpcbiAqIDxociAvPlxuICogQGV4YW1wbGVcbiAqIEEgbW9yZSBjb21wbGV4IGV4YW1wbGUsIGZlYXR1cmluZyBkaWZmZXJlbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnM6XG4gKlxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctaGlkZS1jb21wbGV4XCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIEhpZGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5nSGlkZVwiPjxiciAvPlxuICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgZnVua3ktc2hvdy1oaWRlXCIgbmctaGlkZT1cImNoZWNrZWRcIj5cbiAgICAgICAgSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgYm9keSB7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHBlcnNwZWN0aXZlOiAxMDAwcHg7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1hZGQge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVooMCk7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0O1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlLWluLW91dDtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVooLTEzNWRlZyk7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0O1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO1xuICAgICAgfVxuXG4gICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWSgwKTtcbiAgICAgIH1cblxuICAgICAgLmNoZWNrLWVsZW1lbnQge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZ0hpZGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNoZWNrYm94ID0gZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKTtcbiAgICAgICAgdmFyIGNoZWNrRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCcuY2hlY2stZWxlbWVudCcpKTtcblxuICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGNoZWNrYm94LmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nSGlkZURpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0hpZGUsIGZ1bmN0aW9uIG5nSGlkZVdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vIFRoZSBjb21tZW50IGluc2lkZSBvZiB0aGUgbmdTaG93RGlyZWN0aXZlIGV4cGxhaW5zIHdoeSB3ZSBhZGQgYW5kXG4gICAgICAgIC8vIHJlbW92ZSBhIHRlbXBvcmFyeSBjbGFzcyBmb3IgdGhlIHNob3cvaGlkZSBhbmltYXRpb25cbiAgICAgICAgJGFuaW1hdGVbdmFsdWUgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oZWxlbWVudCxOR19ISURFX0NMQVNTLCB7XG4gICAgICAgICAgdGVtcENsYXNzZXM6IE5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1NcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N0eWxlXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdTdHlsZWAgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc2V0IENTUyBzdHlsZSBvbiBhbiBIVE1MIGVsZW1lbnQgY29uZGl0aW9uYWxseS5cbiAqXG4gKiBAa25vd25Jc3N1ZVxuICogWW91IHNob3VsZCBub3QgdXNlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb259IGluIHRoZSB2YWx1ZSBvZiB0aGUgYHN0eWxlYFxuICogYXR0cmlidXRlLCB3aGVuIHVzaW5nIHRoZSBgbmdTdHlsZWAgZGlyZWN0aXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQuXG4gKiBTZWUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24ja25vd24taXNzdWVzIGhlcmV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3R5bGVcbiAqXG4gKiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB3aGljaCBldmFscyB0byBhblxuICogb2JqZWN0IHdob3NlIGtleXMgYXJlIENTUyBzdHlsZSBuYW1lcyBhbmQgdmFsdWVzIGFyZSBjb3JyZXNwb25kaW5nIHZhbHVlcyBmb3IgdGhvc2UgQ1NTXG4gKiBrZXlzLlxuICpcbiAqIFNpbmNlIHNvbWUgQ1NTIHN0eWxlIG5hbWVzIGFyZSBub3QgdmFsaWQga2V5cyBmb3IgYW4gb2JqZWN0LCB0aGV5IG11c3QgYmUgcXVvdGVkLlxuICogU2VlIHRoZSAnYmFja2dyb3VuZC1jb2xvcicgc3R5bGUgaW4gdGhlIGV4YW1wbGUgYmVsb3cuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1zdHlsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwic2V0IGNvbG9yXCIgbmctY2xpY2s9XCJteVN0eWxlPXtjb2xvcjoncmVkJ31cIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldCBiYWNrZ3JvdW5kXCIgbmctY2xpY2s9XCJteVN0eWxlPXsnYmFja2dyb3VuZC1jb2xvcic6J2JsdWUnfVwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15U3R5bGU9e31cIj5cbiAgICAgICAgPGJyLz5cbiAgICAgICAgPHNwYW4gbmctc3R5bGU9XCJteVN0eWxlXCI+U2FtcGxlIFRleHQ8L3NwYW4+XG4gICAgICAgIDxwcmU+bXlTdHlsZT17e215U3R5bGV9fTwvcHJlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICBzcGFuIHtcbiAgICAgICAgIGNvbG9yOiBibGFjaztcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBjb2xvclNwYW4gPSBlbGVtZW50KGJ5LmNzcygnc3BhbicpKTtcblxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3R5bGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMSknKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1cXCdzZXQgY29sb3JcXCddJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDI1NSwgMCwgMCwgMSknKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1jbGVhcl0nKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMSknKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTdHlsZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gIHNjb3BlLiR3YXRjaChhdHRyLm5nU3R5bGUsIGZ1bmN0aW9uIG5nU3R5bGVXYXRjaEFjdGlvbihuZXdTdHlsZXMsIG9sZFN0eWxlcykge1xuICAgIGlmIChvbGRTdHlsZXMgJiYgKG5ld1N0eWxlcyAhPT0gb2xkU3R5bGVzKSkge1xuICAgICAgZm9yRWFjaChvbGRTdHlsZXMsIGZ1bmN0aW9uKHZhbCwgc3R5bGUpIHsgZWxlbWVudC5jc3Moc3R5bGUsICcnKTt9KTtcbiAgICB9XG4gICAgaWYgKG5ld1N0eWxlcykgZWxlbWVudC5jc3MobmV3U3R5bGVzKTtcbiAgfSwgdHJ1ZSk7XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N3aXRjaFxuICogQHJlc3RyaWN0IEVBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nU3dpdGNoYCBkaXJlY3RpdmUgaXMgdXNlZCB0byBjb25kaXRpb25hbGx5IHN3YXAgRE9NIHN0cnVjdHVyZSBvbiB5b3VyIHRlbXBsYXRlIGJhc2VkIG9uIGEgc2NvcGUgZXhwcmVzc2lvbi5cbiAqIEVsZW1lbnRzIHdpdGhpbiBgbmdTd2l0Y2hgIGJ1dCB3aXRob3V0IGBuZ1N3aXRjaFdoZW5gIG9yIGBuZ1N3aXRjaERlZmF1bHRgIGRpcmVjdGl2ZXMgd2lsbCBiZSBwcmVzZXJ2ZWQgYXQgdGhlIGxvY2F0aW9uXG4gKiBhcyBzcGVjaWZpZWQgaW4gdGhlIHRlbXBsYXRlLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgaXRzZWxmIHdvcmtzIHNpbWlsYXIgdG8gbmdJbmNsdWRlLCBob3dldmVyLCBpbnN0ZWFkIG9mIGRvd25sb2FkaW5nIHRlbXBsYXRlIGNvZGUgKG9yIGxvYWRpbmcgaXRcbiAqIGZyb20gdGhlIHRlbXBsYXRlIGNhY2hlKSwgYG5nU3dpdGNoYCBzaW1wbHkgY2hvb3NlcyBvbmUgb2YgdGhlIG5lc3RlZCBlbGVtZW50cyBhbmQgbWFrZXMgaXQgdmlzaWJsZSBiYXNlZCBvbiB3aGljaCBlbGVtZW50XG4gKiBtYXRjaGVzIHRoZSB2YWx1ZSBvYnRhaW5lZCBmcm9tIHRoZSBldmFsdWF0ZWQgZXhwcmVzc2lvbi4gSW4gb3RoZXIgd29yZHMsIHlvdSBkZWZpbmUgYSBjb250YWluZXIgZWxlbWVudFxuICogKHdoZXJlIHlvdSBwbGFjZSB0aGUgZGlyZWN0aXZlKSwgcGxhY2UgYW4gZXhwcmVzc2lvbiBvbiB0aGUgKipgb249XCIuLi5cImAgYXR0cmlidXRlKipcbiAqIChvciB0aGUgKipgbmctc3dpdGNoPVwiLi4uXCJgIGF0dHJpYnV0ZSoqKSwgZGVmaW5lIGFueSBpbm5lciBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGRpcmVjdGl2ZSBhbmQgcGxhY2VcbiAqIGEgd2hlbiBhdHRyaWJ1dGUgcGVyIGVsZW1lbnQuIFRoZSB3aGVuIGF0dHJpYnV0ZSBpcyB1c2VkIHRvIGluZm9ybSBuZ1N3aXRjaCB3aGljaCBlbGVtZW50IHRvIGRpc3BsYXkgd2hlbiB0aGUgb25cbiAqIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkLiBJZiBhIG1hdGNoaW5nIGV4cHJlc3Npb24gaXMgbm90IGZvdW5kIHZpYSBhIHdoZW4gYXR0cmlidXRlIHRoZW4gYW4gZWxlbWVudCB3aXRoIHRoZSBkZWZhdWx0XG4gKiBhdHRyaWJ1dGUgaXMgZGlzcGxheWVkLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiBCZSBhd2FyZSB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QgY2Fubm90IGJlIGV4cHJlc3Npb25zLiBUaGV5IGFyZSBpbnRlcnByZXRlZFxuICogYXMgbGl0ZXJhbCBzdHJpbmcgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBGb3IgZXhhbXBsZSwgKipgbmctc3dpdGNoLXdoZW49XCJzb21lVmFsXCJgKiogd2lsbCBtYXRjaCBhZ2FpbnN0IHRoZSBzdHJpbmcgYFwic29tZVZhbFwiYCBub3QgYWdhaW5zdCB0aGVcbiAqIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIGAkc2NvcGUuc29tZVZhbGAuXG4gKiA8L2Rpdj5cblxuICogQGFuaW1hdGlvbnNcbiAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIHRoZSBtYXRjaGVkIGNoaWxkIGVsZW1lbnQgaXMgcGxhY2VkIGluc2lkZSB0aGUgY29udGFpbmVyIHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2xlYXZlIGxlYXZlfSAgfCBhZnRlciB0aGUgbmdTd2l0Y2ggY29udGVudHMgY2hhbmdlIGFuZCBqdXN0IGJlZm9yZSB0aGUgZm9ybWVyIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIERPTSB8XG4gKlxuICogQHVzYWdlXG4gKlxuICogYGBgXG4gKiA8QU5ZIG5nLXN3aXRjaD1cImV4cHJlc3Npb25cIj5cbiAqICAgPEFOWSBuZy1zd2l0Y2gtd2hlbj1cIm1hdGNoVmFsdWUxXCI+Li4uPC9BTlk+XG4gKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49XCJtYXRjaFZhbHVlMlwiPi4uLjwvQU5ZPlxuICogICA8QU5ZIG5nLXN3aXRjaC1kZWZhdWx0Pi4uLjwvQU5ZPlxuICogPC9BTlk+XG4gKiBgYGBcbiAqXG4gKlxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgMTIwMFxuICogQHBhcmFtIHsqfSBuZ1N3aXRjaHxvbiBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QgPGNvZGU+bmctc3dpdGNoLXdoZW48L2NvZGU+LlxuICogT24gY2hpbGQgZWxlbWVudHMgYWRkOlxuICpcbiAqICogYG5nU3dpdGNoV2hlbmA6IHRoZSBjYXNlIHN0YXRlbWVudCB0byBtYXRjaCBhZ2FpbnN0LiBJZiBtYXRjaCB0aGVuIHRoaXNcbiAqICAgY2FzZSB3aWxsIGJlIGRpc3BsYXllZC4gSWYgdGhlIHNhbWUgbWF0Y2ggYXBwZWFycyBtdWx0aXBsZSB0aW1lcywgYWxsIHRoZVxuICogICBlbGVtZW50cyB3aWxsIGJlIGRpc3BsYXllZC4gSXQgaXMgcG9zc2libGUgdG8gYXNzb2NpYXRlIG11bHRpcGxlIHZhbHVlcyB0b1xuICogICB0aGUgc2FtZSBgbmdTd2l0Y2hXaGVuYCBieSBkZWZpbmluZyB0aGUgb3B0aW9uYWwgYXR0cmlidXRlXG4gKiAgIGBuZ1N3aXRjaFdoZW5TZXBhcmF0b3JgLiBUaGUgc2VwYXJhdG9yIHdpbGwgYmUgdXNlZCB0byBzcGxpdCB0aGUgdmFsdWUgb2ZcbiAqICAgdGhlIGBuZ1N3aXRjaFdoZW5gIGF0dHJpYnV0ZSBpbnRvIG11bHRpcGxlIHRva2VucywgYW5kIHRoZSBlbGVtZW50IHdpbGwgc2hvd1xuICogICBpZiBhbnkgb2YgdGhlIGBuZ1N3aXRjaGAgZXZhbHVhdGVzIHRvIGFueSBvZiB0aGVzZSB0b2tlbnMuXG4gKiAqIGBuZ1N3aXRjaERlZmF1bHRgOiB0aGUgZGVmYXVsdCBjYXNlIHdoZW4gbm8gb3RoZXIgY2FzZSBtYXRjaC4gSWYgdGhlcmVcbiAqICAgYXJlIG11bHRpcGxlIGRlZmF1bHQgY2FzZXMsIGFsbCBvZiB0aGVtIHdpbGwgYmUgZGlzcGxheWVkIHdoZW4gbm8gb3RoZXJcbiAqICAgY2FzZSBtYXRjaC5cbiAqXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwic3dpdGNoRXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1zd2l0Y2hcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cInNlbGVjdGlvblwiIG5nLW9wdGlvbnM9XCJpdGVtIGZvciBpdGVtIGluIGl0ZW1zXCI+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8Y29kZT5zZWxlY3Rpb249e3tzZWxlY3Rpb259fTwvY29kZT5cbiAgICAgICAgPGhyLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lclwiXG4gICAgICAgICAgbmctc3dpdGNoIG9uPVwic2VsZWN0aW9uXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtd2hlbj1cInNldHRpbmdzfG9wdGlvbnNcIiBuZy1zd2l0Y2gtd2hlbi1zZXBhcmF0b3I9XCJ8XCI+U2V0dGluZ3MgRGl2PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtd2hlbj1cImhvbWVcIj5Ib21lIFNwYW48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaFwiIG5nLXN3aXRjaC1kZWZhdWx0PmRlZmF1bHQ8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3N3aXRjaEV4YW1wbGUnLCBbJ25nQW5pbWF0ZSddKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5pdGVtcyA9IFsnc2V0dGluZ3MnLCAnaG9tZScsICdvcHRpb25zJywgJ290aGVyJ107XG4gICAgICAgICAgJHNjb3BlLnNlbGVjdGlvbiA9ICRzY29wZS5pdGVtc1swXTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC1jb250YWluZXIge1xuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgaGVpZ2h0OjQwcHg7XG4gICAgICAgIG92ZXJmbG93OmhpZGRlbjtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc3dpdGNoIHtcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctYW5pbWF0ZSB7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcblxuICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgdG9wOjA7XG4gICAgICAgIGxlZnQ6MDtcbiAgICAgICAgcmlnaHQ6MDtcbiAgICAgICAgYm90dG9tOjA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIge1xuICAgICAgICB0b3A6LTUwcHg7XG4gICAgICB9XG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBzd2l0Y2hFbGVtID0gZWxlbWVudChieS5jc3MoJ1tuZy1zd2l0Y2hdJykpO1xuICAgICAgdmFyIHNlbGVjdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlbGVjdGlvbicpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBzdGFydCBpbiBzZXR0aW5ncycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0byBob21lJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDEpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvSG9tZSBTcGFuLyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIHNldHRpbmdzIHZpYSBcIm9wdGlvbnNcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHNlbGVjdCBkZWZhdWx0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDMpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvZGVmYXVsdC8pO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1N3aXRjaERpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbigkYW5pbWF0ZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnbmdTd2l0Y2gnLFxuXG4gICAgLy8gYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCBmdW5jdGlvbiBOZ1N3aXRjaENvbnRyb2xsZXIoKSB7XG4gICAgIHRoaXMuY2FzZXMgPSB7fTtcbiAgICB9XSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgbmdTd2l0Y2hDb250cm9sbGVyKSB7XG4gICAgICB2YXIgd2F0Y2hFeHByID0gYXR0ci5uZ1N3aXRjaCB8fCBhdHRyLm9uLFxuICAgICAgICAgIHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBbXSxcbiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzID0gW10sXG4gICAgICAgICAgcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMgPSBbXSxcbiAgICAgICAgICBzZWxlY3RlZFNjb3BlcyA9IFtdO1xuXG4gICAgICB2YXIgc3BsaWNlRmFjdG9yeSA9IGZ1bmN0aW9uKGFycmF5LCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlICE9PSBmYWxzZSkgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwciwgZnVuY3Rpb24gbmdTd2l0Y2hXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaSwgaWk7XG5cbiAgICAgICAgLy8gU3RhcnQgd2l0aCB0aGUgbGFzdCwgaW4gY2FzZSB0aGUgYXJyYXkgaXMgbW9kaWZpZWQgZHVyaW5nIHRoZSBsb29wXG4gICAgICAgIHdoaWxlIChwcmV2aW91c0xlYXZlQW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5jYW5jZWwocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMucG9wKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBzZWxlY3RlZFNjb3Blcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkID0gZ2V0QmxvY2tOb2RlcyhzZWxlY3RlZEVsZW1lbnRzW2ldLmNsb25lKTtcbiAgICAgICAgICBzZWxlY3RlZFNjb3Blc1tpXS4kZGVzdHJveSgpO1xuICAgICAgICAgIHZhciBydW5uZXIgPSBwcmV2aW91c0xlYXZlQW5pbWF0aW9uc1tpXSA9ICRhbmltYXRlLmxlYXZlKHNlbGVjdGVkKTtcbiAgICAgICAgICBydW5uZXIuZG9uZShzcGxpY2VGYWN0b3J5KHByZXZpb3VzTGVhdmVBbmltYXRpb25zLCBpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHNlbGVjdGVkU2NvcGVzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgaWYgKChzZWxlY3RlZFRyYW5zY2x1ZGVzID0gbmdTd2l0Y2hDb250cm9sbGVyLmNhc2VzWychJyArIHZhbHVlXSB8fCBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJz8nXSkpIHtcbiAgICAgICAgICBmb3JFYWNoKHNlbGVjdGVkVHJhbnNjbHVkZXMsIGZ1bmN0aW9uKHNlbGVjdGVkVHJhbnNjbHVkZSkge1xuICAgICAgICAgICAgc2VsZWN0ZWRUcmFuc2NsdWRlLnRyYW5zY2x1ZGUoZnVuY3Rpb24oY2FzZUVsZW1lbnQsIHNlbGVjdGVkU2NvcGUpIHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRTY29wZXMucHVzaChzZWxlY3RlZFNjb3BlKTtcbiAgICAgICAgICAgICAgdmFyIGFuY2hvciA9IHNlbGVjdGVkVHJhbnNjbHVkZS5lbGVtZW50O1xuICAgICAgICAgICAgICBjYXNlRWxlbWVudFtjYXNlRWxlbWVudC5sZW5ndGgrK10gPSAkY29tcGlsZS4kJGNyZWF0ZUNvbW1lbnQoJ2VuZCBuZ1N3aXRjaFdoZW4nKTtcbiAgICAgICAgICAgICAgdmFyIGJsb2NrID0geyBjbG9uZTogY2FzZUVsZW1lbnQgfTtcblxuICAgICAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjYXNlRWxlbWVudCwgYW5jaG9yLnBhcmVudCgpLCBhbmNob3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gIHByaW9yaXR5OiAxMjAwLFxuICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcbiAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG5cbiAgICB2YXIgY2FzZXMgPSBhdHRycy5uZ1N3aXRjaFdoZW4uc3BsaXQoYXR0cnMubmdTd2l0Y2hXaGVuU2VwYXJhdG9yKS5zb3J0KCkuZmlsdGVyKFxuICAgICAgLy8gRmlsdGVyIGR1cGxpY2F0ZSBjYXNlc1xuICAgICAgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7IHJldHVybiBhcnJheVtpbmRleCAtIDFdICE9PSBlbGVtZW50OyB9XG4gICAgKTtcblxuICAgIGZvckVhY2goY2FzZXMsIGZ1bmN0aW9uKHdoZW5DYXNlKSB7XG4gICAgICBjdHJsLmNhc2VzWychJyArIHdoZW5DYXNlXSA9IChjdHJsLmNhc2VzWychJyArIHdoZW5DYXNlXSB8fCBbXSk7XG4gICAgICBjdHJsLmNhc2VzWychJyArIHdoZW5DYXNlXS5wdXNoKHsgdHJhbnNjbHVkZTogJHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG52YXIgbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gIHByaW9yaXR5OiAxMjAwLFxuICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcbiAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICBjdHJsLmNhc2VzWyc/J10gPSAoY3RybC5jYXNlc1snPyddIHx8IFtdKTtcbiAgICBjdHJsLmNhc2VzWyc/J10ucHVzaCh7IHRyYW5zY2x1ZGU6ICR0cmFuc2NsdWRlLCBlbGVtZW50OiBlbGVtZW50IH0pO1xuICAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdUcmFuc2NsdWRlXG4gKiBAcmVzdHJpY3QgRUFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEaXJlY3RpdmUgdGhhdCBtYXJrcyB0aGUgaW5zZXJ0aW9uIHBvaW50IGZvciB0aGUgdHJhbnNjbHVkZWQgRE9NIG9mIHRoZSBuZWFyZXN0IHBhcmVudCBkaXJlY3RpdmUgdGhhdCB1c2VzIHRyYW5zY2x1c2lvbi5cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgdGhhdCB5b3Ugd2FudCB0byBpbnNlcnQgYSBuYW1lZCB0cmFuc2NsdXNpb24gc2xvdCwgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBzbG90LCBieSBwcm92aWRpbmcgdGhlIHNsb3QgbmFtZVxuICogYXMgdGhlIHZhbHVlIG9mIHRoZSBgbmctdHJhbnNjbHVkZWAgb3IgYG5nLXRyYW5zY2x1ZGUtc2xvdGAgYXR0cmlidXRlLlxuICpcbiAqIElmIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGlzIG5vdCBlbXB0eSAoaS5lLiBjb250YWlucyBvbmUgb3IgbW9yZSBET00gbm9kZXMsIGluY2x1ZGluZyB3aGl0ZXNwYWNlIHRleHQgbm9kZXMpLCBhbnkgZXhpc3RpbmdcbiAqIGNvbnRlbnQgb2YgdGhpcyBlbGVtZW50IHdpbGwgYmUgcmVtb3ZlZCBiZWZvcmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgaW5zZXJ0ZWQuXG4gKiBJZiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpcyBlbXB0eSAob3Igb25seSB3aGl0ZXNwYWNlKSwgdGhlIGV4aXN0aW5nIGNvbnRlbnQgaXMgbGVmdCBpbnRhY3QuIFRoaXMgbGV0cyB5b3UgcHJvdmlkZSBmYWxsYmFja1xuICogY29udGVudCBpbiB0aGUgY2FzZSB0aGF0IG5vIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgcHJvdmlkZWQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nVHJhbnNjbHVkZXxuZ1RyYW5zY2x1ZGVTbG90IHRoZSBuYW1lIG9mIHRoZSBzbG90IHRvIGluc2VydCBhdCB0aGlzIHBvaW50LiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCwgaXMgZW1wdHlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBpdHMgdmFsdWUgaXMgdGhlIHNhbWUgYXMgdGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0aGVuIHRoZSBkZWZhdWx0IHNsb3QgaXMgdXNlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIEJhc2ljIHRyYW5zY2x1c2lvblxuICogVGhpcyBleGFtcGxlIGRlbW9uc3RyYXRlcyBiYXNpYyB0cmFuc2NsdXNpb24gb2YgY29udGVudCBpbnRvIGEgY29tcG9uZW50IGRpcmVjdGl2ZS5cbiAqIDxleGFtcGxlIG5hbWU9XCJzaW1wbGVUcmFuc2NsdWRlRXhhbXBsZVwiIG1vZHVsZT1cInRyYW5zY2x1ZGVFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNjcmlwdD5cbiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0cmFuc2NsdWRlRXhhbXBsZScsIFtdKVxuICogICAgICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpe1xuICogICAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICogICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAqICAgICAgICAgICAgIHNjb3BlOiB7IHRpdGxlOidAJyB9LFxuICogICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XCI+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IGdyYXlcIj57e3RpdGxlfX08L2Rpdj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICc8bmctdHJhbnNjbHVkZT48L25nLXRyYW5zY2x1ZGU+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcbiAqICAgICAgICAgICB9O1xuICogICAgICAgfSlcbiAqICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICRzY29wZS50aXRsZSA9ICdMb3JlbSBJcHN1bSc7XG4gKiAgICAgICAgICRzY29wZS50ZXh0ID0gJ05lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCBxdWkgZG9sb3JlbSBpcHN1bSBxdWlhIGRvbG9yLi4uJztcbiAqICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGlucHV0IG5nLW1vZGVsPVwidGl0bGVcIiBhcmlhLWxhYmVsPVwidGl0bGVcIj4gPGJyLz5cbiAqICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInRleHRcIiBhcmlhLWxhYmVsPVwidGV4dFwiPjwvdGV4dGFyZWE+IDxici8+XG4gKiAgICAgICA8cGFuZSB0aXRsZT1cInt7dGl0bGV9fVwiPjxzcGFuPnt7dGV4dH19PC9zcGFuPjwvcGFuZT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgIGl0KCdzaG91bGQgaGF2ZSB0cmFuc2NsdWRlZCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0aXRsZScpKTtcbiAqICAgICAgICB0aXRsZUVsZW1lbnQuY2xlYXIoKTtcbiAqICAgICAgICB0aXRsZUVsZW1lbnQuc2VuZEtleXMoJ1RJVExFJyk7XG4gKiAgICAgICAgdmFyIHRleHRFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGV4dCcpKTtcbiAqICAgICAgICB0ZXh0RWxlbWVudC5jbGVhcigpO1xuICogICAgICAgIHRleHRFbGVtZW50LnNlbmRLZXlzKCdURVhUJyk7XG4gKiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGl0bGUnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdUSVRMRScpO1xuICogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3RleHQnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdURVhUJyk7XG4gKiAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBUcmFuc2NsdWRlIGZhbGxiYWNrIGNvbnRlbnRcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBOZ1RyYW5zY2x1ZGVgIHdpdGggZmFsbGJhY2sgY29udGVudCwgdGhhdFxuICogaXMgZGlzcGxheWVkIGlmIG5vIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgcHJvdmlkZWQuXG4gKlxuICogPGV4YW1wbGUgbW9kdWxlPVwidHJhbnNjbHVkZUZhbGxiYWNrQ29udGVudEV4YW1wbGVcIiBuYW1lPVwibmctdHJhbnNjbHVkZVwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxzY3JpcHQ+XG4gKiBhbmd1bGFyLm1vZHVsZSgndHJhbnNjbHVkZUZhbGxiYWNrQ29udGVudEV4YW1wbGUnLCBbXSlcbiAqIC5kaXJlY3RpdmUoJ215QnV0dG9uJywgZnVuY3Rpb24oKXtcbiAqICAgICAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gKiAgICAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gKiAgICAgICAgICAgICAgIHNjb3BlOiB0cnVlLFxuICogICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxidXR0b24gc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCI+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bmctdHJhbnNjbHVkZT4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGIgc3R5bGU9XCJjb2xvcjogcmVkO1wiPkJ1dHRvbjE8L2I+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L25nLXRyYW5zY2x1ZGU+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICogICAgICAgICAgICAgfTtcbiAqICAgICAgICAgfSk7XG4gKiA8L3NjcmlwdD5cbiAqIDwhLS0gZmFsbGJhY2sgYnV0dG9uIGNvbnRlbnQgLS0+XG4gKiA8bXktYnV0dG9uIGlkPVwiZmFsbGJhY2tcIj48L215LWJ1dHRvbj5cbiAqIDwhLS0gbW9kaWZpZWQgYnV0dG9uIGNvbnRlbnQgLS0+XG4gKiA8bXktYnV0dG9uIGlkPVwibW9kaWZpZWRcIj5cbiAqICAgPGkgc3R5bGU9XCJjb2xvcjogZ3JlZW47XCI+QnV0dG9uMjwvaT5cbiAqIDwvbXktYnV0dG9uPlxuICogPC9maWxlPlxuICogPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogaXQoJ3Nob3VsZCBoYXZlIGRpZmZlcmVudCB0cmFuc2NsdWRlIGVsZW1lbnQgY29udGVudCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2ZhbGxiYWNrJykpLmdldFRleHQoKSkudG9CZSgnQnV0dG9uMScpO1xuICogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ21vZGlmaWVkJykpLmdldFRleHQoKSkudG9CZSgnQnV0dG9uMicpO1xuICogICAgICAgIH0pO1xuICogPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgTXVsdGktc2xvdCB0cmFuc2NsdXNpb25cbiAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdXNpbmcgbXVsdGktc2xvdCB0cmFuc2NsdXNpb24gaW4gYSBjb21wb25lbnQgZGlyZWN0aXZlLlxuICogPGV4YW1wbGUgbmFtZT1cIm11bHRpU2xvdFRyYW5zY2x1ZGVFeGFtcGxlXCIgbW9kdWxlPVwibXVsdGlTbG90VHJhbnNjbHVkZUV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxzdHlsZT5cbiAqICAgICAgLnRpdGxlLCAuZm9vdGVyIHtcbiAqICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmF5XG4gKiAgICAgIH1cbiAqICAgIDwvc3R5bGU+XG4gKiAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICA8aW5wdXQgbmctbW9kZWw9XCJ0aXRsZVwiIGFyaWEtbGFiZWw9XCJ0aXRsZVwiPiA8YnIvPlxuICogICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ0ZXh0XCIgYXJpYS1sYWJlbD1cInRleHRcIj48L3RleHRhcmVhPiA8YnIvPlxuICogICAgICA8cGFuZT5cbiAqICAgICAgICA8cGFuZS10aXRsZT48YSBuZy1ocmVmPVwie3tsaW5rfX1cIj57e3RpdGxlfX08L2E+PC9wYW5lLXRpdGxlPlxuICogICAgICAgIDxwYW5lLWJvZHk+PHA+e3t0ZXh0fX08L3A+PC9wYW5lLWJvZHk+XG4gKiAgICAgIDwvcGFuZT5cbiAqICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgIGFuZ3VsYXIubW9kdWxlKCdtdWx0aVNsb3RUcmFuc2NsdWRlRXhhbXBsZScsIFtdKVxuICogICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAqICAgICAgICAgIHRyYW5zY2x1ZGU6IHtcbiAqICAgICAgICAgICAgJ3RpdGxlJzogJz9wYW5lVGl0bGUnLFxuICogICAgICAgICAgICAnYm9keSc6ICdwYW5lQm9keScsXG4gKiAgICAgICAgICAgICdmb290ZXInOiAnP3BhbmVGb290ZXInXG4gKiAgICAgICAgICB9LFxuICogICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XCI+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRpdGxlXCIgbmctdHJhbnNjbHVkZT1cInRpdGxlXCI+RmFsbGJhY2sgVGl0bGU8L2Rpdj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IG5nLXRyYW5zY2x1ZGU9XCJib2R5XCI+PC9kaXY+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZvb3RlclwiIG5nLXRyYW5zY2x1ZGU9XCJmb290ZXJcIj5GYWxsYmFjayBGb290ZXI8L2Rpdj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAnPC9kaXY+J1xuICogICAgICAgIH07XG4gKiAgICB9KVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLnRpdGxlID0gJ0xvcmVtIElwc3VtJztcbiAqICAgICAgJHNjb3BlLmxpbmsgPSAnaHR0cHM6Ly9nb29nbGUuY29tJztcbiAqICAgICAgJHNjb3BlLnRleHQgPSAnTmVxdWUgcG9ycm8gcXVpc3F1YW0gZXN0IHF1aSBkb2xvcmVtIGlwc3VtIHF1aWEgZG9sb3IuLi4nO1xuICogICAgfV0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICAgaXQoJ3Nob3VsZCBoYXZlIHRyYW5zY2x1ZGVkIHRoZSB0aXRsZSBhbmQgdGhlIGJvZHknLCBmdW5jdGlvbigpIHtcbiAqICAgICAgICB2YXIgdGl0bGVFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGl0bGUnKSk7XG4gKiAgICAgICAgdGl0bGVFbGVtZW50LmNsZWFyKCk7XG4gKiAgICAgICAgdGl0bGVFbGVtZW50LnNlbmRLZXlzKCdUSVRMRScpO1xuICogICAgICAgIHZhciB0ZXh0RWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSk7XG4gKiAgICAgICAgdGV4dEVsZW1lbnQuY2xlYXIoKTtcbiAqICAgICAgICB0ZXh0RWxlbWVudC5zZW5kS2V5cygnVEVYVCcpO1xuICogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLnRpdGxlJykpLmdldFRleHQoKSkudG9FcXVhbCgnVElUTEUnKTtcbiAqICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd0ZXh0JykpLmdldFRleHQoKSkudG9FcXVhbCgnVEVYVCcpO1xuICogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmZvb3RlcicpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ0ZhbGxiYWNrIEZvb3RlcicpO1xuICogICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbmdUcmFuc2NsdWRlTWluRXJyID0gbWluRXJyKCduZ1RyYW5zY2x1ZGUnKTtcbnZhciBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSBbJyRjb21waWxlJywgZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBQycsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdUcmFuc2NsdWRlQ29tcGlsZSh0RWxlbWVudCkge1xuXG4gICAgICAvLyBSZW1vdmUgYW5kIGNhY2hlIGFueSBvcmlnaW5hbCBjb250ZW50IHRvIGFjdCBhcyBhIGZhbGxiYWNrXG4gICAgICB2YXIgZmFsbGJhY2tMaW5rRm4gPSAkY29tcGlsZSh0RWxlbWVudC5jb250ZW50cygpKTtcbiAgICAgIHRFbGVtZW50LmVtcHR5KCk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1RyYW5zY2x1ZGVQb3N0TGluaygkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsIGNvbnRyb2xsZXIsICR0cmFuc2NsdWRlKSB7XG5cbiAgICAgICAgaWYgKCEkdHJhbnNjbHVkZSkge1xuICAgICAgICAgIHRocm93IG5nVHJhbnNjbHVkZU1pbkVycignb3JwaGFuJyxcbiAgICAgICAgICAnSWxsZWdhbCB1c2Ugb2YgbmdUcmFuc2NsdWRlIGRpcmVjdGl2ZSBpbiB0aGUgdGVtcGxhdGUhICcgK1xuICAgICAgICAgICdObyBwYXJlbnQgZGlyZWN0aXZlIHRoYXQgcmVxdWlyZXMgYSB0cmFuc2NsdXNpb24gZm91bmQuICcgK1xuICAgICAgICAgICdFbGVtZW50OiB7MH0nLFxuICAgICAgICAgIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaXMgb2YgdGhlIGZvcm06IGBuZy10cmFuc2NsdWRlPVwibmctdHJhbnNjbHVkZVwiYCB0aGVuIHRyZWF0IGl0IGxpa2UgdGhlIGRlZmF1bHRcbiAgICAgICAgaWYgKCRhdHRycy5uZ1RyYW5zY2x1ZGUgPT09ICRhdHRycy4kYXR0ci5uZ1RyYW5zY2x1ZGUpIHtcbiAgICAgICAgICAkYXR0cnMubmdUcmFuc2NsdWRlID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNsb3ROYW1lID0gJGF0dHJzLm5nVHJhbnNjbHVkZSB8fCAkYXR0cnMubmdUcmFuc2NsdWRlU2xvdDtcblxuICAgICAgICAvLyBJZiB0aGUgc2xvdCBpcyByZXF1aXJlZCBhbmQgbm8gdHJhbnNjbHVzaW9uIGNvbnRlbnQgaXMgcHJvdmlkZWQgdGhlbiB0aGlzIGNhbGwgd2lsbCB0aHJvdyBhbiBlcnJvclxuICAgICAgICAkdHJhbnNjbHVkZShuZ1RyYW5zY2x1ZGVDbG9uZUF0dGFjaEZuLCBudWxsLCBzbG90TmFtZSk7XG5cbiAgICAgICAgLy8gSWYgdGhlIHNsb3QgaXMgb3B0aW9uYWwgYW5kIG5vIHRyYW5zY2x1c2lvbiBjb250ZW50IGlzIHByb3ZpZGVkIHRoZW4gdXNlIHRoZSBmYWxsYmFjayBjb250ZW50XG4gICAgICAgIGlmIChzbG90TmFtZSAmJiAhJHRyYW5zY2x1ZGUuaXNTbG90RmlsbGVkKHNsb3ROYW1lKSkge1xuICAgICAgICAgIHVzZUZhbGxiYWNrQ29udGVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmdUcmFuc2NsdWRlQ2xvbmVBdHRhY2hGbihjbG9uZSwgdHJhbnNjbHVkZWRTY29wZSkge1xuICAgICAgICAgIGlmIChjbG9uZS5sZW5ndGggJiYgbm90V2hpdGVzcGFjZShjbG9uZSkpIHtcbiAgICAgICAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVzZUZhbGxiYWNrQ29udGVudCgpO1xuICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm90aGluZyBsaW5rZWQgYWdhaW5zdCB0aGUgdHJhbnNjbHVkZWQgc2NvcGUgc2luY2Ugbm8gY29udGVudCB3YXMgYXZhaWxhYmxlLFxuICAgICAgICAgICAgLy8gc28gaXQgc2hvdWxkIGJlIHNhZmUgdG8gY2xlYW4gdXAgdGhlIGdlbmVyYXRlZCBzY29wZS5cbiAgICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1c2VGYWxsYmFja0NvbnRlbnQoKSB7XG4gICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyB0aGUgZmFsbGJhY2sgY29udGVudCByYXRoZXIgdGhhbiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCxcbiAgICAgICAgICAvLyB3ZSBsaW5rIGFnYWluc3QgdGhlIHNjb3BlIG9mIHRoaXMgZGlyZWN0aXZlIHJhdGhlciB0aGFuIHRoZSB0cmFuc2NsdWRlZCBzY29wZVxuICAgICAgICAgIGZhbGxiYWNrTGlua0ZuKCRzY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBub3RXaGl0ZXNwYWNlKG5vZGVzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbm9kZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfVEVYVCB8fCBub2RlLm5vZGVWYWx1ZS50cmltKCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHNjcmlwdFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIExvYWQgdGhlIGNvbnRlbnQgb2YgYSBgPHNjcmlwdD5gIGVsZW1lbnQgaW50byB7QGxpbmsgbmcuJHRlbXBsYXRlQ2FjaGUgYCR0ZW1wbGF0ZUNhY2hlYH0sIHNvIHRoYXQgdGhlXG4gKiB0ZW1wbGF0ZSBjYW4gYmUgdXNlZCBieSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0sXG4gKiB7QGxpbmsgbmdSb3V0ZS5kaXJlY3RpdmU6bmdWaWV3IGBuZ1ZpZXdgfSwgb3Ige0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS4gVGhlIHR5cGUgb2YgdGhlXG4gKiBgPHNjcmlwdD5gIGVsZW1lbnQgbXVzdCBiZSBzcGVjaWZpZWQgYXMgYHRleHQvbmctdGVtcGxhdGVgLCBhbmQgYSBjYWNoZSBuYW1lIGZvciB0aGUgdGVtcGxhdGUgbXVzdCBiZVxuICogYXNzaWduZWQgdGhyb3VnaCB0aGUgZWxlbWVudCdzIGBpZGAsIHdoaWNoIGNhbiB0aGVuIGJlIHVzZWQgYXMgYSBkaXJlY3RpdmUncyBgdGVtcGxhdGVVcmxgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIE11c3QgYmUgc2V0IHRvIGAndGV4dC9uZy10ZW1wbGF0ZSdgLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENhY2hlIG5hbWUgb2YgdGhlIHRlbXBsYXRlLlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlICBuYW1lPVwic2NyaXB0LXRhZ1wiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L25nLXRlbXBsYXRlXCIgaWQ9XCIvdHBsLmh0bWxcIj5cbiAgICAgICAgQ29udGVudCBvZiB0aGUgdGVtcGxhdGUuXG4gICAgICA8L3NjcmlwdD5cblxuICAgICAgPGEgbmctY2xpY2s9XCJjdXJyZW50VHBsPScvdHBsLmh0bWwnXCIgaWQ9XCJ0cGwtbGlua1wiPkxvYWQgaW5saW5lZCB0ZW1wbGF0ZTwvYT5cbiAgICAgIDxkaXYgaWQ9XCJ0cGwtY29udGVudFwiIG5nLWluY2x1ZGUgc3JjPVwiY3VycmVudFRwbFwiPjwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUgZGVmaW5lZCBpbnNpZGUgc2NyaXB0IHRhZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3RwbC1saW5rJykpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI3RwbC1jb250ZW50JykpLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0aGUgdGVtcGxhdGUvKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgc2NyaXB0RGlyZWN0aXZlID0gWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICBpZiAoYXR0ci50eXBlID09PSAndGV4dC9uZy10ZW1wbGF0ZScpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlVXJsID0gYXR0ci5pZCxcbiAgICAgICAgICAgIHRleHQgPSBlbGVtZW50WzBdLnRleHQ7XG5cbiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0KHRlbXBsYXRlVXJsLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuLyogZXhwb3J0ZWQgc2VsZWN0RGlyZWN0aXZlLCBvcHRpb25EaXJlY3RpdmUgKi9cblxudmFyIG5vb3BOZ01vZGVsQ29udHJvbGxlciA9IHsgJHNldFZpZXdWYWx1ZTogbm9vcCwgJHJlbmRlcjogbm9vcCB9O1xuXG5mdW5jdGlvbiBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhvcHRpb25FbCwgdmFsdWUpIHtcbiAgb3B0aW9uRWwucHJvcCgnc2VsZWN0ZWQnLCB2YWx1ZSk7XG4gIC8qKlxuICAgKiBXaGVuIHVuc2VsZWN0aW5nIGFuIG9wdGlvbiwgc2V0dGluZyB0aGUgcHJvcGVydHkgdG8gbnVsbCAvIGZhbHNlIHNob3VsZCBiZSBlbm91Z2hcbiAgICogSG93ZXZlciwgc2NyZWVucmVhZGVycyBtaWdodCByZWFjdCB0byB0aGUgc2VsZWN0ZWQgYXR0cmlidXRlIGluc3RlYWQsIHNlZVxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xNDQxOVxuICAgKiBOb3RlOiBcInNlbGVjdGVkXCIgaXMgYSBib29sZWFuIGF0dHIgYW5kIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIHRoZSBcInZhbHVlXCIgYXJnIGluIGF0dHIoKSBpcyBmYWxzZVxuICAgKiBvciBudWxsXG4gICAqL1xuICBvcHRpb25FbC5hdHRyKCdzZWxlY3RlZCcsIHZhbHVlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgY29udHJvbGxlciBmb3IgdGhlIHtAbGluayBuZy5zZWxlY3Qgc2VsZWN0fSBkaXJlY3RpdmUuIFRoZSBjb250cm9sbGVyIGV4cG9zZXNcbiAqIGEgZmV3IHV0aWxpdHkgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGF1Z21lbnQgdGhlIGJlaGF2aW9yIG9mIGEgcmVndWxhciBvciBhblxuICoge0BsaW5rIG5nLm5nT3B0aW9ucyBuZ09wdGlvbnN9IHNlbGVjdCBlbGVtZW50LlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgU2V0IGEgY3VzdG9tIGVycm9yIHdoZW4gdGhlIHVua25vd24gb3B0aW9uIGlzIHNlbGVjdGVkXG4gKlxuICogVGhpcyBleGFtcGxlIHNldHMgYSBjdXN0b20gZXJyb3IgXCJ1bmtub3duVmFsdWVcIiBvbiB0aGUgbmdNb2RlbENvbnRyb2xsZXJcbiAqIHdoZW4gdGhlIHNlbGVjdCBlbGVtZW50J3MgdW5rbm93biBvcHRpb24gaXMgc2VsZWN0ZWQsIGkuZS4gd2hlbiB0aGUgbW9kZWwgaXMgc2V0IHRvIGEgdmFsdWVcbiAqIHRoYXQgaXMgbm90IG1hdGNoZWQgYnkgYW55IG9wdGlvbi5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LXVua25vd24tdmFsdWUtZXJyb3JcIiBtb2R1bGU9XCJzdGF0aWNTZWxlY3RcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgICAgPGxhYmVsIGZvcj1cInRlc3RTZWxlY3RcIj4gU2luZ2xlIHNlbGVjdDogPC9sYWJlbD48YnI+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwidGVzdFNlbGVjdFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIiB1bmtub3duLXZhbHVlLWVycm9yPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+PGJyPlxuICogICAgIDxzcGFuIG5nLWlmPVwibXlGb3JtLnRlc3RTZWxlY3QuJGVycm9yLnVua25vd25WYWx1ZVwiPkVycm9yOiBUaGUgY3VycmVudCBtb2RlbCBkb2Vzbid0IG1hdGNoIGFueSBvcHRpb248L3NwYW4+XG4gKlxuICogICAgIDxidXR0b24gbmctY2xpY2s9XCJmb3JjZVVua25vd25PcHRpb24oKVwiPkZvcmNlIHVua25vd24gb3B0aW9uPC9idXR0b24+PGJyPlxuICogICA8L2Zvcm0+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnc3RhdGljU2VsZWN0JywgW10pXG4gKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAkc2NvcGUuc2VsZWN0ZWQgPSBudWxsO1xuICpcbiAqICAgICAgJHNjb3BlLmZvcmNlVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICRzY29wZS5zZWxlY3RlZCA9ICdub25zZW5zZSc7XG4gKiAgICAgIH07XG4gKiAgIH1dKVxuICogICAuZGlyZWN0aXZlKCd1bmtub3duVmFsdWVFcnJvcicsIGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiB7XG4gKiAgICAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAnc2VsZWN0J10sXG4gKiAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gKiAgICAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzBdO1xuICogICAgICAgICB2YXIgc2VsZWN0Q3RybCA9IGN0cmxzWzFdO1xuICpcbiAqICAgICAgICAgbmdNb2RlbEN0cmwuJHZhbGlkYXRvcnMudW5rbm93blZhbHVlID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gKiAgICAgICAgICAgaWYgKHNlbGVjdEN0cmwuJGlzVW5rbm93bk9wdGlvblNlbGVjdGVkKCkpIHtcbiAqICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAqICAgICAgICAgICB9XG4gKlxuICogICAgICAgICAgIHJldHVybiB0cnVlO1xuICogICAgICAgICB9O1xuICogICAgICAgfVxuICpcbiAqICAgICB9O1xuICogICB9KTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFNldCB0aGUgXCJyZXF1aXJlZFwiIGVycm9yIHdoZW4gdGhlIHVua25vd24gb3B0aW9uIGlzIHNlbGVjdGVkLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBcInJlcXVpcmVkXCIgZXJyb3Igb24gdGhlIG5nTW9kZWxDb250cm9sbGVyIGlzIG9ubHkgc2V0IG9uIGEgcmVxdWlyZWQgc2VsZWN0XG4gKiB3aGVuIHRoZSBlbXB0eSBvcHRpb24gaXMgc2VsZWN0ZWQuIFRoaXMgZXhhbXBsZSBhZGRzIGEgY3VzdG9tIGRpcmVjdGl2ZSB0aGF0IGFsc28gc2V0cyB0aGVcbiAqIGVycm9yIHdoZW4gdGhlIHVua25vd24gb3B0aW9uIGlzIHNlbGVjdGVkLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3QtdW5rbm93bi12YWx1ZS1yZXF1aXJlZFwiIG1vZHVsZT1cInN0YXRpY1NlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwidGVzdFNlbGVjdFwiPiBTZWxlY3Q6IDwvbGFiZWw+PGJyPlxuICogICAgIDxzZWxlY3QgbmFtZT1cInRlc3RTZWxlY3RcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCIgdW5rbm93bi12YWx1ZS1yZXF1aXJlZD5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMVwiPk9wdGlvbiAxPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTJcIj5PcHRpb24gMjwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqICAgICA8c3BhbiBuZy1pZj1cIm15Rm9ybS50ZXN0U2VsZWN0LiRlcnJvci5yZXF1aXJlZFwiPkVycm9yOiBQbGVhc2Ugc2VsZWN0IGEgdmFsdWU8L3NwYW4+PGJyPlxuICpcbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZm9yY2VVbmtub3duT3B0aW9uKClcIj5Gb3JjZSB1bmtub3duIG9wdGlvbjwvYnV0dG9uPjxicj5cbiAqICAgPC9mb3JtPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ3N0YXRpY1NlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLnNlbGVjdGVkID0gbnVsbDtcbiAqXG4gKiAgICAgICRzY29wZS5mb3JjZVVua25vd25PcHRpb24gPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAkc2NvcGUuc2VsZWN0ZWQgPSAnbm9uc2Vuc2UnO1xuICogICAgICB9O1xuICogICB9XSlcbiAqICAgLmRpcmVjdGl2ZSgndW5rbm93blZhbHVlUmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgcHJpb3JpdHk6IDEsIC8vIFRoaXMgZGlyZWN0aXZlIG11c3QgcnVuIGFmdGVyIHRoZSByZXF1aXJlZCBkaXJlY3RpdmUgaGFzIGFkZGVkIGl0cyB2YWxpZGF0b3JcbiAqICAgICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICdzZWxlY3QnXSxcbiAqICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAqICAgICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMF07XG4gKiAgICAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMV07XG4gKlxuICogICAgICAgICB2YXIgb3JpZ2luYWxSZXF1aXJlZFZhbGlkYXRvciA9IG5nTW9kZWxDdHJsLiR2YWxpZGF0b3JzLnJlcXVpcmVkO1xuICpcbiAqICAgICAgICAgbmdNb2RlbEN0cmwuJHZhbGlkYXRvcnMucmVxdWlyZWQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICBpZiAoYXR0cnMucmVxdWlyZWQgJiYgc2VsZWN0Q3RybC4kaXNVbmtub3duT3B0aW9uU2VsZWN0ZWQoKSkge1xuICogICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICogICAgICAgICAgIH1cbiAqXG4gKiAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVxdWlyZWRWYWxpZGF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAqICAgICAgICAgfTtcbiAqICAgICAgIH1cbiAqICAgICB9O1xuICogICB9KTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqXG4gKi9cbnZhciBTZWxlY3RDb250cm9sbGVyID1cbiAgICAgICAgWyckZWxlbWVudCcsICckc2NvcGUnLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oJGVsZW1lbnQsICRzY29wZSkge1xuXG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIG9wdGlvbnNNYXAgPSBuZXcgTmdNYXAoKTtcblxuICBzZWxmLnNlbGVjdFZhbHVlTWFwID0ge307IC8vIEtleXMgYXJlIHRoZSBoYXNoZWQgdmFsdWVzLCB2YWx1ZXMgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXG4gIC8vIElmIHRoZSBuZ01vZGVsIGRvZXNuJ3QgZ2V0IHByb3ZpZGVkIHRoZW4gcHJvdmlkZSBhIGR1bW15IG5vb3AgdmVyc2lvbiB0byBwcmV2ZW50IGVycm9yc1xuICBzZWxmLm5nTW9kZWxDdHJsID0gbm9vcE5nTW9kZWxDb250cm9sbGVyO1xuICBzZWxmLm11bHRpcGxlID0gZmFsc2U7XG5cbiAgLy8gVGhlIFwidW5rbm93blwiIG9wdGlvbiBpcyBvbmUgdGhhdCBpcyBwcmVwZW5kZWQgdG8gdGhlIGxpc3QgaWYgdGhlIHZpZXdWYWx1ZVxuICAvLyBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIG9wdGlvbnMuIFdoZW4gaXQgaXMgcmVuZGVyZWQgdGhlIHZhbHVlIG9mIHRoZSB1bmtub3duXG4gIC8vIG9wdGlvbiBpcyAnPyBYWFggPycgd2hlcmUgWFhYIGlzIHRoZSBoYXNoS2V5IG9mIHRoZSB2YWx1ZSB0aGF0IGlzIG5vdCBrbm93bi5cbiAgLy9cbiAgLy8gU3VwcG9ydDogSUUgOSBvbmx5XG4gIC8vIFdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICBzZWxmLnVua25vd25PcHRpb24gPSBqcUxpdGUod2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKTtcblxuICAvLyBUaGUgZW1wdHkgb3B0aW9uIGlzIGFuIG9wdGlvbiB3aXRoIHRoZSB2YWx1ZSAnJyB0aGF0IHRoZSBhcHBsaWNhdGlvbiBkZXZlbG9wZXIgY2FuXG4gIC8vIHByb3ZpZGUgaW5zaWRlIHRoZSBzZWxlY3QuIEl0IGlzIGFsd2F5cyBzZWxlY3RhYmxlIGFuZCBpbmRpY2F0ZXMgdGhhdCBhIFwibnVsbFwiIHNlbGVjdGlvbiBoYXNcbiAgLy8gYmVlbiBtYWRlIGJ5IHRoZSB1c2VyLlxuICAvLyBJZiB0aGUgc2VsZWN0IGhhcyBhbiBlbXB0eSBvcHRpb24sIGFuZCB0aGUgbW9kZWwgb2YgdGhlIHNlbGVjdCBpcyBzZXQgdG8gXCJ1bmRlZmluZWRcIiBvciBcIm51bGxcIixcbiAgLy8gdGhlIGVtcHR5IG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgLy8gSWYgdGhlIG1vZGVsIGlzIHNldCB0byBhIGRpZmZlcmVudCB1bm1hdGNoZWQgdmFsdWUsIHRoZSB1bmtub3duIG9wdGlvbiBpcyByZW5kZXJlZCBhbmRcbiAgLy8gc2VsZWN0ZWQsIGkuZSBib3RoIGFyZSBwcmVzZW50LCBiZWNhdXNlIGEgXCJudWxsXCIgc2VsZWN0aW9uIGFuZCBhbiB1bmtub3duIHZhbHVlIGFyZSBkaWZmZXJlbnQuXG4gIHNlbGYuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcbiAgc2VsZi5lbXB0eU9wdGlvbiA9IHVuZGVmaW5lZDtcblxuICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgdW5rbm93blZhbCA9IHNlbGYuZ2VuZXJhdGVVbmtub3duT3B0aW9uVmFsdWUodmFsKTtcbiAgICBzZWxmLnVua25vd25PcHRpb24udmFsKHVua25vd25WYWwpO1xuICAgICRlbGVtZW50LnByZXBlbmQoc2VsZi51bmtub3duT3B0aW9uKTtcbiAgICBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhzZWxmLnVua25vd25PcHRpb24sIHRydWUpO1xuICAgICRlbGVtZW50LnZhbCh1bmtub3duVmFsKTtcbiAgfTtcblxuICBzZWxmLnVwZGF0ZVVua25vd25PcHRpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgdW5rbm93blZhbCA9IHNlbGYuZ2VuZXJhdGVVbmtub3duT3B0aW9uVmFsdWUodmFsKTtcbiAgICBzZWxmLnVua25vd25PcHRpb24udmFsKHVua25vd25WYWwpO1xuICAgIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKHNlbGYudW5rbm93bk9wdGlvbiwgdHJ1ZSk7XG4gICAgJGVsZW1lbnQudmFsKHVua25vd25WYWwpO1xuICB9O1xuXG4gIHNlbGYuZ2VuZXJhdGVVbmtub3duT3B0aW9uVmFsdWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICByZXR1cm4gJz8gJyArIGhhc2hLZXkodmFsKSArICcgPyc7XG4gIH07XG5cbiAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYudW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgc2VsZi51bmtub3duT3B0aW9uLnJlbW92ZSgpO1xuICB9O1xuXG4gIHNlbGYuc2VsZWN0RW1wdHlPcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5lbXB0eU9wdGlvbikge1xuICAgICAgJGVsZW1lbnQudmFsKCcnKTtcbiAgICAgIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKHNlbGYuZW1wdHlPcHRpb24sIHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBzZWxmLnVuc2VsZWN0RW1wdHlPcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5oYXNFbXB0eU9wdGlvbikge1xuICAgICAgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoc2VsZi5lbXB0eU9wdGlvbiwgZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIC8vIGRpc2FibGUgdW5rbm93biBvcHRpb24gc28gdGhhdCB3ZSBkb24ndCBkbyB3b3JrIHdoZW4gdGhlIHdob2xlIHNlbGVjdCBpcyBiZWluZyBkZXN0cm95ZWRcbiAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBub29wO1xuICB9KTtcblxuICAvLyBSZWFkIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IGNvbnRyb2wsIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGNoYW5nZXMgZGVwZW5kaW5nXG4gIC8vIHVwb24gd2hldGhlciB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlIHZhbHVlcyBhbmQgd2hldGhlciBuZ09wdGlvbnMgaXMgYXQgd29yay5cbiAgc2VsZi5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkU2luZ2xlVmFsdWUoKSB7XG4gICAgdmFyIHZhbCA9ICRlbGVtZW50LnZhbCgpO1xuICAgIC8vIG5nVmFsdWUgYWRkZWQgb3B0aW9uIHZhbHVlcyBhcmUgc3RvcmVkIGluIHRoZSBzZWxlY3RWYWx1ZU1hcCwgbm9ybWFsIGludGVycG9sYXRpb25zIGFyZSBub3RcbiAgICB2YXIgcmVhbFZhbCA9IHZhbCBpbiBzZWxmLnNlbGVjdFZhbHVlTWFwID8gc2VsZi5zZWxlY3RWYWx1ZU1hcFt2YWxdIDogdmFsO1xuXG4gICAgaWYgKHNlbGYuaGFzT3B0aW9uKHJlYWxWYWwpKSB7XG4gICAgICByZXR1cm4gcmVhbFZhbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuXG4gIC8vIFdyaXRlIHRoZSB2YWx1ZSB0byB0aGUgc2VsZWN0IGNvbnRyb2wsIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGNoYW5nZXMgZGVwZW5kaW5nXG4gIC8vIHVwb24gd2hldGhlciB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlIHZhbHVlcyBhbmQgd2hldGhlciBuZ09wdGlvbnMgaXMgYXQgd29yay5cbiAgc2VsZi53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVTaW5nbGVWYWx1ZSh2YWx1ZSkge1xuICAgIC8vIE1ha2Ugc3VyZSB0byByZW1vdmUgdGhlIHNlbGVjdGVkIGF0dHJpYnV0ZSBmcm9tIHRoZSBwcmV2aW91c2x5IHNlbGVjdGVkIG9wdGlvblxuICAgIC8vIE90aGVyd2lzZSwgc2NyZWVuIHJlYWRlcnMgbWlnaHQgZ2V0IGNvbmZ1c2VkXG4gICAgdmFyIGN1cnJlbnRseVNlbGVjdGVkT3B0aW9uID0gJGVsZW1lbnRbMF0ub3B0aW9uc1skZWxlbWVudFswXS5zZWxlY3RlZEluZGV4XTtcbiAgICBpZiAoY3VycmVudGx5U2VsZWN0ZWRPcHRpb24pIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKGpxTGl0ZShjdXJyZW50bHlTZWxlY3RlZE9wdGlvbiksIGZhbHNlKTtcblxuICAgIGlmIChzZWxmLmhhc09wdGlvbih2YWx1ZSkpIHtcbiAgICAgIHNlbGYucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuXG4gICAgICB2YXIgaGFzaGVkVmFsID0gaGFzaEtleSh2YWx1ZSk7XG4gICAgICAkZWxlbWVudC52YWwoaGFzaGVkVmFsIGluIHNlbGYuc2VsZWN0VmFsdWVNYXAgPyBoYXNoZWRWYWwgOiB2YWx1ZSk7XG5cbiAgICAgIC8vIFNldCBzZWxlY3RlZCBhdHRyaWJ1dGUgYW5kIHByb3BlcnR5IG9uIHNlbGVjdGVkIG9wdGlvbiBmb3Igc2NyZWVuIHJlYWRlcnNcbiAgICAgIHZhciBzZWxlY3RlZE9wdGlvbiA9ICRlbGVtZW50WzBdLm9wdGlvbnNbJGVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleF07XG4gICAgICBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhqcUxpdGUoc2VsZWN0ZWRPcHRpb24pLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5zZWxlY3RVbmtub3duT3JFbXB0eU9wdGlvbih2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG5cbiAgLy8gVGVsbCB0aGUgc2VsZWN0IGNvbnRyb2wgdGhhdCBhbiBvcHRpb24sIHdpdGggdGhlIGdpdmVuIHZhbHVlLCBoYXMgYmVlbiBhZGRlZFxuICBzZWxmLmFkZE9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgLy8gU2tpcCBjb21tZW50IG5vZGVzLCBhcyB0aGV5IG9ubHkgcG9sbHV0ZSB0aGUgYG9wdGlvbnNNYXBgXG4gICAgaWYgKGVsZW1lbnRbMF0ubm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UKSByZXR1cm47XG5cbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgJ1wib3B0aW9uIHZhbHVlXCInKTtcbiAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICBzZWxmLmhhc0VtcHR5T3B0aW9uID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1wdHlPcHRpb24gPSBlbGVtZW50O1xuICAgIH1cbiAgICB2YXIgY291bnQgPSBvcHRpb25zTWFwLmdldCh2YWx1ZSkgfHwgMDtcbiAgICBvcHRpb25zTWFwLnNldCh2YWx1ZSwgY291bnQgKyAxKTtcbiAgICAvLyBPbmx5IHJlbmRlciBhdCB0aGUgZW5kIG9mIGEgZGlnZXN0LiBUaGlzIGltcHJvdmVzIHJlbmRlciBwZXJmb3JtYW5jZSB3aGVuIG1hbnkgb3B0aW9uc1xuICAgIC8vIGFyZSBhZGRlZCBkdXJpbmcgYSBkaWdlc3QgYW5kIGVuc3VyZXMgYWxsIHJlbGV2YW50IG9wdGlvbnMgYXJlIGNvcnJlY3RseSBtYXJrZWQgYXMgc2VsZWN0ZWRcbiAgICBzY2hlZHVsZVJlbmRlcigpO1xuICB9O1xuXG4gIC8vIFRlbGwgdGhlIHNlbGVjdCBjb250cm9sIHRoYXQgYW4gb3B0aW9uLCB3aXRoIHRoZSBnaXZlbiB2YWx1ZSwgaGFzIGJlZW4gcmVtb3ZlZFxuICBzZWxmLnJlbW92ZU9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGNvdW50ID0gb3B0aW9uc01hcC5nZXQodmFsdWUpO1xuICAgIGlmIChjb3VudCkge1xuICAgICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgIG9wdGlvbnNNYXAuZGVsZXRlKHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAgIHNlbGYuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLmVtcHR5T3B0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zTWFwLnNldCh2YWx1ZSwgY291bnQgLSAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0IGNvbnRyb2wgaGFzIGFuIG9wdGlvbiBtYXRjaGluZyB0aGUgZ2l2ZW4gdmFsdWVcbiAgc2VsZi5oYXNPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAhIW9wdGlvbnNNYXAuZ2V0KHZhbHVlKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBzZWxlY3QuU2VsZWN0Q29udHJvbGxlciMkaGFzRW1wdHlPcHRpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBzZWxlY3QgZWxlbWVudCBjdXJyZW50bHkgaGFzIGFuIGVtcHR5IG9wdGlvblxuICAgKiBlbGVtZW50LCBpLmUuIGFuIG9wdGlvbiB0aGF0IHNpZ25pZmllcyB0aGF0IHRoZSBzZWxlY3QgaXMgZW1wdHkgLyB0aGUgc2VsZWN0aW9uIGlzIG51bGwuXG4gICAqXG4gICAqL1xuICBzZWxmLiRoYXNFbXB0eU9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLmhhc0VtcHR5T3B0aW9uO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyIyRpc1Vua25vd25PcHRpb25TZWxlY3RlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHNlbGVjdCBlbGVtZW50J3MgdW5rbm93biBvcHRpb24gaXMgc2VsZWN0ZWQuIFRoZSB1bmtub3duIG9wdGlvbiBpcyBhZGRlZFxuICAgKiBhbmQgYXV0b21hdGljYWxseSBzZWxlY3RlZCB3aGVuZXZlciB0aGUgc2VsZWN0IG1vZGVsIGRvZXNuJ3QgbWF0Y2ggYW55IG9wdGlvbi5cbiAgICpcbiAgICovXG4gIHNlbGYuJGlzVW5rbm93bk9wdGlvblNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gUHJlc2VuY2Ugb2YgdGhlIHVua25vd24gb3B0aW9uIG1lYW5zIGl0IGlzIHNlbGVjdGVkXG4gICAgcmV0dXJuICRlbGVtZW50WzBdLm9wdGlvbnNbMF0gPT09IHNlbGYudW5rbm93bk9wdGlvblswXTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBzZWxlY3QuU2VsZWN0Q29udHJvbGxlciMkaXNFbXB0eU9wdGlvblNlbGVjdGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgc2VsZWN0IGVsZW1lbnQgaGFzIGFuIGVtcHR5IG9wdGlvbiBhbmQgdGhpcyBlbXB0eSBvcHRpb24gaXMgY3VycmVudGx5XG4gICAqIHNlbGVjdGVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgdGhlIHNlbGVjdCBlbGVtZW50IGhhcyBubyBlbXB0eSBvcHRpb24gb3IgaXQgaXMgbm90IHNlbGVjdGVkLlxuICAgKlxuICAgKi9cbiAgc2VsZi4kaXNFbXB0eU9wdGlvblNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYuaGFzRW1wdHlPcHRpb24gJiYgJGVsZW1lbnRbMF0ub3B0aW9uc1skZWxlbWVudFswXS5zZWxlY3RlZEluZGV4XSA9PT0gc2VsZi5lbXB0eU9wdGlvblswXTtcbiAgfTtcblxuICBzZWxmLnNlbGVjdFVua25vd25PckVtcHR5T3B0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiBzZWxmLmVtcHR5T3B0aW9uKSB7XG4gICAgICBzZWxmLnJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgIHNlbGYuc2VsZWN0RW1wdHlPcHRpb24oKTtcbiAgICB9IGVsc2UgaWYgKHNlbGYudW5rbm93bk9wdGlvbi5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgIHNlbGYudXBkYXRlVW5rbm93bk9wdGlvbih2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbih2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZW5kZXJTY2hlZHVsZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gc2NoZWR1bGVSZW5kZXIoKSB7XG4gICAgaWYgKHJlbmRlclNjaGVkdWxlZCkgcmV0dXJuO1xuICAgIHJlbmRlclNjaGVkdWxlZCA9IHRydWU7XG4gICAgJHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgIHJlbmRlclNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgdXBkYXRlU2NoZWR1bGVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIHNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlKHJlbmRlckFmdGVyKSB7XG4gICAgaWYgKHVwZGF0ZVNjaGVkdWxlZCkgcmV0dXJuO1xuXG4gICAgdXBkYXRlU2NoZWR1bGVkID0gdHJ1ZTtcblxuICAgICRzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoJHNjb3BlLiQkZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgIHVwZGF0ZVNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKHNlbGYucmVhZFZhbHVlKCkpO1xuICAgICAgaWYgKHJlbmRlckFmdGVyKSBzZWxmLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICB9KTtcbiAgfVxuXG5cbiAgc2VsZi5yZWdpc3Rlck9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvblNjb3BlLCBvcHRpb25FbGVtZW50LCBvcHRpb25BdHRycywgaW50ZXJwb2xhdGVWYWx1ZUZuLCBpbnRlcnBvbGF0ZVRleHRGbikge1xuXG4gICAgaWYgKG9wdGlvbkF0dHJzLiRhdHRyLm5nVmFsdWUpIHtcbiAgICAgIC8vIFRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgc2V0IGJ5IG5nVmFsdWVcbiAgICAgIHZhciBvbGRWYWwsIGhhc2hlZFZhbCA9IE5hTjtcbiAgICAgIG9wdGlvbkF0dHJzLiRvYnNlcnZlKCd2YWx1ZScsIGZ1bmN0aW9uIHZhbHVlQXR0cmlidXRlT2JzZXJ2ZUFjdGlvbihuZXdWYWwpIHtcblxuICAgICAgICB2YXIgcmVtb3ZhbDtcbiAgICAgICAgdmFyIHByZXZpb3VzbHlTZWxlY3RlZCA9IG9wdGlvbkVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnKTtcblxuICAgICAgICBpZiAoaXNEZWZpbmVkKGhhc2hlZFZhbCkpIHtcbiAgICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICAgIGRlbGV0ZSBzZWxmLnNlbGVjdFZhbHVlTWFwW2hhc2hlZFZhbF07XG4gICAgICAgICAgcmVtb3ZhbCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBoYXNoZWRWYWwgPSBoYXNoS2V5KG5ld1ZhbCk7XG4gICAgICAgIG9sZFZhbCA9IG5ld1ZhbDtcbiAgICAgICAgc2VsZi5zZWxlY3RWYWx1ZU1hcFtoYXNoZWRWYWxdID0gbmV3VmFsO1xuICAgICAgICBzZWxmLmFkZE9wdGlvbihuZXdWYWwsIG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICAvLyBTZXQgdGhlIGF0dHJpYnV0ZSBkaXJlY3RseSBpbnN0ZWFkIG9mIHVzaW5nIG9wdGlvbkF0dHJzLiRzZXQgLSB0aGlzIHN0b3BzIHRoZSBvYnNlcnZlclxuICAgICAgICAvLyBmcm9tIGZpcmluZyBhIHNlY29uZCB0aW1lLiBPdGhlciAkb2JzZXJ2ZXJzIG9uIHZhbHVlIHdpbGwgYWxzbyBnZXQgdGhlIHJlc3VsdCBvZiB0aGVcbiAgICAgICAgLy8gbmdWYWx1ZSBleHByZXNzaW9uLCBub3QgdGhlIGhhc2hlZCB2YWx1ZVxuICAgICAgICBvcHRpb25FbGVtZW50LmF0dHIoJ3ZhbHVlJywgaGFzaGVkVmFsKTtcblxuICAgICAgICBpZiAocmVtb3ZhbCAmJiBwcmV2aW91c2x5U2VsZWN0ZWQpIHtcbiAgICAgICAgICBzY2hlZHVsZVZpZXdWYWx1ZVVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGVWYWx1ZUZuKSB7XG4gICAgICAvLyBUaGUgdmFsdWUgYXR0cmlidXRlIGlzIGludGVycG9sYXRlZFxuICAgICAgb3B0aW9uQXR0cnMuJG9ic2VydmUoJ3ZhbHVlJywgZnVuY3Rpb24gdmFsdWVBdHRyaWJ1dGVPYnNlcnZlQWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAvLyBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBpbiBuZ09wdGlvbnMgYW5kIGhhcyBzaWRlLWVmZmVjdHMhXG4gICAgICAgIHNlbGYucmVhZFZhbHVlKCk7XG5cbiAgICAgICAgdmFyIHJlbW92YWw7XG4gICAgICAgIHZhciBwcmV2aW91c2x5U2VsZWN0ZWQgPSBvcHRpb25FbGVtZW50LnByb3AoJ3NlbGVjdGVkJyk7XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChvbGRWYWwpKSB7XG4gICAgICAgICAgc2VsZi5yZW1vdmVPcHRpb24ob2xkVmFsKTtcbiAgICAgICAgICByZW1vdmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBvbGRWYWwgPSBuZXdWYWw7XG4gICAgICAgIHNlbGYuYWRkT3B0aW9uKG5ld1ZhbCwgb3B0aW9uRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHJlbW92YWwgJiYgcHJldmlvdXNseVNlbGVjdGVkKSB7XG4gICAgICAgICAgc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0ZVRleHRGbikge1xuICAgICAgLy8gVGhlIHRleHQgY29udGVudCBpcyBpbnRlcnBvbGF0ZWRcbiAgICAgIG9wdGlvblNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZVRleHRGbiwgZnVuY3Rpb24gaW50ZXJwb2xhdGVXYXRjaEFjdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICBvcHRpb25BdHRycy4kc2V0KCd2YWx1ZScsIG5ld1ZhbCk7XG4gICAgICAgIHZhciBwcmV2aW91c2x5U2VsZWN0ZWQgPSBvcHRpb25FbGVtZW50LnByb3AoJ3NlbGVjdGVkJyk7XG4gICAgICAgIGlmIChvbGRWYWwgIT09IG5ld1ZhbCkge1xuICAgICAgICAgIHNlbGYucmVtb3ZlT3B0aW9uKG9sZFZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5hZGRPcHRpb24obmV3VmFsLCBvcHRpb25FbGVtZW50KTtcblxuICAgICAgICBpZiAob2xkVmFsICYmIHByZXZpb3VzbHlTZWxlY3RlZCkge1xuICAgICAgICAgIHNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgdmFsdWUgYXR0cmlidXRlIGlzIHN0YXRpY1xuICAgICAgc2VsZi5hZGRPcHRpb24ob3B0aW9uQXR0cnMudmFsdWUsIG9wdGlvbkVsZW1lbnQpO1xuICAgIH1cblxuXG4gICAgb3B0aW9uQXR0cnMuJG9ic2VydmUoJ2Rpc2FibGVkJywgZnVuY3Rpb24obmV3VmFsKSB7XG5cbiAgICAgIC8vIFNpbmNlIG1vZGVsIHVwZGF0ZXMgd2lsbCBhbHNvIHNlbGVjdCBkaXNhYmxlZCBvcHRpb25zIChsaWtlIG5nT3B0aW9ucyksXG4gICAgICAvLyB3ZSBvbmx5IGhhdmUgdG8gaGFuZGxlIG9wdGlvbnMgYmVjb21pbmcgZGlzYWJsZWQsIG5vdCBlbmFibGVkXG5cbiAgICAgIGlmIChuZXdWYWwgPT09ICd0cnVlJyB8fCBuZXdWYWwgJiYgb3B0aW9uRWxlbWVudC5wcm9wKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgIGlmIChzZWxmLm11bHRpcGxlKSB7XG4gICAgICAgICAgc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xuICAgICAgICAgIHNlbGYubmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBvcHRpb25FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHNlbGYucmVhZFZhbHVlKCk7XG4gICAgICB2YXIgcmVtb3ZlVmFsdWUgPSBvcHRpb25BdHRycy52YWx1ZTtcblxuICAgICAgc2VsZi5yZW1vdmVPcHRpb24ocmVtb3ZlVmFsdWUpO1xuICAgICAgc2NoZWR1bGVSZW5kZXIoKTtcblxuICAgICAgaWYgKHNlbGYubXVsdGlwbGUgJiYgY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pbmRleE9mKHJlbW92ZVZhbHVlKSAhPT0gLTEgfHxcbiAgICAgICAgICBjdXJyZW50VmFsdWUgPT09IHJlbW92ZVZhbHVlXG4gICAgICApIHtcbiAgICAgICAgLy8gV2hlbiBtdWx0aXBsZSAoc2VsZWN0ZWQpIG9wdGlvbnMgYXJlIGRlc3Ryb3llZCBhdCB0aGUgc2FtZSB0aW1lLCB3ZSBkb24ndCB3YW50XG4gICAgICAgIC8vIHRvIHJ1biBhIG1vZGVsIHVwZGF0ZSBmb3IgZWFjaCBvZiB0aGVtLiBJbnN0ZWFkLCBydW4gYSBzaW5nbGUgdXBkYXRlIGluIHRoZSAkJHBvc3REaWdlc3RcbiAgICAgICAgc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBzZWxlY3RcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIGBzZWxlY3RgIGVsZW1lbnQgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy5cbiAqXG4gKiBUaGUgYHNlbGVjdGAgZGlyZWN0aXZlIGlzIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9IHRvIHByb3ZpZGUgZGF0YS1iaW5kaW5nXG4gKiBiZXR3ZWVuIHRoZSBzY29wZSBhbmQgdGhlIGA8c2VsZWN0PmAgY29udHJvbCAoaW5jbHVkaW5nIHNldHRpbmcgZGVmYXVsdCB2YWx1ZXMpLlxuICogSXQgYWxzbyBoYW5kbGVzIGR5bmFtaWMgYDxvcHRpb24+YCBlbGVtZW50cywgd2hpY2ggY2FuIGJlIGFkZGVkIHVzaW5nIHRoZSB7QGxpbmsgbmdSZXBlYXQgYG5nUmVwZWF0fWAgb3JcbiAqIHtAbGluayBuZ09wdGlvbnMgYG5nT3B0aW9uc2B9IGRpcmVjdGl2ZXMuXG4gKlxuICogV2hlbiBhbiBpdGVtIGluIHRoZSBgPHNlbGVjdD5gIG1lbnUgaXMgc2VsZWN0ZWQsIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmRcbiAqIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGAgZGlyZWN0aXZlLiBXaXRoIHN0YXRpYyBvciByZXBlYXRlZCBvcHRpb25zLCB0aGlzIGlzXG4gKiB0aGUgY29udGVudCBvZiB0aGUgYHZhbHVlYCBhdHRyaWJ1dGUgb3IgdGhlIHRleHRDb250ZW50IG9mIHRoZSBgPG9wdGlvbj5gLCBpZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIG1pc3NpbmcuXG4gKiBWYWx1ZSBhbmQgdGV4dENvbnRlbnQgY2FuIGJlIGludGVycG9sYXRlZC5cbiAqXG4gKiBUaGUge0BsaW5rIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyIHNlbGVjdCBjb250cm9sbGVyfSBleHBvc2VzIHV0aWxpdHkgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWRcbiAqIHRvIG1hbmlwdWxhdGUgdGhlIHNlbGVjdCdzIGJlaGF2aW9yLlxuICpcbiAqICMjIE1hdGNoaW5nIG1vZGVsIGFuZCBvcHRpb24gdmFsdWVzXG4gKlxuICogSW4gZ2VuZXJhbCwgdGhlIG1hdGNoIGJldHdlZW4gdGhlIG1vZGVsIGFuZCBhbiBvcHRpb24gaXMgZXZhbHVhdGVkIGJ5IHN0cmljdGx5IGNvbXBhcmluZyB0aGUgbW9kZWxcbiAqIHZhbHVlIGFnYWluc3QgdGhlIHZhbHVlIG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucy5cbiAqXG4gKiBJZiB5b3UgYXJlIHNldHRpbmcgdGhlIG9wdGlvbiB2YWx1ZSB3aXRoIHRoZSBvcHRpb24ncyBgdmFsdWVgIGF0dHJpYnV0ZSwgb3IgdGV4dENvbnRlbnQsIHRoZVxuICogdmFsdWUgd2lsbCBhbHdheXMgYmUgYSBgc3RyaW5nYCB3aGljaCBtZWFucyB0aGF0IHRoZSBtb2RlbCB2YWx1ZSBtdXN0IGFsc28gYmUgYSBzdHJpbmcuXG4gKiBPdGhlcndpc2UgdGhlIGBzZWxlY3RgIGRpcmVjdGl2ZSBjYW5ub3QgbWF0Y2ggdGhlbSBjb3JyZWN0bHkuXG4gKlxuICogVG8gYmluZCB0aGUgbW9kZWwgdG8gYSBub24tc3RyaW5nIHZhbHVlLCB5b3UgY2FuIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBzdHJhdGVnaWVzOlxuICogLSB0aGUge0BsaW5rIG5nLm5nT3B0aW9ucyBgbmdPcHRpb25zYH0gZGlyZWN0aXZlXG4gKiAgICh7QGxpbmsgbmcuc2VsZWN0I3VzaW5nLXNlbGVjdC13aXRoLW5nb3B0aW9ucy1hbmQtc2V0dGluZy1hLWRlZmF1bHQtdmFsdWV9KVxuICogLSB0aGUge0BsaW5rIG5nLm5nVmFsdWUgYG5nVmFsdWVgfSBkaXJlY3RpdmUsIHdoaWNoIGFsbG93cyBhcmJpdHJhcnkgZXhwcmVzc2lvbnMgdG8gYmVcbiAqICAgb3B0aW9uIHZhbHVlcyAoe0BsaW5rIG5nLnNlbGVjdCN1c2luZy1uZ3ZhbHVlLXRvLWJpbmQtdGhlLW1vZGVsLXRvLWFuLWFycmF5LW9mLW9iamVjdHMgRXhhbXBsZX0pXG4gKiAtIG1vZGVsICRwYXJzZXJzIC8gJGZvcm1hdHRlcnMgdG8gY29udmVydCB0aGUgc3RyaW5nIHZhbHVlXG4gKiAgICh7QGxpbmsgbmcuc2VsZWN0I2JpbmRpbmctc2VsZWN0LXRvLWEtbm9uLXN0cmluZy12YWx1ZS12aWEtbmdtb2RlbC1wYXJzaW5nLWZvcm1hdHRpbmcgRXhhbXBsZX0pXG4gKlxuICogSWYgdGhlIHZpZXdWYWx1ZSBvZiBgbmdNb2RlbGAgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb25zLCB0aGVuIHRoZSBjb250cm9sXG4gKiB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGFuIFwidW5rbm93blwiIG9wdGlvbiwgd2hpY2ggaXQgdGhlbiByZW1vdmVzIHdoZW4gdGhlIG1pc21hdGNoIGlzIHJlc29sdmVkLlxuICpcbiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi5cbiAqXG4gKiAjIyBDaG9vc2luZyBiZXR3ZWVuIGBuZ1JlcGVhdGAgYW5kIGBuZ09wdGlvbnNgXG4gKlxuICogSW4gbWFueSBjYXNlcywgYG5nUmVwZWF0YCBjYW4gYmUgdXNlZCBvbiBgPG9wdGlvbj5gIGVsZW1lbnRzIGluc3RlYWQgb2Yge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ09wdGlvbnNcbiAqIG5nT3B0aW9uc30gdG8gYWNoaWV2ZSBhIHNpbWlsYXIgcmVzdWx0LiBIb3dldmVyLCBgbmdPcHRpb25zYCBwcm92aWRlcyBzb21lIGJlbmVmaXRzOlxuICogLSBtb3JlIGZsZXhpYmlsaXR5IGluIGhvdyB0aGUgYDxzZWxlY3Q+YCdzIG1vZGVsIGlzIGFzc2lnbmVkIHZpYSB0aGUgYHNlbGVjdGAgKipgYXNgKiogcGFydCBvZiB0aGVcbiAqIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvblxuICogLSByZWR1Y2VkIG1lbW9yeSBjb25zdW1wdGlvbiBieSBub3QgY3JlYXRpbmcgYSBuZXcgc2NvcGUgZm9yIGVhY2ggcmVwZWF0ZWQgaW5zdGFuY2VcbiAqIC0gaW5jcmVhc2VkIHJlbmRlciBzcGVlZCBieSBjcmVhdGluZyB0aGUgb3B0aW9ucyBpbiBhIGRvY3VtZW50RnJhZ21lbnQgaW5zdGVhZCBvZiBpbmRpdmlkdWFsbHlcbiAqXG4gKiBTcGVjaWZpY2FsbHksIHNlbGVjdCB3aXRoIHJlcGVhdGVkIG9wdGlvbnMgc2xvd3MgZG93biBzaWduaWZpY2FudGx5IHN0YXJ0aW5nIGF0IDIwMDAgb3B0aW9ucyBpblxuICogQ2hyb21lIGFuZCBJbnRlcm5ldCBFeHBsb3JlciAvIEVkZ2UuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbXVsdGlwbGUgQWxsb3dzIG11bHRpcGxlIG9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuIFRoZSBzZWxlY3RlZCB2YWx1ZXMgd2lsbCBiZVxuICogICAgIGJvdW5kIHRvIHRoZSBtb2RlbCBhcyBhbiBhcnJheS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIHJlcXVpcmVkIGF0dHJpYnV0ZSBhbmQgcmVxdWlyZWQgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBuZ1JlcXVpcmVkIGluc3RlYWQgb2YgcmVxdWlyZWRcbiAqIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIHNlbGVjdGVkIG9wdGlvbihzKSBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdPcHRpb25zIHNldHMgdGhlIG9wdGlvbnMgdGhhdCB0aGUgc2VsZWN0IGlzIHBvcHVsYXRlZCB3aXRoIGFuZCBkZWZpbmVzIHdoYXQgaXNcbiAqIHNldCBvbiB0aGUgbW9kZWwgb24gc2VsZWN0aW9uLiBTZWUge0BsaW5rIG5nT3B0aW9ucyBgbmdPcHRpb25zYH0uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQXR0clNpemUgc2V0cyB0aGUgc2l6ZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQgZHluYW1pY2FsbHkuIFVzZXMgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiMtbmdhdHRyLWZvci1iaW5kaW5nLXRvLWFyYml0cmFyeS1hdHRyaWJ1dGVzIG5nQXR0cn0gZGlyZWN0aXZlLlxuICpcbiAqXG4gKiBAa25vd25Jc3N1ZVxuICpcbiAqIEluIEZpcmVmb3gsIHRoZSBzZWxlY3QgbW9kZWwgaXMgb25seSB1cGRhdGVkIHdoZW4gdGhlIHNlbGVjdCBlbGVtZW50IGlzIGJsdXJyZWQuIEZvciBleGFtcGxlLFxuICogd2hlbiBzd2l0Y2hpbmcgYmV0d2VlbiBvcHRpb25zIHdpdGggdGhlIGtleWJvYXJkLCB0aGUgc2VsZWN0IG1vZGVsIGlzIG9ubHkgc2V0IHRvIHRoZVxuICogY3VycmVudGx5IHNlbGVjdGVkIG9wdGlvbiB3aGVuIHRoZSBzZWxlY3QgaXMgYmx1cnJlZCwgZS5nIHZpYSB0YWIga2V5IG9yIGNsaWNraW5nIHRoZSBtb3VzZVxuICogb3V0c2lkZSB0aGUgc2VsZWN0LlxuICpcbiAqIFRoaXMgaXMgZHVlIHRvIGFuIGFtYmlndWl0eSBpbiB0aGUgc2VsZWN0IGVsZW1lbnQgc3BlY2lmaWNhdGlvbi4gU2VlIHRoZVxuICogW2lzc3VlIG9uIHRoZSBGaXJlZm94IGJ1ZyB0cmFja2VyXShodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjYzNzkpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiwgYW5kIHRoaXNcbiAqIFtHaXRodWIgY29tbWVudCBmb3IgYSB3b3JrYXJvdW5kXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTM0I2lzc3VlY29tbWVudC0xMzA4MDA0ODgpXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBTaW1wbGUgYHNlbGVjdGAgZWxlbWVudHMgd2l0aCBzdGF0aWMgb3B0aW9uc1xuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzdGF0aWMtc2VsZWN0XCIgbW9kdWxlPVwic3RhdGljU2VsZWN0XCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICogICAgIDxsYWJlbCBmb3I9XCJzaW5nbGVTZWxlY3RcIj4gU2luZ2xlIHNlbGVjdDogPC9sYWJlbD48YnI+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwic2luZ2xlU2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLnNpbmdsZVNlbGVjdFwiPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+PGJyPlxuICpcbiAqICAgICA8bGFiZWwgZm9yPVwic2luZ2xlU2VsZWN0XCI+IFNpbmdsZSBzZWxlY3Qgd2l0aCBcIm5vdCBzZWxlY3RlZFwiIG9wdGlvbiBhbmQgZHluYW1pYyBvcHRpb24gdmFsdWVzOiA8L2xhYmVsPjxicj5cbiAqICAgICA8c2VsZWN0IG5hbWU9XCJzaW5nbGVTZWxlY3RcIiBpZD1cInNpbmdsZVNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5zaW5nbGVTZWxlY3RcIj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLS1QbGVhc2Ugc2VsZWN0LS0tPC9vcHRpb24+IDwhLS0gbm90IHNlbGVjdGVkIC8gYmxhbmsgb3B0aW9uIC0tPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cInt7ZGF0YS5vcHRpb24xfX1cIj5PcHRpb24gMTwvb3B0aW9uPiA8IS0tIGludGVycG9sYXRpb24gLS0+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTJcIj5PcHRpb24gMjwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZm9yY2VVbmtub3duT3B0aW9uKClcIj5Gb3JjZSB1bmtub3duIG9wdGlvbjwvYnV0dG9uPjxicj5cbiAqICAgICA8dHQ+c2luZ2xlU2VsZWN0ID0ge3tkYXRhLnNpbmdsZVNlbGVjdH19PC90dD5cbiAqXG4gKiAgICAgPGhyPlxuICogICAgIDxsYWJlbCBmb3I9XCJtdWx0aXBsZVNlbGVjdFwiPiBNdWx0aXBsZSBzZWxlY3Q6IDwvbGFiZWw+PGJyPlxuICogICAgIDxzZWxlY3QgbmFtZT1cIm11bHRpcGxlU2VsZWN0XCIgaWQ9XCJtdWx0aXBsZVNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5tdWx0aXBsZVNlbGVjdFwiIG11bHRpcGxlPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTNcIj5PcHRpb24gMzwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqICAgICA8dHQ+bXVsdGlwbGVTZWxlY3QgPSB7e2RhdGEubXVsdGlwbGVTZWxlY3R9fTwvdHQ+PGJyLz5cbiAqICAgPC9mb3JtPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ3N0YXRpY1NlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBzaW5nbGVTZWxlY3Q6IG51bGwsXG4gKiAgICAgICBtdWx0aXBsZVNlbGVjdDogW10sXG4gKiAgICAgICBvcHRpb24xOiAnb3B0aW9uLTEnXG4gKiAgICAgIH07XG4gKlxuICogICAgICAkc2NvcGUuZm9yY2VVbmtub3duT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgJHNjb3BlLmRhdGEuc2luZ2xlU2VsZWN0ID0gJ25vbnNlbnNlJztcbiAqICAgICAgfTtcbiAqICAgfV0pO1xuICogPC9maWxlPlxuICo8L2V4YW1wbGU+XG4gKlxuICogIyMjIFVzaW5nIGBuZ1JlcGVhdGAgdG8gZ2VuZXJhdGUgYHNlbGVjdGAgb3B0aW9uc1xuICogPGV4YW1wbGUgbmFtZT1cInNlbGVjdC1uZ3JlcGVhdFwiIG1vZHVsZT1cIm5ncmVwZWF0U2VsZWN0XCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICogICAgIDxsYWJlbCBmb3I9XCJyZXBlYXRTZWxlY3RcIj4gUmVwZWF0IHNlbGVjdDogPC9sYWJlbD5cbiAqICAgICA8c2VsZWN0IG5hbWU9XCJyZXBlYXRTZWxlY3RcIiBpZD1cInJlcGVhdFNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5tb2RlbFwiPlxuICogICAgICAgPG9wdGlvbiBuZy1yZXBlYXQ9XCJvcHRpb24gaW4gZGF0YS5hdmFpbGFibGVPcHRpb25zXCIgdmFsdWU9XCJ7e29wdGlvbi5pZH19XCI+e3tvcHRpb24ubmFtZX19PC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+XG4gKiAgIDwvZm9ybT5cbiAqICAgPGhyPlxuICogICA8dHQ+bW9kZWwgPSB7e2RhdGEubW9kZWx9fTwvdHQ+PGJyLz5cbiAqIDwvZGl2PlxuICogPC9maWxlPlxuICogPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogIGFuZ3VsYXIubW9kdWxlKCduZ3JlcGVhdFNlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBtb2RlbDogbnVsbCxcbiAqICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcbiAqICAgICAgICAge2lkOiAnMScsIG5hbWU6ICdPcHRpb24gQSd9LFxuICogICAgICAgICB7aWQ6ICcyJywgbmFtZTogJ09wdGlvbiBCJ30sXG4gKiAgICAgICAgIHtpZDogJzMnLCBuYW1lOiAnT3B0aW9uIEMnfVxuICogICAgICAgXVxuICogICAgICB9O1xuICogICB9XSk7XG4gKiA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cbiAqXG4gKiAjIyMgVXNpbmcgYG5nVmFsdWVgIHRvIGJpbmQgdGhlIG1vZGVsIHRvIGFuIGFycmF5IG9mIG9iamVjdHNcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtbmd2YWx1ZVwiIG1vZHVsZT1cIm5ndmFsdWVTZWxlY3RcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgICAgPGxhYmVsIGZvcj1cIm5ndmFsdWVzZWxlY3RcIj4gbmd2YWx1ZSBzZWxlY3Q6IDwvbGFiZWw+XG4gKiAgICAgPHNlbGVjdCBzaXplPVwiNlwiIG5hbWU9XCJuZ3ZhbHVlc2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLm1vZGVsXCIgbXVsdGlwbGU+XG4gKiAgICAgICA8b3B0aW9uIG5nLXJlcGVhdD1cIm9wdGlvbiBpbiBkYXRhLmF2YWlsYWJsZU9wdGlvbnNcIiBuZy12YWx1ZT1cIm9wdGlvbi52YWx1ZVwiPnt7b3B0aW9uLm5hbWV9fTwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0PlxuICogICA8L2Zvcm0+XG4gKiAgIDxocj5cbiAqICAgPHByZT5tb2RlbCA9IHt7ZGF0YS5tb2RlbCB8IGpzb259fTwvcHJlPjxici8+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnbmd2YWx1ZVNlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBtb2RlbDogbnVsbCxcbiAqICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcbiAgICAgICAgICAge3ZhbHVlOiAnbXlTdHJpbmcnLCBuYW1lOiAnc3RyaW5nJ30sXG4gICAgICAgICAgIHt2YWx1ZTogMSwgbmFtZTogJ2ludGVnZXInfSxcbiAgICAgICAgICAge3ZhbHVlOiB0cnVlLCBuYW1lOiAnYm9vbGVhbid9LFxuICAgICAgICAgICB7dmFsdWU6IG51bGwsIG5hbWU6ICdudWxsJ30sXG4gICAgICAgICAgIHt2YWx1ZToge3Byb3A6ICd2YWx1ZSd9LCBuYW1lOiAnb2JqZWN0J30sXG4gICAgICAgICAgIHt2YWx1ZTogWydhJ10sIG5hbWU6ICdhcnJheSd9XG4gKiAgICAgICBdXG4gKiAgICAgIH07XG4gKiAgIH1dKTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqICMjIyBVc2luZyBgc2VsZWN0YCB3aXRoIGBuZ09wdGlvbnNgIGFuZCBzZXR0aW5nIGEgZGVmYXVsdCB2YWx1ZVxuICogU2VlIHRoZSB7QGxpbmsgbmdPcHRpb25zIG5nT3B0aW9ucyBkb2N1bWVudGF0aW9ufSBmb3IgbW9yZSBgbmdPcHRpb25zYCB1c2FnZSBleGFtcGxlcy5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LXdpdGgtZGVmYXVsdC12YWx1ZXNcIiBtb2R1bGU9XCJkZWZhdWx0VmFsdWVTZWxlY3RcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgICAgPGxhYmVsIGZvcj1cIm15U2VsZWN0XCI+TWFrZSBhIGNob2ljZTo8L2xhYmVsPlxuICogICAgIDxzZWxlY3QgbmFtZT1cIm15U2VsZWN0XCIgaWQ9XCJteVNlbGVjdFwiXG4gKiAgICAgICBuZy1vcHRpb25zPVwib3B0aW9uLm5hbWUgZm9yIG9wdGlvbiBpbiBkYXRhLmF2YWlsYWJsZU9wdGlvbnMgdHJhY2sgYnkgb3B0aW9uLmlkXCJcbiAqICAgICAgIG5nLW1vZGVsPVwiZGF0YS5zZWxlY3RlZE9wdGlvblwiPjwvc2VsZWN0PlxuICogICA8L2Zvcm0+XG4gKiAgIDxocj5cbiAqICAgPHR0Pm9wdGlvbiA9IHt7ZGF0YS5zZWxlY3RlZE9wdGlvbn19PC90dD48YnIvPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ2RlZmF1bHRWYWx1ZVNlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXG4gKiAgICAgICAgIHtpZDogJzEnLCBuYW1lOiAnT3B0aW9uIEEnfSxcbiAqICAgICAgICAge2lkOiAnMicsIG5hbWU6ICdPcHRpb24gQid9LFxuICogICAgICAgICB7aWQ6ICczJywgbmFtZTogJ09wdGlvbiBDJ31cbiAqICAgICAgIF0sXG4gKiAgICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMycsIG5hbWU6ICdPcHRpb24gQyd9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXG4gKiAgICAgICB9O1xuICogICB9XSk7XG4gKiA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cbiAqXG4gKlxuICogIyMjIEJpbmRpbmcgYHNlbGVjdGAgdG8gYSBub24tc3RyaW5nIHZhbHVlIHZpYSBgbmdNb2RlbGAgcGFyc2luZyAvIGZvcm1hdHRpbmdcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LXdpdGgtbm9uLXN0cmluZy1vcHRpb25zXCIgbW9kdWxlPVwibm9uU3RyaW5nU2VsZWN0XCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm1vZGVsLmlkXCIgY29udmVydC10by1udW1iZXI+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwiMFwiPlplcm88L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIxXCI+T25lPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwiMlwiPlR3bzwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0PlxuICogICAgIHt7IG1vZGVsIH19XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgIGFuZ3VsYXIubW9kdWxlKCdub25TdHJpbmdTZWxlY3QnLCBbXSlcbiAqICAgICAgIC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICogICAgICAgICAkcm9vdFNjb3BlLm1vZGVsID0geyBpZDogMiB9O1xuICogICAgICAgfSlcbiAqICAgICAgIC5kaXJlY3RpdmUoJ2NvbnZlcnRUb051bWJlcicsIGZ1bmN0aW9uKCkge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAqICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcbiAqICAgICAgICAgICAgIG5nTW9kZWwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWwpIHtcbiAqICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTApO1xuICogICAgICAgICAgICAgfSk7XG4gKiAgICAgICAgICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsKSB7XG4gKiAgICAgICAgICAgICAgIHJldHVybiAnJyArIHZhbDtcbiAqICAgICAgICAgICAgIH0pO1xuICogICAgICAgICAgIH1cbiAqICAgICAgICAgfTtcbiAqICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCdtb2RlbC5pZCcpKS4kKCdvcHRpb246Y2hlY2tlZCcpLmdldFRleHQoKSkudG9FcXVhbCgnVHdvJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKi9cbnZhciBzZWxlY3REaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcmVxdWlyZTogWydzZWxlY3QnLCAnP25nTW9kZWwnXSxcbiAgICBjb250cm9sbGVyOiBTZWxlY3RDb250cm9sbGVyLFxuICAgIHByaW9yaXR5OiAxLFxuICAgIGxpbms6IHtcbiAgICAgIHByZTogc2VsZWN0UHJlTGluayxcbiAgICAgIHBvc3Q6IHNlbGVjdFBvc3RMaW5rXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHNlbGVjdFByZUxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG5cbiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF07XG4gICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBidXQgc2V0IHRoZSByZWdpc3Rlck9wdGlvblxuICAgICAgLy8gZnVuY3Rpb24gdG8gbm9vcCwgc28gb3B0aW9ucyBkb24ndCBnZXQgYWRkZWQgaW50ZXJuYWxseVxuICAgICAgaWYgKCFuZ01vZGVsQ3RybCkge1xuICAgICAgICBzZWxlY3RDdHJsLnJlZ2lzdGVyT3B0aW9uID0gbm9vcDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG5cbiAgICAgIHNlbGVjdEN0cmwubmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybDtcblxuICAgICAgLy8gV2hlbiB0aGUgc2VsZWN0ZWQgaXRlbShzKSBjaGFuZ2VzIHdlIGRlbGVnYXRlIGdldHRpbmcgdGhlIHZhbHVlIG9mIHRoZSBzZWxlY3QgY29udHJvbFxuICAgICAgLy8gdG8gdGhlIGByZWFkVmFsdWVgIG1ldGhvZCwgd2hpY2ggY2FuIGJlIGNoYW5nZWQgaWYgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICAgICAgLy8gc2VsZWN0ZWQgdmFsdWVzIG9yIGlmIHRoZSBvcHRpb25zIGFyZSBiZWluZyBnZW5lcmF0ZWQgYnkgYG5nT3B0aW9uc2BcbiAgICAgIGVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3RDdHJsLnJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoc2VsZWN0Q3RybC5yZWFkVmFsdWUoKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIElmIHRoZSBzZWxlY3QgYWxsb3dzIG11bHRpcGxlIHZhbHVlcyB0aGVuIHdlIG5lZWQgdG8gbW9kaWZ5IGhvdyB3ZSByZWFkIGFuZCB3cml0ZVxuICAgICAgLy8gdmFsdWVzIGZyb20gYW5kIHRvIHRoZSBjb250cm9sOyBhbHNvIHdoYXQgaXQgbWVhbnMgZm9yIHRoZSB2YWx1ZSB0byBiZSBlbXB0eSBhbmRcbiAgICAgIC8vIHdlIGhhdmUgdG8gYWRkIGFuIGV4dHJhIHdhdGNoIHNpbmNlIG5nTW9kZWwgZG9lc24ndCB3b3JrIHdlbGwgd2l0aCBhcnJheXMgLSBpdFxuICAgICAgLy8gZG9lc24ndCB0cmlnZ2VyIHJlbmRlcmluZyBpZiBvbmx5IGFuIGl0ZW0gaW4gdGhlIGFycmF5IGNoYW5nZXMuXG4gICAgICBpZiAoYXR0ci5tdWx0aXBsZSkge1xuICAgICAgICBzZWxlY3RDdHJsLm11bHRpcGxlID0gdHJ1ZTtcblxuICAgICAgICAvLyBSZWFkIHZhbHVlIG5vdyBuZWVkcyB0byBjaGVjayBlYWNoIG9wdGlvbiB0byBzZWUgaWYgaXQgaXMgc2VsZWN0ZWRcbiAgICAgICAgc2VsZWN0Q3RybC5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkTXVsdGlwbGVWYWx1ZSgpIHtcbiAgICAgICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAmJiAhb3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgIHZhciB2YWwgPSBvcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgIGFycmF5LnB1c2godmFsIGluIHNlbGVjdEN0cmwuc2VsZWN0VmFsdWVNYXAgPyBzZWxlY3RDdHJsLnNlbGVjdFZhbHVlTWFwW3ZhbF0gOiB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBXcml0ZSB2YWx1ZSBub3cgbmVlZHMgdG8gc2V0IHRoZSBzZWxlY3RlZCBwcm9wZXJ0eSBvZiBlYWNoIG1hdGNoaW5nIG9wdGlvblxuICAgICAgICBzZWxlY3RDdHJsLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZU11bHRpcGxlVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgdmFyIHNob3VsZEJlU2VsZWN0ZWQgPSAhIXZhbHVlICYmIChpbmNsdWRlcyh2YWx1ZSwgb3B0aW9uLnZhbHVlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlcyh2YWx1ZSwgc2VsZWN0Q3RybC5zZWxlY3RWYWx1ZU1hcFtvcHRpb24udmFsdWVdKSk7XG4gICAgICAgICAgICB2YXIgY3VycmVudGx5U2VsZWN0ZWQgPSBvcHRpb24uc2VsZWN0ZWQ7XG5cbiAgICAgICAgICAgIC8vIFN1cHBvcnQ6IElFIDktMTEgb25seSwgRWRnZSAxMi0xNStcbiAgICAgICAgICAgIC8vIEluIElFIGFuZCBFZGdlIGFkZGluZyBvcHRpb25zIHRvIHRoZSBzZWxlY3Rpb24gdmlhIHNoaWZ0K2NsaWNrL1VQL0RPV05cbiAgICAgICAgICAgIC8vIHdpbGwgZGUtc2VsZWN0IGFscmVhZHkgc2VsZWN0ZWQgb3B0aW9ucyBpZiBcInNlbGVjdGVkXCIgb24gdGhvc2Ugb3B0aW9ucyB3YXMgc2V0XG4gICAgICAgICAgICAvLyBtb3JlIHRoYW4gb25jZSAoaS5lLiB3aGVuIHRoZSBvcHRpb25zIHdlcmUgYWxyZWFkeSBzZWxlY3RlZClcbiAgICAgICAgICAgIC8vIFNvIHdlIG9ubHkgbW9kaWZ5IHRoZSBzZWxlY3RlZCBwcm9wZXJ0eSBpZiBuZWNlc3NhcnkuXG4gICAgICAgICAgICAvLyBOb3RlOiB0aGlzIGJlaGF2aW9yIGNhbm5vdCBiZSByZXBsaWNhdGVkIHZpYSB1bml0IHRlc3RzIGJlY2F1c2UgaXQgb25seSBzaG93cyBpbiB0aGVcbiAgICAgICAgICAgIC8vIGFjdHVhbCB1c2VyIGludGVyZmFjZS5cbiAgICAgICAgICAgIGlmIChzaG91bGRCZVNlbGVjdGVkICE9PSBjdXJyZW50bHlTZWxlY3RlZCkge1xuICAgICAgICAgICAgICBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhqcUxpdGUob3B0aW9uKSwgc2hvdWxkQmVTZWxlY3RlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB3ZSBoYXZlIHRvIGRvIGl0IG9uIGVhY2ggd2F0Y2ggc2luY2UgbmdNb2RlbCB3YXRjaGVzIHJlZmVyZW5jZSwgYnV0XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gd29yayBvZiBhbiBhcnJheSwgc28gd2UgbmVlZCB0byBzZWUgaWYgYW55dGhpbmcgd2FzIGluc2VydGVkL3JlbW92ZWRcbiAgICAgICAgdmFyIGxhc3RWaWV3LCBsYXN0Vmlld1JlZiA9IE5hTjtcbiAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIHNlbGVjdE11bHRpcGxlV2F0Y2goKSB7XG4gICAgICAgICAgaWYgKGxhc3RWaWV3UmVmID09PSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlICYmICFlcXVhbHMobGFzdFZpZXcsIG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgICBsYXN0VmlldyA9IHNoYWxsb3dDb3B5KG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0Vmlld1JlZiA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSBhIG11bHRpcGxlIHNlbGVjdCB0aGVuIHZhbHVlIGlzIG5vdyBhIGNvbGxlY3Rpb25cbiAgICAgICAgLy8gc28gdGhlIG1lYW5pbmcgb2YgJGlzRW1wdHkgY2hhbmdlc1xuICAgICAgICBuZ01vZGVsQ3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDA7XG4gICAgICAgIH07XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWxlY3RQb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcbiAgICAgIGlmICghbmdNb2RlbEN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcblxuICAgICAgLy8gV2UgZGVsZWdhdGUgcmVuZGVyaW5nIHRvIHRoZSBgd3JpdGVWYWx1ZWAgbWV0aG9kLCB3aGljaCBjYW4gYmUgY2hhbmdlZFxuICAgICAgLy8gaWYgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZSBzZWxlY3RlZCB2YWx1ZXMgb3IgaWYgdGhlIG9wdGlvbnMgYXJlIGJlaW5nXG4gICAgICAvLyBnZW5lcmF0ZWQgYnkgYG5nT3B0aW9uc2AuXG4gICAgICAvLyBUaGlzIG11c3QgYmUgZG9uZSBpbiB0aGUgcG9zdExpbmsgZm4gdG8gcHJldmVudCAkcmVuZGVyIHRvIGJlIGNhbGxlZCBiZWZvcmVcbiAgICAgIC8vIGFsbCBub2RlcyBoYXZlIGJlZW4gbGlua2VkIGNvcnJlY3RseS5cbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG59O1xuXG5cbi8vIFRoZSBvcHRpb24gZGlyZWN0aXZlIGlzIHB1cmVseSBkZXNpZ25lZCB0byBjb21tdW5pY2F0ZSB0aGUgZXhpc3RlbmNlIChvciBsYWNrIG9mKVxuLy8gb2YgZHluYW1pY2FsbHkgY3JlYXRlZCAoYW5kIGRlc3Ryb3llZCkgb3B0aW9uIGVsZW1lbnRzIHRvIHRoZWlyIGNvbnRhaW5pbmcgc2VsZWN0XG4vLyBkaXJlY3RpdmUgdmlhIGl0cyBjb250cm9sbGVyLlxudmFyIG9wdGlvbkRpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgZnVuY3Rpb24oJGludGVycG9sYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBpbnRlcnBvbGF0ZVZhbHVlRm4sIGludGVycG9sYXRlVGV4dEZuO1xuXG4gICAgICBpZiAoaXNEZWZpbmVkKGF0dHIubmdWYWx1ZSkpIHtcbiAgICAgICAgLy8gV2lsbCBiZSBoYW5kbGVkIGJ5IHJlZ2lzdGVyT3B0aW9uXG4gICAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZChhdHRyLnZhbHVlKSkge1xuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIGRlZmluZWQsIGNoZWNrIGlmIGl0IGNvbnRhaW5zIGFuIGludGVycG9sYXRpb25cbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZUZuID0gJGludGVycG9sYXRlKGF0dHIudmFsdWUsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBub3QgZGVmaW5lZCB0aGVuIHdlIGZhbGwgYmFjayB0byB0aGVcbiAgICAgICAgLy8gdGV4dCBjb250ZW50IG9mIHRoZSBvcHRpb24gZWxlbWVudCwgd2hpY2ggbWF5IGJlIGludGVycG9sYXRlZFxuICAgICAgICBpbnRlcnBvbGF0ZVRleHRGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LnRleHQoKSwgdHJ1ZSk7XG4gICAgICAgIGlmICghaW50ZXJwb2xhdGVUZXh0Rm4pIHtcbiAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgZWxlbWVudC50ZXh0KCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAvLyBUaGlzIGlzIGFuIG9wdGltaXphdGlvbiBvdmVyIHVzaW5nIF5eIHNpbmNlIHdlIGRvbid0IHdhbnQgdG8gaGF2ZSB0byBzZWFyY2hcbiAgICAgICAgLy8gYWxsIHRoZSB3YXkgdG8gdGhlIHJvb3Qgb2YgdGhlIERPTSBmb3IgZXZlcnkgc2luZ2xlIG9wdGlvbiBlbGVtZW50XG4gICAgICAgIHZhciBzZWxlY3RDdHJsTmFtZSA9ICckc2VsZWN0Q29udHJvbGxlcicsXG4gICAgICAgICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudCgpLFxuICAgICAgICAgICAgc2VsZWN0Q3RybCA9IHBhcmVudC5kYXRhKHNlbGVjdEN0cmxOYW1lKSB8fFxuICAgICAgICAgICAgICBwYXJlbnQucGFyZW50KCkuZGF0YShzZWxlY3RDdHJsTmFtZSk7IC8vIGluIGNhc2Ugd2UgYXJlIGluIG9wdGdyb3VwXG5cbiAgICAgICAgaWYgKHNlbGVjdEN0cmwpIHtcbiAgICAgICAgICBzZWxlY3RDdHJsLnJlZ2lzdGVyT3B0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBpbnRlcnBvbGF0ZVZhbHVlRm4sIGludGVycG9sYXRlVGV4dEZuKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlcXVpcmVkXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIG5nUmVxdWlyZWQgYWRkcyB0aGUgcmVxdWlyZWQge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYHZhbGlkYXRvcmB9IHRvIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0uXG4gKiBJdCBpcyBtb3N0IG9mdGVuIHVzZWQgZm9yIHtAbGluayBpbnB1dCBgaW5wdXRgfSBhbmQge0BsaW5rIHNlbGVjdCBgc2VsZWN0YH0gY29udHJvbHMsIGJ1dCBjYW4gYWxzbyBiZVxuICogYXBwbGllZCB0byBjdXN0b20gY29udHJvbHMuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBzZXRzIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpZiB0aGUgQW5ndWxhciBleHByZXNzaW9uIGluc2lkZVxuICogYG5nUmVxdWlyZWRgIGV2YWx1YXRlcyB0byB0cnVlLiBBIHNwZWNpYWwgZGlyZWN0aXZlIGZvciBzZXR0aW5nIGByZXF1aXJlZGAgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2VcbiAqIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgYHJlcXVpcmVkYC4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9uIGd1aWRlfVxuICogZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBUaGUgdmFsaWRhdG9yIHdpbGwgc2V0IHRoZSBgcmVxdWlyZWRgIGVycm9yIGtleSB0byB0cnVlIGlmIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBpcyBzZXQgYW5kXG4gKiBjYWxsaW5nIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRpc0VtcHR5IGBOZ01vZGVsQ29udHJvbGxlci4kaXNFbXB0eWB9IHdpdGggdGhlXG4gKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlIGBuZ01vZGVsLiR2aWV3VmFsdWVgfSByZXR1cm5zIGB0cnVlYC4gRm9yIGV4YW1wbGUsIHRoZVxuICogYCRpc0VtcHR5KClgIGltcGxlbWVudGF0aW9uIGZvciBgaW5wdXRbdGV4dF1gIGNoZWNrcyB0aGUgbGVuZ3RoIG9mIHRoZSBgJHZpZXdWYWx1ZWAuIFdoZW4gZGV2ZWxvcGluZ1xuICogY3VzdG9tIGNvbnRyb2xzLCBgJGlzRW1wdHkoKWAgY2FuIGJlIG92ZXJ3cml0dGVuIHRvIGFjY291bnQgZm9yIGEgJHZpZXdWYWx1ZSB0aGF0IGlzIG5vdCBzdHJpbmctYmFzZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ1JlcXVpcmVkRGlyZWN0aXZlXCIgbW9kdWxlPVwibmdSZXF1aXJlZEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nUmVxdWlyZWRFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLnJlcXVpcmVkID0gdHJ1ZTtcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwiZm9ybVwiPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwicmVxdWlyZWRcIj5Ub2dnbGUgcmVxdWlyZWQ6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInJlcXVpcmVkXCIgaWQ9XCJyZXF1aXJlZFwiIC8+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBtdXN0IGJlIGZpbGxlZCBpZiBgcmVxdWlyZWRgIGlzIHRydWU6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWxcIiBpZD1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctcmVxdWlyZWQ9XCJyZXF1aXJlZFwiIC8+PGJyPlxuICogICAgICAgICA8aHI+XG4gKiAgICAgICAgIHJlcXVpcmVkIGVycm9yIHNldD8gPSA8Y29kZT57e2Zvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkfX08L2NvZGU+PGJyPlxuICogICAgICAgICBtb2RlbCA9IDxjb2RlPnt7bW9kZWx9fTwvY29kZT5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIHJlcXVpcmVkID0gZWxlbWVudChieS5iaW5kaW5nKCdmb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCcpKTtcbiAgICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ21vZGVsJykpO1xuICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkuaWQoJ2lucHV0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZXQgdGhlIHJlcXVpcmVkIGVycm9yJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocmVxdWlyZWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcblxuICAgICAgICAgaW5wdXQuc2VuZEtleXMoJzEyMycpO1xuICAgICAgICAgZXhwZWN0KHJlcXVpcmVkLmdldFRleHQoKSkubm90LnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCcxMjMnKTtcbiAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgcmVxdWlyZWREaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG4gICAgICBhdHRyLnJlcXVpcmVkID0gdHJ1ZTsgLy8gZm9yY2UgdHJ1dGh5IGluIGNhc2Ugd2UgYXJlIG9uIG5vbiBpbnB1dCBlbGVtZW50XG5cbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucmVxdWlyZWQgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFhdHRyLnJlcXVpcmVkIHx8ICFjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSk7XG4gICAgICB9O1xuXG4gICAgICBhdHRyLiRvYnNlcnZlKCdyZXF1aXJlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1BhdHRlcm5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBuZ1BhdHRlcm4gYWRkcyB0aGUgcGF0dGVybiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgdmFsaWRhdG9yYH0gdG8ge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfS5cbiAqIEl0IGlzIG1vc3Qgb2Z0ZW4gdXNlZCBmb3IgdGV4dC1iYXNlZCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gY29udHJvbHMsIGJ1dCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN1c3RvbSB0ZXh0LWJhc2VkIGNvbnRyb2xzLlxuICpcbiAqIFRoZSB2YWxpZGF0b3Igc2V0cyB0aGUgYHBhdHRlcm5gIGVycm9yIGtleSBpZiB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSBgbmdNb2RlbC4kdmlld1ZhbHVlYH1cbiAqIGRvZXMgbm90IG1hdGNoIGEgUmVnRXhwIHdoaWNoIGlzIG9idGFpbmVkIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGVcbiAqIGBuZ1BhdHRlcm5gIGF0dHJpYnV0ZSB2YWx1ZTpcbiAqICogSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gKiAqIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cCBhZnRlciB3cmFwcGluZyBpdFxuICogaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYG5ldyBSZWdFeHAoJ15hYmMkJylgLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICogc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAqIGFjY291bnQuXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipOb3RlOioqIFRoaXMgZGlyZWN0aXZlIGlzIGFsc28gYWRkZWQgd2hlbiB0aGUgcGxhaW4gYHBhdHRlcm5gIGF0dHJpYnV0ZSBpcyB1c2VkLCB3aXRoIHR3b1xuICogZGlmZmVyZW5jZXM6XG4gKiA8b2w+XG4gKiAgIDxsaT5cbiAqICAgICBgbmdQYXR0ZXJuYCBkb2VzIG5vdCBzZXQgdGhlIGBwYXR0ZXJuYCBhdHRyaWJ1dGUgYW5kIHRoZXJlZm9yZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24gaXNcbiAqICAgICBub3QgYXZhaWxhYmxlLlxuICogICA8L2xpPlxuICogICA8bGk+XG4gKiAgICAgVGhlIGBuZ1BhdHRlcm5gIGF0dHJpYnV0ZSBtdXN0IGJlIGFuIGV4cHJlc3Npb24sIHdoaWxlIHRoZSBgcGF0dGVybmAgdmFsdWUgbXVzdCBiZVxuICogICAgIGludGVycG9sYXRlZC5cbiAqICAgPC9saT5cbiAqIDwvb2w+XG4gKiA8L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nUGF0dGVybkRpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nUGF0dGVybkV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nUGF0dGVybkV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICAkc2NvcGUucmVnZXggPSAnXFxcXGQrJztcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwiZm9ybVwiPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwicmVnZXhcIj5TZXQgYSBwYXR0ZXJuIChyZWdleCBzdHJpbmcpOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInJlZ2V4XCIgaWQ9XCJyZWdleFwiIC8+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBpcyByZXN0cmljdGVkIGJ5IHRoZSBjdXJyZW50IHBhdHRlcm46IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWxcIiBpZD1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctcGF0dGVybj1cInJlZ2V4XCIgLz48YnI+XG4gKiAgICAgICAgIDxocj5cbiAqICAgICAgICAgaW5wdXQgdmFsaWQ/ID0gPGNvZGU+e3tmb3JtLmlucHV0LiR2YWxpZH19PC9jb2RlPjxicj5cbiAqICAgICAgICAgbW9kZWwgPSA8Y29kZT57e21vZGVsfX08L2NvZGU+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBtb2RlbCA9IGVsZW1lbnQoYnkuYmluZGluZygnbW9kZWwnKSk7XG4gICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5pZCgnaW5wdXQnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHRoZSBpbnB1dCB3aXRoIHRoZSBkZWZhdWx0IHBhdHRlcm4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdhYWEnKTtcbiAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLm5vdC50b0NvbnRhaW4oJ2FhYScpO1xuXG4gICAgICAgICBpbnB1dC5jbGVhcigpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcxMjMnKTtcbiAgICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCcxMjMnKTtcbiAgICAgICAgIH0pO1xuICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBwYXR0ZXJuRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgcmVnZXhwLCBwYXR0ZXJuRXhwID0gYXR0ci5uZ1BhdHRlcm4gfHwgYXR0ci5wYXR0ZXJuO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgncGF0dGVybicsIGZ1bmN0aW9uKHJlZ2V4KSB7XG4gICAgICAgIGlmIChpc1N0cmluZyhyZWdleCkgJiYgcmVnZXgubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyByZWdleCArICckJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVnZXggJiYgIXJlZ2V4LnRlc3QpIHtcbiAgICAgICAgICB0aHJvdyBtaW5FcnIoJ25nUGF0dGVybicpKCdub3JlZ2V4cCcsXG4gICAgICAgICAgICAnRXhwZWN0ZWQgezB9IHRvIGJlIGEgUmVnRXhwIGJ1dCB3YXMgezF9LiBFbGVtZW50OiB7Mn0nLCBwYXR0ZXJuRXhwLFxuICAgICAgICAgICAgcmVnZXgsIHN0YXJ0aW5nVGFnKGVsbSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnZXhwID0gcmVnZXggfHwgdW5kZWZpbmVkO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucGF0dGVybiA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICAvLyBIVE1MNSBwYXR0ZXJuIGNvbnN0cmFpbnQgdmFsaWRhdGVzIHRoZSBpbnB1dCB2YWx1ZSwgc28gd2UgdmFsaWRhdGUgdGhlIHZpZXdWYWx1ZVxuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKHJlZ2V4cCkgfHwgcmVnZXhwLnRlc3Qodmlld1ZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01heGxlbmd0aFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIG5nTWF4bGVuZ3RoIGFkZHMgdGhlIG1heGxlbmd0aCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgdmFsaWRhdG9yYH0gdG8ge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfS5cbiAqIEl0IGlzIG1vc3Qgb2Z0ZW4gdXNlZCBmb3IgdGV4dC1iYXNlZCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gY29udHJvbHMsIGJ1dCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN1c3RvbSB0ZXh0LWJhc2VkIGNvbnRyb2xzLlxuICpcbiAqIFRoZSB2YWxpZGF0b3Igc2V0cyB0aGUgYG1heGxlbmd0aGAgZXJyb3Iga2V5IGlmIHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlIGBuZ01vZGVsLiR2aWV3VmFsdWVgfVxuICogaXMgbG9uZ2VyIHRoYW4gdGhlIGludGVnZXIgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZVxuICogYG5nTWF4bGVuZ3RoYCBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqTm90ZToqKiBUaGlzIGRpcmVjdGl2ZSBpcyBhbHNvIGFkZGVkIHdoZW4gdGhlIHBsYWluIGBtYXhsZW5ndGhgIGF0dHJpYnV0ZSBpcyB1c2VkLCB3aXRoIHR3b1xuICogZGlmZmVyZW5jZXM6XG4gKiA8b2w+XG4gKiAgIDxsaT5cbiAqICAgICBgbmdNYXhsZW5ndGhgIGRvZXMgbm90IHNldCB0aGUgYG1heGxlbmd0aGAgYXR0cmlidXRlIGFuZCB0aGVyZWZvcmUgSFRNTDUgY29uc3RyYWludFxuICogICAgIHZhbGlkYXRpb24gaXMgbm90IGF2YWlsYWJsZS5cbiAqICAgPC9saT5cbiAqICAgPGxpPlxuICogICAgIFRoZSBgbmdNYXhsZW5ndGhgIGF0dHJpYnV0ZSBtdXN0IGJlIGFuIGV4cHJlc3Npb24sIHdoaWxlIHRoZSBgbWF4bGVuZ3RoYCB2YWx1ZSBtdXN0IGJlXG4gKiAgICAgaW50ZXJwb2xhdGVkLlxuICogICA8L2xpPlxuICogPC9vbD5cbiAqIDwvZGl2PlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNYXhsZW5ndGhEaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ01heGxlbmd0aEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nTWF4bGVuZ3RoRXhhbXBsZScsIFtdKVxuICogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgICRzY29wZS5tYXhsZW5ndGggPSA1O1xuICogICAgICAgICB9XSk7XG4gKiAgICAgPC9zY3JpcHQ+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxmb3JtIG5hbWU9XCJmb3JtXCI+XG4gKiAgICAgICAgIDxsYWJlbCBmb3I9XCJtYXhsZW5ndGhcIj5TZXQgYSBtYXhsZW5ndGg6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJtYXhsZW5ndGhcIiBpZD1cIm1heGxlbmd0aFwiIC8+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBpcyByZXN0cmljdGVkIGJ5IHRoZSBjdXJyZW50IG1heGxlbmd0aDogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtb2RlbFwiIGlkPVwiaW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tYXhsZW5ndGg9XCJtYXhsZW5ndGhcIiAvPjxicj5cbiAqICAgICAgICAgPGhyPlxuICogICAgICAgICBpbnB1dCB2YWxpZD8gPSA8Y29kZT57e2Zvcm0uaW5wdXQuJHZhbGlkfX08L2NvZGU+PGJyPlxuICogICAgICAgICBtb2RlbCA9IDxjb2RlPnt7bW9kZWx9fTwvY29kZT5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIG1vZGVsID0gZWxlbWVudChieS5iaW5kaW5nKCdtb2RlbCcpKTtcbiAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5LmlkKCdpbnB1dCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgdGhlIGlucHV0IHdpdGggdGhlIGRlZmF1bHQgbWF4bGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWJjZGVmJyk7XG4gICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS5ub3QudG9Db250YWluKCdhYmNkZWYnKTtcblxuICAgICAgICAgaW5wdXQuY2xlYXIoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWJjZGUnKTtcbiAgICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCdhYmNkZScpO1xuICAgICAgICAgfSk7XG4gICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG1heGxlbmd0aERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIG1heGxlbmd0aCA9IC0xO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWF4bGVuZ3RoJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGludFZhbCA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgbWF4bGVuZ3RoID0gaXNOdW1iZXJOYU4oaW50VmFsKSA/IC0xIDogaW50VmFsO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1heGxlbmd0aCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gKG1heGxlbmd0aCA8IDApIHx8IGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCAodmlld1ZhbHVlLmxlbmd0aCA8PSBtYXhsZW5ndGgpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTWlubGVuZ3RoXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogbmdNaW5sZW5ndGggYWRkcyB0aGUgbWlubGVuZ3RoIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGB2YWxpZGF0b3JgfSB0byB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LlxuICogSXQgaXMgbW9zdCBvZnRlbiB1c2VkIGZvciB0ZXh0LWJhc2VkIHtAbGluayBpbnB1dCBgaW5wdXRgfSBjb250cm9scywgYnV0IGNhbiBhbHNvIGJlIGFwcGxpZWQgdG8gY3VzdG9tIHRleHQtYmFzZWQgY29udHJvbHMuXG4gKlxuICogVGhlIHZhbGlkYXRvciBzZXRzIHRoZSBgbWlubGVuZ3RoYCBlcnJvciBrZXkgaWYgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgYG5nTW9kZWwuJHZpZXdWYWx1ZWB9XG4gKiBpcyBzaG9ydGVyIHRoYW4gdGhlIGludGVnZXIgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZVxuICogYG5nTWlubGVuZ3RoYCBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqTm90ZToqKiBUaGlzIGRpcmVjdGl2ZSBpcyBhbHNvIGFkZGVkIHdoZW4gdGhlIHBsYWluIGBtaW5sZW5ndGhgIGF0dHJpYnV0ZSBpcyB1c2VkLCB3aXRoIHR3b1xuICogZGlmZmVyZW5jZXM6XG4gKiA8b2w+XG4gKiAgIDxsaT5cbiAqICAgICBgbmdNaW5sZW5ndGhgIGRvZXMgbm90IHNldCB0aGUgYG1pbmxlbmd0aGAgYXR0cmlidXRlIGFuZCB0aGVyZWZvcmUgSFRNTDUgY29uc3RyYWludFxuICogICAgIHZhbGlkYXRpb24gaXMgbm90IGF2YWlsYWJsZS5cbiAqICAgPC9saT5cbiAqICAgPGxpPlxuICogICAgIFRoZSBgbmdNaW5sZW5ndGhgIHZhbHVlIG11c3QgYmUgYW4gZXhwcmVzc2lvbiwgd2hpbGUgdGhlIGBtaW5sZW5ndGhgIHZhbHVlIG11c3QgYmVcbiAqICAgICBpbnRlcnBvbGF0ZWQuXG4gKiAgIDwvbGk+XG4gKiA8L29sPlxuICogPC9kaXY+XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01pbmxlbmd0aERpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nTWlubGVuZ3RoRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbmdNaW5sZW5ndGhFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLm1pbmxlbmd0aCA9IDM7XG4gKiAgICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGZvcm0gbmFtZT1cImZvcm1cIj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cIm1pbmxlbmd0aFwiPlNldCBhIG1pbmxlbmd0aDogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cIm1pbmxlbmd0aFwiIGlkPVwibWlubGVuZ3RoXCIgLz5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwiaW5wdXRcIj5UaGlzIGlucHV0IGlzIHJlc3RyaWN0ZWQgYnkgdGhlIGN1cnJlbnQgbWlubGVuZ3RoOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm1vZGVsXCIgaWQ9XCJpbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1pbmxlbmd0aD1cIm1pbmxlbmd0aFwiIC8+PGJyPlxuICogICAgICAgICA8aHI+XG4gKiAgICAgICAgIGlucHV0IHZhbGlkPyA9IDxjb2RlPnt7Zm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gKiAgICAgICAgIG1vZGVsID0gPGNvZGU+e3ttb2RlbH19PC9jb2RlPlxuICogICAgICAgPC9mb3JtPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ21vZGVsJykpO1xuICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkuaWQoJ2lucHV0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSB0aGUgaW5wdXQgd2l0aCB0aGUgZGVmYXVsdCBtaW5sZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdhYicpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkubm90LnRvQ29udGFpbignYWInKTtcblxuICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2FiYycpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCdhYmMnKTtcbiAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbWlubGVuZ3RoRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgbWlubGVuZ3RoID0gMDtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbmxlbmd0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIG1pbmxlbmd0aCA9IHRvSW50KHZhbHVlKSB8fCAwO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbmxlbmd0aCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IHZpZXdWYWx1ZS5sZW5ndGggPj0gbWlubGVuZ3RoO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG5pZiAod2luZG93LmFuZ3VsYXIuYm9vdHN0cmFwKSB7XG4gIC8vIEFuZ3VsYXJKUyBpcyBhbHJlYWR5IGxvYWRlZCwgc28gd2UgY2FuIHJldHVybiBoZXJlLi4uXG4gIGlmICh3aW5kb3cuY29uc29sZSkge1xuICAgIGNvbnNvbGUubG9nKCdXQVJOSU5HOiBUcmllZCB0byBsb2FkIGFuZ3VsYXIgbW9yZSB0aGFuIG9uY2UuJyk7XG4gIH1cbiAgcmV0dXJuO1xufVxuXG4vLyB0cnkgdG8gYmluZCB0byBqcXVlcnkgbm93IHNvIHRoYXQgb25lIGNhbiB3cml0ZSBqcUxpdGUoZm4pXG4vLyBidXQgd2Ugd2lsbCByZWJpbmQgb24gYm9vdHN0cmFwIGFnYWluLlxuYmluZEpRdWVyeSgpO1xuXG5wdWJsaXNoRXh0ZXJuYWxBUEkoYW5ndWxhcik7XG5cbmFuZ3VsYXIubW9kdWxlKFwibmdMb2NhbGVcIiwgW10sIFtcIiRwcm92aWRlXCIsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XG52YXIgUExVUkFMX0NBVEVHT1JZID0ge1pFUk86IFwiemVyb1wiLCBPTkU6IFwib25lXCIsIFRXTzogXCJ0d29cIiwgRkVXOiBcImZld1wiLCBNQU5ZOiBcIm1hbnlcIiwgT1RIRVI6IFwib3RoZXJcIn07XG5mdW5jdGlvbiBnZXREZWNpbWFscyhuKSB7XG4gIG4gPSBuICsgJyc7XG4gIHZhciBpID0gbi5pbmRleE9mKCcuJyk7XG4gIHJldHVybiAoaSA9PSAtMSkgPyAwIDogbi5sZW5ndGggLSBpIC0gMTtcbn1cblxuZnVuY3Rpb24gZ2V0VkYobiwgb3B0X3ByZWNpc2lvbikge1xuICB2YXIgdiA9IG9wdF9wcmVjaXNpb247XG5cbiAgaWYgKHVuZGVmaW5lZCA9PT0gdikge1xuICAgIHYgPSBNYXRoLm1pbihnZXREZWNpbWFscyhuKSwgMyk7XG4gIH1cblxuICB2YXIgYmFzZSA9IE1hdGgucG93KDEwLCB2KTtcbiAgdmFyIGYgPSAoKG4gKiBiYXNlKSB8IDApICUgYmFzZTtcbiAgcmV0dXJuIHt2OiB2LCBmOiBmfTtcbn1cblxuJHByb3ZpZGUudmFsdWUoXCIkbG9jYWxlXCIsIHtcbiAgXCJEQVRFVElNRV9GT1JNQVRTXCI6IHtcbiAgICBcIkFNUE1TXCI6IFtcbiAgICAgIFwiQU1cIixcbiAgICAgIFwiUE1cIlxuICAgIF0sXG4gICAgXCJEQVlcIjogW1xuICAgICAgXCJTdW5kYXlcIixcbiAgICAgIFwiTW9uZGF5XCIsXG4gICAgICBcIlR1ZXNkYXlcIixcbiAgICAgIFwiV2VkbmVzZGF5XCIsXG4gICAgICBcIlRodXJzZGF5XCIsXG4gICAgICBcIkZyaWRheVwiLFxuICAgICAgXCJTYXR1cmRheVwiXG4gICAgXSxcbiAgICBcIkVSQU5BTUVTXCI6IFtcbiAgICAgIFwiQmVmb3JlIENocmlzdFwiLFxuICAgICAgXCJBbm5vIERvbWluaVwiXG4gICAgXSxcbiAgICBcIkVSQVNcIjogW1xuICAgICAgXCJCQ1wiLFxuICAgICAgXCJBRFwiXG4gICAgXSxcbiAgICBcIkZJUlNUREFZT0ZXRUVLXCI6IDYsXG4gICAgXCJNT05USFwiOiBbXG4gICAgICBcIkphbnVhcnlcIixcbiAgICAgIFwiRmVicnVhcnlcIixcbiAgICAgIFwiTWFyY2hcIixcbiAgICAgIFwiQXByaWxcIixcbiAgICAgIFwiTWF5XCIsXG4gICAgICBcIkp1bmVcIixcbiAgICAgIFwiSnVseVwiLFxuICAgICAgXCJBdWd1c3RcIixcbiAgICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgICBcIk9jdG9iZXJcIixcbiAgICAgIFwiTm92ZW1iZXJcIixcbiAgICAgIFwiRGVjZW1iZXJcIlxuICAgIF0sXG4gICAgXCJTSE9SVERBWVwiOiBbXG4gICAgICBcIlN1blwiLFxuICAgICAgXCJNb25cIixcbiAgICAgIFwiVHVlXCIsXG4gICAgICBcIldlZFwiLFxuICAgICAgXCJUaHVcIixcbiAgICAgIFwiRnJpXCIsXG4gICAgICBcIlNhdFwiXG4gICAgXSxcbiAgICBcIlNIT1JUTU9OVEhcIjogW1xuICAgICAgXCJKYW5cIixcbiAgICAgIFwiRmViXCIsXG4gICAgICBcIk1hclwiLFxuICAgICAgXCJBcHJcIixcbiAgICAgIFwiTWF5XCIsXG4gICAgICBcIkp1blwiLFxuICAgICAgXCJKdWxcIixcbiAgICAgIFwiQXVnXCIsXG4gICAgICBcIlNlcFwiLFxuICAgICAgXCJPY3RcIixcbiAgICAgIFwiTm92XCIsXG4gICAgICBcIkRlY1wiXG4gICAgXSxcbiAgICBcIlNUQU5EQUxPTkVNT05USFwiOiBbXG4gICAgICBcIkphbnVhcnlcIixcbiAgICAgIFwiRmVicnVhcnlcIixcbiAgICAgIFwiTWFyY2hcIixcbiAgICAgIFwiQXByaWxcIixcbiAgICAgIFwiTWF5XCIsXG4gICAgICBcIkp1bmVcIixcbiAgICAgIFwiSnVseVwiLFxuICAgICAgXCJBdWd1c3RcIixcbiAgICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgICBcIk9jdG9iZXJcIixcbiAgICAgIFwiTm92ZW1iZXJcIixcbiAgICAgIFwiRGVjZW1iZXJcIlxuICAgIF0sXG4gICAgXCJXRUVLRU5EUkFOR0VcIjogW1xuICAgICAgNSxcbiAgICAgIDZcbiAgICBdLFxuICAgIFwiZnVsbERhdGVcIjogXCJFRUVFLCBNTU1NIGQsIHlcIixcbiAgICBcImxvbmdEYXRlXCI6IFwiTU1NTSBkLCB5XCIsXG4gICAgXCJtZWRpdW1cIjogXCJNTU0gZCwgeSBoOm1tOnNzIGFcIixcbiAgICBcIm1lZGl1bURhdGVcIjogXCJNTU0gZCwgeVwiLFxuICAgIFwibWVkaXVtVGltZVwiOiBcImg6bW06c3MgYVwiLFxuICAgIFwic2hvcnRcIjogXCJNL2QveXkgaDptbSBhXCIsXG4gICAgXCJzaG9ydERhdGVcIjogXCJNL2QveXlcIixcbiAgICBcInNob3J0VGltZVwiOiBcImg6bW0gYVwiXG4gIH0sXG4gIFwiTlVNQkVSX0ZPUk1BVFNcIjoge1xuICAgIFwiQ1VSUkVOQ1lfU1lNXCI6IFwiJFwiLFxuICAgIFwiREVDSU1BTF9TRVBcIjogXCIuXCIsXG4gICAgXCJHUk9VUF9TRVBcIjogXCIsXCIsXG4gICAgXCJQQVRURVJOU1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiZ1NpemVcIjogMyxcbiAgICAgICAgXCJsZ1NpemVcIjogMyxcbiAgICAgICAgXCJtYXhGcmFjXCI6IDMsXG4gICAgICAgIFwibWluRnJhY1wiOiAwLFxuICAgICAgICBcIm1pbkludFwiOiAxLFxuICAgICAgICBcIm5lZ1ByZVwiOiBcIi1cIixcbiAgICAgICAgXCJuZWdTdWZcIjogXCJcIixcbiAgICAgICAgXCJwb3NQcmVcIjogXCJcIixcbiAgICAgICAgXCJwb3NTdWZcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJnU2l6ZVwiOiAzLFxuICAgICAgICBcImxnU2l6ZVwiOiAzLFxuICAgICAgICBcIm1heEZyYWNcIjogMixcbiAgICAgICAgXCJtaW5GcmFjXCI6IDIsXG4gICAgICAgIFwibWluSW50XCI6IDEsXG4gICAgICAgIFwibmVnUHJlXCI6IFwiLVxcdTAwYTRcIixcbiAgICAgICAgXCJuZWdTdWZcIjogXCJcIixcbiAgICAgICAgXCJwb3NQcmVcIjogXCJcXHUwMGE0XCIsXG4gICAgICAgIFwicG9zU3VmXCI6IFwiXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIFwiaWRcIjogXCJlbi11c1wiLFxuICBcImxvY2FsZUlEXCI6IFwiZW5fVVNcIixcbiAgXCJwbHVyYWxDYXRcIjogZnVuY3Rpb24obiwgb3B0X3ByZWNpc2lvbikgeyAgdmFyIGkgPSBuIHwgMDsgIHZhciB2ZiA9IGdldFZGKG4sIG9wdF9wcmVjaXNpb24pOyAgaWYgKGkgPT0gMSAmJiB2Zi52ID09IDApIHsgICAgcmV0dXJuIFBMVVJBTF9DQVRFR09SWS5PTkU7ICB9ICByZXR1cm4gUExVUkFMX0NBVEVHT1JZLk9USEVSO31cbn0pO1xufV0pO1xuXG4gIGpxTGl0ZShmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFySW5pdCh3aW5kb3cuZG9jdW1lbnQsIGJvb3RzdHJhcCk7XG4gIH0pO1xuXG59KSh3aW5kb3cpO1xuXG4hd2luZG93LmFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmIHdpbmRvdy5hbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuaGVhZCkucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPkBjaGFyc2V0IFwiVVRGLThcIjtbbmdcXFxcOmNsb2FrXSxbbmctY2xvYWtdLFtkYXRhLW5nLWNsb2FrXSxbeC1uZy1jbG9ha10sLm5nLWNsb2FrLC54LW5nLWNsb2FrLC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9bmdcXFxcOmZvcm17ZGlzcGxheTpibG9jazt9Lm5nLWFuaW1hdGUtc2hpbXt2aXNpYmlsaXR5OmhpZGRlbjt9Lm5nLWFuY2hvcntwb3NpdGlvbjphYnNvbHV0ZTt9PC9zdHlsZT4nKTsiLCIvKiFcbiAqIEJvb3RzdHJhcCB2My4zLjYgKGh0dHA6Ly9nZXRib290c3RyYXAuY29tKVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuXG5pZiAodHlwZW9mIGpRdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5Jylcbn1cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHZlcnNpb24gPSAkLmZuLmpxdWVyeS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJylcbiAgaWYgKCh2ZXJzaW9uWzBdIDwgMiAmJiB2ZXJzaW9uWzFdIDwgOSkgfHwgKHZlcnNpb25bMF0gPT0gMSAmJiB2ZXJzaW9uWzFdID09IDkgJiYgdmVyc2lvblsyXSA8IDEpIHx8ICh2ZXJzaW9uWzBdID4gMikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkgdmVyc2lvbiAxLjkuMSBvciBoaWdoZXIsIGJ1dCBsb3dlciB0aGFuIHZlcnNpb24gMycpXG4gIH1cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHRyYW5zaXRpb24uanMgdjMuMy42XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0cmFuc2l0aW9uc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENTUyBUUkFOU0lUSU9OIFNVUFBPUlQgKFNob3V0b3V0OiBodHRwOi8vd3d3Lm1vZGVybml6ci5jb20vKVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Jvb3RzdHJhcCcpXG5cbiAgICB2YXIgdHJhbnNFbmRFdmVudE5hbWVzID0ge1xuICAgICAgV2Via2l0VHJhbnNpdGlvbiA6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgIE1velRyYW5zaXRpb24gICAgOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICBPVHJhbnNpdGlvbiAgICAgIDogJ29UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kJyxcbiAgICAgIHRyYW5zaXRpb24gICAgICAgOiAndHJhbnNpdGlvbmVuZCdcbiAgICB9XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHRyYW5zRW5kRXZlbnROYW1lcykge1xuICAgICAgaWYgKGVsLnN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHsgZW5kOiB0cmFuc0VuZEV2ZW50TmFtZXNbbmFtZV0gfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZSAvLyBleHBsaWNpdCBmb3IgaWU4ICggIC5fLilcbiAgfVxuXG4gIC8vIGh0dHA6Ly9ibG9nLmFsZXhtYWNjYXcuY29tL2Nzcy10cmFuc2l0aW9uc1xuICAkLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlXG4gICAgdmFyICRlbCA9IHRoaXNcbiAgICAkKHRoaXMpLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlIH0pXG4gICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkgeyBpZiAoIWNhbGxlZCkgJCgkZWwpLnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKSB9XG4gICAgc2V0VGltZW91dChjYWxsYmFjaywgZHVyYXRpb24pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gICQoZnVuY3Rpb24gKCkge1xuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkVuZCgpXG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm5cblxuICAgICQuZXZlbnQuc3BlY2lhbC5ic1RyYW5zaXRpb25FbmQgPSB7XG4gICAgICBiaW5kVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgZGVsZWdhdGVUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsXG4gICAgICBoYW5kbGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGlzKSkgcmV0dXJuIGUuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWxlcnQuanMgdjMuMy42XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhbGVydHNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBBTEVSVCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgZGlzbWlzcyA9ICdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nXG4gIHZhciBBbGVydCAgID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgJChlbCkub24oJ2NsaWNrJywgZGlzbWlzcywgdGhpcy5jbG9zZSlcbiAgfVxuXG4gIEFsZXJ0LlZFUlNJT04gPSAnMy4zLjYnXG5cbiAgQWxlcnQuVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MFxuXG4gIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzICAgID0gJCh0aGlzKVxuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgfVxuXG4gICAgdmFyICRwYXJlbnQgPSAkKHNlbGVjdG9yKVxuXG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgaWYgKCEkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgJHBhcmVudCA9ICR0aGlzLmNsb3Nlc3QoJy5hbGVydCcpXG4gICAgfVxuXG4gICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdjbG9zZS5icy5hbGVydCcpKVxuXG4gICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgJHBhcmVudC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRWxlbWVudCgpIHtcbiAgICAgIC8vIGRldGFjaCBmcm9tIHBhcmVudCwgZmlyZSBldmVudCB0aGVuIGNsZWFuIHVwIGRhdGFcbiAgICAgICRwYXJlbnQuZGV0YWNoKCkudHJpZ2dlcignY2xvc2VkLmJzLmFsZXJ0JykucmVtb3ZlKClcbiAgICB9XG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkcGFyZW50Lmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHBhcmVudFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCByZW1vdmVFbGVtZW50KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQWxlcnQuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgcmVtb3ZlRWxlbWVudCgpXG4gIH1cblxuXG4gIC8vIEFMRVJUIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuYWxlcnQnKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmFsZXJ0JywgKGRhdGEgPSBuZXcgQWxlcnQodGhpcykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5hbGVydFxuXG4gICQuZm4uYWxlcnQgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5hbGVydC5Db25zdHJ1Y3RvciA9IEFsZXJ0XG5cblxuICAvLyBBTEVSVCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYWxlcnQubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmFsZXJ0ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQUxFUlQgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuYWxlcnQuZGF0YS1hcGknLCBkaXNtaXNzLCBBbGVydC5wcm90b3R5cGUuY2xvc2UpXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGJ1dHRvbi5qcyB2My4zLjZcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2J1dHRvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBCVVRUT04gUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIEJ1dHRvbiA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgPSAkLmV4dGVuZCh7fSwgQnV0dG9uLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgfVxuXG4gIEJ1dHRvbi5WRVJTSU9OICA9ICczLjMuNidcblxuICBCdXR0b24uREVGQVVMVFMgPSB7XG4gICAgbG9hZGluZ1RleHQ6ICdsb2FkaW5nLi4uJ1xuICB9XG5cbiAgQnV0dG9uLnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHZhciBkICAgID0gJ2Rpc2FibGVkJ1xuICAgIHZhciAkZWwgID0gdGhpcy4kZWxlbWVudFxuICAgIHZhciB2YWwgID0gJGVsLmlzKCdpbnB1dCcpID8gJ3ZhbCcgOiAnaHRtbCdcbiAgICB2YXIgZGF0YSA9ICRlbC5kYXRhKClcblxuICAgIHN0YXRlICs9ICdUZXh0J1xuXG4gICAgaWYgKGRhdGEucmVzZXRUZXh0ID09IG51bGwpICRlbC5kYXRhKCdyZXNldFRleHQnLCAkZWxbdmFsXSgpKVxuXG4gICAgLy8gcHVzaCB0byBldmVudCBsb29wIHRvIGFsbG93IGZvcm1zIHRvIHN1Ym1pdFxuICAgIHNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAkZWxbdmFsXShkYXRhW3N0YXRlXSA9PSBudWxsID8gdGhpcy5vcHRpb25zW3N0YXRlXSA6IGRhdGFbc3RhdGVdKVxuXG4gICAgICBpZiAoc3RhdGUgPT0gJ2xvYWRpbmdUZXh0Jykge1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWVcbiAgICAgICAgJGVsLmFkZENsYXNzKGQpLmF0dHIoZCwgZClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoZCkucmVtb3ZlQXR0cihkKVxuICAgICAgfVxuICAgIH0sIHRoaXMpLCAwKVxuICB9XG5cbiAgQnV0dG9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNoYW5nZWQgPSB0cnVlXG4gICAgdmFyICRwYXJlbnQgPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nKVxuXG4gICAgaWYgKCRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICB2YXIgJGlucHV0ID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCcpXG4gICAgICBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAncmFkaW8nKSB7XG4gICAgICAgIGlmICgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSBjaGFuZ2VkID0gZmFsc2VcbiAgICAgICAgJHBhcmVudC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9IGVsc2UgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ2NoZWNrYm94Jykge1xuICAgICAgICBpZiAoKCRpbnB1dC5wcm9wKCdjaGVja2VkJykpICE9PSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgICAkaW5wdXQucHJvcCgnY2hlY2tlZCcsIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKVxuICAgICAgaWYgKGNoYW5nZWQpICRpbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcbiAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuICB9XG5cblxuICAvLyBCVVRUT04gUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYnV0dG9uJywgKGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMsIG9wdGlvbnMpKSlcblxuICAgICAgaWYgKG9wdGlvbiA9PSAndG9nZ2xlJykgZGF0YS50b2dnbGUoKVxuICAgICAgZWxzZSBpZiAob3B0aW9uKSBkYXRhLnNldFN0YXRlKG9wdGlvbilcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYnV0dG9uXG5cbiAgJC5mbi5idXR0b24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5idXR0b24uQ29uc3RydWN0b3IgPSBCdXR0b25cblxuXG4gIC8vIEJVVFRPTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmJ1dHRvbi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYnV0dG9uID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQlVUVE9OIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgJGJ0biA9ICQoZS50YXJnZXQpXG4gICAgICBpZiAoISRidG4uaGFzQ2xhc3MoJ2J0bicpKSAkYnRuID0gJGJ0bi5jbG9zZXN0KCcuYnRuJylcbiAgICAgIFBsdWdpbi5jYWxsKCRidG4sICd0b2dnbGUnKVxuICAgICAgaWYgKCEoJChlLnRhcmdldCkuaXMoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpIHx8ICQoZS50YXJnZXQpLmlzKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKSkpIGUucHJldmVudERlZmF1bHQoKVxuICAgIH0pXG4gICAgLm9uKCdmb2N1cy5icy5idXR0b24uZGF0YS1hcGkgYmx1ci5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJykudG9nZ2xlQ2xhc3MoJ2ZvY3VzJywgL15mb2N1cyhpbik/JC8udGVzdChlLnR5cGUpKVxuICAgIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNhcm91c2VsLmpzIHYzLjMuNlxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY2Fyb3VzZWxcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDQVJPVVNFTCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy4kaW5kaWNhdG9ycyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmNhcm91c2VsLWluZGljYXRvcnMnKVxuICAgIHRoaXMub3B0aW9ucyAgICAgPSBvcHRpb25zXG4gICAgdGhpcy5wYXVzZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnNsaWRpbmcgICAgID0gbnVsbFxuICAgIHRoaXMuaW50ZXJ2YWwgICAgPSBudWxsXG4gICAgdGhpcy4kYWN0aXZlICAgICA9IG51bGxcbiAgICB0aGlzLiRpdGVtcyAgICAgID0gbnVsbFxuXG4gICAgdGhpcy5vcHRpb25zLmtleWJvYXJkICYmIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcykpXG5cbiAgICB0aGlzLm9wdGlvbnMucGF1c2UgPT0gJ2hvdmVyJyAmJiAhKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgJiYgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uKCdtb3VzZWVudGVyLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLnBhdXNlLCB0aGlzKSlcbiAgICAgIC5vbignbW91c2VsZWF2ZS5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5jeWNsZSwgdGhpcykpXG4gIH1cblxuICBDYXJvdXNlbC5WRVJTSU9OICA9ICczLjMuNidcblxuICBDYXJvdXNlbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gNjAwXG5cbiAgQ2Fyb3VzZWwuREVGQVVMVFMgPSB7XG4gICAgaW50ZXJ2YWw6IDUwMDAsXG4gICAgcGF1c2U6ICdob3ZlcicsXG4gICAgd3JhcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm5cbiAgICBzd2l0Y2ggKGUud2hpY2gpIHtcbiAgICAgIGNhc2UgMzc6IHRoaXMucHJldigpOyBicmVha1xuICAgICAgY2FzZSAzOTogdGhpcy5uZXh0KCk7IGJyZWFrXG4gICAgICBkZWZhdWx0OiByZXR1cm5cbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5jeWNsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSBmYWxzZSlcblxuICAgIHRoaXMuaW50ZXJ2YWwgJiYgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKVxuXG4gICAgdGhpcy5vcHRpb25zLmludGVydmFsXG4gICAgICAmJiAhdGhpcy5wYXVzZWRcbiAgICAgICYmICh0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoJC5wcm94eSh0aGlzLm5leHQsIHRoaXMpLCB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwpKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHRoaXMuJGl0ZW1zID0gaXRlbS5wYXJlbnQoKS5jaGlsZHJlbignLml0ZW0nKVxuICAgIHJldHVybiB0aGlzLiRpdGVtcy5pbmRleChpdGVtIHx8IHRoaXMuJGFjdGl2ZSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5nZXRJdGVtRm9yRGlyZWN0aW9uID0gZnVuY3Rpb24gKGRpcmVjdGlvbiwgYWN0aXZlKSB7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgoYWN0aXZlKVxuICAgIHZhciB3aWxsV3JhcCA9IChkaXJlY3Rpb24gPT0gJ3ByZXYnICYmIGFjdGl2ZUluZGV4ID09PSAwKVxuICAgICAgICAgICAgICAgIHx8IChkaXJlY3Rpb24gPT0gJ25leHQnICYmIGFjdGl2ZUluZGV4ID09ICh0aGlzLiRpdGVtcy5sZW5ndGggLSAxKSlcbiAgICBpZiAod2lsbFdyYXAgJiYgIXRoaXMub3B0aW9ucy53cmFwKSByZXR1cm4gYWN0aXZlXG4gICAgdmFyIGRlbHRhID0gZGlyZWN0aW9uID09ICdwcmV2JyA/IC0xIDogMVxuICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLiRpdGVtcy5sZW5ndGhcbiAgICByZXR1cm4gdGhpcy4kaXRlbXMuZXEoaXRlbUluZGV4KVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnRvID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciB0aGF0ICAgICAgICA9IHRoaXNcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleCh0aGlzLiRhY3RpdmUgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtLmFjdGl2ZScpKVxuXG4gICAgaWYgKHBvcyA+ICh0aGlzLiRpdGVtcy5sZW5ndGggLSAxKSB8fCBwb3MgPCAwKSByZXR1cm5cblxuICAgIGlmICh0aGlzLnNsaWRpbmcpICAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50Lm9uZSgnc2xpZC5icy5jYXJvdXNlbCcsIGZ1bmN0aW9uICgpIHsgdGhhdC50byhwb3MpIH0pIC8vIHllcywgXCJzbGlkXCJcbiAgICBpZiAoYWN0aXZlSW5kZXggPT0gcG9zKSByZXR1cm4gdGhpcy5wYXVzZSgpLmN5Y2xlKClcblxuICAgIHJldHVybiB0aGlzLnNsaWRlKHBvcyA+IGFjdGl2ZUluZGV4ID8gJ25leHQnIDogJ3ByZXYnLCB0aGlzLiRpdGVtcy5lcShwb3MpKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlIHx8ICh0aGlzLnBhdXNlZCA9IHRydWUpXG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5maW5kKCcubmV4dCwgLnByZXYnKS5sZW5ndGggJiYgJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpXG4gICAgICB0aGlzLmN5Y2xlKHRydWUpXG4gICAgfVxuXG4gICAgdGhpcy5pbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5zbGlkaW5nKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zbGlkZSgnbmV4dCcpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5zbGlkaW5nKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zbGlkZSgncHJldicpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuc2xpZGUgPSBmdW5jdGlvbiAodHlwZSwgbmV4dCkge1xuICAgIHZhciAkYWN0aXZlICAgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtLmFjdGl2ZScpXG4gICAgdmFyICRuZXh0ICAgICA9IG5leHQgfHwgdGhpcy5nZXRJdGVtRm9yRGlyZWN0aW9uKHR5cGUsICRhY3RpdmUpXG4gICAgdmFyIGlzQ3ljbGluZyA9IHRoaXMuaW50ZXJ2YWxcbiAgICB2YXIgZGlyZWN0aW9uID0gdHlwZSA9PSAnbmV4dCcgPyAnbGVmdCcgOiAncmlnaHQnXG4gICAgdmFyIHRoYXQgICAgICA9IHRoaXNcblxuICAgIGlmICgkbmV4dC5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVybiAodGhpcy5zbGlkaW5nID0gZmFsc2UpXG5cbiAgICB2YXIgcmVsYXRlZFRhcmdldCA9ICRuZXh0WzBdXG4gICAgdmFyIHNsaWRlRXZlbnQgPSAkLkV2ZW50KCdzbGlkZS5icy5jYXJvdXNlbCcsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgIH0pXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHNsaWRlRXZlbnQpXG4gICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdGhpcy5zbGlkaW5nID0gdHJ1ZVxuXG4gICAgaXNDeWNsaW5nICYmIHRoaXMucGF1c2UoKVxuXG4gICAgaWYgKHRoaXMuJGluZGljYXRvcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRpbmRpY2F0b3JzLmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgIHZhciAkbmV4dEluZGljYXRvciA9ICQodGhpcy4kaW5kaWNhdG9ycy5jaGlsZHJlbigpW3RoaXMuZ2V0SXRlbUluZGV4KCRuZXh0KV0pXG4gICAgICAkbmV4dEluZGljYXRvciAmJiAkbmV4dEluZGljYXRvci5hZGRDbGFzcygnYWN0aXZlJylcbiAgICB9XG5cbiAgICB2YXIgc2xpZEV2ZW50ID0gJC5FdmVudCgnc2xpZC5icy5jYXJvdXNlbCcsIHsgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCwgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfSkgLy8geWVzLCBcInNsaWRcIlxuICAgIGlmICgkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdzbGlkZScpKSB7XG4gICAgICAkbmV4dC5hZGRDbGFzcyh0eXBlKVxuICAgICAgJG5leHRbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG4gICAgICAkYWN0aXZlLmFkZENsYXNzKGRpcmVjdGlvbilcbiAgICAgICRuZXh0LmFkZENsYXNzKGRpcmVjdGlvbilcbiAgICAgICRhY3RpdmVcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRuZXh0LnJlbW92ZUNsYXNzKFt0eXBlLCBkaXJlY3Rpb25dLmpvaW4oJyAnKSkuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcyhbJ2FjdGl2ZScsIGRpcmVjdGlvbl0uam9pbignICcpKVxuICAgICAgICAgIHRoYXQuc2xpZGluZyA9IGZhbHNlXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoc2xpZEV2ZW50KVxuICAgICAgICAgIH0sIDApXG4gICAgICAgIH0pXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDYXJvdXNlbC5UUkFOU0lUSU9OX0RVUkFUSU9OKVxuICAgIH0gZWxzZSB7XG4gICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgJG5leHQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB0aGlzLnNsaWRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudClcbiAgICB9XG5cbiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDQVJPVVNFTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDYXJvdXNlbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcbiAgICAgIHZhciBhY3Rpb24gID0gdHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyA/IG9wdGlvbiA6IG9wdGlvbnMuc2xpZGVcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcsIChkYXRhID0gbmV3IENhcm91c2VsKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdudW1iZXInKSBkYXRhLnRvKG9wdGlvbilcbiAgICAgIGVsc2UgaWYgKGFjdGlvbikgZGF0YVthY3Rpb25dKClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbnMuaW50ZXJ2YWwpIGRhdGEucGF1c2UoKS5jeWNsZSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmNhcm91c2VsXG5cbiAgJC5mbi5jYXJvdXNlbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmNhcm91c2VsLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWxcblxuXG4gIC8vIENBUk9VU0VMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5jYXJvdXNlbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uY2Fyb3VzZWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDQVJPVVNFTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBocmVmXG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyICR0YXJnZXQgPSAkKCR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgKGhyZWYgPSAkdGhpcy5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgaWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKCdjYXJvdXNlbCcpKSByZXR1cm5cbiAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKVxuICAgIHZhciBzbGlkZUluZGV4ID0gJHRoaXMuYXR0cignZGF0YS1zbGlkZS10bycpXG4gICAgaWYgKHNsaWRlSW5kZXgpIG9wdGlvbnMuaW50ZXJ2YWwgPSBmYWxzZVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9ucylcblxuICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAkdGFyZ2V0LmRhdGEoJ2JzLmNhcm91c2VsJykudG8oc2xpZGVJbmRleClcbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaScsICdbZGF0YS1zbGlkZV0nLCBjbGlja0hhbmRsZXIpXG4gICAgLm9uKCdjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaScsICdbZGF0YS1zbGlkZS10b10nLCBjbGlja0hhbmRsZXIpXG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRjYXJvdXNlbCA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSlcbiAgICB9KVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBjb2xsYXBzZS5qcyB2My4zLjZcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2NvbGxhcHNlXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ09MTEFQU0UgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQ29sbGFwc2UgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgPSAkLmV4dGVuZCh7fSwgQ29sbGFwc2UuREVGQVVMVFMsIG9wdGlvbnMpXG4gICAgdGhpcy4kdHJpZ2dlciAgICAgID0gJCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1baHJlZj1cIiMnICsgZWxlbWVudC5pZCArICdcIl0sJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS10YXJnZXQ9XCIjJyArIGVsZW1lbnQuaWQgKyAnXCJdJylcbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSBudWxsXG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnBhcmVudCkge1xuICAgICAgdGhpcy4kcGFyZW50ID0gdGhpcy5nZXRQYXJlbnQoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLiRlbGVtZW50LCB0aGlzLiR0cmlnZ2VyKVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMudG9nZ2xlKSB0aGlzLnRvZ2dsZSgpXG4gIH1cblxuICBDb2xsYXBzZS5WRVJTSU9OICA9ICczLjMuNidcblxuICBDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzUwXG5cbiAgQ29sbGFwc2UuREVGQVVMVFMgPSB7XG4gICAgdG9nZ2xlOiB0cnVlXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuZGltZW5zaW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYXNXaWR0aCA9IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ3dpZHRoJylcbiAgICByZXR1cm4gaGFzV2lkdGggPyAnd2lkdGgnIDogJ2hlaWdodCdcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnRyYW5zaXRpb25pbmcgfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSkgcmV0dXJuXG5cbiAgICB2YXIgYWN0aXZlc0RhdGFcbiAgICB2YXIgYWN0aXZlcyA9IHRoaXMuJHBhcmVudCAmJiB0aGlzLiRwYXJlbnQuY2hpbGRyZW4oJy5wYW5lbCcpLmNoaWxkcmVuKCcuaW4sIC5jb2xsYXBzaW5nJylcblxuICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICBhY3RpdmVzRGF0YSA9IGFjdGl2ZXMuZGF0YSgnYnMuY29sbGFwc2UnKVxuICAgICAgaWYgKGFjdGl2ZXNEYXRhICYmIGFjdGl2ZXNEYXRhLnRyYW5zaXRpb25pbmcpIHJldHVyblxuICAgIH1cblxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnc2hvdy5icy5jb2xsYXBzZScpXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgaWYgKGFjdGl2ZXMgJiYgYWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIFBsdWdpbi5jYWxsKGFjdGl2ZXMsICdoaWRlJylcbiAgICAgIGFjdGl2ZXNEYXRhIHx8IGFjdGl2ZXMuZGF0YSgnYnMuY29sbGFwc2UnLCBudWxsKVxuICAgIH1cblxuICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLmRpbWVuc2lvbigpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlJylcbiAgICAgIC5hZGRDbGFzcygnY29sbGFwc2luZycpW2RpbWVuc2lvbl0oMClcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcblxuICAgIHRoaXMuJHRyaWdnZXJcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2VkJylcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcblxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDFcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZSBpbicpW2RpbWVuc2lvbl0oJycpXG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAwXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC50cmlnZ2VyKCdzaG93bi5icy5jb2xsYXBzZScpXG4gICAgfVxuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuIGNvbXBsZXRlLmNhbGwodGhpcylcblxuICAgIHZhciBzY3JvbGxTaXplID0gJC5jYW1lbENhc2UoWydzY3JvbGwnLCBkaW1lbnNpb25dLmpvaW4oJy0nKSlcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkoY29tcGxldGUsIHRoaXMpKVxuICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04pW2RpbWVuc2lvbl0odGhpcy4kZWxlbWVudFswXVtzY3JvbGxTaXplXSlcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnRyYW5zaXRpb25pbmcgfHwgIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxuXG4gICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KCdoaWRlLmJzLmNvbGxhcHNlJylcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc3RhcnRFdmVudClcbiAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxuXG4gICAgdGhpcy4kZWxlbWVudFtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSgpKVswXS5vZmZzZXRIZWlnaHRcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5hZGRDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlIGluJylcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG5cbiAgICB0aGlzLiR0cmlnZ2VyXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlZCcpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMVxuXG4gICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlJylcbiAgICAgICAgLnRyaWdnZXIoJ2hpZGRlbi5icy5jb2xsYXBzZScpXG4gICAgfVxuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuIGNvbXBsZXRlLmNhbGwodGhpcylcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIFtkaW1lbnNpb25dKDApXG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzW3RoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykgPyAnaGlkZScgOiAnc2hvdyddKClcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5nZXRQYXJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICQodGhpcy5vcHRpb25zLnBhcmVudClcbiAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXBhcmVudD1cIicgKyB0aGlzLm9wdGlvbnMucGFyZW50ICsgJ1wiXScpXG4gICAgICAuZWFjaCgkLnByb3h5KGZ1bmN0aW9uIChpLCBlbGVtZW50KSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudClcbiAgICAgICAgdGhpcy5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJGVsZW1lbnQpLCAkZWxlbWVudClcbiAgICAgIH0sIHRoaXMpKVxuICAgICAgLmVuZCgpXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzID0gZnVuY3Rpb24gKCRlbGVtZW50LCAkdHJpZ2dlcikge1xuICAgIHZhciBpc09wZW4gPSAkZWxlbWVudC5oYXNDbGFzcygnaW4nKVxuXG4gICAgJGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3BlbilcbiAgICAkdHJpZ2dlclxuICAgICAgLnRvZ2dsZUNsYXNzKCdjb2xsYXBzZWQnLCAhaXNPcGVuKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gIH1cblxuICBmdW5jdGlvbiBnZXRUYXJnZXRGcm9tVHJpZ2dlcigkdHJpZ2dlcikge1xuICAgIHZhciBocmVmXG4gICAgdmFyIHRhcmdldCA9ICR0cmlnZ2VyLmF0dHIoJ2RhdGEtdGFyZ2V0JylcbiAgICAgIHx8IChocmVmID0gJHRyaWdnZXIuYXR0cignaHJlZicpKSAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG5cbiAgICByZXR1cm4gJCh0YXJnZXQpXG4gIH1cblxuXG4gIC8vIENPTExBUFNFIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKVxuXG4gICAgICBpZiAoIWRhdGEgJiYgb3B0aW9ucy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChvcHRpb24pKSBvcHRpb25zLnRvZ2dsZSA9IGZhbHNlXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmNvbGxhcHNlJywgKGRhdGEgPSBuZXcgQ29sbGFwc2UodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmNvbGxhcHNlXG5cbiAgJC5mbi5jb2xsYXBzZSAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmNvbGxhcHNlLkNvbnN0cnVjdG9yID0gQ29sbGFwc2VcblxuXG4gIC8vIENPTExBUFNFIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5jb2xsYXBzZS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uY29sbGFwc2UgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDT0xMQVBTRSBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5jb2xsYXBzZS5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG5cbiAgICBpZiAoISR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykpIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgdmFyICR0YXJnZXQgPSBnZXRUYXJnZXRGcm9tVHJpZ2dlcigkdGhpcylcbiAgICB2YXIgZGF0YSAgICA9ICR0YXJnZXQuZGF0YSgnYnMuY29sbGFwc2UnKVxuICAgIHZhciBvcHRpb24gID0gZGF0YSA/ICd0b2dnbGUnIDogJHRoaXMuZGF0YSgpXG5cbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb24pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGRyb3Bkb3duLmpzIHYzLjMuNlxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jZHJvcGRvd25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gRFJPUERPV04gQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGJhY2tkcm9wID0gJy5kcm9wZG93bi1iYWNrZHJvcCdcbiAgdmFyIHRvZ2dsZSAgID0gJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJ1xuICB2YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICQoZWxlbWVudCkub24oJ2NsaWNrLmJzLmRyb3Bkb3duJywgdGhpcy50b2dnbGUpXG4gIH1cblxuICBEcm9wZG93bi5WRVJTSU9OID0gJzMuMy42J1xuXG4gIGZ1bmN0aW9uIGdldFBhcmVudCgkdGhpcykge1xuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIC8jW0EtWmEtel0vLnRlc3Qoc2VsZWN0b3IpICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgfVxuXG4gICAgdmFyICRwYXJlbnQgPSBzZWxlY3RvciAmJiAkKHNlbGVjdG9yKVxuXG4gICAgcmV0dXJuICRwYXJlbnQgJiYgJHBhcmVudC5sZW5ndGggPyAkcGFyZW50IDogJHRoaXMucGFyZW50KClcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyTWVudXMoZSkge1xuICAgIGlmIChlICYmIGUud2hpY2ggPT09IDMpIHJldHVyblxuICAgICQoYmFja2Ryb3ApLnJlbW92ZSgpXG4gICAgJCh0b2dnbGUpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgICAgICAgPSAkKHRoaXMpXG4gICAgICB2YXIgJHBhcmVudCAgICAgICA9IGdldFBhcmVudCgkdGhpcylcbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0geyByZWxhdGVkVGFyZ2V0OiB0aGlzIH1cblxuICAgICAgaWYgKCEkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJykpIHJldHVyblxuXG4gICAgICBpZiAoZSAmJiBlLnR5cGUgPT0gJ2NsaWNrJyAmJiAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpICYmICQuY29udGFpbnMoJHBhcmVudFswXSwgZS50YXJnZXQpKSByZXR1cm5cblxuICAgICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdoaWRlLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICAgJHRoaXMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG4gICAgICAkcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuJykudHJpZ2dlcigkLkV2ZW50KCdoaWRkZW4uYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcbiAgICB9KVxuICB9XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzID0gJCh0aGlzKVxuXG4gICAgaWYgKCR0aGlzLmlzKCcuZGlzYWJsZWQsIDpkaXNhYmxlZCcpKSByZXR1cm5cblxuICAgIHZhciAkcGFyZW50ICA9IGdldFBhcmVudCgkdGhpcylcbiAgICB2YXIgaXNBY3RpdmUgPSAkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJylcblxuICAgIGNsZWFyTWVudXMoKVxuXG4gICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAhJHBhcmVudC5jbG9zZXN0KCcubmF2YmFyLW5hdicpLmxlbmd0aCkge1xuICAgICAgICAvLyBpZiBtb2JpbGUgd2UgdXNlIGEgYmFja2Ryb3AgYmVjYXVzZSBjbGljayBldmVudHMgZG9uJ3QgZGVsZWdhdGVcbiAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJhY2tkcm9wJylcbiAgICAgICAgICAuaW5zZXJ0QWZ0ZXIoJCh0aGlzKSlcbiAgICAgICAgICAub24oJ2NsaWNrJywgY2xlYXJNZW51cylcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfVxuICAgICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdzaG93LmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICAgJHRoaXNcbiAgICAgICAgLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpXG5cbiAgICAgICRwYXJlbnRcbiAgICAgICAgLnRvZ2dsZUNsYXNzKCdvcGVuJylcbiAgICAgICAgLnRyaWdnZXIoJC5FdmVudCgnc2hvd24uYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoIS8oMzh8NDB8Mjd8MzIpLy50ZXN0KGUud2hpY2gpIHx8IC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVyblxuXG4gICAgdmFyICR0aGlzID0gJCh0aGlzKVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgaWYgKCR0aGlzLmlzKCcuZGlzYWJsZWQsIDpkaXNhYmxlZCcpKSByZXR1cm5cblxuICAgIHZhciAkcGFyZW50ICA9IGdldFBhcmVudCgkdGhpcylcbiAgICB2YXIgaXNBY3RpdmUgPSAkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJylcblxuICAgIGlmICghaXNBY3RpdmUgJiYgZS53aGljaCAhPSAyNyB8fCBpc0FjdGl2ZSAmJiBlLndoaWNoID09IDI3KSB7XG4gICAgICBpZiAoZS53aGljaCA9PSAyNykgJHBhcmVudC5maW5kKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKVxuICAgICAgcmV0dXJuICR0aGlzLnRyaWdnZXIoJ2NsaWNrJylcbiAgICB9XG5cbiAgICB2YXIgZGVzYyA9ICcgbGk6bm90KC5kaXNhYmxlZCk6dmlzaWJsZSBhJ1xuICAgIHZhciAkaXRlbXMgPSAkcGFyZW50LmZpbmQoJy5kcm9wZG93bi1tZW51JyArIGRlc2MpXG5cbiAgICBpZiAoISRpdGVtcy5sZW5ndGgpIHJldHVyblxuXG4gICAgdmFyIGluZGV4ID0gJGl0ZW1zLmluZGV4KGUudGFyZ2V0KVxuXG4gICAgaWYgKGUud2hpY2ggPT0gMzggJiYgaW5kZXggPiAwKSAgICAgICAgICAgICAgICAgaW5kZXgtLSAgICAgICAgIC8vIHVwXG4gICAgaWYgKGUud2hpY2ggPT0gNDAgJiYgaW5kZXggPCAkaXRlbXMubGVuZ3RoIC0gMSkgaW5kZXgrKyAgICAgICAgIC8vIGRvd25cbiAgICBpZiAoIX5pbmRleCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDBcblxuICAgICRpdGVtcy5lcShpbmRleCkudHJpZ2dlcignZm9jdXMnKVxuICB9XG5cblxuICAvLyBEUk9QRE9XTiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLmRyb3Bkb3duJylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5kcm9wZG93bicsIChkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcylcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uZHJvcGRvd25cblxuICAkLmZuLmRyb3Bkb3duICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uZHJvcGRvd24uQ29uc3RydWN0b3IgPSBEcm9wZG93blxuXG5cbiAgLy8gRFJPUERPV04gTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmRyb3Bkb3duLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5kcm9wZG93biA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFQUExZIFRPIFNUQU5EQVJEIERST1BET1dOIEVMRU1FTlRTXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgY2xlYXJNZW51cylcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgJy5kcm9wZG93biBmb3JtJywgZnVuY3Rpb24gKGUpIHsgZS5zdG9wUHJvcGFnYXRpb24oKSB9KVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCB0b2dnbGUsIERyb3Bkb3duLnByb3RvdHlwZS50b2dnbGUpXG4gICAgLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93bilcbiAgICAub24oJ2tleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duLW1lbnUnLCBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93bilcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogbW9kYWwuanMgdjMuMy42XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNtb2RhbHNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBNT0RBTCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgTW9kYWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyAgICAgICAgICAgICA9IG9wdGlvbnNcbiAgICB0aGlzLiRib2R5ICAgICAgICAgICAgICAgPSAkKGRvY3VtZW50LmJvZHkpXG4gICAgdGhpcy4kZWxlbWVudCAgICAgICAgICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMuJGRpYWxvZyAgICAgICAgICAgICA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLm1vZGFsLWRpYWxvZycpXG4gICAgdGhpcy4kYmFja2Ryb3AgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuaXNTaG93biAgICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLm9yaWdpbmFsQm9keVBhZCAgICAgPSBudWxsXG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCAgICAgID0gMFxuICAgIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlbW90ZSkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAuZmluZCgnLm1vZGFsLWNvbnRlbnQnKVxuICAgICAgICAubG9hZCh0aGlzLm9wdGlvbnMucmVtb3RlLCAkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2xvYWRlZC5icy5tb2RhbCcpXG4gICAgICAgIH0sIHRoaXMpKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLlZFUlNJT04gID0gJzMuMy42J1xuXG4gIE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDBcbiAgTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MFxuXG4gIE1vZGFsLkRFRkFVTFRTID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNob3c6IHRydWVcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIChfcmVsYXRlZFRhcmdldCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBlICAgID0gJC5FdmVudCgnc2hvdy5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKHRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuaXNTaG93biA9IHRydWVcblxuICAgIHRoaXMuY2hlY2tTY3JvbGxiYXIoKVxuICAgIHRoaXMuc2V0U2Nyb2xsYmFyKClcbiAgICB0aGlzLiRib2R5LmFkZENsYXNzKCdtb2RhbC1vcGVuJylcblxuICAgIHRoaXMuZXNjYXBlKClcbiAgICB0aGlzLnJlc2l6ZSgpXG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsICQucHJveHkodGhpcy5oaWRlLCB0aGlzKSlcblxuICAgIHRoaXMuJGRpYWxvZy5vbignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LiRlbGVtZW50Lm9uZSgnbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoYXQuJGVsZW1lbnQpKSB0aGF0Lmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhhdC4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpXG5cbiAgICAgIGlmICghdGhhdC4kZWxlbWVudC5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudC5hcHBlbmRUbyh0aGF0LiRib2R5KSAvLyBkb24ndCBtb3ZlIG1vZGFscyBkb20gcG9zaXRpb25cbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAuc2hvdygpXG4gICAgICAgIC5zY3JvbGxUb3AoMClcblxuICAgICAgdGhhdC5hZGp1c3REaWFsb2coKVxuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB0aGF0LiRlbGVtZW50WzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuICAgICAgfVxuXG4gICAgICB0aGF0LiRlbGVtZW50LmFkZENsYXNzKCdpbicpXG5cbiAgICAgIHRoYXQuZW5mb3JjZUZvY3VzKClcblxuICAgICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93bi5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgICAgdHJhbnNpdGlvbiA/XG4gICAgICAgIHRoYXQuJGRpYWxvZyAvLyB3YWl0IGZvciBtb2RhbCB0byBzbGlkZSBpblxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgZSA9ICQuRXZlbnQoJ2hpZGUuYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoIXRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuaXNTaG93biA9IGZhbHNlXG5cbiAgICB0aGlzLmVzY2FwZSgpXG4gICAgdGhpcy5yZXNpemUoKVxuXG4gICAgJChkb2N1bWVudCkub2ZmKCdmb2N1c2luLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5yZW1vdmVDbGFzcygnaW4nKVxuICAgICAgLm9mZignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgICAub2ZmKCdtb3VzZXVwLmRpc21pc3MuYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZGlhbG9nLm9mZignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnKVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eSh0aGlzLmhpZGVNb2RhbCwgdGhpcykpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICB0aGlzLmhpZGVNb2RhbCgpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICQoZG9jdW1lbnQpXG4gICAgICAub2ZmKCdmb2N1c2luLmJzLm1vZGFsJykgLy8gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG4gICAgICAub24oJ2ZvY3VzaW4uYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aGlzLiRlbGVtZW50WzBdICE9PSBlLnRhcmdldCAmJiAhdGhpcy4kZWxlbWVudC5oYXMoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKVxuICAgICAgICB9XG4gICAgICB9LCB0aGlzKSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5lc2NhcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNTaG93biAmJiB0aGlzLm9wdGlvbnMua2V5Ym9hcmQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS53aGljaCA9PSAyNyAmJiB0aGlzLmhpZGUoKVxuICAgICAgfSwgdGhpcykpXG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1Nob3duKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZigna2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcbiAgICB9XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2hvd24pIHtcbiAgICAgICQod2luZG93KS5vbigncmVzaXplLmJzLm1vZGFsJywgJC5wcm94eSh0aGlzLmhhbmRsZVVwZGF0ZSwgdGhpcykpXG4gICAgfSBlbHNlIHtcbiAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5icy5tb2RhbCcpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmhpZGVNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB0aGlzLiRlbGVtZW50LmhpZGUoKVxuICAgIHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kYm9keS5yZW1vdmVDbGFzcygnbW9kYWwtb3BlbicpXG4gICAgICB0aGF0LnJlc2V0QWRqdXN0bWVudHMoKVxuICAgICAgdGhhdC5yZXNldFNjcm9sbGJhcigpXG4gICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2hpZGRlbi5icy5tb2RhbCcpXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZW1vdmVCYWNrZHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRiYWNrZHJvcCAmJiB0aGlzLiRiYWNrZHJvcC5yZW1vdmUoKVxuICAgIHRoaXMuJGJhY2tkcm9wID0gbnVsbFxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmJhY2tkcm9wID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdmFyIGFuaW1hdGUgPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgPyAnZmFkZScgOiAnJ1xuXG4gICAgaWYgKHRoaXMuaXNTaG93biAmJiB0aGlzLm9wdGlvbnMuYmFja2Ryb3ApIHtcbiAgICAgIHZhciBkb0FuaW1hdGUgPSAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiBhbmltYXRlXG5cbiAgICAgIHRoaXMuJGJhY2tkcm9wID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcbiAgICAgICAgLmFkZENsYXNzKCdtb2RhbC1iYWNrZHJvcCAnICsgYW5pbWF0ZSlcbiAgICAgICAgLmFwcGVuZFRvKHRoaXMuJGJvZHkpXG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICB0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmIChlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSByZXR1cm5cbiAgICAgICAgdGhpcy5vcHRpb25zLmJhY2tkcm9wID09ICdzdGF0aWMnXG4gICAgICAgICAgPyB0aGlzLiRlbGVtZW50WzBdLmZvY3VzKClcbiAgICAgICAgICA6IHRoaXMuaGlkZSgpXG4gICAgICB9LCB0aGlzKSlcblxuICAgICAgaWYgKGRvQW5pbWF0ZSkgdGhpcy4kYmFja2Ryb3BbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG5cbiAgICAgIHRoaXMuJGJhY2tkcm9wLmFkZENsYXNzKCdpbicpXG5cbiAgICAgIGlmICghY2FsbGJhY2spIHJldHVyblxuXG4gICAgICBkb0FuaW1hdGUgP1xuICAgICAgICB0aGlzLiRiYWNrZHJvcFxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNhbGxiYWNrKClcblxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93biAmJiB0aGlzLiRiYWNrZHJvcCkge1xuICAgICAgdGhpcy4kYmFja2Ryb3AucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGF0LnJlbW92ZUJhY2tkcm9wKClcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgICAgfVxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFja1JlbW92ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjYWxsYmFja1JlbW92ZSgpXG5cbiAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgLy8gdGhlc2UgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuXG4gIE1vZGFsLnByb3RvdHlwZS5oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hZGp1c3REaWFsb2coKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmFkanVzdERpYWxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbW9kYWxJc092ZXJmbG93aW5nID0gdGhpcy4kZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICBwYWRkaW5nTGVmdDogICF0aGlzLmJvZHlJc092ZXJmbG93aW5nICYmIG1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJyxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiAhbW9kYWxJc092ZXJmbG93aW5nID8gdGhpcy5zY3JvbGxiYXJXaWR0aCA6ICcnXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNldEFkanVzdG1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAnJyxcbiAgICAgIHBhZGRpbmdSaWdodDogJydcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmNoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBmdWxsV2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgIGlmICghZnVsbFdpbmRvd1dpZHRoKSB7IC8vIHdvcmthcm91bmQgZm9yIG1pc3Npbmcgd2luZG93LmlubmVyV2lkdGggaW4gSUU4XG4gICAgICB2YXIgZG9jdW1lbnRFbGVtZW50UmVjdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgZnVsbFdpbmRvd1dpZHRoID0gZG9jdW1lbnRFbGVtZW50UmVjdC5yaWdodCAtIE1hdGguYWJzKGRvY3VtZW50RWxlbWVudFJlY3QubGVmdClcbiAgICB9XG4gICAgdGhpcy5ib2R5SXNPdmVyZmxvd2luZyA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPCBmdWxsV2luZG93V2lkdGhcbiAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gdGhpcy5tZWFzdXJlU2Nyb2xsYmFyKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5zZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvZHlQYWQgPSBwYXJzZUludCgodGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnKSB8fCAwKSwgMTApXG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCB8fCAnJ1xuICAgIGlmICh0aGlzLmJvZHlJc092ZXJmbG93aW5nKSB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIGJvZHlQYWQgKyB0aGlzLnNjcm9sbGJhcldpZHRoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgdGhpcy5vcmlnaW5hbEJvZHlQYWQpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUubWVhc3VyZVNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHsgLy8gdGh4IHdhbHNoXG4gICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZSdcbiAgICB0aGlzLiRib2R5LmFwcGVuZChzY3JvbGxEaXYpXG4gICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoXG4gICAgdGhpcy4kYm9keVswXS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpXG4gICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoXG4gIH1cblxuXG4gIC8vIE1PREFMIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbiwgX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5tb2RhbCcpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBNb2RhbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5tb2RhbCcsIChkYXRhID0gbmV3IE1vZGFsKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oX3JlbGF0ZWRUYXJnZXQpXG4gICAgICBlbHNlIGlmIChvcHRpb25zLnNob3cpIGRhdGEuc2hvdyhfcmVsYXRlZFRhcmdldClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ubW9kYWxcblxuICAkLmZuLm1vZGFsICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4ubW9kYWwuQ29uc3RydWN0b3IgPSBNb2RhbFxuXG5cbiAgLy8gTU9EQUwgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLm1vZGFsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5tb2RhbCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIE1PREFMIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLm1vZGFsLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICB2YXIgaHJlZiAgICA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgIHZhciAkdGFyZ2V0ID0gJCgkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpIHx8IChocmVmICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKSkgLy8gc3RyaXAgZm9yIGllN1xuICAgIHZhciBvcHRpb24gID0gJHRhcmdldC5kYXRhKCdicy5tb2RhbCcpID8gJ3RvZ2dsZScgOiAkLmV4dGVuZCh7IHJlbW90ZTogIS8jLy50ZXN0KGhyZWYpICYmIGhyZWYgfSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSlcblxuICAgIGlmICgkdGhpcy5pcygnYScpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICR0YXJnZXQub25lKCdzaG93LmJzLm1vZGFsJywgZnVuY3Rpb24gKHNob3dFdmVudCkge1xuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuIC8vIG9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgICR0YXJnZXQub25lKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICR0aGlzLmlzKCc6dmlzaWJsZScpICYmICR0aGlzLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgIH0pXG4gICAgfSlcbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb24sIHRoaXMpXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHRvb2x0aXAuanMgdjMuMy42XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0b29sdGlwXG4gKiBJbnNwaXJlZCBieSB0aGUgb3JpZ2luYWwgalF1ZXJ5LnRpcHN5IGJ5IEphc29uIEZyYW1lXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVE9PTFRJUCBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSAgICAgICA9IG51bGxcbiAgICB0aGlzLm9wdGlvbnMgICAgPSBudWxsXG4gICAgdGhpcy5lbmFibGVkICAgID0gbnVsbFxuICAgIHRoaXMudGltZW91dCAgICA9IG51bGxcbiAgICB0aGlzLmhvdmVyU3RhdGUgPSBudWxsXG4gICAgdGhpcy4kZWxlbWVudCAgID0gbnVsbFxuICAgIHRoaXMuaW5TdGF0ZSAgICA9IG51bGxcblxuICAgIHRoaXMuaW5pdCgndG9vbHRpcCcsIGVsZW1lbnQsIG9wdGlvbnMpXG4gIH1cblxuICBUb29sdGlwLlZFUlNJT04gID0gJzMuMy42J1xuXG4gIFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MFxuXG4gIFRvb2x0aXAuREVGQVVMVFMgPSB7XG4gICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgc2VsZWN0b3I6IGZhbHNlLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJ0b29sdGlwLWFycm93XCI+PC9kaXY+PGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj48L2Rpdj4nLFxuICAgIHRyaWdnZXI6ICdob3ZlciBmb2N1cycsXG4gICAgdGl0bGU6ICcnLFxuICAgIGRlbGF5OiAwLFxuICAgIGh0bWw6IGZhbHNlLFxuICAgIGNvbnRhaW5lcjogZmFsc2UsXG4gICAgdmlld3BvcnQ6IHtcbiAgICAgIHNlbGVjdG9yOiAnYm9keScsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICh0eXBlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5lbmFibGVkICAgPSB0cnVlXG4gICAgdGhpcy50eXBlICAgICAgPSB0eXBlXG4gICAgdGhpcy4kZWxlbWVudCAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgPSB0aGlzLmdldE9wdGlvbnMob3B0aW9ucylcbiAgICB0aGlzLiR2aWV3cG9ydCA9IHRoaXMub3B0aW9ucy52aWV3cG9ydCAmJiAkKCQuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMudmlld3BvcnQpID8gdGhpcy5vcHRpb25zLnZpZXdwb3J0LmNhbGwodGhpcywgdGhpcy4kZWxlbWVudCkgOiAodGhpcy5vcHRpb25zLnZpZXdwb3J0LnNlbGVjdG9yIHx8IHRoaXMub3B0aW9ucy52aWV3cG9ydCkpXG4gICAgdGhpcy5pblN0YXRlICAgPSB7IGNsaWNrOiBmYWxzZSwgaG92ZXI6IGZhbHNlLCBmb2N1czogZmFsc2UgfVxuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0gaW5zdGFuY2VvZiBkb2N1bWVudC5jb25zdHJ1Y3RvciAmJiAhdGhpcy5vcHRpb25zLnNlbGVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BzZWxlY3RvcmAgb3B0aW9uIG11c3QgYmUgc3BlY2lmaWVkIHdoZW4gaW5pdGlhbGl6aW5nICcgKyB0aGlzLnR5cGUgKyAnIG9uIHRoZSB3aW5kb3cuZG9jdW1lbnQgb2JqZWN0IScpXG4gICAgfVxuXG4gICAgdmFyIHRyaWdnZXJzID0gdGhpcy5vcHRpb25zLnRyaWdnZXIuc3BsaXQoJyAnKVxuXG4gICAgZm9yICh2YXIgaSA9IHRyaWdnZXJzLmxlbmd0aDsgaS0tOykge1xuICAgICAgdmFyIHRyaWdnZXIgPSB0cmlnZ2Vyc1tpXVxuXG4gICAgICBpZiAodHJpZ2dlciA9PSAnY2xpY2snKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLnRvZ2dsZSwgdGhpcykpXG4gICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT0gJ21hbnVhbCcpIHtcbiAgICAgICAgdmFyIGV2ZW50SW4gID0gdHJpZ2dlciA9PSAnaG92ZXInID8gJ21vdXNlZW50ZXInIDogJ2ZvY3VzaW4nXG4gICAgICAgIHZhciBldmVudE91dCA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA/ICdtb3VzZWxlYXZlJyA6ICdmb2N1c291dCdcblxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKGV2ZW50SW4gICsgJy4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy5lbnRlciwgdGhpcykpXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oZXZlbnRPdXQgKyAnLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLmxlYXZlLCB0aGlzKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMuc2VsZWN0b3IgP1xuICAgICAgKHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB7IHRyaWdnZXI6ICdtYW51YWwnLCBzZWxlY3RvcjogJycgfSkpIDpcbiAgICAgIHRoaXMuZml4VGl0bGUoKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFRvb2x0aXAuREVGQVVMVFNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5nZXREZWZhdWx0cygpLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucylcblxuICAgIGlmIChvcHRpb25zLmRlbGF5ICYmIHR5cGVvZiBvcHRpb25zLmRlbGF5ID09ICdudW1iZXInKSB7XG4gICAgICBvcHRpb25zLmRlbGF5ID0ge1xuICAgICAgICBzaG93OiBvcHRpb25zLmRlbGF5LFxuICAgICAgICBoaWRlOiBvcHRpb25zLmRlbGF5XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldERlbGVnYXRlT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyAgPSB7fVxuICAgIHZhciBkZWZhdWx0cyA9IHRoaXMuZ2V0RGVmYXVsdHMoKVxuXG4gICAgdGhpcy5fb3B0aW9ucyAmJiAkLmVhY2godGhpcy5fb3B0aW9ucywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChkZWZhdWx0c1trZXldICE9IHZhbHVlKSBvcHRpb25zW2tleV0gPSB2YWx1ZVxuICAgIH0pXG5cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZW50ZXIgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHNlbGYgPSBvYmogaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yID9cbiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgfVxuXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mICQuRXZlbnQpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZVtvYmoudHlwZSA9PSAnZm9jdXNpbicgPyAnZm9jdXMnIDogJ2hvdmVyJ10gPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgfHwgc2VsZi5ob3ZlclN0YXRlID09ICdpbicpIHtcbiAgICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdpbidcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChzZWxmLnRpbWVvdXQpXG5cbiAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nXG5cbiAgICBpZiAoIXNlbGYub3B0aW9ucy5kZWxheSB8fCAhc2VsZi5vcHRpb25zLmRlbGF5LnNob3cpIHJldHVybiBzZWxmLnNob3coKVxuXG4gICAgc2VsZi50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5ob3ZlclN0YXRlID09ICdpbicpIHNlbGYuc2hvdygpXG4gICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LnNob3cpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5pc0luU3RhdGVUcnVlID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmluU3RhdGUpIHtcbiAgICAgIGlmICh0aGlzLmluU3RhdGVba2V5XSkgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmxlYXZlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA/XG4gICAgICBvYmogOiAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgIH1cblxuICAgIGlmIChvYmogaW5zdGFuY2VvZiAkLkV2ZW50KSB7XG4gICAgICBzZWxmLmluU3RhdGVbb2JqLnR5cGUgPT0gJ2ZvY3Vzb3V0JyA/ICdmb2N1cycgOiAnaG92ZXInXSA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuaXNJblN0YXRlVHJ1ZSgpKSByZXR1cm5cblxuICAgIGNsZWFyVGltZW91dChzZWxmLnRpbWVvdXQpXG5cbiAgICBzZWxmLmhvdmVyU3RhdGUgPSAnb3V0J1xuXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5oaWRlKSByZXR1cm4gc2VsZi5oaWRlKClcblxuICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnb3V0Jykgc2VsZi5oaWRlKClcbiAgICB9LCBzZWxmLm9wdGlvbnMuZGVsYXkuaGlkZSlcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93LmJzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBpZiAodGhpcy5oYXNDb250ZW50KCkgJiYgdGhpcy5lbmFibGVkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgICAgdmFyIGluRG9tID0gJC5jb250YWlucyh0aGlzLiRlbGVtZW50WzBdLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLiRlbGVtZW50WzBdKVxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgIWluRG9tKSByZXR1cm5cbiAgICAgIHZhciB0aGF0ID0gdGhpc1xuXG4gICAgICB2YXIgJHRpcCA9IHRoaXMudGlwKClcblxuICAgICAgdmFyIHRpcElkID0gdGhpcy5nZXRVSUQodGhpcy50eXBlKVxuXG4gICAgICB0aGlzLnNldENvbnRlbnQoKVxuICAgICAgJHRpcC5hdHRyKCdpZCcsIHRpcElkKVxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpXG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uKSAkdGlwLmFkZENsYXNzKCdmYWRlJylcblxuICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMucGxhY2VtZW50ID09ICdmdW5jdGlvbicgP1xuICAgICAgICB0aGlzLm9wdGlvbnMucGxhY2VtZW50LmNhbGwodGhpcywgJHRpcFswXSwgdGhpcy4kZWxlbWVudFswXSkgOlxuICAgICAgICB0aGlzLm9wdGlvbnMucGxhY2VtZW50XG5cbiAgICAgIHZhciBhdXRvVG9rZW4gPSAvXFxzP2F1dG8/XFxzPy9pXG4gICAgICB2YXIgYXV0b1BsYWNlID0gYXV0b1Rva2VuLnRlc3QocGxhY2VtZW50KVxuICAgICAgaWYgKGF1dG9QbGFjZSkgcGxhY2VtZW50ID0gcGxhY2VtZW50LnJlcGxhY2UoYXV0b1Rva2VuLCAnJykgfHwgJ3RvcCdcblxuICAgICAgJHRpcFxuICAgICAgICAuZGV0YWNoKClcbiAgICAgICAgLmNzcyh7IHRvcDogMCwgbGVmdDogMCwgZGlzcGxheTogJ2Jsb2NrJyB9KVxuICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KVxuICAgICAgICAuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgdGhpcylcblxuICAgICAgdGhpcy5vcHRpb25zLmNvbnRhaW5lciA/ICR0aXAuYXBwZW5kVG8odGhpcy5vcHRpb25zLmNvbnRhaW5lcikgOiAkdGlwLmluc2VydEFmdGVyKHRoaXMuJGVsZW1lbnQpXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2luc2VydGVkLmJzLicgKyB0aGlzLnR5cGUpXG5cbiAgICAgIHZhciBwb3MgICAgICAgICAgPSB0aGlzLmdldFBvc2l0aW9uKClcbiAgICAgIHZhciBhY3R1YWxXaWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgICB2YXIgYWN0dWFsSGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgICAgaWYgKGF1dG9QbGFjZSkge1xuICAgICAgICB2YXIgb3JnUGxhY2VtZW50ID0gcGxhY2VtZW50XG4gICAgICAgIHZhciB2aWV3cG9ydERpbSA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpXG5cbiAgICAgICAgcGxhY2VtZW50ID0gcGxhY2VtZW50ID09ICdib3R0b20nICYmIHBvcy5ib3R0b20gKyBhY3R1YWxIZWlnaHQgPiB2aWV3cG9ydERpbS5ib3R0b20gPyAndG9wJyAgICA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAndG9wJyAgICAmJiBwb3MudG9wICAgIC0gYWN0dWFsSGVpZ2h0IDwgdmlld3BvcnREaW0udG9wICAgID8gJ2JvdHRvbScgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3JpZ2h0JyAgJiYgcG9zLnJpZ2h0ICArIGFjdHVhbFdpZHRoICA+IHZpZXdwb3J0RGltLndpZHRoICA/ICdsZWZ0JyAgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICdsZWZ0JyAgICYmIHBvcy5sZWZ0ICAgLSBhY3R1YWxXaWR0aCAgPCB2aWV3cG9ydERpbS5sZWZ0ICAgPyAncmlnaHQnICA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFxuXG4gICAgICAgICR0aXBcbiAgICAgICAgICAucmVtb3ZlQ2xhc3Mob3JnUGxhY2VtZW50KVxuICAgICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpXG4gICAgICB9XG5cbiAgICAgIHZhciBjYWxjdWxhdGVkT2Zmc2V0ID0gdGhpcy5nZXRDYWxjdWxhdGVkT2Zmc2V0KHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KVxuXG4gICAgICB0aGlzLmFwcGx5UGxhY2VtZW50KGNhbGN1bGF0ZWRPZmZzZXQsIHBsYWNlbWVudClcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJldkhvdmVyU3RhdGUgPSB0aGF0LmhvdmVyU3RhdGVcbiAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdzaG93bi5icy4nICsgdGhhdC50eXBlKVxuICAgICAgICB0aGF0LmhvdmVyU3RhdGUgPSBudWxsXG5cbiAgICAgICAgaWYgKHByZXZIb3ZlclN0YXRlID09ICdvdXQnKSB0aGF0LmxlYXZlKHRoYXQpXG4gICAgICB9XG5cbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJHRpcC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICAgJHRpcFxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNvbXBsZXRlKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgY29tcGxldGUoKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmFwcGx5UGxhY2VtZW50ID0gZnVuY3Rpb24gKG9mZnNldCwgcGxhY2VtZW50KSB7XG4gICAgdmFyICR0aXAgICA9IHRoaXMudGlwKClcbiAgICB2YXIgd2lkdGggID0gJHRpcFswXS5vZmZzZXRXaWR0aFxuICAgIHZhciBoZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxuXG4gICAgLy8gbWFudWFsbHkgcmVhZCBtYXJnaW5zIGJlY2F1c2UgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGluY2x1ZGVzIGRpZmZlcmVuY2VcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi10b3AnKSwgMTApXG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUludCgkdGlwLmNzcygnbWFyZ2luLWxlZnQnKSwgMTApXG5cbiAgICAvLyB3ZSBtdXN0IGNoZWNrIGZvciBOYU4gZm9yIGllIDgvOVxuICAgIGlmIChpc05hTihtYXJnaW5Ub3ApKSAgbWFyZ2luVG9wICA9IDBcbiAgICBpZiAoaXNOYU4obWFyZ2luTGVmdCkpIG1hcmdpbkxlZnQgPSAwXG5cbiAgICBvZmZzZXQudG9wICArPSBtYXJnaW5Ub3BcbiAgICBvZmZzZXQubGVmdCArPSBtYXJnaW5MZWZ0XG5cbiAgICAvLyAkLmZuLm9mZnNldCBkb2Vzbid0IHJvdW5kIHBpeGVsIHZhbHVlc1xuICAgIC8vIHNvIHdlIHVzZSBzZXRPZmZzZXQgZGlyZWN0bHkgd2l0aCBvdXIgb3duIGZ1bmN0aW9uIEItMFxuICAgICQub2Zmc2V0LnNldE9mZnNldCgkdGlwWzBdLCAkLmV4dGVuZCh7XG4gICAgICB1c2luZzogZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICR0aXAuY3NzKHtcbiAgICAgICAgICB0b3A6IE1hdGgucm91bmQocHJvcHMudG9wKSxcbiAgICAgICAgICBsZWZ0OiBNYXRoLnJvdW5kKHByb3BzLmxlZnQpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSwgb2Zmc2V0KSwgMClcblxuICAgICR0aXAuYWRkQ2xhc3MoJ2luJylcblxuICAgIC8vIGNoZWNrIHRvIHNlZSBpZiBwbGFjaW5nIHRpcCBpbiBuZXcgb2Zmc2V0IGNhdXNlZCB0aGUgdGlwIHRvIHJlc2l6ZSBpdHNlbGZcbiAgICB2YXIgYWN0dWFsV2lkdGggID0gJHRpcFswXS5vZmZzZXRXaWR0aFxuICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxuXG4gICAgaWYgKHBsYWNlbWVudCA9PSAndG9wJyAmJiBhY3R1YWxIZWlnaHQgIT0gaGVpZ2h0KSB7XG4gICAgICBvZmZzZXQudG9wID0gb2Zmc2V0LnRvcCArIGhlaWdodCAtIGFjdHVhbEhlaWdodFxuICAgIH1cblxuICAgIHZhciBkZWx0YSA9IHRoaXMuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhKHBsYWNlbWVudCwgb2Zmc2V0LCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KVxuXG4gICAgaWYgKGRlbHRhLmxlZnQpIG9mZnNldC5sZWZ0ICs9IGRlbHRhLmxlZnRcbiAgICBlbHNlIG9mZnNldC50b3AgKz0gZGVsdGEudG9wXG5cbiAgICB2YXIgaXNWZXJ0aWNhbCAgICAgICAgICA9IC90b3B8Ym90dG9tLy50ZXN0KHBsYWNlbWVudClcbiAgICB2YXIgYXJyb3dEZWx0YSAgICAgICAgICA9IGlzVmVydGljYWwgPyBkZWx0YS5sZWZ0ICogMiAtIHdpZHRoICsgYWN0dWFsV2lkdGggOiBkZWx0YS50b3AgKiAyIC0gaGVpZ2h0ICsgYWN0dWFsSGVpZ2h0XG4gICAgdmFyIGFycm93T2Zmc2V0UG9zaXRpb24gPSBpc1ZlcnRpY2FsID8gJ29mZnNldFdpZHRoJyA6ICdvZmZzZXRIZWlnaHQnXG5cbiAgICAkdGlwLm9mZnNldChvZmZzZXQpXG4gICAgdGhpcy5yZXBsYWNlQXJyb3coYXJyb3dEZWx0YSwgJHRpcFswXVthcnJvd09mZnNldFBvc2l0aW9uXSwgaXNWZXJ0aWNhbClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnJlcGxhY2VBcnJvdyA9IGZ1bmN0aW9uIChkZWx0YSwgZGltZW5zaW9uLCBpc1ZlcnRpY2FsKSB7XG4gICAgdGhpcy5hcnJvdygpXG4gICAgICAuY3NzKGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJywgNTAgKiAoMSAtIGRlbHRhIC8gZGltZW5zaW9uKSArICclJylcbiAgICAgIC5jc3MoaXNWZXJ0aWNhbCA/ICd0b3AnIDogJ2xlZnQnLCAnJylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aXAgID0gdGhpcy50aXAoKVxuICAgIHZhciB0aXRsZSA9IHRoaXMuZ2V0VGl0bGUoKVxuXG4gICAgJHRpcC5maW5kKCcudG9vbHRpcC1pbm5lcicpW3RoaXMub3B0aW9ucy5odG1sID8gJ2h0bWwnIDogJ3RleHQnXSh0aXRsZSlcbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdmYWRlIGluIHRvcCBib3R0b20gbGVmdCByaWdodCcpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdmFyICR0aXAgPSAkKHRoaXMuJHRpcClcbiAgICB2YXIgZSAgICA9ICQuRXZlbnQoJ2hpZGUuYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgaWYgKHRoYXQuaG92ZXJTdGF0ZSAhPSAnaW4nKSAkdGlwLmRldGFjaCgpXG4gICAgICB0aGF0LiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICAgLnRyaWdnZXIoJ2hpZGRlbi5icy4nICsgdGhhdC50eXBlKVxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgJHRpcC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICR0aXBcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIGNvbXBsZXRlKClcblxuICAgIHRoaXMuaG92ZXJTdGF0ZSA9IG51bGxcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5maXhUaXRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgaWYgKCRlLmF0dHIoJ3RpdGxlJykgfHwgdHlwZW9mICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKSAhPSAnc3RyaW5nJykge1xuICAgICAgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScsICRlLmF0dHIoJ3RpdGxlJykgfHwgJycpLmF0dHIoJ3RpdGxlJywgJycpXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGFzQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgkZWxlbWVudCkge1xuICAgICRlbGVtZW50ICAgPSAkZWxlbWVudCB8fCB0aGlzLiRlbGVtZW50XG5cbiAgICB2YXIgZWwgICAgID0gJGVsZW1lbnRbMF1cbiAgICB2YXIgaXNCb2R5ID0gZWwudGFnTmFtZSA9PSAnQk9EWSdcblxuICAgIHZhciBlbFJlY3QgICAgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGlmIChlbFJlY3Qud2lkdGggPT0gbnVsbCkge1xuICAgICAgLy8gd2lkdGggYW5kIGhlaWdodCBhcmUgbWlzc2luZyBpbiBJRTgsIHNvIGNvbXB1dGUgdGhlbSBtYW51YWxseTsgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMTQwOTNcbiAgICAgIGVsUmVjdCA9ICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHsgd2lkdGg6IGVsUmVjdC5yaWdodCAtIGVsUmVjdC5sZWZ0LCBoZWlnaHQ6IGVsUmVjdC5ib3R0b20gLSBlbFJlY3QudG9wIH0pXG4gICAgfVxuICAgIHZhciBlbE9mZnNldCAgPSBpc0JvZHkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogJGVsZW1lbnQub2Zmc2V0KClcbiAgICB2YXIgc2Nyb2xsICAgID0geyBzY3JvbGw6IGlzQm9keSA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgOiAkZWxlbWVudC5zY3JvbGxUb3AoKSB9XG4gICAgdmFyIG91dGVyRGltcyA9IGlzQm9keSA/IHsgd2lkdGg6ICQod2luZG93KS53aWR0aCgpLCBoZWlnaHQ6ICQod2luZG93KS5oZWlnaHQoKSB9IDogbnVsbFxuXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHNjcm9sbCwgb3V0ZXJEaW1zLCBlbE9mZnNldClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldENhbGN1bGF0ZWRPZmZzZXQgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50ID09ICdib3R0b20nID8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0LCAgIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMiB9IDpcbiAgICAgICAgICAgcGxhY2VtZW50ID09ICd0b3AnICAgID8geyB0b3A6IHBvcy50b3AgLSBhY3R1YWxIZWlnaHQsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMiB9IDpcbiAgICAgICAgICAgcGxhY2VtZW50ID09ICdsZWZ0JyAgID8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0IC0gYWN0dWFsV2lkdGggfSA6XG4gICAgICAgIC8qIHBsYWNlbWVudCA9PSAncmlnaHQnICovIHsgdG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCAvIDIgLSBhY3R1YWxIZWlnaHQgLyAyLCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCB9XG5cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YSA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHZhciBkZWx0YSA9IHsgdG9wOiAwLCBsZWZ0OiAwIH1cbiAgICBpZiAoIXRoaXMuJHZpZXdwb3J0KSByZXR1cm4gZGVsdGFcblxuICAgIHZhciB2aWV3cG9ydFBhZGRpbmcgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgdGhpcy5vcHRpb25zLnZpZXdwb3J0LnBhZGRpbmcgfHwgMFxuICAgIHZhciB2aWV3cG9ydERpbWVuc2lvbnMgPSB0aGlzLmdldFBvc2l0aW9uKHRoaXMuJHZpZXdwb3J0KVxuXG4gICAgaWYgKC9yaWdodHxsZWZ0Ly50ZXN0KHBsYWNlbWVudCkpIHtcbiAgICAgIHZhciB0b3BFZGdlT2Zmc2V0ICAgID0gcG9zLnRvcCAtIHZpZXdwb3J0UGFkZGluZyAtIHZpZXdwb3J0RGltZW5zaW9ucy5zY3JvbGxcbiAgICAgIHZhciBib3R0b21FZGdlT2Zmc2V0ID0gcG9zLnRvcCArIHZpZXdwb3J0UGFkZGluZyAtIHZpZXdwb3J0RGltZW5zaW9ucy5zY3JvbGwgKyBhY3R1YWxIZWlnaHRcbiAgICAgIGlmICh0b3BFZGdlT2Zmc2V0IDwgdmlld3BvcnREaW1lbnNpb25zLnRvcCkgeyAvLyB0b3Agb3ZlcmZsb3dcbiAgICAgICAgZGVsdGEudG9wID0gdmlld3BvcnREaW1lbnNpb25zLnRvcCAtIHRvcEVkZ2VPZmZzZXRcbiAgICAgIH0gZWxzZSBpZiAoYm90dG9tRWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0KSB7IC8vIGJvdHRvbSBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wICsgdmlld3BvcnREaW1lbnNpb25zLmhlaWdodCAtIGJvdHRvbUVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlZnRFZGdlT2Zmc2V0ICA9IHBvcy5sZWZ0IC0gdmlld3BvcnRQYWRkaW5nXG4gICAgICB2YXIgcmlnaHRFZGdlT2Zmc2V0ID0gcG9zLmxlZnQgKyB2aWV3cG9ydFBhZGRpbmcgKyBhY3R1YWxXaWR0aFxuICAgICAgaWYgKGxlZnRFZGdlT2Zmc2V0IDwgdmlld3BvcnREaW1lbnNpb25zLmxlZnQpIHsgLy8gbGVmdCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgLSBsZWZ0RWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChyaWdodEVkZ2VPZmZzZXQgPiB2aWV3cG9ydERpbWVuc2lvbnMucmlnaHQpIHsgLy8gcmlnaHQgb3ZlcmZsb3dcbiAgICAgICAgZGVsdGEubGVmdCA9IHZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0ICsgdmlld3BvcnREaW1lbnNpb25zLndpZHRoIC0gcmlnaHRFZGdlT2Zmc2V0XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbHRhXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRUaXRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGl0bGVcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXG5cbiAgICB0aXRsZSA9ICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKVxuICAgICAgfHwgKHR5cGVvZiBvLnRpdGxlID09ICdmdW5jdGlvbicgPyBvLnRpdGxlLmNhbGwoJGVbMF0pIDogIG8udGl0bGUpXG5cbiAgICByZXR1cm4gdGl0bGVcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFVJRCA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBkbyBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApXG4gICAgd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpXG4gICAgcmV0dXJuIHByZWZpeFxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudGlwID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kdGlwKSB7XG4gICAgICB0aGlzLiR0aXAgPSAkKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSlcbiAgICAgIGlmICh0aGlzLiR0aXAubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMudHlwZSArICcgYHRlbXBsYXRlYCBvcHRpb24gbXVzdCBjb25zaXN0IG9mIGV4YWN0bHkgMSB0b3AtbGV2ZWwgZWxlbWVudCEnKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kdGlwXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuJGFycm93ID0gdGhpcy4kYXJyb3cgfHwgdGhpcy50aXAoKS5maW5kKCcudG9vbHRpcC1hcnJvdycpKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IHRydWVcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2VcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnRvZ2dsZUVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gIXRoaXMuZW5hYmxlZFxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICBpZiAoZSkge1xuICAgICAgc2VsZiA9ICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuICAgICAgaWYgKCFzZWxmKSB7XG4gICAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihlLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlKSB7XG4gICAgICBzZWxmLmluU3RhdGUuY2xpY2sgPSAhc2VsZi5pblN0YXRlLmNsaWNrXG4gICAgICBpZiAoc2VsZi5pc0luU3RhdGVUcnVlKCkpIHNlbGYuZW50ZXIoc2VsZilcbiAgICAgIGVsc2Ugc2VsZi5sZWF2ZShzZWxmKVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnRpcCgpLmhhc0NsYXNzKCdpbicpID8gc2VsZi5sZWF2ZShzZWxmKSA6IHNlbGYuZW50ZXIoc2VsZilcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpXG4gICAgdGhpcy5oaWRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGVsZW1lbnQub2ZmKCcuJyArIHRoYXQudHlwZSkucmVtb3ZlRGF0YSgnYnMuJyArIHRoYXQudHlwZSlcbiAgICAgIGlmICh0aGF0LiR0aXApIHtcbiAgICAgICAgdGhhdC4kdGlwLmRldGFjaCgpXG4gICAgICB9XG4gICAgICB0aGF0LiR0aXAgPSBudWxsXG4gICAgICB0aGF0LiRhcnJvdyA9IG51bGxcbiAgICAgIHRoYXQuJHZpZXdwb3J0ID0gbnVsbFxuICAgIH0pXG4gIH1cblxuXG4gIC8vIFRPT0xUSVAgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy50b29sdGlwJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3Qob3B0aW9uKSkgcmV0dXJuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRvb2x0aXAnLCAoZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi50b29sdGlwXG5cbiAgJC5mbi50b29sdGlwICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4udG9vbHRpcC5Db25zdHJ1Y3RvciA9IFRvb2x0aXBcblxuXG4gIC8vIFRPT0xUSVAgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4udG9vbHRpcC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udG9vbHRpcCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogcG9wb3Zlci5qcyB2My4zLjZcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3BvcG92ZXJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gUE9QT1ZFUiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuaW5pdCgncG9wb3ZlcicsIGVsZW1lbnQsIG9wdGlvbnMpXG4gIH1cblxuICBpZiAoISQuZm4udG9vbHRpcCkgdGhyb3cgbmV3IEVycm9yKCdQb3BvdmVyIHJlcXVpcmVzIHRvb2x0aXAuanMnKVxuXG4gIFBvcG92ZXIuVkVSU0lPTiAgPSAnMy4zLjYnXG5cbiAgUG9wb3Zlci5ERUZBVUxUUyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IuREVGQVVMVFMsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1jb250ZW50XCI+PC9kaXY+PC9kaXY+J1xuICB9KVxuXG5cbiAgLy8gTk9URTogUE9QT1ZFUiBFWFRFTkRTIHRvb2x0aXAuanNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBQb3BvdmVyLnByb3RvdHlwZSA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IucHJvdG90eXBlKVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQb3BvdmVyLkRFRkFVTFRTXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICAgID0gdGhpcy50aXAoKVxuICAgIHZhciB0aXRsZSAgID0gdGhpcy5nZXRUaXRsZSgpXG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldENvbnRlbnQoKVxuXG4gICAgJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpW3RoaXMub3B0aW9ucy5odG1sID8gJ2h0bWwnIDogJ3RleHQnXSh0aXRsZSlcbiAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLWNvbnRlbnQnKS5jaGlsZHJlbigpLmRldGFjaCgpLmVuZCgpWyAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG4gICAgICB0aGlzLm9wdGlvbnMuaHRtbCA/ICh0eXBlb2YgY29udGVudCA9PSAnc3RyaW5nJyA/ICdodG1sJyA6ICdhcHBlbmQnKSA6ICd0ZXh0J1xuICAgIF0oY29udGVudClcblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0IGluJylcblxuICAgIC8vIElFOCBkb2Vzbid0IGFjY2VwdCBoaWRpbmcgdmlhIHRoZSBgOmVtcHR5YCBwc2V1ZG8gc2VsZWN0b3IsIHdlIGhhdmUgdG8gZG9cbiAgICAvLyB0aGlzIG1hbnVhbGx5IGJ5IGNoZWNraW5nIHRoZSBjb250ZW50cy5cbiAgICBpZiAoISR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5odG1sKCkpICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5oaWRlKClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLmdldENvbnRlbnQoKVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXG5cbiAgICByZXR1cm4gJGUuYXR0cignZGF0YS1jb250ZW50JylcbiAgICAgIHx8ICh0eXBlb2Ygby5jb250ZW50ID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgby5jb250ZW50LmNhbGwoJGVbMF0pIDpcbiAgICAgICAgICAgIG8uY29udGVudClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy5hcnJvdycpKVxuICB9XG5cblxuICAvLyBQT1BPVkVSIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5wb3BvdmVyJywgKGRhdGEgPSBuZXcgUG9wb3Zlcih0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ucG9wb3ZlclxuXG4gICQuZm4ucG9wb3ZlciAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnBvcG92ZXIuQ29uc3RydWN0b3IgPSBQb3BvdmVyXG5cblxuICAvLyBQT1BPVkVSIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnBvcG92ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnBvcG92ZXIgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHNjcm9sbHNweS5qcyB2My4zLjZcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3Njcm9sbHNweVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFNDUk9MTFNQWSBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gU2Nyb2xsU3B5KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRib2R5ICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQgPSAkKGVsZW1lbnQpLmlzKGRvY3VtZW50LmJvZHkpID8gJCh3aW5kb3cpIDogJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICAgPSAkLmV4dGVuZCh7fSwgU2Nyb2xsU3B5LkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuc2VsZWN0b3IgICAgICAgPSAodGhpcy5vcHRpb25zLnRhcmdldCB8fCAnJykgKyAnIC5uYXYgbGkgPiBhJ1xuICAgIHRoaXMub2Zmc2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ICAgPSBudWxsXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgICA9IDBcblxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQub24oJ3Njcm9sbC5icy5zY3JvbGxzcHknLCAkLnByb3h5KHRoaXMucHJvY2VzcywgdGhpcykpXG4gICAgdGhpcy5yZWZyZXNoKClcbiAgICB0aGlzLnByb2Nlc3MoKVxuICB9XG5cbiAgU2Nyb2xsU3B5LlZFUlNJT04gID0gJzMuMy42J1xuXG4gIFNjcm9sbFNweS5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDEwXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kc2Nyb2xsRWxlbWVudFswXS5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgICAgICAgICAgPSB0aGlzXG4gICAgdmFyIG9mZnNldE1ldGhvZCAgPSAnb2Zmc2V0J1xuICAgIHZhciBvZmZzZXRCYXNlICAgID0gMFxuXG4gICAgdGhpcy5vZmZzZXRzICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgID0gW11cbiAgICB0aGlzLnNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcblxuICAgIGlmICghJC5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKSkge1xuICAgICAgb2Zmc2V0TWV0aG9kID0gJ3Bvc2l0aW9uJ1xuICAgICAgb2Zmc2V0QmFzZSAgID0gdGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKVxuICAgIH1cblxuICAgIHRoaXMuJGJvZHlcbiAgICAgIC5maW5kKHRoaXMuc2VsZWN0b3IpXG4gICAgICAubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbCAgID0gJCh0aGlzKVxuICAgICAgICB2YXIgaHJlZiAgPSAkZWwuZGF0YSgndGFyZ2V0JykgfHwgJGVsLmF0dHIoJ2hyZWYnKVxuICAgICAgICB2YXIgJGhyZWYgPSAvXiMuLy50ZXN0KGhyZWYpICYmICQoaHJlZilcblxuICAgICAgICByZXR1cm4gKCRocmVmXG4gICAgICAgICAgJiYgJGhyZWYubGVuZ3RoXG4gICAgICAgICAgJiYgJGhyZWYuaXMoJzp2aXNpYmxlJylcbiAgICAgICAgICAmJiBbWyRocmVmW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCBocmVmXV0pIHx8IG51bGxcbiAgICAgIH0pXG4gICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYVswXSAtIGJbMF0gfSlcbiAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5vZmZzZXRzLnB1c2godGhpc1swXSlcbiAgICAgICAgdGhhdC50YXJnZXRzLnB1c2godGhpc1sxXSlcbiAgICAgIH0pXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFRvcCAgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKCkgKyB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcbiAgICB2YXIgbWF4U2Nyb2xsICAgID0gdGhpcy5vcHRpb25zLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0cyAgICAgID0gdGhpcy5vZmZzZXRzXG4gICAgdmFyIHRhcmdldHMgICAgICA9IHRoaXMudGFyZ2V0c1xuICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLmFjdGl2ZVRhcmdldFxuICAgIHZhciBpXG5cbiAgICBpZiAodGhpcy5zY3JvbGxIZWlnaHQgIT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB0aGlzLnJlZnJlc2goKVxuICAgIH1cblxuICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICByZXR1cm4gYWN0aXZlVGFyZ2V0ICE9IChpID0gdGFyZ2V0c1t0YXJnZXRzLmxlbmd0aCAtIDFdKSAmJiB0aGlzLmFjdGl2YXRlKGkpXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCBvZmZzZXRzWzBdKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IG51bGxcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyKClcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgYWN0aXZlVGFyZ2V0ICE9IHRhcmdldHNbaV1cbiAgICAgICAgJiYgc2Nyb2xsVG9wID49IG9mZnNldHNbaV1cbiAgICAgICAgJiYgKG9mZnNldHNbaSArIDFdID09PSB1bmRlZmluZWQgfHwgc2Nyb2xsVG9wIDwgb2Zmc2V0c1tpICsgMV0pXG4gICAgICAgICYmIHRoaXMuYWN0aXZhdGUodGFyZ2V0c1tpXSlcbiAgICB9XG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICB0aGlzLmNsZWFyKClcblxuICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgK1xuICAgICAgJ1tkYXRhLXRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCJdLCcgK1xuICAgICAgdGhpcy5zZWxlY3RvciArICdbaHJlZj1cIicgKyB0YXJnZXQgKyAnXCJdJ1xuXG4gICAgdmFyIGFjdGl2ZSA9ICQoc2VsZWN0b3IpXG4gICAgICAucGFyZW50cygnbGknKVxuICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuXG4gICAgaWYgKGFjdGl2ZS5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICBhY3RpdmUgPSBhY3RpdmVcbiAgICAgICAgLmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJylcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgIH1cblxuICAgIGFjdGl2ZS50cmlnZ2VyKCdhY3RpdmF0ZS5icy5zY3JvbGxzcHknKVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMuc2VsZWN0b3IpXG4gICAgICAucGFyZW50c1VudGlsKHRoaXMub3B0aW9ucy50YXJnZXQsICcuYWN0aXZlJylcbiAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnNjcm9sbHNweScsIChkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uc2Nyb2xsc3B5XG5cbiAgJC5mbi5zY3JvbGxzcHkgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5zY3JvbGxzcHkuQ29uc3RydWN0b3IgPSBTY3JvbGxTcHlcblxuXG4gIC8vIFNDUk9MTFNQWSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnNjcm9sbHNweS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uc2Nyb2xsc3B5ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQod2luZG93KS5vbignbG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGknLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksICRzcHkuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHRhYi5qcyB2My4zLjZcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3RhYnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBUQUIgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUYWIgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIC8vIGpzY3M6ZGlzYWJsZSByZXF1aXJlRG9sbGFyQmVmb3JlalF1ZXJ5QXNzaWdubWVudFxuICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudClcbiAgICAvLyBqc2NzOmVuYWJsZSByZXF1aXJlRG9sbGFyQmVmb3JlalF1ZXJ5QXNzaWdubWVudFxuICB9XG5cbiAgVGFiLlZFUlNJT04gPSAnMy4zLjYnXG5cbiAgVGFiLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUYWIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aGlzICAgID0gdGhpcy5lbGVtZW50XG4gICAgdmFyICR1bCAgICAgID0gJHRoaXMuY2xvc2VzdCgndWw6bm90KC5kcm9wZG93bi1tZW51KScpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuZGF0YSgndGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgfVxuXG4gICAgaWYgKCR0aGlzLnBhcmVudCgnbGknKS5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVyblxuXG4gICAgdmFyICRwcmV2aW91cyA9ICR1bC5maW5kKCcuYWN0aXZlOmxhc3QgYScpXG4gICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMudGFiJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICB9KVxuICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6ICRwcmV2aW91c1swXVxuICAgIH0pXG5cbiAgICAkcHJldmlvdXMudHJpZ2dlcihoaWRlRXZlbnQpXG4gICAgJHRoaXMudHJpZ2dlcihzaG93RXZlbnQpXG5cbiAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB2YXIgJHRhcmdldCA9ICQoc2VsZWN0b3IpXG5cbiAgICB0aGlzLmFjdGl2YXRlKCR0aGlzLmNsb3Nlc3QoJ2xpJyksICR1bClcbiAgICB0aGlzLmFjdGl2YXRlKCR0YXJnZXQsICR0YXJnZXQucGFyZW50KCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICRwcmV2aW91cy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ2hpZGRlbi5icy50YWInLFxuICAgICAgICByZWxhdGVkVGFyZ2V0OiAkdGhpc1swXVxuICAgICAgfSlcbiAgICAgICR0aGlzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAnc2hvd24uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHByZXZpb3VzWzBdXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBUYWIucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICB2YXIgJGFjdGl2ZSAgICA9IGNvbnRhaW5lci5maW5kKCc+IC5hY3RpdmUnKVxuICAgIHZhciB0cmFuc2l0aW9uID0gY2FsbGJhY2tcbiAgICAgICYmICQuc3VwcG9ydC50cmFuc2l0aW9uXG4gICAgICAmJiAoJGFjdGl2ZS5sZW5ndGggJiYgJGFjdGl2ZS5oYXNDbGFzcygnZmFkZScpIHx8ICEhY29udGFpbmVyLmZpbmQoJz4gLmZhZGUnKS5sZW5ndGgpXG5cbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgJGFjdGl2ZVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5maW5kKCc+IC5kcm9wZG93bi1tZW51ID4gLmFjdGl2ZScpXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZW5kKClcbiAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgICAgZWxlbWVudFxuICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyByZWZsb3cgZm9yIHRyYW5zaXRpb25cbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmFkZScpXG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LnBhcmVudCgnLmRyb3Bkb3duLW1lbnUnKS5sZW5ndGgpIHtcbiAgICAgICAgZWxlbWVudFxuICAgICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgLmVuZCgpXG4gICAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICAkYWN0aXZlLmxlbmd0aCAmJiB0cmFuc2l0aW9uID9cbiAgICAgICRhY3RpdmVcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgbmV4dClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICBuZXh0KClcblxuICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ2luJylcbiAgfVxuXG5cbiAgLy8gVEFCIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLnRhYicpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMudGFiJywgKGRhdGEgPSBuZXcgVGFiKHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi50YWJcblxuICAkLmZuLnRhYiAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnRhYi5Db25zdHJ1Y3RvciA9IFRhYlxuXG5cbiAgLy8gVEFCIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PVxuXG4gICQuZm4udGFiLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi50YWIgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBUQUIgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09XG5cbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgUGx1Z2luLmNhbGwoJCh0aGlzKSwgJ3Nob3cnKVxuICB9XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLnRhYi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nLCBjbGlja0hhbmRsZXIpXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwicGlsbFwiXScsIGNsaWNrSGFuZGxlcilcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWZmaXguanMgdjMuMy42XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhZmZpeFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFGRklYIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBBZmZpeCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFmZml4LkRFRkFVTFRTLCBvcHRpb25zKVxuXG4gICAgdGhpcy4kdGFyZ2V0ID0gJCh0aGlzLm9wdGlvbnMudGFyZ2V0KVxuICAgICAgLm9uKCdzY3JvbGwuYnMuYWZmaXguZGF0YS1hcGknLCAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcykpXG4gICAgICAub24oJ2NsaWNrLmJzLmFmZml4LmRhdGEtYXBpJywgICQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCwgdGhpcykpXG5cbiAgICB0aGlzLiRlbGVtZW50ICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLmFmZml4ZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnVucGluICAgICAgICA9IG51bGxcbiAgICB0aGlzLnBpbm5lZE9mZnNldCA9IG51bGxcblxuICAgIHRoaXMuY2hlY2tQb3NpdGlvbigpXG4gIH1cblxuICBBZmZpeC5WRVJTSU9OICA9ICczLjMuNidcblxuICBBZmZpeC5SRVNFVCAgICA9ICdhZmZpeCBhZmZpeC10b3AgYWZmaXgtYm90dG9tJ1xuXG4gIEFmZml4LkRFRkFVTFRTID0ge1xuICAgIG9mZnNldDogMCxcbiAgICB0YXJnZXQ6IHdpbmRvd1xuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gICAgID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHZhciB0YXJnZXRIZWlnaHQgPSB0aGlzLiR0YXJnZXQuaGVpZ2h0KClcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiB0aGlzLmFmZml4ZWQgPT0gJ3RvcCcpIHJldHVybiBzY3JvbGxUb3AgPCBvZmZzZXRUb3AgPyAndG9wJyA6IGZhbHNlXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkID09ICdib3R0b20nKSB7XG4gICAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwpIHJldHVybiAoc2Nyb2xsVG9wICsgdGhpcy51bnBpbiA8PSBwb3NpdGlvbi50b3ApID8gZmFsc2UgOiAnYm90dG9tJ1xuICAgICAgcmV0dXJuIChzY3JvbGxUb3AgKyB0YXJnZXRIZWlnaHQgPD0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbGl6aW5nICAgPSB0aGlzLmFmZml4ZWQgPT0gbnVsbFxuICAgIHZhciBjb2xsaWRlclRvcCAgICA9IGluaXRpYWxpemluZyA/IHNjcm9sbFRvcCA6IHBvc2l0aW9uLnRvcFxuICAgIHZhciBjb2xsaWRlckhlaWdodCA9IGluaXRpYWxpemluZyA/IHRhcmdldEhlaWdodCA6IGhlaWdodFxuXG4gICAgaWYgKG9mZnNldFRvcCAhPSBudWxsICYmIHNjcm9sbFRvcCA8PSBvZmZzZXRUb3ApIHJldHVybiAndG9wJ1xuICAgIGlmIChvZmZzZXRCb3R0b20gIT0gbnVsbCAmJiAoY29sbGlkZXJUb3AgKyBjb2xsaWRlckhlaWdodCA+PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pKSByZXR1cm4gJ2JvdHRvbSdcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFBpbm5lZE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5waW5uZWRPZmZzZXQpIHJldHVybiB0aGlzLnBpbm5lZE9mZnNldFxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpLmFkZENsYXNzKCdhZmZpeCcpXG4gICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuJHRhcmdldC5zY3JvbGxUb3AoKVxuICAgIHZhciBwb3NpdGlvbiAgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpXG4gICAgcmV0dXJuICh0aGlzLnBpbm5lZE9mZnNldCA9IHBvc2l0aW9uLnRvcCAtIHNjcm9sbFRvcClcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KCQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uLCB0aGlzKSwgMSlcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkgcmV0dXJuXG5cbiAgICB2YXIgaGVpZ2h0ICAgICAgID0gdGhpcy4kZWxlbWVudC5oZWlnaHQoKVxuICAgIHZhciBvZmZzZXQgICAgICAgPSB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3BcbiAgICB2YXIgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbVxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSBNYXRoLm1heCgkKGRvY3VtZW50KS5oZWlnaHQoKSwgJChkb2N1bWVudC5ib2R5KS5oZWlnaHQoKSlcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9ICdvYmplY3QnKSAgICAgICAgIG9mZnNldEJvdHRvbSA9IG9mZnNldFRvcCA9IG9mZnNldFxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0VG9wID09ICdmdW5jdGlvbicpICAgIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3AodGhpcy4kZWxlbWVudClcbiAgICBpZiAodHlwZW9mIG9mZnNldEJvdHRvbSA9PSAnZnVuY3Rpb24nKSBvZmZzZXRCb3R0b20gPSBvZmZzZXQuYm90dG9tKHRoaXMuJGVsZW1lbnQpXG5cbiAgICB2YXIgYWZmaXggPSB0aGlzLmdldFN0YXRlKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSlcblxuICAgIGlmICh0aGlzLmFmZml4ZWQgIT0gYWZmaXgpIHtcbiAgICAgIGlmICh0aGlzLnVucGluICE9IG51bGwpIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCAnJylcblxuICAgICAgdmFyIGFmZml4VHlwZSA9ICdhZmZpeCcgKyAoYWZmaXggPyAnLScgKyBhZmZpeCA6ICcnKVxuICAgICAgdmFyIGUgICAgICAgICA9ICQuRXZlbnQoYWZmaXhUeXBlICsgJy5icy5hZmZpeCcpXG5cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgIHRoaXMuYWZmaXhlZCA9IGFmZml4XG4gICAgICB0aGlzLnVucGluID0gYWZmaXggPT0gJ2JvdHRvbScgPyB0aGlzLmdldFBpbm5lZE9mZnNldCgpIDogbnVsbFxuXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVClcbiAgICAgICAgLmFkZENsYXNzKGFmZml4VHlwZSlcbiAgICAgICAgLnRyaWdnZXIoYWZmaXhUeXBlLnJlcGxhY2UoJ2FmZml4JywgJ2FmZml4ZWQnKSArICcuYnMuYWZmaXgnKVxuICAgIH1cblxuICAgIGlmIChhZmZpeCA9PSAnYm90dG9tJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoe1xuICAgICAgICB0b3A6IHNjcm9sbEhlaWdodCAtIGhlaWdodCAtIG9mZnNldEJvdHRvbVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuXG4gIC8vIEFGRklYIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmFmZml4JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hZmZpeCcsIChkYXRhID0gbmV3IEFmZml4KHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5hZmZpeFxuXG4gICQuZm4uYWZmaXggICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5hZmZpeC5Db25zdHJ1Y3RvciA9IEFmZml4XG5cblxuICAvLyBBRkZJWCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYWZmaXgubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmFmZml4ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQUZGSVggREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwiYWZmaXhcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkc3B5ID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgPSAkc3B5LmRhdGEoKVxuXG4gICAgICBkYXRhLm9mZnNldCA9IGRhdGEub2Zmc2V0IHx8IHt9XG5cbiAgICAgIGlmIChkYXRhLm9mZnNldEJvdHRvbSAhPSBudWxsKSBkYXRhLm9mZnNldC5ib3R0b20gPSBkYXRhLm9mZnNldEJvdHRvbVxuICAgICAgaWYgKGRhdGEub2Zmc2V0VG9wICAgICE9IG51bGwpIGRhdGEub2Zmc2V0LnRvcCAgICA9IGRhdGEub2Zmc2V0VG9wXG5cbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksIGRhdGEpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLypcbiAqIGFuZ3VsYXItdWktYm9vdHN0cmFwXG4gKiBodHRwOi8vYW5ndWxhci11aS5naXRodWIuaW8vYm9vdHN0cmFwL1xuXG4gKiBWZXJzaW9uOiAyLjIuMCAtIDIwMTYtMTAtMTBcbiAqIExpY2Vuc2U6IE1JVFxuICovYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXBcIiwgW1widWkuYm9vdHN0cmFwLnRwbHNcIiwgXCJ1aS5ib290c3RyYXAuY29sbGFwc2VcIixcInVpLmJvb3RzdHJhcC50YWJpbmRleFwiLFwidWkuYm9vdHN0cmFwLmFjY29yZGlvblwiLFwidWkuYm9vdHN0cmFwLmFsZXJ0XCIsXCJ1aS5ib290c3RyYXAuYnV0dG9uc1wiLFwidWkuYm9vdHN0cmFwLmNhcm91c2VsXCIsXCJ1aS5ib290c3RyYXAuZGF0ZXBhcnNlclwiLFwidWkuYm9vdHN0cmFwLmlzQ2xhc3NcIixcInVpLmJvb3RzdHJhcC5kYXRlcGlja2VyXCIsXCJ1aS5ib290c3RyYXAucG9zaXRpb25cIixcInVpLmJvb3RzdHJhcC5kYXRlcGlja2VyUG9wdXBcIixcInVpLmJvb3RzdHJhcC5kZWJvdW5jZVwiLFwidWkuYm9vdHN0cmFwLmRyb3Bkb3duXCIsXCJ1aS5ib290c3RyYXAuc3RhY2tlZE1hcFwiLFwidWkuYm9vdHN0cmFwLm1vZGFsXCIsXCJ1aS5ib290c3RyYXAucGFnaW5nXCIsXCJ1aS5ib290c3RyYXAucGFnZXJcIixcInVpLmJvb3RzdHJhcC5wYWdpbmF0aW9uXCIsXCJ1aS5ib290c3RyYXAudG9vbHRpcFwiLFwidWkuYm9vdHN0cmFwLnBvcG92ZXJcIixcInVpLmJvb3RzdHJhcC5wcm9ncmVzc2JhclwiLFwidWkuYm9vdHN0cmFwLnJhdGluZ1wiLFwidWkuYm9vdHN0cmFwLnRhYnNcIixcInVpLmJvb3RzdHJhcC50aW1lcGlja2VyXCIsXCJ1aS5ib290c3RyYXAudHlwZWFoZWFkXCJdKTtcbmFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLnRwbHNcIiwgW1widWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbFwiLFwidWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24uaHRtbFwiLFwidWliL3RlbXBsYXRlL2FsZXJ0L2FsZXJ0Lmh0bWxcIixcInVpYi90ZW1wbGF0ZS9jYXJvdXNlbC9jYXJvdXNlbC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbFwiLFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXkuaHRtbFwiLFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvbW9udGguaHRtbFwiLFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIveWVhci5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlclBvcHVwL3BvcHVwLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbFwiLFwidWliL3RlbXBsYXRlL3BhZ2VyL3BhZ2VyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2luYXRpb24uaHRtbFwiLFwidWliL3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1odG1sLXBvcHVwLmh0bWxcIixcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbFwiLFwidWliL3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLWh0bWwuaHRtbFwiLFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci10ZW1wbGF0ZS5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9iYXIuaHRtbFwiLFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcmF0aW5nL3JhdGluZy5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvdGFicy90YWIuaHRtbFwiLFwidWliL3RlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIixcInVpYi90ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLFwidWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbFwiLFwidWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtcG9wdXAuaHRtbFwiXSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmNvbGxhcHNlJywgW10pXG5cbiAgLmRpcmVjdGl2ZSgndWliQ29sbGFwc2UnLCBbJyRhbmltYXRlJywgJyRxJywgJyRwYXJzZScsICckaW5qZWN0b3InLCBmdW5jdGlvbigkYW5pbWF0ZSwgJHEsICRwYXJzZSwgJGluamVjdG9yKSB7XG4gICAgdmFyICRhbmltYXRlQ3NzID0gJGluamVjdG9yLmhhcygnJGFuaW1hdGVDc3MnKSA/ICRpbmplY3Rvci5nZXQoJyRhbmltYXRlQ3NzJykgOiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIGV4cGFuZGluZ0V4cHIgPSAkcGFyc2UoYXR0cnMuZXhwYW5kaW5nKSxcbiAgICAgICAgICBleHBhbmRlZEV4cHIgPSAkcGFyc2UoYXR0cnMuZXhwYW5kZWQpLFxuICAgICAgICAgIGNvbGxhcHNpbmdFeHByID0gJHBhcnNlKGF0dHJzLmNvbGxhcHNpbmcpLFxuICAgICAgICAgIGNvbGxhcHNlZEV4cHIgPSAkcGFyc2UoYXR0cnMuY29sbGFwc2VkKSxcbiAgICAgICAgICBob3Jpem9udGFsID0gZmFsc2UsXG4gICAgICAgICAgY3NzID0ge30sXG4gICAgICAgICAgY3NzVG8gPSB7fTtcblxuICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICBob3Jpem9udGFsID0gISEoJ2hvcml6b250YWwnIGluIGF0dHJzKTtcbiAgICAgICAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgY3NzID0ge1xuICAgICAgICAgICAgICB3aWR0aDogJydcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjc3NUbyA9IHt3aWR0aDogJzAnfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzID0ge1xuICAgICAgICAgICAgICBoZWlnaHQ6ICcnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY3NzVG8gPSB7aGVpZ2h0OiAnMCd9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXNjb3BlLiRldmFsKGF0dHJzLnVpYkNvbGxhcHNlKSkge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlJylcbiAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSlcbiAgICAgICAgICAgICAgLmNzcyhjc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFNjcm9sbEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHt3aWR0aDogZWxlbWVudC5zY3JvbGxXaWR0aCArICdweCd9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4ge2hlaWdodDogZWxlbWVudC5zY3JvbGxIZWlnaHQgKyAncHgnfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGV4cGFuZCgpIHtcbiAgICAgICAgICBpZiAoZWxlbWVudC5oYXNDbGFzcygnY29sbGFwc2UnKSAmJiBlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJHEucmVzb2x2ZShleHBhbmRpbmdFeHByKHNjb3BlKSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgZmFsc2UpO1xuXG4gICAgICAgICAgICAgIGlmICgkYW5pbWF0ZUNzcykge1xuICAgICAgICAgICAgICAgICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgIGFkZENsYXNzOiAnaW4nLFxuICAgICAgICAgICAgICAgICAgZWFzaW5nOiAnZWFzZScsXG4gICAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgdG86IGdldFNjcm9sbEZyb21FbGVtZW50KGVsZW1lbnRbMF0pXG4gICAgICAgICAgICAgICAgfSkuc3RhcnQoKVsnZmluYWxseSddKGV4cGFuZERvbmUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsICdpbicsIHtcbiAgICAgICAgICAgICAgICAgIGNzczoge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB0bzogZ2V0U2Nyb2xsRnJvbUVsZW1lbnQoZWxlbWVudFswXSlcbiAgICAgICAgICAgICAgICB9KS50aGVuKGV4cGFuZERvbmUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGV4cGFuZERvbmUoKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlJylcbiAgICAgICAgICAgIC5jc3MoY3NzKTtcbiAgICAgICAgICBleHBhbmRlZEV4cHIoc2NvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29sbGFwc2UoKSB7XG4gICAgICAgICAgaWYgKCFlbGVtZW50Lmhhc0NsYXNzKCdjb2xsYXBzZScpICYmICFlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGFwc2VEb25lKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJHEucmVzb2x2ZShjb2xsYXBzaW5nRXhwcihzY29wZSkpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZWxlbWVudFxuICAgICAgICAgICAgICAvLyBJTVBPUlRBTlQ6IFRoZSB3aWR0aCBtdXN0IGJlIHNldCBiZWZvcmUgYWRkaW5nIFwiY29sbGFwc2luZ1wiIGNsYXNzLlxuICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHRoZSBicm93c2VyIGF0dGVtcHRzIHRvIGFuaW1hdGUgZnJvbSB3aWR0aCAwIChpblxuICAgICAgICAgICAgICAvLyBjb2xsYXBzaW5nIGNsYXNzKSB0byB0aGUgZ2l2ZW4gd2lkdGggaGVyZS5cbiAgICAgICAgICAgICAgICAuY3NzKGdldFNjcm9sbEZyb21FbGVtZW50KGVsZW1lbnRbMF0pKVxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxseSBhbGwgcGFuZWwgY29sbGFwc2UgaGF2ZSB0aGUgY29sbGFwc2UgY2xhc3MsIHRoaXMgcmVtb3ZhbFxuICAgICAgICAgICAgICAgIC8vIHByZXZlbnRzIHRoZSBhbmltYXRpb24gZnJvbSBqdW1waW5nIHRvIGNvbGxhcHNlZCBzdGF0ZVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgICAgICAgICBpZiAoJGFuaW1hdGVDc3MpIHtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogJ2luJyxcbiAgICAgICAgICAgICAgICAgIHRvOiBjc3NUb1xuICAgICAgICAgICAgICAgIH0pLnN0YXJ0KClbJ2ZpbmFsbHknXShjb2xsYXBzZURvbmUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsICdpbicsIHtcbiAgICAgICAgICAgICAgICAgIHRvOiBjc3NUb1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oY29sbGFwc2VEb25lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjb2xsYXBzZURvbmUoKSB7XG4gICAgICAgICAgZWxlbWVudC5jc3MoY3NzVG8pOyAvLyBSZXF1aXJlZCBzbyB0aGF0IGNvbGxhcHNlIHdvcmtzIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkXG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlJyk7XG4gICAgICAgICAgY29sbGFwc2VkRXhwcihzY29wZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kd2F0Y2goYXR0cnMudWliQ29sbGFwc2UsIGZ1bmN0aW9uKHNob3VsZENvbGxhcHNlKSB7XG4gICAgICAgICAgaWYgKHNob3VsZENvbGxhcHNlKSB7XG4gICAgICAgICAgICBjb2xsYXBzZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHBhbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50YWJpbmRleCcsIFtdKVxuXG4uZGlyZWN0aXZlKCd1aWJUYWJpbmRleFRvZ2dsZScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHJzKSB7XG4gICAgICBhdHRycy4kb2JzZXJ2ZSgnZGlzYWJsZWQnLCBmdW5jdGlvbihkaXNhYmxlZCkge1xuICAgICAgICBhdHRycy4kc2V0KCd0YWJpbmRleCcsIGRpc2FibGVkID8gLTEgOiBudWxsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmFjY29yZGlvbicsIFsndWkuYm9vdHN0cmFwLmNvbGxhcHNlJywgJ3VpLmJvb3RzdHJhcC50YWJpbmRleCddKVxuXG4uY29uc3RhbnQoJ3VpYkFjY29yZGlvbkNvbmZpZycsIHtcbiAgY2xvc2VPdGhlcnM6IHRydWVcbn0pXG5cbi5jb250cm9sbGVyKCdVaWJBY2NvcmRpb25Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJ3VpYkFjY29yZGlvbkNvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCBhY2NvcmRpb25Db25maWcpIHtcbiAgLy8gVGhpcyBhcnJheSBrZWVwcyB0cmFjayBvZiB0aGUgYWNjb3JkaW9uIGdyb3Vwc1xuICB0aGlzLmdyb3VwcyA9IFtdO1xuXG4gIC8vIEVuc3VyZSB0aGF0IGFsbCB0aGUgZ3JvdXBzIGluIHRoaXMgYWNjb3JkaW9uIGFyZSBjbG9zZWQsIHVubGVzcyBjbG9zZS1vdGhlcnMgZXhwbGljaXRseSBzYXlzIG5vdCB0b1xuICB0aGlzLmNsb3NlT3RoZXJzID0gZnVuY3Rpb24ob3Blbkdyb3VwKSB7XG4gICAgdmFyIGNsb3NlT3RoZXJzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmNsb3NlT3RoZXJzKSA/XG4gICAgICAkc2NvcGUuJGV2YWwoJGF0dHJzLmNsb3NlT3RoZXJzKSA6IGFjY29yZGlvbkNvbmZpZy5jbG9zZU90aGVycztcbiAgICBpZiAoY2xvc2VPdGhlcnMpIHtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmdyb3VwcywgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGdyb3VwICE9PSBvcGVuR3JvdXApIHtcbiAgICAgICAgICBncm91cC5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRoaXMgaXMgY2FsbGVkIGZyb20gdGhlIGFjY29yZGlvbi1ncm91cCBkaXJlY3RpdmUgdG8gYWRkIGl0c2VsZiB0byB0aGUgYWNjb3JkaW9uXG4gIHRoaXMuYWRkR3JvdXAgPSBmdW5jdGlvbihncm91cFNjb3BlKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHRoaXMuZ3JvdXBzLnB1c2goZ3JvdXBTY29wZSk7XG5cbiAgICBncm91cFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgdGhhdC5yZW1vdmVHcm91cChncm91cFNjb3BlKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIGNhbGxlZCBmcm9tIHRoZSBhY2NvcmRpb24tZ3JvdXAgZGlyZWN0aXZlIHdoZW4gdG8gcmVtb3ZlIGl0c2VsZlxuICB0aGlzLnJlbW92ZUdyb3VwID0gZnVuY3Rpb24oZ3JvdXApIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdyb3Vwcy5pbmRleE9mKGdyb3VwKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLmdyb3Vwcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4vLyBUaGUgYWNjb3JkaW9uIGRpcmVjdGl2ZSBzaW1wbHkgc2V0cyB1cCB0aGUgZGlyZWN0aXZlIGNvbnRyb2xsZXJcbi8vIGFuZCBhZGRzIGFuIGFjY29yZGlvbiBDU1MgY2xhc3MgdG8gaXRzZWxmIGVsZW1lbnQuXG4uZGlyZWN0aXZlKCd1aWJBY2NvcmRpb24nLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiAnVWliQWNjb3JkaW9uQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnYWNjb3JkaW9uJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi5odG1sJztcbiAgICB9XG4gIH07XG59KVxuXG4vLyBUaGUgYWNjb3JkaW9uLWdyb3VwIGRpcmVjdGl2ZSBpbmRpY2F0ZXMgYSBibG9jayBvZiBodG1sIHRoYXQgd2lsbCBleHBhbmQgYW5kIGNvbGxhcHNlIGluIGFuIGFjY29yZGlvblxuLmRpcmVjdGl2ZSgndWliQWNjb3JkaW9uR3JvdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnXnVpYkFjY29yZGlvbicsICAgICAgICAgLy8gV2UgbmVlZCB0aGlzIGRpcmVjdGl2ZSB0byBiZSBpbnNpZGUgYW4gYWNjb3JkaW9uXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSwgICAgICAgICAgICAgIC8vIEl0IHRyYW5zY2x1ZGVzIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlIGludG8gdGhlIHRlbXBsYXRlXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbCc7XG4gICAgfSxcbiAgICBzY29wZToge1xuICAgICAgaGVhZGluZzogJ0AnLCAgICAgICAgICAgICAgIC8vIEludGVycG9sYXRlIHRoZSBoZWFkaW5nIGF0dHJpYnV0ZSBvbnRvIHRoaXMgc2NvcGVcbiAgICAgIHBhbmVsQ2xhc3M6ICdAPycsICAgICAgICAgICAvLyBEaXR0byB3aXRoIHBhbmVsQ2xhc3NcbiAgICAgIGlzT3BlbjogJz0/JyxcbiAgICAgIGlzRGlzYWJsZWQ6ICc9PydcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zZXRIZWFkaW5nID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB0aGlzLmhlYWRpbmcgPSBlbGVtZW50O1xuICAgICAgfTtcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgYWNjb3JkaW9uQ3RybCkge1xuICAgICAgZWxlbWVudC5hZGRDbGFzcygncGFuZWwnKTtcbiAgICAgIGFjY29yZGlvbkN0cmwuYWRkR3JvdXAoc2NvcGUpO1xuXG4gICAgICBzY29wZS5vcGVuQ2xhc3MgPSBhdHRycy5vcGVuQ2xhc3MgfHwgJ3BhbmVsLW9wZW4nO1xuICAgICAgc2NvcGUucGFuZWxDbGFzcyA9IGF0dHJzLnBhbmVsQ2xhc3MgfHwgJ3BhbmVsLWRlZmF1bHQnO1xuICAgICAgc2NvcGUuJHdhdGNoKCdpc09wZW4nLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBlbGVtZW50LnRvZ2dsZUNsYXNzKHNjb3BlLm9wZW5DbGFzcywgISF2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGFjY29yZGlvbkN0cmwuY2xvc2VPdGhlcnMoc2NvcGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUudG9nZ2xlT3BlbiA9IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBpZiAoIXNjb3BlLmlzRGlzYWJsZWQpIHtcbiAgICAgICAgICBpZiAoISRldmVudCB8fCAkZXZlbnQud2hpY2ggPT09IDMyKSB7XG4gICAgICAgICAgICBzY29wZS5pc09wZW4gPSAhc2NvcGUuaXNPcGVuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGlkID0gJ2FjY29yZGlvbmdyb3VwLScgKyBzY29wZS4kaWQgKyAnLScgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCk7XG4gICAgICBzY29wZS5oZWFkaW5nSWQgPSBpZCArICctdGFiJztcbiAgICAgIHNjb3BlLnBhbmVsSWQgPSBpZCArICctcGFuZWwnO1xuICAgIH1cbiAgfTtcbn0pXG5cbi8vIFVzZSBhY2NvcmRpb24taGVhZGluZyBiZWxvdyBhbiBhY2NvcmRpb24tZ3JvdXAgdG8gcHJvdmlkZSBhIGhlYWRpbmcgY29udGFpbmluZyBIVE1MXG4uZGlyZWN0aXZlKCd1aWJBY2NvcmRpb25IZWFkaW5nJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdHJhbnNjbHVkZTogdHJ1ZSwgICAvLyBHcmFiIHRoZSBjb250ZW50cyB0byBiZSB1c2VkIGFzIHRoZSBoZWFkaW5nXG4gICAgdGVtcGxhdGU6ICcnLCAgICAgICAvLyBJbiBlZmZlY3QgcmVtb3ZlIHRoaXMgZWxlbWVudCFcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHJlcXVpcmU6ICdedWliQWNjb3JkaW9uR3JvdXAnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgYWNjb3JkaW9uR3JvdXBDdHJsLCB0cmFuc2NsdWRlKSB7XG4gICAgICAvLyBQYXNzIHRoZSBoZWFkaW5nIHRvIHRoZSBhY2NvcmRpb24tZ3JvdXAgY29udHJvbGxlclxuICAgICAgLy8gc28gdGhhdCBpdCBjYW4gYmUgdHJhbnNjbHVkZWQgaW50byB0aGUgcmlnaHQgcGxhY2UgaW4gdGhlIHRlbXBsYXRlXG4gICAgICAvLyBbVGhlIHNlY29uZCBwYXJhbWV0ZXIgdG8gdHJhbnNjbHVkZSBjYXVzZXMgdGhlIGVsZW1lbnRzIHRvIGJlIGNsb25lZCBzbyB0aGF0IHRoZXkgd29yayBpbiBuZy1yZXBlYXRdXG4gICAgICBhY2NvcmRpb25Hcm91cEN0cmwuc2V0SGVhZGluZyh0cmFuc2NsdWRlKHNjb3BlLCBhbmd1bGFyLm5vb3ApKTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyBVc2UgaW4gdGhlIGFjY29yZGlvbi1ncm91cCB0ZW1wbGF0ZSB0byBpbmRpY2F0ZSB3aGVyZSB5b3Ugd2FudCB0aGUgaGVhZGluZyB0byBiZSB0cmFuc2NsdWRlZFxuLy8gWW91IG11c3QgcHJvdmlkZSB0aGUgcHJvcGVydHkgb24gdGhlIGFjY29yZGlvbi1ncm91cCBjb250cm9sbGVyIHRoYXQgd2lsbCBob2xkIHRoZSB0cmFuc2NsdWRlZCBlbGVtZW50XG4uZGlyZWN0aXZlKCd1aWJBY2NvcmRpb25UcmFuc2NsdWRlJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ151aWJBY2NvcmRpb25Hcm91cCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVyKSB7XG4gICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7IHJldHVybiBjb250cm9sbGVyW2F0dHJzLnVpYkFjY29yZGlvblRyYW5zY2x1ZGVdOyB9LCBmdW5jdGlvbihoZWFkaW5nKSB7XG4gICAgICAgIGlmIChoZWFkaW5nKSB7XG4gICAgICAgICAgdmFyIGVsZW0gPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKGdldEhlYWRlclNlbGVjdG9ycygpKSk7XG4gICAgICAgICAgZWxlbS5odG1sKCcnKTtcbiAgICAgICAgICBlbGVtLmFwcGVuZChoZWFkaW5nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldEhlYWRlclNlbGVjdG9ycygpIHtcbiAgICAgIHJldHVybiAndWliLWFjY29yZGlvbi1oZWFkZXIsJyArXG4gICAgICAgICAgJ2RhdGEtdWliLWFjY29yZGlvbi1oZWFkZXIsJyArXG4gICAgICAgICAgJ3gtdWliLWFjY29yZGlvbi1oZWFkZXIsJyArXG4gICAgICAgICAgJ3VpYlxcXFw6YWNjb3JkaW9uLWhlYWRlciwnICtcbiAgICAgICAgICAnW3VpYi1hY2NvcmRpb24taGVhZGVyXSwnICtcbiAgICAgICAgICAnW2RhdGEtdWliLWFjY29yZGlvbi1oZWFkZXJdLCcgK1xuICAgICAgICAgICdbeC11aWItYWNjb3JkaW9uLWhlYWRlcl0nO1xuICB9XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5hbGVydCcsIFtdKVxuXG4uY29udHJvbGxlcignVWliQWxlcnRDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRpbnRlcnBvbGF0ZScsICckdGltZW91dCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGludGVycG9sYXRlLCAkdGltZW91dCkge1xuICAkc2NvcGUuY2xvc2VhYmxlID0gISEkYXR0cnMuY2xvc2U7XG4gICRlbGVtZW50LmFkZENsYXNzKCdhbGVydCcpO1xuICAkYXR0cnMuJHNldCgncm9sZScsICdhbGVydCcpO1xuICBpZiAoJHNjb3BlLmNsb3NlYWJsZSkge1xuICAgICRlbGVtZW50LmFkZENsYXNzKCdhbGVydC1kaXNtaXNzaWJsZScpO1xuICB9XG5cbiAgdmFyIGRpc21pc3NPblRpbWVvdXQgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZGlzbWlzc09uVGltZW91dCkgP1xuICAgICRpbnRlcnBvbGF0ZSgkYXR0cnMuZGlzbWlzc09uVGltZW91dCkoJHNjb3BlLiRwYXJlbnQpIDogbnVsbDtcblxuICBpZiAoZGlzbWlzc09uVGltZW91dCkge1xuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLmNsb3NlKCk7XG4gICAgfSwgcGFyc2VJbnQoZGlzbWlzc09uVGltZW91dCwgMTApKTtcbiAgfVxufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYkFsZXJ0JywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogJ1VpYkFsZXJ0Q29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnYWxlcnQnLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9hbGVydC9hbGVydC5odG1sJztcbiAgICB9LFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgc2NvcGU6IHtcbiAgICAgIGNsb3NlOiAnJidcbiAgICB9XG4gIH07XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5idXR0b25zJywgW10pXG5cbi5jb25zdGFudCgndWliQnV0dG9uQ29uZmlnJywge1xuICBhY3RpdmVDbGFzczogJ2FjdGl2ZScsXG4gIHRvZ2dsZUV2ZW50OiAnY2xpY2snXG59KVxuXG4uY29udHJvbGxlcignVWliQnV0dG9uc0NvbnRyb2xsZXInLCBbJ3VpYkJ1dHRvbkNvbmZpZycsIGZ1bmN0aW9uKGJ1dHRvbkNvbmZpZykge1xuICB0aGlzLmFjdGl2ZUNsYXNzID0gYnV0dG9uQ29uZmlnLmFjdGl2ZUNsYXNzIHx8ICdhY3RpdmUnO1xuICB0aGlzLnRvZ2dsZUV2ZW50ID0gYnV0dG9uQ29uZmlnLnRvZ2dsZUV2ZW50IHx8ICdjbGljayc7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliQnRuUmFkaW8nLCBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFsndWliQnRuUmFkaW8nLCAnbmdNb2RlbCddLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJCdXR0b25zQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnYnV0dG9ucycsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIGJ1dHRvbnNDdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG4gICAgICB2YXIgdW5jaGVja2FibGVFeHByID0gJHBhcnNlKGF0dHJzLnVpYlVuY2hlY2thYmxlKTtcblxuICAgICAgZWxlbWVudC5maW5kKCdpbnB1dCcpLmNzcyh7ZGlzcGxheTogJ25vbmUnfSk7XG5cbiAgICAgIC8vbW9kZWwgLT4gVUlcbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudC50b2dnbGVDbGFzcyhidXR0b25zQ3RybC5hY3RpdmVDbGFzcywgYW5ndWxhci5lcXVhbHMobmdNb2RlbEN0cmwuJG1vZGVsVmFsdWUsIHNjb3BlLiRldmFsKGF0dHJzLnVpYkJ0blJhZGlvKSkpO1xuICAgICAgfTtcblxuICAgICAgLy91aS0+bW9kZWxcbiAgICAgIGVsZW1lbnQub24oYnV0dG9uc0N0cmwudG9nZ2xlRXZlbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYXR0cnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNBY3RpdmUgPSBlbGVtZW50Lmhhc0NsYXNzKGJ1dHRvbnNDdHJsLmFjdGl2ZUNsYXNzKTtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlIHx8IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnVuY2hlY2thYmxlKSkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoaXNBY3RpdmUgPyBudWxsIDogc2NvcGUuJGV2YWwoYXR0cnMudWliQnRuUmFkaW8pKTtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChhdHRycy51aWJVbmNoZWNrYWJsZSkge1xuICAgICAgICBzY29wZS4kd2F0Y2godW5jaGVja2FibGVFeHByLCBmdW5jdGlvbih1bmNoZWNrYWJsZSkge1xuICAgICAgICAgIGF0dHJzLiRzZXQoJ3VuY2hlY2thYmxlJywgdW5jaGVja2FibGUgPyAnJyA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJCdG5DaGVja2JveCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFsndWliQnRuQ2hlY2tib3gnLCAnbmdNb2RlbCddLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJCdXR0b25zQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnYnV0dG9uJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgYnV0dG9uc0N0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgZWxlbWVudC5maW5kKCdpbnB1dCcpLmNzcyh7ZGlzcGxheTogJ25vbmUnfSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldFRydWVWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldENoZWNrYm94VmFsdWUoYXR0cnMuYnRuQ2hlY2tib3hUcnVlLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0RmFsc2VWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldENoZWNrYm94VmFsdWUoYXR0cnMuYnRuQ2hlY2tib3hGYWxzZSwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRDaGVja2JveFZhbHVlKGF0dHJpYnV0ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZChhdHRyaWJ1dGUpID8gc2NvcGUuJGV2YWwoYXR0cmlidXRlKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgLy9tb2RlbCAtPiBVSVxuICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50LnRvZ2dsZUNsYXNzKGJ1dHRvbnNDdHJsLmFjdGl2ZUNsYXNzLCBhbmd1bGFyLmVxdWFscyhuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSwgZ2V0VHJ1ZVZhbHVlKCkpKTtcbiAgICAgIH07XG5cbiAgICAgIC8vdWktPm1vZGVsXG4gICAgICBlbGVtZW50Lm9uKGJ1dHRvbnNDdHJsLnRvZ2dsZUV2ZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGF0dHJzLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudC5oYXNDbGFzcyhidXR0b25zQ3RybC5hY3RpdmVDbGFzcykgPyBnZXRGYWxzZVZhbHVlKCkgOiBnZXRUcnVlVmFsdWUoKSk7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmNhcm91c2VsJywgW10pXG5cbi5jb250cm9sbGVyKCdVaWJDYXJvdXNlbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICckaW50ZXJ2YWwnLCAnJHRpbWVvdXQnLCAnJGFuaW1hdGUnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkaW50ZXJ2YWwsICR0aW1lb3V0LCAkYW5pbWF0ZSkge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgc2xpZGVzID0gc2VsZi5zbGlkZXMgPSAkc2NvcGUuc2xpZGVzID0gW10sXG4gICAgU0xJREVfRElSRUNUSU9OID0gJ3VpYi1zbGlkZURpcmVjdGlvbicsXG4gICAgY3VycmVudEluZGV4ID0gJHNjb3BlLmFjdGl2ZSxcbiAgICBjdXJyZW50SW50ZXJ2YWwsIGlzUGxheWluZywgYnVmZmVyZWRUcmFuc2l0aW9ucyA9IFtdO1xuXG4gIHZhciBkZXN0cm95ZWQgPSBmYWxzZTtcbiAgJGVsZW1lbnQuYWRkQ2xhc3MoJ2Nhcm91c2VsJyk7XG5cbiAgc2VsZi5hZGRTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlLCBlbGVtZW50KSB7XG4gICAgc2xpZGVzLnB1c2goe1xuICAgICAgc2xpZGU6IHNsaWRlLFxuICAgICAgZWxlbWVudDogZWxlbWVudFxuICAgIH0pO1xuICAgIHNsaWRlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiArYS5zbGlkZS5pbmRleCAtICtiLnNsaWRlLmluZGV4O1xuICAgIH0pO1xuICAgIC8vaWYgdGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUgb3IgdGhlIHNsaWRlIGlzIHNldCB0byBhY3RpdmUsIHNlbGVjdCBpdFxuICAgIGlmIChzbGlkZS5pbmRleCA9PT0gJHNjb3BlLmFjdGl2ZSB8fCBzbGlkZXMubGVuZ3RoID09PSAxICYmICFhbmd1bGFyLmlzTnVtYmVyKCRzY29wZS5hY3RpdmUpKSB7XG4gICAgICBpZiAoJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbikge1xuICAgICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY3VycmVudEluZGV4ID0gc2xpZGUuaW5kZXg7XG4gICAgICAkc2NvcGUuYWN0aXZlID0gc2xpZGUuaW5kZXg7XG4gICAgICBzZXRBY3RpdmUoY3VycmVudEluZGV4KTtcbiAgICAgIHNlbGYuc2VsZWN0KHNsaWRlc1tmaW5kU2xpZGVJbmRleChzbGlkZSldKTtcbiAgICAgIGlmIChzbGlkZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICRzY29wZS5wbGF5KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHNlbGYuZ2V0Q3VycmVudEluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzbGlkZXNbaV0uc2xpZGUuaW5kZXggPT09IGN1cnJlbnRJbmRleCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgc2VsZi5uZXh0ID0gJHNjb3BlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3SW5kZXggPSAoc2VsZi5nZXRDdXJyZW50SW5kZXgoKSArIDEpICUgc2xpZGVzLmxlbmd0aDtcblxuICAgIGlmIChuZXdJbmRleCA9PT0gMCAmJiAkc2NvcGUubm9XcmFwKCkpIHtcbiAgICAgICRzY29wZS5wYXVzZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLnNlbGVjdChzbGlkZXNbbmV3SW5kZXhdLCAnbmV4dCcpO1xuICB9O1xuXG4gIHNlbGYucHJldiA9ICRzY29wZS5wcmV2ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld0luZGV4ID0gc2VsZi5nZXRDdXJyZW50SW5kZXgoKSAtIDEgPCAwID8gc2xpZGVzLmxlbmd0aCAtIDEgOiBzZWxmLmdldEN1cnJlbnRJbmRleCgpIC0gMTtcblxuICAgIGlmICgkc2NvcGUubm9XcmFwKCkgJiYgbmV3SW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAkc2NvcGUucGF1c2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5zZWxlY3Qoc2xpZGVzW25ld0luZGV4XSwgJ3ByZXYnKTtcbiAgfTtcblxuICBzZWxmLnJlbW92ZVNsaWRlID0gZnVuY3Rpb24oc2xpZGUpIHtcbiAgICB2YXIgaW5kZXggPSBmaW5kU2xpZGVJbmRleChzbGlkZSk7XG5cbiAgICB2YXIgYnVmZmVyZWRJbmRleCA9IGJ1ZmZlcmVkVHJhbnNpdGlvbnMuaW5kZXhPZihzbGlkZXNbaW5kZXhdKTtcbiAgICBpZiAoYnVmZmVyZWRJbmRleCAhPT0gLTEpIHtcbiAgICAgIGJ1ZmZlcmVkVHJhbnNpdGlvbnMuc3BsaWNlKGJ1ZmZlcmVkSW5kZXgsIDEpO1xuICAgIH1cblxuICAgIC8vZ2V0IHRoZSBpbmRleCBvZiB0aGUgc2xpZGUgaW5zaWRlIHRoZSBjYXJvdXNlbFxuICAgIHNsaWRlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIGlmIChzbGlkZXMubGVuZ3RoID4gMCAmJiBjdXJyZW50SW5kZXggPT09IGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPj0gc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBjdXJyZW50SW5kZXggPSBzbGlkZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgJHNjb3BlLmFjdGl2ZSA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgc2V0QWN0aXZlKGN1cnJlbnRJbmRleCk7XG4gICAgICAgIHNlbGYuc2VsZWN0KHNsaWRlc1tzbGlkZXMubGVuZ3RoIC0gMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICAgICRzY29wZS5hY3RpdmUgPSBjdXJyZW50SW5kZXg7XG4gICAgICAgIHNldEFjdGl2ZShjdXJyZW50SW5kZXgpO1xuICAgICAgICBzZWxmLnNlbGVjdChzbGlkZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRJbmRleCA+IGluZGV4KSB7XG4gICAgICBjdXJyZW50SW5kZXgtLTtcbiAgICAgICRzY29wZS5hY3RpdmUgPSBjdXJyZW50SW5kZXg7XG4gICAgfVxuXG4gICAgLy9jbGVhbiB0aGUgYWN0aXZlIHZhbHVlIHdoZW4gbm8gbW9yZSBzbGlkZVxuICAgIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjdXJyZW50SW5kZXggPSBudWxsO1xuICAgICAgJHNjb3BlLmFjdGl2ZSA9IG51bGw7XG4gICAgICBjbGVhckJ1ZmZlcmVkVHJhbnNpdGlvbnMoKTtcbiAgICB9XG4gIH07XG5cbiAgLyogZGlyZWN0aW9uOiBcInByZXZcIiBvciBcIm5leHRcIiAqL1xuICBzZWxmLnNlbGVjdCA9ICRzY29wZS5zZWxlY3QgPSBmdW5jdGlvbihuZXh0U2xpZGUsIGRpcmVjdGlvbikge1xuICAgIHZhciBuZXh0SW5kZXggPSBmaW5kU2xpZGVJbmRleChuZXh0U2xpZGUuc2xpZGUpO1xuICAgIC8vRGVjaWRlIGRpcmVjdGlvbiBpZiBpdCdzIG5vdCBnaXZlblxuICAgIGlmIChkaXJlY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGlyZWN0aW9uID0gbmV4dEluZGV4ID4gc2VsZi5nZXRDdXJyZW50SW5kZXgoKSA/ICduZXh0JyA6ICdwcmV2JztcbiAgICB9XG4gICAgLy9QcmV2ZW50IHRoaXMgdXNlci10cmlnZ2VyZWQgdHJhbnNpdGlvbiBmcm9tIG9jY3VycmluZyBpZiB0aGVyZSBpcyBhbHJlYWR5IG9uZSBpbiBwcm9ncmVzc1xuICAgIGlmIChuZXh0U2xpZGUuc2xpZGUuaW5kZXggIT09IGN1cnJlbnRJbmRleCAmJlxuICAgICAgISRzY29wZS4kY3VycmVudFRyYW5zaXRpb24pIHtcbiAgICAgIGdvTmV4dChuZXh0U2xpZGUuc2xpZGUsIG5leHRJbmRleCwgZGlyZWN0aW9uKTtcbiAgICB9IGVsc2UgaWYgKG5leHRTbGlkZSAmJiBuZXh0U2xpZGUuc2xpZGUuaW5kZXggIT09IGN1cnJlbnRJbmRleCAmJiAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uKSB7XG4gICAgICBidWZmZXJlZFRyYW5zaXRpb25zLnB1c2goc2xpZGVzW25leHRJbmRleF0pO1xuICAgIH1cbiAgfTtcblxuICAvKiBBbGxvdyBvdXRzaWRlIHBlb3BsZSB0byBjYWxsIGluZGV4T2Ygb24gc2xpZGVzIGFycmF5ICovXG4gICRzY29wZS5pbmRleE9mU2xpZGUgPSBmdW5jdGlvbihzbGlkZSkge1xuICAgIHJldHVybiArc2xpZGUuc2xpZGUuaW5kZXg7XG4gIH07XG5cbiAgJHNjb3BlLmlzQWN0aXZlID0gZnVuY3Rpb24oc2xpZGUpIHtcbiAgICByZXR1cm4gJHNjb3BlLmFjdGl2ZSA9PT0gc2xpZGUuc2xpZGUuaW5kZXg7XG4gIH07XG5cbiAgJHNjb3BlLmlzUHJldkRpc2FibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICRzY29wZS5hY3RpdmUgPT09IDAgJiYgJHNjb3BlLm5vV3JhcCgpO1xuICB9O1xuXG4gICRzY29wZS5pc05leHREaXNhYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkc2NvcGUuYWN0aXZlID09PSBzbGlkZXMubGVuZ3RoIC0gMSAmJiAkc2NvcGUubm9XcmFwKCk7XG4gIH07XG5cbiAgJHNjb3BlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9QYXVzZSkge1xuICAgICAgaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICByZXNldFRpbWVyKCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFpc1BsYXlpbmcpIHtcbiAgICAgIGlzUGxheWluZyA9IHRydWU7XG4gICAgICByZXN0YXJ0VGltZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgJGVsZW1lbnQub24oJ21vdXNlZW50ZXInLCAkc2NvcGUucGF1c2UpO1xuICAkZWxlbWVudC5vbignbW91c2VsZWF2ZScsICRzY29wZS5wbGF5KTtcblxuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmVzZXRUaW1lcigpO1xuICB9KTtcblxuICAkc2NvcGUuJHdhdGNoKCdub1RyYW5zaXRpb24nLCBmdW5jdGlvbihub1RyYW5zaXRpb24pIHtcbiAgICAkYW5pbWF0ZS5lbmFibGVkKCRlbGVtZW50LCAhbm9UcmFuc2l0aW9uKTtcbiAgfSk7XG5cbiAgJHNjb3BlLiR3YXRjaCgnaW50ZXJ2YWwnLCByZXN0YXJ0VGltZXIpO1xuXG4gICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdzbGlkZXMnLCByZXNldFRyYW5zaXRpb24pO1xuXG4gICRzY29wZS4kd2F0Y2goJ2FjdGl2ZScsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoaW5kZXgpICYmIGN1cnJlbnRJbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0uc2xpZGUuaW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZSA9IHNsaWRlc1tpbmRleF07XG4gICAgICBpZiAoc2xpZGUpIHtcbiAgICAgICAgc2V0QWN0aXZlKGluZGV4KTtcbiAgICAgICAgc2VsZi5zZWxlY3Qoc2xpZGVzW2luZGV4XSk7XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2xlYXJCdWZmZXJlZFRyYW5zaXRpb25zKCkge1xuICAgIHdoaWxlIChidWZmZXJlZFRyYW5zaXRpb25zLmxlbmd0aCkge1xuICAgICAgYnVmZmVyZWRUcmFuc2l0aW9ucy5zaGlmdCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNsaWRlQnlJbmRleChpbmRleCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gc2xpZGVzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgaWYgKHNsaWRlc1tpXS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHNsaWRlc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRBY3RpdmUoaW5kZXgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgc2xpZGVzW2ldLnNsaWRlLmFjdGl2ZSA9IGkgPT09IGluZGV4O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvTmV4dChzbGlkZSwgaW5kZXgsIGRpcmVjdGlvbikge1xuICAgIGlmIChkZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhbmd1bGFyLmV4dGVuZChzbGlkZSwge2RpcmVjdGlvbjogZGlyZWN0aW9ufSk7XG4gICAgYW5ndWxhci5leHRlbmQoc2xpZGVzW2N1cnJlbnRJbmRleF0uc2xpZGUgfHwge30sIHtkaXJlY3Rpb246IGRpcmVjdGlvbn0pO1xuICAgIGlmICgkYW5pbWF0ZS5lbmFibGVkKCRlbGVtZW50KSAmJiAhJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbiAmJlxuICAgICAgc2xpZGVzW2luZGV4XS5lbGVtZW50ICYmIHNlbGYuc2xpZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHNsaWRlc1tpbmRleF0uZWxlbWVudC5kYXRhKFNMSURFX0RJUkVDVElPTiwgc2xpZGUuZGlyZWN0aW9uKTtcbiAgICAgIHZhciBjdXJyZW50SWR4ID0gc2VsZi5nZXRDdXJyZW50SW5kZXgoKTtcblxuICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoY3VycmVudElkeCkgJiYgc2xpZGVzW2N1cnJlbnRJZHhdLmVsZW1lbnQpIHtcbiAgICAgICAgc2xpZGVzW2N1cnJlbnRJZHhdLmVsZW1lbnQuZGF0YShTTElERV9ESVJFQ1RJT04sIHNsaWRlLmRpcmVjdGlvbik7XG4gICAgICB9XG5cbiAgICAgICRzY29wZS4kY3VycmVudFRyYW5zaXRpb24gPSB0cnVlO1xuICAgICAgJGFuaW1hdGUub24oJ2FkZENsYXNzJywgc2xpZGVzW2luZGV4XS5lbGVtZW50LCBmdW5jdGlvbihlbGVtZW50LCBwaGFzZSkge1xuICAgICAgICBpZiAocGhhc2UgPT09ICdjbG9zZScpIHtcbiAgICAgICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gbnVsbDtcbiAgICAgICAgICAkYW5pbWF0ZS5vZmYoJ2FkZENsYXNzJywgZWxlbWVudCk7XG4gICAgICAgICAgaWYgKGJ1ZmZlcmVkVHJhbnNpdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbmV4dFNsaWRlID0gYnVmZmVyZWRUcmFuc2l0aW9ucy5wb3AoKS5zbGlkZTtcbiAgICAgICAgICAgIHZhciBuZXh0SW5kZXggPSBuZXh0U2xpZGUuaW5kZXg7XG4gICAgICAgICAgICB2YXIgbmV4dERpcmVjdGlvbiA9IG5leHRJbmRleCA+IHNlbGYuZ2V0Q3VycmVudEluZGV4KCkgPyAnbmV4dCcgOiAncHJldic7XG4gICAgICAgICAgICBjbGVhckJ1ZmZlcmVkVHJhbnNpdGlvbnMoKTtcblxuICAgICAgICAgICAgZ29OZXh0KG5leHRTbGlkZSwgbmV4dEluZGV4LCBuZXh0RGlyZWN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS5hY3RpdmUgPSBzbGlkZS5pbmRleDtcbiAgICBjdXJyZW50SW5kZXggPSBzbGlkZS5pbmRleDtcbiAgICBzZXRBY3RpdmUoaW5kZXgpO1xuXG4gICAgLy9ldmVyeSB0aW1lIHlvdSBjaGFuZ2Ugc2xpZGVzLCByZXNldCB0aGUgdGltZXJcbiAgICByZXN0YXJ0VGltZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRTbGlkZUluZGV4KHNsaWRlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzbGlkZXNbaV0uc2xpZGUgPT09IHNsaWRlKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VGltZXIoKSB7XG4gICAgaWYgKGN1cnJlbnRJbnRlcnZhbCkge1xuICAgICAgJGludGVydmFsLmNhbmNlbChjdXJyZW50SW50ZXJ2YWwpO1xuICAgICAgY3VycmVudEludGVydmFsID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyYW5zaXRpb24oc2xpZGVzKSB7XG4gICAgaWYgKCFzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gbnVsbDtcbiAgICAgIGNsZWFyQnVmZmVyZWRUcmFuc2l0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3RhcnRUaW1lcigpIHtcbiAgICByZXNldFRpbWVyKCk7XG4gICAgdmFyIGludGVydmFsID0gKyRzY29wZS5pbnRlcnZhbDtcbiAgICBpZiAoIWlzTmFOKGludGVydmFsKSAmJiBpbnRlcnZhbCA+IDApIHtcbiAgICAgIGN1cnJlbnRJbnRlcnZhbCA9ICRpbnRlcnZhbCh0aW1lckZuLCBpbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJGbigpIHtcbiAgICB2YXIgaW50ZXJ2YWwgPSArJHNjb3BlLmludGVydmFsO1xuICAgIGlmIChpc1BsYXlpbmcgJiYgIWlzTmFOKGludGVydmFsKSAmJiBpbnRlcnZhbCA+IDAgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgJHNjb3BlLm5leHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHNjb3BlLnBhdXNlKCk7XG4gICAgfVxuICB9XG59XSlcblxuLmRpcmVjdGl2ZSgndWliQ2Fyb3VzZWwnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJDYXJvdXNlbENvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ2Nhcm91c2VsJyxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbCc7XG4gICAgfSxcbiAgICBzY29wZToge1xuICAgICAgYWN0aXZlOiAnPScsXG4gICAgICBpbnRlcnZhbDogJz0nLFxuICAgICAgbm9UcmFuc2l0aW9uOiAnPScsXG4gICAgICBub1BhdXNlOiAnPScsXG4gICAgICBub1dyYXA6ICcmJ1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlNsaWRlJywgWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ151aWJDYXJvdXNlbCcsXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbCc7XG4gICAgfSxcbiAgICBzY29wZToge1xuICAgICAgYWN0dWFsOiAnPT8nLFxuICAgICAgaW5kZXg6ICc9PydcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNhcm91c2VsQ3RybCkge1xuICAgICAgZWxlbWVudC5hZGRDbGFzcygnaXRlbScpO1xuICAgICAgY2Fyb3VzZWxDdHJsLmFkZFNsaWRlKHNjb3BlLCBlbGVtZW50KTtcbiAgICAgIC8vd2hlbiB0aGUgc2NvcGUgaXMgZGVzdHJveWVkIHRoZW4gcmVtb3ZlIHRoZSBzbGlkZSBmcm9tIHRoZSBjdXJyZW50IHNsaWRlcyBhcnJheVxuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjYXJvdXNlbEN0cmwucmVtb3ZlU2xpZGUoc2NvcGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLiR3YXRjaCgnYWN0aXZlJywgZnVuY3Rpb24oYWN0aXZlKSB7XG4gICAgICAgICRhbmltYXRlW2FjdGl2ZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShlbGVtZW50LCAnYWN0aXZlJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XSlcblxuLmFuaW1hdGlvbignLml0ZW0nLCBbJyRhbmltYXRlQ3NzJyxcbmZ1bmN0aW9uKCRhbmltYXRlQ3NzKSB7XG4gIHZhciBTTElERV9ESVJFQ1RJT04gPSAndWliLXNsaWRlRGlyZWN0aW9uJztcblxuICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUsIGNhbGxiYWNrKSB7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJlZm9yZUFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcbiAgICAgIGlmIChjbGFzc05hbWUgPT09ICdhY3RpdmUnKSB7XG4gICAgICAgIHZhciBzdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBlbGVtZW50LmRhdGEoU0xJREVfRElSRUNUSU9OKTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbkNsYXNzID0gZGlyZWN0aW9uID09PSAnbmV4dCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICB2YXIgcmVtb3ZlQ2xhc3NGbiA9IHJlbW92ZUNsYXNzLmJpbmQodGhpcywgZWxlbWVudCxcbiAgICAgICAgICBkaXJlY3Rpb25DbGFzcyArICcgJyArIGRpcmVjdGlvbiwgZG9uZSk7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoZGlyZWN0aW9uKTtcblxuICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7YWRkQ2xhc3M6IGRpcmVjdGlvbkNsYXNzfSlcbiAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgIC5kb25lKHJlbW92ZUNsYXNzRm4pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGRvbmUoKTtcbiAgICB9LFxuICAgIGJlZm9yZVJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7XG4gICAgICBpZiAoY2xhc3NOYW1lID09PSAnYWN0aXZlJykge1xuICAgICAgICB2YXIgc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZWxlbWVudC5kYXRhKFNMSURFX0RJUkVDVElPTik7XG4gICAgICAgIHZhciBkaXJlY3Rpb25DbGFzcyA9IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgdmFyIHJlbW92ZUNsYXNzRm4gPSByZW1vdmVDbGFzcy5iaW5kKHRoaXMsIGVsZW1lbnQsIGRpcmVjdGlvbkNsYXNzLCBkb25lKTtcblxuICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7YWRkQ2xhc3M6IGRpcmVjdGlvbkNsYXNzfSlcbiAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgIC5kb25lKHJlbW92ZUNsYXNzRm4pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGRvbmUoKTtcbiAgICB9XG4gIH07XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZGF0ZXBhcnNlcicsIFtdKVxuXG4uc2VydmljZSgndWliRGF0ZVBhcnNlcicsIFsnJGxvZycsICckbG9jYWxlJywgJ2RhdGVGaWx0ZXInLCAnb3JkZXJCeUZpbHRlcicsIGZ1bmN0aW9uKCRsb2csICRsb2NhbGUsIGRhdGVGaWx0ZXIsIG9yZGVyQnlGaWx0ZXIpIHtcbiAgLy8gUHVsbGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21ib3N0b2NrL2QzL2Jsb2IvbWFzdGVyL3NyYy9mb3JtYXQvcmVxdW90ZS5qc1xuICB2YXIgU1BFQ0lBTF9DSEFSQUNURVJTX1JFR0VYUCA9IC9bXFxcXFxcXlxcJFxcKlxcK1xcP1xcfFxcW1xcXVxcKFxcKVxcLlxce1xcfV0vZztcblxuICB2YXIgbG9jYWxlSWQ7XG4gIHZhciBmb3JtYXRDb2RlVG9SZWdleDtcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICBsb2NhbGVJZCA9ICRsb2NhbGUuaWQ7XG5cbiAgICB0aGlzLnBhcnNlcnMgPSB7fTtcbiAgICB0aGlzLmZvcm1hdHRlcnMgPSB7fTtcblxuICAgIGZvcm1hdENvZGVUb1JlZ2V4ID0gW1xuICAgICAge1xuICAgICAgICBrZXk6ICd5eXl5JyxcbiAgICAgICAgcmVnZXg6ICdcXFxcZHs0fScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLnllYXIgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHZhciBfZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgX2RhdGUuc2V0RnVsbFllYXIoTWF0aC5hYnMoZGF0ZS5nZXRGdWxsWWVhcigpKSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGVGaWx0ZXIoX2RhdGUsICd5eXl5Jyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3l5JyxcbiAgICAgICAgcmVnZXg6ICdcXFxcZHsyfScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB2YWx1ZSA9ICt2YWx1ZTsgdGhpcy55ZWFyID0gdmFsdWUgPCA2OSA/IHZhbHVlICsgMjAwMCA6IHZhbHVlICsgMTkwMDsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgdmFyIF9kYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICBfZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmFicyhkYXRlLmdldEZ1bGxZZWFyKCkpKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZUZpbHRlcihfZGF0ZSwgJ3l5Jyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3knLFxuICAgICAgICByZWdleDogJ1xcXFxkezEsNH0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy55ZWFyID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB2YXIgX2RhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIF9kYXRlLnNldEZ1bGxZZWFyKE1hdGguYWJzKGRhdGUuZ2V0RnVsbFllYXIoKSkpO1xuICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKF9kYXRlLCAneScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdNIScsXG4gICAgICAgIHJlZ2V4OiAnMD9bMS05XXwxWzAtMl0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5tb250aCA9IHZhbHVlIC0gMTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZGF0ZS5nZXRNb250aCgpO1xuICAgICAgICAgIGlmICgvXlswLTldJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdNTScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdNJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ01NTU0nLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLk1PTlRILmpvaW4oJ3wnKSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubW9udGggPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuTU9OVEguaW5kZXhPZih2YWx1ZSk7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnTU1NTScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdNTU0nLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLlNIT1JUTU9OVEguam9pbignfCcpLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5tb250aCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5TSE9SVE1PTlRILmluZGV4T2YodmFsdWUpOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ01NTScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdNTScsXG4gICAgICAgIHJlZ2V4OiAnMFsxLTldfDFbMC0yXScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1vbnRoID0gdmFsdWUgLSAxOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ01NJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ00nLFxuICAgICAgICByZWdleDogJ1sxLTldfDFbMC0yXScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1vbnRoID0gdmFsdWUgLSAxOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ00nKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnZCEnLFxuICAgICAgICByZWdleDogJ1swLTJdP1swLTldezF9fDNbMC0xXXsxfScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmRhdGUgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGUuZ2V0RGF0ZSgpO1xuICAgICAgICAgIGlmICgvXlsxLTldJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdkZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdkJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ2RkJyxcbiAgICAgICAgcmVnZXg6ICdbMC0yXVswLTldezF9fDNbMC0xXXsxfScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmRhdGUgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnZGQnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnZCcsXG4gICAgICAgIHJlZ2V4OiAnWzEtMl0/WzAtOV17MX18M1swLTFdezF9JyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuZGF0ZSA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdkJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0VFRUUnLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkRBWS5qb2luKCd8JyksXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnRUVFRScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdFRUUnLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLlNIT1JUREFZLmpvaW4oJ3wnKSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdFRUUnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnSEgnLFxuICAgICAgICByZWdleDogJyg/OjB8MSlbMC05XXwyWzAtM10nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5ob3VycyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdISCcpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdoaCcsXG4gICAgICAgIHJlZ2V4OiAnMFswLTldfDFbMC0yXScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmhvdXJzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ2hoJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0gnLFxuICAgICAgICByZWdleDogJzE/WzAtOV18MlswLTNdJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuaG91cnMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnSCcpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdoJyxcbiAgICAgICAgcmVnZXg6ICdbMC05XXwxWzAtMl0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5ob3VycyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdoJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ21tJyxcbiAgICAgICAgcmVnZXg6ICdbMC01XVswLTldJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubWludXRlcyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdtbScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdtJyxcbiAgICAgICAgcmVnZXg6ICdbMC05XXxbMS01XVswLTldJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubWludXRlcyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdtJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3NzcycsXG4gICAgICAgIHJlZ2V4OiAnWzAtOV1bMC05XVswLTldJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubWlsbGlzZWNvbmRzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ3NzcycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdzcycsXG4gICAgICAgIHJlZ2V4OiAnWzAtNV1bMC05XScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLnNlY29uZHMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnc3MnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAncycsXG4gICAgICAgIHJlZ2V4OiAnWzAtOV18WzEtNV1bMC05XScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLnNlY29uZHMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAncycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdhJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5BTVBNUy5qb2luKCd8JyksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICh0aGlzLmhvdXJzID09PSAxMikge1xuICAgICAgICAgICAgdGhpcy5ob3VycyA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSAnUE0nKSB7XG4gICAgICAgICAgICB0aGlzLmhvdXJzICs9IDEyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdhJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ1onLFxuICAgICAgICByZWdleDogJ1srLV1cXFxcZHs0fScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciBtYXRjaGVzID0gdmFsdWUubWF0Y2goLyhbKy1dKShcXGR7Mn0pKFxcZHsyfSkvKSxcbiAgICAgICAgICAgIHNpZ24gPSBtYXRjaGVzWzFdLFxuICAgICAgICAgICAgaG91cnMgPSBtYXRjaGVzWzJdLFxuICAgICAgICAgICAgbWludXRlcyA9IG1hdGNoZXNbM107XG4gICAgICAgICAgdGhpcy5ob3VycyArPSB0b0ludChzaWduICsgaG91cnMpO1xuICAgICAgICAgIHRoaXMubWludXRlcyArPSB0b0ludChzaWduICsgbWludXRlcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdaJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3d3JyxcbiAgICAgICAgcmVnZXg6ICdbMC00XVswLTldfDVbMC0zXScsXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnd3cnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAndycsXG4gICAgICAgIHJlZ2V4OiAnWzAtOV18WzEtNF1bMC05XXw1WzAtM10nLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ3cnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnR0dHRycsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuRVJBTkFNRVMuam9pbignfCcpLnJlcGxhY2UoL1xccy9nLCAnXFxcXHMnKSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdHR0dHJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0dHRycsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuRVJBUy5qb2luKCd8JyksXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnR0dHJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0dHJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5FUkFTLmpvaW4oJ3wnKSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdHRycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdHJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5FUkFTLmpvaW4oJ3wnKSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdHJyk7IH1cbiAgICAgIH1cbiAgICBdO1xuICB9O1xuXG4gIHRoaXMuaW5pdCgpO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBhcnNlcihmb3JtYXQpIHtcbiAgICB2YXIgbWFwID0gW10sIHJlZ2V4ID0gZm9ybWF0LnNwbGl0KCcnKTtcblxuICAgIC8vIGNoZWNrIGZvciBsaXRlcmFsIHZhbHVlc1xuICAgIHZhciBxdW90ZUluZGV4ID0gZm9ybWF0LmluZGV4T2YoJ1xcJycpO1xuICAgIGlmIChxdW90ZUluZGV4ID4gLTEpIHtcbiAgICAgIHZhciBpbkxpdGVyYWwgPSBmYWxzZTtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5zcGxpdCgnJyk7XG4gICAgICBmb3IgKHZhciBpID0gcXVvdGVJbmRleDsgaSA8IGZvcm1hdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaW5MaXRlcmFsKSB7XG4gICAgICAgICAgaWYgKGZvcm1hdFtpXSA9PT0gJ1xcJycpIHtcbiAgICAgICAgICAgIGlmIChpICsgMSA8IGZvcm1hdC5sZW5ndGggJiYgZm9ybWF0W2krMV0gPT09ICdcXCcnKSB7IC8vIGVzY2FwZWQgc2luZ2xlIHF1b3RlXG4gICAgICAgICAgICAgIGZvcm1hdFtpKzFdID0gJyQnO1xuICAgICAgICAgICAgICByZWdleFtpKzFdID0gJyc7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBlbmQgb2YgbGl0ZXJhbFxuICAgICAgICAgICAgICByZWdleFtpXSA9ICcnO1xuICAgICAgICAgICAgICBpbkxpdGVyYWwgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9ybWF0W2ldID0gJyQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChmb3JtYXRbaV0gPT09ICdcXCcnKSB7IC8vIHN0YXJ0IG9mIGxpdGVyYWxcbiAgICAgICAgICAgIGZvcm1hdFtpXSA9ICckJztcbiAgICAgICAgICAgIHJlZ2V4W2ldID0gJyc7XG4gICAgICAgICAgICBpbkxpdGVyYWwgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3JtYXQgPSBmb3JtYXQuam9pbignJyk7XG4gICAgfVxuXG4gICAgYW5ndWxhci5mb3JFYWNoKGZvcm1hdENvZGVUb1JlZ2V4LCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgaW5kZXggPSBmb3JtYXQuaW5kZXhPZihkYXRhLmtleSk7XG5cbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5zcGxpdCgnJyk7XG5cbiAgICAgICAgcmVnZXhbaW5kZXhdID0gJygnICsgZGF0YS5yZWdleCArICcpJztcbiAgICAgICAgZm9ybWF0W2luZGV4XSA9ICckJzsgLy8gQ3VzdG9tIHN5bWJvbCB0byBkZWZpbmUgY29uc3VtZWQgcGFydCBvZiBmb3JtYXRcbiAgICAgICAgZm9yICh2YXIgaSA9IGluZGV4ICsgMSwgbiA9IGluZGV4ICsgZGF0YS5rZXkubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcmVnZXhbaV0gPSAnJztcbiAgICAgICAgICBmb3JtYXRbaV0gPSAnJCc7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LmpvaW4oJycpO1xuXG4gICAgICAgIG1hcC5wdXNoKHtcbiAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAga2V5OiBkYXRhLmtleSxcbiAgICAgICAgICBhcHBseTogZGF0YS5hcHBseSxcbiAgICAgICAgICBtYXRjaGVyOiBkYXRhLnJlZ2V4XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZ2V4OiBuZXcgUmVnRXhwKCdeJyArIHJlZ2V4LmpvaW4oJycpICsgJyQnKSxcbiAgICAgIG1hcDogb3JkZXJCeUZpbHRlcihtYXAsICdpbmRleCcpXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZvcm1hdHRlcihmb3JtYXQpIHtcbiAgICB2YXIgZm9ybWF0dGVycyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgZm9ybWF0dGVyLCBsaXRlcmFsSWR4O1xuICAgIHdoaWxlIChpIDwgZm9ybWF0Lmxlbmd0aCkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIobGl0ZXJhbElkeCkpIHtcbiAgICAgICAgaWYgKGZvcm1hdC5jaGFyQXQoaSkgPT09ICdcXCcnKSB7XG4gICAgICAgICAgaWYgKGkgKyAxID49IGZvcm1hdC5sZW5ndGggfHwgZm9ybWF0LmNoYXJBdChpICsgMSkgIT09ICdcXCcnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZXJzLnB1c2goY29uc3RydWN0TGl0ZXJhbEZvcm1hdHRlcihmb3JtYXQsIGxpdGVyYWxJZHgsIGkpKTtcbiAgICAgICAgICAgIGxpdGVyYWxJZHggPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpID09PSBmb3JtYXQubGVuZ3RoKSB7XG4gICAgICAgICAgd2hpbGUgKGxpdGVyYWxJZHggPCBmb3JtYXQubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZXIgPSBjb25zdHJ1Y3RGb3JtYXR0ZXJGcm9tSWR4KGZvcm1hdCwgbGl0ZXJhbElkeCk7XG4gICAgICAgICAgICBmb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTtcbiAgICAgICAgICAgIGxpdGVyYWxJZHggPSBmb3JtYXR0ZXIuZW5kSWR4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGkrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3JtYXQuY2hhckF0KGkpID09PSAnXFwnJykge1xuICAgICAgICBsaXRlcmFsSWR4ID0gaTtcbiAgICAgICAgaSsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZm9ybWF0dGVyID0gY29uc3RydWN0Rm9ybWF0dGVyRnJvbUlkeChmb3JtYXQsIGkpO1xuXG4gICAgICBmb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyLnBhcnNlcik7XG4gICAgICBpID0gZm9ybWF0dGVyLmVuZElkeDtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0dGVycztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0cnVjdExpdGVyYWxGb3JtYXR0ZXIoZm9ybWF0LCBsaXRlcmFsSWR4LCBlbmRJZHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZm9ybWF0LnN1YnN0cihsaXRlcmFsSWR4ICsgMSwgZW5kSWR4IC0gbGl0ZXJhbElkeCAtIDEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdHJ1Y3RGb3JtYXR0ZXJGcm9tSWR4KGZvcm1hdCwgaSkge1xuICAgIHZhciBjdXJyZW50UG9zU3RyID0gZm9ybWF0LnN1YnN0cihpKTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZvcm1hdENvZGVUb1JlZ2V4Lmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAobmV3IFJlZ0V4cCgnXicgKyBmb3JtYXRDb2RlVG9SZWdleFtqXS5rZXkpLnRlc3QoY3VycmVudFBvc1N0cikpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBmb3JtYXRDb2RlVG9SZWdleFtqXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlbmRJZHg6IGkgKyBkYXRhLmtleS5sZW5ndGgsXG4gICAgICAgICAgcGFyc2VyOiBkYXRhLmZvcm1hdHRlclxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBlbmRJZHg6IGkgKyAxLFxuICAgICAgcGFyc2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQb3NTdHIuY2hhckF0KDApO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB0aGlzLmZpbHRlciA9IGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCkge1xuICAgIGlmICghYW5ndWxhci5pc0RhdGUoZGF0ZSkgfHwgaXNOYU4oZGF0ZSkgfHwgIWZvcm1hdCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZvcm1hdCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUU1tmb3JtYXRdIHx8IGZvcm1hdDtcblxuICAgIGlmICgkbG9jYWxlLmlkICE9PSBsb2NhbGVJZCkge1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmZvcm1hdHRlcnNbZm9ybWF0XSkge1xuICAgICAgdGhpcy5mb3JtYXR0ZXJzW2Zvcm1hdF0gPSBjcmVhdGVGb3JtYXR0ZXIoZm9ybWF0KTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVycyA9IHRoaXMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXG4gICAgcmV0dXJuIGZvcm1hdHRlcnMucmVkdWNlKGZ1bmN0aW9uKHN0ciwgZm9ybWF0dGVyKSB7XG4gICAgICByZXR1cm4gc3RyICsgZm9ybWF0dGVyKGRhdGUpO1xuICAgIH0sICcnKTtcbiAgfTtcblxuICB0aGlzLnBhcnNlID0gZnVuY3Rpb24oaW5wdXQsIGZvcm1hdCwgYmFzZURhdGUpIHtcbiAgICBpZiAoIWFuZ3VsYXIuaXNTdHJpbmcoaW5wdXQpIHx8ICFmb3JtYXQpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7XG4gICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoU1BFQ0lBTF9DSEFSQUNURVJTX1JFR0VYUCwgJ1xcXFwkJicpO1xuXG4gICAgaWYgKCRsb2NhbGUuaWQgIT09IGxvY2FsZUlkKSB7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucGFyc2Vyc1tmb3JtYXRdKSB7XG4gICAgICB0aGlzLnBhcnNlcnNbZm9ybWF0XSA9IGNyZWF0ZVBhcnNlcihmb3JtYXQsICdhcHBseScpO1xuICAgIH1cblxuICAgIHZhciBwYXJzZXIgPSB0aGlzLnBhcnNlcnNbZm9ybWF0XSxcbiAgICAgICAgcmVnZXggPSBwYXJzZXIucmVnZXgsXG4gICAgICAgIG1hcCA9IHBhcnNlci5tYXAsXG4gICAgICAgIHJlc3VsdHMgPSBpbnB1dC5tYXRjaChyZWdleCksXG4gICAgICAgIHR6T2Zmc2V0ID0gZmFsc2U7XG4gICAgaWYgKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgIHZhciBmaWVsZHMsIGR0O1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEYXRlKGJhc2VEYXRlKSAmJiAhaXNOYU4oYmFzZURhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICBmaWVsZHMgPSB7XG4gICAgICAgICAgeWVhcjogYmFzZURhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICBtb250aDogYmFzZURhdGUuZ2V0TW9udGgoKSxcbiAgICAgICAgICBkYXRlOiBiYXNlRGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgaG91cnM6IGJhc2VEYXRlLmdldEhvdXJzKCksXG4gICAgICAgICAgbWludXRlczogYmFzZURhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgIHNlY29uZHM6IGJhc2VEYXRlLmdldFNlY29uZHMoKSxcbiAgICAgICAgICBtaWxsaXNlY29uZHM6IGJhc2VEYXRlLmdldE1pbGxpc2Vjb25kcygpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYmFzZURhdGUpIHtcbiAgICAgICAgICAkbG9nLndhcm4oJ2RhdGVwYXJzZXI6JywgJ2Jhc2VEYXRlIGlzIG5vdCBhIHZhbGlkIGRhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICBmaWVsZHMgPSB7IHllYXI6IDE5MDAsIG1vbnRoOiAwLCBkYXRlOiAxLCBob3VyczogMCwgbWludXRlczogMCwgc2Vjb25kczogMCwgbWlsbGlzZWNvbmRzOiAwIH07XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAxLCBuID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIG1hcHBlciA9IG1hcFtpIC0gMV07XG4gICAgICAgIGlmIChtYXBwZXIubWF0Y2hlciA9PT0gJ1onKSB7XG4gICAgICAgICAgdHpPZmZzZXQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hcHBlci5hcHBseSkge1xuICAgICAgICAgIG1hcHBlci5hcHBseS5jYWxsKGZpZWxkcywgcmVzdWx0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGVzZXR0ZXIgPSB0ek9mZnNldCA/IERhdGUucHJvdG90eXBlLnNldFVUQ0Z1bGxZZWFyIDpcbiAgICAgICAgRGF0ZS5wcm90b3R5cGUuc2V0RnVsbFllYXI7XG4gICAgICB2YXIgdGltZXNldHRlciA9IHR6T2Zmc2V0ID8gRGF0ZS5wcm90b3R5cGUuc2V0VVRDSG91cnMgOlxuICAgICAgICBEYXRlLnByb3RvdHlwZS5zZXRIb3VycztcblxuICAgICAgaWYgKGlzVmFsaWQoZmllbGRzLnllYXIsIGZpZWxkcy5tb250aCwgZmllbGRzLmRhdGUpKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGF0ZShiYXNlRGF0ZSkgJiYgIWlzTmFOKGJhc2VEYXRlLmdldFRpbWUoKSkgJiYgIXR6T2Zmc2V0KSB7XG4gICAgICAgICAgZHQgPSBuZXcgRGF0ZShiYXNlRGF0ZSk7XG4gICAgICAgICAgZGF0ZXNldHRlci5jYWxsKGR0LCBmaWVsZHMueWVhciwgZmllbGRzLm1vbnRoLCBmaWVsZHMuZGF0ZSk7XG4gICAgICAgICAgdGltZXNldHRlci5jYWxsKGR0LCBmaWVsZHMuaG91cnMsIGZpZWxkcy5taW51dGVzLFxuICAgICAgICAgICAgZmllbGRzLnNlY29uZHMsIGZpZWxkcy5taWxsaXNlY29uZHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGR0ID0gbmV3IERhdGUoMCk7XG4gICAgICAgICAgZGF0ZXNldHRlci5jYWxsKGR0LCBmaWVsZHMueWVhciwgZmllbGRzLm1vbnRoLCBmaWVsZHMuZGF0ZSk7XG4gICAgICAgICAgdGltZXNldHRlci5jYWxsKGR0LCBmaWVsZHMuaG91cnMgfHwgMCwgZmllbGRzLm1pbnV0ZXMgfHwgMCxcbiAgICAgICAgICAgIGZpZWxkcy5zZWNvbmRzIHx8IDAsIGZpZWxkcy5taWxsaXNlY29uZHMgfHwgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGR0O1xuICAgIH1cbiAgfTtcblxuICAvLyBDaGVjayBpZiBkYXRlIGlzIHZhbGlkIGZvciBzcGVjaWZpYyBtb250aCAoYW5kIHllYXIgZm9yIEZlYnJ1YXJ5KS5cbiAgLy8gTW9udGg6IDAgPSBKYW4sIDEgPSBGZWIsIGV0Y1xuICBmdW5jdGlvbiBpc1ZhbGlkKHllYXIsIG1vbnRoLCBkYXRlKSB7XG4gICAgaWYgKGRhdGUgPCAxKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG1vbnRoID09PSAxICYmIGRhdGUgPiAyOCkge1xuICAgICAgcmV0dXJuIGRhdGUgPT09IDI5ICYmICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDApO1xuICAgIH1cblxuICAgIGlmIChtb250aCA9PT0gMyB8fCBtb250aCA9PT0gNSB8fCBtb250aCA9PT0gOCB8fCBtb250aCA9PT0gMTApIHtcbiAgICAgIHJldHVybiBkYXRlIDwgMzE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiB0b0ludChzdHIpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCk7XG4gIH1cblxuICB0aGlzLnRvVGltZXpvbmUgPSB0b1RpbWV6b25lO1xuICB0aGlzLmZyb21UaW1lem9uZSA9IGZyb21UaW1lem9uZTtcbiAgdGhpcy50aW1lem9uZVRvT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldDtcbiAgdGhpcy5hZGREYXRlTWludXRlcyA9IGFkZERhdGVNaW51dGVzO1xuICB0aGlzLmNvbnZlcnRUaW1lem9uZVRvTG9jYWwgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsO1xuXG4gIGZ1bmN0aW9uIHRvVGltZXpvbmUoZGF0ZSwgdGltZXpvbmUpIHtcbiAgICByZXR1cm4gZGF0ZSAmJiB0aW1lem9uZSA/IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwoZGF0ZSwgdGltZXpvbmUpIDogZGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyb21UaW1lem9uZShkYXRlLCB0aW1lem9uZSkge1xuICAgIHJldHVybiBkYXRlICYmIHRpbWV6b25lID8gY29udmVydFRpbWV6b25lVG9Mb2NhbChkYXRlLCB0aW1lem9uZSwgdHJ1ZSkgOiBkYXRlO1xuICB9XG5cbiAgLy9odHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2Jsb2IvNjIyYzQyMTY5Njk5ZWMwN2ZjNmRhYWExOWZlNmQyMjRlNWQyZjcwZS9zcmMvQW5ndWxhci5qcyNMMTIwN1xuICBmdW5jdGlvbiB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBmYWxsYmFjaykge1xuICAgIHRpbWV6b25lID0gdGltZXpvbmUucmVwbGFjZSgvOi9nLCAnJyk7XG4gICAgdmFyIHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0ID0gRGF0ZS5wYXJzZSgnSmFuIDAxLCAxOTcwIDAwOjAwOjAwICcgKyB0aW1lem9uZSkgLyA2MDAwMDtcbiAgICByZXR1cm4gaXNOYU4ocmVxdWVzdGVkVGltZXpvbmVPZmZzZXQpID8gZmFsbGJhY2sgOiByZXF1ZXN0ZWRUaW1lem9uZU9mZnNldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZERhdGVNaW51dGVzKGRhdGUsIG1pbnV0ZXMpIHtcbiAgICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgIGRhdGUuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSArIG1pbnV0ZXMpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFRpbWV6b25lVG9Mb2NhbChkYXRlLCB0aW1lem9uZSwgcmV2ZXJzZSkge1xuICAgIHJldmVyc2UgPSByZXZlcnNlID8gLTEgOiAxO1xuICAgIHZhciBkYXRlVGltZXpvbmVPZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZGF0ZVRpbWV6b25lT2Zmc2V0KTtcbiAgICByZXR1cm4gYWRkRGF0ZU1pbnV0ZXMoZGF0ZSwgcmV2ZXJzZSAqICh0aW1lem9uZU9mZnNldCAtIGRhdGVUaW1lem9uZU9mZnNldCkpO1xuICB9XG59XSk7XG5cbi8vIEF2b2lkaW5nIHVzZSBvZiBuZy1jbGFzcyBhcyBpdCBjcmVhdGVzIGEgbG90IG9mIHdhdGNoZXJzIHdoZW4gYSBjbGFzcyBpcyB0byBiZSBhcHBsaWVkIHRvXG4vLyBhdCBtb3N0IG9uZSBlbGVtZW50LlxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5pc0NsYXNzJywgW10pXG4uZGlyZWN0aXZlKCd1aWJJc0NsYXNzJywgW1xuICAgICAgICAgJyRhbmltYXRlJyxcbmZ1bmN0aW9uICgkYW5pbWF0ZSkge1xuICAvLyAgICAgICAgICAgICAgICAgICAgMTExMTExMTEgICAgICAgICAgMjIyMjIyMjJcbiAgdmFyIE9OX1JFR0VYUCA9IC9eXFxzKihbXFxzXFxTXSs/KVxccytvblxccysoW1xcc1xcU10rPylcXHMqJC87XG4gIC8vICAgICAgICAgICAgICAgICAgICAxMTExMTExMSAgICAgICAgICAgMjIyMjIyMjJcbiAgdmFyIElTX1JFR0VYUCA9IC9eXFxzKihbXFxzXFxTXSs/KVxccytmb3JcXHMrKFtcXHNcXFNdKz8pXFxzKiQvO1xuXG4gIHZhciBkYXRhUGVyVHJhY2tlZCA9IHt9O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb21waWxlOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICB2YXIgbGlua2VkU2NvcGVzID0gW107XG4gICAgICB2YXIgaW5zdGFuY2VzID0gW107XG4gICAgICB2YXIgZXhwVG9EYXRhID0ge307XG4gICAgICB2YXIgbGFzdEFjdGl2YXRlZCA9IG51bGw7XG4gICAgICB2YXIgb25FeHBNYXRjaGVzID0gdEF0dHJzLnVpYklzQ2xhc3MubWF0Y2goT05fUkVHRVhQKTtcbiAgICAgIHZhciBvbkV4cCA9IG9uRXhwTWF0Y2hlc1syXTtcbiAgICAgIHZhciBleHBzU3RyID0gb25FeHBNYXRjaGVzWzFdO1xuICAgICAgdmFyIGV4cHMgPSBleHBzU3RyLnNwbGl0KCcsJyk7XG5cbiAgICAgIHJldHVybiBsaW5rRm47XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgbGlua2VkU2NvcGVzLnB1c2goc2NvcGUpO1xuICAgICAgICBpbnN0YW5jZXMucHVzaCh7XG4gICAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwcy5mb3JFYWNoKGZ1bmN0aW9uKGV4cCwgaykge1xuICAgICAgICAgIGFkZEZvckV4cChleHAsIHNjb3BlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIHJlbW92ZVNjb3BlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYWRkRm9yRXhwKGV4cCwgc2NvcGUpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBleHAubWF0Y2goSVNfUkVHRVhQKTtcbiAgICAgICAgdmFyIGNsYXp6ID0gc2NvcGUuJGV2YWwobWF0Y2hlc1sxXSk7XG4gICAgICAgIHZhciBjb21wYXJlV2l0aEV4cCA9IG1hdGNoZXNbMl07XG4gICAgICAgIHZhciBkYXRhID0gZXhwVG9EYXRhW2V4cF07XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIHZhciB3YXRjaEZuID0gZnVuY3Rpb24oY29tcGFyZVdpdGhWYWwpIHtcbiAgICAgICAgICAgIHZhciBuZXdBY3RpdmF0ZWQgPSBudWxsO1xuICAgICAgICAgICAgaW5zdGFuY2VzLnNvbWUoZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgdmFyIHRoaXNWYWwgPSBpbnN0YW5jZS5zY29wZS4kZXZhbChvbkV4cCk7XG4gICAgICAgICAgICAgIGlmICh0aGlzVmFsID09PSBjb21wYXJlV2l0aFZhbCkge1xuICAgICAgICAgICAgICAgIG5ld0FjdGl2YXRlZCA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChkYXRhLmxhc3RBY3RpdmF0ZWQgIT09IG5ld0FjdGl2YXRlZCkge1xuICAgICAgICAgICAgICBpZiAoZGF0YS5sYXN0QWN0aXZhdGVkKSB7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZGF0YS5sYXN0QWN0aXZhdGVkLmVsZW1lbnQsIGNsYXp6KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobmV3QWN0aXZhdGVkKSB7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3MobmV3QWN0aXZhdGVkLmVsZW1lbnQsIGNsYXp6KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkYXRhLmxhc3RBY3RpdmF0ZWQgPSBuZXdBY3RpdmF0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBleHBUb0RhdGFbZXhwXSA9IGRhdGEgPSB7XG4gICAgICAgICAgICBsYXN0QWN0aXZhdGVkOiBudWxsLFxuICAgICAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICAgICAgd2F0Y2hGbjogd2F0Y2hGbixcbiAgICAgICAgICAgIGNvbXBhcmVXaXRoRXhwOiBjb21wYXJlV2l0aEV4cCxcbiAgICAgICAgICAgIHdhdGNoZXI6IHNjb3BlLiR3YXRjaChjb21wYXJlV2l0aEV4cCwgd2F0Y2hGbilcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGRhdGEud2F0Y2hGbihzY29wZS4kZXZhbChjb21wYXJlV2l0aEV4cCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1vdmVTY29wZShlKSB7XG4gICAgICAgIHZhciByZW1vdmVkU2NvcGUgPSBlLnRhcmdldFNjb3BlO1xuICAgICAgICB2YXIgaW5kZXggPSBsaW5rZWRTY29wZXMuaW5kZXhPZihyZW1vdmVkU2NvcGUpO1xuICAgICAgICBsaW5rZWRTY29wZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGlmIChsaW5rZWRTY29wZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIG5ld1dhdGNoU2NvcGUgPSBsaW5rZWRTY29wZXNbMF07XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGV4cFRvRGF0YSwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuc2NvcGUgPT09IHJlbW92ZWRTY29wZSkge1xuICAgICAgICAgICAgICBkYXRhLndhdGNoZXIgPSBuZXdXYXRjaFNjb3BlLiR3YXRjaChkYXRhLmNvbXBhcmVXaXRoRXhwLCBkYXRhLndhdGNoRm4pO1xuICAgICAgICAgICAgICBkYXRhLnNjb3BlID0gbmV3V2F0Y2hTY29wZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleHBUb0RhdGEgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dKTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZGF0ZXBpY2tlcicsIFsndWkuYm9vdHN0cmFwLmRhdGVwYXJzZXInLCAndWkuYm9vdHN0cmFwLmlzQ2xhc3MnXSlcblxuLnZhbHVlKCckZGF0ZXBpY2tlclN1cHByZXNzRXJyb3InLCBmYWxzZSlcblxuLnZhbHVlKCckZGF0ZXBpY2tlckxpdGVyYWxXYXJuaW5nJywgdHJ1ZSlcblxuLmNvbnN0YW50KCd1aWJEYXRlcGlja2VyQ29uZmlnJywge1xuICBkYXRlcGlja2VyTW9kZTogJ2RheScsXG4gIGZvcm1hdERheTogJ2RkJyxcbiAgZm9ybWF0TW9udGg6ICdNTU1NJyxcbiAgZm9ybWF0WWVhcjogJ3l5eXknLFxuICBmb3JtYXREYXlIZWFkZXI6ICdFRUUnLFxuICBmb3JtYXREYXlUaXRsZTogJ01NTU0geXl5eScsXG4gIGZvcm1hdE1vbnRoVGl0bGU6ICd5eXl5JyxcbiAgbWF4RGF0ZTogbnVsbCxcbiAgbWF4TW9kZTogJ3llYXInLFxuICBtaW5EYXRlOiBudWxsLFxuICBtaW5Nb2RlOiAnZGF5JyxcbiAgbW9udGhDb2x1bW5zOiAzLFxuICBuZ01vZGVsT3B0aW9uczoge30sXG4gIHNob3J0Y3V0UHJvcGFnYXRpb246IGZhbHNlLFxuICBzaG93V2Vla3M6IHRydWUsXG4gIHllYXJDb2x1bW5zOiA1LFxuICB5ZWFyUm93czogNFxufSlcblxuLmNvbnRyb2xsZXIoJ1VpYkRhdGVwaWNrZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRwYXJzZScsICckaW50ZXJwb2xhdGUnLCAnJGxvY2FsZScsICckbG9nJywgJ2RhdGVGaWx0ZXInLCAndWliRGF0ZXBpY2tlckNvbmZpZycsICckZGF0ZXBpY2tlckxpdGVyYWxXYXJuaW5nJywgJyRkYXRlcGlja2VyU3VwcHJlc3NFcnJvcicsICd1aWJEYXRlUGFyc2VyJyxcbiAgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkcGFyc2UsICRpbnRlcnBvbGF0ZSwgJGxvY2FsZSwgJGxvZywgZGF0ZUZpbHRlciwgZGF0ZXBpY2tlckNvbmZpZywgJGRhdGVwaWNrZXJMaXRlcmFsV2FybmluZywgJGRhdGVwaWNrZXJTdXBwcmVzc0Vycm9yLCBkYXRlUGFyc2VyKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIG5nTW9kZWxDdHJsID0geyAkc2V0Vmlld1ZhbHVlOiBhbmd1bGFyLm5vb3AgfSwgLy8gbnVsbE1vZGVsQ3RybDtcbiAgICAgIG5nTW9kZWxPcHRpb25zID0ge30sXG4gICAgICB3YXRjaExpc3RlbmVycyA9IFtdO1xuXG4gICRlbGVtZW50LmFkZENsYXNzKCd1aWItZGF0ZXBpY2tlcicpO1xuICAkYXR0cnMuJHNldCgncm9sZScsICdhcHBsaWNhdGlvbicpO1xuXG4gIGlmICghJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zKSB7XG4gICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zID0ge307XG4gIH1cblxuICAvLyBNb2RlcyBjaGFpblxuICB0aGlzLm1vZGVzID0gWydkYXknLCAnbW9udGgnLCAneWVhciddO1xuXG4gIFtcbiAgICAnY3VzdG9tQ2xhc3MnLFxuICAgICdkYXRlRGlzYWJsZWQnLFxuICAgICdkYXRlcGlja2VyTW9kZScsXG4gICAgJ2Zvcm1hdERheScsXG4gICAgJ2Zvcm1hdERheUhlYWRlcicsXG4gICAgJ2Zvcm1hdERheVRpdGxlJyxcbiAgICAnZm9ybWF0TW9udGgnLFxuICAgICdmb3JtYXRNb250aFRpdGxlJyxcbiAgICAnZm9ybWF0WWVhcicsXG4gICAgJ21heERhdGUnLFxuICAgICdtYXhNb2RlJyxcbiAgICAnbWluRGF0ZScsXG4gICAgJ21pbk1vZGUnLFxuICAgICdtb250aENvbHVtbnMnLFxuICAgICdzaG93V2Vla3MnLFxuICAgICdzaG9ydGN1dFByb3BhZ2F0aW9uJyxcbiAgICAnc3RhcnRpbmdEYXknLFxuICAgICd5ZWFyQ29sdW1ucycsXG4gICAgJ3llYXJSb3dzJ1xuICBdLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ2N1c3RvbUNsYXNzJzpcbiAgICAgIGNhc2UgJ2RhdGVEaXNhYmxlZCc6XG4gICAgICAgICRzY29wZVtrZXldID0gJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0gfHwgYW5ndWxhci5ub29wO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RhdGVwaWNrZXJNb2RlJzpcbiAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJNb2RlID0gYW5ndWxhci5pc0RlZmluZWQoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVwaWNrZXJNb2RlKSA/XG4gICAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVwaWNrZXJNb2RlIDogZGF0ZXBpY2tlckNvbmZpZy5kYXRlcGlja2VyTW9kZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdmb3JtYXREYXknOlxuICAgICAgY2FzZSAnZm9ybWF0RGF5SGVhZGVyJzpcbiAgICAgIGNhc2UgJ2Zvcm1hdERheVRpdGxlJzpcbiAgICAgIGNhc2UgJ2Zvcm1hdE1vbnRoJzpcbiAgICAgIGNhc2UgJ2Zvcm1hdE1vbnRoVGl0bGUnOlxuICAgICAgY2FzZSAnZm9ybWF0WWVhcic6XG4gICAgICAgIHNlbGZba2V5XSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKSA/XG4gICAgICAgICAgJGludGVycG9sYXRlKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKSgkc2NvcGUuJHBhcmVudCkgOlxuICAgICAgICAgIGRhdGVwaWNrZXJDb25maWdba2V5XTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtb250aENvbHVtbnMnOlxuICAgICAgY2FzZSAnc2hvd1dlZWtzJzpcbiAgICAgIGNhc2UgJ3Nob3J0Y3V0UHJvcGFnYXRpb24nOlxuICAgICAgY2FzZSAneWVhckNvbHVtbnMnOlxuICAgICAgY2FzZSAneWVhclJvd3MnOlxuICAgICAgICBzZWxmW2tleV0gPSBhbmd1bGFyLmlzRGVmaW5lZCgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSkgP1xuICAgICAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldIDogZGF0ZXBpY2tlckNvbmZpZ1trZXldO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3N0YXJ0aW5nRGF5JzpcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKCRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5zdGFydGluZ0RheSkpIHtcbiAgICAgICAgICBzZWxmLnN0YXJ0aW5nRGF5ID0gJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLnN0YXJ0aW5nRGF5O1xuICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoZGF0ZXBpY2tlckNvbmZpZy5zdGFydGluZ0RheSkpIHtcbiAgICAgICAgICBzZWxmLnN0YXJ0aW5nRGF5ID0gZGF0ZXBpY2tlckNvbmZpZy5zdGFydGluZ0RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnN0YXJ0aW5nRGF5ID0gKCRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5GSVJTVERBWU9GV0VFSyArIDgpICUgNztcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWF4RGF0ZSc6XG4gICAgICBjYXNlICdtaW5EYXRlJzpcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnZGF0ZXBpY2tlck9wdGlvbnMuJyArIGtleSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgc2VsZltrZXldID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUobmV3IERhdGUodmFsdWUpLCBuZ01vZGVsT3B0aW9ucy50aW1lem9uZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoJGRhdGVwaWNrZXJMaXRlcmFsV2FybmluZykge1xuICAgICAgICAgICAgICAgICRsb2cud2FybignTGl0ZXJhbCBkYXRlIHN1cHBvcnQgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHN3aXRjaCB0byBkYXRlIG9iamVjdCB1c2FnZScpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2VsZltrZXldID0gbmV3IERhdGUoZGF0ZUZpbHRlcih2YWx1ZSwgJ21lZGl1bScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZltrZXldID0gZGF0ZXBpY2tlckNvbmZpZ1trZXldID9cbiAgICAgICAgICAgICAgZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUobmV3IERhdGUoZGF0ZXBpY2tlckNvbmZpZ1trZXldKSwgbmdNb2RlbE9wdGlvbnMudGltZXpvbmUpIDpcbiAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnJlZnJlc2hWaWV3KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWF4TW9kZSc6XG4gICAgICBjYXNlICdtaW5Nb2RlJzpcbiAgICAgICAgaWYgKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKSB7XG4gICAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHsgcmV0dXJuICRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldOyB9LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgc2VsZltrZXldID0gJHNjb3BlW2tleV0gPSBhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6ICRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ21pbk1vZGUnICYmIHNlbGYubW9kZXMuaW5kZXhPZigkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlck1vZGUpIDwgc2VsZi5tb2Rlcy5pbmRleE9mKHNlbGZba2V5XSkgfHxcbiAgICAgICAgICAgICAga2V5ID09PSAnbWF4TW9kZScgJiYgc2VsZi5tb2Rlcy5pbmRleE9mKCRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSkgPiBzZWxmLm1vZGVzLmluZGV4T2Yoc2VsZltrZXldKSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPSBzZWxmW2tleV07XG4gICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSA9IHNlbGZba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmW2tleV0gPSAkc2NvcGVba2V5XSA9IGRhdGVwaWNrZXJDb25maWdba2V5XSB8fCBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9KTtcblxuICAkc2NvcGUudW5pcXVlSWQgPSAnZGF0ZXBpY2tlci0nICsgJHNjb3BlLiRpZCArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcblxuICAkc2NvcGUuZGlzYWJsZWQgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZGlzYWJsZWQpIHx8IGZhbHNlO1xuICBpZiAoYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLm5nRGlzYWJsZWQpKSB7XG4gICAgd2F0Y2hMaXN0ZW5lcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJGF0dHJzLm5nRGlzYWJsZWQsIGZ1bmN0aW9uKGRpc2FibGVkKSB7XG4gICAgICAkc2NvcGUuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgIHNlbGYucmVmcmVzaFZpZXcoKTtcbiAgICB9KSk7XG4gIH1cblxuICAkc2NvcGUuaXNBY3RpdmUgPSBmdW5jdGlvbihkYXRlT2JqZWN0KSB7XG4gICAgaWYgKHNlbGYuY29tcGFyZShkYXRlT2JqZWN0LmRhdGUsIHNlbGYuYWN0aXZlRGF0ZSkgPT09IDApIHtcbiAgICAgICRzY29wZS5hY3RpdmVEYXRlSWQgPSBkYXRlT2JqZWN0LnVpZDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfKSB7XG4gICAgbmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybF87XG4gICAgbmdNb2RlbE9wdGlvbnMgPSBuZ01vZGVsQ3RybF8uJG9wdGlvbnMgfHxcbiAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5uZ01vZGVsT3B0aW9ucyB8fFxuICAgICAgZGF0ZXBpY2tlckNvbmZpZy5uZ01vZGVsT3B0aW9ucztcbiAgICBpZiAoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmluaXREYXRlKSB7XG4gICAgICBzZWxmLmFjdGl2ZURhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZSgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuaW5pdERhdGUsIG5nTW9kZWxPcHRpb25zLnRpbWV6b25lKSB8fCBuZXcgRGF0ZSgpO1xuICAgICAgJHNjb3BlLiR3YXRjaCgnZGF0ZXBpY2tlck9wdGlvbnMuaW5pdERhdGUnLCBmdW5jdGlvbihpbml0RGF0ZSkge1xuICAgICAgICBpZiAoaW5pdERhdGUgJiYgKG5nTW9kZWxDdHJsLiRpc0VtcHR5KG5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlKSB8fCBuZ01vZGVsQ3RybC4kaW52YWxpZCkpIHtcbiAgICAgICAgICBzZWxmLmFjdGl2ZURhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShpbml0RGF0ZSwgbmdNb2RlbE9wdGlvbnMudGltZXpvbmUpO1xuICAgICAgICAgIHNlbGYucmVmcmVzaFZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuYWN0aXZlRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIGRhdGUgPSBuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSA/IG5ldyBEYXRlKG5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlKSA6IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5hY3RpdmVEYXRlID0gIWlzTmFOKGRhdGUpID9cbiAgICAgIGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKGRhdGUsIG5nTW9kZWxPcHRpb25zLnRpbWV6b25lKSA6XG4gICAgICBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShuZXcgRGF0ZSgpLCBuZ01vZGVsT3B0aW9ucy50aW1lem9uZSk7XG5cbiAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnJlbmRlcigpO1xuICAgIH07XG4gIH07XG5cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSxcbiAgICAgICAgICBpc1ZhbGlkID0gIWlzTmFOKGRhdGUpO1xuXG4gICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICB0aGlzLmFjdGl2ZURhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShkYXRlLCBuZ01vZGVsT3B0aW9ucy50aW1lem9uZSk7XG4gICAgICB9IGVsc2UgaWYgKCEkZGF0ZXBpY2tlclN1cHByZXNzRXJyb3IpIHtcbiAgICAgICAgJGxvZy5lcnJvcignRGF0ZXBpY2tlciBkaXJlY3RpdmU6IFwibmctbW9kZWxcIiB2YWx1ZSBtdXN0IGJlIGEgRGF0ZSBvYmplY3QnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZWZyZXNoVmlldygpO1xuICB9O1xuXG4gIHRoaXMucmVmcmVzaFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICAkc2NvcGUuc2VsZWN0ZWREdCA9IG51bGw7XG4gICAgICB0aGlzLl9yZWZyZXNoVmlldygpO1xuICAgICAgaWYgKCRzY29wZS5hY3RpdmVEdCkge1xuICAgICAgICAkc2NvcGUuYWN0aXZlRGF0ZUlkID0gJHNjb3BlLmFjdGl2ZUR0LnVpZDtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGUgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID8gbmV3IERhdGUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkgOiBudWxsO1xuICAgICAgZGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKGRhdGUsIG5nTW9kZWxPcHRpb25zLnRpbWV6b25lKTtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZGF0ZURpc2FibGVkJywgIWRhdGUgfHxcbiAgICAgICAgdGhpcy5lbGVtZW50ICYmICF0aGlzLmlzRGlzYWJsZWQoZGF0ZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmNyZWF0ZURhdGVPYmplY3QgPSBmdW5jdGlvbihkYXRlLCBmb3JtYXQpIHtcbiAgICB2YXIgbW9kZWwgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID8gbmV3IERhdGUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkgOiBudWxsO1xuICAgIG1vZGVsID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUobW9kZWwsIG5nTW9kZWxPcHRpb25zLnRpbWV6b25lKTtcbiAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgIHRvZGF5ID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUodG9kYXksIG5nTW9kZWxPcHRpb25zLnRpbWV6b25lKTtcbiAgICB2YXIgdGltZSA9IHRoaXMuY29tcGFyZShkYXRlLCB0b2RheSk7XG4gICAgdmFyIGR0ID0ge1xuICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgIGxhYmVsOiBkYXRlUGFyc2VyLmZpbHRlcihkYXRlLCBmb3JtYXQpLFxuICAgICAgc2VsZWN0ZWQ6IG1vZGVsICYmIHRoaXMuY29tcGFyZShkYXRlLCBtb2RlbCkgPT09IDAsXG4gICAgICBkaXNhYmxlZDogdGhpcy5pc0Rpc2FibGVkKGRhdGUpLFxuICAgICAgcGFzdDogdGltZSA8IDAsXG4gICAgICBjdXJyZW50OiB0aW1lID09PSAwLFxuICAgICAgZnV0dXJlOiB0aW1lID4gMCxcbiAgICAgIGN1c3RvbUNsYXNzOiB0aGlzLmN1c3RvbUNsYXNzKGRhdGUpIHx8IG51bGxcbiAgICB9O1xuXG4gICAgaWYgKG1vZGVsICYmIHRoaXMuY29tcGFyZShkYXRlLCBtb2RlbCkgPT09IDApIHtcbiAgICAgICRzY29wZS5zZWxlY3RlZER0ID0gZHQ7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuYWN0aXZlRGF0ZSAmJiB0aGlzLmNvbXBhcmUoZHQuZGF0ZSwgc2VsZi5hY3RpdmVEYXRlKSA9PT0gMCkge1xuICAgICAgJHNjb3BlLmFjdGl2ZUR0ID0gZHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGR0O1xuICB9O1xuXG4gIHRoaXMuaXNEaXNhYmxlZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gJHNjb3BlLmRpc2FibGVkIHx8XG4gICAgICB0aGlzLm1pbkRhdGUgJiYgdGhpcy5jb21wYXJlKGRhdGUsIHRoaXMubWluRGF0ZSkgPCAwIHx8XG4gICAgICB0aGlzLm1heERhdGUgJiYgdGhpcy5jb21wYXJlKGRhdGUsIHRoaXMubWF4RGF0ZSkgPiAwIHx8XG4gICAgICAkc2NvcGUuZGF0ZURpc2FibGVkICYmICRzY29wZS5kYXRlRGlzYWJsZWQoe2RhdGU6IGRhdGUsIG1vZGU6ICRzY29wZS5kYXRlcGlja2VyTW9kZX0pO1xuICB9O1xuXG4gIHRoaXMuY3VzdG9tQ2xhc3MgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuICRzY29wZS5jdXN0b21DbGFzcyh7ZGF0ZTogZGF0ZSwgbW9kZTogJHNjb3BlLmRhdGVwaWNrZXJNb2RlfSk7XG4gIH07XG5cbiAgLy8gU3BsaXQgYXJyYXkgaW50byBzbWFsbGVyIGFycmF5c1xuICB0aGlzLnNwbGl0ID0gZnVuY3Rpb24oYXJyLCBzaXplKSB7XG4gICAgdmFyIGFycmF5cyA9IFtdO1xuICAgIHdoaWxlIChhcnIubGVuZ3RoID4gMCkge1xuICAgICAgYXJyYXlzLnB1c2goYXJyLnNwbGljZSgwLCBzaXplKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheXM7XG4gIH07XG5cbiAgJHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBpZiAoJHNjb3BlLmRhdGVwaWNrZXJNb2RlID09PSBzZWxmLm1pbk1vZGUpIHtcbiAgICAgIHZhciBkdCA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPyBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShuZXcgRGF0ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSwgbmdNb2RlbE9wdGlvbnMudGltZXpvbmUpIDogbmV3IERhdGUoMCwgMCwgMCwgMCwgMCwgMCwgMCk7XG4gICAgICBkdC5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgZHQgPSBkYXRlUGFyc2VyLnRvVGltZXpvbmUoZHQsIG5nTW9kZWxPcHRpb25zLnRpbWV6b25lKTtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoZHQpO1xuICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmFjdGl2ZURhdGUgPSBkYXRlO1xuICAgICAgc2V0TW9kZShzZWxmLm1vZGVzW3NlbGYubW9kZXMuaW5kZXhPZigkc2NvcGUuZGF0ZXBpY2tlck1vZGUpIC0gMV0pO1xuXG4gICAgICAkc2NvcGUuJGVtaXQoJ3VpYjpkYXRlcGlja2VyLm1vZGUnKTtcbiAgICB9XG5cbiAgICAkc2NvcGUuJGJyb2FkY2FzdCgndWliOmRhdGVwaWNrZXIuZm9jdXMnKTtcbiAgfTtcblxuICAkc2NvcGUubW92ZSA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgIHZhciB5ZWFyID0gc2VsZi5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkgKyBkaXJlY3Rpb24gKiAoc2VsZi5zdGVwLnllYXJzIHx8IDApLFxuICAgICAgICBtb250aCA9IHNlbGYuYWN0aXZlRGF0ZS5nZXRNb250aCgpICsgZGlyZWN0aW9uICogKHNlbGYuc3RlcC5tb250aHMgfHwgMCk7XG4gICAgc2VsZi5hY3RpdmVEYXRlLnNldEZ1bGxZZWFyKHllYXIsIG1vbnRoLCAxKTtcbiAgICBzZWxmLnJlZnJlc2hWaWV3KCk7XG4gIH07XG5cbiAgJHNjb3BlLnRvZ2dsZU1vZGUgPSBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgMTtcblxuICAgIGlmICgkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPT09IHNlbGYubWF4TW9kZSAmJiBkaXJlY3Rpb24gPT09IDEgfHxcbiAgICAgICRzY29wZS5kYXRlcGlja2VyTW9kZSA9PT0gc2VsZi5taW5Nb2RlICYmIGRpcmVjdGlvbiA9PT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXRNb2RlKHNlbGYubW9kZXNbc2VsZi5tb2Rlcy5pbmRleE9mKCRzY29wZS5kYXRlcGlja2VyTW9kZSkgKyBkaXJlY3Rpb25dKTtcblxuICAgICRzY29wZS4kZW1pdCgndWliOmRhdGVwaWNrZXIubW9kZScpO1xuICB9O1xuXG4gIC8vIEtleSBldmVudCBtYXBwZXJcbiAgJHNjb3BlLmtleXMgPSB7IDEzOiAnZW50ZXInLCAzMjogJ3NwYWNlJywgMzM6ICdwYWdldXAnLCAzNDogJ3BhZ2Vkb3duJywgMzU6ICdlbmQnLCAzNjogJ2hvbWUnLCAzNzogJ2xlZnQnLCAzODogJ3VwJywgMzk6ICdyaWdodCcsIDQwOiAnZG93bicgfTtcblxuICB2YXIgZm9jdXNFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5lbGVtZW50WzBdLmZvY3VzKCk7XG4gIH07XG5cbiAgLy8gTGlzdGVuIGZvciBmb2N1cyByZXF1ZXN0cyBmcm9tIHBvcHVwIGRpcmVjdGl2ZVxuICAkc2NvcGUuJG9uKCd1aWI6ZGF0ZXBpY2tlci5mb2N1cycsIGZvY3VzRWxlbWVudCk7XG5cbiAgJHNjb3BlLmtleWRvd24gPSBmdW5jdGlvbihldnQpIHtcbiAgICB2YXIga2V5ID0gJHNjb3BlLmtleXNbZXZ0LndoaWNoXTtcblxuICAgIGlmICgha2V5IHx8IGV2dC5zaGlmdEtleSB8fCBldnQuYWx0S2V5IHx8ICRzY29wZS5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICghc2VsZi5zaG9ydGN1dFByb3BhZ2F0aW9uKSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ2VudGVyJyB8fCBrZXkgPT09ICdzcGFjZScpIHtcbiAgICAgIGlmIChzZWxmLmlzRGlzYWJsZWQoc2VsZi5hY3RpdmVEYXRlKSkge1xuICAgICAgICByZXR1cm47IC8vIGRvIG5vdGhpbmdcbiAgICAgIH1cbiAgICAgICRzY29wZS5zZWxlY3Qoc2VsZi5hY3RpdmVEYXRlKTtcbiAgICB9IGVsc2UgaWYgKGV2dC5jdHJsS2V5ICYmIChrZXkgPT09ICd1cCcgfHwga2V5ID09PSAnZG93bicpKSB7XG4gICAgICAkc2NvcGUudG9nZ2xlTW9kZShrZXkgPT09ICd1cCcgPyAxIDogLTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmhhbmRsZUtleURvd24oa2V5LCBldnQpO1xuICAgICAgc2VsZi5yZWZyZXNoVmlldygpO1xuICAgIH1cbiAgfTtcblxuICAkZWxlbWVudC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2dCkge1xuICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAkc2NvcGUua2V5ZG93bihldnQpO1xuICAgIH0pO1xuICB9KTtcblxuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIC8vQ2xlYXIgYWxsIHdhdGNoIGxpc3RlbmVycyBvbiBkZXN0cm95XG4gICAgd2hpbGUgKHdhdGNoTGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgd2F0Y2hMaXN0ZW5lcnMuc2hpZnQoKSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2V0TW9kZShtb2RlKSB7XG4gICAgJHNjb3BlLmRhdGVwaWNrZXJNb2RlID0gbW9kZTtcbiAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlck1vZGUgPSBtb2RlO1xuICB9XG59XSlcblxuLmNvbnRyb2xsZXIoJ1VpYkRheXBpY2tlckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICdkYXRlRmlsdGVyJywgZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCBkYXRlRmlsdGVyKSB7XG4gIHZhciBEQVlTX0lOX01PTlRIID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuXG4gIHRoaXMuc3RlcCA9IHsgbW9udGhzOiAxIH07XG4gIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50O1xuICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgIHJldHVybiBtb250aCA9PT0gMSAmJiB5ZWFyICUgNCA9PT0gMCAmJlxuICAgICAgKHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCkgPyAyOSA6IERBWVNfSU5fTU9OVEhbbW9udGhdO1xuICB9XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oY3RybCkge1xuICAgIGFuZ3VsYXIuZXh0ZW5kKGN0cmwsIHRoaXMpO1xuICAgIHNjb3BlLnNob3dXZWVrcyA9IGN0cmwuc2hvd1dlZWtzO1xuICAgIGN0cmwucmVmcmVzaFZpZXcoKTtcbiAgfTtcblxuICB0aGlzLmdldERhdGVzID0gZnVuY3Rpb24oc3RhcnREYXRlLCBuKSB7XG4gICAgdmFyIGRhdGVzID0gbmV3IEFycmF5KG4pLCBjdXJyZW50ID0gbmV3IERhdGUoc3RhcnREYXRlKSwgaSA9IDAsIGRhdGU7XG4gICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICBkYXRlID0gbmV3IERhdGUoY3VycmVudCk7XG4gICAgICBkYXRlc1tpKytdID0gZGF0ZTtcbiAgICAgIGN1cnJlbnQuc2V0RGF0ZShjdXJyZW50LmdldERhdGUoKSArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZXM7XG4gIH07XG5cbiAgdGhpcy5fcmVmcmVzaFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgeWVhciA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgbW9udGggPSB0aGlzLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSxcbiAgICAgIGZpcnN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKHRoaXMuYWN0aXZlRGF0ZSk7XG5cbiAgICBmaXJzdERheU9mTW9udGguc2V0RnVsbFllYXIoeWVhciwgbW9udGgsIDEpO1xuXG4gICAgdmFyIGRpZmZlcmVuY2UgPSB0aGlzLnN0YXJ0aW5nRGF5IC0gZmlyc3REYXlPZk1vbnRoLmdldERheSgpLFxuICAgICAgbnVtRGlzcGxheWVkRnJvbVByZXZpb3VzTW9udGggPSBkaWZmZXJlbmNlID4gMCA/XG4gICAgICAgIDcgLSBkaWZmZXJlbmNlIDogLSBkaWZmZXJlbmNlLFxuICAgICAgZmlyc3REYXRlID0gbmV3IERhdGUoZmlyc3REYXlPZk1vbnRoKTtcblxuICAgIGlmIChudW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCA+IDApIHtcbiAgICAgIGZpcnN0RGF0ZS5zZXREYXRlKC1udW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCArIDEpO1xuICAgIH1cblxuICAgIC8vIDQyIGlzIHRoZSBudW1iZXIgb2YgZGF5cyBvbiBhIHNpeC13ZWVrIGNhbGVuZGFyXG4gICAgdmFyIGRheXMgPSB0aGlzLmdldERhdGVzKGZpcnN0RGF0ZSwgNDIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDI7IGkgKyspIHtcbiAgICAgIGRheXNbaV0gPSBhbmd1bGFyLmV4dGVuZCh0aGlzLmNyZWF0ZURhdGVPYmplY3QoZGF5c1tpXSwgdGhpcy5mb3JtYXREYXkpLCB7XG4gICAgICAgIHNlY29uZGFyeTogZGF5c1tpXS5nZXRNb250aCgpICE9PSBtb250aCxcbiAgICAgICAgdWlkOiBzY29wZS51bmlxdWVJZCArICctJyArIGlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNjb3BlLmxhYmVscyA9IG5ldyBBcnJheSg3KTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IDc7IGorKykge1xuICAgICAgc2NvcGUubGFiZWxzW2pdID0ge1xuICAgICAgICBhYmJyOiBkYXRlRmlsdGVyKGRheXNbal0uZGF0ZSwgdGhpcy5mb3JtYXREYXlIZWFkZXIpLFxuICAgICAgICBmdWxsOiBkYXRlRmlsdGVyKGRheXNbal0uZGF0ZSwgJ0VFRUUnKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBzY29wZS50aXRsZSA9IGRhdGVGaWx0ZXIodGhpcy5hY3RpdmVEYXRlLCB0aGlzLmZvcm1hdERheVRpdGxlKTtcbiAgICBzY29wZS5yb3dzID0gdGhpcy5zcGxpdChkYXlzLCA3KTtcblxuICAgIGlmIChzY29wZS5zaG93V2Vla3MpIHtcbiAgICAgIHNjb3BlLndlZWtOdW1iZXJzID0gW107XG4gICAgICB2YXIgdGh1cnNkYXlJbmRleCA9ICg0ICsgNyAtIHRoaXMuc3RhcnRpbmdEYXkpICUgNyxcbiAgICAgICAgICBudW1XZWVrcyA9IHNjb3BlLnJvd3MubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgY3VyV2VlayA9IDA7IGN1cldlZWsgPCBudW1XZWVrczsgY3VyV2VlaysrKSB7XG4gICAgICAgIHNjb3BlLndlZWtOdW1iZXJzLnB1c2goXG4gICAgICAgICAgZ2V0SVNPODYwMVdlZWtOdW1iZXIoc2NvcGUucm93c1tjdXJXZWVrXVt0aHVyc2RheUluZGV4XS5kYXRlKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuY29tcGFyZSA9IGZ1bmN0aW9uKGRhdGUxLCBkYXRlMikge1xuICAgIHZhciBfZGF0ZTEgPSBuZXcgRGF0ZShkYXRlMS5nZXRGdWxsWWVhcigpLCBkYXRlMS5nZXRNb250aCgpLCBkYXRlMS5nZXREYXRlKCkpO1xuICAgIHZhciBfZGF0ZTIgPSBuZXcgRGF0ZShkYXRlMi5nZXRGdWxsWWVhcigpLCBkYXRlMi5nZXRNb250aCgpLCBkYXRlMi5nZXREYXRlKCkpO1xuICAgIF9kYXRlMS5zZXRGdWxsWWVhcihkYXRlMS5nZXRGdWxsWWVhcigpKTtcbiAgICBfZGF0ZTIuc2V0RnVsbFllYXIoZGF0ZTIuZ2V0RnVsbFllYXIoKSk7XG4gICAgcmV0dXJuIF9kYXRlMSAtIF9kYXRlMjtcbiAgfTtcblxuICBmdW5jdGlvbiBnZXRJU084NjAxV2Vla051bWJlcihkYXRlKSB7XG4gICAgdmFyIGNoZWNrRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIGNoZWNrRGF0ZS5zZXREYXRlKGNoZWNrRGF0ZS5nZXREYXRlKCkgKyA0IC0gKGNoZWNrRGF0ZS5nZXREYXkoKSB8fCA3KSk7IC8vIFRodXJzZGF5XG4gICAgdmFyIHRpbWUgPSBjaGVja0RhdGUuZ2V0VGltZSgpO1xuICAgIGNoZWNrRGF0ZS5zZXRNb250aCgwKTsgLy8gQ29tcGFyZSB3aXRoIEphbiAxXG4gICAgY2hlY2tEYXRlLnNldERhdGUoMSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yb3VuZCgodGltZSAtIGNoZWNrRGF0ZSkgLyA4NjQwMDAwMCkgLyA3KSArIDE7XG4gIH1cblxuICB0aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbihrZXksIGV2dCkge1xuICAgIHZhciBkYXRlID0gdGhpcy5hY3RpdmVEYXRlLmdldERhdGUoKTtcblxuICAgIGlmIChrZXkgPT09ICdsZWZ0Jykge1xuICAgICAgZGF0ZSA9IGRhdGUgLSAxO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndXAnKSB7XG4gICAgICBkYXRlID0gZGF0ZSAtIDc7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdyaWdodCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlICsgMTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2Rvd24nKSB7XG4gICAgICBkYXRlID0gZGF0ZSArIDc7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdwYWdldXAnIHx8IGtleSA9PT0gJ3BhZ2Vkb3duJykge1xuICAgICAgdmFyIG1vbnRoID0gdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCkgKyAoa2V5ID09PSAncGFnZXVwJyA/IC0gMSA6IDEpO1xuICAgICAgdGhpcy5hY3RpdmVEYXRlLnNldE1vbnRoKG1vbnRoLCAxKTtcbiAgICAgIGRhdGUgPSBNYXRoLm1pbihnZXREYXlzSW5Nb250aCh0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSwgdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCkpLCBkYXRlKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2hvbWUnKSB7XG4gICAgICBkYXRlID0gMTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2VuZCcpIHtcbiAgICAgIGRhdGUgPSBnZXREYXlzSW5Nb250aCh0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSwgdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCkpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZURhdGUuc2V0RGF0ZShkYXRlKTtcbiAgfTtcbn1dKVxuXG4uY29udHJvbGxlcignVWliTW9udGhwaWNrZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnZGF0ZUZpbHRlcicsIGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgZGF0ZUZpbHRlcikge1xuICB0aGlzLnN0ZXAgPSB7IHllYXJzOiAxIH07XG4gIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50O1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKGN0cmwpIHtcbiAgICBhbmd1bGFyLmV4dGVuZChjdHJsLCB0aGlzKTtcbiAgICBjdHJsLnJlZnJlc2hWaWV3KCk7XG4gIH07XG5cbiAgdGhpcy5fcmVmcmVzaFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbW9udGhzID0gbmV3IEFycmF5KDEyKSxcbiAgICAgICAgeWVhciA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICBkYXRlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICBkYXRlID0gbmV3IERhdGUodGhpcy5hY3RpdmVEYXRlKTtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoeWVhciwgaSwgMSk7XG4gICAgICBtb250aHNbaV0gPSBhbmd1bGFyLmV4dGVuZCh0aGlzLmNyZWF0ZURhdGVPYmplY3QoZGF0ZSwgdGhpcy5mb3JtYXRNb250aCksIHtcbiAgICAgICAgdWlkOiBzY29wZS51bmlxdWVJZCArICctJyArIGlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNjb3BlLnRpdGxlID0gZGF0ZUZpbHRlcih0aGlzLmFjdGl2ZURhdGUsIHRoaXMuZm9ybWF0TW9udGhUaXRsZSk7XG4gICAgc2NvcGUucm93cyA9IHRoaXMuc3BsaXQobW9udGhzLCB0aGlzLm1vbnRoQ29sdW1ucyk7XG4gICAgc2NvcGUueWVhckhlYWRlckNvbHNwYW4gPSB0aGlzLm1vbnRoQ29sdW1ucyA+IDMgPyB0aGlzLm1vbnRoQ29sdW1ucyAtIDIgOiAxO1xuICB9O1xuXG4gIHRoaXMuY29tcGFyZSA9IGZ1bmN0aW9uKGRhdGUxLCBkYXRlMikge1xuICAgIHZhciBfZGF0ZTEgPSBuZXcgRGF0ZShkYXRlMS5nZXRGdWxsWWVhcigpLCBkYXRlMS5nZXRNb250aCgpKTtcbiAgICB2YXIgX2RhdGUyID0gbmV3IERhdGUoZGF0ZTIuZ2V0RnVsbFllYXIoKSwgZGF0ZTIuZ2V0TW9udGgoKSk7XG4gICAgX2RhdGUxLnNldEZ1bGxZZWFyKGRhdGUxLmdldEZ1bGxZZWFyKCkpO1xuICAgIF9kYXRlMi5zZXRGdWxsWWVhcihkYXRlMi5nZXRGdWxsWWVhcigpKTtcbiAgICByZXR1cm4gX2RhdGUxIC0gX2RhdGUyO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uKGtleSwgZXZ0KSB7XG4gICAgdmFyIGRhdGUgPSB0aGlzLmFjdGl2ZURhdGUuZ2V0TW9udGgoKTtcblxuICAgIGlmIChrZXkgPT09ICdsZWZ0Jykge1xuICAgICAgZGF0ZSA9IGRhdGUgLSAxO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndXAnKSB7XG4gICAgICBkYXRlID0gZGF0ZSAtIHRoaXMubW9udGhDb2x1bW5zO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncmlnaHQnKSB7XG4gICAgICBkYXRlID0gZGF0ZSArIDE7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdkb3duJykge1xuICAgICAgZGF0ZSA9IGRhdGUgKyB0aGlzLm1vbnRoQ29sdW1ucztcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3BhZ2V1cCcgfHwga2V5ID09PSAncGFnZWRvd24nKSB7XG4gICAgICB2YXIgeWVhciA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpICsgKGtleSA9PT0gJ3BhZ2V1cCcgPyAtIDEgOiAxKTtcbiAgICAgIHRoaXMuYWN0aXZlRGF0ZS5zZXRGdWxsWWVhcih5ZWFyKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2hvbWUnKSB7XG4gICAgICBkYXRlID0gMDtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2VuZCcpIHtcbiAgICAgIGRhdGUgPSAxMTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmVEYXRlLnNldE1vbnRoKGRhdGUpO1xuICB9O1xufV0pXG5cbi5jb250cm9sbGVyKCdVaWJZZWFycGlja2VyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJ2RhdGVGaWx0ZXInLCBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsIGRhdGVGaWx0ZXIpIHtcbiAgdmFyIGNvbHVtbnMsIHJhbmdlO1xuICB0aGlzLmVsZW1lbnQgPSAkZWxlbWVudDtcblxuICBmdW5jdGlvbiBnZXRTdGFydGluZ1llYXIoeWVhcikge1xuICAgIHJldHVybiBwYXJzZUludCgoeWVhciAtIDEpIC8gcmFuZ2UsIDEwKSAqIHJhbmdlICsgMTtcbiAgfVxuXG4gIHRoaXMueWVhcnBpY2tlckluaXQgPSBmdW5jdGlvbigpIHtcbiAgICBjb2x1bW5zID0gdGhpcy55ZWFyQ29sdW1ucztcbiAgICByYW5nZSA9IHRoaXMueWVhclJvd3MgKiBjb2x1bW5zO1xuICAgIHRoaXMuc3RlcCA9IHsgeWVhcnM6IHJhbmdlIH07XG4gIH07XG5cbiAgdGhpcy5fcmVmcmVzaFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgeWVhcnMgPSBuZXcgQXJyYXkocmFuZ2UpLCBkYXRlO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIHN0YXJ0ID0gZ2V0U3RhcnRpbmdZZWFyKHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpKTsgaSA8IHJhbmdlOyBpKyspIHtcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZSh0aGlzLmFjdGl2ZURhdGUpO1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcihzdGFydCArIGksIDAsIDEpO1xuICAgICAgeWVhcnNbaV0gPSBhbmd1bGFyLmV4dGVuZCh0aGlzLmNyZWF0ZURhdGVPYmplY3QoZGF0ZSwgdGhpcy5mb3JtYXRZZWFyKSwge1xuICAgICAgICB1aWQ6IHNjb3BlLnVuaXF1ZUlkICsgJy0nICsgaVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2NvcGUudGl0bGUgPSBbeWVhcnNbMF0ubGFiZWwsIHllYXJzW3JhbmdlIC0gMV0ubGFiZWxdLmpvaW4oJyAtICcpO1xuICAgIHNjb3BlLnJvd3MgPSB0aGlzLnNwbGl0KHllYXJzLCBjb2x1bW5zKTtcbiAgICBzY29wZS5jb2x1bW5zID0gY29sdW1ucztcbiAgfTtcblxuICB0aGlzLmNvbXBhcmUgPSBmdW5jdGlvbihkYXRlMSwgZGF0ZTIpIHtcbiAgICByZXR1cm4gZGF0ZTEuZ2V0RnVsbFllYXIoKSAtIGRhdGUyLmdldEZ1bGxZZWFyKCk7XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24oa2V5LCBldnQpIHtcbiAgICB2YXIgZGF0ZSA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpO1xuXG4gICAgaWYgKGtleSA9PT0gJ2xlZnQnKSB7XG4gICAgICBkYXRlID0gZGF0ZSAtIDE7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICd1cCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlIC0gY29sdW1ucztcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgZGF0ZSA9IGRhdGUgKyAxO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZG93bicpIHtcbiAgICAgIGRhdGUgPSBkYXRlICsgY29sdW1ucztcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3BhZ2V1cCcgfHwga2V5ID09PSAncGFnZWRvd24nKSB7XG4gICAgICBkYXRlICs9IChrZXkgPT09ICdwYWdldXAnID8gLSAxIDogMSkgKiByYW5nZTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2hvbWUnKSB7XG4gICAgICBkYXRlID0gZ2V0U3RhcnRpbmdZZWFyKHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2VuZCcpIHtcbiAgICAgIGRhdGUgPSBnZXRTdGFydGluZ1llYXIodGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkpICsgcmFuZ2UgLSAxO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZURhdGUuc2V0RnVsbFllYXIoZGF0ZSk7XG4gIH07XG59XSlcblxuLmRpcmVjdGl2ZSgndWliRGF0ZXBpY2tlcicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWwnO1xuICAgIH0sXG4gICAgc2NvcGU6IHtcbiAgICAgIGRhdGVwaWNrZXJPcHRpb25zOiAnPT8nXG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ3VpYkRhdGVwaWNrZXInLCAnXm5nTW9kZWwnXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJEYXRlcGlja2VyQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnZGF0ZXBpY2tlcicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIGRhdGVwaWNrZXJDdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGRhdGVwaWNrZXJDdHJsLmluaXQobmdNb2RlbEN0cmwpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYkRheXBpY2tlcicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXkuaHRtbCc7XG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ151aWJEYXRlcGlja2VyJywgJ3VpYkRheXBpY2tlciddLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1VpYkRheXBpY2tlckNvbnRyb2xsZXInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciBkYXRlcGlja2VyQ3RybCA9IGN0cmxzWzBdLFxuICAgICAgICBkYXlwaWNrZXJDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGRheXBpY2tlckN0cmwuaW5pdChkYXRlcGlja2VyQ3RybCk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliTW9udGhwaWNrZXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvbW9udGguaHRtbCc7XG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ151aWJEYXRlcGlja2VyJywgJ3VpYk1vbnRocGlja2VyJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnVWliTW9udGhwaWNrZXJDb250cm9sbGVyJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgZGF0ZXBpY2tlckN0cmwgPSBjdHJsc1swXSxcbiAgICAgICAgbW9udGhwaWNrZXJDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIG1vbnRocGlja2VyQ3RybC5pbml0KGRhdGVwaWNrZXJDdHJsKTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJZZWFycGlja2VyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL3llYXIuaHRtbCc7XG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ151aWJEYXRlcGlja2VyJywgJ3VpYlllYXJwaWNrZXInXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJZZWFycGlja2VyQ29udHJvbGxlcicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIGN0cmwgPSBjdHJsc1swXTtcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKGN0cmwsIGN0cmxzWzFdKTtcbiAgICAgIGN0cmwueWVhcnBpY2tlckluaXQoKTtcblxuICAgICAgY3RybC5yZWZyZXNoVmlldygpO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnBvc2l0aW9uJywgW10pXG5cbi8qKlxuICogQSBzZXQgb2YgdXRpbGl0eSBtZXRob2RzIGZvciB3b3JraW5nIHdpdGggdGhlIERPTS5cbiAqIEl0IGlzIG1lYW50IHRvIGJlIHVzZWQgd2hlcmUgd2UgbmVlZCB0byBhYnNvbHV0ZS1wb3NpdGlvbiBlbGVtZW50cyBpblxuICogcmVsYXRpb24gdG8gYW5vdGhlciBlbGVtZW50ICh0aGlzIGlzIHRoZSBjYXNlIGZvciB0b29sdGlwcywgcG9wb3ZlcnMsXG4gKiB0eXBlYWhlYWQgc3VnZ2VzdGlvbnMgZXRjLikuXG4gKi9cbiAgLmZhY3RvcnkoJyR1aWJQb3NpdGlvbicsIFsnJGRvY3VtZW50JywgJyR3aW5kb3cnLCBmdW5jdGlvbigkZG9jdW1lbnQsICR3aW5kb3cpIHtcbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IHNjcm9sbGJhcldpZHRoKCkgZnVuY3Rpb24gdG8gY2FjaGUgc2Nyb2xsYmFyJ3Mgd2lkdGguXG4gICAgICogRG8gbm90IGFjY2VzcyB0aGlzIHZhcmlhYmxlIGRpcmVjdGx5LCB1c2Ugc2Nyb2xsYmFyV2lkdGgoKSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHZhciBTQ1JPTExCQVJfV0lEVEg7XG4gICAgLyoqXG4gICAgICogc2Nyb2xsYmFyIG9uIGJvZHkgYW5kIGh0bWwgZWxlbWVudCBpbiBJRSBhbmQgRWRnZSBvdmVybGF5XG4gICAgICogY29udGVudCBhbmQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgMCB3aWR0aC5cbiAgICAgKi9cbiAgICB2YXIgQk9EWV9TQ1JPTExCQVJfV0lEVEg7XG4gICAgdmFyIE9WRVJGTE9XX1JFR0VYID0ge1xuICAgICAgbm9ybWFsOiAvKGF1dG98c2Nyb2xsKS8sXG4gICAgICBoaWRkZW46IC8oYXV0b3xzY3JvbGx8aGlkZGVuKS9cbiAgICB9O1xuICAgIHZhciBQTEFDRU1FTlRfUkVHRVggPSB7XG4gICAgICBhdXRvOiAvXFxzP2F1dG8/XFxzPy9pLFxuICAgICAgcHJpbWFyeTogL14odG9wfGJvdHRvbXxsZWZ0fHJpZ2h0KSQvLFxuICAgICAgc2Vjb25kYXJ5OiAvXih0b3B8Ym90dG9tfGxlZnR8cmlnaHR8Y2VudGVyKSQvLFxuICAgICAgdmVydGljYWw6IC9eKHRvcHxib3R0b20pJC9cbiAgICB9O1xuICAgIHZhciBCT0RZX1JFR0VYID0gLyhIVE1MfEJPRFkpLztcblxuICAgIHJldHVybiB7XG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgYSByYXcgRE9NIGVsZW1lbnQgZnJvbSBhIGpRdWVyeS9qUUxpdGUgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW0gLSBUaGUgZWxlbWVudCB0byBjb252ZXJ0LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtlbGVtZW50fSBBIEhUTUwgZWxlbWVudC5cbiAgICAgICAqL1xuICAgICAgZ2V0UmF3Tm9kZTogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICByZXR1cm4gZWxlbS5ub2RlTmFtZSA/IGVsZW0gOiBlbGVtWzBdIHx8IGVsZW07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIGEgcGFyc2VkIG51bWJlciBmb3IgYSBzdHlsZSBwcm9wZXJ0eS4gIFN0cmlwc1xuICAgICAgICogdW5pdHMgYW5kIGNhc3RzIGludmFsaWQgbnVtYmVycyB0byAwLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBzdHlsZSB2YWx1ZSB0byBwYXJzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBBIHZhbGlkIG51bWJlci5cbiAgICAgICAqL1xuICAgICAgcGFyc2VTdHlsZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogMDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgdGhlIGNsb3Nlc3QgcG9zaXRpb25lZCBhbmNlc3Rvci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBnZXQgdGhlIG9mZmVzdCBwYXJlbnQgZm9yLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtlbGVtZW50fSBUaGUgY2xvc2VzdCBwb3NpdGlvbmVkIGFuY2VzdG9yLlxuICAgICAgICovXG4gICAgICBvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgZWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShlbGVtKTtcblxuICAgICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICBmdW5jdGlvbiBpc1N0YXRpY1Bvc2l0aW9uZWQoZWwpIHtcbiAgICAgICAgICByZXR1cm4gKCR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkucG9zaXRpb24gfHwgJ3N0YXRpYycpID09PSAnc3RhdGljJztcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50ICYmIGlzU3RhdGljUG9zaXRpb25lZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICAgICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgdGhlIHNjcm9sbGJhciB3aWR0aCwgY29uY2VwdCBmcm9tIFRXQlMgbWVhc3VyZVNjcm9sbGJhcigpXG4gICAgICAgKiBmdW5jdGlvbiBpbiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvanMvbW9kYWwuanNcbiAgICAgICAqIEluIElFIGFuZCBFZGdlLCBzY29sbGJhciBvbiBib2R5IGFuZCBodG1sIGVsZW1lbnQgb3ZlcmxheSBhbmQgc2hvdWxkXG4gICAgICAgKiByZXR1cm4gYSB3aWR0aCBvZiAwLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB3aWR0aCBvZiB0aGUgYnJvd3NlciBzY29sbGJhci5cbiAgICAgICAqL1xuICAgICAgc2Nyb2xsYmFyV2lkdGg6IGZ1bmN0aW9uKGlzQm9keSkge1xuICAgICAgICBpZiAoaXNCb2R5KSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoQk9EWV9TQ1JPTExCQVJfV0lEVEgpKSB7XG4gICAgICAgICAgICB2YXIgYm9keUVsZW0gPSAkZG9jdW1lbnQuZmluZCgnYm9keScpO1xuICAgICAgICAgICAgYm9keUVsZW0uYWRkQ2xhc3MoJ3VpYi1wb3NpdGlvbi1ib2R5LXNjcm9sbGJhci1tZWFzdXJlJyk7XG4gICAgICAgICAgICBCT0RZX1NDUk9MTEJBUl9XSURUSCA9ICR3aW5kb3cuaW5uZXJXaWR0aCAtIGJvZHlFbGVtWzBdLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgQk9EWV9TQ1JPTExCQVJfV0lEVEggPSBpc0Zpbml0ZShCT0RZX1NDUk9MTEJBUl9XSURUSCkgPyBCT0RZX1NDUk9MTEJBUl9XSURUSCA6IDA7XG4gICAgICAgICAgICBib2R5RWxlbS5yZW1vdmVDbGFzcygndWliLXBvc2l0aW9uLWJvZHktc2Nyb2xsYmFyLW1lYXN1cmUnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIEJPRFlfU0NST0xMQkFSX1dJRFRIO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoU0NST0xMQkFSX1dJRFRIKSkge1xuICAgICAgICAgIHZhciBzY3JvbGxFbGVtID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwidWliLXBvc2l0aW9uLXNjcm9sbGJhci1tZWFzdXJlXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5hcHBlbmQoc2Nyb2xsRWxlbSk7XG4gICAgICAgICAgU0NST0xMQkFSX1dJRFRIID0gc2Nyb2xsRWxlbVswXS5vZmZzZXRXaWR0aCAtIHNjcm9sbEVsZW1bMF0uY2xpZW50V2lkdGg7XG4gICAgICAgICAgU0NST0xMQkFSX1dJRFRIID0gaXNGaW5pdGUoU0NST0xMQkFSX1dJRFRIKSA/IFNDUk9MTEJBUl9XSURUSCA6IDA7XG4gICAgICAgICAgc2Nyb2xsRWxlbS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBTQ1JPTExCQVJfV0lEVEg7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHRoZSBwYWRkaW5nIHJlcXVpcmVkIG9uIGFuIGVsZW1lbnQgdG8gcmVwbGFjZSB0aGUgc2Nyb2xsYmFyLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqICAgPHVsPlxuICAgICAgICogICAgIDxsaT4qKnNjcm9sbGJhcldpZHRoKio6IHRoZSB3aWR0aCBvZiB0aGUgc2Nyb2xsYmFyPC9saT5cbiAgICAgICAqICAgICA8bGk+Kip3aWR0aE92ZXJmbG93Kio6IHdoZXRoZXIgdGhlIHRoZSB3aWR0aCBpcyBvdmVyZmxvd2luZzwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqcmlnaHQqKjogdGhlIGFtb3VudCBvZiByaWdodCBwYWRkaW5nIG9uIHRoZSBlbGVtZW50IG5lZWRlZCB0byByZXBsYWNlIHRoZSBzY3JvbGxiYXI8L2xpPlxuICAgICAgICogICAgIDxsaT4qKnJpZ2h0T3JpZ2luYWwqKjogdGhlIGFtb3VudCBvZiByaWdodCBwYWRkaW5nIGN1cnJlbnRseSBvbiB0aGUgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqaGVpZ2h0T3ZlcmZsb3cqKjogd2hldGhlciB0aGUgdGhlIGhlaWdodCBpcyBvdmVyZmxvd2luZzwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqYm90dG9tKio6IHRoZSBhbW91bnQgb2YgYm90dG9tIHBhZGRpbmcgb24gdGhlIGVsZW1lbnQgbmVlZGVkIHRvIHJlcGxhY2UgdGhlIHNjcm9sbGJhcjwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqYm90dG9tT3JpZ2luYWwqKjogdGhlIGFtb3VudCBvZiBib3R0b20gcGFkZGluZyBjdXJyZW50bHkgb24gdGhlIGVsZW1lbnQ8L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICovXG4gICAgICBzY3JvbGxiYXJQYWRkaW5nOiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgIGVsZW0gPSB0aGlzLmdldFJhd05vZGUoZWxlbSk7XG5cbiAgICAgICAgdmFyIGVsZW1TdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICAgICAgdmFyIHBhZGRpbmdSaWdodCA9IHRoaXMucGFyc2VTdHlsZShlbGVtU3R5bGUucGFkZGluZ1JpZ2h0KTtcbiAgICAgICAgdmFyIHBhZGRpbmdCb3R0b20gPSB0aGlzLnBhcnNlU3R5bGUoZWxlbVN0eWxlLnBhZGRpbmdCb3R0b20pO1xuICAgICAgICB2YXIgc2Nyb2xsUGFyZW50ID0gdGhpcy5zY3JvbGxQYXJlbnQoZWxlbSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSB0aGlzLnNjcm9sbGJhcldpZHRoKEJPRFlfUkVHRVgudGVzdChzY3JvbGxQYXJlbnQudGFnTmFtZSkpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2Nyb2xsYmFyV2lkdGg6IHNjcm9sbGJhcldpZHRoLFxuICAgICAgICAgIHdpZHRoT3ZlcmZsb3c6IHNjcm9sbFBhcmVudC5zY3JvbGxXaWR0aCA+IHNjcm9sbFBhcmVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICByaWdodDogcGFkZGluZ1JpZ2h0ICsgc2Nyb2xsYmFyV2lkdGgsXG4gICAgICAgICAgb3JpZ2luYWxSaWdodDogcGFkZGluZ1JpZ2h0LFxuICAgICAgICAgIGhlaWdodE92ZXJmbG93OiBzY3JvbGxQYXJlbnQuc2Nyb2xsSGVpZ2h0ID4gc2Nyb2xsUGFyZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgICBib3R0b206IHBhZGRpbmdCb3R0b20gKyBzY3JvbGxiYXJXaWR0aCxcbiAgICAgICAgICBvcmlnaW5hbEJvdHRvbTogcGFkZGluZ0JvdHRvbVxuICAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2tzIHRvIHNlZSBpZiB0aGUgZWxlbWVudCBpcyBzY3JvbGxhYmxlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2luY2x1ZGVIaWRkZW49ZmFsc2VdIC0gU2hvdWxkIHNjcm9sbCBzdHlsZSBvZiAnaGlkZGVuJyBiZSBjb25zaWRlcmVkLFxuICAgICAgICogICBkZWZhdWx0IGlzIGZhbHNlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSBlbGVtZW50IGlzIHNjcm9sbGFibGUuXG4gICAgICAgKi9cbiAgICAgIGlzU2Nyb2xsYWJsZTogZnVuY3Rpb24oZWxlbSwgaW5jbHVkZUhpZGRlbikge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuXG4gICAgICAgIHZhciBvdmVyZmxvd1JlZ2V4ID0gaW5jbHVkZUhpZGRlbiA/IE9WRVJGTE9XX1JFR0VYLmhpZGRlbiA6IE9WRVJGTE9XX1JFR0VYLm5vcm1hbDtcbiAgICAgICAgdmFyIGVsZW1TdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICAgICAgcmV0dXJuIG92ZXJmbG93UmVnZXgudGVzdChlbGVtU3R5bGUub3ZlcmZsb3cgKyBlbGVtU3R5bGUub3ZlcmZsb3dZICsgZWxlbVN0eWxlLm92ZXJmbG93WCk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHRoZSBjbG9zZXN0IHNjcm9sbGFibGUgYW5jZXN0b3IuXG4gICAgICAgKiBBIHBvcnQgb2YgdGhlIGpRdWVyeSBVSSBzY3JvbGxQYXJlbnQgbWV0aG9kOlxuICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktdWkvYmxvYi9tYXN0ZXIvdWkvc2Nyb2xsLXBhcmVudC5qc1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSBlbGVtZW50IHRvIGZpbmQgdGhlIHNjcm9sbCBwYXJlbnQgb2YuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW5jbHVkZUhpZGRlbj1mYWxzZV0gLSBTaG91bGQgc2Nyb2xsIHN0eWxlIG9mICdoaWRkZW4nIGJlIGNvbnNpZGVyZWQsXG4gICAgICAgKiAgIGRlZmF1bHQgaXMgZmFsc2UuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW5jbHVkZVNlbGY9ZmFsc2VdIC0gU2hvdWxkIHRoZSBlbGVtZW50IGJlaW5nIHBhc3NlZCBiZVxuICAgICAgICogaW5jbHVkZWQgaW4gdGhlIHNjcm9sbGFibGUgbGxva3VwLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtlbGVtZW50fSBBIEhUTUwgZWxlbWVudC5cbiAgICAgICAqL1xuICAgICAgc2Nyb2xsUGFyZW50OiBmdW5jdGlvbihlbGVtLCBpbmNsdWRlSGlkZGVuLCBpbmNsdWRlU2VsZikge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuXG4gICAgICAgIHZhciBvdmVyZmxvd1JlZ2V4ID0gaW5jbHVkZUhpZGRlbiA/IE9WRVJGTE9XX1JFR0VYLmhpZGRlbiA6IE9WRVJGTE9XX1JFR0VYLm5vcm1hbDtcbiAgICAgICAgdmFyIGRvY3VtZW50RWwgPSAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgZWxlbVN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuICAgICAgICBpZiAoaW5jbHVkZVNlbGYgJiYgb3ZlcmZsb3dSZWdleC50ZXN0KGVsZW1TdHlsZS5vdmVyZmxvdyArIGVsZW1TdHlsZS5vdmVyZmxvd1kgKyBlbGVtU3R5bGUub3ZlcmZsb3dYKSkge1xuICAgICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgICB9XG4gICAgICAgIHZhciBleGNsdWRlU3RhdGljID0gZWxlbVN0eWxlLnBvc2l0aW9uID09PSAnYWJzb2x1dGUnO1xuICAgICAgICB2YXIgc2Nyb2xsUGFyZW50ID0gZWxlbS5wYXJlbnRFbGVtZW50IHx8IGRvY3VtZW50RWw7XG5cbiAgICAgICAgaWYgKHNjcm9sbFBhcmVudCA9PT0gZG9jdW1lbnRFbCB8fCBlbGVtU3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgICAgICByZXR1cm4gZG9jdW1lbnRFbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChzY3JvbGxQYXJlbnQucGFyZW50RWxlbWVudCAmJiBzY3JvbGxQYXJlbnQgIT09IGRvY3VtZW50RWwpIHtcbiAgICAgICAgICB2YXIgc3BTdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzY3JvbGxQYXJlbnQpO1xuICAgICAgICAgIGlmIChleGNsdWRlU3RhdGljICYmIHNwU3R5bGUucG9zaXRpb24gIT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgICBleGNsdWRlU3RhdGljID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFleGNsdWRlU3RhdGljICYmIG92ZXJmbG93UmVnZXgudGVzdChzcFN0eWxlLm92ZXJmbG93ICsgc3BTdHlsZS5vdmVyZmxvd1kgKyBzcFN0eWxlLm92ZXJmbG93WCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzY3JvbGxQYXJlbnQgPSBzY3JvbGxQYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzY3JvbGxQYXJlbnQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHJlYWQtb25seSBlcXVpdmFsZW50IG9mIGpRdWVyeSdzIHBvc2l0aW9uIGZ1bmN0aW9uOlxuICAgICAgICogaHR0cDovL2FwaS5qcXVlcnkuY29tL3Bvc2l0aW9uLyAtIGRpc3RhbmNlIHRvIGNsb3Nlc3QgcG9zaXRpb25lZFxuICAgICAgICogYW5jZXN0b3IuICBEb2VzIG5vdCBhY2NvdW50IGZvciBtYXJnaW5zIGJ5IGRlZmF1bHQgbGlrZSBqUXVlcnkgcG9zaXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtIC0gVGhlIGVsZW1lbnQgdG8gY2FjbHVsYXRlIHRoZSBwb3NpdGlvbiBvbi5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbmNsdWRlTWFyZ2lucz1mYWxzZV0gLSBTaG91bGQgbWFyZ2lucyBiZSBhY2NvdW50ZWRcbiAgICAgICAqIGZvciwgZGVmYXVsdCBpcyBmYWxzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKiAgIDx1bD5cbiAgICAgICAqICAgICA8bGk+Kip3aWR0aCoqOiB0aGUgd2lkdGggb2YgdGhlIGVsZW1lbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKmhlaWdodCoqOiB0aGUgaGVpZ2h0IG9mIHRoZSBlbGVtZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+Kip0b3AqKjogZGlzdGFuY2UgdG8gdG9wIGVkZ2Ugb2Ygb2Zmc2V0IHBhcmVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqbGVmdCoqOiBkaXN0YW5jZSB0byBsZWZ0IGVkZ2Ugb2Ygb2Zmc2V0IHBhcmVudDwvbGk+XG4gICAgICAgKiAgIDwvdWw+XG4gICAgICAgKi9cbiAgICAgIHBvc2l0aW9uOiBmdW5jdGlvbihlbGVtLCBpbmNsdWRlTWFnaW5zKSB7XG4gICAgICAgIGVsZW0gPSB0aGlzLmdldFJhd05vZGUoZWxlbSk7XG5cbiAgICAgICAgdmFyIGVsZW1PZmZzZXQgPSB0aGlzLm9mZnNldChlbGVtKTtcbiAgICAgICAgaWYgKGluY2x1ZGVNYWdpbnMpIHtcbiAgICAgICAgICB2YXIgZWxlbVN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuICAgICAgICAgIGVsZW1PZmZzZXQudG9wIC09IHRoaXMucGFyc2VTdHlsZShlbGVtU3R5bGUubWFyZ2luVG9wKTtcbiAgICAgICAgICBlbGVtT2Zmc2V0LmxlZnQgLT0gdGhpcy5wYXJzZVN0eWxlKGVsZW1TdHlsZS5tYXJnaW5MZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoZWxlbSk7XG4gICAgICAgIHZhciBwYXJlbnRPZmZzZXQgPSB7dG9wOiAwLCBsZWZ0OiAwfTtcblxuICAgICAgICBpZiAocGFyZW50ICE9PSAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgcGFyZW50T2Zmc2V0ID0gdGhpcy5vZmZzZXQocGFyZW50KTtcbiAgICAgICAgICBwYXJlbnRPZmZzZXQudG9wICs9IHBhcmVudC5jbGllbnRUb3AgLSBwYXJlbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgIHBhcmVudE9mZnNldC5sZWZ0ICs9IHBhcmVudC5jbGllbnRMZWZ0IC0gcGFyZW50LnNjcm9sbExlZnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKGFuZ3VsYXIuaXNOdW1iZXIoZWxlbU9mZnNldC53aWR0aCkgPyBlbGVtT2Zmc2V0LndpZHRoIDogZWxlbS5vZmZzZXRXaWR0aCksXG4gICAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKGFuZ3VsYXIuaXNOdW1iZXIoZWxlbU9mZnNldC5oZWlnaHQpID8gZWxlbU9mZnNldC5oZWlnaHQgOiBlbGVtLm9mZnNldEhlaWdodCksXG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKGVsZW1PZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChlbGVtT2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdClcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgcmVhZC1vbmx5IGVxdWl2YWxlbnQgb2YgalF1ZXJ5J3Mgb2Zmc2V0IGZ1bmN0aW9uOlxuICAgICAgICogaHR0cDovL2FwaS5qcXVlcnkuY29tL29mZnNldC8gLSBkaXN0YW5jZSB0byB2aWV3cG9ydC4gIERvZXNcbiAgICAgICAqIG5vdCBhY2NvdW50IGZvciBib3JkZXJzLCBtYXJnaW5zLCBvciBwYWRkaW5nIG9uIHRoZSBib2R5XG4gICAgICAgKiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSBlbGVtZW50IHRvIGNhbGN1bGF0ZSB0aGUgb2Zmc2V0IG9uLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqICAgPHVsPlxuICAgICAgICogICAgIDxsaT4qKndpZHRoKio6IHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqaGVpZ2h0Kio6IHRoZSBoZWlnaHQgb2YgdGhlIGVsZW1lbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKnRvcCoqOiBkaXN0YW5jZSB0byB0b3AgZWRnZSBvZiB2aWV3cG9ydDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqcmlnaHQqKjogZGlzdGFuY2UgdG8gYm90dG9tIGVkZ2Ugb2Ygdmlld3BvcnQ8L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICovXG4gICAgICBvZmZzZXQ6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgZWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShlbGVtKTtcblxuICAgICAgICB2YXIgZWxlbUJDUiA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IE1hdGgucm91bmQoYW5ndWxhci5pc051bWJlcihlbGVtQkNSLndpZHRoKSA/IGVsZW1CQ1Iud2lkdGggOiBlbGVtLm9mZnNldFdpZHRoKSxcbiAgICAgICAgICBoZWlnaHQ6IE1hdGgucm91bmQoYW5ndWxhci5pc051bWJlcihlbGVtQkNSLmhlaWdodCkgPyBlbGVtQkNSLmhlaWdodCA6IGVsZW0ub2Zmc2V0SGVpZ2h0KSxcbiAgICAgICAgICB0b3A6IE1hdGgucm91bmQoZWxlbUJDUi50b3AgKyAoJHdpbmRvdy5wYWdlWU9mZnNldCB8fCAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkpLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQoZWxlbUJDUi5sZWZ0ICsgKCR3aW5kb3cucGFnZVhPZmZzZXQgfHwgJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KSlcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgb2Zmc2V0IGRpc3RhbmNlIHRvIHRoZSBjbG9zZXN0IHNjcm9sbGFibGUgYW5jZXN0b3JcbiAgICAgICAqIG9yIHZpZXdwb3J0LiAgQWNjb3VudHMgZm9yIGJvcmRlciBhbmQgc2Nyb2xsYmFyIHdpZHRoLlxuICAgICAgICpcbiAgICAgICAqIFJpZ2h0IGFuZCBib3R0b20gZGltZW5zaW9ucyByZXByZXNlbnQgdGhlIGRpc3RhbmNlIHRvIHRoZVxuICAgICAgICogcmVzcGVjdGl2ZSBlZGdlIG9mIHRoZSB2aWV3cG9ydCBlbGVtZW50LiAgSWYgdGhlIGVsZW1lbnRcbiAgICAgICAqIGVkZ2UgZXh0ZW5kcyBiZXlvbmQgdGhlIHZpZXdwb3J0LCBhIG5lZ2F0aXZlIHZhbHVlIHdpbGwgYmVcbiAgICAgICAqIHJlcG9ydGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgdmlld3BvcnQgb2Zmc2V0IGZvci5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFt1c2VEb2N1bWVudD1mYWxzZV0gLSBTaG91bGQgdGhlIHZpZXdwb3J0IGJlIHRoZSBkb2N1bWVudCBlbGVtZW50IGluc3RlYWRcbiAgICAgICAqIG9mIHRoZSBmaXJzdCBzY3JvbGxhYmxlIGVsZW1lbnQsIGRlZmF1bHQgaXMgZmFsc2UuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW5jbHVkZVBhZGRpbmc9dHJ1ZV0gLSBTaG91bGQgdGhlIHBhZGRpbmcgb24gdGhlIG9mZnNldCBwYXJlbnQgZWxlbWVudFxuICAgICAgICogYmUgYWNjb3VudGVkIGZvciwgZGVmYXVsdCBpcyB0cnVlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqICAgPHVsPlxuICAgICAgICogICAgIDxsaT4qKnRvcCoqOiBkaXN0YW5jZSB0byB0aGUgdG9wIGNvbnRlbnQgZWRnZSBvZiB2aWV3cG9ydCBlbGVtZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+Kipib3R0b20qKjogZGlzdGFuY2UgdG8gdGhlIGJvdHRvbSBjb250ZW50IGVkZ2Ugb2Ygdmlld3BvcnQgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqbGVmdCoqOiBkaXN0YW5jZSB0byB0aGUgbGVmdCBjb250ZW50IGVkZ2Ugb2Ygdmlld3BvcnQgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqcmlnaHQqKjogZGlzdGFuY2UgdG8gdGhlIHJpZ2h0IGNvbnRlbnQgZWRnZSBvZiB2aWV3cG9ydCBlbGVtZW50PC9saT5cbiAgICAgICAqICAgPC91bD5cbiAgICAgICAqL1xuICAgICAgdmlld3BvcnRPZmZzZXQ6IGZ1bmN0aW9uKGVsZW0sIHVzZURvY3VtZW50LCBpbmNsdWRlUGFkZGluZykge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuICAgICAgICBpbmNsdWRlUGFkZGluZyA9IGluY2x1ZGVQYWRkaW5nICE9PSBmYWxzZSA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICB2YXIgZWxlbUJDUiA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBvZmZzZXRCQ1IgPSB7dG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDAsIHJpZ2h0OiAwfTtcblxuICAgICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gdXNlRG9jdW1lbnQgPyAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50IDogdGhpcy5zY3JvbGxQYXJlbnQoZWxlbSk7XG4gICAgICAgIHZhciBvZmZzZXRQYXJlbnRCQ1IgPSBvZmZzZXRQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgb2Zmc2V0QkNSLnRvcCA9IG9mZnNldFBhcmVudEJDUi50b3AgKyBvZmZzZXRQYXJlbnQuY2xpZW50VG9wO1xuICAgICAgICBvZmZzZXRCQ1IubGVmdCA9IG9mZnNldFBhcmVudEJDUi5sZWZ0ICsgb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICAgIGlmIChvZmZzZXRQYXJlbnQgPT09ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICBvZmZzZXRCQ1IudG9wICs9ICR3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgb2Zmc2V0QkNSLmxlZnQgKz0gJHdpbmRvdy5wYWdlWE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXRCQ1IuYm90dG9tID0gb2Zmc2V0QkNSLnRvcCArIG9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIG9mZnNldEJDUi5yaWdodCA9IG9mZnNldEJDUi5sZWZ0ICsgb2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoO1xuXG4gICAgICAgIGlmIChpbmNsdWRlUGFkZGluZykge1xuICAgICAgICAgIHZhciBvZmZzZXRQYXJlbnRTdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpO1xuICAgICAgICAgIG9mZnNldEJDUi50b3AgKz0gdGhpcy5wYXJzZVN0eWxlKG9mZnNldFBhcmVudFN0eWxlLnBhZGRpbmdUb3ApO1xuICAgICAgICAgIG9mZnNldEJDUi5ib3R0b20gLT0gdGhpcy5wYXJzZVN0eWxlKG9mZnNldFBhcmVudFN0eWxlLnBhZGRpbmdCb3R0b20pO1xuICAgICAgICAgIG9mZnNldEJDUi5sZWZ0ICs9IHRoaXMucGFyc2VTdHlsZShvZmZzZXRQYXJlbnRTdHlsZS5wYWRkaW5nTGVmdCk7XG4gICAgICAgICAgb2Zmc2V0QkNSLnJpZ2h0IC09IHRoaXMucGFyc2VTdHlsZShvZmZzZXRQYXJlbnRTdHlsZS5wYWRkaW5nUmlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0b3A6IE1hdGgucm91bmQoZWxlbUJDUi50b3AgLSBvZmZzZXRCQ1IudG9wKSxcbiAgICAgICAgICBib3R0b206IE1hdGgucm91bmQob2Zmc2V0QkNSLmJvdHRvbSAtIGVsZW1CQ1IuYm90dG9tKSxcbiAgICAgICAgICBsZWZ0OiBNYXRoLnJvdW5kKGVsZW1CQ1IubGVmdCAtIG9mZnNldEJDUi5sZWZ0KSxcbiAgICAgICAgICByaWdodDogTWF0aC5yb3VuZChvZmZzZXRCQ1IucmlnaHQgLSBlbGVtQkNSLnJpZ2h0KVxuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyBhbiBhcnJheSBvZiBwbGFjZW1lbnQgdmFsdWVzIHBhcnNlZCBmcm9tIGEgcGxhY2VtZW50IHN0cmluZy5cbiAgICAgICAqIEFsb25nIHdpdGggdGhlICdhdXRvJyBpbmRpY2F0b3IsIHN1cHBvcnRlZCBwbGFjZW1lbnQgc3RyaW5ncyBhcmU6XG4gICAgICAgKiAgIDx1bD5cbiAgICAgICAqICAgICA8bGk+dG9wOiBlbGVtZW50IG9uIHRvcCwgaG9yaXpvbnRhbGx5IGNlbnRlcmVkIG9uIGhvc3QgZWxlbWVudC48L2xpPlxuICAgICAgICogICAgIDxsaT50b3AtbGVmdDogZWxlbWVudCBvbiB0b3AsIGxlZnQgZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IGxlZnQgZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT50b3AtcmlnaHQ6IGVsZW1lbnQgb24gdG9wLCBsZXJpZ2h0ZnQgZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IHJpZ2h0IGVkZ2UuPC9saT5cbiAgICAgICAqICAgICA8bGk+Ym90dG9tOiBlbGVtZW50IG9uIGJvdHRvbSwgaG9yaXpvbnRhbGx5IGNlbnRlcmVkIG9uIGhvc3QgZWxlbWVudC48L2xpPlxuICAgICAgICogICAgIDxsaT5ib3R0b20tbGVmdDogZWxlbWVudCBvbiBib3R0b20sIGxlZnQgZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IGxlZnQgZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT5ib3R0b20tcmlnaHQ6IGVsZW1lbnQgb24gYm90dG9tLCByaWdodCBlZGdlIGFsaWduZWQgd2l0aCBob3N0IGVsZW1lbnQgcmlnaHQgZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT5sZWZ0OiBlbGVtZW50IG9uIGxlZnQsIHZlcnRpY2FsbHkgY2VudGVyZWQgb24gaG9zdCBlbGVtZW50LjwvbGk+XG4gICAgICAgKiAgICAgPGxpPmxlZnQtdG9wOiBlbGVtZW50IG9uIGxlZnQsIHRvcCBlZGdlIGFsaWduZWQgd2l0aCBob3N0IGVsZW1lbnQgdG9wIGVkZ2UuPC9saT5cbiAgICAgICAqICAgICA8bGk+bGVmdC1ib3R0b206IGVsZW1lbnQgb24gbGVmdCwgYm90dG9tIGVkZ2UgYWxpZ25lZCB3aXRoIGhvc3QgZWxlbWVudCBib3R0b20gZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT5yaWdodDogZWxlbWVudCBvbiByaWdodCwgdmVydGljYWxseSBjZW50ZXJlZCBvbiBob3N0IGVsZW1lbnQuPC9saT5cbiAgICAgICAqICAgICA8bGk+cmlnaHQtdG9wOiBlbGVtZW50IG9uIHJpZ2h0LCB0b3AgZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IHRvcCBlZGdlLjwvbGk+XG4gICAgICAgKiAgICAgPGxpPnJpZ2h0LWJvdHRvbTogZWxlbWVudCBvbiByaWdodCwgYm90dG9tIGVkZ2UgYWxpZ25lZCB3aXRoIGhvc3QgZWxlbWVudCBib3R0b20gZWRnZS48L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICogQSBwbGFjZW1lbnQgc3RyaW5nIHdpdGggYW4gJ2F1dG8nIGluZGljYXRvciBpcyBleHBlY3RlZCB0byBiZVxuICAgICAgICogc3BhY2Ugc2VwYXJhdGVkIGZyb20gdGhlIHBsYWNlbWVudCwgaS5lOiAnYXV0byBib3R0b20tbGVmdCcgIElmXG4gICAgICAgKiB0aGUgcHJpbWFyeSBhbmQgc2Vjb25kYXJ5IHBsYWNlbWVudCB2YWx1ZXMgZG8gbm90IG1hdGNoICd0b3AsXG4gICAgICAgKiBib3R0b20sIGxlZnQsIHJpZ2h0JyB0aGVuICd0b3AnIHdpbGwgYmUgdGhlIHByaW1hcnkgcGxhY2VtZW50IGFuZFxuICAgICAgICogJ2NlbnRlcicgd2lsbCBiZSB0aGUgc2Vjb25kYXJ5IHBsYWNlbWVudC4gIElmICdhdXRvJyBpcyBwYXNzZWQsIHRydWVcbiAgICAgICAqIHdpbGwgYmUgcmV0dXJuZWQgYXMgdGhlIDNyZCB2YWx1ZSBvZiB0aGUgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBsYWNlbWVudCAtIFRoZSBwbGFjZW1lbnQgc3RyaW5nIHRvIHBhcnNlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHthcnJheX0gQW4gYXJyYXkgd2l0aCB0aGUgZm9sbG93aW5nIHZhbHVlc1xuICAgICAgICogPHVsPlxuICAgICAgICogICA8bGk+KipbMF0qKjogVGhlIHByaW1hcnkgcGxhY2VtZW50LjwvbGk+XG4gICAgICAgKiAgIDxsaT4qKlsxXSoqOiBUaGUgc2Vjb25kYXJ5IHBsYWNlbWVudC48L2xpPlxuICAgICAgICogICA8bGk+KipbMl0qKjogSWYgYXV0byBpcyBwYXNzZWQ6IHRydWUsIGVsc2UgdW5kZWZpbmVkLjwvbGk+XG4gICAgICAgKiA8L3VsPlxuICAgICAgICovXG4gICAgICBwYXJzZVBsYWNlbWVudDogZnVuY3Rpb24ocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBhdXRvUGxhY2UgPSBQTEFDRU1FTlRfUkVHRVguYXV0by50ZXN0KHBsYWNlbWVudCk7XG4gICAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShQTEFDRU1FTlRfUkVHRVguYXV0bywgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJyk7XG5cbiAgICAgICAgcGxhY2VtZW50WzBdID0gcGxhY2VtZW50WzBdIHx8ICd0b3AnO1xuICAgICAgICBpZiAoIVBMQUNFTUVOVF9SRUdFWC5wcmltYXJ5LnRlc3QocGxhY2VtZW50WzBdKSkge1xuICAgICAgICAgIHBsYWNlbWVudFswXSA9ICd0b3AnO1xuICAgICAgICB9XG5cbiAgICAgICAgcGxhY2VtZW50WzFdID0gcGxhY2VtZW50WzFdIHx8ICdjZW50ZXInO1xuICAgICAgICBpZiAoIVBMQUNFTUVOVF9SRUdFWC5zZWNvbmRhcnkudGVzdChwbGFjZW1lbnRbMV0pKSB7XG4gICAgICAgICAgcGxhY2VtZW50WzFdID0gJ2NlbnRlcic7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXV0b1BsYWNlKSB7XG4gICAgICAgICAgcGxhY2VtZW50WzJdID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwbGFjZW1lbnRbMl0gPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIGNvb3JkaW5hdGVzIGZvciBhbiBlbGVtZW50IHRvIGJlIHBvc2l0aW9uZWQgcmVsYXRpdmUgdG9cbiAgICAgICAqIGFub3RoZXIgZWxlbWVudC4gIFBhc3NpbmcgJ2F1dG8nIGFzIHBhcnQgb2YgdGhlIHBsYWNlbWVudCBwYXJhbWV0ZXJcbiAgICAgICAqIHdpbGwgZW5hYmxlIHNtYXJ0IHBsYWNlbWVudCAtIHdoZXJlIHRoZSBlbGVtZW50IGZpdHMuIGkuZTpcbiAgICAgICAqICdhdXRvIGxlZnQtdG9wJyB3aWxsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBpcyBlbm91Z2ggc3BhY2UgdG8gdGhlIGxlZnRcbiAgICAgICAqIG9mIHRoZSBob3N0RWxlbSB0byBmaXQgdGhlIHRhcmdldEVsZW0sIGlmIG5vdCBwbGFjZSByaWdodCAoc2FtZSBmb3Igc2Vjb25kYXJ5XG4gICAgICAgKiB0b3AgcGxhY2VtZW50KS4gIEF2YWlsYWJsZSBzcGFjZSBpcyBjYWxjdWxhdGVkIHVzaW5nIHRoZSB2aWV3cG9ydE9mZnNldFxuICAgICAgICogZnVuY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBob3N0RWxlbSAtIFRoZSBlbGVtZW50IHRvIHBvc2l0aW9uIGFnYWluc3QuXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IHRhcmdldEVsZW0gLSBUaGUgZWxlbWVudCB0byBwb3NpdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gW3BsYWNlbWVudD10b3BdIC0gVGhlIHBsYWNlbWVudCBmb3IgdGhlIHRhcmdldEVsZW0sXG4gICAgICAgKiAgIGRlZmF1bHQgaXMgJ3RvcCcuICdjZW50ZXInIGlzIGFzc3VtZWQgYXMgc2Vjb25kYXJ5IHBsYWNlbWVudCBmb3JcbiAgICAgICAqICAgJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgYW5kICdib3R0b20nIHBsYWNlbWVudHMuICBBdmFpbGFibGUgcGxhY2VtZW50cyBhcmU6XG4gICAgICAgKiAgIDx1bD5cbiAgICAgICAqICAgICA8bGk+dG9wPC9saT5cbiAgICAgICAqICAgICA8bGk+dG9wLXJpZ2h0PC9saT5cbiAgICAgICAqICAgICA8bGk+dG9wLWxlZnQ8L2xpPlxuICAgICAgICogICAgIDxsaT5ib3R0b208L2xpPlxuICAgICAgICogICAgIDxsaT5ib3R0b20tbGVmdDwvbGk+XG4gICAgICAgKiAgICAgPGxpPmJvdHRvbS1yaWdodDwvbGk+XG4gICAgICAgKiAgICAgPGxpPmxlZnQ8L2xpPlxuICAgICAgICogICAgIDxsaT5sZWZ0LXRvcDwvbGk+XG4gICAgICAgKiAgICAgPGxpPmxlZnQtYm90dG9tPC9saT5cbiAgICAgICAqICAgICA8bGk+cmlnaHQ8L2xpPlxuICAgICAgICogICAgIDxsaT5yaWdodC10b3A8L2xpPlxuICAgICAgICogICAgIDxsaT5yaWdodC1ib3R0b208L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2FwcGVuZFRvQm9keT1mYWxzZV0gLSBTaG91bGQgdGhlIHRvcCBhbmQgbGVmdCB2YWx1ZXMgcmV0dXJuZWRcbiAgICAgICAqICAgYmUgY2FsY3VsYXRlZCBmcm9tIHRoZSBib2R5IGVsZW1lbnQsIGRlZmF1bHQgaXMgZmFsc2UuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICogICA8dWw+XG4gICAgICAgKiAgICAgPGxpPioqdG9wKio6IFZhbHVlIGZvciB0YXJnZXRFbGVtIHRvcC48L2xpPlxuICAgICAgICogICAgIDxsaT4qKmxlZnQqKjogVmFsdWUgZm9yIHRhcmdldEVsZW0gbGVmdC48L2xpPlxuICAgICAgICogICAgIDxsaT4qKnBsYWNlbWVudCoqOiBUaGUgcmVzb2x2ZWQgcGxhY2VtZW50LjwvbGk+XG4gICAgICAgKiAgIDwvdWw+XG4gICAgICAgKi9cbiAgICAgIHBvc2l0aW9uRWxlbWVudHM6IGZ1bmN0aW9uKGhvc3RFbGVtLCB0YXJnZXRFbGVtLCBwbGFjZW1lbnQsIGFwcGVuZFRvQm9keSkge1xuICAgICAgICBob3N0RWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShob3N0RWxlbSk7XG4gICAgICAgIHRhcmdldEVsZW0gPSB0aGlzLmdldFJhd05vZGUodGFyZ2V0RWxlbSk7XG5cbiAgICAgICAgLy8gbmVlZCB0byByZWFkIGZyb20gcHJvcCB0byBzdXBwb3J0IHRlc3RzLlxuICAgICAgICB2YXIgdGFyZ2V0V2lkdGggPSBhbmd1bGFyLmlzRGVmaW5lZCh0YXJnZXRFbGVtLm9mZnNldFdpZHRoKSA/IHRhcmdldEVsZW0ub2Zmc2V0V2lkdGggOiB0YXJnZXRFbGVtLnByb3AoJ29mZnNldFdpZHRoJyk7XG4gICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBhbmd1bGFyLmlzRGVmaW5lZCh0YXJnZXRFbGVtLm9mZnNldEhlaWdodCkgPyB0YXJnZXRFbGVtLm9mZnNldEhlaWdodCA6IHRhcmdldEVsZW0ucHJvcCgnb2Zmc2V0SGVpZ2h0Jyk7XG5cbiAgICAgICAgcGxhY2VtZW50ID0gdGhpcy5wYXJzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgICAgIHZhciBob3N0RWxlbVBvcyA9IGFwcGVuZFRvQm9keSA/IHRoaXMub2Zmc2V0KGhvc3RFbGVtKSA6IHRoaXMucG9zaXRpb24oaG9zdEVsZW0pO1xuICAgICAgICB2YXIgdGFyZ2V0RWxlbVBvcyA9IHt0b3A6IDAsIGxlZnQ6IDAsIHBsYWNlbWVudDogJyd9O1xuXG4gICAgICAgIGlmIChwbGFjZW1lbnRbMl0pIHtcbiAgICAgICAgICB2YXIgdmlld3BvcnRPZmZzZXQgPSB0aGlzLnZpZXdwb3J0T2Zmc2V0KGhvc3RFbGVtLCBhcHBlbmRUb0JvZHkpO1xuXG4gICAgICAgICAgdmFyIHRhcmdldEVsZW1TdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXRFbGVtKTtcbiAgICAgICAgICB2YXIgYWRqdXN0ZWRTaXplID0ge1xuICAgICAgICAgICAgd2lkdGg6IHRhcmdldFdpZHRoICsgTWF0aC5yb3VuZChNYXRoLmFicyh0aGlzLnBhcnNlU3R5bGUodGFyZ2V0RWxlbVN0eWxlLm1hcmdpbkxlZnQpICsgdGhpcy5wYXJzZVN0eWxlKHRhcmdldEVsZW1TdHlsZS5tYXJnaW5SaWdodCkpKSxcbiAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0ICsgTWF0aC5yb3VuZChNYXRoLmFicyh0aGlzLnBhcnNlU3R5bGUodGFyZ2V0RWxlbVN0eWxlLm1hcmdpblRvcCkgKyB0aGlzLnBhcnNlU3R5bGUodGFyZ2V0RWxlbVN0eWxlLm1hcmdpbkJvdHRvbSkpKVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBwbGFjZW1lbnRbMF0gPSBwbGFjZW1lbnRbMF0gPT09ICd0b3AnICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgPiB2aWV3cG9ydE9mZnNldC50b3AgJiYgYWRqdXN0ZWRTaXplLmhlaWdodCA8PSB2aWV3cG9ydE9mZnNldC5ib3R0b20gPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzBdID09PSAnYm90dG9tJyAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0ID4gdmlld3BvcnRPZmZzZXQuYm90dG9tICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgPD0gdmlld3BvcnRPZmZzZXQudG9wID8gJ3RvcCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFswXSA9PT0gJ2xlZnQnICYmIGFkanVzdGVkU2l6ZS53aWR0aCA+IHZpZXdwb3J0T2Zmc2V0LmxlZnQgJiYgYWRqdXN0ZWRTaXplLndpZHRoIDw9IHZpZXdwb3J0T2Zmc2V0LnJpZ2h0ID8gJ3JpZ2h0JyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzBdID09PSAncmlnaHQnICYmIGFkanVzdGVkU2l6ZS53aWR0aCA+IHZpZXdwb3J0T2Zmc2V0LnJpZ2h0ICYmIGFkanVzdGVkU2l6ZS53aWR0aCA8PSB2aWV3cG9ydE9mZnNldC5sZWZ0ID8gJ2xlZnQnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMF07XG5cbiAgICAgICAgICBwbGFjZW1lbnRbMV0gPSBwbGFjZW1lbnRbMV0gPT09ICd0b3AnICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgLSBob3N0RWxlbVBvcy5oZWlnaHQgPiB2aWV3cG9ydE9mZnNldC5ib3R0b20gJiYgYWRqdXN0ZWRTaXplLmhlaWdodCAtIGhvc3RFbGVtUG9zLmhlaWdodCA8PSB2aWV3cG9ydE9mZnNldC50b3AgPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzFdID09PSAnYm90dG9tJyAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0IC0gaG9zdEVsZW1Qb3MuaGVpZ2h0ID4gdmlld3BvcnRPZmZzZXQudG9wICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgLSBob3N0RWxlbVBvcy5oZWlnaHQgPD0gdmlld3BvcnRPZmZzZXQuYm90dG9tID8gJ3RvcCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXSA9PT0gJ2xlZnQnICYmIGFkanVzdGVkU2l6ZS53aWR0aCAtIGhvc3RFbGVtUG9zLndpZHRoID4gdmlld3BvcnRPZmZzZXQucmlnaHQgJiYgYWRqdXN0ZWRTaXplLndpZHRoIC0gaG9zdEVsZW1Qb3Mud2lkdGggPD0gdmlld3BvcnRPZmZzZXQubGVmdCA/ICdyaWdodCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXSA9PT0gJ3JpZ2h0JyAmJiBhZGp1c3RlZFNpemUud2lkdGggLSBob3N0RWxlbVBvcy53aWR0aCA+IHZpZXdwb3J0T2Zmc2V0LmxlZnQgJiYgYWRqdXN0ZWRTaXplLndpZHRoIC0gaG9zdEVsZW1Qb3Mud2lkdGggPD0gdmlld3BvcnRPZmZzZXQucmlnaHQgPyAnbGVmdCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXTtcblxuICAgICAgICAgIGlmIChwbGFjZW1lbnRbMV0gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICBpZiAoUExBQ0VNRU5UX1JFR0VYLnZlcnRpY2FsLnRlc3QocGxhY2VtZW50WzBdKSkge1xuICAgICAgICAgICAgICB2YXIgeE92ZXJmbG93ID0gaG9zdEVsZW1Qb3Mud2lkdGggLyAyIC0gdGFyZ2V0V2lkdGggLyAyO1xuICAgICAgICAgICAgICBpZiAodmlld3BvcnRPZmZzZXQubGVmdCArIHhPdmVyZmxvdyA8IDAgJiYgYWRqdXN0ZWRTaXplLndpZHRoIC0gaG9zdEVsZW1Qb3Mud2lkdGggPD0gdmlld3BvcnRPZmZzZXQucmlnaHQpIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV0gPSAnbGVmdCc7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmlld3BvcnRPZmZzZXQucmlnaHQgKyB4T3ZlcmZsb3cgPCAwICYmIGFkanVzdGVkU2l6ZS53aWR0aCAtIGhvc3RFbGVtUG9zLndpZHRoIDw9IHZpZXdwb3J0T2Zmc2V0LmxlZnQpIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV0gPSAncmlnaHQnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgeU92ZXJmbG93ID0gaG9zdEVsZW1Qb3MuaGVpZ2h0IC8gMiAtIGFkanVzdGVkU2l6ZS5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgICBpZiAodmlld3BvcnRPZmZzZXQudG9wICsgeU92ZXJmbG93IDwgMCAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0IC0gaG9zdEVsZW1Qb3MuaGVpZ2h0IDw9IHZpZXdwb3J0T2Zmc2V0LmJvdHRvbSkge1xuICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXSA9ICd0b3AnO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZpZXdwb3J0T2Zmc2V0LmJvdHRvbSArIHlPdmVyZmxvdyA8IDAgJiYgYWRqdXN0ZWRTaXplLmhlaWdodCAtIGhvc3RFbGVtUG9zLmhlaWdodCA8PSB2aWV3cG9ydE9mZnNldC50b3ApIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV0gPSAnYm90dG9tJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAocGxhY2VtZW50WzBdKSB7XG4gICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gaG9zdEVsZW1Qb3MudG9wIC0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gaG9zdEVsZW1Qb3MudG9wICsgaG9zdEVsZW1Qb3MuaGVpZ2h0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLmxlZnQgPSBob3N0RWxlbVBvcy5sZWZ0IC0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLmxlZnQgPSBob3N0RWxlbVBvcy5sZWZ0ICsgaG9zdEVsZW1Qb3Mud2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAocGxhY2VtZW50WzFdKSB7XG4gICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gaG9zdEVsZW1Qb3MudG9wO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gaG9zdEVsZW1Qb3MudG9wICsgaG9zdEVsZW1Qb3MuaGVpZ2h0IC0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLmxlZnQgPSBob3N0RWxlbVBvcy5sZWZ0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy5sZWZ0ID0gaG9zdEVsZW1Qb3MubGVmdCArIGhvc3RFbGVtUG9zLndpZHRoIC0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgICAgaWYgKFBMQUNFTUVOVF9SRUdFWC52ZXJ0aWNhbC50ZXN0KHBsYWNlbWVudFswXSkpIHtcbiAgICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy5sZWZ0ID0gaG9zdEVsZW1Qb3MubGVmdCArIGhvc3RFbGVtUG9zLndpZHRoIC8gMiAtIHRhcmdldFdpZHRoIC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gaG9zdEVsZW1Qb3MudG9wICsgaG9zdEVsZW1Qb3MuaGVpZ2h0IC8gMiAtIHRhcmdldEhlaWdodCAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gTWF0aC5yb3VuZCh0YXJnZXRFbGVtUG9zLnRvcCk7XG4gICAgICAgIHRhcmdldEVsZW1Qb3MubGVmdCA9IE1hdGgucm91bmQodGFyZ2V0RWxlbVBvcy5sZWZ0KTtcbiAgICAgICAgdGFyZ2V0RWxlbVBvcy5wbGFjZW1lbnQgPSBwbGFjZW1lbnRbMV0gPT09ICdjZW50ZXInID8gcGxhY2VtZW50WzBdIDogcGxhY2VtZW50WzBdICsgJy0nICsgcGxhY2VtZW50WzFdO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXRFbGVtUG9zO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyBhIHdheSB0byBhZGp1c3QgdGhlIHRvcCBwb3NpdGlvbmluZyBhZnRlciBmaXJzdFxuICAgICAgICogcmVuZGVyIHRvIGNvcnJlY3RseSBhbGlnbiBlbGVtZW50IHRvIHRvcCBhZnRlciBjb250ZW50XG4gICAgICAgKiByZW5kZXJpbmcgY2F1c2VzIHJlc2l6ZWQgZWxlbWVudCBoZWlnaHRcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBwbGFjZW1lbnRDbGFzc2VzIC0gVGhlIGFycmF5IG9mIHN0cmluZ3Mgb2YgY2xhc3Nlc1xuICAgICAgICogZWxlbWVudCBzaG91bGQgaGF2ZS5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250YWluZXJQb3NpdGlvbiAtIFRoZSBvYmplY3Qgd2l0aCBjb250YWluZXJcbiAgICAgICAqIHBvc2l0aW9uIGluZm9ybWF0aW9uXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5pdGlhbEhlaWdodCAtIFRoZSBpbml0aWFsIGhlaWdodCBmb3IgdGhlIGVsZW0uXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEhlaWdodCAtIFRoZSBjdXJyZW50IGhlaWdodCBmb3IgdGhlIGVsZW0uXG4gICAgICAgKi9cbiAgICAgIGFkanVzdFRvcDogZnVuY3Rpb24ocGxhY2VtZW50Q2xhc3NlcywgY29udGFpbmVyUG9zaXRpb24sIGluaXRpYWxIZWlnaHQsIGN1cnJlbnRIZWlnaHQpIHtcbiAgICAgICAgaWYgKHBsYWNlbWVudENsYXNzZXMuaW5kZXhPZigndG9wJykgIT09IC0xICYmIGluaXRpYWxIZWlnaHQgIT09IGN1cnJlbnRIZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9wOiBjb250YWluZXJQb3NpdGlvbi50b3AgLSBjdXJyZW50SGVpZ2h0ICsgJ3B4J1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgYSB3YXkgZm9yIHBvc2l0aW9uaW5nIHRvb2x0aXAgJiBkcm9wZG93blxuICAgICAgICogYXJyb3dzIHdoZW4gdXNpbmcgcGxhY2VtZW50IG9wdGlvbnMgYmV5b25kIHRoZSBzdGFuZGFyZFxuICAgICAgICogbGVmdCwgcmlnaHQsIHRvcCwgb3IgYm90dG9tLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSB0b29sdGlwL2Ryb3Bkb3duIGVsZW1lbnQuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGxhY2VtZW50IC0gVGhlIHBsYWNlbWVudCBmb3IgdGhlIGVsZW0uXG4gICAgICAgKi9cbiAgICAgIHBvc2l0aW9uQXJyb3c6IGZ1bmN0aW9uKGVsZW0sIHBsYWNlbWVudCkge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuXG4gICAgICAgIHZhciBpbm5lckVsZW0gPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy50b29sdGlwLWlubmVyLCAucG9wb3Zlci1pbm5lcicpO1xuICAgICAgICBpZiAoIWlubmVyRWxlbSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc1Rvb2x0aXAgPSBhbmd1bGFyLmVsZW1lbnQoaW5uZXJFbGVtKS5oYXNDbGFzcygndG9vbHRpcC1pbm5lcicpO1xuXG4gICAgICAgIHZhciBhcnJvd0VsZW0gPSBpc1Rvb2x0aXAgPyBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy50b29sdGlwLWFycm93JykgOiBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy5hcnJvdycpO1xuICAgICAgICBpZiAoIWFycm93RWxlbSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhcnJvd0NzcyA9IHtcbiAgICAgICAgICB0b3A6ICcnLFxuICAgICAgICAgIGJvdHRvbTogJycsXG4gICAgICAgICAgbGVmdDogJycsXG4gICAgICAgICAgcmlnaHQ6ICcnXG4gICAgICAgIH07XG5cbiAgICAgICAgcGxhY2VtZW50ID0gdGhpcy5wYXJzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICAgICAgICBpZiAocGxhY2VtZW50WzFdID09PSAnY2VudGVyJykge1xuICAgICAgICAgIC8vIG5vIGFkanVzdG1lbnQgbmVjZXNzYXJ5IC0ganVzdCByZXNldCBzdHlsZXNcbiAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoYXJyb3dFbGVtKS5jc3MoYXJyb3dDc3MpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBib3JkZXJQcm9wID0gJ2JvcmRlci0nICsgcGxhY2VtZW50WzBdICsgJy13aWR0aCc7XG4gICAgICAgIHZhciBib3JkZXJXaWR0aCA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShhcnJvd0VsZW0pW2JvcmRlclByb3BdO1xuXG4gICAgICAgIHZhciBib3JkZXJSYWRpdXNQcm9wID0gJ2JvcmRlci0nO1xuICAgICAgICBpZiAoUExBQ0VNRU5UX1JFR0VYLnZlcnRpY2FsLnRlc3QocGxhY2VtZW50WzBdKSkge1xuICAgICAgICAgIGJvcmRlclJhZGl1c1Byb3AgKz0gcGxhY2VtZW50WzBdICsgJy0nICsgcGxhY2VtZW50WzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJvcmRlclJhZGl1c1Byb3AgKz0gcGxhY2VtZW50WzFdICsgJy0nICsgcGxhY2VtZW50WzBdO1xuICAgICAgICB9XG4gICAgICAgIGJvcmRlclJhZGl1c1Byb3AgKz0gJy1yYWRpdXMnO1xuICAgICAgICB2YXIgYm9yZGVyUmFkaXVzID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGlzVG9vbHRpcCA/IGlubmVyRWxlbSA6IGVsZW0pW2JvcmRlclJhZGl1c1Byb3BdO1xuXG4gICAgICAgIHN3aXRjaCAocGxhY2VtZW50WzBdKSB7XG4gICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIGFycm93Q3NzLmJvdHRvbSA9IGlzVG9vbHRpcCA/ICcwJyA6ICctJyArIGJvcmRlcldpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIGFycm93Q3NzLnRvcCA9IGlzVG9vbHRpcCA/ICcwJyA6ICctJyArIGJvcmRlcldpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICBhcnJvd0Nzcy5yaWdodCA9IGlzVG9vbHRpcCA/ICcwJyA6ICctJyArIGJvcmRlcldpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgYXJyb3dDc3MubGVmdCA9IGlzVG9vbHRpcCA/ICcwJyA6ICctJyArIGJvcmRlcldpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBhcnJvd0Nzc1twbGFjZW1lbnRbMV1dID0gYm9yZGVyUmFkaXVzO1xuXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChhcnJvd0VsZW0pLmNzcyhhcnJvd0Nzcyk7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRhdGVwaWNrZXJQb3B1cCcsIFsndWkuYm9vdHN0cmFwLmRhdGVwaWNrZXInLCAndWkuYm9vdHN0cmFwLnBvc2l0aW9uJ10pXG5cbi52YWx1ZSgnJGRhdGVwaWNrZXJQb3B1cExpdGVyYWxXYXJuaW5nJywgdHJ1ZSlcblxuLmNvbnN0YW50KCd1aWJEYXRlcGlja2VyUG9wdXBDb25maWcnLCB7XG4gIGFsdElucHV0Rm9ybWF0czogW10sXG4gIGFwcGVuZFRvQm9keTogZmFsc2UsXG4gIGNsZWFyVGV4dDogJ0NsZWFyJyxcbiAgY2xvc2VPbkRhdGVTZWxlY3Rpb246IHRydWUsXG4gIGNsb3NlVGV4dDogJ0RvbmUnLFxuICBjdXJyZW50VGV4dDogJ1RvZGF5JyxcbiAgZGF0ZXBpY2tlclBvcHVwOiAneXl5eS1NTS1kZCcsXG4gIGRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL2RhdGVwaWNrZXJQb3B1cC9wb3B1cC5odG1sJyxcbiAgZGF0ZXBpY2tlclRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sJyxcbiAgaHRtbDVUeXBlczoge1xuICAgIGRhdGU6ICd5eXl5LU1NLWRkJyxcbiAgICAnZGF0ZXRpbWUtbG9jYWwnOiAneXl5eS1NTS1kZFRISDptbTpzcy5zc3MnLFxuICAgICdtb250aCc6ICd5eXl5LU1NJ1xuICB9LFxuICBvbk9wZW5Gb2N1czogdHJ1ZSxcbiAgc2hvd0J1dHRvbkJhcjogdHJ1ZSxcbiAgcGxhY2VtZW50OiAnYXV0byBib3R0b20tbGVmdCdcbn0pXG5cbi5jb250cm9sbGVyKCdVaWJEYXRlcGlja2VyUG9wdXBDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRjb21waWxlJywgJyRsb2cnLCAnJHBhcnNlJywgJyR3aW5kb3cnLCAnJGRvY3VtZW50JywgJyRyb290U2NvcGUnLCAnJHVpYlBvc2l0aW9uJywgJ2RhdGVGaWx0ZXInLCAndWliRGF0ZVBhcnNlcicsICd1aWJEYXRlcGlja2VyUG9wdXBDb25maWcnLCAnJHRpbWVvdXQnLCAndWliRGF0ZXBpY2tlckNvbmZpZycsICckZGF0ZXBpY2tlclBvcHVwTGl0ZXJhbFdhcm5pbmcnLFxuZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkY29tcGlsZSwgJGxvZywgJHBhcnNlLCAkd2luZG93LCAkZG9jdW1lbnQsICRyb290U2NvcGUsICRwb3NpdGlvbiwgZGF0ZUZpbHRlciwgZGF0ZVBhcnNlciwgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLCAkdGltZW91dCwgZGF0ZXBpY2tlckNvbmZpZywgJGRhdGVwaWNrZXJQb3B1cExpdGVyYWxXYXJuaW5nKSB7XG4gIHZhciBjYWNoZSA9IHt9LFxuICAgIGlzSHRtbDVEYXRlSW5wdXQgPSBmYWxzZTtcbiAgdmFyIGRhdGVGb3JtYXQsIGNsb3NlT25EYXRlU2VsZWN0aW9uLCBhcHBlbmRUb0JvZHksIG9uT3BlbkZvY3VzLFxuICAgIGRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsLCBkYXRlcGlja2VyVGVtcGxhdGVVcmwsIHBvcHVwRWwsIGRhdGVwaWNrZXJFbCwgc2Nyb2xsUGFyZW50RWwsXG4gICAgbmdNb2RlbCwgbmdNb2RlbE9wdGlvbnMsICRwb3B1cCwgYWx0SW5wdXRGb3JtYXRzLCB3YXRjaExpc3RlbmVycyA9IFtdO1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKF9uZ01vZGVsXykge1xuICAgIG5nTW9kZWwgPSBfbmdNb2RlbF87XG4gICAgbmdNb2RlbE9wdGlvbnMgPSBhbmd1bGFyLmlzT2JqZWN0KF9uZ01vZGVsXy4kb3B0aW9ucykgP1xuICAgICAgX25nTW9kZWxfLiRvcHRpb25zIDpcbiAgICAgIHtcbiAgICAgICAgdGltZXpvbmU6IG51bGxcbiAgICAgIH07XG4gICAgY2xvc2VPbkRhdGVTZWxlY3Rpb24gPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuY2xvc2VPbkRhdGVTZWxlY3Rpb24pID9cbiAgICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5jbG9zZU9uRGF0ZVNlbGVjdGlvbikgOlxuICAgICAgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmNsb3NlT25EYXRlU2VsZWN0aW9uO1xuICAgIGFwcGVuZFRvQm9keSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kYXRlcGlja2VyQXBwZW5kVG9Cb2R5KSA/XG4gICAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuZGF0ZXBpY2tlckFwcGVuZFRvQm9keSkgOlxuICAgICAgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmFwcGVuZFRvQm9keTtcbiAgICBvbk9wZW5Gb2N1cyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5vbk9wZW5Gb2N1cykgP1xuICAgICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLm9uT3BlbkZvY3VzKSA6IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5vbk9wZW5Gb2N1cztcbiAgICBkYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCkgP1xuICAgICAgJGF0dHJzLmRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsIDpcbiAgICAgIGRhdGVwaWNrZXJQb3B1cENvbmZpZy5kYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybDtcbiAgICBkYXRlcGlja2VyVGVtcGxhdGVVcmwgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZGF0ZXBpY2tlclRlbXBsYXRlVXJsKSA/XG4gICAgICAkYXR0cnMuZGF0ZXBpY2tlclRlbXBsYXRlVXJsIDogZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmRhdGVwaWNrZXJUZW1wbGF0ZVVybDtcbiAgICBhbHRJbnB1dEZvcm1hdHMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuYWx0SW5wdXRGb3JtYXRzKSA/XG4gICAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuYWx0SW5wdXRGb3JtYXRzKSA6XG4gICAgICBkYXRlcGlja2VyUG9wdXBDb25maWcuYWx0SW5wdXRGb3JtYXRzO1xuXG4gICAgJHNjb3BlLnNob3dCdXR0b25CYXIgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuc2hvd0J1dHRvbkJhcikgP1xuICAgICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnNob3dCdXR0b25CYXIpIDpcbiAgICAgIGRhdGVwaWNrZXJQb3B1cENvbmZpZy5zaG93QnV0dG9uQmFyO1xuXG4gICAgaWYgKGRhdGVwaWNrZXJQb3B1cENvbmZpZy5odG1sNVR5cGVzWyRhdHRycy50eXBlXSkge1xuICAgICAgZGF0ZUZvcm1hdCA9IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5odG1sNVR5cGVzWyRhdHRycy50eXBlXTtcbiAgICAgIGlzSHRtbDVEYXRlSW5wdXQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRlRm9ybWF0ID0gJGF0dHJzLnVpYkRhdGVwaWNrZXJQb3B1cCB8fCBkYXRlcGlja2VyUG9wdXBDb25maWcuZGF0ZXBpY2tlclBvcHVwO1xuICAgICAgJGF0dHJzLiRvYnNlcnZlKCd1aWJEYXRlcGlja2VyUG9wdXAnLCBmdW5jdGlvbih2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdmFyIG5ld0RhdGVGb3JtYXQgPSB2YWx1ZSB8fCBkYXRlcGlja2VyUG9wdXBDb25maWcuZGF0ZXBpY2tlclBvcHVwO1xuICAgICAgICAvLyBJbnZhbGlkYXRlIHRoZSAkbW9kZWxWYWx1ZSB0byBlbnN1cmUgdGhhdCBmb3JtYXR0ZXJzIHJlLXJ1blxuICAgICAgICAvLyBGSVhNRTogUmVmYWN0b3Igd2hlbiBQUiBpcyBtZXJnZWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8xMDc2NFxuICAgICAgICBpZiAobmV3RGF0ZUZvcm1hdCAhPT0gZGF0ZUZvcm1hdCkge1xuICAgICAgICAgIGRhdGVGb3JtYXQgPSBuZXdEYXRlRm9ybWF0O1xuICAgICAgICAgIG5nTW9kZWwuJG1vZGVsVmFsdWUgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKCFkYXRlRm9ybWF0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VpYkRhdGVwaWNrZXJQb3B1cCBtdXN0IGhhdmUgYSBkYXRlIGZvcm1hdCBzcGVjaWZpZWQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIWRhdGVGb3JtYXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndWliRGF0ZXBpY2tlclBvcHVwIG11c3QgaGF2ZSBhIGRhdGUgZm9ybWF0IHNwZWNpZmllZC4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNIdG1sNURhdGVJbnB1dCAmJiAkYXR0cnMudWliRGF0ZXBpY2tlclBvcHVwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hUTUw1IGRhdGUgaW5wdXQgdHlwZXMgZG8gbm90IHN1cHBvcnQgY3VzdG9tIGZvcm1hdHMuJyk7XG4gICAgfVxuXG4gICAgLy8gcG9wdXAgZWxlbWVudCB1c2VkIHRvIGRpc3BsYXkgY2FsZW5kYXJcbiAgICBwb3B1cEVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IHVpYi1kYXRlcGlja2VyLXBvcHVwLXdyYXA+PGRpdiB1aWItZGF0ZXBpY2tlcj48L2Rpdj48L2Rpdj4nKTtcblxuICAgIHBvcHVwRWwuYXR0cih7XG4gICAgICAnbmctbW9kZWwnOiAnZGF0ZScsXG4gICAgICAnbmctY2hhbmdlJzogJ2RhdGVTZWxlY3Rpb24oZGF0ZSknLFxuICAgICAgJ3RlbXBsYXRlLXVybCc6IGRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsXG4gICAgfSk7XG5cbiAgICAvLyBkYXRlcGlja2VyIGVsZW1lbnRcbiAgICBkYXRlcGlja2VyRWwgPSBhbmd1bGFyLmVsZW1lbnQocG9wdXBFbC5jaGlsZHJlbigpWzBdKTtcbiAgICBkYXRlcGlja2VyRWwuYXR0cigndGVtcGxhdGUtdXJsJywgZGF0ZXBpY2tlclRlbXBsYXRlVXJsKTtcblxuICAgIGlmICghJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zKSB7XG4gICAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoaXNIdG1sNURhdGVJbnB1dCkge1xuICAgICAgaWYgKCRhdHRycy50eXBlID09PSAnbW9udGgnKSB7XG4gICAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSA9ICdtb250aCc7XG4gICAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5taW5Nb2RlID0gJ21vbnRoJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkYXRlcGlja2VyRWwuYXR0cignZGF0ZXBpY2tlci1vcHRpb25zJywgJ2RhdGVwaWNrZXJPcHRpb25zJyk7XG5cbiAgICBpZiAoIWlzSHRtbDVEYXRlSW5wdXQpIHtcbiAgICAgIC8vIEludGVybmFsIEFQSSB0byBtYWludGFpbiB0aGUgY29ycmVjdCBuZy1pbnZhbGlkLVtrZXldIGNsYXNzXG4gICAgICBuZ01vZGVsLiQkcGFyc2VyTmFtZSA9ICdkYXRlJztcbiAgICAgIG5nTW9kZWwuJHZhbGlkYXRvcnMuZGF0ZSA9IHZhbGlkYXRvcjtcbiAgICAgIG5nTW9kZWwuJHBhcnNlcnMudW5zaGlmdChwYXJzZURhdGUpO1xuICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChuZ01vZGVsLiRpc0VtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICRzY29wZS5kYXRlID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuZGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKHZhbHVlLCBuZ01vZGVsT3B0aW9ucy50aW1lem9uZSk7XG5cbiAgICAgICAgcmV0dXJuIGRhdGVQYXJzZXIuZmlsdGVyKCRzY29wZS5kYXRlLCBkYXRlRm9ybWF0KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgJHNjb3BlLmRhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZSh2YWx1ZSwgbmdNb2RlbE9wdGlvbnMudGltZXpvbmUpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBEZXRlY3QgY2hhbmdlcyBpbiB0aGUgdmlldyBmcm9tIHRoZSB0ZXh0IGJveFxuICAgIG5nTW9kZWwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5kYXRlID0gcGFyc2VEYXRlU3RyaW5nKG5nTW9kZWwuJHZpZXdWYWx1ZSk7XG4gICAgfSk7XG5cbiAgICAkZWxlbWVudC5vbigna2V5ZG93bicsIGlucHV0S2V5ZG93bkJpbmQpO1xuXG4gICAgJHBvcHVwID0gJGNvbXBpbGUocG9wdXBFbCkoJHNjb3BlKTtcbiAgICAvLyBQcmV2ZW50IGpRdWVyeSBjYWNoZSBtZW1vcnkgbGVhayAodGVtcGxhdGUgaXMgbm93IHJlZHVuZGFudCBhZnRlciBsaW5raW5nKVxuICAgIHBvcHVwRWwucmVtb3ZlKCk7XG5cbiAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLmFwcGVuZCgkcG9wdXApO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZWxlbWVudC5hZnRlcigkcG9wdXApO1xuICAgIH1cblxuICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoJHNjb3BlLmlzT3BlbiA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJHBvcHVwLnJlbW92ZSgpO1xuICAgICAgJGVsZW1lbnQub2ZmKCdrZXlkb3duJywgaW5wdXRLZXlkb3duQmluZCk7XG4gICAgICAkZG9jdW1lbnQub2ZmKCdjbGljaycsIGRvY3VtZW50Q2xpY2tCaW5kKTtcbiAgICAgIGlmIChzY3JvbGxQYXJlbnRFbCkge1xuICAgICAgICBzY3JvbGxQYXJlbnRFbC5vZmYoJ3Njcm9sbCcsIHBvc2l0aW9uUG9wdXApO1xuICAgICAgfVxuICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9mZigncmVzaXplJywgcG9zaXRpb25Qb3B1cCk7XG5cbiAgICAgIC8vQ2xlYXIgYWxsIHdhdGNoIGxpc3RlbmVycyBvbiBkZXN0cm95XG4gICAgICB3aGlsZSAod2F0Y2hMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgIHdhdGNoTGlzdGVuZXJzLnNoaWZ0KCkoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAkc2NvcGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAkc2NvcGVba2V5ICsgJ1RleHQnXSB8fCBkYXRlcGlja2VyUG9wdXBDb25maWdba2V5ICsgJ1RleHQnXTtcbiAgfTtcblxuICAkc2NvcGUuaXNEaXNhYmxlZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBpZiAoZGF0ZSA9PT0gJ3RvZGF5Jykge1xuICAgICAgZGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKG5ldyBEYXRlKCksIG5nTW9kZWxPcHRpb25zLnRpbWV6b25lKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0ZXMgPSB7fTtcbiAgICBhbmd1bGFyLmZvckVhY2goWydtaW5EYXRlJywgJ21heERhdGUnXSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoISRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKSB7XG4gICAgICAgIGRhdGVzW2tleV0gPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzRGF0ZSgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSkpIHtcbiAgICAgICAgZGF0ZXNba2V5XSA9IG5ldyBEYXRlKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgkZGF0ZXBpY2tlclBvcHVwTGl0ZXJhbFdhcm5pbmcpIHtcbiAgICAgICAgICAkbG9nLndhcm4oJ0xpdGVyYWwgZGF0ZSBzdXBwb3J0IGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSBzd2l0Y2ggdG8gZGF0ZSBvYmplY3QgdXNhZ2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGVzW2tleV0gPSBuZXcgRGF0ZShkYXRlRmlsdGVyKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldLCAnbWVkaXVtJykpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucyAmJlxuICAgICAgZGF0ZXMubWluRGF0ZSAmJiAkc2NvcGUuY29tcGFyZShkYXRlLCBkYXRlcy5taW5EYXRlKSA8IDAgfHxcbiAgICAgIGRhdGVzLm1heERhdGUgJiYgJHNjb3BlLmNvbXBhcmUoZGF0ZSwgZGF0ZXMubWF4RGF0ZSkgPiAwO1xuICB9O1xuXG4gICRzY29wZS5jb21wYXJlID0gZnVuY3Rpb24oZGF0ZTEsIGRhdGUyKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUxLmdldEZ1bGxZZWFyKCksIGRhdGUxLmdldE1vbnRoKCksIGRhdGUxLmdldERhdGUoKSkgLSBuZXcgRGF0ZShkYXRlMi5nZXRGdWxsWWVhcigpLCBkYXRlMi5nZXRNb250aCgpLCBkYXRlMi5nZXREYXRlKCkpO1xuICB9O1xuXG4gIC8vIElubmVyIGNoYW5nZVxuICAkc2NvcGUuZGF0ZVNlbGVjdGlvbiA9IGZ1bmN0aW9uKGR0KSB7XG4gICAgJHNjb3BlLmRhdGUgPSBkdDtcbiAgICB2YXIgZGF0ZSA9ICRzY29wZS5kYXRlID8gZGF0ZVBhcnNlci5maWx0ZXIoJHNjb3BlLmRhdGUsIGRhdGVGb3JtYXQpIDogbnVsbDsgLy8gU2V0dGluZyB0byBOVUxMIGlzIG5lY2Vzc2FyeSBmb3IgZm9ybSB2YWxpZGF0b3JzIHRvIGZ1bmN0aW9uXG4gICAgJGVsZW1lbnQudmFsKGRhdGUpO1xuICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShkYXRlKTtcblxuICAgIGlmIChjbG9zZU9uRGF0ZVNlbGVjdGlvbikge1xuICAgICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgJGVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmtleWRvd24gPSBmdW5jdGlvbihldnQpIHtcbiAgICBpZiAoZXZ0LndoaWNoID09PSAyNykge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgJGVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uKGRhdGUsIGV2dCkge1xuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmIChkYXRlID09PSAndG9kYXknKSB7XG4gICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEYXRlKCRzY29wZS5kYXRlKSkge1xuICAgICAgICBkYXRlID0gbmV3IERhdGUoJHNjb3BlLmRhdGUpO1xuICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHRvZGF5LmdldEZ1bGxZZWFyKCksIHRvZGF5LmdldE1vbnRoKCksIHRvZGF5LmdldERhdGUoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUodG9kYXksIG5nTW9kZWxPcHRpb25zLnRpbWV6b25lKTtcbiAgICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgJHNjb3BlLmRhdGVTZWxlY3Rpb24oZGF0ZSk7XG4gIH07XG5cbiAgJHNjb3BlLmNsb3NlID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICRlbGVtZW50WzBdLmZvY3VzKCk7XG4gIH07XG5cbiAgJHNjb3BlLmRpc2FibGVkID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRpc2FibGVkKSB8fCBmYWxzZTtcbiAgaWYgKCRhdHRycy5uZ0Rpc2FibGVkKSB7XG4gICAgd2F0Y2hMaXN0ZW5lcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5uZ0Rpc2FibGVkKSwgZnVuY3Rpb24oZGlzYWJsZWQpIHtcbiAgICAgICRzY29wZS5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIH0pKTtcbiAgfVxuXG4gICRzY29wZS4kd2F0Y2goJ2lzT3BlbicsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAoISRzY29wZS5kaXNhYmxlZCkge1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBwb3NpdGlvblBvcHVwKCk7XG5cbiAgICAgICAgICBpZiAob25PcGVuRm9jdXMpIHtcbiAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCd1aWI6ZGF0ZXBpY2tlci5mb2N1cycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRkb2N1bWVudC5vbignY2xpY2snLCBkb2N1bWVudENsaWNrQmluZCk7XG5cbiAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gJGF0dHJzLnBvcHVwUGxhY2VtZW50ID8gJGF0dHJzLnBvcHVwUGxhY2VtZW50IDogZGF0ZXBpY2tlclBvcHVwQ29uZmlnLnBsYWNlbWVudDtcbiAgICAgICAgICBpZiAoYXBwZW5kVG9Cb2R5IHx8ICRwb3NpdGlvbi5wYXJzZVBsYWNlbWVudChwbGFjZW1lbnQpWzJdKSB7XG4gICAgICAgICAgICBzY3JvbGxQYXJlbnRFbCA9IHNjcm9sbFBhcmVudEVsIHx8IGFuZ3VsYXIuZWxlbWVudCgkcG9zaXRpb24uc2Nyb2xsUGFyZW50KCRlbGVtZW50KSk7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsUGFyZW50RWwpIHtcbiAgICAgICAgICAgICAgc2Nyb2xsUGFyZW50RWwub24oJ3Njcm9sbCcsIHBvc2l0aW9uUG9wdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY3JvbGxQYXJlbnRFbCA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9uKCdyZXNpemUnLCBwb3NpdGlvblBvcHVwKTtcbiAgICAgICAgfSwgMCwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAkZG9jdW1lbnQub2ZmKCdjbGljaycsIGRvY3VtZW50Q2xpY2tCaW5kKTtcbiAgICAgIGlmIChzY3JvbGxQYXJlbnRFbCkge1xuICAgICAgICBzY3JvbGxQYXJlbnRFbC5vZmYoJ3Njcm9sbCcsIHBvc2l0aW9uUG9wdXApO1xuICAgICAgfVxuICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9mZigncmVzaXplJywgcG9zaXRpb25Qb3B1cCk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBjYW1lbHRvRGFzaChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24oJDEpIHsgcmV0dXJuICctJyArICQxLnRvTG93ZXJDYXNlKCk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VEYXRlU3RyaW5nKHZpZXdWYWx1ZSkge1xuICAgIHZhciBkYXRlID0gZGF0ZVBhcnNlci5wYXJzZSh2aWV3VmFsdWUsIGRhdGVGb3JtYXQsICRzY29wZS5kYXRlKTtcbiAgICBpZiAoaXNOYU4oZGF0ZSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWx0SW5wdXRGb3JtYXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRhdGUgPSBkYXRlUGFyc2VyLnBhcnNlKHZpZXdWYWx1ZSwgYWx0SW5wdXRGb3JtYXRzW2ldLCAkc2NvcGUuZGF0ZSk7XG4gICAgICAgIGlmICghaXNOYU4oZGF0ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGF0ZSh2aWV3VmFsdWUpIHtcbiAgICBpZiAoYW5ndWxhci5pc051bWJlcih2aWV3VmFsdWUpKSB7XG4gICAgICAvLyBwcmVzdW1hYmx5IHRpbWVzdGFtcCB0byBkYXRlIG9iamVjdFxuICAgICAgdmlld1ZhbHVlID0gbmV3IERhdGUodmlld1ZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoIXZpZXdWYWx1ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNEYXRlKHZpZXdWYWx1ZSkgJiYgIWlzTmFOKHZpZXdWYWx1ZSkpIHtcbiAgICAgIHJldHVybiB2aWV3VmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcodmlld1ZhbHVlKSkge1xuICAgICAgdmFyIGRhdGUgPSBwYXJzZURhdGVTdHJpbmcodmlld1ZhbHVlKTtcbiAgICAgIGlmICghaXNOYU4oZGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKGRhdGUsIG5nTW9kZWxPcHRpb25zLnRpbWV6b25lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmdNb2RlbC4kb3B0aW9ucyAmJiBuZ01vZGVsLiRvcHRpb25zLmFsbG93SW52YWxpZCA/IHZpZXdWYWx1ZSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcblxuICAgIGlmICghJGF0dHJzLm5nUmVxdWlyZWQgJiYgIXZhbHVlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoYW5ndWxhci5pc051bWJlcih2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gbmV3IERhdGUodmFsdWUpO1xuICAgIH1cblxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhbmd1bGFyLmlzRGF0ZSh2YWx1ZSkgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRGF0ZVN0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvY3VtZW50Q2xpY2tCaW5kKGV2ZW50KSB7XG4gICAgaWYgKCEkc2NvcGUuaXNPcGVuICYmICRzY29wZS5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwb3B1cCA9ICRwb3B1cFswXTtcbiAgICB2YXIgZHBDb250YWluc1RhcmdldCA9ICRlbGVtZW50WzBdLmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XG4gICAgLy8gVGhlIHBvcHVwIG5vZGUgbWF5IG5vdCBiZSBhbiBlbGVtZW50IG5vZGVcbiAgICAvLyBJbiBzb21lIGJyb3dzZXJzIChJRSkgb25seSBlbGVtZW50IG5vZGVzIGhhdmUgdGhlICdjb250YWlucycgZnVuY3Rpb25cbiAgICB2YXIgcG9wdXBDb250YWluc1RhcmdldCA9IHBvcHVwLmNvbnRhaW5zICE9PSB1bmRlZmluZWQgJiYgcG9wdXAuY29udGFpbnMoZXZlbnQudGFyZ2V0KTtcbiAgICBpZiAoJHNjb3BlLmlzT3BlbiAmJiAhKGRwQ29udGFpbnNUYXJnZXQgfHwgcG9wdXBDb250YWluc1RhcmdldCkpIHtcbiAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlucHV0S2V5ZG93bkJpbmQoZXZ0KSB7XG4gICAgaWYgKGV2dC53aGljaCA9PT0gMjcgJiYgJHNjb3BlLmlzT3Blbikge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgICRlbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgfSBlbHNlIGlmIChldnQud2hpY2ggPT09IDQwICYmICEkc2NvcGUuaXNPcGVuKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5pc09wZW4gPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcG9zaXRpb25Qb3B1cCgpIHtcbiAgICBpZiAoJHNjb3BlLmlzT3Blbikge1xuICAgICAgdmFyIGRwRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgkcG9wdXBbMF0ucXVlcnlTZWxlY3RvcignLnVpYi1kYXRlcGlja2VyLXBvcHVwJykpO1xuICAgICAgdmFyIHBsYWNlbWVudCA9ICRhdHRycy5wb3B1cFBsYWNlbWVudCA/ICRhdHRycy5wb3B1cFBsYWNlbWVudCA6IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5wbGFjZW1lbnQ7XG4gICAgICB2YXIgcG9zaXRpb24gPSAkcG9zaXRpb24ucG9zaXRpb25FbGVtZW50cygkZWxlbWVudCwgZHBFbGVtZW50LCBwbGFjZW1lbnQsIGFwcGVuZFRvQm9keSk7XG4gICAgICBkcEVsZW1lbnQuY3NzKHt0b3A6IHBvc2l0aW9uLnRvcCArICdweCcsIGxlZnQ6IHBvc2l0aW9uLmxlZnQgKyAncHgnfSk7XG4gICAgICBpZiAoZHBFbGVtZW50Lmhhc0NsYXNzKCd1aWItcG9zaXRpb24tbWVhc3VyZScpKSB7XG4gICAgICAgIGRwRWxlbWVudC5yZW1vdmVDbGFzcygndWliLXBvc2l0aW9uLW1lYXN1cmUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAkc2NvcGUuJG9uKCd1aWI6ZGF0ZXBpY2tlci5tb2RlJywgZnVuY3Rpb24oKSB7XG4gICAgJHRpbWVvdXQocG9zaXRpb25Qb3B1cCwgMCwgZmFsc2UpO1xuICB9KTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJEYXRlcGlja2VyUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAndWliRGF0ZXBpY2tlclBvcHVwJ10sXG4gICAgY29udHJvbGxlcjogJ1VpYkRhdGVwaWNrZXJQb3B1cENvbnRyb2xsZXInLFxuICAgIHNjb3BlOiB7XG4gICAgICBkYXRlcGlja2VyT3B0aW9uczogJz0/JyxcbiAgICAgIGlzT3BlbjogJz0/JyxcbiAgICAgIGN1cnJlbnRUZXh0OiAnQCcsXG4gICAgICBjbGVhclRleHQ6ICdAJyxcbiAgICAgIGNsb3NlVGV4dDogJ0AnXG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgbmdNb2RlbCA9IGN0cmxzWzBdLFxuICAgICAgICBjdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGN0cmwuaW5pdChuZ01vZGVsKTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJEYXRlcGlja2VyUG9wdXBXcmFwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlclBvcHVwL3BvcHVwLmh0bWwnO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRlYm91bmNlJywgW10pXG4vKipcbiAqIEEgaGVscGVyLCBpbnRlcm5hbCBzZXJ2aWNlIHRoYXQgZGVib3VuY2VzIGEgZnVuY3Rpb25cbiAqL1xuICAuZmFjdG9yeSgnJCRkZWJvdW5jZScsIFsnJHRpbWVvdXQnLCBmdW5jdGlvbigkdGltZW91dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaywgZGVib3VuY2VUaW1lKSB7XG4gICAgICB2YXIgdGltZW91dFByb21pc2U7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICh0aW1lb3V0UHJvbWlzZSkge1xuICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lb3V0UHJvbWlzZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lb3V0UHJvbWlzZSA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICB9LCBkZWJvdW5jZVRpbWUpO1xuICAgICAgfTtcbiAgICB9O1xuICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZHJvcGRvd24nLCBbJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbiddKVxuXG4uY29uc3RhbnQoJ3VpYkRyb3Bkb3duQ29uZmlnJywge1xuICBhcHBlbmRUb09wZW5DbGFzczogJ3VpYi1kcm9wZG93bi1vcGVuJyxcbiAgb3BlbkNsYXNzOiAnb3Blbidcbn0pXG5cbi5zZXJ2aWNlKCd1aWJEcm9wZG93blNlcnZpY2UnLCBbJyRkb2N1bWVudCcsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJGRvY3VtZW50LCAkcm9vdFNjb3BlKSB7XG4gIHZhciBvcGVuU2NvcGUgPSBudWxsO1xuXG4gIHRoaXMub3BlbiA9IGZ1bmN0aW9uKGRyb3Bkb3duU2NvcGUsIGVsZW1lbnQpIHtcbiAgICBpZiAoIW9wZW5TY29wZSkge1xuICAgICAgJGRvY3VtZW50Lm9uKCdjbGljaycsIGNsb3NlRHJvcGRvd24pO1xuICAgIH1cblxuICAgIGlmIChvcGVuU2NvcGUgJiYgb3BlblNjb3BlICE9PSBkcm9wZG93blNjb3BlKSB7XG4gICAgICBvcGVuU2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgb3BlblNjb3BlID0gZHJvcGRvd25TY29wZTtcbiAgfTtcblxuICB0aGlzLmNsb3NlID0gZnVuY3Rpb24oZHJvcGRvd25TY29wZSwgZWxlbWVudCkge1xuICAgIGlmIChvcGVuU2NvcGUgPT09IGRyb3Bkb3duU2NvcGUpIHtcbiAgICAgICRkb2N1bWVudC5vZmYoJ2NsaWNrJywgY2xvc2VEcm9wZG93bik7XG4gICAgICAkZG9jdW1lbnQub2ZmKCdrZXlkb3duJywgdGhpcy5rZXliaW5kRmlsdGVyKTtcbiAgICAgIG9wZW5TY29wZSA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjbG9zZURyb3Bkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgLy8gVGhpcyBtZXRob2QgbWF5IHN0aWxsIGJlIGNhbGxlZCBkdXJpbmcgdGhlIHNhbWUgbW91c2UgZXZlbnQgdGhhdFxuICAgIC8vIHVuYm91bmQgdGhpcyBldmVudCBoYW5kbGVyLiBTbyBjaGVjayBvcGVuU2NvcGUgYmVmb3JlIHByb2NlZWRpbmcuXG4gICAgaWYgKCFvcGVuU2NvcGUpIHsgcmV0dXJuOyB9XG5cbiAgICBpZiAoZXZ0ICYmIG9wZW5TY29wZS5nZXRBdXRvQ2xvc2UoKSA9PT0gJ2Rpc2FibGVkJykgeyByZXR1cm47IH1cblxuICAgIGlmIChldnQgJiYgZXZ0LndoaWNoID09PSAzKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIHRvZ2dsZUVsZW1lbnQgPSBvcGVuU2NvcGUuZ2V0VG9nZ2xlRWxlbWVudCgpO1xuICAgIGlmIChldnQgJiYgdG9nZ2xlRWxlbWVudCAmJiB0b2dnbGVFbGVtZW50WzBdLmNvbnRhaW5zKGV2dC50YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRyb3Bkb3duRWxlbWVudCA9IG9wZW5TY29wZS5nZXREcm9wZG93bkVsZW1lbnQoKTtcbiAgICBpZiAoZXZ0ICYmIG9wZW5TY29wZS5nZXRBdXRvQ2xvc2UoKSA9PT0gJ291dHNpZGVDbGljaycgJiZcbiAgICAgIGRyb3Bkb3duRWxlbWVudCAmJiBkcm9wZG93bkVsZW1lbnRbMF0uY29udGFpbnMoZXZ0LnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcGVuU2NvcGUuZm9jdXNUb2dnbGVFbGVtZW50KCk7XG4gICAgb3BlblNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuXG4gICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgIG9wZW5TY29wZS4kYXBwbHkoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5rZXliaW5kRmlsdGVyID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgaWYgKCFvcGVuU2NvcGUpIHtcbiAgICAgIC8vIHNlZSB0aGlzLmNsb3NlIGFzIEVTQyBjb3VsZCBoYXZlIGJlZW4gcHJlc3NlZCB3aGljaCBraWxscyB0aGUgc2NvcGUgc28gd2UgY2FuIG5vdCBwcm9jZWVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRyb3Bkb3duRWxlbWVudCA9IG9wZW5TY29wZS5nZXREcm9wZG93bkVsZW1lbnQoKTtcbiAgICB2YXIgdG9nZ2xlRWxlbWVudCA9IG9wZW5TY29wZS5nZXRUb2dnbGVFbGVtZW50KCk7XG4gICAgdmFyIGRyb3Bkb3duRWxlbWVudFRhcmdldGVkID0gZHJvcGRvd25FbGVtZW50ICYmIGRyb3Bkb3duRWxlbWVudFswXS5jb250YWlucyhldnQudGFyZ2V0KTtcbiAgICB2YXIgdG9nZ2xlRWxlbWVudFRhcmdldGVkID0gdG9nZ2xlRWxlbWVudCAmJiB0b2dnbGVFbGVtZW50WzBdLmNvbnRhaW5zKGV2dC50YXJnZXQpO1xuICAgIGlmIChldnQud2hpY2ggPT09IDI3KSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBvcGVuU2NvcGUuZm9jdXNUb2dnbGVFbGVtZW50KCk7XG4gICAgICBjbG9zZURyb3Bkb3duKCk7XG4gICAgfSBlbHNlIGlmIChvcGVuU2NvcGUuaXNLZXluYXZFbmFibGVkKCkgJiYgWzM4LCA0MF0uaW5kZXhPZihldnQud2hpY2gpICE9PSAtMSAmJiBvcGVuU2NvcGUuaXNPcGVuICYmIChkcm9wZG93bkVsZW1lbnRUYXJnZXRlZCB8fCB0b2dnbGVFbGVtZW50VGFyZ2V0ZWQpKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIG9wZW5TY29wZS5mb2N1c0Ryb3Bkb3duRW50cnkoZXZ0LndoaWNoKTtcbiAgICB9XG4gIH07XG59XSlcblxuLmNvbnRyb2xsZXIoJ1VpYkRyb3Bkb3duQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICckcGFyc2UnLCAndWliRHJvcGRvd25Db25maWcnLCAndWliRHJvcGRvd25TZXJ2aWNlJywgJyRhbmltYXRlJywgJyR1aWJQb3NpdGlvbicsICckZG9jdW1lbnQnLCAnJGNvbXBpbGUnLCAnJHRlbXBsYXRlUmVxdWVzdCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJHBhcnNlLCBkcm9wZG93bkNvbmZpZywgdWliRHJvcGRvd25TZXJ2aWNlLCAkYW5pbWF0ZSwgJHBvc2l0aW9uLCAkZG9jdW1lbnQsICRjb21waWxlLCAkdGVtcGxhdGVSZXF1ZXN0KSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICBzY29wZSA9ICRzY29wZS4kbmV3KCksIC8vIGNyZWF0ZSBhIGNoaWxkIHNjb3BlIHNvIHdlIGFyZSBub3QgcG9sbHV0aW5nIG9yaWdpbmFsIG9uZVxuICAgIHRlbXBsYXRlU2NvcGUsXG4gICAgYXBwZW5kVG9PcGVuQ2xhc3MgPSBkcm9wZG93bkNvbmZpZy5hcHBlbmRUb09wZW5DbGFzcyxcbiAgICBvcGVuQ2xhc3MgPSBkcm9wZG93bkNvbmZpZy5vcGVuQ2xhc3MsXG4gICAgZ2V0SXNPcGVuLFxuICAgIHNldElzT3BlbiA9IGFuZ3VsYXIubm9vcCxcbiAgICB0b2dnbGVJbnZva2VyID0gJGF0dHJzLm9uVG9nZ2xlID8gJHBhcnNlKCRhdHRycy5vblRvZ2dsZSkgOiBhbmd1bGFyLm5vb3AsXG4gICAgYXBwZW5kVG9Cb2R5ID0gZmFsc2UsXG4gICAgYXBwZW5kVG8gPSBudWxsLFxuICAgIGtleW5hdkVuYWJsZWQgPSBmYWxzZSxcbiAgICBzZWxlY3RlZE9wdGlvbiA9IG51bGwsXG4gICAgYm9keSA9ICRkb2N1bWVudC5maW5kKCdib2R5Jyk7XG5cbiAgJGVsZW1lbnQuYWRkQ2xhc3MoJ2Ryb3Bkb3duJyk7XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCRhdHRycy5pc09wZW4pIHtcbiAgICAgIGdldElzT3BlbiA9ICRwYXJzZSgkYXR0cnMuaXNPcGVuKTtcbiAgICAgIHNldElzT3BlbiA9IGdldElzT3Blbi5hc3NpZ247XG5cbiAgICAgICRzY29wZS4kd2F0Y2goZ2V0SXNPcGVuLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBzY29wZS5pc09wZW4gPSAhIXZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kcm9wZG93bkFwcGVuZFRvKSkge1xuICAgICAgdmFyIGFwcGVuZFRvRWwgPSAkcGFyc2UoJGF0dHJzLmRyb3Bkb3duQXBwZW5kVG8pKHNjb3BlKTtcbiAgICAgIGlmIChhcHBlbmRUb0VsKSB7XG4gICAgICAgIGFwcGVuZFRvID0gYW5ndWxhci5lbGVtZW50KGFwcGVuZFRvRWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFwcGVuZFRvQm9keSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kcm9wZG93bkFwcGVuZFRvQm9keSk7XG4gICAga2V5bmF2RW5hYmxlZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5rZXlib2FyZE5hdik7XG5cbiAgICBpZiAoYXBwZW5kVG9Cb2R5ICYmICFhcHBlbmRUbykge1xuICAgICAgYXBwZW5kVG8gPSBib2R5O1xuICAgIH1cblxuICAgIGlmIChhcHBlbmRUbyAmJiBzZWxmLmRyb3Bkb3duTWVudSkge1xuICAgICAgYXBwZW5kVG8uYXBwZW5kKHNlbGYuZHJvcGRvd25NZW51KTtcbiAgICAgICRlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uIGhhbmRsZURlc3Ryb3lFdmVudCgpIHtcbiAgICAgICAgc2VsZi5kcm9wZG93bk1lbnUucmVtb3ZlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy50b2dnbGUgPSBmdW5jdGlvbihvcGVuKSB7XG4gICAgc2NvcGUuaXNPcGVuID0gYXJndW1lbnRzLmxlbmd0aCA/ICEhb3BlbiA6ICFzY29wZS5pc09wZW47XG4gICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihzZXRJc09wZW4pKSB7XG4gICAgICBzZXRJc09wZW4oc2NvcGUsIHNjb3BlLmlzT3Blbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjb3BlLmlzT3BlbjtcbiAgfTtcblxuICAvLyBBbGxvdyBvdGhlciBkaXJlY3RpdmVzIHRvIHdhdGNoIHN0YXR1c1xuICB0aGlzLmlzT3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzY29wZS5pc09wZW47XG4gIH07XG5cbiAgc2NvcGUuZ2V0VG9nZ2xlRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLnRvZ2dsZUVsZW1lbnQ7XG4gIH07XG5cbiAgc2NvcGUuZ2V0QXV0b0Nsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICRhdHRycy5hdXRvQ2xvc2UgfHwgJ2Fsd2F5cyc7IC8vb3IgJ291dHNpZGVDbGljaycgb3IgJ2Rpc2FibGVkJ1xuICB9O1xuXG4gIHNjb3BlLmdldEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJGVsZW1lbnQ7XG4gIH07XG5cbiAgc2NvcGUuaXNLZXluYXZFbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGtleW5hdkVuYWJsZWQ7XG4gIH07XG5cbiAgc2NvcGUuZm9jdXNEcm9wZG93bkVudHJ5ID0gZnVuY3Rpb24oa2V5Q29kZSkge1xuICAgIHZhciBlbGVtcyA9IHNlbGYuZHJvcGRvd25NZW51ID8gLy9JZiBhcHBlbmQgdG8gYm9keSBpcyB1c2VkLlxuICAgICAgYW5ndWxhci5lbGVtZW50KHNlbGYuZHJvcGRvd25NZW51KS5maW5kKCdhJykgOlxuICAgICAgJGVsZW1lbnQuZmluZCgndWwnKS5lcSgwKS5maW5kKCdhJyk7XG5cbiAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICAgIGNhc2UgNDA6IHtcbiAgICAgICAgaWYgKCFhbmd1bGFyLmlzTnVtYmVyKHNlbGYuc2VsZWN0ZWRPcHRpb24pKSB7XG4gICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA9IHNlbGYuc2VsZWN0ZWRPcHRpb24gPT09IGVsZW1zLmxlbmd0aCAtIDEgP1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA6XG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkT3B0aW9uICsgMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzg6IHtcbiAgICAgICAgaWYgKCFhbmd1bGFyLmlzTnVtYmVyKHNlbGYuc2VsZWN0ZWRPcHRpb24pKSB7XG4gICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA9IGVsZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA9IHNlbGYuc2VsZWN0ZWRPcHRpb24gPT09IDAgP1xuICAgICAgICAgICAgMCA6IHNlbGYuc2VsZWN0ZWRPcHRpb24gLSAxO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBlbGVtc1tzZWxmLnNlbGVjdGVkT3B0aW9uXS5mb2N1cygpO1xuICB9O1xuXG4gIHNjb3BlLmdldERyb3Bkb3duRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLmRyb3Bkb3duTWVudTtcbiAgfTtcblxuICBzY29wZS5mb2N1c1RvZ2dsZUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi50b2dnbGVFbGVtZW50KSB7XG4gICAgICBzZWxmLnRvZ2dsZUVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgc2NvcGUuJHdhdGNoKCdpc09wZW4nLCBmdW5jdGlvbihpc09wZW4sIHdhc09wZW4pIHtcbiAgICBpZiAoYXBwZW5kVG8gJiYgc2VsZi5kcm9wZG93bk1lbnUpIHtcbiAgICAgIHZhciBwb3MgPSAkcG9zaXRpb24ucG9zaXRpb25FbGVtZW50cygkZWxlbWVudCwgc2VsZi5kcm9wZG93bk1lbnUsICdib3R0b20tbGVmdCcsIHRydWUpLFxuICAgICAgICBjc3MsXG4gICAgICAgIHJpZ2h0YWxpZ24sXG4gICAgICAgIHNjcm9sbGJhclBhZGRpbmcsXG4gICAgICAgIHNjcm9sbGJhcldpZHRoID0gMDtcblxuICAgICAgY3NzID0ge1xuICAgICAgICB0b3A6IHBvcy50b3AgKyAncHgnLFxuICAgICAgICBkaXNwbGF5OiBpc09wZW4gPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICB9O1xuXG4gICAgICByaWdodGFsaWduID0gc2VsZi5kcm9wZG93bk1lbnUuaGFzQ2xhc3MoJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnKTtcbiAgICAgIGlmICghcmlnaHRhbGlnbikge1xuICAgICAgICBjc3MubGVmdCA9IHBvcy5sZWZ0ICsgJ3B4JztcbiAgICAgICAgY3NzLnJpZ2h0ID0gJ2F1dG8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3NzLmxlZnQgPSAnYXV0byc7XG4gICAgICAgIHNjcm9sbGJhclBhZGRpbmcgPSAkcG9zaXRpb24uc2Nyb2xsYmFyUGFkZGluZyhhcHBlbmRUbyk7XG5cbiAgICAgICAgaWYgKHNjcm9sbGJhclBhZGRpbmcuaGVpZ2h0T3ZlcmZsb3cgJiYgc2Nyb2xsYmFyUGFkZGluZy5zY3JvbGxiYXJXaWR0aCkge1xuICAgICAgICAgIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsYmFyUGFkZGluZy5zY3JvbGxiYXJXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNzcy5yaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gc2Nyb2xsYmFyV2lkdGggLVxuICAgICAgICAgIChwb3MubGVmdCArICRlbGVtZW50LnByb3AoJ29mZnNldFdpZHRoJykpICsgJ3B4JztcbiAgICAgIH1cblxuICAgICAgLy8gTmVlZCB0byBhZGp1c3Qgb3VyIHBvc2l0aW9uaW5nIHRvIGJlIHJlbGF0aXZlIHRvIHRoZSBhcHBlbmRUbyBjb250YWluZXJcbiAgICAgIC8vIGlmIGl0J3Mgbm90IHRoZSBib2R5IGVsZW1lbnRcbiAgICAgIGlmICghYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAgIHZhciBhcHBlbmRPZmZzZXQgPSAkcG9zaXRpb24ub2Zmc2V0KGFwcGVuZFRvKTtcblxuICAgICAgICBjc3MudG9wID0gcG9zLnRvcCAtIGFwcGVuZE9mZnNldC50b3AgKyAncHgnO1xuXG4gICAgICAgIGlmICghcmlnaHRhbGlnbikge1xuICAgICAgICAgIGNzcy5sZWZ0ID0gcG9zLmxlZnQgLSBhcHBlbmRPZmZzZXQubGVmdCArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3NzLnJpZ2h0ID0gd2luZG93LmlubmVyV2lkdGggLVxuICAgICAgICAgICAgKHBvcy5sZWZ0IC0gYXBwZW5kT2Zmc2V0LmxlZnQgKyAkZWxlbWVudC5wcm9wKCdvZmZzZXRXaWR0aCcpKSArICdweCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi5kcm9wZG93bk1lbnUuY3NzKGNzcyk7XG4gICAgfVxuXG4gICAgdmFyIG9wZW5Db250YWluZXIgPSBhcHBlbmRUbyA/IGFwcGVuZFRvIDogJGVsZW1lbnQ7XG4gICAgdmFyIGhhc09wZW5DbGFzcyA9IG9wZW5Db250YWluZXIuaGFzQ2xhc3MoYXBwZW5kVG8gPyBhcHBlbmRUb09wZW5DbGFzcyA6IG9wZW5DbGFzcyk7XG5cbiAgICBpZiAoaGFzT3BlbkNsYXNzID09PSAhaXNPcGVuKSB7XG4gICAgICAkYW5pbWF0ZVtpc09wZW4gPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ob3BlbkNvbnRhaW5lciwgYXBwZW5kVG8gPyBhcHBlbmRUb09wZW5DbGFzcyA6IG9wZW5DbGFzcykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGlzT3BlbikgJiYgaXNPcGVuICE9PSB3YXNPcGVuKSB7XG4gICAgICAgICAgdG9nZ2xlSW52b2tlcigkc2NvcGUsIHsgb3BlbjogISFpc09wZW4gfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpc09wZW4pIHtcbiAgICAgIGlmIChzZWxmLmRyb3Bkb3duTWVudVRlbXBsYXRlVXJsKSB7XG4gICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Qoc2VsZi5kcm9wZG93bk1lbnVUZW1wbGF0ZVVybCkudGhlbihmdW5jdGlvbih0cGxDb250ZW50KSB7XG4gICAgICAgICAgdGVtcGxhdGVTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAkY29tcGlsZSh0cGxDb250ZW50LnRyaW0oKSkodGVtcGxhdGVTY29wZSwgZnVuY3Rpb24oZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgbmV3RWwgPSBkcm9wZG93bkVsZW1lbnQ7XG4gICAgICAgICAgICBzZWxmLmRyb3Bkb3duTWVudS5yZXBsYWNlV2l0aChuZXdFbCk7XG4gICAgICAgICAgICBzZWxmLmRyb3Bkb3duTWVudSA9IG5ld0VsO1xuICAgICAgICAgICAgJGRvY3VtZW50Lm9uKCdrZXlkb3duJywgdWliRHJvcGRvd25TZXJ2aWNlLmtleWJpbmRGaWx0ZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRkb2N1bWVudC5vbigna2V5ZG93bicsIHVpYkRyb3Bkb3duU2VydmljZS5rZXliaW5kRmlsdGVyKTtcbiAgICAgIH1cblxuICAgICAgc2NvcGUuZm9jdXNUb2dnbGVFbGVtZW50KCk7XG4gICAgICB1aWJEcm9wZG93blNlcnZpY2Uub3BlbihzY29wZSwgJGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1aWJEcm9wZG93blNlcnZpY2UuY2xvc2Uoc2NvcGUsICRlbGVtZW50KTtcbiAgICAgIGlmIChzZWxmLmRyb3Bkb3duTWVudVRlbXBsYXRlVXJsKSB7XG4gICAgICAgIGlmICh0ZW1wbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgdGVtcGxhdGVTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdFbCA9IGFuZ3VsYXIuZWxlbWVudCgnPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiPjwvdWw+Jyk7XG4gICAgICAgIHNlbGYuZHJvcGRvd25NZW51LnJlcGxhY2VXaXRoKG5ld0VsKTtcbiAgICAgICAgc2VsZi5kcm9wZG93bk1lbnUgPSBuZXdFbDtcbiAgICAgIH1cblxuICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihzZXRJc09wZW4pKSB7XG4gICAgICBzZXRJc09wZW4oJHNjb3BlLCBpc09wZW4pO1xuICAgIH1cbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliRHJvcGRvd24nLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiAnVWliRHJvcGRvd25Db250cm9sbGVyJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGRyb3Bkb3duQ3RybCkge1xuICAgICAgZHJvcGRvd25DdHJsLmluaXQoKTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJEcm9wZG93bk1lbnUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/XnVpYkRyb3Bkb3duJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGRyb3Bkb3duQ3RybCkge1xuICAgICAgaWYgKCFkcm9wZG93bkN0cmwgfHwgYW5ndWxhci5pc0RlZmluZWQoYXR0cnMuZHJvcGRvd25OZXN0ZWQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5hZGRDbGFzcygnZHJvcGRvd24tbWVudScpO1xuXG4gICAgICB2YXIgdHBsVXJsID0gYXR0cnMudGVtcGxhdGVVcmw7XG4gICAgICBpZiAodHBsVXJsKSB7XG4gICAgICAgIGRyb3Bkb3duQ3RybC5kcm9wZG93bk1lbnVUZW1wbGF0ZVVybCA9IHRwbFVybDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkcm9wZG93bkN0cmwuZHJvcGRvd25NZW51KSB7XG4gICAgICAgIGRyb3Bkb3duQ3RybC5kcm9wZG93bk1lbnUgPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYkRyb3Bkb3duVG9nZ2xlJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJz9edWliRHJvcGRvd24nLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgZHJvcGRvd25DdHJsKSB7XG4gICAgICBpZiAoIWRyb3Bkb3duQ3RybCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2Ryb3Bkb3duLXRvZ2dsZScpO1xuXG4gICAgICBkcm9wZG93bkN0cmwudG9nZ2xlRWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgIHZhciB0b2dnbGVEcm9wZG93biA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50Lmhhc0NsYXNzKCdkaXNhYmxlZCcpICYmICFhdHRycy5kaXNhYmxlZCkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duQ3RybC50b2dnbGUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZWxlbWVudC5iaW5kKCdjbGljaycsIHRvZ2dsZURyb3Bkb3duKTtcblxuICAgICAgLy8gV0FJLUFSSUFcbiAgICAgIGVsZW1lbnQuYXR0cih7ICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSwgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSB9KTtcbiAgICAgIHNjb3BlLiR3YXRjaChkcm9wZG93bkN0cmwuaXNPcGVuLCBmdW5jdGlvbihpc09wZW4pIHtcbiAgICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgISFpc09wZW4pO1xuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudC51bmJpbmQoJ2NsaWNrJywgdG9nZ2xlRHJvcGRvd24pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuc3RhY2tlZE1hcCcsIFtdKVxuLyoqXG4gKiBBIGhlbHBlciwgaW50ZXJuYWwgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBhY3RzIGFzIGEgbWFwIGJ1dCBhbHNvIGFsbG93cyBnZXR0aW5nIC8gcmVtb3ZpbmdcbiAqIGVsZW1lbnRzIGluIHRoZSBMSUZPIG9yZGVyXG4gKi9cbiAgLmZhY3RvcnkoJyQkc3RhY2tlZE1hcCcsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVOZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhY2sgPSBbXTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFkZDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGtleSA9PT0gc3RhY2tbaV0ua2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrW2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGtleXMucHVzaChzdGFja1tpXS5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciBpZHggPSAtMTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGtleSA9PT0gc3RhY2tbaV0ua2V5KSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnNwbGljZShpZHgsIDEpWzBdO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlVG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFjay5wb3AoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGxlbmd0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2subGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAubW9kYWwnLCBbJ3VpLmJvb3RzdHJhcC5zdGFja2VkTWFwJywgJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbiddKVxuLyoqXG4gKiBBIGhlbHBlciwgaW50ZXJuYWwgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBzdG9yZXMgYWxsIHJlZmVyZW5jZXMgYXR0YWNoZWQgdG8ga2V5XG4gKi9cbiAgLmZhY3RvcnkoJyQkbXVsdGlNYXAnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlTmV3OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1hcCA9IHt9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IG1hcFtrZXldXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwW2tleV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYXNLZXk6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuICEhbWFwW2tleV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIW1hcFtrZXldKSB7XG4gICAgICAgICAgICAgIG1hcFtrZXldID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hcFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gbWFwW2tleV07XG5cbiAgICAgICAgICAgIGlmICghdmFsdWVzKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGlkeCA9IHZhbHVlcy5pbmRleE9mKHZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgdmFsdWVzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIG1hcFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9KVxuXG4vKipcbiAqIFBsdWdnYWJsZSByZXNvbHZlIG1lY2hhbmlzbSBmb3IgdGhlIG1vZGFsIHJlc29sdmUgcmVzb2x1dGlvblxuICogU3VwcG9ydHMgVUkgUm91dGVyJ3MgJHJlc29sdmUgc2VydmljZVxuICovXG4gIC5wcm92aWRlcignJHVpYlJlc29sdmUnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzb2x2ZSA9IHRoaXM7XG4gICAgdGhpcy5yZXNvbHZlciA9IG51bGw7XG5cbiAgICB0aGlzLnNldFJlc29sdmVyID0gZnVuY3Rpb24ocmVzb2x2ZXIpIHtcbiAgICAgIHRoaXMucmVzb2x2ZXIgPSByZXNvbHZlcjtcbiAgICB9O1xuXG4gICAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHEnLCBmdW5jdGlvbigkaW5qZWN0b3IsICRxKSB7XG4gICAgICB2YXIgcmVzb2x2ZXIgPSByZXNvbHZlLnJlc29sdmVyID8gJGluamVjdG9yLmdldChyZXNvbHZlLnJlc29sdmVyKSA6IG51bGw7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbihpbnZvY2FibGVzLCBsb2NhbHMsIHBhcmVudCwgc2VsZikge1xuICAgICAgICAgIGlmIChyZXNvbHZlcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVyLnJlc29sdmUoaW52b2NhYmxlcywgbG9jYWxzLCBwYXJlbnQsIHNlbGYpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xuXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGludm9jYWJsZXMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHZhbHVlKSB8fCBhbmd1bGFyLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHByb21pc2VzLnB1c2goJHEucmVzb2x2ZSgkaW5qZWN0b3IuaW52b2tlKHZhbHVlKSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKCRxLnJlc29sdmUoJGluamVjdG9yLmdldCh2YWx1ZSkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByb21pc2VzLnB1c2goJHEucmVzb2x2ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuICRxLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihyZXNvbHZlcykge1xuICAgICAgICAgICAgdmFyIHJlc29sdmVPYmogPSB7fTtcbiAgICAgICAgICAgIHZhciByZXNvbHZlSXRlciA9IDA7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaW52b2NhYmxlcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICByZXNvbHZlT2JqW2tleV0gPSByZXNvbHZlc1tyZXNvbHZlSXRlcisrXTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZU9iajtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XTtcbiAgfSlcblxuLyoqXG4gKiBBIGhlbHBlciBkaXJlY3RpdmUgZm9yIHRoZSAkbW9kYWwgc2VydmljZS4gSXQgY3JlYXRlcyBhIGJhY2tkcm9wIGVsZW1lbnQuXG4gKi9cbiAgLmRpcmVjdGl2ZSgndWliTW9kYWxCYWNrZHJvcCcsIFsnJGFuaW1hdGUnLCAnJGluamVjdG9yJywgJyR1aWJNb2RhbFN0YWNrJyxcbiAgZnVuY3Rpb24oJGFuaW1hdGUsICRpbmplY3RvciwgJG1vZGFsU3RhY2spIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgICAgdEVsZW1lbnQuYWRkQ2xhc3ModEF0dHJzLmJhY2tkcm9wQ2xhc3MpO1xuICAgICAgICByZXR1cm4gbGlua0ZuO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICBpZiAoYXR0cnMubW9kYWxJbkNsYXNzKSB7XG4gICAgICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsIGF0dHJzLm1vZGFsSW5DbGFzcyk7XG5cbiAgICAgICAgc2NvcGUuJG9uKCRtb2RhbFN0YWNrLk5PV19DTE9TSU5HX0VWRU5ULCBmdW5jdGlvbihlLCBzZXRJc0FzeW5jKSB7XG4gICAgICAgICAgdmFyIGRvbmUgPSBzZXRJc0FzeW5jKCk7XG4gICAgICAgICAgaWYgKHNjb3BlLm1vZGFsT3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIGF0dHJzLm1vZGFsSW5DbGFzcykudGhlbihkb25lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XSlcblxuICAuZGlyZWN0aXZlKCd1aWJNb2RhbFdpbmRvdycsIFsnJHVpYk1vZGFsU3RhY2snLCAnJHEnLCAnJGFuaW1hdGVDc3MnLCAnJGRvY3VtZW50JyxcbiAgZnVuY3Rpb24oJG1vZGFsU3RhY2ssICRxLCAkYW5pbWF0ZUNzcywgJGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGluZGV4OiAnQCdcbiAgICAgIH0sXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICAgIHJldHVybiB0QXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbCc7XG4gICAgICB9LFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoYXR0cnMud2luZG93VG9wQ2xhc3MgfHwgJycpO1xuICAgICAgICBzY29wZS5zaXplID0gYXR0cnMuc2l6ZTtcblxuICAgICAgICBzY29wZS5jbG9zZSA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgIHZhciBtb2RhbCA9ICRtb2RhbFN0YWNrLmdldFRvcCgpO1xuICAgICAgICAgIGlmIChtb2RhbCAmJiBtb2RhbC52YWx1ZS5iYWNrZHJvcCAmJlxuICAgICAgICAgICAgbW9kYWwudmFsdWUuYmFja2Ryb3AgIT09ICdzdGF0aWMnICYmXG4gICAgICAgICAgICBldnQudGFyZ2V0ID09PSBldnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAkbW9kYWxTdGFjay5kaXNtaXNzKG1vZGFsLmtleSwgJ2JhY2tkcm9wIGNsaWNrJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIG1vdmVkIGZyb20gdGVtcGxhdGUgdG8gZml4IGlzc3VlICMyMjgwXG4gICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgc2NvcGUuY2xvc2UpO1xuXG4gICAgICAgIC8vIFRoaXMgcHJvcGVydHkgaXMgb25seSBhZGRlZCB0byB0aGUgc2NvcGUgZm9yIHRoZSBwdXJwb3NlIG9mIGRldGVjdGluZyB3aGVuIHRoaXMgZGlyZWN0aXZlIGlzIHJlbmRlcmVkLlxuICAgICAgICAvLyBXZSBjYW4gZGV0ZWN0IHRoYXQgYnkgdXNpbmcgdGhpcyBwcm9wZXJ0eSBpbiB0aGUgdGVtcGxhdGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGlyZWN0aXZlIGFuZCB0aGVuIHVzZVxuICAgICAgICAvLyB7QGxpbmsgQXR0cmlidXRlIyRvYnNlcnZlfSBvbiBpdC4gRm9yIG1vcmUgZGV0YWlscyBwbGVhc2Ugc2VlIHtAbGluayBUYWJsZUNvbHVtblJlc2l6ZX0uXG4gICAgICAgIHNjb3BlLiRpc1JlbmRlcmVkID0gdHJ1ZTtcblxuICAgICAgICAvLyBEZWZlcnJlZCBvYmplY3QgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdoZW4gdGhpcyBtb2RhbCBpcyByZW5kZXJlZC5cbiAgICAgICAgdmFyIG1vZGFsUmVuZGVyRGVmZXJPYmogPSAkcS5kZWZlcigpO1xuICAgICAgICAvLyBSZXNvbHZlIHJlbmRlciBwcm9taXNlIHBvc3QtZGlnZXN0XG4gICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICBtb2RhbFJlbmRlckRlZmVyT2JqLnJlc29sdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbW9kYWxSZW5kZXJEZWZlck9iai5wcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGlvblByb21pc2UgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGF0dHJzLm1vZGFsSW5DbGFzcykge1xuICAgICAgICAgICAgYW5pbWF0aW9uUHJvbWlzZSA9ICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgYWRkQ2xhc3M6IGF0dHJzLm1vZGFsSW5DbGFzc1xuICAgICAgICAgICAgfSkuc3RhcnQoKTtcblxuICAgICAgICAgICAgc2NvcGUuJG9uKCRtb2RhbFN0YWNrLk5PV19DTE9TSU5HX0VWRU5ULCBmdW5jdGlvbihlLCBzZXRJc0FzeW5jKSB7XG4gICAgICAgICAgICAgIHZhciBkb25lID0gc2V0SXNBc3luYygpO1xuICAgICAgICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGF0dHJzLm1vZGFsSW5DbGFzc1xuICAgICAgICAgICAgICB9KS5zdGFydCgpLnRoZW4oZG9uZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cblxuICAgICAgICAgICRxLndoZW4oYW5pbWF0aW9uUHJvbWlzZSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIE5vdGlmeSB7QGxpbmsgJG1vZGFsU3RhY2t9IHRoYXQgbW9kYWwgaXMgcmVuZGVyZWQuXG4gICAgICAgICAgICB2YXIgbW9kYWwgPSAkbW9kYWxTdGFjay5nZXRUb3AoKTtcbiAgICAgICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgICAgICAkbW9kYWxTdGFjay5tb2RhbFJlbmRlcmVkKG1vZGFsLmtleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgc29tZXRoaW5nIHdpdGhpbiB0aGUgZnJlc2hseS1vcGVuZWQgbW9kYWwgYWxyZWFkeSBoYXMgZm9jdXMgKHBlcmhhcHMgdmlhIGFcbiAgICAgICAgICAgICAqIGRpcmVjdGl2ZSB0aGF0IGNhdXNlcyBmb2N1cykgdGhlbiB0aGVyZSdzIG5vIG5lZWQgdG8gdHJ5IHRvIGZvY3VzIGFueXRoaW5nLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoISgkZG9jdW1lbnRbMF0uYWN0aXZlRWxlbWVudCAmJiBlbGVtZW50WzBdLmNvbnRhaW5zKCRkb2N1bWVudFswXS5hY3RpdmVFbGVtZW50KSkpIHtcbiAgICAgICAgICAgICAgdmFyIGlucHV0V2l0aEF1dG9mb2N1cyA9IGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignW2F1dG9mb2N1c10nKTtcbiAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAqIEF1dG8tZm9jdXNpbmcgb2YgYSBmcmVzaGx5LW9wZW5lZCBtb2RhbCBlbGVtZW50IGNhdXNlcyBhbnkgY2hpbGQgZWxlbWVudHNcbiAgICAgICAgICAgICAgICogd2l0aCB0aGUgYXV0b2ZvY3VzIGF0dHJpYnV0ZSB0byBsb3NlIGZvY3VzLiBUaGlzIGlzIGFuIGlzc3VlIG9uIHRvdWNoXG4gICAgICAgICAgICAgICAqIGJhc2VkIGRldmljZXMgd2hpY2ggd2lsbCBzaG93IGFuZCB0aGVuIGhpZGUgdGhlIG9uc2NyZWVuIGtleWJvYXJkLlxuICAgICAgICAgICAgICAgKiBBdHRlbXB0cyB0byByZWZvY3VzIHRoZSBhdXRvZm9jdXMgZWxlbWVudCB2aWEgSmF2YVNjcmlwdCB3aWxsIG5vdCByZW9wZW5cbiAgICAgICAgICAgICAgICogdGhlIG9uc2NyZWVuIGtleWJvYXJkLiBGaXhlZCBieSB1cGRhdGVkIHRoZSBmb2N1c2luZyBsb2dpYyB0byBvbmx5IGF1dG9mb2N1c1xuICAgICAgICAgICAgICAgKiB0aGUgbW9kYWwgZWxlbWVudCBpZiB0aGUgbW9kYWwgZG9lcyBub3QgY29udGFpbiBhbiBhdXRvZm9jdXMgZWxlbWVudC5cbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIGlmIChpbnB1dFdpdGhBdXRvZm9jdXMpIHtcbiAgICAgICAgICAgICAgICBpbnB1dFdpdGhBdXRvZm9jdXMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pXG5cbiAgLmRpcmVjdGl2ZSgndWliTW9kYWxBbmltYXRpb25DbGFzcycsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb21waWxlOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICAgIGlmICh0QXR0cnMubW9kYWxBbmltYXRpb24pIHtcbiAgICAgICAgICB0RWxlbWVudC5hZGRDbGFzcyh0QXR0cnMudWliTW9kYWxBbmltYXRpb25DbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KVxuXG4gIC5kaXJlY3RpdmUoJ3VpYk1vZGFsVHJhbnNjbHVkZScsIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXIsIHRyYW5zY2x1ZGUpIHtcbiAgICAgICAgdHJhbnNjbHVkZShzY29wZS4kcGFyZW50LCBmdW5jdGlvbihjbG9uZSkge1xuICAgICAgICAgIGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgZWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dKVxuXG4gIC5mYWN0b3J5KCckdWliTW9kYWxTdGFjaycsIFsnJGFuaW1hdGUnLCAnJGFuaW1hdGVDc3MnLCAnJGRvY3VtZW50JyxcbiAgICAnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsICckcScsICckJG11bHRpTWFwJywgJyQkc3RhY2tlZE1hcCcsICckdWliUG9zaXRpb24nLFxuICAgIGZ1bmN0aW9uKCRhbmltYXRlLCAkYW5pbWF0ZUNzcywgJGRvY3VtZW50LCAkY29tcGlsZSwgJHJvb3RTY29wZSwgJHEsICQkbXVsdGlNYXAsICQkc3RhY2tlZE1hcCwgJHVpYlBvc2l0aW9uKSB7XG4gICAgICB2YXIgT1BFTkVEX01PREFMX0NMQVNTID0gJ21vZGFsLW9wZW4nO1xuXG4gICAgICB2YXIgYmFja2Ryb3BEb21FbCwgYmFja2Ryb3BTY29wZTtcbiAgICAgIHZhciBvcGVuZWRXaW5kb3dzID0gJCRzdGFja2VkTWFwLmNyZWF0ZU5ldygpO1xuICAgICAgdmFyIG9wZW5lZENsYXNzZXMgPSAkJG11bHRpTWFwLmNyZWF0ZU5ldygpO1xuICAgICAgdmFyICRtb2RhbFN0YWNrID0ge1xuICAgICAgICBOT1dfQ0xPU0lOR19FVkVOVDogJ21vZGFsLnN0YWNrLm5vdy1jbG9zaW5nJ1xuICAgICAgfTtcbiAgICAgIHZhciB0b3BNb2RhbEluZGV4ID0gMDtcbiAgICAgIHZhciBwcmV2aW91c1RvcE9wZW5lZE1vZGFsID0gbnVsbDtcbiAgICAgIHZhciBBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSA9ICdkYXRhLWJvb3RzdHJhcC1tb2RhbC1hcmlhLWhpZGRlbi1jb3VudCc7XG5cbiAgICAgIC8vTW9kYWwgZm9jdXMgYmVoYXZpb3JcbiAgICAgIHZhciB0YWJiYWJsZVNlbGVjdG9yID0gJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKTpub3QoW3RhYmluZGV4PVxcJy0xXFwnXSksICcgK1xuICAgICAgICAnYnV0dG9uOm5vdChbZGlzYWJsZWRdKTpub3QoW3RhYmluZGV4PVxcJy0xXFwnXSksc2VsZWN0Om5vdChbZGlzYWJsZWRdKTpub3QoW3RhYmluZGV4PVxcJy0xXFwnXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKTpub3QoW3RhYmluZGV4PVxcJy0xXFwnXSksICcgK1xuICAgICAgICAnaWZyYW1lLCBvYmplY3QsIGVtYmVkLCAqW3RhYmluZGV4XTpub3QoW3RhYmluZGV4PVxcJy0xXFwnXSksICpbY29udGVudGVkaXRhYmxlPXRydWVdJztcbiAgICAgIHZhciBzY3JvbGxiYXJQYWRkaW5nO1xuICAgICAgdmFyIFNOQUtFX0NBU0VfUkVHRVhQID0gL1tBLVpdL2c7XG5cbiAgICAgIC8vIFRPRE86IGV4dHJhY3QgaW50byBjb21tb24gZGVwZW5kZW5jeSB3aXRoIHRvb2x0aXBcbiAgICAgIGZ1bmN0aW9uIHNuYWtlX2Nhc2UobmFtZSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJy0nO1xuICAgICAgICByZXR1cm4gbmFtZS5yZXBsYWNlKFNOQUtFX0NBU0VfUkVHRVhQLCBmdW5jdGlvbihsZXR0ZXIsIHBvcykge1xuICAgICAgICAgIHJldHVybiAocG9zID8gc2VwYXJhdG9yIDogJycpICsgbGV0dGVyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpc1Zpc2libGUoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gISEoZWxlbWVudC5vZmZzZXRXaWR0aCB8fFxuICAgICAgICAgIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8XG4gICAgICAgICAgZWxlbWVudC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJhY2tkcm9wSW5kZXgoKSB7XG4gICAgICAgIHZhciB0b3BCYWNrZHJvcEluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvcGVuZWQgPSBvcGVuZWRXaW5kb3dzLmtleXMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcGVuZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAob3BlbmVkV2luZG93cy5nZXQob3BlbmVkW2ldKS52YWx1ZS5iYWNrZHJvcCkge1xuICAgICAgICAgICAgdG9wQmFja2Ryb3BJbmRleCA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYW55IGJhY2tkcm9wIGV4aXN0LCBlbnN1cmUgdGhhdCBpdCdzIGluZGV4IGlzIGFsd2F5c1xuICAgICAgICAvLyByaWdodCBiZWxvdyB0aGUgdG9wIG1vZGFsXG4gICAgICAgIGlmICh0b3BCYWNrZHJvcEluZGV4ID4gLTEgJiYgdG9wQmFja2Ryb3BJbmRleCA8IHRvcE1vZGFsSW5kZXgpIHtcbiAgICAgICAgICB0b3BCYWNrZHJvcEluZGV4ID0gdG9wTW9kYWxJbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9wQmFja2Ryb3BJbmRleDtcbiAgICAgIH1cblxuICAgICAgJHJvb3RTY29wZS4kd2F0Y2goYmFja2Ryb3BJbmRleCwgZnVuY3Rpb24obmV3QmFja2Ryb3BJbmRleCkge1xuICAgICAgICBpZiAoYmFja2Ryb3BTY29wZSkge1xuICAgICAgICAgIGJhY2tkcm9wU2NvcGUuaW5kZXggPSBuZXdCYWNrZHJvcEluZGV4O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlTW9kYWxXaW5kb3cobW9kYWxJbnN0YW5jZSwgZWxlbWVudFRvUmVjZWl2ZUZvY3VzKSB7XG4gICAgICAgIHZhciBtb2RhbFdpbmRvdyA9IG9wZW5lZFdpbmRvd3MuZ2V0KG1vZGFsSW5zdGFuY2UpLnZhbHVlO1xuICAgICAgICB2YXIgYXBwZW5kVG9FbGVtZW50ID0gbW9kYWxXaW5kb3cuYXBwZW5kVG87XG5cbiAgICAgICAgLy9jbGVhbiB1cCB0aGUgc3RhY2tcbiAgICAgICAgb3BlbmVkV2luZG93cy5yZW1vdmUobW9kYWxJbnN0YW5jZSk7XG4gICAgICAgIHByZXZpb3VzVG9wT3BlbmVkTW9kYWwgPSBvcGVuZWRXaW5kb3dzLnRvcCgpO1xuICAgICAgICBpZiAocHJldmlvdXNUb3BPcGVuZWRNb2RhbCkge1xuICAgICAgICAgIHRvcE1vZGFsSW5kZXggPSBwYXJzZUludChwcmV2aW91c1RvcE9wZW5lZE1vZGFsLnZhbHVlLm1vZGFsRG9tRWwuYXR0cignaW5kZXgnKSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVtb3ZlQWZ0ZXJBbmltYXRlKG1vZGFsV2luZG93Lm1vZGFsRG9tRWwsIG1vZGFsV2luZG93Lm1vZGFsU2NvcGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBtb2RhbEJvZHlDbGFzcyA9IG1vZGFsV2luZG93Lm9wZW5lZENsYXNzIHx8IE9QRU5FRF9NT0RBTF9DTEFTUztcbiAgICAgICAgICBvcGVuZWRDbGFzc2VzLnJlbW92ZShtb2RhbEJvZHlDbGFzcywgbW9kYWxJbnN0YW5jZSk7XG4gICAgICAgICAgdmFyIGFyZUFueU9wZW4gPSBvcGVuZWRDbGFzc2VzLmhhc0tleShtb2RhbEJvZHlDbGFzcyk7XG4gICAgICAgICAgYXBwZW5kVG9FbGVtZW50LnRvZ2dsZUNsYXNzKG1vZGFsQm9keUNsYXNzLCBhcmVBbnlPcGVuKTtcbiAgICAgICAgICBpZiAoIWFyZUFueU9wZW4gJiYgc2Nyb2xsYmFyUGFkZGluZyAmJiBzY3JvbGxiYXJQYWRkaW5nLmhlaWdodE92ZXJmbG93ICYmIHNjcm9sbGJhclBhZGRpbmcuc2Nyb2xsYmFyV2lkdGgpIHtcbiAgICAgICAgICAgIGlmIChzY3JvbGxiYXJQYWRkaW5nLm9yaWdpbmFsUmlnaHQpIHtcbiAgICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50LmNzcyh7cGFkZGluZ1JpZ2h0OiBzY3JvbGxiYXJQYWRkaW5nLm9yaWdpbmFsUmlnaHQgKyAncHgnfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQuY3NzKHtwYWRkaW5nUmlnaHQ6ICcnfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzY3JvbGxiYXJQYWRkaW5nID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9nZ2xlVG9wV2luZG93Q2xhc3ModHJ1ZSk7XG4gICAgICAgIH0sIG1vZGFsV2luZG93LmNsb3NlZERlZmVycmVkKTtcbiAgICAgICAgY2hlY2tSZW1vdmVCYWNrZHJvcCgpO1xuXG4gICAgICAgIC8vbW92ZSBmb2N1cyB0byBzcGVjaWZpZWQgZWxlbWVudCBpZiBhdmFpbGFibGUsIG9yIGVsc2UgdG8gYm9keVxuICAgICAgICBpZiAoZWxlbWVudFRvUmVjZWl2ZUZvY3VzICYmIGVsZW1lbnRUb1JlY2VpdmVGb2N1cy5mb2N1cykge1xuICAgICAgICAgIGVsZW1lbnRUb1JlY2VpdmVGb2N1cy5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgaWYgKGFwcGVuZFRvRWxlbWVudC5mb2N1cykge1xuICAgICAgICAgIGFwcGVuZFRvRWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBvciByZW1vdmUgXCJ3aW5kb3dUb3BDbGFzc1wiIGZyb20gdGhlIHRvcCB3aW5kb3cgaW4gdGhlIHN0YWNrXG4gICAgICBmdW5jdGlvbiB0b2dnbGVUb3BXaW5kb3dDbGFzcyh0b2dnbGVTd2l0Y2gpIHtcbiAgICAgICAgdmFyIG1vZGFsV2luZG93O1xuXG4gICAgICAgIGlmIChvcGVuZWRXaW5kb3dzLmxlbmd0aCgpID4gMCkge1xuICAgICAgICAgIG1vZGFsV2luZG93ID0gb3BlbmVkV2luZG93cy50b3AoKS52YWx1ZTtcbiAgICAgICAgICBtb2RhbFdpbmRvdy5tb2RhbERvbUVsLnRvZ2dsZUNsYXNzKG1vZGFsV2luZG93LndpbmRvd1RvcENsYXNzIHx8ICcnLCB0b2dnbGVTd2l0Y2gpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoZWNrUmVtb3ZlQmFja2Ryb3AoKSB7XG4gICAgICAgIC8vcmVtb3ZlIGJhY2tkcm9wIGlmIG5vIGxvbmdlciBuZWVkZWRcbiAgICAgICAgaWYgKGJhY2tkcm9wRG9tRWwgJiYgYmFja2Ryb3BJbmRleCgpID09PSAtMSkge1xuICAgICAgICAgIHZhciBiYWNrZHJvcFNjb3BlUmVmID0gYmFja2Ryb3BTY29wZTtcbiAgICAgICAgICByZW1vdmVBZnRlckFuaW1hdGUoYmFja2Ryb3BEb21FbCwgYmFja2Ryb3BTY29wZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBiYWNrZHJvcFNjb3BlUmVmID0gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBiYWNrZHJvcERvbUVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGJhY2tkcm9wU2NvcGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlQWZ0ZXJBbmltYXRlKGRvbUVsLCBzY29wZSwgZG9uZSwgY2xvc2VkRGVmZXJyZWQpIHtcbiAgICAgICAgdmFyIGFzeW5jRGVmZXJyZWQ7XG4gICAgICAgIHZhciBhc3luY1Byb21pc2UgPSBudWxsO1xuICAgICAgICB2YXIgc2V0SXNBc3luYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghYXN5bmNEZWZlcnJlZCkge1xuICAgICAgICAgICAgYXN5bmNEZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICBhc3luY1Byb21pc2UgPSBhc3luY0RlZmVycmVkLnByb21pc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFzeW5jRG9uZSgpIHtcbiAgICAgICAgICAgIGFzeW5jRGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHNjb3BlLiRicm9hZGNhc3QoJG1vZGFsU3RhY2suTk9XX0NMT1NJTkdfRVZFTlQsIHNldElzQXN5bmMpO1xuXG4gICAgICAgIC8vIE5vdGUgdGhhdCBpdCdzIGludGVudGlvbmFsIHRoYXQgYXN5bmNQcm9taXNlIG1pZ2h0IGJlIG51bGwuXG4gICAgICAgIC8vIFRoYXQncyB3aGVuIHNldElzQXN5bmMgaGFzIG5vdCBiZWVuIGNhbGxlZCBkdXJpbmcgdGhlXG4gICAgICAgIC8vIE5PV19DTE9TSU5HX0VWRU5UIGJyb2FkY2FzdC5cbiAgICAgICAgcmV0dXJuICRxLndoZW4oYXN5bmNQcm9taXNlKS50aGVuKGFmdGVyQW5pbWF0aW5nKTtcblxuICAgICAgICBmdW5jdGlvbiBhZnRlckFuaW1hdGluZygpIHtcbiAgICAgICAgICBpZiAoYWZ0ZXJBbmltYXRpbmcuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlckFuaW1hdGluZy5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgICRhbmltYXRlLmxlYXZlKGRvbUVsKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkb21FbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIGlmIChjbG9zZWREZWZlcnJlZCkge1xuICAgICAgICAgICAgICBjbG9zZWREZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzY29wZS4kZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRkb2N1bWVudC5vbigna2V5ZG93bicsIGtleWRvd25MaXN0ZW5lcik7XG5cbiAgICAgICRyb290U2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAkZG9jdW1lbnQub2ZmKCdrZXlkb3duJywga2V5ZG93bkxpc3RlbmVyKTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBrZXlkb3duTGlzdGVuZXIoZXZ0KSB7XG4gICAgICAgIGlmIChldnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm4gZXZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1vZGFsID0gb3BlbmVkV2luZG93cy50b3AoKTtcbiAgICAgICAgaWYgKG1vZGFsKSB7XG4gICAgICAgICAgc3dpdGNoIChldnQud2hpY2gpIHtcbiAgICAgICAgICAgIGNhc2UgMjc6IHtcbiAgICAgICAgICAgICAgaWYgKG1vZGFsLnZhbHVlLmtleWJvYXJkKSB7XG4gICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAkbW9kYWxTdGFjay5kaXNtaXNzKG1vZGFsLmtleSwgJ2VzY2FwZSBrZXkgcHJlc3MnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgOToge1xuICAgICAgICAgICAgICB2YXIgbGlzdCA9ICRtb2RhbFN0YWNrLmxvYWRGb2N1c0VsZW1lbnRMaXN0KG1vZGFsKTtcbiAgICAgICAgICAgICAgdmFyIGZvY3VzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoZXZ0LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCRtb2RhbFN0YWNrLmlzRm9jdXNJbkZpcnN0SXRlbShldnQsIGxpc3QpIHx8ICRtb2RhbFN0YWNrLmlzTW9kYWxGb2N1c2VkKGV2dCwgbW9kYWwpKSB7XG4gICAgICAgICAgICAgICAgICBmb2N1c0NoYW5nZWQgPSAkbW9kYWxTdGFjay5mb2N1c0xhc3RGb2N1c2FibGVFbGVtZW50KGxpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoJG1vZGFsU3RhY2suaXNGb2N1c0luTGFzdEl0ZW0oZXZ0LCBsaXN0KSkge1xuICAgICAgICAgICAgICAgICAgZm9jdXNDaGFuZ2VkID0gJG1vZGFsU3RhY2suZm9jdXNGaXJzdEZvY3VzYWJsZUVsZW1lbnQobGlzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGZvY3VzQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkbW9kYWxTdGFjay5vcGVuID0gZnVuY3Rpb24obW9kYWxJbnN0YW5jZSwgbW9kYWwpIHtcbiAgICAgICAgdmFyIG1vZGFsT3BlbmVyID0gJGRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgbW9kYWxCb2R5Q2xhc3MgPSBtb2RhbC5vcGVuZWRDbGFzcyB8fCBPUEVORURfTU9EQUxfQ0xBU1M7XG5cbiAgICAgICAgdG9nZ2xlVG9wV2luZG93Q2xhc3MoZmFsc2UpO1xuXG4gICAgICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IHRvcCBmaXJzdCwgdG8gZGV0ZXJtaW5lIHdoYXQgaW5kZXggd2Ugb3VnaHQgdG8gdXNlXG4gICAgICAgIC8vIGZvciB0aGUgY3VycmVudCB0b3AgbW9kYWxcbiAgICAgICAgcHJldmlvdXNUb3BPcGVuZWRNb2RhbCA9IG9wZW5lZFdpbmRvd3MudG9wKCk7XG5cbiAgICAgICAgb3BlbmVkV2luZG93cy5hZGQobW9kYWxJbnN0YW5jZSwge1xuICAgICAgICAgIGRlZmVycmVkOiBtb2RhbC5kZWZlcnJlZCxcbiAgICAgICAgICByZW5kZXJEZWZlcnJlZDogbW9kYWwucmVuZGVyRGVmZXJyZWQsXG4gICAgICAgICAgY2xvc2VkRGVmZXJyZWQ6IG1vZGFsLmNsb3NlZERlZmVycmVkLFxuICAgICAgICAgIG1vZGFsU2NvcGU6IG1vZGFsLnNjb3BlLFxuICAgICAgICAgIGJhY2tkcm9wOiBtb2RhbC5iYWNrZHJvcCxcbiAgICAgICAgICBrZXlib2FyZDogbW9kYWwua2V5Ym9hcmQsXG4gICAgICAgICAgb3BlbmVkQ2xhc3M6IG1vZGFsLm9wZW5lZENsYXNzLFxuICAgICAgICAgIHdpbmRvd1RvcENsYXNzOiBtb2RhbC53aW5kb3dUb3BDbGFzcyxcbiAgICAgICAgICBhbmltYXRpb246IG1vZGFsLmFuaW1hdGlvbixcbiAgICAgICAgICBhcHBlbmRUbzogbW9kYWwuYXBwZW5kVG9cbiAgICAgICAgfSk7XG5cbiAgICAgICAgb3BlbmVkQ2xhc3Nlcy5wdXQobW9kYWxCb2R5Q2xhc3MsIG1vZGFsSW5zdGFuY2UpO1xuXG4gICAgICAgIHZhciBhcHBlbmRUb0VsZW1lbnQgPSBtb2RhbC5hcHBlbmRUbyxcbiAgICAgICAgICAgIGN1cnJCYWNrZHJvcEluZGV4ID0gYmFja2Ryb3BJbmRleCgpO1xuXG4gICAgICAgIGlmICghYXBwZW5kVG9FbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXBwZW5kVG8gZWxlbWVudCBub3QgZm91bmQuIE1ha2Ugc3VyZSB0aGF0IHRoZSBlbGVtZW50IHBhc3NlZCBpcyBpbiBET00uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VyckJhY2tkcm9wSW5kZXggPj0gMCAmJiAhYmFja2Ryb3BEb21FbCkge1xuICAgICAgICAgIGJhY2tkcm9wU2NvcGUgPSAkcm9vdFNjb3BlLiRuZXcodHJ1ZSk7XG4gICAgICAgICAgYmFja2Ryb3BTY29wZS5tb2RhbE9wdGlvbnMgPSBtb2RhbDtcbiAgICAgICAgICBiYWNrZHJvcFNjb3BlLmluZGV4ID0gY3VyckJhY2tkcm9wSW5kZXg7XG4gICAgICAgICAgYmFja2Ryb3BEb21FbCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiB1aWItbW9kYWwtYmFja2Ryb3A9XCJtb2RhbC1iYWNrZHJvcFwiPjwvZGl2PicpO1xuICAgICAgICAgIGJhY2tkcm9wRG9tRWwuYXR0cih7XG4gICAgICAgICAgICAnY2xhc3MnOiAnbW9kYWwtYmFja2Ryb3AnLFxuICAgICAgICAgICAgJ25nLXN0eWxlJzogJ3tcXCd6LWluZGV4XFwnOiAxMDQwICsgKGluZGV4ICYmIDEgfHwgMCkgKyBpbmRleCoxMH0nLFxuICAgICAgICAgICAgJ3VpYi1tb2RhbC1hbmltYXRpb24tY2xhc3MnOiAnZmFkZScsXG4gICAgICAgICAgICAnbW9kYWwtaW4tY2xhc3MnOiAnaW4nXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1vZGFsLmJhY2tkcm9wQ2xhc3MpIHtcbiAgICAgICAgICAgIGJhY2tkcm9wRG9tRWwuYWRkQ2xhc3MobW9kYWwuYmFja2Ryb3BDbGFzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG1vZGFsLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgYmFja2Ryb3BEb21FbC5hdHRyKCdtb2RhbC1hbmltYXRpb24nLCAndHJ1ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkY29tcGlsZShiYWNrZHJvcERvbUVsKShiYWNrZHJvcFNjb3BlKTtcbiAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihiYWNrZHJvcERvbUVsLCBhcHBlbmRUb0VsZW1lbnQpO1xuICAgICAgICAgIGlmICgkdWliUG9zaXRpb24uaXNTY3JvbGxhYmxlKGFwcGVuZFRvRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHNjcm9sbGJhclBhZGRpbmcgPSAkdWliUG9zaXRpb24uc2Nyb2xsYmFyUGFkZGluZyhhcHBlbmRUb0VsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKHNjcm9sbGJhclBhZGRpbmcuaGVpZ2h0T3ZlcmZsb3cgJiYgc2Nyb2xsYmFyUGFkZGluZy5zY3JvbGxiYXJXaWR0aCkge1xuICAgICAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQuY3NzKHtwYWRkaW5nUmlnaHQ6IHNjcm9sbGJhclBhZGRpbmcucmlnaHQgKyAncHgnfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnRlbnQ7XG4gICAgICAgIGlmIChtb2RhbC5jb21wb25lbnQpIHtcbiAgICAgICAgICBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChzbmFrZV9jYXNlKG1vZGFsLmNvbXBvbmVudC5uYW1lKSk7XG4gICAgICAgICAgY29udGVudCA9IGFuZ3VsYXIuZWxlbWVudChjb250ZW50KTtcbiAgICAgICAgICBjb250ZW50LmF0dHIoe1xuICAgICAgICAgICAgcmVzb2x2ZTogJyRyZXNvbHZlJyxcbiAgICAgICAgICAgICdtb2RhbC1pbnN0YW5jZSc6ICckdWliTW9kYWxJbnN0YW5jZScsXG4gICAgICAgICAgICBjbG9zZTogJyRjbG9zZSgkdmFsdWUpJyxcbiAgICAgICAgICAgIGRpc21pc3M6ICckZGlzbWlzcygkdmFsdWUpJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRlbnQgPSBtb2RhbC5jb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSB0b3AgbW9kYWwgaW5kZXggYmFzZWQgb24gdGhlIGluZGV4IG9mIHRoZSBwcmV2aW91cyB0b3AgbW9kYWxcbiAgICAgICAgdG9wTW9kYWxJbmRleCA9IHByZXZpb3VzVG9wT3BlbmVkTW9kYWwgPyBwYXJzZUludChwcmV2aW91c1RvcE9wZW5lZE1vZGFsLnZhbHVlLm1vZGFsRG9tRWwuYXR0cignaW5kZXgnKSwgMTApICsgMSA6IDA7XG4gICAgICAgIHZhciBhbmd1bGFyRG9tRWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXYgdWliLW1vZGFsLXdpbmRvdz1cIm1vZGFsLXdpbmRvd1wiPjwvZGl2PicpO1xuICAgICAgICBhbmd1bGFyRG9tRWwuYXR0cih7XG4gICAgICAgICAgJ2NsYXNzJzogJ21vZGFsJyxcbiAgICAgICAgICAndGVtcGxhdGUtdXJsJzogbW9kYWwud2luZG93VGVtcGxhdGVVcmwsXG4gICAgICAgICAgJ3dpbmRvdy10b3AtY2xhc3MnOiBtb2RhbC53aW5kb3dUb3BDbGFzcyxcbiAgICAgICAgICAncm9sZSc6ICdkaWFsb2cnLFxuICAgICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBtb2RhbC5hcmlhTGFiZWxsZWRCeSxcbiAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IG1vZGFsLmFyaWFEZXNjcmliZWRCeSxcbiAgICAgICAgICAnc2l6ZSc6IG1vZGFsLnNpemUsXG4gICAgICAgICAgJ2luZGV4JzogdG9wTW9kYWxJbmRleCxcbiAgICAgICAgICAnYW5pbWF0ZSc6ICdhbmltYXRlJyxcbiAgICAgICAgICAnbmctc3R5bGUnOiAne1xcJ3otaW5kZXhcXCc6IDEwNTAgKyAkJHRvcE1vZGFsSW5kZXgqMTAsIGRpc3BsYXk6IFxcJ2Jsb2NrXFwnfScsXG4gICAgICAgICAgJ3RhYmluZGV4JzogLTEsXG4gICAgICAgICAgJ3VpYi1tb2RhbC1hbmltYXRpb24tY2xhc3MnOiAnZmFkZScsXG4gICAgICAgICAgJ21vZGFsLWluLWNsYXNzJzogJ2luJ1xuICAgICAgICB9KS5hcHBlbmQoY29udGVudCk7XG4gICAgICAgIGlmIChtb2RhbC53aW5kb3dDbGFzcykge1xuICAgICAgICAgIGFuZ3VsYXJEb21FbC5hZGRDbGFzcyhtb2RhbC53aW5kb3dDbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kYWwuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgYW5ndWxhckRvbUVsLmF0dHIoJ21vZGFsLWFuaW1hdGlvbicsICd0cnVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBhcHBlbmRUb0VsZW1lbnQuYWRkQ2xhc3MobW9kYWxCb2R5Q2xhc3MpO1xuICAgICAgICBpZiAobW9kYWwuc2NvcGUpIHtcbiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGV4cGxpY2l0bHkgYWRkIHRoZSBtb2RhbCBpbmRleCB0byB0aGUgbW9kYWwgc2NvcGVcbiAgICAgICAgICAvLyBiZWNhdXNlIGl0IGlzIG5lZWRlZCBieSBuZ1N0eWxlIHRvIGNvbXB1dGUgdGhlIHpJbmRleCBwcm9wZXJ0eS5cbiAgICAgICAgICBtb2RhbC5zY29wZS4kJHRvcE1vZGFsSW5kZXggPSB0b3BNb2RhbEluZGV4O1xuICAgICAgICB9XG4gICAgICAgICRhbmltYXRlLmVudGVyKCRjb21waWxlKGFuZ3VsYXJEb21FbCkobW9kYWwuc2NvcGUpLCBhcHBlbmRUb0VsZW1lbnQpO1xuXG4gICAgICAgIG9wZW5lZFdpbmRvd3MudG9wKCkudmFsdWUubW9kYWxEb21FbCA9IGFuZ3VsYXJEb21FbDtcbiAgICAgICAgb3BlbmVkV2luZG93cy50b3AoKS52YWx1ZS5tb2RhbE9wZW5lciA9IG1vZGFsT3BlbmVyO1xuXG4gICAgICAgIGFwcGx5QXJpYUhpZGRlbihhbmd1bGFyRG9tRWwpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5QXJpYUhpZGRlbihlbCkge1xuICAgICAgICAgIGlmICghZWwgfHwgZWxbMF0udGFnTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZ2V0U2libGluZ3MoZWwpLmZvckVhY2goZnVuY3Rpb24oc2libGluZykge1xuICAgICAgICAgICAgdmFyIGVsZW1Jc0FscmVhZHlIaWRkZW4gPSBzaWJsaW5nLmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PT0gJ3RydWUnLFxuICAgICAgICAgICAgICBhcmlhSGlkZGVuQ291bnQgPSBwYXJzZUludChzaWJsaW5nLmdldEF0dHJpYnV0ZShBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSksIDEwKTtcblxuICAgICAgICAgICAgaWYgKCFhcmlhSGlkZGVuQ291bnQpIHtcbiAgICAgICAgICAgICAgYXJpYUhpZGRlbkNvdW50ID0gZWxlbUlzQWxyZWFkeUhpZGRlbiA/IDEgOiAwOyAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNpYmxpbmcuc2V0QXR0cmlidXRlKEFSSUFfSElEREVOX0FUVFJJQlVURV9OQU1FLCBhcmlhSGlkZGVuQ291bnQgKyAxKTtcbiAgICAgICAgICAgIHNpYmxpbmcuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gYXBwbHlBcmlhSGlkZGVuKGVsLnBhcmVudCgpKTtcblxuICAgICAgICAgIGZ1bmN0aW9uIGdldFNpYmxpbmdzKGVsKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbC5wYXJlbnQoKSA/IGVsLnBhcmVudCgpLmNoaWxkcmVuKCkgOiBbXTtcblxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChjaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkICE9PSBlbFswXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gYnJvYWRjYXN0Q2xvc2luZyhtb2RhbFdpbmRvdywgcmVzdWx0T3JSZWFzb24sIGNsb3NpbmcpIHtcbiAgICAgICAgcmV0dXJuICFtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbFNjb3BlLiRicm9hZGNhc3QoJ21vZGFsLmNsb3NpbmcnLCByZXN1bHRPclJlYXNvbiwgY2xvc2luZykuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdW5oaWRlQmFja2dyb3VuZEVsZW1lbnRzKCkge1xuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKFxuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1snICsgQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUgKyAnXScpLFxuICAgICAgICAgIGZ1bmN0aW9uKGhpZGRlbkVsKSB7XG4gICAgICAgICAgICB2YXIgYXJpYUhpZGRlbkNvdW50ID0gcGFyc2VJbnQoaGlkZGVuRWwuZ2V0QXR0cmlidXRlKEFSSUFfSElEREVOX0FUVFJJQlVURV9OQU1FKSwgMTApLFxuICAgICAgICAgICAgICBuZXdIaWRkZW5Db3VudCA9IGFyaWFIaWRkZW5Db3VudCAtIDE7XG4gICAgICAgICAgICBoaWRkZW5FbC5zZXRBdHRyaWJ1dGUoQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUsIG5ld0hpZGRlbkNvdW50KTtcblxuICAgICAgICAgICAgaWYgKCFuZXdIaWRkZW5Db3VudCkge1xuICAgICAgICAgICAgICBoaWRkZW5FbC5yZW1vdmVBdHRyaWJ1dGUoQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUpO1xuICAgICAgICAgICAgICBoaWRkZW5FbC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgXG4gICAgICAkbW9kYWxTdGFjay5jbG9zZSA9IGZ1bmN0aW9uKG1vZGFsSW5zdGFuY2UsIHJlc3VsdCkge1xuICAgICAgICB2YXIgbW9kYWxXaW5kb3cgPSBvcGVuZWRXaW5kb3dzLmdldChtb2RhbEluc3RhbmNlKTtcbiAgICAgICAgdW5oaWRlQmFja2dyb3VuZEVsZW1lbnRzKCk7XG4gICAgICAgIGlmIChtb2RhbFdpbmRvdyAmJiBicm9hZGNhc3RDbG9zaW5nKG1vZGFsV2luZG93LCByZXN1bHQsIHRydWUpKSB7XG4gICAgICAgICAgbW9kYWxXaW5kb3cudmFsdWUubW9kYWxTY29wZS4kJHVpYkRlc3RydWN0aW9uU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICBtb2RhbFdpbmRvdy52YWx1ZS5kZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgcmVtb3ZlTW9kYWxXaW5kb3cobW9kYWxJbnN0YW5jZSwgbW9kYWxXaW5kb3cudmFsdWUubW9kYWxPcGVuZXIpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICFtb2RhbFdpbmRvdztcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmRpc21pc3MgPSBmdW5jdGlvbihtb2RhbEluc3RhbmNlLCByZWFzb24pIHtcbiAgICAgICAgdmFyIG1vZGFsV2luZG93ID0gb3BlbmVkV2luZG93cy5nZXQobW9kYWxJbnN0YW5jZSk7XG4gICAgICAgIHVuaGlkZUJhY2tncm91bmRFbGVtZW50cygpO1xuICAgICAgICBpZiAobW9kYWxXaW5kb3cgJiYgYnJvYWRjYXN0Q2xvc2luZyhtb2RhbFdpbmRvdywgcmVhc29uLCBmYWxzZSkpIHtcbiAgICAgICAgICBtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbFNjb3BlLiQkdWliRGVzdHJ1Y3Rpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgIG1vZGFsV2luZG93LnZhbHVlLmRlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgICAgICAgIHJlbW92ZU1vZGFsV2luZG93KG1vZGFsSW5zdGFuY2UsIG1vZGFsV2luZG93LnZhbHVlLm1vZGFsT3BlbmVyKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIW1vZGFsV2luZG93O1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suZGlzbWlzc0FsbCA9IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICB2YXIgdG9wTW9kYWwgPSB0aGlzLmdldFRvcCgpO1xuICAgICAgICB3aGlsZSAodG9wTW9kYWwgJiYgdGhpcy5kaXNtaXNzKHRvcE1vZGFsLmtleSwgcmVhc29uKSkge1xuICAgICAgICAgIHRvcE1vZGFsID0gdGhpcy5nZXRUb3AoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suZ2V0VG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvcGVuZWRXaW5kb3dzLnRvcCgpO1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2subW9kYWxSZW5kZXJlZCA9IGZ1bmN0aW9uKG1vZGFsSW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIG1vZGFsV2luZG93ID0gb3BlbmVkV2luZG93cy5nZXQobW9kYWxJbnN0YW5jZSk7XG4gICAgICAgICRtb2RhbFN0YWNrLmZvY3VzRmlyc3RGb2N1c2FibGVFbGVtZW50KCRtb2RhbFN0YWNrLmxvYWRGb2N1c0VsZW1lbnRMaXN0KG1vZGFsV2luZG93KSk7XG4gICAgICAgIGlmIChtb2RhbFdpbmRvdykge1xuICAgICAgICAgIG1vZGFsV2luZG93LnZhbHVlLnJlbmRlckRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suZm9jdXNGaXJzdEZvY3VzYWJsZUVsZW1lbnQgPSBmdW5jdGlvbihsaXN0KSB7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBsaXN0WzBdLmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suZm9jdXNMYXN0Rm9jdXNhYmxlRWxlbWVudCA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGxpc3RbbGlzdC5sZW5ndGggLSAxXS5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmlzTW9kYWxGb2N1c2VkID0gZnVuY3Rpb24oZXZ0LCBtb2RhbFdpbmRvdykge1xuICAgICAgICBpZiAoZXZ0ICYmIG1vZGFsV2luZG93KSB7XG4gICAgICAgICAgdmFyIG1vZGFsRG9tRWwgPSBtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbERvbUVsO1xuICAgICAgICAgIGlmIChtb2RhbERvbUVsICYmIG1vZGFsRG9tRWwubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gKGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQpID09PSBtb2RhbERvbUVsWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5pc0ZvY3VzSW5GaXJzdEl0ZW0gPSBmdW5jdGlvbihldnQsIGxpc3QpIHtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiAoZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudCkgPT09IGxpc3RbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suaXNGb2N1c0luTGFzdEl0ZW0gPSBmdW5jdGlvbihldnQsIGxpc3QpIHtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiAoZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudCkgPT09IGxpc3RbbGlzdC5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5sb2FkRm9jdXNFbGVtZW50TGlzdCA9IGZ1bmN0aW9uKG1vZGFsV2luZG93KSB7XG4gICAgICAgIGlmIChtb2RhbFdpbmRvdykge1xuICAgICAgICAgIHZhciBtb2RhbERvbUUxID0gbW9kYWxXaW5kb3cudmFsdWUubW9kYWxEb21FbDtcbiAgICAgICAgICBpZiAobW9kYWxEb21FMSAmJiBtb2RhbERvbUUxLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gbW9kYWxEb21FMVswXS5xdWVyeVNlbGVjdG9yQWxsKHRhYmJhYmxlU2VsZWN0b3IpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzID9cbiAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVmlzaWJsZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgfSkgOiBlbGVtZW50cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiAkbW9kYWxTdGFjaztcbiAgICB9XSlcblxuICAucHJvdmlkZXIoJyR1aWJNb2RhbCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciAkbW9kYWxQcm92aWRlciA9IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgICAgICBiYWNrZHJvcDogdHJ1ZSwgLy9jYW4gYWxzbyBiZSBmYWxzZSBvciAnc3RhdGljJ1xuICAgICAgICBrZXlib2FyZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICRnZXQ6IFsnJHJvb3RTY29wZScsICckcScsICckZG9jdW1lbnQnLCAnJHRlbXBsYXRlUmVxdWVzdCcsICckY29udHJvbGxlcicsICckdWliUmVzb2x2ZScsICckdWliTW9kYWxTdGFjaycsXG4gICAgICAgIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkcSwgJGRvY3VtZW50LCAkdGVtcGxhdGVSZXF1ZXN0LCAkY29udHJvbGxlciwgJHVpYlJlc29sdmUsICRtb2RhbFN0YWNrKSB7XG4gICAgICAgICAgdmFyICRtb2RhbCA9IHt9O1xuXG4gICAgICAgICAgZnVuY3Rpb24gZ2V0VGVtcGxhdGVQcm9taXNlKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRlbXBsYXRlID8gJHEud2hlbihvcHRpb25zLnRlbXBsYXRlKSA6XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZVJlcXVlc3QoYW5ndWxhci5pc0Z1bmN0aW9uKG9wdGlvbnMudGVtcGxhdGVVcmwpID9cbiAgICAgICAgICAgICAgICBvcHRpb25zLnRlbXBsYXRlVXJsKCkgOiBvcHRpb25zLnRlbXBsYXRlVXJsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcHJvbWlzZUNoYWluID0gbnVsbDtcbiAgICAgICAgICAkbW9kYWwuZ2V0UHJvbWlzZUNoYWluID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZUNoYWluO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICAkbW9kYWwub3BlbiA9IGZ1bmN0aW9uKG1vZGFsT3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIG1vZGFsUmVzdWx0RGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIG1vZGFsT3BlbmVkRGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIG1vZGFsQ2xvc2VkRGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIG1vZGFsUmVuZGVyRGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAvL3ByZXBhcmUgYW4gaW5zdGFuY2Ugb2YgYSBtb2RhbCB0byBiZSBpbmplY3RlZCBpbnRvIGNvbnRyb2xsZXJzIGFuZCByZXR1cm5lZCB0byBhIGNhbGxlclxuICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSB7XG4gICAgICAgICAgICAgIHJlc3VsdDogbW9kYWxSZXN1bHREZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgICAgICBvcGVuZWQ6IG1vZGFsT3BlbmVkRGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICAgICAgY2xvc2VkOiBtb2RhbENsb3NlZERlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgICAgIHJlbmRlcmVkOiBtb2RhbFJlbmRlckRlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRtb2RhbFN0YWNrLmNsb3NlKG1vZGFsSW5zdGFuY2UsIHJlc3VsdCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRpc21pc3M6IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJG1vZGFsU3RhY2suZGlzbWlzcyhtb2RhbEluc3RhbmNlLCByZWFzb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL21lcmdlIGFuZCBjbGVhbiB1cCBvcHRpb25zXG4gICAgICAgICAgICBtb2RhbE9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgJG1vZGFsUHJvdmlkZXIub3B0aW9ucywgbW9kYWxPcHRpb25zKTtcbiAgICAgICAgICAgIG1vZGFsT3B0aW9ucy5yZXNvbHZlID0gbW9kYWxPcHRpb25zLnJlc29sdmUgfHwge307XG4gICAgICAgICAgICBtb2RhbE9wdGlvbnMuYXBwZW5kVG8gPSBtb2RhbE9wdGlvbnMuYXBwZW5kVG8gfHwgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5lcSgwKTtcblxuICAgICAgICAgICAgLy92ZXJpZnkgb3B0aW9uc1xuICAgICAgICAgICAgaWYgKCFtb2RhbE9wdGlvbnMuY29tcG9uZW50ICYmICFtb2RhbE9wdGlvbnMudGVtcGxhdGUgJiYgIW1vZGFsT3B0aW9ucy50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09uZSBvZiBjb21wb25lbnQgb3IgdGVtcGxhdGUgb3IgdGVtcGxhdGVVcmwgb3B0aW9ucyBpcyByZXF1aXJlZC4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlQW5kUmVzb2x2ZVByb21pc2U7XG4gICAgICAgICAgICBpZiAobW9kYWxPcHRpb25zLmNvbXBvbmVudCkge1xuICAgICAgICAgICAgICB0ZW1wbGF0ZUFuZFJlc29sdmVQcm9taXNlID0gJHEud2hlbigkdWliUmVzb2x2ZS5yZXNvbHZlKG1vZGFsT3B0aW9ucy5yZXNvbHZlLCB7fSwgbnVsbCwgbnVsbCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZSA9XG4gICAgICAgICAgICAgICAgJHEuYWxsKFtnZXRUZW1wbGF0ZVByb21pc2UobW9kYWxPcHRpb25zKSwgJHVpYlJlc29sdmUucmVzb2x2ZShtb2RhbE9wdGlvbnMucmVzb2x2ZSwge30sIG51bGwsIG51bGwpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVXaXRoVGVtcGxhdGUoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZUFuZFJlc29sdmVQcm9taXNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgZXhpc3RpbmcgcHJvbWlzZSBjaGFpbi5cbiAgICAgICAgICAgIC8vIFRoZW4gc3dpdGNoIHRvIG91ciBvd24gY29tYmluZWQgcHJvbWlzZSBkZXBlbmRlbmN5IChyZWdhcmRsZXNzIG9mIGhvdyB0aGUgcHJldmlvdXMgbW9kYWwgZmFyZWQpLlxuICAgICAgICAgICAgLy8gVGhlbiBhZGQgdG8gJG1vZGFsU3RhY2sgYW5kIHJlc29sdmUgb3BlbmVkLlxuICAgICAgICAgICAgLy8gRmluYWxseSBjbGVhbiB1cCB0aGUgY2hhaW4gdmFyaWFibGUgaWYgbm8gc3Vic2VxdWVudCBtb2RhbCBoYXMgb3ZlcndyaXR0ZW4gaXQuXG4gICAgICAgICAgICB2YXIgc2FtZVByb21pc2U7XG4gICAgICAgICAgICBzYW1lUHJvbWlzZSA9IHByb21pc2VDaGFpbiA9ICRxLmFsbChbcHJvbWlzZUNoYWluXSlcbiAgICAgICAgICAgICAgLnRoZW4ocmVzb2x2ZVdpdGhUZW1wbGF0ZSwgcmVzb2x2ZVdpdGhUZW1wbGF0ZSlcbiAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gcmVzb2x2ZVN1Y2Nlc3ModHBsQW5kVmFycykge1xuICAgICAgICAgICAgICAgIHZhciBwcm92aWRlZFNjb3BlID0gbW9kYWxPcHRpb25zLnNjb3BlIHx8ICRyb290U2NvcGU7XG5cbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxTY29wZSA9IHByb3ZpZGVkU2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICAgIG1vZGFsU2NvcGUuJGNsb3NlID0gbW9kYWxJbnN0YW5jZS5jbG9zZTtcbiAgICAgICAgICAgICAgICBtb2RhbFNjb3BlLiRkaXNtaXNzID0gbW9kYWxJbnN0YW5jZS5kaXNtaXNzO1xuXG4gICAgICAgICAgICAgICAgbW9kYWxTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIW1vZGFsU2NvcGUuJCR1aWJEZXN0cnVjdGlvblNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgICAgICBtb2RhbFNjb3BlLiRkaXNtaXNzKCckdWliVW5zY2hlZHVsZWREZXN0cnVjdGlvbicpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsID0ge1xuICAgICAgICAgICAgICAgICAgc2NvcGU6IG1vZGFsU2NvcGUsXG4gICAgICAgICAgICAgICAgICBkZWZlcnJlZDogbW9kYWxSZXN1bHREZWZlcnJlZCxcbiAgICAgICAgICAgICAgICAgIHJlbmRlckRlZmVycmVkOiBtb2RhbFJlbmRlckRlZmVycmVkLFxuICAgICAgICAgICAgICAgICAgY2xvc2VkRGVmZXJyZWQ6IG1vZGFsQ2xvc2VkRGVmZXJyZWQsXG4gICAgICAgICAgICAgICAgICBhbmltYXRpb246IG1vZGFsT3B0aW9ucy5hbmltYXRpb24sXG4gICAgICAgICAgICAgICAgICBiYWNrZHJvcDogbW9kYWxPcHRpb25zLmJhY2tkcm9wLFxuICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IG1vZGFsT3B0aW9ucy5rZXlib2FyZCxcbiAgICAgICAgICAgICAgICAgIGJhY2tkcm9wQ2xhc3M6IG1vZGFsT3B0aW9ucy5iYWNrZHJvcENsYXNzLFxuICAgICAgICAgICAgICAgICAgd2luZG93VG9wQ2xhc3M6IG1vZGFsT3B0aW9ucy53aW5kb3dUb3BDbGFzcyxcbiAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiBtb2RhbE9wdGlvbnMud2luZG93Q2xhc3MsXG4gICAgICAgICAgICAgICAgICB3aW5kb3dUZW1wbGF0ZVVybDogbW9kYWxPcHRpb25zLndpbmRvd1RlbXBsYXRlVXJsLFxuICAgICAgICAgICAgICAgICAgYXJpYUxhYmVsbGVkQnk6IG1vZGFsT3B0aW9ucy5hcmlhTGFiZWxsZWRCeSxcbiAgICAgICAgICAgICAgICAgIGFyaWFEZXNjcmliZWRCeTogbW9kYWxPcHRpb25zLmFyaWFEZXNjcmliZWRCeSxcbiAgICAgICAgICAgICAgICAgIHNpemU6IG1vZGFsT3B0aW9ucy5zaXplLFxuICAgICAgICAgICAgICAgICAgb3BlbmVkQ2xhc3M6IG1vZGFsT3B0aW9ucy5vcGVuZWRDbGFzcyxcbiAgICAgICAgICAgICAgICAgIGFwcGVuZFRvOiBtb2RhbE9wdGlvbnMuYXBwZW5kVG9cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBjdHJsSW5zdGFuY2UsIGN0cmxJbnN0YW50aWF0ZSwgY3RybExvY2FscyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vZGFsT3B0aW9ucy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdExvY2Fscyhjb21wb25lbnQsIGZhbHNlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICBjb21wb25lbnQubmFtZSA9IG1vZGFsT3B0aW9ucy5jb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgICBtb2RhbC5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RhbE9wdGlvbnMuY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgY29uc3RydWN0TG9jYWxzKGN0cmxMb2NhbHMsIHRydWUsIGZhbHNlLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgLy8gdGhlIHRoaXJkIHBhcmFtIHdpbGwgbWFrZSB0aGUgY29udHJvbGxlciBpbnN0YW50aWF0ZSBsYXRlcixwcml2YXRlIGFwaVxuICAgICAgICAgICAgICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2Jsb2IvbWFzdGVyL3NyYy9uZy9jb250cm9sbGVyLmpzI0wxMjZcbiAgICAgICAgICAgICAgICAgIGN0cmxJbnN0YW50aWF0ZSA9ICRjb250cm9sbGVyKG1vZGFsT3B0aW9ucy5jb250cm9sbGVyLCBjdHJsTG9jYWxzLCB0cnVlLCBtb2RhbE9wdGlvbnMuY29udHJvbGxlckFzKTtcbiAgICAgICAgICAgICAgICAgIGlmIChtb2RhbE9wdGlvbnMuY29udHJvbGxlckFzICYmIG1vZGFsT3B0aW9ucy5iaW5kVG9Db250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0cmxJbnN0YW5jZSA9IGN0cmxJbnN0YW50aWF0ZS5pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgY3RybEluc3RhbmNlLiRjbG9zZSA9IG1vZGFsU2NvcGUuJGNsb3NlO1xuICAgICAgICAgICAgICAgICAgICBjdHJsSW5zdGFuY2UuJGRpc21pc3MgPSBtb2RhbFNjb3BlLiRkaXNtaXNzO1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChjdHJsSW5zdGFuY2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAkcmVzb2x2ZTogY3RybExvY2Fscy4kc2NvcGUuJHJlc29sdmVcbiAgICAgICAgICAgICAgICAgICAgfSwgcHJvdmlkZWRTY29wZSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGN0cmxJbnN0YW5jZSA9IGN0cmxJbnN0YW50aWF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKGN0cmxJbnN0YW5jZS4kb25Jbml0KSkge1xuICAgICAgICAgICAgICAgICAgICBjdHJsSW5zdGFuY2UuJG9uSW5pdCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghbW9kYWxPcHRpb25zLmNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgbW9kYWwuY29udGVudCA9IHRwbEFuZFZhcnNbMF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJG1vZGFsU3RhY2sub3Blbihtb2RhbEluc3RhbmNlLCBtb2RhbCk7XG4gICAgICAgICAgICAgICAgbW9kYWxPcGVuZWREZWZlcnJlZC5yZXNvbHZlKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29uc3RydWN0TG9jYWxzKG9iaiwgdGVtcGxhdGUsIGluc3RhbmNlT25TY29wZSwgaW5qZWN0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgb2JqLiRzY29wZSA9IG1vZGFsU2NvcGU7XG4gICAgICAgICAgICAgICAgICBvYmouJHNjb3BlLiRyZXNvbHZlID0ge307XG4gICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2VPblNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai4kc2NvcGUuJHVpYk1vZGFsSW5zdGFuY2UgPSBtb2RhbEluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLiR1aWJNb2RhbEluc3RhbmNlID0gbW9kYWxJbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgdmFyIHJlc29sdmVzID0gdGVtcGxhdGUgPyB0cGxBbmRWYXJzWzFdIDogdHBsQW5kVmFycztcbiAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXNvbHZlcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5qZWN0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBvYmouJHNjb3BlLiRyZXNvbHZlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIHJlc29sdmVFcnJvcihyZWFzb24pIHtcbiAgICAgICAgICAgICAgbW9kYWxPcGVuZWREZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgICAgbW9kYWxSZXN1bHREZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgIH0pWydmaW5hbGx5J10oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChwcm9taXNlQ2hhaW4gPT09IHNhbWVQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZUNoYWluID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBtb2RhbEluc3RhbmNlO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gJG1vZGFsO1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcblxuICAgIHJldHVybiAkbW9kYWxQcm92aWRlcjtcbiAgfSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucGFnaW5nJywgW10pXG4vKipcbiAqIEhlbHBlciBpbnRlcm5hbCBzZXJ2aWNlIGZvciBnZW5lcmF0aW5nIGNvbW1vbiBjb250cm9sbGVyIGNvZGUgYmV0d2VlbiB0aGVcbiAqIHBhZ2VyIGFuZCBwYWdpbmF0aW9uIGNvbXBvbmVudHNcbiAqL1xuLmZhY3RvcnkoJ3VpYlBhZ2luZycsIFsnJHBhcnNlJywgZnVuY3Rpb24oJHBhcnNlKSB7XG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbihjdHJsLCAkc2NvcGUsICRhdHRycykge1xuICAgICAgY3RybC5zZXROdW1QYWdlcyA9ICRhdHRycy5udW1QYWdlcyA/ICRwYXJzZSgkYXR0cnMubnVtUGFnZXMpLmFzc2lnbiA6IGFuZ3VsYXIubm9vcDtcbiAgICAgIGN0cmwubmdNb2RlbEN0cmwgPSB7ICRzZXRWaWV3VmFsdWU6IGFuZ3VsYXIubm9vcCB9OyAvLyBudWxsTW9kZWxDdHJsXG4gICAgICBjdHJsLl93YXRjaGVycyA9IFtdO1xuXG4gICAgICBjdHJsLmluaXQgPSBmdW5jdGlvbihuZ01vZGVsQ3RybCwgY29uZmlnKSB7XG4gICAgICAgIGN0cmwubmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybDtcbiAgICAgICAgY3RybC5jb25maWcgPSBjb25maWc7XG5cbiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGN0cmwucmVuZGVyKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCRhdHRycy5pdGVtc1BlclBhZ2UpIHtcbiAgICAgICAgICBjdHJsLl93YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkYXR0cnMuaXRlbXNQZXJQYWdlLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgY3RybC5pdGVtc1BlclBhZ2UgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgICAgICAgJHNjb3BlLnRvdGFsUGFnZXMgPSBjdHJsLmNhbGN1bGF0ZVRvdGFsUGFnZXMoKTtcbiAgICAgICAgICAgIGN0cmwudXBkYXRlUGFnZSgpO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdHJsLml0ZW1zUGVyUGFnZSA9IGNvbmZpZy5pdGVtc1BlclBhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCd0b3RhbEl0ZW1zJywgZnVuY3Rpb24obmV3VG90YWwsIG9sZFRvdGFsKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG5ld1RvdGFsKSB8fCBuZXdUb3RhbCAhPT0gb2xkVG90YWwpIHtcbiAgICAgICAgICAgICRzY29wZS50b3RhbFBhZ2VzID0gY3RybC5jYWxjdWxhdGVUb3RhbFBhZ2VzKCk7XG4gICAgICAgICAgICBjdHJsLnVwZGF0ZVBhZ2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgY3RybC5jYWxjdWxhdGVUb3RhbFBhZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0b3RhbFBhZ2VzID0gY3RybC5pdGVtc1BlclBhZ2UgPCAxID8gMSA6IE1hdGguY2VpbCgkc2NvcGUudG90YWxJdGVtcyAvIGN0cmwuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHRvdGFsUGFnZXMgfHwgMCwgMSk7XG4gICAgICB9O1xuXG4gICAgICBjdHJsLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUucGFnZSA9IHBhcnNlSW50KGN0cmwubmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSwgMTApIHx8IDE7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuc2VsZWN0UGFnZSA9IGZ1bmN0aW9uKHBhZ2UsIGV2dCkge1xuICAgICAgICBpZiAoZXZ0KSB7XG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2xpY2tBbGxvd2VkID0gISRzY29wZS5uZ0Rpc2FibGVkIHx8ICFldnQ7XG4gICAgICAgIGlmIChjbGlja0FsbG93ZWQgJiYgJHNjb3BlLnBhZ2UgIT09IHBhZ2UgJiYgcGFnZSA+IDAgJiYgcGFnZSA8PSAkc2NvcGUudG90YWxQYWdlcykge1xuICAgICAgICAgIGlmIChldnQgJiYgZXZ0LnRhcmdldCkge1xuICAgICAgICAgICAgZXZ0LnRhcmdldC5ibHVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN0cmwubmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShwYWdlKTtcbiAgICAgICAgICBjdHJsLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJHNjb3BlLmdldFRleHQgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuICRzY29wZVtrZXkgKyAnVGV4dCddIHx8IGN0cmwuY29uZmlnW2tleSArICdUZXh0J107XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUubm9QcmV2aW91cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJHNjb3BlLnBhZ2UgPT09IDE7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUubm9OZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUucGFnZSA9PT0gJHNjb3BlLnRvdGFsUGFnZXM7XG4gICAgICB9O1xuXG4gICAgICBjdHJsLnVwZGF0ZVBhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY3RybC5zZXROdW1QYWdlcygkc2NvcGUuJHBhcmVudCwgJHNjb3BlLnRvdGFsUGFnZXMpOyAvLyBSZWFkb25seSB2YXJpYWJsZVxuXG4gICAgICAgIGlmICgkc2NvcGUucGFnZSA+ICRzY29wZS50b3RhbFBhZ2VzKSB7XG4gICAgICAgICAgJHNjb3BlLnNlbGVjdFBhZ2UoJHNjb3BlLnRvdGFsUGFnZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0cmwubmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICB3aGlsZSAoY3RybC5fd2F0Y2hlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgY3RybC5fd2F0Y2hlcnMuc2hpZnQoKSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucGFnZXInLCBbJ3VpLmJvb3RzdHJhcC5wYWdpbmcnLCAndWkuYm9vdHN0cmFwLnRhYmluZGV4J10pXG5cbi5jb250cm9sbGVyKCdVaWJQYWdlckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckYXR0cnMnLCAndWliUGFnaW5nJywgJ3VpYlBhZ2VyQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsIHVpYlBhZ2luZywgdWliUGFnZXJDb25maWcpIHtcbiAgJHNjb3BlLmFsaWduID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmFsaWduKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5hbGlnbikgOiB1aWJQYWdlckNvbmZpZy5hbGlnbjtcblxuICB1aWJQYWdpbmcuY3JlYXRlKHRoaXMsICRzY29wZSwgJGF0dHJzKTtcbn1dKVxuXG4uY29uc3RhbnQoJ3VpYlBhZ2VyQ29uZmlnJywge1xuICBpdGVtc1BlclBhZ2U6IDEwLFxuICBwcmV2aW91c1RleHQ6ICfCqyBQcmV2aW91cycsXG4gIG5leHRUZXh0OiAnTmV4dCDCuycsXG4gIGFsaWduOiB0cnVlXG59KVxuXG4uZGlyZWN0aXZlKCd1aWJQYWdlcicsIFsndWliUGFnZXJDb25maWcnLCBmdW5jdGlvbih1aWJQYWdlckNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7XG4gICAgICB0b3RhbEl0ZW1zOiAnPScsXG4gICAgICBwcmV2aW91c1RleHQ6ICdAJyxcbiAgICAgIG5leHRUZXh0OiAnQCcsXG4gICAgICBuZ0Rpc2FibGVkOiAnPSdcbiAgICB9LFxuICAgIHJlcXVpcmU6IFsndWliUGFnZXInLCAnP25nTW9kZWwnXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJQYWdlckNvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ3BhZ2VyJyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL3BhZ2VyL3BhZ2VyLmh0bWwnO1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgZWxlbWVudC5hZGRDbGFzcygncGFnZXInKTtcbiAgICAgIHZhciBwYWdpbmF0aW9uQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBpZiAoIW5nTW9kZWxDdHJsKSB7XG4gICAgICAgIHJldHVybjsgLy8gZG8gbm90aGluZyBpZiBubyBuZy1tb2RlbFxuICAgICAgfVxuXG4gICAgICBwYWdpbmF0aW9uQ3RybC5pbml0KG5nTW9kZWxDdHJsLCB1aWJQYWdlckNvbmZpZyk7XG4gICAgfVxuICB9O1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnBhZ2luYXRpb24nLCBbJ3VpLmJvb3RzdHJhcC5wYWdpbmcnLCAndWkuYm9vdHN0cmFwLnRhYmluZGV4J10pXG4uY29udHJvbGxlcignVWliUGFnaW5hdGlvbkNvbnRyb2xsZXInLCBbJyRzY29wZScsICckYXR0cnMnLCAnJHBhcnNlJywgJ3VpYlBhZ2luZycsICd1aWJQYWdpbmF0aW9uQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsICRwYXJzZSwgdWliUGFnaW5nLCB1aWJQYWdpbmF0aW9uQ29uZmlnKSB7XG4gIHZhciBjdHJsID0gdGhpcztcbiAgLy8gU2V0dXAgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzXG4gIHZhciBtYXhTaXplID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLm1heFNpemUpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLm1heFNpemUpIDogdWliUGFnaW5hdGlvbkNvbmZpZy5tYXhTaXplLFxuICAgIHJvdGF0ZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5yb3RhdGUpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnJvdGF0ZSkgOiB1aWJQYWdpbmF0aW9uQ29uZmlnLnJvdGF0ZSxcbiAgICBmb3JjZUVsbGlwc2VzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmZvcmNlRWxsaXBzZXMpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmZvcmNlRWxsaXBzZXMpIDogdWliUGFnaW5hdGlvbkNvbmZpZy5mb3JjZUVsbGlwc2VzLFxuICAgIGJvdW5kYXJ5TGlua051bWJlcnMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuYm91bmRhcnlMaW5rTnVtYmVycykgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuYm91bmRhcnlMaW5rTnVtYmVycykgOiB1aWJQYWdpbmF0aW9uQ29uZmlnLmJvdW5kYXJ5TGlua051bWJlcnMsXG4gICAgcGFnZUxhYmVsID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnBhZ2VMYWJlbCkgPyBmdW5jdGlvbihpZHgpIHsgcmV0dXJuICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5wYWdlTGFiZWwsIHskcGFnZTogaWR4fSk7IH0gOiBhbmd1bGFyLmlkZW50aXR5O1xuICAkc2NvcGUuYm91bmRhcnlMaW5rcyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5ib3VuZGFyeUxpbmtzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5ib3VuZGFyeUxpbmtzKSA6IHVpYlBhZ2luYXRpb25Db25maWcuYm91bmRhcnlMaW5rcztcbiAgJHNjb3BlLmRpcmVjdGlvbkxpbmtzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRpcmVjdGlvbkxpbmtzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5kaXJlY3Rpb25MaW5rcykgOiB1aWJQYWdpbmF0aW9uQ29uZmlnLmRpcmVjdGlvbkxpbmtzO1xuXG4gIHVpYlBhZ2luZy5jcmVhdGUodGhpcywgJHNjb3BlLCAkYXR0cnMpO1xuXG4gIGlmICgkYXR0cnMubWF4U2l6ZSkge1xuICAgIGN0cmwuX3dhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMubWF4U2l6ZSksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBtYXhTaXplID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgIGN0cmwucmVuZGVyKCk7XG4gICAgfSkpO1xuICB9XG5cbiAgLy8gQ3JlYXRlIHBhZ2Ugb2JqZWN0IHVzZWQgaW4gdGVtcGxhdGVcbiAgZnVuY3Rpb24gbWFrZVBhZ2UobnVtYmVyLCB0ZXh0LCBpc0FjdGl2ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBudW1iZXI6IG51bWJlcixcbiAgICAgIHRleHQ6IHRleHQsXG4gICAgICBhY3RpdmU6IGlzQWN0aXZlXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBhZ2VzKGN1cnJlbnRQYWdlLCB0b3RhbFBhZ2VzKSB7XG4gICAgdmFyIHBhZ2VzID0gW107XG5cbiAgICAvLyBEZWZhdWx0IHBhZ2UgbGltaXRzXG4gICAgdmFyIHN0YXJ0UGFnZSA9IDEsIGVuZFBhZ2UgPSB0b3RhbFBhZ2VzO1xuICAgIHZhciBpc01heFNpemVkID0gYW5ndWxhci5pc0RlZmluZWQobWF4U2l6ZSkgJiYgbWF4U2l6ZSA8IHRvdGFsUGFnZXM7XG5cbiAgICAvLyByZWNvbXB1dGUgaWYgbWF4U2l6ZVxuICAgIGlmIChpc01heFNpemVkKSB7XG4gICAgICBpZiAocm90YXRlKSB7XG4gICAgICAgIC8vIEN1cnJlbnQgcGFnZSBpcyBkaXNwbGF5ZWQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdmlzaWJsZSBvbmVzXG4gICAgICAgIHN0YXJ0UGFnZSA9IE1hdGgubWF4KGN1cnJlbnRQYWdlIC0gTWF0aC5mbG9vcihtYXhTaXplIC8gMiksIDEpO1xuICAgICAgICBlbmRQYWdlID0gc3RhcnRQYWdlICsgbWF4U2l6ZSAtIDE7XG5cbiAgICAgICAgLy8gQWRqdXN0IGlmIGxpbWl0IGlzIGV4Y2VlZGVkXG4gICAgICAgIGlmIChlbmRQYWdlID4gdG90YWxQYWdlcykge1xuICAgICAgICAgIGVuZFBhZ2UgPSB0b3RhbFBhZ2VzO1xuICAgICAgICAgIHN0YXJ0UGFnZSA9IGVuZFBhZ2UgLSBtYXhTaXplICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVmlzaWJsZSBwYWdlcyBhcmUgcGFnaW5hdGVkIHdpdGggbWF4U2l6ZVxuICAgICAgICBzdGFydFBhZ2UgPSAoTWF0aC5jZWlsKGN1cnJlbnRQYWdlIC8gbWF4U2l6ZSkgLSAxKSAqIG1heFNpemUgKyAxO1xuXG4gICAgICAgIC8vIEFkanVzdCBsYXN0IHBhZ2UgaWYgbGltaXQgaXMgZXhjZWVkZWRcbiAgICAgICAgZW5kUGFnZSA9IE1hdGgubWluKHN0YXJ0UGFnZSArIG1heFNpemUgLSAxLCB0b3RhbFBhZ2VzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgcGFnZSBudW1iZXIgbGlua3NcbiAgICBmb3IgKHZhciBudW1iZXIgPSBzdGFydFBhZ2U7IG51bWJlciA8PSBlbmRQYWdlOyBudW1iZXIrKykge1xuICAgICAgdmFyIHBhZ2UgPSBtYWtlUGFnZShudW1iZXIsIHBhZ2VMYWJlbChudW1iZXIpLCBudW1iZXIgPT09IGN1cnJlbnRQYWdlKTtcbiAgICAgIHBhZ2VzLnB1c2gocGFnZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIGxpbmtzIHRvIG1vdmUgYmV0d2VlbiBwYWdlIHNldHNcbiAgICBpZiAoaXNNYXhTaXplZCAmJiBtYXhTaXplID4gMCAmJiAoIXJvdGF0ZSB8fCBmb3JjZUVsbGlwc2VzIHx8IGJvdW5kYXJ5TGlua051bWJlcnMpKSB7XG4gICAgICBpZiAoc3RhcnRQYWdlID4gMSkge1xuICAgICAgICBpZiAoIWJvdW5kYXJ5TGlua051bWJlcnMgfHwgc3RhcnRQYWdlID4gMykgeyAvL25lZWQgZWxsaXBzaXMgZm9yIGFsbCBvcHRpb25zIHVubGVzcyByYW5nZSBpcyB0b28gY2xvc2UgdG8gYmVnaW5uaW5nXG4gICAgICAgIHZhciBwcmV2aW91c1BhZ2VTZXQgPSBtYWtlUGFnZShzdGFydFBhZ2UgLSAxLCAnLi4uJywgZmFsc2UpO1xuICAgICAgICBwYWdlcy51bnNoaWZ0KHByZXZpb3VzUGFnZVNldCk7XG4gICAgICB9XG4gICAgICAgIGlmIChib3VuZGFyeUxpbmtOdW1iZXJzKSB7XG4gICAgICAgICAgaWYgKHN0YXJ0UGFnZSA9PT0gMykgeyAvL25lZWQgdG8gcmVwbGFjZSBlbGxpcHNpcyB3aGVuIHRoZSBidXR0b25zIHdvdWxkIGJlIHNlcXVlbnRpYWxcbiAgICAgICAgICAgIHZhciBzZWNvbmRQYWdlTGluayA9IG1ha2VQYWdlKDIsICcyJywgZmFsc2UpO1xuICAgICAgICAgICAgcGFnZXMudW5zaGlmdChzZWNvbmRQYWdlTGluayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vYWRkIHRoZSBmaXJzdCBwYWdlXG4gICAgICAgICAgdmFyIGZpcnN0UGFnZUxpbmsgPSBtYWtlUGFnZSgxLCAnMScsIGZhbHNlKTtcbiAgICAgICAgICBwYWdlcy51bnNoaWZ0KGZpcnN0UGFnZUxpbmspO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRQYWdlIDwgdG90YWxQYWdlcykge1xuICAgICAgICBpZiAoIWJvdW5kYXJ5TGlua051bWJlcnMgfHwgZW5kUGFnZSA8IHRvdGFsUGFnZXMgLSAyKSB7IC8vbmVlZCBlbGxpcHNpcyBmb3IgYWxsIG9wdGlvbnMgdW5sZXNzIHJhbmdlIGlzIHRvbyBjbG9zZSB0byBlbmRcbiAgICAgICAgdmFyIG5leHRQYWdlU2V0ID0gbWFrZVBhZ2UoZW5kUGFnZSArIDEsICcuLi4nLCBmYWxzZSk7XG4gICAgICAgIHBhZ2VzLnB1c2gobmV4dFBhZ2VTZXQpO1xuICAgICAgfVxuICAgICAgICBpZiAoYm91bmRhcnlMaW5rTnVtYmVycykge1xuICAgICAgICAgIGlmIChlbmRQYWdlID09PSB0b3RhbFBhZ2VzIC0gMikgeyAvL25lZWQgdG8gcmVwbGFjZSBlbGxpcHNpcyB3aGVuIHRoZSBidXR0b25zIHdvdWxkIGJlIHNlcXVlbnRpYWxcbiAgICAgICAgICAgIHZhciBzZWNvbmRUb0xhc3RQYWdlTGluayA9IG1ha2VQYWdlKHRvdGFsUGFnZXMgLSAxLCB0b3RhbFBhZ2VzIC0gMSwgZmFsc2UpO1xuICAgICAgICAgICAgcGFnZXMucHVzaChzZWNvbmRUb0xhc3RQYWdlTGluayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vYWRkIHRoZSBsYXN0IHBhZ2VcbiAgICAgICAgICB2YXIgbGFzdFBhZ2VMaW5rID0gbWFrZVBhZ2UodG90YWxQYWdlcywgdG90YWxQYWdlcywgZmFsc2UpO1xuICAgICAgICAgIHBhZ2VzLnB1c2gobGFzdFBhZ2VMaW5rKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFnZXM7XG4gIH1cblxuICB2YXIgb3JpZ2luYWxSZW5kZXIgPSB0aGlzLnJlbmRlcjtcbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICBvcmlnaW5hbFJlbmRlcigpO1xuICAgIGlmICgkc2NvcGUucGFnZSA+IDAgJiYgJHNjb3BlLnBhZ2UgPD0gJHNjb3BlLnRvdGFsUGFnZXMpIHtcbiAgICAgICRzY29wZS5wYWdlcyA9IGdldFBhZ2VzKCRzY29wZS5wYWdlLCAkc2NvcGUudG90YWxQYWdlcyk7XG4gICAgfVxuICB9O1xufV0pXG5cbi5jb25zdGFudCgndWliUGFnaW5hdGlvbkNvbmZpZycsIHtcbiAgaXRlbXNQZXJQYWdlOiAxMCxcbiAgYm91bmRhcnlMaW5rczogZmFsc2UsXG4gIGJvdW5kYXJ5TGlua051bWJlcnM6IGZhbHNlLFxuICBkaXJlY3Rpb25MaW5rczogdHJ1ZSxcbiAgZmlyc3RUZXh0OiAnRmlyc3QnLFxuICBwcmV2aW91c1RleHQ6ICdQcmV2aW91cycsXG4gIG5leHRUZXh0OiAnTmV4dCcsXG4gIGxhc3RUZXh0OiAnTGFzdCcsXG4gIHJvdGF0ZTogdHJ1ZSxcbiAgZm9yY2VFbGxpcHNlczogZmFsc2Vcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlBhZ2luYXRpb24nLCBbJyRwYXJzZScsICd1aWJQYWdpbmF0aW9uQ29uZmlnJywgZnVuY3Rpb24oJHBhcnNlLCB1aWJQYWdpbmF0aW9uQ29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgc2NvcGU6IHtcbiAgICAgIHRvdGFsSXRlbXM6ICc9JyxcbiAgICAgIGZpcnN0VGV4dDogJ0AnLFxuICAgICAgcHJldmlvdXNUZXh0OiAnQCcsXG4gICAgICBuZXh0VGV4dDogJ0AnLFxuICAgICAgbGFzdFRleHQ6ICdAJyxcbiAgICAgIG5nRGlzYWJsZWQ6Jz0nXG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ3VpYlBhZ2luYXRpb24nLCAnP25nTW9kZWwnXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJQYWdpbmF0aW9uQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAncGFnaW5hdGlvbicsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2luYXRpb24uaHRtbCc7XG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdwYWdpbmF0aW9uJyk7XG4gICAgICB2YXIgcGFnaW5hdGlvbkN0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgaWYgKCFuZ01vZGVsQ3RybCkge1xuICAgICAgICAgcmV0dXJuOyAvLyBkbyBub3RoaW5nIGlmIG5vIG5nLW1vZGVsXG4gICAgICB9XG5cbiAgICAgIHBhZ2luYXRpb25DdHJsLmluaXQobmdNb2RlbEN0cmwsIHVpYlBhZ2luYXRpb25Db25maWcpO1xuICAgIH1cbiAgfTtcbn1dKTtcblxuLyoqXG4gKiBUaGUgZm9sbG93aW5nIGZlYXR1cmVzIGFyZSBzdGlsbCBvdXRzdGFuZGluZzogYW5pbWF0aW9uIGFzIGFcbiAqIGZ1bmN0aW9uLCBwbGFjZW1lbnQgYXMgYSBmdW5jdGlvbiwgaW5zaWRlLCBzdXBwb3J0IGZvciBtb3JlIHRyaWdnZXJzIHRoYW5cbiAqIGp1c3QgbW91c2UgZW50ZXIvbGVhdmUsIGh0bWwgdG9vbHRpcHMsIGFuZCBzZWxlY3RvciBkZWxlZ2F0aW9uLlxuICovXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRvb2x0aXAnLCBbJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbicsICd1aS5ib290c3RyYXAuc3RhY2tlZE1hcCddKVxuXG4vKipcbiAqIFRoZSAkdG9vbHRpcCBzZXJ2aWNlIGNyZWF0ZXMgdG9vbHRpcC0gYW5kIHBvcG92ZXItbGlrZSBkaXJlY3RpdmVzIGFzIHdlbGwgYXNcbiAqIGhvdXNlcyBnbG9iYWwgb3B0aW9ucyBmb3IgdGhlbS5cbiAqL1xuLnByb3ZpZGVyKCckdWliVG9vbHRpcCcsIGZ1bmN0aW9uKCkge1xuICAvLyBUaGUgZGVmYXVsdCBvcHRpb25zIHRvb2x0aXAgYW5kIHBvcG92ZXIuXG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHBsYWNlbWVudENsYXNzUHJlZml4OiAnJyxcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgcG9wdXBEZWxheTogMCxcbiAgICBwb3B1cENsb3NlRGVsYXk6IDAsXG4gICAgdXNlQ29udGVudEV4cDogZmFsc2VcbiAgfTtcblxuICAvLyBEZWZhdWx0IGhpZGUgdHJpZ2dlcnMgZm9yIGVhY2ggc2hvdyB0cmlnZ2VyXG4gIHZhciB0cmlnZ2VyTWFwID0ge1xuICAgICdtb3VzZWVudGVyJzogJ21vdXNlbGVhdmUnLFxuICAgICdjbGljayc6ICdjbGljaycsXG4gICAgJ291dHNpZGVDbGljayc6ICdvdXRzaWRlQ2xpY2snLFxuICAgICdmb2N1cyc6ICdibHVyJyxcbiAgICAnbm9uZSc6ICcnXG4gIH07XG5cbiAgLy8gVGhlIG9wdGlvbnMgc3BlY2lmaWVkIHRvIHRoZSBwcm92aWRlciBnbG9iYWxseS5cbiAgdmFyIGdsb2JhbE9wdGlvbnMgPSB7fTtcblxuICAvKipcbiAgICogYG9wdGlvbnMoe30pYCBhbGxvd3MgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gb2YgYWxsIHRvb2x0aXBzIGluIHRoZVxuICAgKiBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoICdBcHAnLCBbJ3VpLmJvb3RzdHJhcC50b29sdGlwJ10sIGZ1bmN0aW9uKCAkdG9vbHRpcFByb3ZpZGVyICkge1xuICAgKiAgICAgLy8gcGxhY2UgdG9vbHRpcHMgbGVmdCBpbnN0ZWFkIG9mIHRvcCBieSBkZWZhdWx0XG4gICAqICAgICAkdG9vbHRpcFByb3ZpZGVyLm9wdGlvbnMoIHsgcGxhY2VtZW50OiAnbGVmdCcgfSApO1xuICAgKiAgIH0pO1xuICAgKi9cblx0dGhpcy5vcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRhbmd1bGFyLmV4dGVuZChnbG9iYWxPcHRpb25zLCB2YWx1ZSk7XG5cdH07XG5cbiAgLyoqXG4gICAqIFRoaXMgYWxsb3dzIHlvdSB0byBleHRlbmQgdGhlIHNldCBvZiB0cmlnZ2VyIG1hcHBpbmdzIGF2YWlsYWJsZS4gRS5nLjpcbiAgICpcbiAgICogICAkdG9vbHRpcFByb3ZpZGVyLnNldFRyaWdnZXJzKCB7ICdvcGVuVHJpZ2dlcic6ICdjbG9zZVRyaWdnZXInIH0gKTtcbiAgICovXG4gIHRoaXMuc2V0VHJpZ2dlcnMgPSBmdW5jdGlvbiBzZXRUcmlnZ2Vycyh0cmlnZ2Vycykge1xuICAgIGFuZ3VsYXIuZXh0ZW5kKHRyaWdnZXJNYXAsIHRyaWdnZXJzKTtcbiAgfTtcblxuICAvKipcbiAgICogVGhpcyBpcyBhIGhlbHBlciBmdW5jdGlvbiBmb3IgdHJhbnNsYXRpbmcgY2FtZWwtY2FzZSB0byBzbmFrZV9jYXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gc25ha2VfY2FzZShuYW1lKSB7XG4gICAgdmFyIHJlZ2V4cCA9IC9bQS1aXS9nO1xuICAgIHZhciBzZXBhcmF0b3IgPSAnLSc7XG4gICAgcmV0dXJuIG5hbWUucmVwbGFjZShyZWdleHAsIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7XG4gICAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFjdHVhbCBpbnN0YW5jZSBvZiB0aGUgJHRvb2x0aXAgc2VydmljZS5cbiAgICogVE9ETyBzdXBwb3J0IG11bHRpcGxlIHRyaWdnZXJzXG4gICAqL1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGNvbXBpbGUnLCAnJHRpbWVvdXQnLCAnJGRvY3VtZW50JywgJyR1aWJQb3NpdGlvbicsICckaW50ZXJwb2xhdGUnLCAnJHJvb3RTY29wZScsICckcGFyc2UnLCAnJCRzdGFja2VkTWFwJywgZnVuY3Rpb24oJHdpbmRvdywgJGNvbXBpbGUsICR0aW1lb3V0LCAkZG9jdW1lbnQsICRwb3NpdGlvbiwgJGludGVycG9sYXRlLCAkcm9vdFNjb3BlLCAkcGFyc2UsICQkc3RhY2tlZE1hcCkge1xuICAgIHZhciBvcGVuZWRUb29sdGlwcyA9ICQkc3RhY2tlZE1hcC5jcmVhdGVOZXcoKTtcbiAgICAkZG9jdW1lbnQub24oJ2tleXVwJywga2V5cHJlc3NMaXN0ZW5lcik7XG5cbiAgICAkcm9vdFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICRkb2N1bWVudC5vZmYoJ2tleXVwJywga2V5cHJlc3NMaXN0ZW5lcik7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBrZXlwcmVzc0xpc3RlbmVyKGUpIHtcbiAgICAgIGlmIChlLndoaWNoID09PSAyNykge1xuICAgICAgICB2YXIgbGFzdCA9IG9wZW5lZFRvb2x0aXBzLnRvcCgpO1xuICAgICAgICBpZiAobGFzdCkge1xuICAgICAgICAgIGxhc3QudmFsdWUuY2xvc2UoKTtcbiAgICAgICAgICBsYXN0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAkdG9vbHRpcCh0dFR5cGUsIHByZWZpeCwgZGVmYXVsdFRyaWdnZXJTaG93LCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBnbG9iYWxPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBzaG93IGFuZCBoaWRlIHRyaWdnZXJzLlxuICAgICAgICpcbiAgICAgICAqIElmIGEgdHJpZ2dlciBpcyBzdXBwbGllZCxcbiAgICAgICAqIGl0IGlzIHVzZWQgdG8gc2hvdyB0aGUgdG9vbHRpcDsgb3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRyaWdnZXJgXG4gICAgICAgKiBvcHRpb24gcGFzc2VkIHRvIHRoZSBgJHRvb2x0aXBQcm92aWRlci5vcHRpb25zYCBtZXRob2Q7IGVsc2UgaXQgd2lsbFxuICAgICAgICogZGVmYXVsdCB0byB0aGUgdHJpZ2dlciBzdXBwbGllZCB0byB0aGlzIGRpcmVjdGl2ZSBmYWN0b3J5LlxuICAgICAgICpcbiAgICAgICAqIFRoZSBoaWRlIHRyaWdnZXIgaXMgYmFzZWQgb24gdGhlIHNob3cgdHJpZ2dlci4gSWYgdGhlIGB0cmlnZ2VyYCBvcHRpb25cbiAgICAgICAqIHdhcyBwYXNzZWQgdG8gdGhlIGAkdG9vbHRpcFByb3ZpZGVyLm9wdGlvbnNgIG1ldGhvZCwgaXQgd2lsbCB1c2UgdGhlXG4gICAgICAgKiBtYXBwZWQgdHJpZ2dlciBmcm9tIGB0cmlnZ2VyTWFwYCBvciB0aGUgcGFzc2VkIHRyaWdnZXIgaWYgdGhlIG1hcCBpc1xuICAgICAgICogdW5kZWZpbmVkOyBvdGhlcndpc2UsIGl0IHVzZXMgdGhlIGB0cmlnZ2VyTWFwYCB2YWx1ZSBvZiB0aGUgc2hvd1xuICAgICAgICogdHJpZ2dlcjsgZWxzZSBpdCB3aWxsIGp1c3QgdXNlIHRoZSBzaG93IHRyaWdnZXIuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldFRyaWdnZXJzKHRyaWdnZXIpIHtcbiAgICAgICAgdmFyIHNob3cgPSAodHJpZ2dlciB8fCBvcHRpb25zLnRyaWdnZXIgfHwgZGVmYXVsdFRyaWdnZXJTaG93KS5zcGxpdCgnICcpO1xuICAgICAgICB2YXIgaGlkZSA9IHNob3cubWFwKGZ1bmN0aW9uKHRyaWdnZXIpIHtcbiAgICAgICAgICByZXR1cm4gdHJpZ2dlck1hcFt0cmlnZ2VyXSB8fCB0cmlnZ2VyO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG93OiBzaG93LFxuICAgICAgICAgIGhpZGU6IGhpZGVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBzbmFrZV9jYXNlKHR0VHlwZSk7XG5cbiAgICAgIHZhciBzdGFydFN5bSA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpO1xuICAgICAgdmFyIGVuZFN5bSA9ICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKTtcbiAgICAgIHZhciB0ZW1wbGF0ZSA9XG4gICAgICAgICc8ZGl2ICcrIGRpcmVjdGl2ZU5hbWUgKyAnLXBvcHVwICcgK1xuICAgICAgICAgICd1aWItdGl0bGU9XCInICsgc3RhcnRTeW0gKyAndGl0bGUnICsgZW5kU3ltICsgJ1wiICcgK1xuICAgICAgICAgIChvcHRpb25zLnVzZUNvbnRlbnRFeHAgP1xuICAgICAgICAgICAgJ2NvbnRlbnQtZXhwPVwiY29udGVudEV4cCgpXCIgJyA6XG4gICAgICAgICAgICAnY29udGVudD1cIicgKyBzdGFydFN5bSArICdjb250ZW50JyArIGVuZFN5bSArICdcIiAnKSArXG4gICAgICAgICAgJ29yaWdpbi1zY29wZT1cIm9yaWdTY29wZVwiICcgK1xuICAgICAgICAgICdjbGFzcz1cInVpYi1wb3NpdGlvbi1tZWFzdXJlICcgKyBwcmVmaXggKyAnXCIgJyArXG4gICAgICAgICAgJ3Rvb2x0aXAtYW5pbWF0aW9uLWNsYXNzPVwiZmFkZVwiJyArXG4gICAgICAgICAgJ3VpYi10b29sdGlwLWNsYXNzZXMgJyArXG4gICAgICAgICAgJ25nLWNsYXNzPVwieyBpbjogaXNPcGVuIH1cIiAnICtcbiAgICAgICAgICAnPicgK1xuICAgICAgICAnPC9kaXY+JztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24odEVsZW0sIHRBdHRycykge1xuICAgICAgICAgIHZhciB0b29sdGlwTGlua2VyID0gJGNvbXBpbGUodGVtcGxhdGUpO1xuXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB0b29sdGlwQ3RybCkge1xuICAgICAgICAgICAgdmFyIHRvb2x0aXA7XG4gICAgICAgICAgICB2YXIgdG9vbHRpcExpbmtlZFNjb3BlO1xuICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgICAgICAgdmFyIHNob3dUaW1lb3V0O1xuICAgICAgICAgICAgdmFyIGhpZGVUaW1lb3V0O1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uVGltZW91dDtcbiAgICAgICAgICAgIHZhciBhZGp1c3RtZW50VGltZW91dDtcbiAgICAgICAgICAgIHZhciBhcHBlbmRUb0JvZHkgPSBhbmd1bGFyLmlzRGVmaW5lZChvcHRpb25zLmFwcGVuZFRvQm9keSkgPyBvcHRpb25zLmFwcGVuZFRvQm9keSA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHRyaWdnZXJzID0gZ2V0VHJpZ2dlcnModW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHZhciBoYXNFbmFibGVFeHAgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRyc1twcmVmaXggKyAnRW5hYmxlJ10pO1xuICAgICAgICAgICAgdmFyIHR0U2NvcGUgPSBzY29wZS4kbmV3KHRydWUpO1xuICAgICAgICAgICAgdmFyIHJlcG9zaXRpb25TY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpc09wZW5QYXJzZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzW3ByZWZpeCArICdJc09wZW4nXSkgPyAkcGFyc2UoYXR0cnNbcHJlZml4ICsgJ0lzT3BlbiddKSA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRQYXJzZSA9IG9wdGlvbnMudXNlQ29udGVudEV4cCA/ICRwYXJzZShhdHRyc1t0dFR5cGVdKSA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IFtdO1xuICAgICAgICAgICAgdmFyIGxhc3RQbGFjZW1lbnQ7XG5cbiAgICAgICAgICAgIHZhciBwb3NpdGlvblRvb2x0aXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdG9vbHRpcCBleGlzdHMgYW5kIGlzIG5vdCBlbXB0eVxuICAgICAgICAgICAgICBpZiAoIXRvb2x0aXAgfHwgIXRvb2x0aXAuaHRtbCgpKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICAgIGlmICghcG9zaXRpb25UaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25UaW1lb3V0ID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdHRQb3NpdGlvbiA9ICRwb3NpdGlvbi5wb3NpdGlvbkVsZW1lbnRzKGVsZW1lbnQsIHRvb2x0aXAsIHR0U2NvcGUucGxhY2VtZW50LCBhcHBlbmRUb0JvZHkpO1xuICAgICAgICAgICAgICAgICAgdmFyIGluaXRpYWxIZWlnaHQgPSBhbmd1bGFyLmlzRGVmaW5lZCh0b29sdGlwLm9mZnNldEhlaWdodCkgPyB0b29sdGlwLm9mZnNldEhlaWdodCA6IHRvb2x0aXAucHJvcCgnb2Zmc2V0SGVpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFBvcyA9IGFwcGVuZFRvQm9keSA/ICRwb3NpdGlvbi5vZmZzZXQoZWxlbWVudCkgOiAkcG9zaXRpb24ucG9zaXRpb24oZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB0b29sdGlwLmNzcyh7IHRvcDogdHRQb3NpdGlvbi50b3AgKyAncHgnLCBsZWZ0OiB0dFBvc2l0aW9uLmxlZnQgKyAncHgnIH0pO1xuICAgICAgICAgICAgICAgICAgdmFyIHBsYWNlbWVudENsYXNzZXMgPSB0dFBvc2l0aW9uLnBsYWNlbWVudC5zcGxpdCgnLScpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoIXRvb2x0aXAuaGFzQ2xhc3MocGxhY2VtZW50Q2xhc3Nlc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5yZW1vdmVDbGFzcyhsYXN0UGxhY2VtZW50LnNwbGl0KCctJylbMF0pO1xuICAgICAgICAgICAgICAgICAgICB0b29sdGlwLmFkZENsYXNzKHBsYWNlbWVudENsYXNzZXNbMF0pO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBpZiAoIXRvb2x0aXAuaGFzQ2xhc3Mob3B0aW9ucy5wbGFjZW1lbnRDbGFzc1ByZWZpeCArIHR0UG9zaXRpb24ucGxhY2VtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICB0b29sdGlwLnJlbW92ZUNsYXNzKG9wdGlvbnMucGxhY2VtZW50Q2xhc3NQcmVmaXggKyBsYXN0UGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5hZGRDbGFzcyhvcHRpb25zLnBsYWNlbWVudENsYXNzUHJlZml4ICsgdHRQb3NpdGlvbi5wbGFjZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBhZGp1c3RtZW50VGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudEhlaWdodCA9IGFuZ3VsYXIuaXNEZWZpbmVkKHRvb2x0aXAub2Zmc2V0SGVpZ2h0KSA/IHRvb2x0aXAub2Zmc2V0SGVpZ2h0IDogdG9vbHRpcC5wcm9wKCdvZmZzZXRIZWlnaHQnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkanVzdG1lbnQgPSAkcG9zaXRpb24uYWRqdXN0VG9wKHBsYWNlbWVudENsYXNzZXMsIGVsZW1lbnRQb3MsIGluaXRpYWxIZWlnaHQsIGN1cnJlbnRIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWRqdXN0bWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuY3NzKGFkanVzdG1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFkanVzdG1lbnRUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIH0sIDAsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgLy8gZmlyc3QgdGltZSB0aHJvdWdoIHR0IGVsZW1lbnQgd2lsbCBoYXZlIHRoZVxuICAgICAgICAgICAgICAgICAgLy8gdWliLXBvc2l0aW9uLW1lYXN1cmUgY2xhc3Mgb3IgaWYgdGhlIHBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgLy8gaGFzIGNoYW5nZWQgd2UgbmVlZCB0byBwb3NpdGlvbiB0aGUgYXJyb3cuXG4gICAgICAgICAgICAgICAgICBpZiAodG9vbHRpcC5oYXNDbGFzcygndWliLXBvc2l0aW9uLW1lYXN1cmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAkcG9zaXRpb24ucG9zaXRpb25BcnJvdyh0b29sdGlwLCB0dFBvc2l0aW9uLnBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAucmVtb3ZlQ2xhc3MoJ3VpYi1wb3NpdGlvbi1tZWFzdXJlJyk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RQbGFjZW1lbnQgIT09IHR0UG9zaXRpb24ucGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICRwb3NpdGlvbi5wb3NpdGlvbkFycm93KHRvb2x0aXAsIHR0UG9zaXRpb24ucGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGxhc3RQbGFjZW1lbnQgPSB0dFBvc2l0aW9uLnBsYWNlbWVudDtcblxuICAgICAgICAgICAgICAgICAgcG9zaXRpb25UaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9LCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIFNldCB1cCB0aGUgY29ycmVjdCBzY29wZSB0byBhbGxvdyB0cmFuc2NsdXNpb24gbGF0ZXJcbiAgICAgICAgICAgIHR0U2NvcGUub3JpZ1Njb3BlID0gc2NvcGU7XG5cbiAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIHRoZSB0b29sdGlwIGlzIG5vdCBvcGVuLlxuICAgICAgICAgICAgLy8gVE9ETyBhZGQgYWJpbGl0eSB0byBzdGFydCB0b29sdGlwIG9wZW5lZFxuICAgICAgICAgICAgdHRTY29wZS5pc09wZW4gPSBmYWxzZTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdG9nZ2xlVG9vbHRpcEJpbmQoKSB7XG4gICAgICAgICAgICAgIGlmICghdHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICBzaG93VG9vbHRpcEJpbmQoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoaWRlVG9vbHRpcEJpbmQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTaG93IHRoZSB0b29sdGlwIHdpdGggZGVsYXkgaWYgc3BlY2lmaWVkLCBvdGhlcndpc2Ugc2hvdyBpdCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgZnVuY3Rpb24gc2hvd1Rvb2x0aXBCaW5kKCkge1xuICAgICAgICAgICAgICBpZiAoaGFzRW5hYmxlRXhwICYmICFzY29wZS4kZXZhbChhdHRyc1twcmVmaXggKyAnRW5hYmxlJ10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY2FuY2VsSGlkZSgpO1xuICAgICAgICAgICAgICBwcmVwYXJlVG9vbHRpcCgpO1xuXG4gICAgICAgICAgICAgIGlmICh0dFNjb3BlLnBvcHVwRGVsYXkpIHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nIGlmIHRoZSB0b29sdGlwIHdhcyBhbHJlYWR5IHNjaGVkdWxlZCB0byBwb3AtdXAuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIGlmIHNob3cgaXMgdHJpZ2dlcmVkIG11bHRpcGxlIHRpbWVzIGJlZm9yZSBhbnkgaGlkZSBpcyB0cmlnZ2VyZWQuXG4gICAgICAgICAgICAgICAgaWYgKCFzaG93VGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgc2hvd1RpbWVvdXQgPSAkdGltZW91dChzaG93LCB0dFNjb3BlLnBvcHVwRGVsYXksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhpZGVUb29sdGlwQmluZCgpIHtcbiAgICAgICAgICAgICAgY2FuY2VsU2hvdygpO1xuXG4gICAgICAgICAgICAgIGlmICh0dFNjb3BlLnBvcHVwQ2xvc2VEZWxheSkge1xuICAgICAgICAgICAgICAgIGlmICghaGlkZVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgIGhpZGVUaW1lb3V0ID0gJHRpbWVvdXQoaGlkZSwgdHRTY29wZS5wb3B1cENsb3NlRGVsYXksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNob3cgdGhlIHRvb2x0aXAgcG9wdXAgZWxlbWVudC5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgICAgICAgIGNhbmNlbFNob3coKTtcbiAgICAgICAgICAgICAgY2FuY2VsSGlkZSgpO1xuXG4gICAgICAgICAgICAgIC8vIERvbid0IHNob3cgZW1wdHkgdG9vbHRpcHMuXG4gICAgICAgICAgICAgIGlmICghdHRTY29wZS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIubm9vcDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNyZWF0ZVRvb2x0aXAoKTtcblxuICAgICAgICAgICAgICAvLyBBbmQgc2hvdyB0aGUgdG9vbHRpcC5cbiAgICAgICAgICAgICAgdHRTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHR0U2NvcGUuaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhc3NpZ25Jc09wZW4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25Ub29sdGlwKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxTaG93KCkge1xuICAgICAgICAgICAgICBpZiAoc2hvd1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwoc2hvd1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHNob3dUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChwb3NpdGlvblRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwocG9zaXRpb25UaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEhpZGUgdGhlIHRvb2x0aXAgcG9wdXAgZWxlbWVudC5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgICAgICAgIGlmICghdHRTY29wZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIEZpcnN0IHRoaW5ncyBmaXJzdDogd2UgZG9uJ3Qgc2hvdyBpdCBhbnltb3JlLlxuICAgICAgICAgICAgICB0dFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR0U2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgIHR0U2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICBhc3NpZ25Jc09wZW4oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgLy8gQW5kIG5vdyB3ZSByZW1vdmUgaXQgZnJvbSB0aGUgRE9NLiBIb3dldmVyLCBpZiB3ZSBoYXZlIGFuaW1hdGlvbiwgd2VcbiAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gd2FpdCBmb3IgaXQgdG8gZXhwaXJlIGJlZm9yZWhhbmQuXG4gICAgICAgICAgICAgICAgICAvLyBGSVhNRTogdGhpcyBpcyBhIHBsYWNlaG9sZGVyIGZvciBhIHBvcnQgb2YgdGhlIHRyYW5zaXRpb25zIGxpYnJhcnkuXG4gICAgICAgICAgICAgICAgICAvLyBUaGUgZmFkZSB0cmFuc2l0aW9uIGluIFRXQlMgaXMgMTUwbXMuXG4gICAgICAgICAgICAgICAgICBpZiAodHRTY29wZS5hbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmFuc2l0aW9uVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gJHRpbWVvdXQocmVtb3ZlVG9vbHRpcCwgMTUwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxIaWRlKCkge1xuICAgICAgICAgICAgICBpZiAoaGlkZVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwoaGlkZVRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGhpZGVUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0cmFuc2l0aW9uVGltZW91dCk7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXAoKSB7XG4gICAgICAgICAgICAgIC8vIFRoZXJlIGNhbiBvbmx5IGJlIG9uZSB0b29sdGlwIGVsZW1lbnQgcGVyIGRpcmVjdGl2ZSBzaG93biBhdCBvbmNlLlxuICAgICAgICAgICAgICBpZiAodG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZSA9IHR0U2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICB0b29sdGlwID0gdG9vbHRpcExpbmtlcih0b29sdGlwTGlua2VkU2NvcGUsIGZ1bmN0aW9uKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAgICAgICAgICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLmFwcGVuZCh0b29sdGlwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZnRlcih0b29sdGlwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIG9wZW5lZFRvb2x0aXBzLmFkZCh0dFNjb3BlLCB7XG4gICAgICAgICAgICAgICAgY2xvc2U6IGhpZGVcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcHJlcE9ic2VydmVycygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVUb29sdGlwKCkge1xuICAgICAgICAgICAgICBjYW5jZWxTaG93KCk7XG4gICAgICAgICAgICAgIGNhbmNlbEhpZGUoKTtcbiAgICAgICAgICAgICAgdW5yZWdpc3Rlck9ic2VydmVycygpO1xuXG4gICAgICAgICAgICAgIGlmICh0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0b29sdGlwID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoYWRqdXN0bWVudFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChhZGp1c3RtZW50VGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb3BlbmVkVG9vbHRpcHMucmVtb3ZlKHR0U2NvcGUpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgaWYgKHRvb2x0aXBMaW5rZWRTY29wZSkge1xuICAgICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdGhlIGluaXRpYWwgc2NvcGUgdmFsdWVzLiBPbmNlXG4gICAgICAgICAgICAgKiB0aGUgdG9vbHRpcCBpcyBjcmVhdGVkLCB0aGUgb2JzZXJ2ZXJzXG4gICAgICAgICAgICAgKiB3aWxsIGJlIGFkZGVkIHRvIGtlZXAgdGhpbmdzIGluIHN5bmMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBhcmVUb29sdGlwKCkge1xuICAgICAgICAgICAgICB0dFNjb3BlLnRpdGxlID0gYXR0cnNbcHJlZml4ICsgJ1RpdGxlJ107XG4gICAgICAgICAgICAgIGlmIChjb250ZW50UGFyc2UpIHtcbiAgICAgICAgICAgICAgICB0dFNjb3BlLmNvbnRlbnQgPSBjb250ZW50UGFyc2Uoc2NvcGUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHR0U2NvcGUuY29udGVudCA9IGF0dHJzW3R0VHlwZV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0dFNjb3BlLnBvcHVwQ2xhc3MgPSBhdHRyc1twcmVmaXggKyAnQ2xhc3MnXTtcbiAgICAgICAgICAgICAgdHRTY29wZS5wbGFjZW1lbnQgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRyc1twcmVmaXggKyAnUGxhY2VtZW50J10pID8gYXR0cnNbcHJlZml4ICsgJ1BsYWNlbWVudCddIDogb3B0aW9ucy5wbGFjZW1lbnQ7XG4gICAgICAgICAgICAgIHZhciBwbGFjZW1lbnQgPSAkcG9zaXRpb24ucGFyc2VQbGFjZW1lbnQodHRTY29wZS5wbGFjZW1lbnQpO1xuICAgICAgICAgICAgICBsYXN0UGxhY2VtZW50ID0gcGxhY2VtZW50WzFdID8gcGxhY2VtZW50WzBdICsgJy0nICsgcGxhY2VtZW50WzFdIDogcGxhY2VtZW50WzBdO1xuXG4gICAgICAgICAgICAgIHZhciBkZWxheSA9IHBhcnNlSW50KGF0dHJzW3ByZWZpeCArICdQb3B1cERlbGF5J10sIDEwKTtcbiAgICAgICAgICAgICAgdmFyIGNsb3NlRGVsYXkgPSBwYXJzZUludChhdHRyc1twcmVmaXggKyAnUG9wdXBDbG9zZURlbGF5J10sIDEwKTtcbiAgICAgICAgICAgICAgdHRTY29wZS5wb3B1cERlbGF5ID0gIWlzTmFOKGRlbGF5KSA/IGRlbGF5IDogb3B0aW9ucy5wb3B1cERlbGF5O1xuICAgICAgICAgICAgICB0dFNjb3BlLnBvcHVwQ2xvc2VEZWxheSA9ICFpc05hTihjbG9zZURlbGF5KSA/IGNsb3NlRGVsYXkgOiBvcHRpb25zLnBvcHVwQ2xvc2VEZWxheTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gYXNzaWduSXNPcGVuKGlzT3Blbikge1xuICAgICAgICAgICAgICBpZiAoaXNPcGVuUGFyc2UgJiYgYW5ndWxhci5pc0Z1bmN0aW9uKGlzT3BlblBhcnNlLmFzc2lnbikpIHtcbiAgICAgICAgICAgICAgICBpc09wZW5QYXJzZS5hc3NpZ24oc2NvcGUsIGlzT3Blbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHRTY29wZS5jb250ZW50RXhwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0dFNjb3BlLmNvbnRlbnQ7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE9ic2VydmUgdGhlIHJlbGV2YW50IGF0dHJpYnV0ZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKCdkaXNhYmxlZCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsU2hvdygpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHZhbCAmJiB0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpc09wZW5QYXJzZSkge1xuICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goaXNPcGVuUGFyc2UsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgIGlmICh0dFNjb3BlICYmICF2YWwgPT09IHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICB0b2dnbGVUb29sdGlwQmluZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBPYnNlcnZlcnMoKSB7XG4gICAgICAgICAgICAgIG9ic2VydmVycy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICAgIGlmIChjb250ZW50UGFyc2UpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChjb250ZW50UGFyc2UsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICB0dFNjb3BlLmNvbnRlbnQgPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsICYmIHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBvYnNlcnZlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVwb3NpdGlvblNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJlcG9zaXRpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvc2l0aW9uU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHRTY29wZSAmJiB0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ic2VydmVycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgYXR0cnMuJG9ic2VydmUodHRUeXBlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdHRTY29wZS5jb250ZW50ID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbCAmJiB0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgYXR0cnMuJG9ic2VydmUocHJlZml4ICsgJ1RpdGxlJywgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICB0dFNjb3BlLnRpdGxlID0gdmFsO1xuICAgICAgICAgICAgICAgICAgaWYgKHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uVG9vbHRpcCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgYXR0cnMuJG9ic2VydmUocHJlZml4ICsgJ1BsYWNlbWVudCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgICAgdHRTY29wZS5wbGFjZW1lbnQgPSB2YWwgPyB2YWwgOiBvcHRpb25zLnBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICAgIGlmICh0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiB1bnJlZ2lzdGVyT2JzZXJ2ZXJzKCkge1xuICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChvYnNlcnZlcnMsIGZ1bmN0aW9uKG9ic2VydmVyKSB7XG4gICAgICAgICAgICAgICAgICBvYnNlcnZlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG9ic2VydmVycy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGhpZGUgdG9vbHRpcHMvcG9wb3ZlcnMgZm9yIG91dHNpZGVDbGljayB0cmlnZ2VyXG4gICAgICAgICAgICBmdW5jdGlvbiBib2R5SGlkZVRvb2x0aXBCaW5kKGUpIHtcbiAgICAgICAgICAgICAgaWYgKCF0dFNjb3BlIHx8ICF0dFNjb3BlLmlzT3BlbiB8fCAhdG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIHRvb2x0aXAvcG9wb3ZlciBsaW5rIG9yIHRvb2wgdG9vbHRpcC9wb3BvdmVyIGl0c2VsZiB3ZXJlIG5vdCBjbGlja2VkXG4gICAgICAgICAgICAgIGlmICghZWxlbWVudFswXS5jb250YWlucyhlLnRhcmdldCkgJiYgIXRvb2x0aXBbMF0uY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgaGlkZVRvb2x0aXBCaW5kKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHVucmVnaXN0ZXJUcmlnZ2VycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB0cmlnZ2Vycy5zaG93LmZvckVhY2goZnVuY3Rpb24odHJpZ2dlcikge1xuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyID09PSAnb3V0c2lkZUNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5vZmYoJ2NsaWNrJywgdG9nZ2xlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50Lm9mZih0cmlnZ2VyLCBzaG93VG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5vZmYodHJpZ2dlciwgdG9nZ2xlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHRyaWdnZXJzLmhpZGUuZm9yRWFjaChmdW5jdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdvdXRzaWRlQ2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAkZG9jdW1lbnQub2ZmKCdjbGljaycsIGJvZHlIaWRlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50Lm9mZih0cmlnZ2VyLCBoaWRlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBwcmVwVHJpZ2dlcnMoKSB7XG4gICAgICAgICAgICAgIHZhciBzaG93VHJpZ2dlcnMgPSBbXSwgaGlkZVRyaWdnZXJzID0gW107XG4gICAgICAgICAgICAgIHZhciB2YWwgPSBzY29wZS4kZXZhbChhdHRyc1twcmVmaXggKyAnVHJpZ2dlciddKTtcbiAgICAgICAgICAgICAgdW5yZWdpc3RlclRyaWdnZXJzKCk7XG5cbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QodmFsKSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHZhbCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgICAgIHNob3dUcmlnZ2Vycy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgICBoaWRlVHJpZ2dlcnMucHVzaCh2YWxba2V5XSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcnMgPSB7XG4gICAgICAgICAgICAgICAgICBzaG93OiBzaG93VHJpZ2dlcnMsXG4gICAgICAgICAgICAgICAgICBoaWRlOiBoaWRlVHJpZ2dlcnNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJzID0gZ2V0VHJpZ2dlcnModmFsKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0cmlnZ2Vycy5zaG93ICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2Vycy5zaG93LmZvckVhY2goZnVuY3Rpb24odHJpZ2dlciwgaWR4KSB7XG4gICAgICAgICAgICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ291dHNpZGVDbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbignY2xpY2snLCB0b2dnbGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5vbignY2xpY2snLCBib2R5SGlkZVRvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciA9PT0gdHJpZ2dlcnMuaGlkZVtpZHhdKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQub24odHJpZ2dlciwgdG9nZ2xlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQub24odHJpZ2dlciwgc2hvd1Rvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbih0cmlnZ2Vycy5oaWRlW2lkeF0sIGhpZGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQub24oJ2tleXByZXNzJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PT0gMjcpIHtcbiAgICAgICAgICAgICAgICAgICAgICBoaWRlVG9vbHRpcEJpbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJlcFRyaWdnZXJzKCk7XG5cbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBzY29wZS4kZXZhbChhdHRyc1twcmVmaXggKyAnQW5pbWF0aW9uJ10pO1xuICAgICAgICAgICAgdHRTY29wZS5hbmltYXRpb24gPSBhbmd1bGFyLmlzRGVmaW5lZChhbmltYXRpb24pID8gISFhbmltYXRpb24gOiBvcHRpb25zLmFuaW1hdGlvbjtcblxuICAgICAgICAgICAgdmFyIGFwcGVuZFRvQm9keVZhbDtcbiAgICAgICAgICAgIHZhciBhcHBlbmRLZXkgPSBwcmVmaXggKyAnQXBwZW5kVG9Cb2R5JztcbiAgICAgICAgICAgIGlmIChhcHBlbmRLZXkgaW4gYXR0cnMgJiYgYXR0cnNbYXBwZW5kS2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGFwcGVuZFRvQm9keVZhbCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhcHBlbmRUb0JvZHlWYWwgPSBzY29wZS4kZXZhbChhdHRyc1thcHBlbmRLZXldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXBwZW5kVG9Cb2R5ID0gYW5ndWxhci5pc0RlZmluZWQoYXBwZW5kVG9Cb2R5VmFsKSA/IGFwcGVuZFRvQm9keVZhbCA6IGFwcGVuZFRvQm9keTtcblxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRvb2x0aXAgaXMgZGVzdHJveWVkIGFuZCByZW1vdmVkLlxuICAgICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uIG9uRGVzdHJveVRvb2x0aXAoKSB7XG4gICAgICAgICAgICAgIHVucmVnaXN0ZXJUcmlnZ2VycygpO1xuICAgICAgICAgICAgICByZW1vdmVUb29sdGlwKCk7XG4gICAgICAgICAgICAgIHR0U2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9XTtcbn0pXG5cbi8vIFRoaXMgaXMgbW9zdGx5IG5nSW5jbHVkZSBjb2RlIGJ1dCB3aXRoIGEgY3VzdG9tIHNjb3BlXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwVGVtcGxhdGVUcmFuc2NsdWRlJywgW1xuICAgICAgICAgJyRhbmltYXRlJywgJyRzY2UnLCAnJGNvbXBpbGUnLCAnJHRlbXBsYXRlUmVxdWVzdCcsXG5mdW5jdGlvbiAoJGFuaW1hdGUsICRzY2UsICRjb21waWxlLCAkdGVtcGxhdGVSZXF1ZXN0KSB7XG4gIHJldHVybiB7XG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHJzKSB7XG4gICAgICB2YXIgb3JpZ1Njb3BlID0gc2NvcGUuJGV2YWwoYXR0cnMudG9vbHRpcFRlbXBsYXRlVHJhbnNjbHVkZVNjb3BlKTtcblxuICAgICAgdmFyIGNoYW5nZUNvdW50ZXIgPSAwLFxuICAgICAgICBjdXJyZW50U2NvcGUsXG4gICAgICAgIHByZXZpb3VzRWxlbWVudCxcbiAgICAgICAgY3VycmVudEVsZW1lbnQ7XG5cbiAgICAgIHZhciBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnQpIHtcbiAgICAgICAgICBwcmV2aW91c0VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICBjdXJyZW50U2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICBjdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgJGFuaW1hdGUubGVhdmUoY3VycmVudEVsZW1lbnQpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IGN1cnJlbnRFbGVtZW50O1xuICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2NvcGUuJHdhdGNoKCRzY2UucGFyc2VBc1Jlc291cmNlVXJsKGF0dHJzLnVpYlRvb2x0aXBUZW1wbGF0ZVRyYW5zY2x1ZGUpLCBmdW5jdGlvbihzcmMpIHtcbiAgICAgICAgdmFyIHRoaXNDaGFuZ2VJZCA9ICsrY2hhbmdlQ291bnRlcjtcblxuICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgLy9zZXQgdGhlIDJuZCBwYXJhbSB0byB0cnVlIHRvIGlnbm9yZSB0aGUgdGVtcGxhdGUgcmVxdWVzdCBlcnJvciBzbyB0aGF0IHRoZSBpbm5lclxuICAgICAgICAgIC8vY29udGVudHMgYW5kIHNjb3BlIGNhbiBiZSBjbGVhbmVkIHVwLlxuICAgICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Qoc3JjLCB0cnVlKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgdmFyIG5ld1Njb3BlID0gb3JpZ1Njb3BlLiRuZXcoKTtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICB2YXIgY2xvbmUgPSAkY29tcGlsZSh0ZW1wbGF0ZSkobmV3U2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIGVsZW0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjbG9uZTtcblxuICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBzcmMpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCA9PT0gY2hhbmdlQ291bnRlcikge1xuICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRFcnJvcicsIHNyYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZCcsIHNyYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQpO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4vKipcbiAqIE5vdGUgdGhhdCBpdCdzIGludGVudGlvbmFsIHRoYXQgdGhlc2UgY2xhc3NlcyBhcmUgKm5vdCogYXBwbGllZCB0aHJvdWdoICRhbmltYXRlLlxuICogVGhleSBtdXN0IG5vdCBiZSBhbmltYXRlZCBhcyB0aGV5J3JlIGV4cGVjdGVkIHRvIGJlIHByZXNlbnQgb24gdGhlIHRvb2x0aXAgb25cbiAqIGluaXRpYWxpemF0aW9uLlxuICovXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwQ2xhc3NlcycsIFsnJHVpYlBvc2l0aW9uJywgZnVuY3Rpb24oJHVpYlBvc2l0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIC8vIG5lZWQgdG8gc2V0IHRoZSBwcmltYXJ5IHBvc2l0aW9uIHNvIHRoZVxuICAgICAgLy8gYXJyb3cgaGFzIHNwYWNlIGR1cmluZyBwb3NpdGlvbiBtZWFzdXJlLlxuICAgICAgLy8gdG9vbHRpcC5wb3NpdGlvblRvb2x0aXAoKVxuICAgICAgaWYgKHNjb3BlLnBsYWNlbWVudCkge1xuICAgICAgICAvLyAvLyBUaGVyZSBhcmUgbm8gdG9wLWxlZnQgZXRjLi4uIGNsYXNzZXNcbiAgICAgICAgLy8gLy8gaW4gVFdCUywgc28gd2UgbmVlZCB0aGUgcHJpbWFyeSBwb3NpdGlvbi5cbiAgICAgICAgdmFyIHBvc2l0aW9uID0gJHVpYlBvc2l0aW9uLnBhcnNlUGxhY2VtZW50KHNjb3BlLnBsYWNlbWVudCk7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MocG9zaXRpb25bMF0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2NvcGUucG9wdXBDbGFzcykge1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKHNjb3BlLnBvcHVwQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2NvcGUuYW5pbWF0aW9uKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoYXR0cnMudG9vbHRpcEFuaW1hdGlvbkNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XSlcblxuLmRpcmVjdGl2ZSgndWliVG9vbHRpcFBvcHVwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogeyBjb250ZW50OiAnQCcgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbCdcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRvb2x0aXAnLCBbICckdWliVG9vbHRpcCcsIGZ1bmN0aW9uKCR1aWJUb29sdGlwKSB7XG4gIHJldHVybiAkdWliVG9vbHRpcCgndWliVG9vbHRpcCcsICd0b29sdGlwJywgJ21vdXNlZW50ZXInKTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwVGVtcGxhdGVQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHsgY29udGVudEV4cDogJyYnLCBvcmlnaW5TY29wZTogJyYnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXRlbXBsYXRlLXBvcHVwLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwVGVtcGxhdGUnLCBbJyR1aWJUb29sdGlwJywgZnVuY3Rpb24oJHVpYlRvb2x0aXApIHtcbiAgcmV0dXJuICR1aWJUb29sdGlwKCd1aWJUb29sdGlwVGVtcGxhdGUnLCAndG9vbHRpcCcsICdtb3VzZWVudGVyJywge1xuICAgIHVzZUNvbnRlbnRFeHA6IHRydWVcbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliVG9vbHRpcEh0bWxQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHsgY29udGVudEV4cDogJyYnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtcG9wdXAuaHRtbCdcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRvb2x0aXBIdG1sJywgWyckdWliVG9vbHRpcCcsIGZ1bmN0aW9uKCR1aWJUb29sdGlwKSB7XG4gIHJldHVybiAkdWliVG9vbHRpcCgndWliVG9vbHRpcEh0bWwnLCAndG9vbHRpcCcsICdtb3VzZWVudGVyJywge1xuICAgIHVzZUNvbnRlbnRFeHA6IHRydWVcbiAgfSk7XG59XSk7XG5cbi8qKlxuICogVGhlIGZvbGxvd2luZyBmZWF0dXJlcyBhcmUgc3RpbGwgb3V0c3RhbmRpbmc6IHBvcHVwIGRlbGF5LCBhbmltYXRpb24gYXMgYVxuICogZnVuY3Rpb24sIHBsYWNlbWVudCBhcyBhIGZ1bmN0aW9uLCBpbnNpZGUsIHN1cHBvcnQgZm9yIG1vcmUgdHJpZ2dlcnMgdGhhblxuICoganVzdCBtb3VzZSBlbnRlci9sZWF2ZSwgYW5kIHNlbGVjdG9yIGRlbGVnYXRhdGlvbi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wb3BvdmVyJywgWyd1aS5ib290c3RyYXAudG9vbHRpcCddKVxuXG4uZGlyZWN0aXZlKCd1aWJQb3BvdmVyVGVtcGxhdGVQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHsgdWliVGl0bGU6ICdAJywgY29udGVudEV4cDogJyYnLCBvcmlnaW5TY29wZTogJyYnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLXRlbXBsYXRlLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJQb3BvdmVyVGVtcGxhdGUnLCBbJyR1aWJUb29sdGlwJywgZnVuY3Rpb24oJHVpYlRvb2x0aXApIHtcbiAgcmV0dXJuICR1aWJUb29sdGlwKCd1aWJQb3BvdmVyVGVtcGxhdGUnLCAncG9wb3ZlcicsICdjbGljaycsIHtcbiAgICB1c2VDb250ZW50RXhwOiB0cnVlXG4gIH0pO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlBvcG92ZXJIdG1sUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7IGNvbnRlbnRFeHA6ICcmJywgdWliVGl0bGU6ICdAJyB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci1odG1sLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJQb3BvdmVySHRtbCcsIFsnJHVpYlRvb2x0aXAnLCBmdW5jdGlvbigkdWliVG9vbHRpcCkge1xuICByZXR1cm4gJHVpYlRvb2x0aXAoJ3VpYlBvcG92ZXJIdG1sJywgJ3BvcG92ZXInLCAnY2xpY2snLCB7XG4gICAgdXNlQ29udGVudEV4cDogdHJ1ZVxuICB9KTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJQb3BvdmVyUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7IHVpYlRpdGxlOiAnQCcsIGNvbnRlbnQ6ICdAJyB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliUG9wb3ZlcicsIFsnJHVpYlRvb2x0aXAnLCBmdW5jdGlvbigkdWliVG9vbHRpcCkge1xuICByZXR1cm4gJHVpYlRvb2x0aXAoJ3VpYlBvcG92ZXInLCAncG9wb3ZlcicsICdjbGljaycpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnByb2dyZXNzYmFyJywgW10pXG5cbi5jb25zdGFudCgndWliUHJvZ3Jlc3NDb25maWcnLCB7XG4gIGFuaW1hdGU6IHRydWUsXG4gIG1heDogMTAwXG59KVxuXG4uY29udHJvbGxlcignVWliUHJvZ3Jlc3NDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJ3VpYlByb2dyZXNzQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsIHByb2dyZXNzQ29uZmlnKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIGFuaW1hdGUgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuYW5pbWF0ZSkgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuYW5pbWF0ZSkgOiBwcm9ncmVzc0NvbmZpZy5hbmltYXRlO1xuXG4gIHRoaXMuYmFycyA9IFtdO1xuICAkc2NvcGUubWF4ID0gZ2V0TWF4T3JEZWZhdWx0KCk7XG5cbiAgdGhpcy5hZGRCYXIgPSBmdW5jdGlvbihiYXIsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgaWYgKCFhbmltYXRlKSB7XG4gICAgICBlbGVtZW50LmNzcyh7J3RyYW5zaXRpb24nOiAnbm9uZSd9KTtcbiAgICB9XG5cbiAgICB0aGlzLmJhcnMucHVzaChiYXIpO1xuXG4gICAgYmFyLm1heCA9IGdldE1heE9yRGVmYXVsdCgpO1xuICAgIGJhci50aXRsZSA9IGF0dHJzICYmIGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnRpdGxlKSA/IGF0dHJzLnRpdGxlIDogJ3Byb2dyZXNzYmFyJztcblxuICAgIGJhci4kd2F0Y2goJ3ZhbHVlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGJhci5yZWNhbGN1bGF0ZVBlcmNlbnRhZ2UoKTtcbiAgICB9KTtcblxuICAgIGJhci5yZWNhbGN1bGF0ZVBlcmNlbnRhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0b3RhbFBlcmNlbnRhZ2UgPSBzZWxmLmJhcnMucmVkdWNlKGZ1bmN0aW9uKHRvdGFsLCBiYXIpIHtcbiAgICAgICAgYmFyLnBlcmNlbnQgPSArKDEwMCAqIGJhci52YWx1ZSAvIGJhci5tYXgpLnRvRml4ZWQoMik7XG4gICAgICAgIHJldHVybiB0b3RhbCArIGJhci5wZXJjZW50O1xuICAgICAgfSwgMCk7XG5cbiAgICAgIGlmICh0b3RhbFBlcmNlbnRhZ2UgPiAxMDApIHtcbiAgICAgICAgYmFyLnBlcmNlbnQgLT0gdG90YWxQZXJjZW50YWdlIC0gMTAwO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBiYXIuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgZWxlbWVudCA9IG51bGw7XG4gICAgICBzZWxmLnJlbW92ZUJhcihiYXIpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMucmVtb3ZlQmFyID0gZnVuY3Rpb24oYmFyKSB7XG4gICAgdGhpcy5iYXJzLnNwbGljZSh0aGlzLmJhcnMuaW5kZXhPZihiYXIpLCAxKTtcbiAgICB0aGlzLmJhcnMuZm9yRWFjaChmdW5jdGlvbiAoYmFyKSB7XG4gICAgICBiYXIucmVjYWxjdWxhdGVQZXJjZW50YWdlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8kYXR0cnMuJG9ic2VydmUoJ21heFBhcmFtJywgZnVuY3Rpb24obWF4UGFyYW0pIHtcbiAgJHNjb3BlLiR3YXRjaCgnbWF4UGFyYW0nLCBmdW5jdGlvbihtYXhQYXJhbSkge1xuICAgIHNlbGYuYmFycy5mb3JFYWNoKGZ1bmN0aW9uKGJhcikge1xuICAgICAgYmFyLm1heCA9IGdldE1heE9yRGVmYXVsdCgpO1xuICAgICAgYmFyLnJlY2FsY3VsYXRlUGVyY2VudGFnZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBmdW5jdGlvbiBnZXRNYXhPckRlZmF1bHQgKCkge1xuICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZCgkc2NvcGUubWF4UGFyYW0pID8gJHNjb3BlLm1heFBhcmFtIDogcHJvZ3Jlc3NDb25maWcubWF4O1xuICB9XG59XSlcblxuLmRpcmVjdGl2ZSgndWliUHJvZ3Jlc3MnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgY29udHJvbGxlcjogJ1VpYlByb2dyZXNzQ29udHJvbGxlcicsXG4gICAgcmVxdWlyZTogJ3VpYlByb2dyZXNzJyxcbiAgICBzY29wZToge1xuICAgICAgbWF4UGFyYW06ICc9P21heCdcbiAgICB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJCYXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgcmVxdWlyZTogJ151aWJQcm9ncmVzcycsXG4gICAgc2NvcGU6IHtcbiAgICAgIHZhbHVlOiAnPScsXG4gICAgICB0eXBlOiAnQCdcbiAgICB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIHByb2dyZXNzQ3RybCkge1xuICAgICAgcHJvZ3Jlc3NDdHJsLmFkZEJhcihzY29wZSwgZWxlbWVudCwgYXR0cnMpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlByb2dyZXNzYmFyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJQcm9ncmVzc0NvbnRyb2xsZXInLFxuICAgIHNjb3BlOiB7XG4gICAgICB2YWx1ZTogJz0nLFxuICAgICAgbWF4UGFyYW06ICc9P21heCcsXG4gICAgICB0eXBlOiAnQCdcbiAgICB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzYmFyLmh0bWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgcHJvZ3Jlc3NDdHJsKSB7XG4gICAgICBwcm9ncmVzc0N0cmwuYWRkQmFyKHNjb3BlLCBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudC5jaGlsZHJlbigpWzBdKSwge3RpdGxlOiBhdHRycy50aXRsZX0pO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnJhdGluZycsIFtdKVxuXG4uY29uc3RhbnQoJ3VpYlJhdGluZ0NvbmZpZycsIHtcbiAgbWF4OiA1LFxuICBzdGF0ZU9uOiBudWxsLFxuICBzdGF0ZU9mZjogbnVsbCxcbiAgZW5hYmxlUmVzZXQ6IHRydWUsXG4gIHRpdGxlczogWydvbmUnLCAndHdvJywgJ3RocmVlJywgJ2ZvdXInLCAnZml2ZSddXG59KVxuXG4uY29udHJvbGxlcignVWliUmF0aW5nQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICd1aWJSYXRpbmdDb25maWcnLCBmdW5jdGlvbigkc2NvcGUsICRhdHRycywgcmF0aW5nQ29uZmlnKSB7XG4gIHZhciBuZ01vZGVsQ3RybCA9IHsgJHNldFZpZXdWYWx1ZTogYW5ndWxhci5ub29wIH0sXG4gICAgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfKSB7XG4gICAgbmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybF87XG4gICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IHRoaXMucmVuZGVyO1xuXG4gICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlIDw8IDAgIT09IHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcblxuICAgIHRoaXMuc3RhdGVPbiA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5zdGF0ZU9uKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5zdGF0ZU9uKSA6IHJhdGluZ0NvbmZpZy5zdGF0ZU9uO1xuICAgIHRoaXMuc3RhdGVPZmYgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuc3RhdGVPZmYpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnN0YXRlT2ZmKSA6IHJhdGluZ0NvbmZpZy5zdGF0ZU9mZjtcbiAgICB0aGlzLmVuYWJsZVJlc2V0ID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmVuYWJsZVJlc2V0KSA/XG4gICAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuZW5hYmxlUmVzZXQpIDogcmF0aW5nQ29uZmlnLmVuYWJsZVJlc2V0O1xuICAgIHZhciB0bXBUaXRsZXMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMudGl0bGVzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy50aXRsZXMpIDogcmF0aW5nQ29uZmlnLnRpdGxlcztcbiAgICB0aGlzLnRpdGxlcyA9IGFuZ3VsYXIuaXNBcnJheSh0bXBUaXRsZXMpICYmIHRtcFRpdGxlcy5sZW5ndGggPiAwID9cbiAgICAgIHRtcFRpdGxlcyA6IHJhdGluZ0NvbmZpZy50aXRsZXM7XG5cbiAgICB2YXIgcmF0aW5nU3RhdGVzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnJhdGluZ1N0YXRlcykgP1xuICAgICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnJhdGluZ1N0YXRlcykgOlxuICAgICAgbmV3IEFycmF5KGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5tYXgpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLm1heCkgOiByYXRpbmdDb25maWcubWF4KTtcbiAgICAkc2NvcGUucmFuZ2UgPSB0aGlzLmJ1aWxkVGVtcGxhdGVPYmplY3RzKHJhdGluZ1N0YXRlcyk7XG4gIH07XG5cbiAgdGhpcy5idWlsZFRlbXBsYXRlT2JqZWN0cyA9IGZ1bmN0aW9uKHN0YXRlcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gc3RhdGVzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgc3RhdGVzW2ldID0gYW5ndWxhci5leHRlbmQoeyBpbmRleDogaSB9LCB7IHN0YXRlT246IHRoaXMuc3RhdGVPbiwgc3RhdGVPZmY6IHRoaXMuc3RhdGVPZmYsIHRpdGxlOiB0aGlzLmdldFRpdGxlKGkpIH0sIHN0YXRlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZXM7XG4gIH07XG5cbiAgdGhpcy5nZXRUaXRsZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID49IHRoaXMudGl0bGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50aXRsZXNbaW5kZXhdO1xuICB9O1xuXG4gICRzY29wZS5yYXRlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoISRzY29wZS5yZWFkb25seSAmJiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9ICRzY29wZS5yYW5nZS5sZW5ndGgpIHtcbiAgICAgIHZhciBuZXdWaWV3VmFsdWUgPSBzZWxmLmVuYWJsZVJlc2V0ICYmIG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPT09IHZhbHVlID8gMCA6IHZhbHVlO1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShuZXdWaWV3VmFsdWUpO1xuICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuZW50ZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICghJHNjb3BlLnJlYWRvbmx5KSB7XG4gICAgICAkc2NvcGUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgJHNjb3BlLm9uSG92ZXIoe3ZhbHVlOiB2YWx1ZX0pO1xuICB9O1xuXG4gICRzY29wZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS52YWx1ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgJHNjb3BlLm9uTGVhdmUoKTtcbiAgfTtcblxuICAkc2NvcGUub25LZXlkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgaWYgKC8oMzd8Mzh8Mzl8NDApLy50ZXN0KGV2dC53aGljaCkpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgJHNjb3BlLnJhdGUoJHNjb3BlLnZhbHVlICsgKGV2dC53aGljaCA9PT0gMzggfHwgZXZ0LndoaWNoID09PSAzOSA/IDEgOiAtMSkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS52YWx1ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgJHNjb3BlLnRpdGxlID0gc2VsZi5nZXRUaXRsZSgkc2NvcGUudmFsdWUgLSAxKTtcbiAgfTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJSYXRpbmcnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBbJ3VpYlJhdGluZycsICduZ01vZGVsJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgcmVhZG9ubHk6ICc9P3JlYWRPbmx5JyxcbiAgICAgIG9uSG92ZXI6ICcmJyxcbiAgICAgIG9uTGVhdmU6ICcmJ1xuICAgIH0sXG4gICAgY29udHJvbGxlcjogJ1VpYlJhdGluZ0NvbnRyb2xsZXInLFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3JhdGluZy9yYXRpbmcuaHRtbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIHJhdGluZ0N0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcbiAgICAgIHJhdGluZ0N0cmwuaW5pdChuZ01vZGVsQ3RybCk7XG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudGFicycsIFtdKVxuXG4uY29udHJvbGxlcignVWliVGFic2V0Q29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24gKCRzY29wZSkge1xuICB2YXIgY3RybCA9IHRoaXMsXG4gICAgb2xkSW5kZXg7XG4gIGN0cmwudGFicyA9IFtdO1xuXG4gIGN0cmwuc2VsZWN0ID0gZnVuY3Rpb24oaW5kZXgsIGV2dCkge1xuICAgIGlmICghZGVzdHJveWVkKSB7XG4gICAgICB2YXIgcHJldmlvdXNJbmRleCA9IGZpbmRUYWJJbmRleChvbGRJbmRleCk7XG4gICAgICB2YXIgcHJldmlvdXNTZWxlY3RlZCA9IGN0cmwudGFic1twcmV2aW91c0luZGV4XTtcbiAgICAgIGlmIChwcmV2aW91c1NlbGVjdGVkKSB7XG4gICAgICAgIHByZXZpb3VzU2VsZWN0ZWQudGFiLm9uRGVzZWxlY3Qoe1xuICAgICAgICAgICRldmVudDogZXZ0LFxuICAgICAgICAgICRzZWxlY3RlZEluZGV4OiBpbmRleFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGV2dCAmJiBldnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNTZWxlY3RlZC50YWIuYWN0aXZlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxlY3RlZCA9IGN0cmwudGFic1tpbmRleF07XG4gICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgc2VsZWN0ZWQudGFiLm9uU2VsZWN0KHtcbiAgICAgICAgICAkZXZlbnQ6IGV2dFxuICAgICAgICB9KTtcbiAgICAgICAgc2VsZWN0ZWQudGFiLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGN0cmwuYWN0aXZlID0gc2VsZWN0ZWQuaW5kZXg7XG4gICAgICAgIG9sZEluZGV4ID0gc2VsZWN0ZWQuaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKCFzZWxlY3RlZCAmJiBhbmd1bGFyLmlzRGVmaW5lZChvbGRJbmRleCkpIHtcbiAgICAgICAgY3RybC5hY3RpdmUgPSBudWxsO1xuICAgICAgICBvbGRJbmRleCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGN0cmwuYWRkVGFiID0gZnVuY3Rpb24gYWRkVGFiKHRhYikge1xuICAgIGN0cmwudGFicy5wdXNoKHtcbiAgICAgIHRhYjogdGFiLFxuICAgICAgaW5kZXg6IHRhYi5pbmRleFxuICAgIH0pO1xuICAgIGN0cmwudGFicy5zb3J0KGZ1bmN0aW9uKHQxLCB0Mikge1xuICAgICAgaWYgKHQxLmluZGV4ID4gdDIuaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0MS5pbmRleCA8IHQyLmluZGV4KSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG5cbiAgICBpZiAodGFiLmluZGV4ID09PSBjdHJsLmFjdGl2ZSB8fCAhYW5ndWxhci5pc0RlZmluZWQoY3RybC5hY3RpdmUpICYmIGN0cmwudGFicy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBuZXdBY3RpdmVJbmRleCA9IGZpbmRUYWJJbmRleCh0YWIuaW5kZXgpO1xuICAgICAgY3RybC5zZWxlY3QobmV3QWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgfTtcblxuICBjdHJsLnJlbW92ZVRhYiA9IGZ1bmN0aW9uIHJlbW92ZVRhYih0YWIpIHtcbiAgICB2YXIgaW5kZXg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdHJsLnRhYnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjdHJsLnRhYnNbaV0udGFiID09PSB0YWIpIHtcbiAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3RybC50YWJzW2luZGV4XS5pbmRleCA9PT0gY3RybC5hY3RpdmUpIHtcbiAgICAgIHZhciBuZXdBY3RpdmVUYWJJbmRleCA9IGluZGV4ID09PSBjdHJsLnRhYnMubGVuZ3RoIC0gMSA/XG4gICAgICAgIGluZGV4IC0gMSA6IGluZGV4ICsgMSAlIGN0cmwudGFicy5sZW5ndGg7XG4gICAgICBjdHJsLnNlbGVjdChuZXdBY3RpdmVUYWJJbmRleCk7XG4gICAgfVxuXG4gICAgY3RybC50YWJzLnNwbGljZShpbmRleCwgMSk7XG4gIH07XG5cbiAgJHNjb3BlLiR3YXRjaCgndGFic2V0LmFjdGl2ZScsIGZ1bmN0aW9uKHZhbCkge1xuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCh2YWwpICYmIHZhbCAhPT0gb2xkSW5kZXgpIHtcbiAgICAgIGN0cmwuc2VsZWN0KGZpbmRUYWJJbmRleCh2YWwpKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBkZXN0cm95ZWQ7XG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgZGVzdHJveWVkID0gdHJ1ZTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZmluZFRhYkluZGV4KGluZGV4KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdHJsLnRhYnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjdHJsLnRhYnNbaV0uaW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRhYnNldCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICBzY29wZToge30sXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgYWN0aXZlOiAnPT8nLFxuICAgICAgdHlwZTogJ0AnXG4gICAgfSxcbiAgICBjb250cm9sbGVyOiAnVWliVGFic2V0Q29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAndGFic2V0JyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWwnO1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICBzY29wZS52ZXJ0aWNhbCA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnZlcnRpY2FsKSA/XG4gICAgICAgIHNjb3BlLiRwYXJlbnQuJGV2YWwoYXR0cnMudmVydGljYWwpIDogZmFsc2U7XG4gICAgICBzY29wZS5qdXN0aWZpZWQgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5qdXN0aWZpZWQpID9cbiAgICAgICAgc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy5qdXN0aWZpZWQpIDogZmFsc2U7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliVGFiJywgWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnXnVpYlRhYnNldCcsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL3RhYnMvdGFiLmh0bWwnO1xuICAgIH0sXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICBzY29wZToge1xuICAgICAgaGVhZGluZzogJ0AnLFxuICAgICAgaW5kZXg6ICc9PycsXG4gICAgICBjbGFzc2VzOiAnQD8nLFxuICAgICAgb25TZWxlY3Q6ICcmc2VsZWN0JywgLy9UaGlzIGNhbGxiYWNrIGlzIGNhbGxlZCBpbiBjb250ZW50SGVhZGluZ1RyYW5zY2x1ZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vbmNlIGl0IGluc2VydHMgdGhlIHRhYidzIGNvbnRlbnQgaW50byB0aGUgZG9tXG4gICAgICBvbkRlc2VsZWN0OiAnJmRlc2VsZWN0J1xuICAgIH0sXG4gICAgY29udHJvbGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAvL0VtcHR5IGNvbnRyb2xsZXIgc28gb3RoZXIgZGlyZWN0aXZlcyBjYW4gcmVxdWlyZSBiZWluZyAndW5kZXInIGEgdGFiXG4gICAgfSxcbiAgICBjb250cm9sbGVyQXM6ICd0YWInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHJzLCB0YWJzZXRDdHJsLCB0cmFuc2NsdWRlKSB7XG4gICAgICBzY29wZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgaWYgKGF0dHJzLmRpc2FibGUpIHtcbiAgICAgICAgc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKGF0dHJzLmRpc2FibGUpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHNjb3BlLmRpc2FibGVkID0gISEgdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChhdHRycy5pbmRleCkpIHtcbiAgICAgICAgaWYgKHRhYnNldEN0cmwudGFicyAmJiB0YWJzZXRDdHJsLnRhYnMubGVuZ3RoKSB7XG4gICAgICAgICAgc2NvcGUuaW5kZXggPSBNYXRoLm1heC5hcHBseShudWxsLCB0YWJzZXRDdHJsLnRhYnMubWFwKGZ1bmN0aW9uKHQpIHsgcmV0dXJuIHQuaW5kZXg7IH0pKSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NvcGUuaW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKGF0dHJzLmNsYXNzZXMpKSB7XG4gICAgICAgIHNjb3BlLmNsYXNzZXMgPSAnJztcbiAgICAgIH1cblxuICAgICAgc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIGlmICghc2NvcGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWJzZXRDdHJsLnRhYnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0YWJzZXRDdHJsLnRhYnNbaV0udGFiID09PSBzY29wZSkge1xuICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRhYnNldEN0cmwuc2VsZWN0KGluZGV4LCBldnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0YWJzZXRDdHJsLmFkZFRhYihzY29wZSk7XG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRhYnNldEN0cmwucmVtb3ZlVGFiKHNjb3BlKTtcbiAgICAgIH0pO1xuXG4gICAgICAvL1dlIG5lZWQgdG8gdHJhbnNjbHVkZSBsYXRlciwgb25jZSB0aGUgY29udGVudCBjb250YWluZXIgaXMgcmVhZHkuXG4gICAgICAvL3doZW4gdGhpcyBsaW5rIGhhcHBlbnMsIHdlJ3JlIGluc2lkZSBhIHRhYiBoZWFkaW5nLlxuICAgICAgc2NvcGUuJHRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGU7XG4gICAgfVxuICB9O1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRhYkhlYWRpbmdUcmFuc2NsdWRlJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnXnVpYlRhYicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSkge1xuICAgICAgc2NvcGUuJHdhdGNoKCdoZWFkaW5nRWxlbWVudCcsIGZ1bmN0aW9uIHVwZGF0ZUhlYWRpbmdFbGVtZW50KGhlYWRpbmcpIHtcbiAgICAgICAgaWYgKGhlYWRpbmcpIHtcbiAgICAgICAgICBlbG0uaHRtbCgnJyk7XG4gICAgICAgICAgZWxtLmFwcGVuZChoZWFkaW5nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliVGFiQ29udGVudFRyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICdedWliVGFic2V0JyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycykge1xuICAgICAgdmFyIHRhYiA9IHNjb3BlLiRldmFsKGF0dHJzLnVpYlRhYkNvbnRlbnRUcmFuc2NsdWRlKS50YWI7XG5cbiAgICAgIC8vTm93IG91ciB0YWIgaXMgcmVhZHkgdG8gYmUgdHJhbnNjbHVkZWQ6IGJvdGggdGhlIHRhYiBoZWFkaW5nIGFyZWFcbiAgICAgIC8vYW5kIHRoZSB0YWIgY29udGVudCBhcmVhIGFyZSBsb2FkZWQuICBUcmFuc2NsdWRlICdlbSBib3RoLlxuICAgICAgdGFiLiR0cmFuc2NsdWRlRm4odGFiLiRwYXJlbnQsIGZ1bmN0aW9uKGNvbnRlbnRzKSB7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChjb250ZW50cywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIGlmIChpc1RhYkhlYWRpbmcobm9kZSkpIHtcbiAgICAgICAgICAgIC8vTGV0IHRhYkhlYWRpbmdUcmFuc2NsdWRlIGtub3cuXG4gICAgICAgICAgICB0YWIuaGVhZGluZ0VsZW1lbnQgPSBub2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbG0uYXBwZW5kKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gaXNUYWJIZWFkaW5nKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50YWdOYW1lICYmIChcbiAgICAgIG5vZGUuaGFzQXR0cmlidXRlKCd1aWItdGFiLWhlYWRpbmcnKSB8fFxuICAgICAgbm9kZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtdWliLXRhYi1oZWFkaW5nJykgfHxcbiAgICAgIG5vZGUuaGFzQXR0cmlidXRlKCd4LXVpYi10YWItaGVhZGluZycpIHx8XG4gICAgICBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3VpYi10YWItaGVhZGluZycgfHxcbiAgICAgIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnZGF0YS11aWItdGFiLWhlYWRpbmcnIHx8XG4gICAgICBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3gtdWliLXRhYi1oZWFkaW5nJyB8fFxuICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd1aWI6dGFiLWhlYWRpbmcnXG4gICAgKTtcbiAgfVxufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudGltZXBpY2tlcicsIFtdKVxuXG4uY29uc3RhbnQoJ3VpYlRpbWVwaWNrZXJDb25maWcnLCB7XG4gIGhvdXJTdGVwOiAxLFxuICBtaW51dGVTdGVwOiAxLFxuICBzZWNvbmRTdGVwOiAxLFxuICBzaG93TWVyaWRpYW46IHRydWUsXG4gIHNob3dTZWNvbmRzOiBmYWxzZSxcbiAgbWVyaWRpYW5zOiBudWxsLFxuICByZWFkb25seUlucHV0OiBmYWxzZSxcbiAgbW91c2V3aGVlbDogdHJ1ZSxcbiAgYXJyb3drZXlzOiB0cnVlLFxuICBzaG93U3Bpbm5lcnM6IHRydWUsXG4gIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3RpbWVwaWNrZXIvdGltZXBpY2tlci5odG1sJ1xufSlcblxuLmNvbnRyb2xsZXIoJ1VpYlRpbWVwaWNrZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRwYXJzZScsICckbG9nJywgJyRsb2NhbGUnLCAndWliVGltZXBpY2tlckNvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJHBhcnNlLCAkbG9nLCAkbG9jYWxlLCB0aW1lcGlja2VyQ29uZmlnKSB7XG4gIHZhciBob3Vyc01vZGVsQ3RybCwgbWludXRlc01vZGVsQ3RybCwgc2Vjb25kc01vZGVsQ3RybDtcbiAgdmFyIHNlbGVjdGVkID0gbmV3IERhdGUoKSxcbiAgICB3YXRjaGVycyA9IFtdLFxuICAgIG5nTW9kZWxDdHJsID0geyAkc2V0Vmlld1ZhbHVlOiBhbmd1bGFyLm5vb3AgfSwgLy8gbnVsbE1vZGVsQ3RybFxuICAgIG1lcmlkaWFucyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5tZXJpZGlhbnMpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLm1lcmlkaWFucykgOiB0aW1lcGlja2VyQ29uZmlnLm1lcmlkaWFucyB8fCAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuQU1QTVMsXG4gICAgcGFkSG91cnMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMucGFkSG91cnMpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnBhZEhvdXJzKSA6IHRydWU7XG5cbiAgJHNjb3BlLnRhYmluZGV4ID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnRhYmluZGV4KSA/ICRhdHRycy50YWJpbmRleCA6IDA7XG4gICRlbGVtZW50LnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfLCBpbnB1dHMpIHtcbiAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsXztcbiAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gdGhpcy5yZW5kZXI7XG5cbiAgICBuZ01vZGVsQ3RybC4kZm9ybWF0dGVycy51bnNoaWZ0KGZ1bmN0aW9uKG1vZGVsVmFsdWUpIHtcbiAgICAgIHJldHVybiBtb2RlbFZhbHVlID8gbmV3IERhdGUobW9kZWxWYWx1ZSkgOiBudWxsO1xuICAgIH0pO1xuXG4gICAgdmFyIGhvdXJzSW5wdXRFbCA9IGlucHV0cy5lcSgwKSxcbiAgICAgICAgbWludXRlc0lucHV0RWwgPSBpbnB1dHMuZXEoMSksXG4gICAgICAgIHNlY29uZHNJbnB1dEVsID0gaW5wdXRzLmVxKDIpO1xuXG4gICAgaG91cnNNb2RlbEN0cmwgPSBob3Vyc0lucHV0RWwuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgIG1pbnV0ZXNNb2RlbEN0cmwgPSBtaW51dGVzSW5wdXRFbC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gICAgc2Vjb25kc01vZGVsQ3RybCA9IHNlY29uZHNJbnB1dEVsLmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcblxuICAgIHZhciBtb3VzZXdoZWVsID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLm1vdXNld2hlZWwpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLm1vdXNld2hlZWwpIDogdGltZXBpY2tlckNvbmZpZy5tb3VzZXdoZWVsO1xuXG4gICAgaWYgKG1vdXNld2hlZWwpIHtcbiAgICAgIHRoaXMuc2V0dXBNb3VzZXdoZWVsRXZlbnRzKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwsIHNlY29uZHNJbnB1dEVsKTtcbiAgICB9XG5cbiAgICB2YXIgYXJyb3drZXlzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmFycm93a2V5cykgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuYXJyb3drZXlzKSA6IHRpbWVwaWNrZXJDb25maWcuYXJyb3drZXlzO1xuICAgIGlmIChhcnJvd2tleXMpIHtcbiAgICAgIHRoaXMuc2V0dXBBcnJvd2tleUV2ZW50cyhob3Vyc0lucHV0RWwsIG1pbnV0ZXNJbnB1dEVsLCBzZWNvbmRzSW5wdXRFbCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLnJlYWRvbmx5SW5wdXQgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMucmVhZG9ubHlJbnB1dCkgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMucmVhZG9ubHlJbnB1dCkgOiB0aW1lcGlja2VyQ29uZmlnLnJlYWRvbmx5SW5wdXQ7XG4gICAgdGhpcy5zZXR1cElucHV0RXZlbnRzKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwsIHNlY29uZHNJbnB1dEVsKTtcbiAgfTtcblxuICB2YXIgaG91clN0ZXAgPSB0aW1lcGlja2VyQ29uZmlnLmhvdXJTdGVwO1xuICBpZiAoJGF0dHJzLmhvdXJTdGVwKSB7XG4gICAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5ob3VyU3RlcCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBob3VyU3RlcCA9ICt2YWx1ZTtcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgbWludXRlU3RlcCA9IHRpbWVwaWNrZXJDb25maWcubWludXRlU3RlcDtcbiAgaWYgKCRhdHRycy5taW51dGVTdGVwKSB7XG4gICAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5taW51dGVTdGVwKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIG1pbnV0ZVN0ZXAgPSArdmFsdWU7XG4gICAgfSkpO1xuICB9XG5cbiAgdmFyIG1pbjtcbiAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5taW4pLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBkdCA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICBtaW4gPSBpc05hTihkdCkgPyB1bmRlZmluZWQgOiBkdDtcbiAgfSkpO1xuXG4gIHZhciBtYXg7XG4gIHdhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMubWF4KSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgZHQgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgbWF4ID0gaXNOYU4oZHQpID8gdW5kZWZpbmVkIDogZHQ7XG4gIH0pKTtcblxuICB2YXIgZGlzYWJsZWQgPSBmYWxzZTtcbiAgaWYgKCRhdHRycy5uZ0Rpc2FibGVkKSB7XG4gICAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5uZ0Rpc2FibGVkKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGRpc2FibGVkID0gdmFsdWU7XG4gICAgfSkpO1xuICB9XG5cbiAgJHNjb3BlLm5vSW5jcmVtZW50SG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5jcmVtZW50ZWRTZWxlY3RlZCA9IGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIGhvdXJTdGVwICogNjApO1xuICAgIHJldHVybiBkaXNhYmxlZCB8fCBpbmNyZW1lbnRlZFNlbGVjdGVkID4gbWF4IHx8XG4gICAgICBpbmNyZW1lbnRlZFNlbGVjdGVkIDwgc2VsZWN0ZWQgJiYgaW5jcmVtZW50ZWRTZWxlY3RlZCA8IG1pbjtcbiAgfTtcblxuICAkc2NvcGUubm9EZWNyZW1lbnRIb3VycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWNyZW1lbnRlZFNlbGVjdGVkID0gYWRkTWludXRlcyhzZWxlY3RlZCwgLWhvdXJTdGVwICogNjApO1xuICAgIHJldHVybiBkaXNhYmxlZCB8fCBkZWNyZW1lbnRlZFNlbGVjdGVkIDwgbWluIHx8XG4gICAgICBkZWNyZW1lbnRlZFNlbGVjdGVkID4gc2VsZWN0ZWQgJiYgZGVjcmVtZW50ZWRTZWxlY3RlZCA+IG1heDtcbiAgfTtcblxuICAkc2NvcGUubm9JbmNyZW1lbnRNaW51dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluY3JlbWVudGVkU2VsZWN0ZWQgPSBhZGRNaW51dGVzKHNlbGVjdGVkLCBtaW51dGVTdGVwKTtcbiAgICByZXR1cm4gZGlzYWJsZWQgfHwgaW5jcmVtZW50ZWRTZWxlY3RlZCA+IG1heCB8fFxuICAgICAgaW5jcmVtZW50ZWRTZWxlY3RlZCA8IHNlbGVjdGVkICYmIGluY3JlbWVudGVkU2VsZWN0ZWQgPCBtaW47XG4gIH07XG5cbiAgJHNjb3BlLm5vRGVjcmVtZW50TWludXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWNyZW1lbnRlZFNlbGVjdGVkID0gYWRkTWludXRlcyhzZWxlY3RlZCwgLW1pbnV0ZVN0ZXApO1xuICAgIHJldHVybiBkaXNhYmxlZCB8fCBkZWNyZW1lbnRlZFNlbGVjdGVkIDwgbWluIHx8XG4gICAgICBkZWNyZW1lbnRlZFNlbGVjdGVkID4gc2VsZWN0ZWQgJiYgZGVjcmVtZW50ZWRTZWxlY3RlZCA+IG1heDtcbiAgfTtcblxuICAkc2NvcGUubm9JbmNyZW1lbnRTZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluY3JlbWVudGVkU2VsZWN0ZWQgPSBhZGRTZWNvbmRzKHNlbGVjdGVkLCBzZWNvbmRTdGVwKTtcbiAgICByZXR1cm4gZGlzYWJsZWQgfHwgaW5jcmVtZW50ZWRTZWxlY3RlZCA+IG1heCB8fFxuICAgICAgaW5jcmVtZW50ZWRTZWxlY3RlZCA8IHNlbGVjdGVkICYmIGluY3JlbWVudGVkU2VsZWN0ZWQgPCBtaW47XG4gIH07XG5cbiAgJHNjb3BlLm5vRGVjcmVtZW50U2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWNyZW1lbnRlZFNlbGVjdGVkID0gYWRkU2Vjb25kcyhzZWxlY3RlZCwgLXNlY29uZFN0ZXApO1xuICAgIHJldHVybiBkaXNhYmxlZCB8fCBkZWNyZW1lbnRlZFNlbGVjdGVkIDwgbWluIHx8XG4gICAgICBkZWNyZW1lbnRlZFNlbGVjdGVkID4gc2VsZWN0ZWQgJiYgZGVjcmVtZW50ZWRTZWxlY3RlZCA+IG1heDtcbiAgfTtcblxuICAkc2NvcGUubm9Ub2dnbGVNZXJpZGlhbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxlY3RlZC5nZXRIb3VycygpIDwgMTIpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlZCB8fCBhZGRNaW51dGVzKHNlbGVjdGVkLCAxMiAqIDYwKSA+IG1heDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlzYWJsZWQgfHwgYWRkTWludXRlcyhzZWxlY3RlZCwgLTEyICogNjApIDwgbWluO1xuICB9O1xuXG4gIHZhciBzZWNvbmRTdGVwID0gdGltZXBpY2tlckNvbmZpZy5zZWNvbmRTdGVwO1xuICBpZiAoJGF0dHJzLnNlY29uZFN0ZXApIHtcbiAgICB3YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLnNlY29uZFN0ZXApLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgc2Vjb25kU3RlcCA9ICt2YWx1ZTtcbiAgICB9KSk7XG4gIH1cblxuICAkc2NvcGUuc2hvd1NlY29uZHMgPSB0aW1lcGlja2VyQ29uZmlnLnNob3dTZWNvbmRzO1xuICBpZiAoJGF0dHJzLnNob3dTZWNvbmRzKSB7XG4gICAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5zaG93U2Vjb25kcyksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAkc2NvcGUuc2hvd1NlY29uZHMgPSAhIXZhbHVlO1xuICAgIH0pKTtcbiAgfVxuXG4gIC8vIDEySCAvIDI0SCBtb2RlXG4gICRzY29wZS5zaG93TWVyaWRpYW4gPSB0aW1lcGlja2VyQ29uZmlnLnNob3dNZXJpZGlhbjtcbiAgaWYgKCRhdHRycy5zaG93TWVyaWRpYW4pIHtcbiAgICB3YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLnNob3dNZXJpZGlhbiksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAkc2NvcGUuc2hvd01lcmlkaWFuID0gISF2YWx1ZTtcblxuICAgICAgaWYgKG5nTW9kZWxDdHJsLiRlcnJvci50aW1lKSB7XG4gICAgICAgIC8vIEV2YWx1YXRlIGZyb20gdGVtcGxhdGVcbiAgICAgICAgdmFyIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKSwgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKTtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGhvdXJzKSAmJiBhbmd1bGFyLmlzRGVmaW5lZChtaW51dGVzKSkge1xuICAgICAgICAgIHNlbGVjdGVkLnNldEhvdXJzKGhvdXJzKTtcbiAgICAgICAgICByZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZVRlbXBsYXRlKCk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG5cbiAgLy8gR2V0ICRzY29wZS5ob3VycyBpbiAyNEggbW9kZSBpZiB2YWxpZFxuICBmdW5jdGlvbiBnZXRIb3Vyc0Zyb21UZW1wbGF0ZSgpIHtcbiAgICB2YXIgaG91cnMgPSArJHNjb3BlLmhvdXJzO1xuICAgIHZhciB2YWxpZCA9ICRzY29wZS5zaG93TWVyaWRpYW4gPyBob3VycyA+IDAgJiYgaG91cnMgPCAxMyA6XG4gICAgICBob3VycyA+PSAwICYmIGhvdXJzIDwgMjQ7XG4gICAgaWYgKCF2YWxpZCB8fCAkc2NvcGUuaG91cnMgPT09ICcnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgkc2NvcGUuc2hvd01lcmlkaWFuKSB7XG4gICAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICAgIGhvdXJzID0gMDtcbiAgICAgIH1cbiAgICAgIGlmICgkc2NvcGUubWVyaWRpYW4gPT09IG1lcmlkaWFuc1sxXSkge1xuICAgICAgICBob3VycyA9IGhvdXJzICsgMTI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBob3VycztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKSB7XG4gICAgdmFyIG1pbnV0ZXMgPSArJHNjb3BlLm1pbnV0ZXM7XG4gICAgdmFyIHZhbGlkID0gbWludXRlcyA+PSAwICYmIG1pbnV0ZXMgPCA2MDtcbiAgICBpZiAoIXZhbGlkIHx8ICRzY29wZS5taW51dGVzID09PSAnJykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG1pbnV0ZXM7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTZWNvbmRzRnJvbVRlbXBsYXRlKCkge1xuICAgIHZhciBzZWNvbmRzID0gKyRzY29wZS5zZWNvbmRzO1xuICAgIHJldHVybiBzZWNvbmRzID49IDAgJiYgc2Vjb25kcyA8IDYwID8gc2Vjb25kcyA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhZCh2YWx1ZSwgbm9QYWQpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQodmFsdWUpICYmIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoIDwgMiAmJiAhbm9QYWQgP1xuICAgICAgJzAnICsgdmFsdWUgOiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgLy8gUmVzcG9uZCBvbiBtb3VzZXdoZWVsIHNwaW5cbiAgdGhpcy5zZXR1cE1vdXNld2hlZWxFdmVudHMgPSBmdW5jdGlvbihob3Vyc0lucHV0RWwsIG1pbnV0ZXNJbnB1dEVsLCBzZWNvbmRzSW5wdXRFbCkge1xuICAgIHZhciBpc1Njcm9sbGluZ1VwID0gZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkge1xuICAgICAgICBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICAgICAgfVxuICAgICAgLy9waWNrIGNvcnJlY3QgZGVsdGEgdmFyaWFibGUgZGVwZW5kaW5nIG9uIGV2ZW50XG4gICAgICB2YXIgZGVsdGEgPSBlLndoZWVsRGVsdGEgPyBlLndoZWVsRGVsdGEgOiAtZS5kZWx0YVk7XG4gICAgICByZXR1cm4gZS5kZXRhaWwgfHwgZGVsdGEgPiAwO1xuICAgIH07XG5cbiAgICBob3Vyc0lucHV0RWwuYmluZCgnbW91c2V3aGVlbCB3aGVlbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseShpc1Njcm9sbGluZ1VwKGUpID8gJHNjb3BlLmluY3JlbWVudEhvdXJzKCkgOiAkc2NvcGUuZGVjcmVtZW50SG91cnMoKSk7XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICBtaW51dGVzSW5wdXRFbC5iaW5kKCdtb3VzZXdoZWVsIHdoZWVsJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGlzU2Nyb2xsaW5nVXAoZSkgPyAkc2NvcGUuaW5jcmVtZW50TWludXRlcygpIDogJHNjb3BlLmRlY3JlbWVudE1pbnV0ZXMoKSk7XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICAgc2Vjb25kc0lucHV0RWwuYmluZCgnbW91c2V3aGVlbCB3aGVlbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseShpc1Njcm9sbGluZ1VwKGUpID8gJHNjb3BlLmluY3JlbWVudFNlY29uZHMoKSA6ICRzY29wZS5kZWNyZW1lbnRTZWNvbmRzKCkpO1xuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIFJlc3BvbmQgb24gdXAvZG93biBhcnJvd2tleXNcbiAgdGhpcy5zZXR1cEFycm93a2V5RXZlbnRzID0gZnVuY3Rpb24oaG91cnNJbnB1dEVsLCBtaW51dGVzSW5wdXRFbCwgc2Vjb25kc0lucHV0RWwpIHtcbiAgICBob3Vyc0lucHV0RWwuYmluZCgna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgaWYgKGUud2hpY2ggPT09IDM4KSB7IC8vIHVwXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRzY29wZS5pbmNyZW1lbnRIb3VycygpO1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09PSA0MCkgeyAvLyBkb3duXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRzY29wZS5kZWNyZW1lbnRIb3VycygpO1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbWludXRlc0lucHV0RWwuYmluZCgna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgaWYgKGUud2hpY2ggPT09IDM4KSB7IC8vIHVwXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRzY29wZS5pbmNyZW1lbnRNaW51dGVzKCk7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT09IDQwKSB7IC8vIGRvd25cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgJHNjb3BlLmRlY3JlbWVudE1pbnV0ZXMoKTtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNlY29uZHNJbnB1dEVsLmJpbmQoJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgIGlmIChlLndoaWNoID09PSAzOCkgeyAvLyB1cFxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAkc2NvcGUuaW5jcmVtZW50U2Vjb25kcygpO1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09PSA0MCkgeyAvLyBkb3duXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRzY29wZS5kZWNyZW1lbnRTZWNvbmRzKCk7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5zZXR1cElucHV0RXZlbnRzID0gZnVuY3Rpb24oaG91cnNJbnB1dEVsLCBtaW51dGVzSW5wdXRFbCwgc2Vjb25kc0lucHV0RWwpIHtcbiAgICBpZiAoJHNjb3BlLnJlYWRvbmx5SW5wdXQpIHtcbiAgICAgICRzY29wZS51cGRhdGVIb3VycyA9IGFuZ3VsYXIubm9vcDtcbiAgICAgICRzY29wZS51cGRhdGVNaW51dGVzID0gYW5ndWxhci5ub29wO1xuICAgICAgJHNjb3BlLnVwZGF0ZVNlY29uZHMgPSBhbmd1bGFyLm5vb3A7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGludmFsaWRhdGUgPSBmdW5jdGlvbihpbnZhbGlkSG91cnMsIGludmFsaWRNaW51dGVzLCBpbnZhbGlkU2Vjb25kcykge1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShudWxsKTtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgndGltZScsIGZhbHNlKTtcbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpbnZhbGlkSG91cnMpKSB7XG4gICAgICAgICRzY29wZS5pbnZhbGlkSG91cnMgPSBpbnZhbGlkSG91cnM7XG4gICAgICAgIGlmIChob3Vyc01vZGVsQ3RybCkge1xuICAgICAgICAgIGhvdXJzTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnaG91cnMnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGludmFsaWRNaW51dGVzKSkge1xuICAgICAgICAkc2NvcGUuaW52YWxpZE1pbnV0ZXMgPSBpbnZhbGlkTWludXRlcztcbiAgICAgICAgaWYgKG1pbnV0ZXNNb2RlbEN0cmwpIHtcbiAgICAgICAgICBtaW51dGVzTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnbWludXRlcycsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoaW52YWxpZFNlY29uZHMpKSB7XG4gICAgICAgICRzY29wZS5pbnZhbGlkU2Vjb25kcyA9IGludmFsaWRTZWNvbmRzO1xuICAgICAgICBpZiAoc2Vjb25kc01vZGVsQ3RybCkge1xuICAgICAgICAgIHNlY29uZHNNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdzZWNvbmRzJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS51cGRhdGVIb3VycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKSxcbiAgICAgICAgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKTtcblxuICAgICAgbmdNb2RlbEN0cmwuJHNldERpcnR5KCk7XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChob3VycykgJiYgYW5ndWxhci5pc0RlZmluZWQobWludXRlcykpIHtcbiAgICAgICAgc2VsZWN0ZWQuc2V0SG91cnMoaG91cnMpO1xuICAgICAgICBzZWxlY3RlZC5zZXRNaW51dGVzKG1pbnV0ZXMpO1xuICAgICAgICBpZiAoc2VsZWN0ZWQgPCBtaW4gfHwgc2VsZWN0ZWQgPiBtYXgpIHtcbiAgICAgICAgICBpbnZhbGlkYXRlKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZnJlc2goJ2gnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52YWxpZGF0ZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaG91cnNJbnB1dEVsLmJpbmQoJ2JsdXInLCBmdW5jdGlvbihlKSB7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0VG91Y2hlZCgpO1xuICAgICAgaWYgKG1vZGVsSXNFbXB0eSgpKSB7XG4gICAgICAgIG1ha2VWYWxpZCgpO1xuICAgICAgfSBlbHNlIGlmICgkc2NvcGUuaG91cnMgPT09IG51bGwgfHwgJHNjb3BlLmhvdXJzID09PSAnJykge1xuICAgICAgICBpbnZhbGlkYXRlKHRydWUpO1xuICAgICAgfSBlbHNlIGlmICghJHNjb3BlLmludmFsaWRIb3VycyAmJiAkc2NvcGUuaG91cnMgPCAxMCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5ob3VycyA9IHBhZCgkc2NvcGUuaG91cnMsICFwYWRIb3Vycyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLnVwZGF0ZU1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBtaW51dGVzID0gZ2V0TWludXRlc0Zyb21UZW1wbGF0ZSgpLFxuICAgICAgICBob3VycyA9IGdldEhvdXJzRnJvbVRlbXBsYXRlKCk7XG5cbiAgICAgIG5nTW9kZWxDdHJsLiRzZXREaXJ0eSgpO1xuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQobWludXRlcykgJiYgYW5ndWxhci5pc0RlZmluZWQoaG91cnMpKSB7XG4gICAgICAgIHNlbGVjdGVkLnNldEhvdXJzKGhvdXJzKTtcbiAgICAgICAgc2VsZWN0ZWQuc2V0TWludXRlcyhtaW51dGVzKTtcbiAgICAgICAgaWYgKHNlbGVjdGVkIDwgbWluIHx8IHNlbGVjdGVkID4gbWF4KSB7XG4gICAgICAgICAgaW52YWxpZGF0ZSh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZnJlc2goJ20nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52YWxpZGF0ZSh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBtaW51dGVzSW5wdXRFbC5iaW5kKCdibHVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFRvdWNoZWQoKTtcbiAgICAgIGlmIChtb2RlbElzRW1wdHkoKSkge1xuICAgICAgICBtYWtlVmFsaWQoKTtcbiAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLm1pbnV0ZXMgPT09IG51bGwpIHtcbiAgICAgICAgaW52YWxpZGF0ZSh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICghJHNjb3BlLmludmFsaWRNaW51dGVzICYmICRzY29wZS5taW51dGVzIDwgMTApIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUubWludXRlcyA9IHBhZCgkc2NvcGUubWludXRlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLnVwZGF0ZVNlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWNvbmRzID0gZ2V0U2Vjb25kc0Zyb21UZW1wbGF0ZSgpO1xuXG4gICAgICBuZ01vZGVsQ3RybC4kc2V0RGlydHkoKTtcblxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHNlY29uZHMpKSB7XG4gICAgICAgIHNlbGVjdGVkLnNldFNlY29uZHMoc2Vjb25kcyk7XG4gICAgICAgIHJlZnJlc2goJ3MnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmFsaWRhdGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWNvbmRzSW5wdXRFbC5iaW5kKCdibHVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKG1vZGVsSXNFbXB0eSgpKSB7XG4gICAgICAgIG1ha2VWYWxpZCgpO1xuICAgICAgfSBlbHNlIGlmICghJHNjb3BlLmludmFsaWRTZWNvbmRzICYmICRzY29wZS5zZWNvbmRzIDwgMTApIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseSggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLnNlY29uZHMgPSBwYWQoJHNjb3BlLnNlY29uZHMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9O1xuXG4gIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGUgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuXG4gICAgaWYgKGlzTmFOKGRhdGUpKSB7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3RpbWUnLCBmYWxzZSk7XG4gICAgICAkbG9nLmVycm9yKCdUaW1lcGlja2VyIGRpcmVjdGl2ZTogXCJuZy1tb2RlbFwiIHZhbHVlIG11c3QgYmUgYSBEYXRlIG9iamVjdCwgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDAxLjAxLjE5NzAgb3IgYSBzdHJpbmcgcmVwcmVzZW50aW5nIGFuIFJGQzI4MjIgb3IgSVNPIDg2MDEgZGF0ZS4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgc2VsZWN0ZWQgPSBkYXRlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZWN0ZWQgPCBtaW4gfHwgc2VsZWN0ZWQgPiBtYXgpIHtcbiAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCd0aW1lJywgZmFsc2UpO1xuICAgICAgICAkc2NvcGUuaW52YWxpZEhvdXJzID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLmludmFsaWRNaW51dGVzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1ha2VWYWxpZCgpO1xuICAgICAgfVxuICAgICAgdXBkYXRlVGVtcGxhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ2FsbCBpbnRlcm5hbGx5IHdoZW4gd2Uga25vdyB0aGF0IG1vZGVsIGlzIHZhbGlkLlxuICBmdW5jdGlvbiByZWZyZXNoKGtleWJvYXJkQ2hhbmdlKSB7XG4gICAgbWFrZVZhbGlkKCk7XG4gICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShuZXcgRGF0ZShzZWxlY3RlZCkpO1xuICAgIHVwZGF0ZVRlbXBsYXRlKGtleWJvYXJkQ2hhbmdlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VWYWxpZCgpIHtcbiAgICBpZiAoaG91cnNNb2RlbEN0cmwpIHtcbiAgICAgIGhvdXJzTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnaG91cnMnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAobWludXRlc01vZGVsQ3RybCkge1xuICAgICAgbWludXRlc01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ21pbnV0ZXMnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vjb25kc01vZGVsQ3RybCkge1xuICAgICAgc2Vjb25kc01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3NlY29uZHMnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3RpbWUnLCB0cnVlKTtcbiAgICAkc2NvcGUuaW52YWxpZEhvdXJzID0gZmFsc2U7XG4gICAgJHNjb3BlLmludmFsaWRNaW51dGVzID0gZmFsc2U7XG4gICAgJHNjb3BlLmludmFsaWRTZWNvbmRzID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVUZW1wbGF0ZShrZXlib2FyZENoYW5nZSkge1xuICAgIGlmICghbmdNb2RlbEN0cmwuJG1vZGVsVmFsdWUpIHtcbiAgICAgICRzY29wZS5ob3VycyA9IG51bGw7XG4gICAgICAkc2NvcGUubWludXRlcyA9IG51bGw7XG4gICAgICAkc2NvcGUuc2Vjb25kcyA9IG51bGw7XG4gICAgICAkc2NvcGUubWVyaWRpYW4gPSBtZXJpZGlhbnNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBob3VycyA9IHNlbGVjdGVkLmdldEhvdXJzKCksXG4gICAgICAgIG1pbnV0ZXMgPSBzZWxlY3RlZC5nZXRNaW51dGVzKCksXG4gICAgICAgIHNlY29uZHMgPSBzZWxlY3RlZC5nZXRTZWNvbmRzKCk7XG5cbiAgICAgIGlmICgkc2NvcGUuc2hvd01lcmlkaWFuKSB7XG4gICAgICAgIGhvdXJzID0gaG91cnMgPT09IDAgfHwgaG91cnMgPT09IDEyID8gMTIgOiBob3VycyAlIDEyOyAvLyBDb252ZXJ0IDI0IHRvIDEyIGhvdXIgc3lzdGVtXG4gICAgICB9XG5cbiAgICAgICRzY29wZS5ob3VycyA9IGtleWJvYXJkQ2hhbmdlID09PSAnaCcgPyBob3VycyA6IHBhZChob3VycywgIXBhZEhvdXJzKTtcbiAgICAgIGlmIChrZXlib2FyZENoYW5nZSAhPT0gJ20nKSB7XG4gICAgICAgICRzY29wZS5taW51dGVzID0gcGFkKG1pbnV0ZXMpO1xuICAgICAgfVxuICAgICAgJHNjb3BlLm1lcmlkaWFuID0gc2VsZWN0ZWQuZ2V0SG91cnMoKSA8IDEyID8gbWVyaWRpYW5zWzBdIDogbWVyaWRpYW5zWzFdO1xuXG4gICAgICBpZiAoa2V5Ym9hcmRDaGFuZ2UgIT09ICdzJykge1xuICAgICAgICAkc2NvcGUuc2Vjb25kcyA9IHBhZChzZWNvbmRzKTtcbiAgICAgIH1cbiAgICAgICRzY29wZS5tZXJpZGlhbiA9IHNlbGVjdGVkLmdldEhvdXJzKCkgPCAxMiA/IG1lcmlkaWFuc1swXSA6IG1lcmlkaWFuc1sxXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRTZWNvbmRzVG9TZWxlY3RlZChzZWNvbmRzKSB7XG4gICAgc2VsZWN0ZWQgPSBhZGRTZWNvbmRzKHNlbGVjdGVkLCBzZWNvbmRzKTtcbiAgICByZWZyZXNoKCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRNaW51dGVzKHNlbGVjdGVkLCBtaW51dGVzKSB7XG4gICAgcmV0dXJuIGFkZFNlY29uZHMoc2VsZWN0ZWQsIG1pbnV0ZXMqNjApO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkU2Vjb25kcyhkYXRlLCBzZWNvbmRzKSB7XG4gICAgdmFyIGR0ID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgKyBzZWNvbmRzICogMTAwMCk7XG4gICAgdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICBuZXdEYXRlLnNldEhvdXJzKGR0LmdldEhvdXJzKCksIGR0LmdldE1pbnV0ZXMoKSwgZHQuZ2V0U2Vjb25kcygpKTtcbiAgICByZXR1cm4gbmV3RGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vZGVsSXNFbXB0eSgpIHtcbiAgICByZXR1cm4gKCRzY29wZS5ob3VycyA9PT0gbnVsbCB8fCAkc2NvcGUuaG91cnMgPT09ICcnKSAmJlxuICAgICAgKCRzY29wZS5taW51dGVzID09PSBudWxsIHx8ICRzY29wZS5taW51dGVzID09PSAnJykgJiZcbiAgICAgICghJHNjb3BlLnNob3dTZWNvbmRzIHx8ICRzY29wZS5zaG93U2Vjb25kcyAmJiAoJHNjb3BlLnNlY29uZHMgPT09IG51bGwgfHwgJHNjb3BlLnNlY29uZHMgPT09ICcnKSk7XG4gIH1cblxuICAkc2NvcGUuc2hvd1NwaW5uZXJzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnNob3dTcGlubmVycykgP1xuICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5zaG93U3Bpbm5lcnMpIDogdGltZXBpY2tlckNvbmZpZy5zaG93U3Bpbm5lcnM7XG5cbiAgJHNjb3BlLmluY3JlbWVudEhvdXJzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9JbmNyZW1lbnRIb3VycygpKSB7XG4gICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZChob3VyU3RlcCAqIDYwICogNjApO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuZGVjcmVtZW50SG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0RlY3JlbWVudEhvdXJzKCkpIHtcbiAgICAgIGFkZFNlY29uZHNUb1NlbGVjdGVkKC1ob3VyU3RlcCAqIDYwICogNjApO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuaW5jcmVtZW50TWludXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghJHNjb3BlLm5vSW5jcmVtZW50TWludXRlcygpKSB7XG4gICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZChtaW51dGVTdGVwICogNjApO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuZGVjcmVtZW50TWludXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghJHNjb3BlLm5vRGVjcmVtZW50TWludXRlcygpKSB7XG4gICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZCgtbWludXRlU3RlcCAqIDYwKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmluY3JlbWVudFNlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0luY3JlbWVudFNlY29uZHMoKSkge1xuICAgICAgYWRkU2Vjb25kc1RvU2VsZWN0ZWQoc2Vjb25kU3RlcCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5kZWNyZW1lbnRTZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9EZWNyZW1lbnRTZWNvbmRzKCkpIHtcbiAgICAgIGFkZFNlY29uZHNUb1NlbGVjdGVkKC1zZWNvbmRTdGVwKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLnRvZ2dsZU1lcmlkaWFuID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1pbnV0ZXMgPSBnZXRNaW51dGVzRnJvbVRlbXBsYXRlKCksXG4gICAgICAgIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKTtcblxuICAgIGlmICghJHNjb3BlLm5vVG9nZ2xlTWVyaWRpYW4oKSkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG1pbnV0ZXMpICYmIGFuZ3VsYXIuaXNEZWZpbmVkKGhvdXJzKSkge1xuICAgICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZCgxMiAqIDYwICogKHNlbGVjdGVkLmdldEhvdXJzKCkgPCAxMiA/IDYwIDogLTYwKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkc2NvcGUubWVyaWRpYW4gPSAkc2NvcGUubWVyaWRpYW4gPT09IG1lcmlkaWFuc1swXSA/IG1lcmlkaWFuc1sxXSA6IG1lcmlkaWFuc1swXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmJsdXIgPSBmdW5jdGlvbigpIHtcbiAgICBuZ01vZGVsQ3RybC4kc2V0VG91Y2hlZCgpO1xuICB9O1xuXG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgd2hpbGUgKHdhdGNoZXJzLmxlbmd0aCkge1xuICAgICAgd2F0Y2hlcnMuc2hpZnQoKSgpO1xuICAgIH1cbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliVGltZXBpY2tlcicsIFsndWliVGltZXBpY2tlckNvbmZpZycsIGZ1bmN0aW9uKHVpYlRpbWVwaWNrZXJDb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBbJ3VpYlRpbWVwaWNrZXInLCAnP15uZ01vZGVsJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnVWliVGltZXBpY2tlckNvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ3RpbWVwaWNrZXInLFxuICAgIHNjb3BlOiB7fSxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCB1aWJUaW1lcGlja2VyQ29uZmlnLnRlbXBsYXRlVXJsO1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIHRpbWVwaWNrZXJDdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGlmIChuZ01vZGVsQ3RybCkge1xuICAgICAgICB0aW1lcGlja2VyQ3RybC5pbml0KG5nTW9kZWxDdHJsLCBlbGVtZW50LmZpbmQoJ2lucHV0JykpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50eXBlYWhlYWQnLCBbJ3VpLmJvb3RzdHJhcC5kZWJvdW5jZScsICd1aS5ib290c3RyYXAucG9zaXRpb24nXSlcblxuLyoqXG4gKiBBIGhlbHBlciBzZXJ2aWNlIHRoYXQgY2FuIHBhcnNlIHR5cGVhaGVhZCdzIHN5bnRheCAoc3RyaW5nIHByb3ZpZGVkIGJ5IHVzZXJzKVxuICogRXh0cmFjdGVkIHRvIGEgc2VwYXJhdGUgc2VydmljZSBmb3IgZWFzZSBvZiB1bml0IHRlc3RpbmdcbiAqL1xuICAuZmFjdG9yeSgndWliVHlwZWFoZWFkUGFyc2VyJywgWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAwMDAwMDExMTExMTExMDAwMDAwMDAwMDAwMDIyMjIyMjIyMDAwMDAwMDAwMDAwMDAwMDMzMzMzMzMzMzMzMzMzMzAwMDAwMDAwMDAwNDQ0NDQ0NDQwMDBcbiAgICB2YXIgVFlQRUFIRUFEX1JFR0VYUCA9IC9eXFxzKihbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFtcXCRcXHddW1xcJFxcd1xcZF0qKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pJC87XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBpbnB1dC5tYXRjaChUWVBFQUhFQURfUkVHRVhQKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdFeHBlY3RlZCB0eXBlYWhlYWQgc3BlY2lmaWNhdGlvbiBpbiBmb3JtIG9mIFwiX21vZGVsVmFsdWVfIChhcyBfbGFiZWxfKT8gZm9yIF9pdGVtXyBpbiBfY29sbGVjdGlvbl9cIicgK1xuICAgICAgICAgICAgICAnIGJ1dCBnb3QgXCInICsgaW5wdXQgKyAnXCIuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGl0ZW1OYW1lOiBtYXRjaFszXSxcbiAgICAgICAgICBzb3VyY2U6ICRwYXJzZShtYXRjaFs0XSksXG4gICAgICAgICAgdmlld01hcHBlcjogJHBhcnNlKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSxcbiAgICAgICAgICBtb2RlbE1hcHBlcjogJHBhcnNlKG1hdGNoWzFdKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1dKVxuXG4gIC5jb250cm9sbGVyKCdVaWJUeXBlYWhlYWRDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRjb21waWxlJywgJyRwYXJzZScsICckcScsICckdGltZW91dCcsICckZG9jdW1lbnQnLCAnJHdpbmRvdycsICckcm9vdFNjb3BlJywgJyQkZGVib3VuY2UnLCAnJHVpYlBvc2l0aW9uJywgJ3VpYlR5cGVhaGVhZFBhcnNlcicsXG4gICAgZnVuY3Rpb24ob3JpZ2luYWxTY29wZSwgZWxlbWVudCwgYXR0cnMsICRjb21waWxlLCAkcGFyc2UsICRxLCAkdGltZW91dCwgJGRvY3VtZW50LCAkd2luZG93LCAkcm9vdFNjb3BlLCAkJGRlYm91bmNlLCAkcG9zaXRpb24sIHR5cGVhaGVhZFBhcnNlcikge1xuICAgIHZhciBIT1RfS0VZUyA9IFs5LCAxMywgMjcsIDM4LCA0MF07XG4gICAgdmFyIGV2ZW50RGVib3VuY2VUaW1lID0gMjAwO1xuICAgIHZhciBtb2RlbEN0cmwsIG5nTW9kZWxPcHRpb25zO1xuICAgIC8vU1VQUE9SVEVEIEFUVFJJQlVURVMgKE9QVElPTlMpXG5cbiAgICAvL21pbmltYWwgbm8gb2YgY2hhcmFjdGVycyB0aGF0IG5lZWRzIHRvIGJlIGVudGVyZWQgYmVmb3JlIHR5cGVhaGVhZCBraWNrcy1pblxuICAgIHZhciBtaW5MZW5ndGggPSBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZE1pbkxlbmd0aCk7XG4gICAgaWYgKCFtaW5MZW5ndGggJiYgbWluTGVuZ3RoICE9PSAwKSB7XG4gICAgICBtaW5MZW5ndGggPSAxO1xuICAgIH1cblxuICAgIG9yaWdpbmFsU2NvcGUuJHdhdGNoKGF0dHJzLnR5cGVhaGVhZE1pbkxlbmd0aCwgZnVuY3Rpb24gKG5ld1ZhbCkge1xuICAgICAgICBtaW5MZW5ndGggPSAhbmV3VmFsICYmIG5ld1ZhbCAhPT0gMCA/IDEgOiBuZXdWYWw7XG4gICAgfSk7XG5cbiAgICAvL21pbmltYWwgd2FpdCB0aW1lIGFmdGVyIGxhc3QgY2hhcmFjdGVyIHR5cGVkIGJlZm9yZSB0eXBlYWhlYWQga2lja3MtaW5cbiAgICB2YXIgd2FpdFRpbWUgPSBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZFdhaXRNcykgfHwgMDtcblxuICAgIC8vc2hvdWxkIGl0IHJlc3RyaWN0IG1vZGVsIHZhbHVlcyB0byB0aGUgb25lcyBzZWxlY3RlZCBmcm9tIHRoZSBwb3B1cCBvbmx5P1xuICAgIHZhciBpc0VkaXRhYmxlID0gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRFZGl0YWJsZSkgIT09IGZhbHNlO1xuICAgIG9yaWdpbmFsU2NvcGUuJHdhdGNoKGF0dHJzLnR5cGVhaGVhZEVkaXRhYmxlLCBmdW5jdGlvbiAobmV3VmFsKSB7XG4gICAgICBpc0VkaXRhYmxlID0gbmV3VmFsICE9PSBmYWxzZTtcbiAgICB9KTtcblxuICAgIC8vYmluZGluZyB0byBhIHZhcmlhYmxlIHRoYXQgaW5kaWNhdGVzIGlmIG1hdGNoZXMgYXJlIGJlaW5nIHJldHJpZXZlZCBhc3luY2hyb25vdXNseVxuICAgIHZhciBpc0xvYWRpbmdTZXR0ZXIgPSAkcGFyc2UoYXR0cnMudHlwZWFoZWFkTG9hZGluZykuYXNzaWduIHx8IGFuZ3VsYXIubm9vcDtcblxuICAgIC8vYSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgaWYgYW4gZXZlbnQgc2hvdWxkIGNhdXNlIHNlbGVjdGlvblxuICAgIHZhciBpc1NlbGVjdEV2ZW50ID0gYXR0cnMudHlwZWFoZWFkU2hvdWxkU2VsZWN0ID8gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZFNob3VsZFNlbGVjdCkgOiBmdW5jdGlvbihzY29wZSwgdmFscykge1xuICAgICAgdmFyIGV2dCA9IHZhbHMuJGV2ZW50O1xuICAgICAgcmV0dXJuIGV2dC53aGljaCA9PT0gMTMgfHwgZXZ0LndoaWNoID09PSA5O1xuICAgIH07XG5cbiAgICAvL2EgY2FsbGJhY2sgZXhlY3V0ZWQgd2hlbiBhIG1hdGNoIGlzIHNlbGVjdGVkXG4gICAgdmFyIG9uU2VsZWN0Q2FsbGJhY2sgPSAkcGFyc2UoYXR0cnMudHlwZWFoZWFkT25TZWxlY3QpO1xuXG4gICAgLy9zaG91bGQgaXQgc2VsZWN0IGhpZ2hsaWdodGVkIHBvcHVwIHZhbHVlIHdoZW4gbG9zaW5nIGZvY3VzP1xuICAgIHZhciBpc1NlbGVjdE9uQmx1ciA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnR5cGVhaGVhZFNlbGVjdE9uQmx1cikgPyBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZFNlbGVjdE9uQmx1cikgOiBmYWxzZTtcblxuICAgIC8vYmluZGluZyB0byBhIHZhcmlhYmxlIHRoYXQgaW5kaWNhdGVzIGlmIHRoZXJlIHdlcmUgbm8gcmVzdWx0cyBhZnRlciB0aGUgcXVlcnkgaXMgY29tcGxldGVkXG4gICAgdmFyIGlzTm9SZXN1bHRzU2V0dGVyID0gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZE5vUmVzdWx0cykuYXNzaWduIHx8IGFuZ3VsYXIubm9vcDtcblxuICAgIHZhciBpbnB1dEZvcm1hdHRlciA9IGF0dHJzLnR5cGVhaGVhZElucHV0Rm9ybWF0dGVyID8gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZElucHV0Rm9ybWF0dGVyKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBhcHBlbmRUb0JvZHkgPSBhdHRycy50eXBlYWhlYWRBcHBlbmRUb0JvZHkgPyBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZEFwcGVuZFRvQm9keSkgOiBmYWxzZTtcblxuICAgIHZhciBhcHBlbmRUbyA9IGF0dHJzLnR5cGVhaGVhZEFwcGVuZFRvID9cbiAgICAgIG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkQXBwZW5kVG8pIDogbnVsbDtcblxuICAgIHZhciBmb2N1c0ZpcnN0ID0gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRGb2N1c0ZpcnN0KSAhPT0gZmFsc2U7XG5cbiAgICAvL0lmIGlucHV0IG1hdGNoZXMgYW4gaXRlbSBvZiB0aGUgbGlzdCBleGFjdGx5LCBzZWxlY3QgaXQgYXV0b21hdGljYWxseVxuICAgIHZhciBzZWxlY3RPbkV4YWN0ID0gYXR0cnMudHlwZWFoZWFkU2VsZWN0T25FeGFjdCA/IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkU2VsZWN0T25FeGFjdCkgOiBmYWxzZTtcblxuICAgIC8vYmluZGluZyB0byBhIHZhcmlhYmxlIHRoYXQgaW5kaWNhdGVzIGlmIGRyb3Bkb3duIGlzIG9wZW5cbiAgICB2YXIgaXNPcGVuU2V0dGVyID0gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZElzT3BlbikuYXNzaWduIHx8IGFuZ3VsYXIubm9vcDtcblxuICAgIHZhciBzaG93SGludCA9IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkU2hvd0hpbnQpIHx8IGZhbHNlO1xuXG4gICAgLy9JTlRFUk5BTCBWQVJJQUJMRVNcblxuICAgIC8vbW9kZWwgc2V0dGVyIGV4ZWN1dGVkIHVwb24gbWF0Y2ggc2VsZWN0aW9uXG4gICAgdmFyIHBhcnNlZE1vZGVsID0gJHBhcnNlKGF0dHJzLm5nTW9kZWwpO1xuICAgIHZhciBpbnZva2VNb2RlbFNldHRlciA9ICRwYXJzZShhdHRycy5uZ01vZGVsICsgJygkJCRwKScpO1xuICAgIHZhciAkc2V0TW9kZWxWYWx1ZSA9IGZ1bmN0aW9uKHNjb3BlLCBuZXdWYWx1ZSkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihwYXJzZWRNb2RlbChvcmlnaW5hbFNjb3BlKSkgJiZcbiAgICAgICAgbmdNb2RlbE9wdGlvbnMgJiYgbmdNb2RlbE9wdGlvbnMuJG9wdGlvbnMgJiYgbmdNb2RlbE9wdGlvbnMuJG9wdGlvbnMuZ2V0dGVyU2V0dGVyKSB7XG4gICAgICAgIHJldHVybiBpbnZva2VNb2RlbFNldHRlcihzY29wZSwgeyQkJHA6IG5ld1ZhbHVlfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJzZWRNb2RlbC5hc3NpZ24oc2NvcGUsIG5ld1ZhbHVlKTtcbiAgICB9O1xuXG4gICAgLy9leHByZXNzaW9ucyB1c2VkIGJ5IHR5cGVhaGVhZFxuICAgIHZhciBwYXJzZXJSZXN1bHQgPSB0eXBlYWhlYWRQYXJzZXIucGFyc2UoYXR0cnMudWliVHlwZWFoZWFkKTtcblxuICAgIHZhciBoYXNGb2N1cztcblxuICAgIC8vVXNlZCB0byBhdm9pZCBidWcgaW4gaU9TIHdlYnZpZXcgd2hlcmUgaU9TIGtleWJvYXJkIGRvZXMgbm90IGZpcmVcbiAgICAvL21vdXNlZG93biAmIG1vdXNldXAgZXZlbnRzXG4gICAgLy9Jc3N1ZSAjMzY5OVxuICAgIHZhciBzZWxlY3RlZDtcblxuICAgIC8vY3JlYXRlIGEgY2hpbGQgc2NvcGUgZm9yIHRoZSB0eXBlYWhlYWQgZGlyZWN0aXZlIHNvIHdlIGFyZSBub3QgcG9sbHV0aW5nIG9yaWdpbmFsIHNjb3BlXG4gICAgLy93aXRoIHR5cGVhaGVhZC1zcGVjaWZpYyBkYXRhIChtYXRjaGVzLCBxdWVyeSBldGMuKVxuICAgIHZhciBzY29wZSA9IG9yaWdpbmFsU2NvcGUuJG5ldygpO1xuICAgIHZhciBvZmZEZXN0cm95ID0gb3JpZ2luYWxTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICBzY29wZS4kZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBvZmZEZXN0cm95KTtcblxuICAgIC8vIFdBSS1BUklBXG4gICAgdmFyIHBvcHVwSWQgPSAndHlwZWFoZWFkLScgKyBzY29wZS4kaWQgKyAnLScgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCk7XG4gICAgZWxlbWVudC5hdHRyKHtcbiAgICAgICdhcmlhLWF1dG9jb21wbGV0ZSc6ICdsaXN0JyxcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAnYXJpYS1vd25zJzogcG9wdXBJZFxuICAgIH0pO1xuXG4gICAgdmFyIGlucHV0c0NvbnRhaW5lciwgaGludElucHV0RWxlbTtcbiAgICAvL2FkZCByZWFkLW9ubHkgaW5wdXQgdG8gc2hvdyBoaW50XG4gICAgaWYgKHNob3dIaW50KSB7XG4gICAgICBpbnB1dHNDb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXY+PC9kaXY+Jyk7XG4gICAgICBpbnB1dHNDb250YWluZXIuY3NzKCdwb3NpdGlvbicsICdyZWxhdGl2ZScpO1xuICAgICAgZWxlbWVudC5hZnRlcihpbnB1dHNDb250YWluZXIpO1xuICAgICAgaGludElucHV0RWxlbSA9IGVsZW1lbnQuY2xvbmUoKTtcbiAgICAgIGhpbnRJbnB1dEVsZW0uYXR0cigncGxhY2Vob2xkZXInLCAnJyk7XG4gICAgICBoaW50SW5wdXRFbGVtLmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICBoaW50SW5wdXRFbGVtLnZhbCgnJyk7XG4gICAgICBoaW50SW5wdXRFbGVtLmNzcyh7XG4gICAgICAgICdwb3NpdGlvbic6ICdhYnNvbHV0ZScsXG4gICAgICAgICd0b3AnOiAnMHB4JyxcbiAgICAgICAgJ2xlZnQnOiAnMHB4JyxcbiAgICAgICAgJ2JvcmRlci1jb2xvcic6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICdib3gtc2hhZG93JzogJ25vbmUnLFxuICAgICAgICAnb3BhY2l0eSc6IDEsXG4gICAgICAgICdiYWNrZ3JvdW5kJzogJ25vbmUgMCUgMCUgLyBhdXRvIHJlcGVhdCBzY3JvbGwgcGFkZGluZy1ib3ggYm9yZGVyLWJveCByZ2IoMjU1LCAyNTUsIDI1NSknLFxuICAgICAgICAnY29sb3InOiAnIzk5OSdcbiAgICAgIH0pO1xuICAgICAgZWxlbWVudC5jc3Moe1xuICAgICAgICAncG9zaXRpb24nOiAncmVsYXRpdmUnLFxuICAgICAgICAndmVydGljYWwtYWxpZ24nOiAndG9wJyxcbiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAndHJhbnNwYXJlbnQnXG4gICAgICB9KTtcblxuICAgICAgaWYgKGhpbnRJbnB1dEVsZW0uYXR0cignaWQnKSkge1xuICAgICAgICBoaW50SW5wdXRFbGVtLnJlbW92ZUF0dHIoJ2lkJyk7IC8vIHJlbW92ZSBkdXBsaWNhdGUgaWQgaWYgcHJlc2VudC5cbiAgICAgIH1cbiAgICAgIGlucHV0c0NvbnRhaW5lci5hcHBlbmQoaGludElucHV0RWxlbSk7XG4gICAgICBoaW50SW5wdXRFbGVtLmFmdGVyKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vcG9wLXVwIGVsZW1lbnQgdXNlZCB0byBkaXNwbGF5IG1hdGNoZXNcbiAgICB2YXIgcG9wVXBFbCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiB1aWItdHlwZWFoZWFkLXBvcHVwPjwvZGl2PicpO1xuICAgIHBvcFVwRWwuYXR0cih7XG4gICAgICBpZDogcG9wdXBJZCxcbiAgICAgIG1hdGNoZXM6ICdtYXRjaGVzJyxcbiAgICAgIGFjdGl2ZTogJ2FjdGl2ZUlkeCcsXG4gICAgICBzZWxlY3Q6ICdzZWxlY3QoYWN0aXZlSWR4LCBldnQpJyxcbiAgICAgICdtb3ZlLWluLXByb2dyZXNzJzogJ21vdmVJblByb2dyZXNzJyxcbiAgICAgIHF1ZXJ5OiAncXVlcnknLFxuICAgICAgcG9zaXRpb246ICdwb3NpdGlvbicsXG4gICAgICAnYXNzaWduLWlzLW9wZW4nOiAnYXNzaWduSXNPcGVuKGlzT3BlbiknLFxuICAgICAgZGVib3VuY2U6ICdkZWJvdW5jZVVwZGF0ZSdcbiAgICB9KTtcbiAgICAvL2N1c3RvbSBpdGVtIHRlbXBsYXRlXG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnR5cGVhaGVhZFRlbXBsYXRlVXJsKSkge1xuICAgICAgcG9wVXBFbC5hdHRyKCd0ZW1wbGF0ZS11cmwnLCBhdHRycy50eXBlYWhlYWRUZW1wbGF0ZVVybCk7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnR5cGVhaGVhZFBvcHVwVGVtcGxhdGVVcmwpKSB7XG4gICAgICBwb3BVcEVsLmF0dHIoJ3BvcHVwLXRlbXBsYXRlLXVybCcsIGF0dHJzLnR5cGVhaGVhZFBvcHVwVGVtcGxhdGVVcmwpO1xuICAgIH1cblxuICAgIHZhciByZXNldEhpbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzaG93SGludCkge1xuICAgICAgICBoaW50SW5wdXRFbGVtLnZhbCgnJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNldE1hdGNoZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNjb3BlLm1hdGNoZXMgPSBbXTtcbiAgICAgIHNjb3BlLmFjdGl2ZUlkeCA9IC0xO1xuICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgcmVzZXRIaW50KCk7XG4gICAgfTtcblxuICAgIHZhciBnZXRNYXRjaElkID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiBwb3B1cElkICsgJy1vcHRpb24tJyArIGluZGV4O1xuICAgIH07XG5cbiAgICAvLyBJbmRpY2F0ZSB0aGF0IHRoZSBzcGVjaWZpZWQgbWF0Y2ggaXMgdGhlIGFjdGl2ZSAocHJlLXNlbGVjdGVkKSBpdGVtIGluIHRoZSBsaXN0IG93bmVkIGJ5IHRoaXMgdHlwZWFoZWFkLlxuICAgIC8vIFRoaXMgYXR0cmlidXRlIGlzIGFkZGVkIG9yIHJlbW92ZWQgYXV0b21hdGljYWxseSB3aGVuIHRoZSBgYWN0aXZlSWR4YCBjaGFuZ2VzLlxuICAgIHNjb3BlLiR3YXRjaCgnYWN0aXZlSWR4JywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuYXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgZ2V0TWF0Y2hJZChpbmRleCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGlucHV0SXNFeGFjdE1hdGNoID0gZnVuY3Rpb24oaW5wdXRWYWx1ZSwgaW5kZXgpIHtcbiAgICAgIGlmIChzY29wZS5tYXRjaGVzLmxlbmd0aCA+IGluZGV4ICYmIGlucHV0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0VmFsdWUudG9VcHBlckNhc2UoKSA9PT0gc2NvcGUubWF0Y2hlc1tpbmRleF0ubGFiZWwudG9VcHBlckNhc2UoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0TWF0Y2hlc0FzeW5jID0gZnVuY3Rpb24oaW5wdXRWYWx1ZSwgZXZ0KSB7XG4gICAgICB2YXIgbG9jYWxzID0geyR2aWV3VmFsdWU6IGlucHV0VmFsdWV9O1xuICAgICAgaXNMb2FkaW5nU2V0dGVyKG9yaWdpbmFsU2NvcGUsIHRydWUpO1xuICAgICAgaXNOb1Jlc3VsdHNTZXR0ZXIob3JpZ2luYWxTY29wZSwgZmFsc2UpO1xuICAgICAgJHEud2hlbihwYXJzZXJSZXN1bHQuc291cmNlKG9yaWdpbmFsU2NvcGUsIGxvY2FscykpLnRoZW4oZnVuY3Rpb24obWF0Y2hlcykge1xuICAgICAgICAvL2l0IG1pZ2h0IGhhcHBlbiB0aGF0IHNldmVyYWwgYXN5bmMgcXVlcmllcyB3ZXJlIGluIHByb2dyZXNzIGlmIGEgdXNlciB3ZXJlIHR5cGluZyBmYXN0XG4gICAgICAgIC8vYnV0IHdlIGFyZSBpbnRlcmVzdGVkIG9ubHkgaW4gcmVzcG9uc2VzIHRoYXQgY29ycmVzcG9uZCB0byB0aGUgY3VycmVudCB2aWV3IHZhbHVlXG4gICAgICAgIHZhciBvbkN1cnJlbnRSZXF1ZXN0ID0gaW5wdXRWYWx1ZSA9PT0gbW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgICAgIGlmIChvbkN1cnJlbnRSZXF1ZXN0ICYmIGhhc0ZvY3VzKSB7XG4gICAgICAgICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzY29wZS5hY3RpdmVJZHggPSBmb2N1c0ZpcnN0ID8gMCA6IC0xO1xuICAgICAgICAgICAgaXNOb1Jlc3VsdHNTZXR0ZXIob3JpZ2luYWxTY29wZSwgZmFsc2UpO1xuICAgICAgICAgICAgc2NvcGUubWF0Y2hlcy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICAvL3RyYW5zZm9ybSBsYWJlbHNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBsb2NhbHNbcGFyc2VyUmVzdWx0Lml0ZW1OYW1lXSA9IG1hdGNoZXNbaV07XG4gICAgICAgICAgICAgIHNjb3BlLm1hdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IGdldE1hdGNoSWQoaSksXG4gICAgICAgICAgICAgICAgbGFiZWw6IHBhcnNlclJlc3VsdC52aWV3TWFwcGVyKHNjb3BlLCBsb2NhbHMpLFxuICAgICAgICAgICAgICAgIG1vZGVsOiBtYXRjaGVzW2ldXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY29wZS5xdWVyeSA9IGlucHV0VmFsdWU7XG4gICAgICAgICAgICAvL3Bvc2l0aW9uIHBvcC11cCB3aXRoIG1hdGNoZXMgLSB3ZSBuZWVkIHRvIHJlLWNhbGN1bGF0ZSBpdHMgcG9zaXRpb24gZWFjaCB0aW1lIHdlIGFyZSBvcGVuaW5nIGEgd2luZG93XG4gICAgICAgICAgICAvL3dpdGggbWF0Y2hlcyBhcyBhIHBvcC11cCBtaWdodCBiZSBhYnNvbHV0ZS1wb3NpdGlvbmVkIGFuZCBwb3NpdGlvbiBvZiBhbiBpbnB1dCBtaWdodCBoYXZlIGNoYW5nZWQgb24gYSBwYWdlXG4gICAgICAgICAgICAvL2R1ZSB0byBvdGhlciBlbGVtZW50cyBiZWluZyByZW5kZXJlZFxuICAgICAgICAgICAgcmVjYWxjdWxhdGVQb3NpdGlvbigpO1xuXG4gICAgICAgICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcblxuICAgICAgICAgICAgLy9TZWxlY3QgdGhlIHNpbmdsZSByZW1haW5pbmcgb3B0aW9uIGlmIHVzZXIgaW5wdXQgbWF0Y2hlc1xuICAgICAgICAgICAgaWYgKHNlbGVjdE9uRXhhY3QgJiYgc2NvcGUubWF0Y2hlcy5sZW5ndGggPT09IDEgJiYgaW5wdXRJc0V4YWN0TWF0Y2goaW5wdXRWYWx1ZSwgMCkpIHtcbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoc2NvcGUuZGVib3VuY2VVcGRhdGUpIHx8IGFuZ3VsYXIuaXNPYmplY3Qoc2NvcGUuZGVib3VuY2VVcGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgJCRkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdCgwLCBldnQpO1xuICAgICAgICAgICAgICAgIH0sIGFuZ3VsYXIuaXNOdW1iZXIoc2NvcGUuZGVib3VuY2VVcGRhdGUpID8gc2NvcGUuZGVib3VuY2VVcGRhdGUgOiBzY29wZS5kZWJvdW5jZVVwZGF0ZVsnZGVmYXVsdCddKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3QoMCwgZXZ0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2hvd0hpbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGZpcnN0TGFiZWwgPSBzY29wZS5tYXRjaGVzWzBdLmxhYmVsO1xuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhpbnB1dFZhbHVlKSAmJlxuICAgICAgICAgICAgICAgIGlucHV0VmFsdWUubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgIGZpcnN0TGFiZWwuc2xpY2UoMCwgaW5wdXRWYWx1ZS5sZW5ndGgpLnRvVXBwZXJDYXNlKCkgPT09IGlucHV0VmFsdWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIGhpbnRJbnB1dEVsZW0udmFsKGlucHV0VmFsdWUgKyBmaXJzdExhYmVsLnNsaWNlKGlucHV0VmFsdWUubGVuZ3RoKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGludElucHV0RWxlbS52YWwoJycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICAgICAgaXNOb1Jlc3VsdHNTZXR0ZXIob3JpZ2luYWxTY29wZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvbkN1cnJlbnRSZXF1ZXN0KSB7XG4gICAgICAgICAgaXNMb2FkaW5nU2V0dGVyKG9yaWdpbmFsU2NvcGUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICBpc0xvYWRpbmdTZXR0ZXIob3JpZ2luYWxTY29wZSwgZmFsc2UpO1xuICAgICAgICBpc05vUmVzdWx0c1NldHRlcihvcmlnaW5hbFNjb3BlLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBiaW5kIGV2ZW50cyBvbmx5IGlmIGFwcGVuZFRvQm9keSBwYXJhbXMgZXhpc3QgLSBwZXJmb3JtYW5jZSBmZWF0dXJlXG4gICAgaWYgKGFwcGVuZFRvQm9keSkge1xuICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9uKCdyZXNpemUnLCBmaXJlUmVjYWxjdWxhdGluZyk7XG4gICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLm9uKCdzY3JvbGwnLCBmaXJlUmVjYWxjdWxhdGluZyk7XG4gICAgfVxuXG4gICAgLy8gRGVjbGFyZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIG91dHNpZGUgcmVjYWxjdWxhdGluZyBmb3JcbiAgICAvLyBwcm9wZXIgZGVib3VuY2luZ1xuICAgIHZhciBkZWJvdW5jZWRSZWNhbGN1bGF0ZSA9ICQkZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBwb3B1cCBpcyB2aXNpYmxlXG4gICAgICBpZiAoc2NvcGUubWF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVjYWxjdWxhdGVQb3NpdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBzY29wZS5tb3ZlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIH0sIGV2ZW50RGVib3VuY2VUaW1lKTtcblxuICAgIC8vIERlZmF1bHQgcHJvZ3Jlc3MgdHlwZVxuICAgIHNjb3BlLm1vdmVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBmaXJlUmVjYWxjdWxhdGluZygpIHtcbiAgICAgIGlmICghc2NvcGUubW92ZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgc2NvcGUubW92ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICB9XG5cbiAgICAgIGRlYm91bmNlZFJlY2FsY3VsYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gcmVjYWxjdWxhdGUgYWN0dWFsIHBvc2l0aW9uIGFuZCBzZXQgbmV3IHZhbHVlcyB0byBzY29wZVxuICAgIC8vIGFmdGVyIGRpZ2VzdCBsb29wIGlzIHBvcHVwIGluIHJpZ2h0IHBvc2l0aW9uXG4gICAgZnVuY3Rpb24gcmVjYWxjdWxhdGVQb3NpdGlvbigpIHtcbiAgICAgIHNjb3BlLnBvc2l0aW9uID0gYXBwZW5kVG9Cb2R5ID8gJHBvc2l0aW9uLm9mZnNldChlbGVtZW50KSA6ICRwb3NpdGlvbi5wb3NpdGlvbihlbGVtZW50KTtcbiAgICAgIHNjb3BlLnBvc2l0aW9uLnRvcCArPSBlbGVtZW50LnByb3AoJ29mZnNldEhlaWdodCcpO1xuICAgIH1cblxuICAgIC8vd2UgbmVlZCB0byBwcm9wYWdhdGUgdXNlcidzIHF1ZXJ5IHNvIHdlIGNhbiBoaWdsaWdodCBtYXRjaGVzXG4gICAgc2NvcGUucXVlcnkgPSB1bmRlZmluZWQ7XG5cbiAgICAvL0RlY2xhcmUgdGhlIHRpbWVvdXQgcHJvbWlzZSB2YXIgb3V0c2lkZSB0aGUgZnVuY3Rpb24gc2NvcGUgc28gdGhhdCBzdGFja2VkIGNhbGxzIGNhbiBiZSBjYW5jZWxsZWQgbGF0ZXJcbiAgICB2YXIgdGltZW91dFByb21pc2U7XG5cbiAgICB2YXIgc2NoZWR1bGVTZWFyY2hXaXRoVGltZW91dCA9IGZ1bmN0aW9uKGlucHV0VmFsdWUpIHtcbiAgICAgIHRpbWVvdXRQcm9taXNlID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGdldE1hdGNoZXNBc3luYyhpbnB1dFZhbHVlKTtcbiAgICAgIH0sIHdhaXRUaW1lKTtcbiAgICB9O1xuXG4gICAgdmFyIGNhbmNlbFByZXZpb3VzVGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRpbWVvdXRQcm9taXNlKSB7XG4gICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lb3V0UHJvbWlzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJlc2V0TWF0Y2hlcygpO1xuXG4gICAgc2NvcGUuYXNzaWduSXNPcGVuID0gZnVuY3Rpb24gKGlzT3Blbikge1xuICAgICAgaXNPcGVuU2V0dGVyKG9yaWdpbmFsU2NvcGUsIGlzT3Blbik7XG4gICAgfTtcblxuICAgIHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uKGFjdGl2ZUlkeCwgZXZ0KSB7XG4gICAgICAvL2NhbGxlZCBmcm9tIHdpdGhpbiB0aGUgJGRpZ2VzdCgpIGN5Y2xlXG4gICAgICB2YXIgbG9jYWxzID0ge307XG4gICAgICB2YXIgbW9kZWwsIGl0ZW07XG5cbiAgICAgIHNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIGxvY2Fsc1twYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gaXRlbSA9IHNjb3BlLm1hdGNoZXNbYWN0aXZlSWR4XS5tb2RlbDtcbiAgICAgIG1vZGVsID0gcGFyc2VyUmVzdWx0Lm1vZGVsTWFwcGVyKG9yaWdpbmFsU2NvcGUsIGxvY2Fscyk7XG4gICAgICAkc2V0TW9kZWxWYWx1ZShvcmlnaW5hbFNjb3BlLCBtb2RlbCk7XG4gICAgICBtb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdlZGl0YWJsZScsIHRydWUpO1xuICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgncGFyc2UnLCB0cnVlKTtcblxuICAgICAgb25TZWxlY3RDYWxsYmFjayhvcmlnaW5hbFNjb3BlLCB7XG4gICAgICAgICRpdGVtOiBpdGVtLFxuICAgICAgICAkbW9kZWw6IG1vZGVsLFxuICAgICAgICAkbGFiZWw6IHBhcnNlclJlc3VsdC52aWV3TWFwcGVyKG9yaWdpbmFsU2NvcGUsIGxvY2FscyksXG4gICAgICAgICRldmVudDogZXZ0XG4gICAgICB9KTtcblxuICAgICAgcmVzZXRNYXRjaGVzKCk7XG5cbiAgICAgIC8vcmV0dXJuIGZvY3VzIHRvIHRoZSBpbnB1dCBlbGVtZW50IGlmIGEgbWF0Y2ggd2FzIHNlbGVjdGVkIHZpYSBhIG1vdXNlIGNsaWNrIGV2ZW50XG4gICAgICAvLyB1c2UgdGltZW91dCB0byBhdm9pZCAkcm9vdFNjb3BlOmlucHJvZyBlcnJvclxuICAgICAgaWYgKHNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZEZvY3VzT25TZWxlY3QpICE9PSBmYWxzZSkge1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHsgZWxlbWVudFswXS5mb2N1cygpOyB9LCAwLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vYmluZCBrZXlib2FyZCBldmVudHM6IGFycm93cyB1cCgzOCkgLyBkb3duKDQwKSwgZW50ZXIoMTMpIGFuZCB0YWIoOSksIGVzYygyNylcbiAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAvL3R5cGVhaGVhZCBpcyBvcGVuIGFuZCBhbiBcImludGVyZXN0aW5nXCIga2V5IHdhcyBwcmVzc2VkXG4gICAgICBpZiAoc2NvcGUubWF0Y2hlcy5sZW5ndGggPT09IDAgfHwgSE9UX0tFWVMuaW5kZXhPZihldnQud2hpY2gpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG91bGRTZWxlY3QgPSBpc1NlbGVjdEV2ZW50KG9yaWdpbmFsU2NvcGUsIHskZXZlbnQ6IGV2dH0pO1xuXG4gICAgICAvKipcbiAgICAgICAqIGlmIHRoZXJlJ3Mgbm90aGluZyBzZWxlY3RlZCAoaS5lLiBmb2N1c0ZpcnN0KSBhbmQgZW50ZXIgb3IgdGFiIGlzIGhpdFxuICAgICAgICogb3JcbiAgICAgICAqIHNoaWZ0ICsgdGFiIGlzIHByZXNzZWQgdG8gYnJpbmcgZm9jdXMgdG8gdGhlIHByZXZpb3VzIGVsZW1lbnRcbiAgICAgICAqIHRoZW4gY2xlYXIgdGhlIHJlc3VsdHNcbiAgICAgICAqL1xuICAgICAgaWYgKHNjb3BlLmFjdGl2ZUlkeCA9PT0gLTEgJiYgc2hvdWxkU2VsZWN0IHx8IGV2dC53aGljaCA9PT0gOSAmJiAhIWV2dC5zaGlmdEtleSkge1xuICAgICAgICByZXNldE1hdGNoZXMoKTtcbiAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIHRhcmdldDtcbiAgICAgIHN3aXRjaCAoZXZ0LndoaWNoKSB7XG4gICAgICAgIGNhc2UgMjc6IC8vIGVzY2FwZVxuICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICAgIG9yaWdpbmFsU2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM4OiAvLyB1cCBhcnJvd1xuICAgICAgICAgIHNjb3BlLmFjdGl2ZUlkeCA9IChzY29wZS5hY3RpdmVJZHggPiAwID8gc2NvcGUuYWN0aXZlSWR4IDogc2NvcGUubWF0Y2hlcy5sZW5ndGgpIC0gMTtcbiAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgdGFyZ2V0ID0gcG9wVXBFbFswXS5xdWVyeVNlbGVjdG9yQWxsKCcudWliLXR5cGVhaGVhZC1tYXRjaCcpW3Njb3BlLmFjdGl2ZUlkeF07XG4gICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuc2Nyb2xsVG9wID0gdGFyZ2V0Lm9mZnNldFRvcDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0MDogLy8gZG93biBhcnJvd1xuICAgICAgICAgIHNjb3BlLmFjdGl2ZUlkeCA9IChzY29wZS5hY3RpdmVJZHggKyAxKSAlIHNjb3BlLm1hdGNoZXMubGVuZ3RoO1xuICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICB0YXJnZXQgPSBwb3BVcEVsWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJy51aWItdHlwZWFoZWFkLW1hdGNoJylbc2NvcGUuYWN0aXZlSWR4XTtcbiAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5zY3JvbGxUb3AgPSB0YXJnZXQub2Zmc2V0VG9wO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChzaG91bGRTZWxlY3QpIHtcbiAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoc2NvcGUuZGVib3VuY2VVcGRhdGUpIHx8IGFuZ3VsYXIuaXNPYmplY3Qoc2NvcGUuZGVib3VuY2VVcGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgJCRkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdChzY29wZS5hY3RpdmVJZHgsIGV2dCk7XG4gICAgICAgICAgICAgICAgfSwgYW5ndWxhci5pc051bWJlcihzY29wZS5kZWJvdW5jZVVwZGF0ZSkgPyBzY29wZS5kZWJvdW5jZVVwZGF0ZSA6IHNjb3BlLmRlYm91bmNlVXBkYXRlWydkZWZhdWx0J10pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdChzY29wZS5hY3RpdmVJZHgsIGV2dCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGVsZW1lbnQuYmluZCgnZm9jdXMnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBoYXNGb2N1cyA9IHRydWU7XG4gICAgICBpZiAobWluTGVuZ3RoID09PSAwICYmICFtb2RlbEN0cmwuJHZpZXdWYWx1ZSkge1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBnZXRNYXRjaGVzQXN5bmMobW9kZWxDdHJsLiR2aWV3VmFsdWUsIGV2dCk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZWxlbWVudC5iaW5kKCdibHVyJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBpZiAoaXNTZWxlY3RPbkJsdXIgJiYgc2NvcGUubWF0Y2hlcy5sZW5ndGggJiYgc2NvcGUuYWN0aXZlSWR4ICE9PSAtMSAmJiAhc2VsZWN0ZWQpIHtcbiAgICAgICAgc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3Qoc2NvcGUuZGVib3VuY2VVcGRhdGUpICYmIGFuZ3VsYXIuaXNOdW1iZXIoc2NvcGUuZGVib3VuY2VVcGRhdGUuYmx1cikpIHtcbiAgICAgICAgICAgICQkZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHNjb3BlLnNlbGVjdChzY29wZS5hY3RpdmVJZHgsIGV2dCk7XG4gICAgICAgICAgICB9LCBzY29wZS5kZWJvdW5jZVVwZGF0ZS5ibHVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2NvcGUuc2VsZWN0KHNjb3BlLmFjdGl2ZUlkeCwgZXZ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0VkaXRhYmxlICYmIG1vZGVsQ3RybC4kZXJyb3IuZWRpdGFibGUpIHtcbiAgICAgICAgbW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoKTtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIFJlc2V0IHZhbGlkaXR5IGFzIHdlIGFyZSBjbGVhcmluZ1xuICAgICAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2VkaXRhYmxlJywgdHJ1ZSk7XG4gICAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgncGFyc2UnLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsZW1lbnQudmFsKCcnKTtcbiAgICAgIH1cbiAgICAgIGhhc0ZvY3VzID0gZmFsc2U7XG4gICAgICBzZWxlY3RlZCA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgLy8gS2VlcCByZWZlcmVuY2UgdG8gY2xpY2sgaGFuZGxlciB0byB1bmJpbmQgaXQuXG4gICAgdmFyIGRpc21pc3NDbGlja0hhbmRsZXIgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgIC8vIElzc3VlICMzOTczXG4gICAgICAvLyBGaXJlZm94IHRyZWF0cyByaWdodCBjbGljayBhcyBhIGNsaWNrIG9uIGRvY3VtZW50XG4gICAgICBpZiAoZWxlbWVudFswXSAhPT0gZXZ0LnRhcmdldCAmJiBldnQud2hpY2ggIT09IDMgJiYgc2NvcGUubWF0Y2hlcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmVzZXRNYXRjaGVzKCk7XG4gICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgb3JpZ2luYWxTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJGRvY3VtZW50Lm9uKCdjbGljaycsIGRpc21pc3NDbGlja0hhbmRsZXIpO1xuXG4gICAgb3JpZ2luYWxTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAkZG9jdW1lbnQub2ZmKCdjbGljaycsIGRpc21pc3NDbGlja0hhbmRsZXIpO1xuICAgICAgaWYgKGFwcGVuZFRvQm9keSB8fCBhcHBlbmRUbykge1xuICAgICAgICAkcG9wdXAucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhcHBlbmRUb0JvZHkpIHtcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9mZigncmVzaXplJywgZmlyZVJlY2FsY3VsYXRpbmcpO1xuICAgICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLm9mZignc2Nyb2xsJywgZmlyZVJlY2FsY3VsYXRpbmcpO1xuICAgICAgfVxuICAgICAgLy8gUHJldmVudCBqUXVlcnkgY2FjaGUgbWVtb3J5IGxlYWtcbiAgICAgIHBvcFVwRWwucmVtb3ZlKCk7XG5cbiAgICAgIGlmIChzaG93SGludCkge1xuICAgICAgICAgIGlucHV0c0NvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciAkcG9wdXAgPSAkY29tcGlsZShwb3BVcEVsKShzY29wZSk7XG5cbiAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLmFwcGVuZCgkcG9wdXApO1xuICAgIH0gZWxzZSBpZiAoYXBwZW5kVG8pIHtcbiAgICAgIGFuZ3VsYXIuZWxlbWVudChhcHBlbmRUbykuZXEoMCkuYXBwZW5kKCRwb3B1cCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuYWZ0ZXIoJHBvcHVwKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXQgPSBmdW5jdGlvbihfbW9kZWxDdHJsLCBfbmdNb2RlbE9wdGlvbnMpIHtcbiAgICAgIG1vZGVsQ3RybCA9IF9tb2RlbEN0cmw7XG4gICAgICBuZ01vZGVsT3B0aW9ucyA9IF9uZ01vZGVsT3B0aW9ucztcblxuICAgICAgc2NvcGUuZGVib3VuY2VVcGRhdGUgPSBtb2RlbEN0cmwuJG9wdGlvbnMgJiYgJHBhcnNlKG1vZGVsQ3RybC4kb3B0aW9ucy5kZWJvdW5jZSkob3JpZ2luYWxTY29wZSk7XG5cbiAgICAgIC8vcGx1ZyBpbnRvICRwYXJzZXJzIHBpcGVsaW5lIHRvIG9wZW4gYSB0eXBlYWhlYWQgb24gdmlldyBjaGFuZ2VzIGluaXRpYXRlZCBmcm9tIERPTVxuICAgICAgLy8kcGFyc2VycyBraWNrLWluIG9uIGFsbCB0aGUgY2hhbmdlcyBjb21pbmcgZnJvbSB0aGUgdmlldyBhcyB3ZWxsIGFzIG1hbnVhbGx5IHRyaWdnZXJlZCBieSAkc2V0Vmlld1ZhbHVlXG4gICAgICBtb2RlbEN0cmwuJHBhcnNlcnMudW5zaGlmdChmdW5jdGlvbihpbnB1dFZhbHVlKSB7XG4gICAgICAgIGhhc0ZvY3VzID0gdHJ1ZTtcblxuICAgICAgICBpZiAobWluTGVuZ3RoID09PSAwIHx8IGlucHV0VmFsdWUgJiYgaW5wdXRWYWx1ZS5sZW5ndGggPj0gbWluTGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHdhaXRUaW1lID4gMCkge1xuICAgICAgICAgICAgY2FuY2VsUHJldmlvdXNUaW1lb3V0KCk7XG4gICAgICAgICAgICBzY2hlZHVsZVNlYXJjaFdpdGhUaW1lb3V0KGlucHV0VmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRNYXRjaGVzQXN5bmMoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzTG9hZGluZ1NldHRlcihvcmlnaW5hbFNjb3BlLCBmYWxzZSk7XG4gICAgICAgICAgY2FuY2VsUHJldmlvdXNUaW1lb3V0KCk7XG4gICAgICAgICAgcmVzZXRNYXRjaGVzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNFZGl0YWJsZSkge1xuICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgLy8gUmVzZXQgaW4gY2FzZSB1c2VyIGhhZCB0eXBlZCBzb21ldGhpbmcgcHJldmlvdXNseS5cbiAgICAgICAgICBtb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdlZGl0YWJsZScsIHRydWUpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZWRpdGFibGUnLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9KTtcblxuICAgICAgbW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24obW9kZWxWYWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlVmlld1ZhbHVlLCBlbXB0eVZpZXdWYWx1ZTtcbiAgICAgICAgdmFyIGxvY2FscyA9IHt9O1xuXG4gICAgICAgIC8vIFRoZSB2YWxpZGl0eSBtYXkgYmUgc2V0IHRvIGZhbHNlIHZpYSAkcGFyc2VycyAoc2VlIGFib3ZlKSBpZlxuICAgICAgICAvLyB0aGUgbW9kZWwgaXMgcmVzdHJpY3RlZCB0byBzZWxlY3RlZCB2YWx1ZXMuIElmIHRoZSBtb2RlbFxuICAgICAgICAvLyBpcyBzZXQgbWFudWFsbHkgaXQgaXMgY29uc2lkZXJlZCB0byBiZSB2YWxpZC5cbiAgICAgICAgaWYgKCFpc0VkaXRhYmxlKSB7XG4gICAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZWRpdGFibGUnLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnB1dEZvcm1hdHRlcikge1xuICAgICAgICAgIGxvY2Fscy4kbW9kZWwgPSBtb2RlbFZhbHVlO1xuICAgICAgICAgIHJldHVybiBpbnB1dEZvcm1hdHRlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pdCBtaWdodCBoYXBwZW4gdGhhdCB3ZSBkb24ndCBoYXZlIGVub3VnaCBpbmZvIHRvIHByb3Blcmx5IHJlbmRlciBpbnB1dCB2YWx1ZVxuICAgICAgICAvL3dlIG5lZWQgdG8gY2hlY2sgZm9yIHRoaXMgc2l0dWF0aW9uIGFuZCBzaW1wbHkgcmV0dXJuIG1vZGVsIHZhbHVlIGlmIHdlIGNhbid0IGFwcGx5IGN1c3RvbSBmb3JtYXR0aW5nXG4gICAgICAgIGxvY2Fsc1twYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gbW9kZWxWYWx1ZTtcbiAgICAgICAgY2FuZGlkYXRlVmlld1ZhbHVlID0gcGFyc2VyUmVzdWx0LnZpZXdNYXBwZXIob3JpZ2luYWxTY29wZSwgbG9jYWxzKTtcbiAgICAgICAgbG9jYWxzW3BhcnNlclJlc3VsdC5pdGVtTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIGVtcHR5Vmlld1ZhbHVlID0gcGFyc2VyUmVzdWx0LnZpZXdNYXBwZXIob3JpZ2luYWxTY29wZSwgbG9jYWxzKTtcblxuICAgICAgICByZXR1cm4gY2FuZGlkYXRlVmlld1ZhbHVlICE9PSBlbXB0eVZpZXdWYWx1ZSA/IGNhbmRpZGF0ZVZpZXdWYWx1ZSA6IG1vZGVsVmFsdWU7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XSlcblxuICAuZGlyZWN0aXZlKCd1aWJUeXBlYWhlYWQnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udHJvbGxlcjogJ1VpYlR5cGVhaGVhZENvbnRyb2xsZXInLFxuICAgICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ14/bmdNb2RlbE9wdGlvbnMnLCAndWliVHlwZWFoZWFkJ10sXG4gICAgICBsaW5rOiBmdW5jdGlvbihvcmlnaW5hbFNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgICAgY3RybHNbMl0uaW5pdChjdHJsc1swXSwgY3RybHNbMV0pO1xuICAgICAgfVxuICAgIH07XG4gIH0pXG5cbiAgLmRpcmVjdGl2ZSgndWliVHlwZWFoZWFkUG9wdXAnLCBbJyQkZGVib3VuY2UnLCBmdW5jdGlvbigkJGRlYm91bmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIG1hdGNoZXM6ICc9JyxcbiAgICAgICAgcXVlcnk6ICc9JyxcbiAgICAgICAgYWN0aXZlOiAnPScsXG4gICAgICAgIHBvc2l0aW9uOiAnJicsXG4gICAgICAgIG1vdmVJblByb2dyZXNzOiAnPScsXG4gICAgICAgIHNlbGVjdDogJyYnLFxuICAgICAgICBhc3NpZ25Jc09wZW46ICcmJyxcbiAgICAgICAgZGVib3VuY2U6ICcmJ1xuICAgICAgfSxcbiAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgcmV0dXJuIGF0dHJzLnBvcHVwVGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWwnO1xuICAgICAgfSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBzY29wZS50ZW1wbGF0ZVVybCA9IGF0dHJzLnRlbXBsYXRlVXJsO1xuXG4gICAgICAgIHNjb3BlLmlzT3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpc0Ryb3Bkb3duT3BlbiA9IHNjb3BlLm1hdGNoZXMubGVuZ3RoID4gMDtcbiAgICAgICAgICBzY29wZS5hc3NpZ25Jc09wZW4oeyBpc09wZW46IGlzRHJvcGRvd25PcGVuIH0pO1xuICAgICAgICAgIHJldHVybiBpc0Ryb3Bkb3duT3BlbjtcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKG1hdGNoSWR4KSB7XG4gICAgICAgICAgcmV0dXJuIHNjb3BlLmFjdGl2ZSA9PT0gbWF0Y2hJZHg7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuc2VsZWN0QWN0aXZlID0gZnVuY3Rpb24obWF0Y2hJZHgpIHtcbiAgICAgICAgICBzY29wZS5hY3RpdmUgPSBtYXRjaElkeDtcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5zZWxlY3RNYXRjaCA9IGZ1bmN0aW9uKGFjdGl2ZUlkeCwgZXZ0KSB7XG4gICAgICAgICAgdmFyIGRlYm91bmNlID0gc2NvcGUuZGVib3VuY2UoKTtcbiAgICAgICAgICBpZiAoYW5ndWxhci5pc051bWJlcihkZWJvdW5jZSkgfHwgYW5ndWxhci5pc09iamVjdChkZWJvdW5jZSkpIHtcbiAgICAgICAgICAgICQkZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHNjb3BlLnNlbGVjdCh7YWN0aXZlSWR4OiBhY3RpdmVJZHgsIGV2dDogZXZ0fSk7XG4gICAgICAgICAgICB9LCBhbmd1bGFyLmlzTnVtYmVyKGRlYm91bmNlKSA/IGRlYm91bmNlIDogZGVib3VuY2VbJ2RlZmF1bHQnXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjb3BlLnNlbGVjdCh7YWN0aXZlSWR4OiBhY3RpdmVJZHgsIGV2dDogZXZ0fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1dKVxuXG4gIC5kaXJlY3RpdmUoJ3VpYlR5cGVhaGVhZE1hdGNoJywgWyckdGVtcGxhdGVSZXF1ZXN0JywgJyRjb21waWxlJywgJyRwYXJzZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZVJlcXVlc3QsICRjb21waWxlLCAkcGFyc2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgaW5kZXg6ICc9JyxcbiAgICAgICAgbWF0Y2g6ICc9JyxcbiAgICAgICAgcXVlcnk6ICc9J1xuICAgICAgfSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICB2YXIgdHBsVXJsID0gJHBhcnNlKGF0dHJzLnRlbXBsYXRlVXJsKShzY29wZS4kcGFyZW50KSB8fCAndWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbCc7XG4gICAgICAgICR0ZW1wbGF0ZVJlcXVlc3QodHBsVXJsKS50aGVuKGZ1bmN0aW9uKHRwbENvbnRlbnQpIHtcbiAgICAgICAgICB2YXIgdHBsRWwgPSBhbmd1bGFyLmVsZW1lbnQodHBsQ29udGVudC50cmltKCkpO1xuICAgICAgICAgIGVsZW1lbnQucmVwbGFjZVdpdGgodHBsRWwpO1xuICAgICAgICAgICRjb21waWxlKHRwbEVsKShzY29wZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dKVxuXG4gIC5maWx0ZXIoJ3VpYlR5cGVhaGVhZEhpZ2hsaWdodCcsIFsnJHNjZScsICckaW5qZWN0b3InLCAnJGxvZycsIGZ1bmN0aW9uKCRzY2UsICRpbmplY3RvciwgJGxvZykge1xuICAgIHZhciBpc1Nhbml0aXplUHJlc2VudDtcbiAgICBpc1Nhbml0aXplUHJlc2VudCA9ICRpbmplY3Rvci5oYXMoJyRzYW5pdGl6ZScpO1xuXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnZXhwKHF1ZXJ5VG9Fc2NhcGUpIHtcbiAgICAgIC8vIFJlZ2V4OiBjYXB0dXJlIHRoZSB3aG9sZSBxdWVyeSBzdHJpbmcgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgc3RyaW5nIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1hdGNoXG4gICAgICAvLyB0aGUgcmVzdWx0cywgZm9yIGV4YW1wbGUgaWYgdGhlIGNhcHR1cmUgaXMgXCJhXCIgdGhlIHJlc3VsdCB3aWxsIGJlIFxcYVxuICAgICAgcmV0dXJuIHF1ZXJ5VG9Fc2NhcGUucmVwbGFjZSgvKFsuPyorXiRbXFxdXFxcXCgpe318LV0pL2csICdcXFxcJDEnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250YWluc0h0bWwobWF0Y2hJdGVtKSB7XG4gICAgICByZXR1cm4gLzwuKj4vZy50ZXN0KG1hdGNoSXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG1hdGNoSXRlbSwgcXVlcnkpIHtcbiAgICAgIGlmICghaXNTYW5pdGl6ZVByZXNlbnQgJiYgY29udGFpbnNIdG1sKG1hdGNoSXRlbSkpIHtcbiAgICAgICAgJGxvZy53YXJuKCdVbnNhZmUgdXNlIG9mIHR5cGVhaGVhZCBwbGVhc2UgdXNlIG5nU2FuaXRpemUnKTsgLy8gV2FybiB0aGUgdXNlciBhYm91dCB0aGUgZGFuZ2VyXG4gICAgICB9XG4gICAgICBtYXRjaEl0ZW0gPSBxdWVyeSA/ICgnJyArIG1hdGNoSXRlbSkucmVwbGFjZShuZXcgUmVnRXhwKGVzY2FwZVJlZ2V4cChxdWVyeSksICdnaScpLCAnPHN0cm9uZz4kJjwvc3Ryb25nPicpIDogbWF0Y2hJdGVtOyAvLyBSZXBsYWNlcyB0aGUgY2FwdHVyZSBzdHJpbmcgd2l0aCBhIHRoZSBzYW1lIHN0cmluZyBpbnNpZGUgb2YgYSBcInN0cm9uZ1wiIHRhZ1xuICAgICAgaWYgKCFpc1Nhbml0aXplUHJlc2VudCkge1xuICAgICAgICBtYXRjaEl0ZW0gPSAkc2NlLnRydXN0QXNIdG1sKG1hdGNoSXRlbSk7IC8vIElmICRzYW5pdGl6ZSBpcyBub3QgcHJlc2VudCB3ZSBwYWNrIHRoZSBzdHJpbmcgaW4gYSAkc2NlIG9iamVjdCBmb3IgdGhlIG5nLWJpbmQtaHRtbCBkaXJlY3RpdmVcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaEl0ZW07XG4gICAgfTtcbiAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi1ncm91cC5odG1sXCIsXG4gICAgXCI8ZGl2IHJvbGU9XFxcInRhYlxcXCIgaWQ9XFxcInt7OjpoZWFkaW5nSWR9fVxcXCIgYXJpYS1zZWxlY3RlZD1cXFwie3tpc09wZW59fVxcXCIgY2xhc3M9XFxcInBhbmVsLWhlYWRpbmdcXFwiIG5nLWtleXByZXNzPVxcXCJ0b2dnbGVPcGVuKCRldmVudClcXFwiPlxcblwiICtcbiAgICBcIiAgPGg0IGNsYXNzPVxcXCJwYW5lbC10aXRsZVxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxhIHJvbGU9XFxcImJ1dHRvblxcXCIgZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIiBocmVmIGFyaWEtZXhwYW5kZWQ9XFxcInt7aXNPcGVufX1cXFwiIGFyaWEtY29udHJvbHM9XFxcInt7OjpwYW5lbElkfX1cXFwiIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwiYWNjb3JkaW9uLXRvZ2dsZVxcXCIgbmctY2xpY2s9XFxcInRvZ2dsZU9wZW4oKVxcXCIgdWliLWFjY29yZGlvbi10cmFuc2NsdWRlPVxcXCJoZWFkaW5nXFxcIiBuZy1kaXNhYmxlZD1cXFwiaXNEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT48c3BhbiB1aWItYWNjb3JkaW9uLWhlYWRlciBuZy1jbGFzcz1cXFwieyd0ZXh0LW11dGVkJzogaXNEaXNhYmxlZH1cXFwiPnt7aGVhZGluZ319PC9zcGFuPjwvYT5cXG5cIiArXG4gICAgXCIgIDwvaDQ+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiPGRpdiBpZD1cXFwie3s6OnBhbmVsSWR9fVxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6aGVhZGluZ0lkfX1cXFwiIGFyaWEtaGlkZGVuPVxcXCJ7eyFpc09wZW59fVxcXCIgcm9sZT1cXFwidGFicGFuZWxcXFwiIGNsYXNzPVxcXCJwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZVxcXCIgdWliLWNvbGxhcHNlPVxcXCIhaXNPcGVuXFxcIj5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInBhbmVsLWJvZHlcXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi5odG1sXCIsXG4gICAgXCI8ZGl2IHJvbGU9XFxcInRhYmxpc3RcXFwiIGNsYXNzPVxcXCJwYW5lbC1ncm91cFxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2FsZXJ0L2FsZXJ0Lmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbFwiLFxuICAgIFwiPGJ1dHRvbiBuZy1zaG93PVxcXCJjbG9zZWFibGVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIiBuZy1jbGljaz1cXFwiY2xvc2UoeyRldmVudDogJGV2ZW50fSlcXFwiPlxcblwiICtcbiAgICBcIiAgPHNwYW4gYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPiZ0aW1lczs8L3NwYW4+XFxuXCIgK1xuICAgIFwiICA8c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+Q2xvc2U8L3NwYW4+XFxuXCIgK1xuICAgIFwiPC9idXR0b24+XFxuXCIgK1xuICAgIFwiPGRpdiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9jYXJvdXNlbC9jYXJvdXNlbC5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJjYXJvdXNlbC1pbm5lclxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCI8YSByb2xlPVxcXCJidXR0b25cXFwiIGhyZWYgY2xhc3M9XFxcImxlZnQgY2Fyb3VzZWwtY29udHJvbFxcXCIgbmctY2xpY2s9XFxcInByZXYoKVxcXCIgbmctY2xhc3M9XFxcInsgZGlzYWJsZWQ6IGlzUHJldkRpc2FibGVkKCkgfVxcXCIgbmctc2hvdz1cXFwic2xpZGVzLmxlbmd0aCA+IDFcXFwiPlxcblwiICtcbiAgICBcIiAgPHNwYW4gYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFxcXCI+PC9zcGFuPlxcblwiICtcbiAgICBcIiAgPHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPnByZXZpb3VzPC9zcGFuPlxcblwiICtcbiAgICBcIjwvYT5cXG5cIiArXG4gICAgXCI8YSByb2xlPVxcXCJidXR0b25cXFwiIGhyZWYgY2xhc3M9XFxcInJpZ2h0IGNhcm91c2VsLWNvbnRyb2xcXFwiIG5nLWNsaWNrPVxcXCJuZXh0KClcXFwiIG5nLWNsYXNzPVxcXCJ7IGRpc2FibGVkOiBpc05leHREaXNhYmxlZCgpIH1cXFwiIG5nLXNob3c9XFxcInNsaWRlcy5sZW5ndGggPiAxXFxcIj5cXG5cIiArXG4gICAgXCIgIDxzcGFuIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0XFxcIj48L3NwYW4+XFxuXCIgK1xuICAgIFwiICA8c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+bmV4dDwvc3Bhbj5cXG5cIiArXG4gICAgXCI8L2E+XFxuXCIgK1xuICAgIFwiPG9sIGNsYXNzPVxcXCJjYXJvdXNlbC1pbmRpY2F0b3JzXFxcIiBuZy1zaG93PVxcXCJzbGlkZXMubGVuZ3RoID4gMVxcXCI+XFxuXCIgK1xuICAgIFwiICA8bGkgbmctcmVwZWF0PVxcXCJzbGlkZSBpbiBzbGlkZXMgfCBvcmRlckJ5OmluZGV4T2ZTbGlkZSB0cmFjayBieSAkaW5kZXhcXFwiIG5nLWNsYXNzPVxcXCJ7IGFjdGl2ZTogaXNBY3RpdmUoc2xpZGUpIH1cXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3Qoc2xpZGUpXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPnNsaWRlIHt7ICRpbmRleCArIDEgfX0gb2Yge3sgc2xpZGVzLmxlbmd0aCB9fTxzcGFuIG5nLWlmPVxcXCJpc0FjdGl2ZShzbGlkZSlcXFwiPiwgY3VycmVudGx5IGFjdGl2ZTwvc3Bhbj48L3NwYW4+XFxuXCIgK1xuICAgIFwiICA8L2xpPlxcblwiICtcbiAgICBcIjwvb2w+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9jYXJvdXNlbC9zbGlkZS5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL2Nhcm91c2VsL3NsaWRlLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWxcIixcbiAgICBcIjxkaXYgbmctc3dpdGNoPVxcXCJkYXRlcGlja2VyTW9kZVxcXCI+XFxuXCIgK1xuICAgIFwiICA8ZGl2IHVpYi1kYXlwaWNrZXIgbmctc3dpdGNoLXdoZW49XFxcImRheVxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJ1aWItZGF5cGlja2VyXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCIgIDxkaXYgdWliLW1vbnRocGlja2VyIG5nLXN3aXRjaC13aGVuPVxcXCJtb250aFxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJ1aWItbW9udGhwaWNrZXJcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIiAgPGRpdiB1aWIteWVhcnBpY2tlciBuZy1zd2l0Y2gtd2hlbj1cXFwieWVhclxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJ1aWIteWVhcnBpY2tlclxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RheS5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF5Lmh0bWxcIixcbiAgICBcIjx0YWJsZSByb2xlPVxcXCJncmlkXFxcIiBhcmlhLWxhYmVsbGVkYnk9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQ9XFxcInt7YWN0aXZlRGF0ZUlkfX1cXFwiPlxcblwiICtcbiAgICBcIiAgPHRoZWFkPlxcblwiICtcbiAgICBcIiAgICA8dHI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLWxlZnQgdWliLWxlZnRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKC0xKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48aSBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0XFxcIj48L2k+PHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPnByZXZpb3VzPC9zcGFuPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoIGNvbHNwYW49XFxcInt7Ojo1ICsgc2hvd1dlZWtzfX1cXFwiPjxidXR0b24gaWQ9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiByb2xlPVxcXCJoZWFkaW5nXFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gdWliLXRpdGxlXFxcIiBuZy1jbGljaz1cXFwidG9nZ2xlTW9kZSgpXFxcIiBuZy1kaXNhYmxlZD1cXFwiZGF0ZXBpY2tlck1vZGUgPT09IG1heE1vZGVcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHN0cm9uZz57e3RpdGxlfX08L3N0cm9uZz48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1yaWdodCB1aWItcmlnaHRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKDEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0XFxcIj48L2k+PHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPm5leHQ8L3NwYW4+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgPHRyPlxcblwiICtcbiAgICBcIiAgICAgIDx0aCBuZy1pZj1cXFwic2hvd1dlZWtzXFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoIG5nLXJlcGVhdD1cXFwibGFiZWwgaW4gOjpsYWJlbHMgdHJhY2sgYnkgJGluZGV4XFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiPjxzbWFsbCBhcmlhLWxhYmVsPVxcXCJ7ezo6bGFiZWwuZnVsbH19XFxcIj57ezo6bGFiZWwuYWJicn19PC9zbWFsbD48L3RoPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90aGVhZD5cXG5cIiArXG4gICAgXCIgIDx0Ym9keT5cXG5cIiArXG4gICAgXCIgICAgPHRyIGNsYXNzPVxcXCJ1aWItd2Vla3NcXFwiIG5nLXJlcGVhdD1cXFwicm93IGluIHJvd3MgdHJhY2sgYnkgJGluZGV4XFxcIiByb2xlPVxcXCJyb3dcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1pZj1cXFwic2hvd1dlZWtzXFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXIgaDZcXFwiPjxlbT57eyB3ZWVrTnVtYmVyc1skaW5kZXhdIH19PC9lbT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1yZXBlYXQ9XFxcImR0IGluIHJvd1xcXCIgY2xhc3M9XFxcInVpYi1kYXkgdGV4dC1jZW50ZXJcXFwiIHJvbGU9XFxcImdyaWRjZWxsXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgaWQ9XFxcInt7OjpkdC51aWR9fVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgIG5nLWNsYXNzPVxcXCI6OmR0LmN1c3RvbUNsYXNzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgdWliLWlzLWNsYXNzPVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAnYnRuLWluZm8nIGZvciBzZWxlY3RlZER0LFxcblwiICtcbiAgICBcIiAgICAgICAgICAgICdhY3RpdmUnIGZvciBhY3RpdmVEdFxcblwiICtcbiAgICBcIiAgICAgICAgICAgIG9uIGR0XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICBuZy1jbGljaz1cXFwic2VsZWN0KGR0LmRhdGUpXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICBuZy1kaXNhYmxlZD1cXFwiOjpkdC5kaXNhYmxlZFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBuZy1jbGFzcz1cXFwiOjp7J3RleHQtbXV0ZWQnOiBkdC5zZWNvbmRhcnksICd0ZXh0LWluZm8nOiBkdC5jdXJyZW50fVxcXCI+e3s6OmR0LmxhYmVsfX08L3NwYW4+PC9idXR0b24+XFxuXCIgK1xuICAgIFwiICAgICAgPC90ZD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgIDwvdGJvZHk+XFxuXCIgK1xuICAgIFwiPC90YWJsZT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvbW9udGguaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL21vbnRoLmh0bWxcIixcbiAgICBcIjx0YWJsZSByb2xlPVxcXCJncmlkXFxcIiBhcmlhLWxhYmVsbGVkYnk9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQ9XFxcInt7YWN0aXZlRGF0ZUlkfX1cXFwiPlxcblwiICtcbiAgICBcIiAgPHRoZWFkPlxcblwiICtcbiAgICBcIiAgICA8dHI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLWxlZnQgdWliLWxlZnRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKC0xKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48aSBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0XFxcIj48L2k+PHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPnByZXZpb3VzPC9zcGFuPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoIGNvbHNwYW49XFxcInt7Ojp5ZWFySGVhZGVyQ29sc3Bhbn19XFxcIj48YnV0dG9uIGlkPVxcXCJ7ezo6dW5pcXVlSWR9fS10aXRsZVxcXCIgcm9sZT1cXFwiaGVhZGluZ1xcXCIgYXJpYS1saXZlPVxcXCJhc3NlcnRpdmVcXFwiIGFyaWEtYXRvbWljPVxcXCJ0cnVlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHVpYi10aXRsZVxcXCIgbmctY2xpY2s9XFxcInRvZ2dsZU1vZGUoKVxcXCIgbmctZGlzYWJsZWQ9XFxcImRhdGVwaWNrZXJNb2RlID09PSBtYXhNb2RlXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzdHJvbmc+e3t0aXRsZX19PC9zdHJvbmc+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtcmlnaHQgdWliLXJpZ2h0XFxcIiBuZy1jbGljaz1cXFwibW92ZSgxKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48aSBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFxcXCI+PC9pPjxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5uZXh0PC9zcGFuPjwvaT48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90aGVhZD5cXG5cIiArXG4gICAgXCIgIDx0Ym9keT5cXG5cIiArXG4gICAgXCIgICAgPHRyIGNsYXNzPVxcXCJ1aWItbW9udGhzXFxcIiBuZy1yZXBlYXQ9XFxcInJvdyBpbiByb3dzIHRyYWNrIGJ5ICRpbmRleFxcXCIgcm9sZT1cXFwicm93XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctcmVwZWF0PVxcXCJkdCBpbiByb3dcXFwiIGNsYXNzPVxcXCJ1aWItbW9udGggdGV4dC1jZW50ZXJcXFwiIHJvbGU9XFxcImdyaWRjZWxsXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgaWQ9XFxcInt7OjpkdC51aWR9fVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgIG5nLWNsYXNzPVxcXCI6OmR0LmN1c3RvbUNsYXNzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICB1aWItaXMtY2xhc3M9XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICdidG4taW5mbycgZm9yIHNlbGVjdGVkRHQsXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgJ2FjdGl2ZScgZm9yIGFjdGl2ZUR0XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgb24gZHRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIG5nLWNsaWNrPVxcXCJzZWxlY3QoZHQuZGF0ZSlcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIG5nLWRpc2FibGVkPVxcXCI6OmR0LmRpc2FibGVkXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIG5nLWNsYXNzPVxcXCI6OnsndGV4dC1pbmZvJzogZHQuY3VycmVudH1cXFwiPnt7OjpkdC5sYWJlbH19PC9zcGFuPjwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3Rib2R5PlxcblwiICtcbiAgICBcIjwvdGFibGU+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL3llYXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL3llYXIuaHRtbFwiLFxuICAgIFwiPHRhYmxlIHJvbGU9XFxcImdyaWRcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcXFwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cXFwie3thY3RpdmVEYXRlSWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICA8dGhlYWQ+XFxuXCIgK1xuICAgIFwiICAgIDx0cj5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtbGVmdCB1aWItbGVmdFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoLTEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnRcXFwiPjwvaT48c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+cHJldmlvdXM8L3NwYW4+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGggY29sc3Bhbj1cXFwie3s6OmNvbHVtbnMgLSAyfX1cXFwiPjxidXR0b24gaWQ9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiByb2xlPVxcXCJoZWFkaW5nXFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gdWliLXRpdGxlXFxcIiBuZy1jbGljaz1cXFwidG9nZ2xlTW9kZSgpXFxcIiBuZy1kaXNhYmxlZD1cXFwiZGF0ZXBpY2tlck1vZGUgPT09IG1heE1vZGVcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHN0cm9uZz57e3RpdGxlfX08L3N0cm9uZz48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1yaWdodCB1aWItcmlnaHRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKDEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0XFxcIj48L2k+PHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPm5leHQ8L3NwYW4+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgIDwvdGhlYWQ+XFxuXCIgK1xuICAgIFwiICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBjbGFzcz1cXFwidWliLXllYXJzXFxcIiBuZy1yZXBlYXQ9XFxcInJvdyBpbiByb3dzIHRyYWNrIGJ5ICRpbmRleFxcXCIgcm9sZT1cXFwicm93XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctcmVwZWF0PVxcXCJkdCBpbiByb3dcXFwiIGNsYXNzPVxcXCJ1aWIteWVhciB0ZXh0LWNlbnRlclxcXCIgcm9sZT1cXFwiZ3JpZGNlbGxcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICBpZD1cXFwie3s6OmR0LnVpZH19XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgbmctY2xhc3M9XFxcIjo6ZHQuY3VzdG9tQ2xhc3NcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIHVpYi1pcy1jbGFzcz1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgJ2J0bi1pbmZvJyBmb3Igc2VsZWN0ZWREdCxcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAnYWN0aXZlJyBmb3IgYWN0aXZlRHRcXG5cIiArXG4gICAgXCIgICAgICAgICAgICBvbiBkdFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgbmctY2xpY2s9XFxcInNlbGVjdChkdC5kYXRlKVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgbmctZGlzYWJsZWQ9XFxcIjo6ZHQuZGlzYWJsZWRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCI+PHNwYW4gbmctY2xhc3M9XFxcIjo6eyd0ZXh0LWluZm8nOiBkdC5jdXJyZW50fVxcXCI+e3s6OmR0LmxhYmVsfX08L3NwYW4+PC9idXR0b24+XFxuXCIgK1xuICAgIFwiICAgICAgPC90ZD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgIDwvdGJvZHk+XFxuXCIgK1xuICAgIFwiPC90YWJsZT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXJQb3B1cC9wb3B1cC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXJQb3B1cC9wb3B1cC5odG1sXCIsXG4gICAgXCI8dWwgcm9sZT1cXFwicHJlc2VudGF0aW9uXFxcIiBjbGFzcz1cXFwidWliLWRhdGVwaWNrZXItcG9wdXAgZHJvcGRvd24tbWVudSB1aWItcG9zaXRpb24tbWVhc3VyZVxcXCIgZHJvcGRvd24tbmVzdGVkIG5nLWlmPVxcXCJpc09wZW5cXFwiIG5nLWtleWRvd249XFxcImtleWRvd24oJGV2ZW50KVxcXCIgbmctY2xpY2s9XFxcIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKVxcXCI+XFxuXCIgK1xuICAgIFwiICA8bGkgbmctdHJhbnNjbHVkZT48L2xpPlxcblwiICtcbiAgICBcIiAgPGxpIG5nLWlmPVxcXCJzaG93QnV0dG9uQmFyXFxcIiBjbGFzcz1cXFwidWliLWJ1dHRvbi1iYXJcXFwiPlxcblwiICtcbiAgICBcIiAgICA8c3BhbiBjbGFzcz1cXFwiYnRuLWdyb3VwIHB1bGwtbGVmdFxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1pbmZvIHVpYi1kYXRlcGlja2VyLWN1cnJlbnRcXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3QoJ3RvZGF5JywgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcImlzRGlzYWJsZWQoJ3RvZGF5JylcXFwiPnt7IGdldFRleHQoJ2N1cnJlbnQnKSB9fTwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zbSBidG4tZGFuZ2VyIHVpYi1jbGVhclxcXCIgbmctY2xpY2s9XFxcInNlbGVjdChudWxsLCAkZXZlbnQpXFxcIj57eyBnZXRUZXh0KCdjbGVhcicpIH19PC9idXR0b24+XFxuXCIgK1xuICAgIFwiICAgIDwvc3Bhbj5cXG5cIiArXG4gICAgXCIgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1zdWNjZXNzIHB1bGwtcmlnaHQgdWliLWNsb3NlXFxcIiBuZy1jbGljaz1cXFwiY2xvc2UoJGV2ZW50KVxcXCI+e3sgZ2V0VGV4dCgnY2xvc2UnKSB9fTwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgPC9saT5cXG5cIiArXG4gICAgXCI8L3VsPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvbW9kYWwvd2luZG93Lmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvbW9kYWwvd2luZG93Lmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcIm1vZGFsLWRpYWxvZyB7e3NpemUgPyAnbW9kYWwtJyArIHNpemUgOiAnJ319XFxcIj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250ZW50XFxcIiB1aWItbW9kYWwtdHJhbnNjbHVkZT48L2Rpdj48L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3BhZ2VyL3BhZ2VyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcGFnZXIvcGFnZXIuaHRtbFwiLFxuICAgIFwiPGxpIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vUHJldmlvdXMoKXx8bmdEaXNhYmxlZCwgcHJldmlvdXM6IGFsaWdufVxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlIC0gMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vUHJldmlvdXMoKXx8bmdEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT57ezo6Z2V0VGV4dCgncHJldmlvdXMnKX19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiPGxpIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vTmV4dCgpfHxuZ0Rpc2FibGVkLCBuZXh0OiBhbGlnbn1cXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UocGFnZSArIDEsICRldmVudClcXFwiIG5nLWRpc2FibGVkPVxcXCJub05leHQoKXx8bmdEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT57ezo6Z2V0VGV4dCgnbmV4dCcpfX08L2E+PC9saT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5odG1sXCIsXG4gICAgXCI8bGkgbmctaWY9XFxcIjo6Ym91bmRhcnlMaW5rc1xcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tZmlyc3RcXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UoMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vUHJldmlvdXMoKXx8bmdEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT57ezo6Z2V0VGV4dCgnZmlyc3QnKX19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiPGxpIG5nLWlmPVxcXCI6OmRpcmVjdGlvbkxpbmtzXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub1ByZXZpb3VzKCl8fG5nRGlzYWJsZWR9XFxcIiBjbGFzcz1cXFwicGFnaW5hdGlvbi1wcmV2XFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHBhZ2UgLSAxLCAkZXZlbnQpXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCdwcmV2aW91cycpfX08L2E+PC9saT5cXG5cIiArXG4gICAgXCI8bGkgbmctcmVwZWF0PVxcXCJwYWdlIGluIHBhZ2VzIHRyYWNrIGJ5ICRpbmRleFxcXCIgbmctY2xhc3M9XFxcInthY3RpdmU6IHBhZ2UuYWN0aXZlLGRpc2FibGVkOiBuZ0Rpc2FibGVkJiYhcGFnZS5hY3RpdmV9XFxcIiBjbGFzcz1cXFwicGFnaW5hdGlvbi1wYWdlXFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHBhZ2UubnVtYmVyLCAkZXZlbnQpXFxcIiBuZy1kaXNhYmxlZD1cXFwibmdEaXNhYmxlZCYmIXBhZ2UuYWN0aXZlXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7cGFnZS50ZXh0fX08L2E+PC9saT5cXG5cIiArXG4gICAgXCI8bGkgbmctaWY9XFxcIjo6ZGlyZWN0aW9uTGlua3NcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vTmV4dCgpfHxuZ0Rpc2FibGVkfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tbmV4dFxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlICsgMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vTmV4dCgpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCduZXh0Jyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIjxsaSBuZy1pZj1cXFwiOjpib3VuZGFyeUxpbmtzXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub05leHQoKXx8bmdEaXNhYmxlZH1cXFwiIGNsYXNzPVxcXCJwYWdpbmF0aW9uLWxhc3RcXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UodG90YWxQYWdlcywgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vTmV4dCgpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCdsYXN0Jyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtcG9wdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtaHRtbC1wb3B1cC5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJ0b29sdGlwLWFycm93XFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJ0b29sdGlwLWlubmVyXFxcIiBuZy1iaW5kLWh0bWw9XFxcImNvbnRlbnRFeHAoKVxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1hcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1pbm5lclxcXCIgbmctYmluZD1cXFwiY29udGVudFxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtdGVtcGxhdGUtcG9wdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtdGVtcGxhdGUtcG9wdXAuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1hcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1pbm5lclxcXCJcXG5cIiArXG4gICAgXCIgIHVpYi10b29sdGlwLXRlbXBsYXRlLXRyYW5zY2x1ZGU9XFxcImNvbnRlbnRFeHAoKVxcXCJcXG5cIiArXG4gICAgXCIgIHRvb2x0aXAtdGVtcGxhdGUtdHJhbnNjbHVkZS1zY29wZT1cXFwib3JpZ2luU2NvcGUoKVxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItaHRtbC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci1odG1sLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcImFycm93XFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCJcXG5cIiArXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJwb3BvdmVyLWlubmVyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGgzIGNsYXNzPVxcXCJwb3BvdmVyLXRpdGxlXFxcIiBuZy1iaW5kPVxcXCJ1aWJUaXRsZVxcXCIgbmctaWY9XFxcInVpYlRpdGxlXFxcIj48L2gzPlxcblwiICtcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJwb3BvdmVyLWNvbnRlbnRcXFwiIG5nLWJpbmQtaHRtbD1cXFwiY29udGVudEV4cCgpXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci10ZW1wbGF0ZS5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci10ZW1wbGF0ZS5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJhcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1pbm5lclxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxoMyBjbGFzcz1cXFwicG9wb3Zlci10aXRsZVxcXCIgbmctYmluZD1cXFwidWliVGl0bGVcXFwiIG5nLWlmPVxcXCJ1aWJUaXRsZVxcXCI+PC9oMz5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1jb250ZW50XFxcIlxcblwiICtcbiAgICBcIiAgICAgIHVpYi10b29sdGlwLXRlbXBsYXRlLXRyYW5zY2x1ZGU9XFxcImNvbnRlbnRFeHAoKVxcXCJcXG5cIiArXG4gICAgXCIgICAgICB0b29sdGlwLXRlbXBsYXRlLXRyYW5zY2x1ZGUtc2NvcGU9XFxcIm9yaWdpblNjb3BlKClcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcImFycm93XFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCJcXG5cIiArXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJwb3BvdmVyLWlubmVyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGgzIGNsYXNzPVxcXCJwb3BvdmVyLXRpdGxlXFxcIiBuZy1iaW5kPVxcXCJ1aWJUaXRsZVxcXCIgbmctaWY9XFxcInVpYlRpdGxlXFxcIj48L2gzPlxcblwiICtcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJwb3BvdmVyLWNvbnRlbnRcXFwiIG5nLWJpbmQ9XFxcImNvbnRlbnRcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvYmFyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvYmFyLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInByb2dyZXNzLWJhclxcXCIgbmctY2xhc3M9XFxcInR5cGUgJiYgJ3Byb2dyZXNzLWJhci0nICsgdHlwZVxcXCIgcm9sZT1cXFwicHJvZ3Jlc3NiYXJcXFwiIGFyaWEtdmFsdWVub3c9XFxcInt7dmFsdWV9fVxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwie3ttYXh9fVxcXCIgbmctc3R5bGU9XFxcInt3aWR0aDogKHBlcmNlbnQgPCAxMDAgPyBwZXJjZW50IDogMTAwKSArICclJ31cXFwiIGFyaWEtdmFsdWV0ZXh0PVxcXCJ7e3BlcmNlbnQgfCBudW1iZXI6MH19JVxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6dGl0bGV9fVxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3MuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3NcXFwiIG5nLXRyYW5zY2x1ZGUgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6dGl0bGV9fVxcXCI+PC9kaXY+XCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzYmFyLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInByb2dyZXNzXFxcIj5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInByb2dyZXNzLWJhclxcXCIgbmctY2xhc3M9XFxcInR5cGUgJiYgJ3Byb2dyZXNzLWJhci0nICsgdHlwZVxcXCIgcm9sZT1cXFwicHJvZ3Jlc3NiYXJcXFwiIGFyaWEtdmFsdWVub3c9XFxcInt7dmFsdWV9fVxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwie3ttYXh9fVxcXCIgbmctc3R5bGU9XFxcInt3aWR0aDogKHBlcmNlbnQgPCAxMDAgPyBwZXJjZW50IDogMTAwKSArICclJ31cXFwiIGFyaWEtdmFsdWV0ZXh0PVxcXCJ7e3BlcmNlbnQgfCBudW1iZXI6MH19JVxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6dGl0bGV9fVxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3JhdGluZy9yYXRpbmcuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9yYXRpbmcvcmF0aW5nLmh0bWxcIixcbiAgICBcIjxzcGFuIG5nLW1vdXNlbGVhdmU9XFxcInJlc2V0KClcXFwiIG5nLWtleWRvd249XFxcIm9uS2V5ZG93bigkZXZlbnQpXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgcm9sZT1cXFwic2xpZGVyXFxcIiBhcmlhLXZhbHVlbWluPVxcXCIwXFxcIiBhcmlhLXZhbHVlbWF4PVxcXCJ7e3JhbmdlLmxlbmd0aH19XFxcIiBhcmlhLXZhbHVlbm93PVxcXCJ7e3ZhbHVlfX1cXFwiIGFyaWEtdmFsdWV0ZXh0PVxcXCJ7e3RpdGxlfX1cXFwiPlxcblwiICtcbiAgICBcIiAgICA8c3BhbiBuZy1yZXBlYXQtc3RhcnQ9XFxcInIgaW4gcmFuZ2UgdHJhY2sgYnkgJGluZGV4XFxcIiBjbGFzcz1cXFwic3Itb25seVxcXCI+KHt7ICRpbmRleCA8IHZhbHVlID8gJyonIDogJyAnIH19KTwvc3Bhbj5cXG5cIiArXG4gICAgXCIgICAgPGkgbmctcmVwZWF0LWVuZCBuZy1tb3VzZWVudGVyPVxcXCJlbnRlcigkaW5kZXggKyAxKVxcXCIgbmctY2xpY2s9XFxcInJhdGUoJGluZGV4ICsgMSlcXFwiIGNsYXNzPVxcXCJnbHlwaGljb25cXFwiIG5nLWNsYXNzPVxcXCIkaW5kZXggPCB2YWx1ZSAmJiAoci5zdGF0ZU9uIHx8ICdnbHlwaGljb24tc3RhcicpIHx8IChyLnN0YXRlT2ZmIHx8ICdnbHlwaGljb24tc3Rhci1lbXB0eScpXFxcIiBuZy1hdHRyLXRpdGxlPVxcXCJ7e3IudGl0bGV9fVxcXCI+PC9pPlxcblwiICtcbiAgICBcIjwvc3Bhbj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3RhYnMvdGFiLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdGFicy90YWIuaHRtbFwiLFxuICAgIFwiPGxpIG5nLWNsYXNzPVxcXCJbe2FjdGl2ZTogYWN0aXZlLCBkaXNhYmxlZDogZGlzYWJsZWR9LCBjbGFzc2VzXVxcXCIgY2xhc3M9XFxcInVpYi10YWIgbmF2LWl0ZW1cXFwiPlxcblwiICtcbiAgICBcIiAgPGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0KCRldmVudClcXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCIgdWliLXRhYi1oZWFkaW5nLXRyYW5zY2x1ZGU+e3toZWFkaW5nfX08L2E+XFxuXCIgK1xuICAgIFwiPC9saT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdGFicy90YWJzZXQuaHRtbFwiLFxuICAgIFwiPGRpdj5cXG5cIiArXG4gICAgXCIgIDx1bCBjbGFzcz1cXFwibmF2IG5hdi17e3RhYnNldC50eXBlIHx8ICd0YWJzJ319XFxcIiBuZy1jbGFzcz1cXFwieyduYXYtc3RhY2tlZCc6IHZlcnRpY2FsLCAnbmF2LWp1c3RpZmllZCc6IGp1c3RpZmllZH1cXFwiIG5nLXRyYW5zY2x1ZGU+PC91bD5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInRhYi1jb250ZW50XFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwidGFiLXBhbmVcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgbmctcmVwZWF0PVxcXCJ0YWIgaW4gdGFic2V0LnRhYnNcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgbmctY2xhc3M9XFxcInthY3RpdmU6IHRhYnNldC5hY3RpdmUgPT09IHRhYi5pbmRleH1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgdWliLXRhYi1jb250ZW50LXRyYW5zY2x1ZGU9XFxcInRhYlxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgPC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLFxuICAgIFwiPHRhYmxlIGNsYXNzPVxcXCJ1aWItdGltZXBpY2tlclxcXCI+XFxuXCIgK1xuICAgIFwiICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIG5nLXNob3c9XFxcIjo6c2hvd1NwaW5uZXJzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcInVpYi1pbmNyZW1lbnQgaG91cnNcXFwiPjxhIG5nLWNsaWNrPVxcXCJpbmNyZW1lbnRIb3VycygpXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub0luY3JlbWVudEhvdXJzKCl9XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9JbmNyZW1lbnRIb3VycygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXBcXFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQ+Jm5ic3A7PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcInVpYi1pbmNyZW1lbnQgbWludXRlc1xcXCI+PGEgbmctY2xpY2s9XFxcImluY3JlbWVudE1pbnV0ZXMoKVxcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9JbmNyZW1lbnRNaW51dGVzKCl9XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9JbmNyZW1lbnRNaW51dGVzKClcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cFxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93U2Vjb25kc1xcXCI+Jm5ic3A7PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiIGNsYXNzPVxcXCJ1aWItaW5jcmVtZW50IHNlY29uZHNcXFwiPjxhIG5nLWNsaWNrPVxcXCJpbmNyZW1lbnRTZWNvbmRzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vSW5jcmVtZW50U2Vjb25kcygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50U2Vjb25kcygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXBcXFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd01lcmlkaWFuXFxcIj48L3RkPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgICA8dHI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJmb3JtLWdyb3VwIHVpYi10aW1lIGhvdXJzXFxcIiBuZy1jbGFzcz1cXFwieydoYXMtZXJyb3InOiBpbnZhbGlkSG91cnN9XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwiSEhcXFwiIG5nLW1vZGVsPVxcXCJob3Vyc1xcXCIgbmctY2hhbmdlPVxcXCJ1cGRhdGVIb3VycygpXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHRleHQtY2VudGVyXFxcIiBuZy1yZWFkb25seT1cXFwiOjpyZWFkb25seUlucHV0XFxcIiBtYXhsZW5ndGg9XFxcIjJcXFwiIHRhYmluZGV4PVxcXCJ7ezo6dGFiaW5kZXh9fVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50SG91cnMoKVxcXCIgbmctYmx1cj1cXFwiYmx1cigpXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwidWliLXNlcGFyYXRvclxcXCI+OjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJmb3JtLWdyb3VwIHVpYi10aW1lIG1pbnV0ZXNcXFwiIG5nLWNsYXNzPVxcXCJ7J2hhcy1lcnJvcic6IGludmFsaWRNaW51dGVzfVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcIk1NXFxcIiBuZy1tb2RlbD1cXFwibWludXRlc1xcXCIgbmctY2hhbmdlPVxcXCJ1cGRhdGVNaW51dGVzKClcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdGV4dC1jZW50ZXJcXFwiIG5nLXJlYWRvbmx5PVxcXCI6OnJlYWRvbmx5SW5wdXRcXFwiIG1heGxlbmd0aD1cXFwiMlxcXCIgdGFiaW5kZXg9XFxcInt7Ojp0YWJpbmRleH19XFxcIiBuZy1kaXNhYmxlZD1cXFwibm9JbmNyZW1lbnRNaW51dGVzKClcXFwiIG5nLWJsdXI9XFxcImJsdXIoKVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiIGNsYXNzPVxcXCJ1aWItc2VwYXJhdG9yXFxcIj46PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcImZvcm0tZ3JvdXAgdWliLXRpbWUgc2Vjb25kc1xcXCIgbmctY2xhc3M9XFxcInsnaGFzLWVycm9yJzogaW52YWxpZFNlY29uZHN9XFxcIiBuZy1zaG93PVxcXCJzaG93U2Vjb25kc1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcIlNTXFxcIiBuZy1tb2RlbD1cXFwic2Vjb25kc1xcXCIgbmctY2hhbmdlPVxcXCJ1cGRhdGVTZWNvbmRzKClcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdGV4dC1jZW50ZXJcXFwiIG5nLXJlYWRvbmx5PVxcXCJyZWFkb25seUlucHV0XFxcIiBtYXhsZW5ndGg9XFxcIjJcXFwiIHRhYmluZGV4PVxcXCJ7ezo6dGFiaW5kZXh9fVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50U2Vjb25kcygpXFxcIiBuZy1ibHVyPVxcXCJibHVyKClcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXNob3c9XFxcInNob3dNZXJpZGlhblxcXCIgY2xhc3M9XFxcInVpYi10aW1lIGFtLXBtXFxcIj48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9Ub2dnbGVNZXJpZGlhbigpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCB0ZXh0LWNlbnRlclxcXCIgbmctY2xpY2s9XFxcInRvZ2dsZU1lcmlkaWFuKClcXFwiIG5nLWRpc2FibGVkPVxcXCJub1RvZ2dsZU1lcmlkaWFuKClcXFwiIHRhYmluZGV4PVxcXCJ7ezo6dGFiaW5kZXh9fVxcXCI+e3ttZXJpZGlhbn19PC9idXR0b24+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgPHRyIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCIgbmctc2hvdz1cXFwiOjpzaG93U3Bpbm5lcnNcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwidWliLWRlY3JlbWVudCBob3Vyc1xcXCI+PGEgbmctY2xpY2s9XFxcImRlY3JlbWVudEhvdXJzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vRGVjcmVtZW50SG91cnMoKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiIG5nLWRpc2FibGVkPVxcXCJub0RlY3JlbWVudEhvdXJzKClcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duXFxcIj48L3NwYW4+PC9hPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkPiZuYnNwOzwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJ1aWItZGVjcmVtZW50IG1pbnV0ZXNcXFwiPjxhIG5nLWNsaWNrPVxcXCJkZWNyZW1lbnRNaW51dGVzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vRGVjcmVtZW50TWludXRlcygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vRGVjcmVtZW50TWludXRlcygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93U2Vjb25kc1xcXCI+Jm5ic3A7PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiIGNsYXNzPVxcXCJ1aWItZGVjcmVtZW50IHNlY29uZHNcXFwiPjxhIG5nLWNsaWNrPVxcXCJkZWNyZW1lbnRTZWNvbmRzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vRGVjcmVtZW50U2Vjb25kcygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vRGVjcmVtZW50U2Vjb25kcygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93TWVyaWRpYW5cXFwiPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3Rib2R5PlxcblwiICtcbiAgICBcIjwvdGFibGU+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLW1hdGNoLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sXCIsXG4gICAgXCI8YSBocmVmXFxuXCIgK1xuICAgIFwiICAgdGFiaW5kZXg9XFxcIi0xXFxcIlxcblwiICtcbiAgICBcIiAgIG5nLWJpbmQtaHRtbD1cXFwibWF0Y2gubGFiZWwgfCB1aWJUeXBlYWhlYWRIaWdobGlnaHQ6cXVlcnlcXFwiXFxuXCIgK1xuICAgIFwiICAgbmctYXR0ci10aXRsZT1cXFwie3ttYXRjaC5sYWJlbH19XFxcIj48L2E+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCIsXG4gICAgXCI8dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnVcXFwiIG5nLXNob3c9XFxcImlzT3BlbigpICYmICFtb3ZlSW5Qcm9ncmVzc1xcXCIgbmctc3R5bGU9XFxcInt0b3A6IHBvc2l0aW9uKCkudG9wKydweCcsIGxlZnQ6IHBvc2l0aW9uKCkubGVmdCsncHgnfVxcXCIgcm9sZT1cXFwibGlzdGJveFxcXCIgYXJpYS1oaWRkZW49XFxcInt7IWlzT3BlbigpfX1cXFwiPlxcblwiICtcbiAgICBcIiAgICA8bGkgY2xhc3M9XFxcInVpYi10eXBlYWhlYWQtbWF0Y2hcXFwiIG5nLXJlcGVhdD1cXFwibWF0Y2ggaW4gbWF0Y2hlcyB0cmFjayBieSAkaW5kZXhcXFwiIG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiBpc0FjdGl2ZSgkaW5kZXgpIH1cXFwiIG5nLW1vdXNlZW50ZXI9XFxcInNlbGVjdEFjdGl2ZSgkaW5kZXgpXFxcIiBuZy1jbGljaz1cXFwic2VsZWN0TWF0Y2goJGluZGV4LCAkZXZlbnQpXFxcIiByb2xlPVxcXCJvcHRpb25cXFwiIGlkPVxcXCJ7ezo6bWF0Y2guaWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8ZGl2IHVpYi10eXBlYWhlYWQtbWF0Y2ggaW5kZXg9XFxcIiRpbmRleFxcXCIgbWF0Y2g9XFxcIm1hdGNoXFxcIiBxdWVyeT1cXFwicXVlcnlcXFwiIHRlbXBsYXRlLXVybD1cXFwidGVtcGxhdGVVcmxcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIiAgICA8L2xpPlxcblwiICtcbiAgICBcIjwvdWw+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5jYXJvdXNlbCcpLnJ1bihmdW5jdGlvbigpIHshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgIWFuZ3VsYXIuJCR1aWJDYXJvdXNlbENzcyAmJiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+Lm5nLWFuaW1hdGUuaXRlbTpub3QoLmxlZnQpOm5vdCgucmlnaHQpey13ZWJraXQtdHJhbnNpdGlvbjowcyBlYXNlLWluLW91dCBsZWZ0O3RyYW5zaXRpb246MHMgZWFzZS1pbi1vdXQgbGVmdH08L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliQ2Fyb3VzZWxDc3MgPSB0cnVlOyB9KTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZGF0ZXBpY2tlcicpLnJ1bihmdW5jdGlvbigpIHshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgIWFuZ3VsYXIuJCR1aWJEYXRlcGlja2VyQ3NzICYmIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCgnaGVhZCcpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4udWliLWRhdGVwaWNrZXIgLnVpYi10aXRsZXt3aWR0aDoxMDAlO30udWliLWRheSBidXR0b24sLnVpYi1tb250aCBidXR0b24sLnVpYi15ZWFyIGJ1dHRvbnttaW4td2lkdGg6MTAwJTt9LnVpYi1sZWZ0LC51aWItcmlnaHR7d2lkdGg6MTAwJX08L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliRGF0ZXBpY2tlckNzcyA9IHRydWU7IH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbicpLnJ1bihmdW5jdGlvbigpIHshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgIWFuZ3VsYXIuJCR1aWJQb3NpdGlvbkNzcyAmJiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnVpYi1wb3NpdGlvbi1tZWFzdXJle2Rpc3BsYXk6YmxvY2sgIWltcG9ydGFudDt2aXNpYmlsaXR5OmhpZGRlbiAhaW1wb3J0YW50O3Bvc2l0aW9uOmFic29sdXRlICFpbXBvcnRhbnQ7dG9wOi05OTk5cHggIWltcG9ydGFudDtsZWZ0Oi05OTk5cHggIWltcG9ydGFudDt9LnVpYi1wb3NpdGlvbi1zY3JvbGxiYXItbWVhc3VyZXtwb3NpdGlvbjphYnNvbHV0ZSAhaW1wb3J0YW50O3RvcDotOTk5OXB4ICFpbXBvcnRhbnQ7d2lkdGg6NTBweCAhaW1wb3J0YW50O2hlaWdodDo1MHB4ICFpbXBvcnRhbnQ7b3ZlcmZsb3c6c2Nyb2xsICFpbXBvcnRhbnQ7fS51aWItcG9zaXRpb24tYm9keS1zY3JvbGxiYXItbWVhc3VyZXtvdmVyZmxvdzpzY3JvbGwgIWltcG9ydGFudDt9PC9zdHlsZT4nKTsgYW5ndWxhci4kJHVpYlBvc2l0aW9uQ3NzID0gdHJ1ZTsgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRhdGVwaWNrZXJQb3B1cCcpLnJ1bihmdW5jdGlvbigpIHshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgIWFuZ3VsYXIuJCR1aWJEYXRlcGlja2VycG9wdXBDc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi51aWItZGF0ZXBpY2tlci1wb3B1cC5kcm9wZG93bi1tZW51e2Rpc3BsYXk6YmxvY2s7ZmxvYXQ6bm9uZTttYXJnaW46MDt9LnVpYi1idXR0b24tYmFye3BhZGRpbmc6MTBweCA5cHggMnB4O308L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliRGF0ZXBpY2tlcnBvcHVwQ3NzID0gdHJ1ZTsgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRvb2x0aXAnKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliVG9vbHRpcENzcyAmJiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+W3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLnRvcC1sZWZ0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLnRvcC1yaWdodCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1wb3B1cF0udG9vbHRpcC5ib3R0b20tbGVmdCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1wb3B1cF0udG9vbHRpcC5ib3R0b20tcmlnaHQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtcG9wdXBdLnRvb2x0aXAubGVmdC10b3AgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtcG9wdXBdLnRvb2x0aXAubGVmdC1ib3R0b20gPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtcG9wdXBdLnRvb2x0aXAucmlnaHQtdG9wID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLnJpZ2h0LWJvdHRvbSA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLnRvcC1sZWZ0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAudG9wLXJpZ2h0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAuYm90dG9tLWxlZnQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtaHRtbC1wb3B1cF0udG9vbHRpcC5ib3R0b20tcmlnaHQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtaHRtbC1wb3B1cF0udG9vbHRpcC5sZWZ0LXRvcCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLmxlZnQtYm90dG9tID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAucmlnaHQtdG9wID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAucmlnaHQtYm90dG9tID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLnRvcC1sZWZ0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLnRvcC1yaWdodCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cF0udG9vbHRpcC5ib3R0b20tbGVmdCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cF0udG9vbHRpcC5ib3R0b20tcmlnaHQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtdGVtcGxhdGUtcG9wdXBdLnRvb2x0aXAubGVmdC10b3AgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtdGVtcGxhdGUtcG9wdXBdLnRvb2x0aXAubGVmdC1ib3R0b20gPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtdGVtcGxhdGUtcG9wdXBdLnRvb2x0aXAucmlnaHQtdG9wID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLnJpZ2h0LWJvdHRvbSA+IC50b29sdGlwLWFycm93LFt1aWItcG9wb3Zlci1wb3B1cF0ucG9wb3Zlci50b3AtbGVmdCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIudG9wLXJpZ2h0ID4gLmFycm93LFt1aWItcG9wb3Zlci1wb3B1cF0ucG9wb3Zlci5ib3R0b20tbGVmdCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIuYm90dG9tLXJpZ2h0ID4gLmFycm93LFt1aWItcG9wb3Zlci1wb3B1cF0ucG9wb3Zlci5sZWZ0LXRvcCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIubGVmdC1ib3R0b20gPiAuYXJyb3csW3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLnJpZ2h0LXRvcCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIucmlnaHQtYm90dG9tID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLnRvcC1sZWZ0ID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLnRvcC1yaWdodCA+IC5hcnJvdyxbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3Zlci5ib3R0b20tbGVmdCA+IC5hcnJvdyxbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3Zlci5ib3R0b20tcmlnaHQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLWh0bWwtcG9wdXBdLnBvcG92ZXIubGVmdC10b3AgPiAuYXJyb3csW3VpYi1wb3BvdmVyLWh0bWwtcG9wdXBdLnBvcG92ZXIubGVmdC1ib3R0b20gPiAuYXJyb3csW3VpYi1wb3BvdmVyLWh0bWwtcG9wdXBdLnBvcG92ZXIucmlnaHQtdG9wID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLnJpZ2h0LWJvdHRvbSA+IC5hcnJvdyxbdWliLXBvcG92ZXItdGVtcGxhdGUtcG9wdXBdLnBvcG92ZXIudG9wLWxlZnQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLnRvcC1yaWdodCA+IC5hcnJvdyxbdWliLXBvcG92ZXItdGVtcGxhdGUtcG9wdXBdLnBvcG92ZXIuYm90dG9tLWxlZnQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLmJvdHRvbS1yaWdodCA+IC5hcnJvdyxbdWliLXBvcG92ZXItdGVtcGxhdGUtcG9wdXBdLnBvcG92ZXIubGVmdC10b3AgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLmxlZnQtYm90dG9tID4gLmFycm93LFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3Zlci5yaWdodC10b3AgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLnJpZ2h0LWJvdHRvbSA+IC5hcnJvd3t0b3A6YXV0bztib3R0b206YXV0bztsZWZ0OmF1dG87cmlnaHQ6YXV0bzttYXJnaW46MDt9W3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3ZlcntkaXNwbGF5OmJsb2NrICFpbXBvcnRhbnQ7fTwvc3R5bGU+Jyk7IGFuZ3VsYXIuJCR1aWJUb29sdGlwQ3NzID0gdHJ1ZTsgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRpbWVwaWNrZXInKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliVGltZXBpY2tlckNzcyAmJiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnVpYi10aW1lIGlucHV0e3dpZHRoOjUwcHg7fTwvc3R5bGU+Jyk7IGFuZ3VsYXIuJCR1aWJUaW1lcGlja2VyQ3NzID0gdHJ1ZTsgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnR5cGVhaGVhZCcpLnJ1bihmdW5jdGlvbigpIHshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgIWFuZ3VsYXIuJCR1aWJUeXBlYWhlYWRDc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlt1aWItdHlwZWFoZWFkLXBvcHVwXS5kcm9wZG93bi1tZW51e2Rpc3BsYXk6YmxvY2s7fTwvc3R5bGU+Jyk7IGFuZ3VsYXIuJCR1aWJUeXBlYWhlYWRDc3MgPSB0cnVlOyB9KTsiXX0=
